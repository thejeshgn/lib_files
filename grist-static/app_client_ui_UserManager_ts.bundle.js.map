{"version":3,"file":"app_client_ui_UserManager_ts.bundle.js","mappings":"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","sources":["./app/client/lib/ACUserManager.ts?","./app/client/lib/MultiUserManager.ts?","./app/client/models/UserManagerModel.ts?","./app/client/ui/UserItem.ts?","./app/client/ui/UserManager.ts?","./app/common/ShareAnnotator.ts?","./app/common/emails.ts?"],"sourcesContent":["import {makeT} from 'app/client/lib/localization';\nimport {ACIndex, ACItem, ACResults, buildHighlightedDom, normalizeText} from \"app/client/lib/ACIndex\";\nimport {cssSelectItem} from \"app/client/lib/ACSelect\";\nimport {Autocomplete, IAutocompleteOptions} from \"app/client/lib/autocomplete\";\nimport {colors, testId, theme} from \"app/client/ui2018/cssVars\";\nimport {menuCssClass} from \"app/client/ui2018/menus\";\nimport {\n  cssEmailInput,\n  cssEmailInputContainer,\n  cssMailIcon,\n  cssMemberImage,\n  cssMemberListItem,\n  cssMemberPrimary,\n  cssMemberSecondary,\n  cssMemberText,\n} from \"app/client/ui/UserItem\";\nimport {createUserImage, cssUserImage} from \"app/client/ui/UserImage\";\nimport {Computed, computed, dom, DomElementArg, Holder, IDisposableOwner, Observable, styled} from \"grainjs\";\nimport {cssMenuItem} from \"popweasel\";\n\nconst t = makeT('ACUserManager');\n\nexport interface ACUserItem extends ACItem {\n  value: string;\n  label: string;\n  name: string;\n  email: string;\n  id: number;\n  picture?: string | null; // when present, a url to a public image of unspecified dimensions.\n  isNew?: boolean;\n}\n\nexport function buildACMemberEmail(\n  owner: IDisposableOwner,\n  options: {\n    acIndex: ACIndex<ACUserItem>;\n    emailObs: Observable<string>;\n    save: (value: string) => void;\n    prompt?: {email: string},\n  },\n  ...args: DomElementArg[]\n) {\n  const {acIndex, emailObs, save, prompt} = options;\n  const acHolder = Holder.create<Autocomplete<ACUserItem>>(owner);\n  let emailInput: HTMLInputElement;\n\n  const isValid = Observable.create(owner, true);\n\n  const isOpen = () => !acHolder.isEmpty();\n  const acOpen = () => acHolder.isEmpty() && Autocomplete.create(acHolder, emailInput, acOptions);\n  const acClose = () => acHolder.clear();\n  const finish = () => {\n    acClose();\n    emailObs.set(\"\");\n    emailInput.value = emailObs.get();\n    emailInput.focus();\n  };\n  const onEnter = () => {\n    isOpen() ? commitIfValid() : acOpen();\n  };\n\n  const commitIfValid = () => {\n    const item = acHolder.get()?.getSelectedItem();\n    if (item) {\n      emailObs.set(item.value);\n    }\n    emailInput.setCustomValidity(\"\");\n    isValid.set(emailInput.checkValidity());\n\n    const selectedEmail = item?.value || emailObs.get();\n    try {\n      if (selectedEmail && isValid.get()) {\n        save(emailObs.get());\n        finish();\n      }\n    } catch (e) {\n      emailInput.setCustomValidity(e.message);\n    } finally {\n      emailInput.reportValidity();\n    }\n  };\n\n  const maybeShowAddNew = async (results: ACResults<ACUserItem>, text: string): Promise<ACResults<ACUserItem>> => {\n    const cleanText = normalizeText(text);\n    const items = results.items\n      .filter(item => item.cleanText.includes(cleanText))\n      .sort((a, b) => a.cleanText.localeCompare(b.cleanText));\n    results.items = items;\n    if (!results.items.length && cleanText) {\n      const newObject = {\n        value: text,\n        cleanText,\n        name: \"\",\n        email: \"\",\n        isNew: true,\n        label: text,\n        id: 0,\n      };\n      results.items.push(newObject);\n    }\n    return results;\n  };\n\n  const renderSearchItem = (item: ACUserItem, highlightFunc: any): HTMLLIElement => (item?.isNew ? cssSelectItem(\n    cssMemberListItem(\n      cssUserImagePlus(\n        \"+\",\n        cssUserImage.cls(\"-large\"),\n        cssUserImagePlus.cls('-invalid', (use) => !use(enableAdd),\n        )),\n      cssMemberText(\n        cssMemberPrimaryPlus(t(\"Invite new member\")),\n        cssMemberSecondaryPlus(\n          // dom.text(use => `We'll email an invite to ${use(emailObs)}`)\n          dom.text(use => t(\"We'll email an invite to {{email}}\", {email: use(emailObs)})) // TODO i18next\n        )\n      ),\n      testId(\"um-add-email\")\n    )\n  ) : cssSelectItem(\n    cssMemberListItem(\n      cssMemberImage(createUserImage(item, \"large\")),\n      cssMemberText(\n        cssMemberPrimaryPlus(item.name, testId(\"um-member-name\")),\n        cssMemberSecondaryPlus(buildHighlightedDom(item.label, highlightFunc, cssMatchText))\n      )\n    )\n  ));\n\n  const enableAdd: Computed<boolean> = computed((use) => Boolean(use(emailObs) && use(isValid)));\n\n  const acOptions: IAutocompleteOptions<ACUserItem> = {\n    attach: null,\n    menuCssClass: `${menuCssClass} test-acselect-dropdown`,\n    search: (term) => maybeShowAddNew(acIndex.search(term), term),\n    renderItem: renderSearchItem,\n    getItemText: (item) => item.value,\n    onClick: commitIfValid,\n  };\n\n  const result = cssEmailInputContainer(\n    cssMailIcon(\"Mail\"),\n    (emailInput = cssEmailInput(\n      emailObs,\n      {onInput: true, isValid},\n      {type: \"email\", placeholder: t(\"Enter email address\")},\n      dom.on(\"input\", acOpen),\n      dom.on(\"focus\", acOpen),\n      dom.on(\"click\", acOpen),\n      dom.on(\"blur\", acClose),\n      dom.onKeyDown({\n        Escape: finish,\n        Enter: onEnter,\n        ArrowDown: acOpen,\n        Tab: commitIfValid,\n      }),\n    )),\n    cssEmailInputContainer.cls('-green', enableAdd),\n    ...args\n  );\n\n  // Reset custom validity that we sometimes set.\n  owner.autoDispose(emailObs.addListener(() => emailInput.setCustomValidity(\"\")));\n\n  if (prompt) { setTimeout(() => emailInput.focus(), 0); }\n\n  return result;\n}\n\nconst cssMemberPrimaryPlus = styled(cssMemberPrimary, `\n  .${cssSelectItem.className}.selected & {\n    color: ${theme.menuItemSelectedFg};\n  }\n`);\n\nconst cssMemberSecondaryPlus = styled(cssMemberSecondary, `\n  .${cssSelectItem.className}.selected & {\n    color: ${theme.menuItemSelectedFg};\n  }\n`);\n\nconst cssMatchText = styled(\"span\", `\n  color: ${theme.autocompleteMatchText};\n  .${cssSelectItem.className}.selected & {\n    color: ${theme.autocompleteSelectedMatchText};\n  }\n`);\n\nconst cssUserImagePlus = styled(cssUserImage, `\n  background-color: ${colors.lightGreen};\n  margin: auto 0;\n\n  &-invalid {\n    background-color: ${colors.mediumGrey};\n  }\n\n  .${cssMenuItem.className}-sel & {\n    background-color: ${theme.menuItemIconSelectedFg};\n    color: ${theme.menuItemSelectedBg};\n  }\n`);\n","import {computed, Computed, dom, DomElementArg, IDisposableOwner, Observable, styled} from \"grainjs\";\nimport {cssAnimatedModal, cssModalBody, cssModalButtons, cssModalTitle,\n        IModalControl, modal} from 'app/client/ui2018/modals';\nimport {bigBasicButton, bigPrimaryButton} from 'app/client/ui2018/buttons';\nimport {mediaXSmall, testId, theme, vars} from 'app/client/ui2018/cssVars';\nimport {IOrgMemberSelectOption, UserManagerModel} from 'app/client/models/UserManagerModel';\nimport {icon} from 'app/client/ui2018/icons';\nimport {textarea} from \"app/client/ui/inputs\";\nimport {BasicRole, isBasicRole, NonGuestRole, VIEWER} from \"app/common/roles\";\nimport {menu, menuItem} from 'app/client/ui2018/menus';\n\nfunction parseEmailList(emailListRaw: string): Array<string> {\n  return emailListRaw\n    .split('\\n')\n    .map(email => email.trim().toLowerCase())\n    .filter(email => email !== \"\");\n}\n\nfunction validateEmail(email: string): boolean {\n  const mailformat = /\\S+@\\S+\\.\\S+/;\n  return mailformat.test(email);\n}\n\nexport function buildMultiUserManagerModal(\n  owner: IDisposableOwner,\n  model: UserManagerModel,\n  onAdd: (email: string, role: NonGuestRole) => void,\n) {\n  const emailListObs = Observable.create(owner, \"\");\n  const rolesObs = Observable.create<BasicRole>(owner, VIEWER);\n  const isValidObs = Observable.create(owner, true);\n\n  const enableAdd: Computed<boolean> = computed(\n    (use) => Boolean(use(emailListObs) && use(rolesObs) && use(isValidObs))\n  );\n\n  const save = (ctl: IModalControl) => {\n    const emailList = parseEmailList(emailListObs.get());\n    const role = rolesObs.get();\n    if (emailList.some(email => !validateEmail(email))) {\n      isValidObs.set(false);\n    } else {\n      emailList.forEach(email => onAdd(email, role));\n      ctl.close();\n    }\n  };\n\n  return modal(ctl => [\n    { style: 'padding: 0;' },\n    dom.cls(cssAnimatedModal.className),\n    cssTitle(\n      'Invite Users',\n      testId('um-header'),\n    ),\n    cssModalBody(\n      cssUserManagerBody(\n        buildEmailsTextarea(emailListObs, isValidObs),\n        dom.maybe(use => !use(isValidObs), () => cssErrorMessage('At least one email is invalid')),\n        cssInheritRoles(\n          dom('span', 'Access: '),\n          buildRolesSelect(rolesObs, model)\n        )\n      ),\n    ),\n    cssModalButtons(\n      { style: 'margin: 32px 64px; display: flex;' },\n      bigPrimaryButton('Confirm',\n        dom.boolAttr('disabled', (use) => !use(enableAdd)),\n        dom.on('click', () => save(ctl)),\n        testId('um-confirm')\n      ),\n      bigBasicButton(\n        'Cancel',\n        dom.on('click', () => ctl.close()),\n        testId('um-cancel')\n      ),\n    )\n  ]);\n}\n\nfunction buildRolesSelect(\n  roleSelectedObs: Observable<BasicRole>,\n  model: UserManagerModel,\n) {\n  const allRoles = (model.isOrg ? model.orgUserSelectOptions : model.userSelectOptions)\n    .filter((x): x is {value: BasicRole, label: string} => isBasicRole(x.value));\n  return cssOptionBtn(\n    menu(() => [\n      dom.forEach(allRoles, (_role) =>\n        menuItem(() => roleSelectedObs.set(_role.value), _role.label,\n          testId(`um-role-option`)\n        )\n      )\n    ]),\n    dom.text((use) => {\n      // Get the label of the active role.\n      const activeRole = allRoles.find((_role: IOrgMemberSelectOption) => use(roleSelectedObs) === _role.value);\n      return activeRole ? activeRole.label : \"\";\n    }),\n    cssCollapseIcon('Collapse'),\n    testId('um-role-select')\n  );\n}\n\n\nfunction buildEmailsTextarea(\n  emailListObs: Observable<string>,\n  isValidObs: Observable<boolean>,\n  ...args: DomElementArg[]\n) {\n  return cssTextarea(emailListObs,\n    {onInput: true, isValid: isValidObs},\n    {placeholder: \"Enter one email address per line\"},\n    dom.on('change', (_ev) => isValidObs.set(true)),\n     ...args,\n  );\n}\n\n\nconst cssTitle = styled(cssModalTitle, `\n  margin: 40px 64px 0 64px;\n\n  @media ${mediaXSmall} {\n    & {\n      margin: 16px;\n    }\n  }\n`);\n\nconst cssInheritRoles = styled('span', `\n  margin: 13px 63px 42px;\n`);\n\nconst cssErrorMessage = styled('span', `\n  margin: 0 63px;\n  color: ${theme.errorText};\n`);\n\nconst cssOptionBtn = styled('span', `\n  display: inline-flex;\n  font-size: ${vars.mediumFontSize};\n  color: ${theme.controlFg};\n  cursor: pointer;\n`);\n\nconst cssCollapseIcon = styled(icon, `\n  margin-top: 1px;\n  background-color: ${theme.controlFg};\n`);\n\nconst cssAccessDetailsBody = styled('div', `\n  display: flex;\n  flex-direction: column;\n  width: 600px;\n  font-size: ${vars.mediumFontSize};\n`);\n\nconst cssUserManagerBody = styled(cssAccessDetailsBody, `\n  height: 374px;\n  border-bottom: 1px solid ${theme.modalBorderDark};\n`);\n\nconst cssTextarea = styled(textarea, `\n  margin: 16px 63px;\n  padding: 12px 10px;\n  border-radius: 3px;\n  resize: none;\n  border: 1px solid ${theme.inputBorder};\n  color: ${theme.inputFg};\n  background-color: ${theme.inputBg};\n  flex: 1 1 0;\n  font-size: ${vars.mediumFontSize};\n  font-family: ${vars.fontFamily};\n  outline: none;\n\n  &::placeholder {\n    color: ${theme.inputPlaceholderFg};\n  }\n`);\n","import {makeT} from 'app/client/lib/localization';\nimport {GristDoc} from 'app/client/components/GristDoc';\nimport {AppModel} from 'app/client/models/AppModel';\nimport {DocPageModel} from 'app/client/models/DocPageModel';\nimport {ShareAnnotations, ShareAnnotator} from 'app/common/ShareAnnotator';\nimport {normalizeEmail} from 'app/common/emails';\nimport {GristLoadConfig} from 'app/common/gristUrls';\nimport * as roles from 'app/common/roles';\nimport {getGristConfig} from 'app/common/urlUtils';\nimport {ANONYMOUS_USER_EMAIL, Document, EVERYONE_EMAIL, FullUser, getRealAccess, Organization,\n        PermissionData, PermissionDelta, UserAPI, Workspace} from 'app/common/UserAPI';\nimport {computed, Computed, Disposable, obsArray, ObsArray, observable, Observable} from 'grainjs';\nimport some = require('lodash/some');\n\nconst t = makeT('UserManagerModel');\n\nexport interface UserManagerModel {\n  initData: PermissionData;                    // PermissionData used to initialize the UserManager\n  resource: Resource|null;                     // The access resource.\n  resourceType: ResourceType;                  // String representing the access resource type.\n  userSelectOptions: IMemberSelectOption[];    // Select options for each user's role dropdown\n  orgUserSelectOptions: IOrgMemberSelectOption[];  // Select options for each user's role dropdown on the org\n  inheritSelectOptions: IMemberSelectOption[]; // Select options for the maxInheritedRole dropdown\n  publicUserSelectOptions: IMemberSelectOption[]; // Select options for the public member's role dropdown\n  maxInheritedRole: Observable<roles.BasicRole|null>;  // Current unsaved maxInheritedRole setting\n  membersEdited: ObsArray<IEditableMember>;    // Current unsaved editable array of members\n  publicMember: IEditableMember|null;          // Member whose access (VIEWER or null) represents that of\n                                               // anon@ or everyone@ (depending on the settings and resource).\n  isAnythingChanged: Computed<boolean>;        // Indicates whether there are unsaved changes\n  isSelfRemoved: Computed<boolean>;            // Indicates whether current user is removed\n  isOrg: boolean;                              // Indicates if the UserManager is for an org\n  annotations: Observable<ShareAnnotations>;   // More information about shares, keyed by email.\n  isPersonal: boolean;                         // If user access info/control is restricted to self.\n  isPublicMember: boolean;                     // Indicates if current user is a public member.\n\n  activeUser: FullUser|null;                   // Populated if current user is logged in.\n  gristDoc: GristDoc|null;                     // Populated if there is an open document.\n\n  // Analyze the relation that users have to the resource or site.\n  annotate(): void;\n  // Resets all unsaved changes\n  reset(): void;\n  // Recreate annotations, factoring in any changes on the back-end.\n  reloadAnnotations(): Promise<void>;\n  // Writes all unsaved changes to the server.\n  save(userApi: UserAPI, resourceId: number|string): Promise<void>;\n  // Adds a member to membersEdited\n  add(email: string, role: roles.Role|null): void;\n  // Removes a member from membersEdited\n  remove(member: IEditableMember): void;\n  // Returns a boolean indicating if the member is the currently active user.\n  isActiveUser(member: IEditableMember): boolean;\n  // Returns the PermissionDelta reflecting the current unsaved changes in the model.\n  getDelta(): PermissionDelta;\n}\n\nexport type ResourceType = 'organization'|'workspace'|'document';\n\nexport type Resource = Organization|Workspace|Document;\n\nexport interface IEditableMember {\n  id: number;    // Newly invited members do not have ids and are represented by -1\n  name: string;\n  email: string;\n  picture?: string|null;\n  locale?: string|null;\n  access: Observable<roles.Role|null>;\n  parentAccess: roles.BasicRole|null;\n  inheritedAccess: Computed<roles.BasicRole|null>;\n  effectiveAccess: Computed<roles.Role|null>;\n  origAccess: roles.Role|null;\n  isNew: boolean;\n  isRemoved: boolean;\n  isTeamMember?: boolean;\n}\n\n// An option for the select elements used in the UserManager.\nexport interface IMemberSelectOption {\n  value: roles.BasicRole|null;\n  label: string;\n}\n\n// An option for the organization select elements used in the UserManager.\nexport interface IOrgMemberSelectOption {\n  value: roles.NonGuestRole|null;\n  label: string;\n}\n\ninterface IBuildMemberOptions {\n  id: number;\n  name: string;\n  email: string;\n  picture?: string|null;\n  access: roles.Role|null;\n  parentAccess: roles.BasicRole|null;\n  isTeamMember?: boolean;\n}\n\n/**\n *\n */\nexport class UserManagerModelImpl extends Disposable implements UserManagerModel {\n  // Select options for each individual user's role dropdown.\n  public readonly userSelectOptions: IMemberSelectOption[] = [\n    { value: roles.OWNER,  label: t(\"Owner\")  },\n    { value: roles.EDITOR, label: t(\"Editor\") },\n    { value: roles.VIEWER, label: t(\"Viewer\") }\n  ];\n  // Select options for each individual user's role dropdown in the org.\n  public readonly orgUserSelectOptions: IOrgMemberSelectOption[] = [\n    { value: roles.OWNER,  label: t(\"Owner\")  },\n    { value: roles.EDITOR, label: t(\"Editor\") },\n    { value: roles.VIEWER, label: t(\"Viewer\") },\n    { value: roles.MEMBER, label: t(\"No Default Access\") },\n  ];\n  // Select options for the resource's maxInheritedRole dropdown.\n  public readonly inheritSelectOptions: IMemberSelectOption[] = [\n    { value: roles.OWNER,  label: t(\"In Full\")     },\n    { value: roles.EDITOR, label: t(\"View & Edit\") },\n    { value: roles.VIEWER, label: t(\"View Only\")   },\n    { value: null,         label: t(\"None\")        }\n  ];\n  // Select options for the public member's role dropdown.\n  public readonly publicUserSelectOptions: IMemberSelectOption[] = [\n    { value: roles.EDITOR, label: t(\"Editor\") },\n    { value: roles.VIEWER, label: t(\"Viewer\") },\n  ];\n\n  public activeUser: FullUser|null = this._options.activeUser ?? null;\n\n  public resource: Resource|null = this._options.resource ?? null;\n\n  public maxInheritedRole: Observable<roles.BasicRole|null> =\n    observable(this.initData.maxInheritedRole || null);\n\n  // The public member's access settings reflect either those of anonymous users (when\n  // shouldSupportAnon() is true) or those of everyone@ (i.e. access granted to all users,\n  // supported for docs only). The member is null when public access is not supported.\n  public publicMember: IEditableMember|null = this._buildPublicMember();\n\n  public membersEdited = this.autoDispose(obsArray<IEditableMember>(this._buildAllMembers()));\n\n  public annotations = this.autoDispose(observable({users: new Map()}));\n\n  public isPersonal = this.initData.personal ?? false;\n\n  public isPublicMember = this.initData.public ?? false;\n\n  public isOrg: boolean = this.resourceType === 'organization';\n\n  public gristDoc: GristDoc|null = this._options.docPageModel?.gristDoc.get() ?? null;\n\n  // Checks if any members were added/removed/changed, if the max inherited role changed or if the\n  // anonymous access setting changed to enable the confirm button to write changes to the server.\n  public readonly isAnythingChanged: Computed<boolean> = this.autoDispose(computed<boolean>((use) => {\n    const isMemberChangedFn = (m: IEditableMember) => m.isNew || m.isRemoved ||\n      use(m.access) !== m.origAccess;\n    const isInheritanceChanged = !this.isOrg && use(this.maxInheritedRole) !== this.initData.maxInheritedRole;\n    return some(use(this.membersEdited), isMemberChangedFn) || isInheritanceChanged ||\n      (this.publicMember ? isMemberChangedFn(this.publicMember) : false);\n  }));\n\n  // Check if the current user is being removed.\n  public readonly isSelfRemoved: Computed<boolean> = this.autoDispose(computed<boolean>((use) => {\n    return some(use(this.membersEdited), m => m.isRemoved && m.email === this.activeUser?.email);\n  }));\n\n  private _shareAnnotator?: ShareAnnotator;\n\n  constructor(\n    public initData: PermissionData,\n    public resourceType: ResourceType,\n    private _options: {\n      activeUser?: FullUser|null,\n      reload?: () => Promise<PermissionData>,\n      docPageModel?: DocPageModel,\n      appModel?: AppModel,\n      resource?: Resource,\n    }\n  ) {\n    super();\n    if (this._options.appModel) {\n      const product = this._options.appModel.currentProduct;\n      const {supportEmail} = getGristConfig();\n      this._shareAnnotator = new ShareAnnotator(product, initData, {supportEmail});\n    }\n    this.annotate();\n  }\n\n  public reset(): void {\n    this.membersEdited.set(this._buildAllMembers());\n    this.annotate();\n  }\n\n  public async reloadAnnotations(): Promise<void> {\n    if (!this._options.reload || !this._shareAnnotator) { return; }\n    const data = await this._options.reload();\n    // Update the permission data backing the annotations. We don't update the full model\n    // itself - that would be nice, but tricky since the user may have made changes to it.\n    // But at least we can easily update annotations. This is good for the potentially\n    // common flow of opening a doc, starting to add a user, following the suggestion of\n    // adding that user as a member of the site, then returning to finish off adding\n    // them to the doc.\n    this._shareAnnotator.updateState(data);\n    this.annotate();\n  }\n\n  public async save(userApi: UserAPI, resourceId: number|string): Promise<void> {\n    if (this.resourceType === 'organization') {\n      await userApi.updateOrgPermissions(resourceId as number, this.getDelta());\n    } else if (this.resourceType === 'workspace') {\n      await userApi.updateWorkspacePermissions(resourceId as number, this.getDelta());\n    } else if (this.resourceType === 'document') {\n      await userApi.updateDocPermissions(resourceId as string, this.getDelta());\n    }\n  }\n\n  public add(email: string, role: roles.Role|null): void {\n    email = normalizeEmail(email);\n    const members = this.membersEdited.get();\n    const index = members.findIndex((m) => m.email === email);\n    const existing = index > -1 ? members[index] : null;\n    if (existing && existing.isRemoved) {\n      // The member is replaced with the isRemoved set to false to trigger an\n      // update to the membersEdited observable array.\n      this.membersEdited.splice(index, 1, {...existing, isRemoved: false});\n    } else if (existing) {\n      const effective = existing.effectiveAccess.get();\n      if (effective && effective !== roles.GUEST) {\n        // If the member is visible, throw to inform the user.\n        throw new Error(\"This user is already in the list\");\n      }\n      // If the member exists but is not visible, update their access to make them visible.\n      // They should be treated as a new user - removing them should make them invisible again.\n      existing.access.set(role);\n      existing.isNew = true;\n    } else {\n      const newMember = this._buildEditableMember({\n        id: -1, // Use a placeholder for the unknown userId\n        email,\n        name: \"\",\n        access: role,\n        parentAccess: null\n      });\n      newMember.isNew = true;\n      this.membersEdited.push(newMember);\n    }\n    this.annotate();\n  }\n\n  public remove(member: IEditableMember): void {\n    const index = this.membersEdited.get().indexOf(member);\n    if (member.isNew) {\n      this.membersEdited.splice(index, 1);\n    } else {\n      // Keep it in the array with a flag, to simplify comparing \"before\" and \"after\" arrays.\n      this.membersEdited.splice(index, 1, {...member, isRemoved: true});\n    }\n    this.annotate();\n  }\n\n  public isActiveUser(member: IEditableMember): boolean {\n    return member.email === this.activeUser?.email;\n  }\n\n  public annotate() {\n    // Only attempt for documents for now.\n    // TODO: extend to workspaces.\n    if (!this._shareAnnotator) { return; }\n    this.annotations.set(this._shareAnnotator.annotateChanges(this.getDelta({silent: true})));\n  }\n\n  // Construct the permission delta from the changed users/maxInheritedRole.\n  // Give warnings or errors as appropriate (these are suppressed if silent is set).\n  public getDelta(options?: {silent: boolean}): PermissionDelta {\n    const delta: PermissionDelta = { users: {} };\n    if (this.resourceType !== 'organization') {\n      const maxInheritedRole = this.maxInheritedRole.get();\n      if (this.initData.maxInheritedRole !== maxInheritedRole) {\n        delta.maxInheritedRole = maxInheritedRole;\n      }\n    }\n    const members = [...this.membersEdited.get()];\n    if (this.publicMember) {\n      members.push(this.publicMember);\n    }\n    // Loop through the members and update the delta.\n    for (const m of members) {\n      const access = m.access.get();\n      if (!roles.isValidRole(access)) {\n        if (!options?.silent) {\n          throw new Error(`Cannot update user to invalid role ${access}`);\n        }\n        continue;\n      }\n      if (m.isNew || m.isRemoved || m.origAccess !== access) {\n        // Add users whose access changed.\n        delta.users![m.email] = m.isRemoved ? null : access as roles.NonGuestRole;\n      }\n    }\n    return delta;\n  }\n\n  private _buildAllMembers(): IEditableMember[] {\n    // If the UI supports some public access, strip the supported public user (anon@ or\n    // everyone@). Otherwise, keep it, to allow the non-fancy way of adding/removing public access.\n    let users = this.initData.users;\n    const publicMember = this.publicMember;\n    if (publicMember) {\n      users = users.filter(m => m.email !== publicMember.email);\n    }\n    return users.map(m =>\n      this._buildEditableMember({\n        id: m.id,\n        email: m.email,\n        name: m.name,\n        picture: m.picture,\n        access: m.access,\n        parentAccess: m.parentAccess || null,\n        isTeamMember: m.isMember,\n      })\n    );\n  }\n\n  private _buildPublicMember(): IEditableMember|null {\n    // shouldSupportAnon() changes \"public\" access to \"anonymous\" access, and enables it for\n    // workspaces and org level. It's currently used for on-premise installs only.\n    // TODO Think through proper public sharing or workspaces/orgs, and get rid of\n    // shouldSupportAnon() exceptions.\n    const email =\n      shouldSupportAnon() ? ANONYMOUS_USER_EMAIL :\n      (this.resourceType === 'document') ? EVERYONE_EMAIL : null;\n    if (!email) { return null; }\n    const user = this.initData.users.find(m => m.email === email);\n    return this._buildEditableMember({\n      id: user ? user.id : -1,\n      email,\n      name: \"\",\n      access: user ? user.access : null,\n      parentAccess: user ? (user.parentAccess || null) : null,\n    });\n  }\n\n  private _buildEditableMember(member: IBuildMemberOptions): IEditableMember {\n    // Represents the member's access set specifically on the resource of interest.\n    const access = Observable.create(this, member.access);\n    let inheritedAccess: Computed<roles.BasicRole|null>;\n\n    if (member.email === this.activeUser?.email) {\n      // Note that we currently prevent the active user's role from changing to prevent users from\n      // locking themselves out of resources. We ensure that by setting inheritedAccess to the\n      // active user's initial access level, which is OWNER normally. (It's sometimes possible to\n      // open UserManager by a less-privileged user, e.g. if access was just lowered, in which\n      // case any attempted changes will fail on saving.)\n      const initialAccessBasicRole = roles.getEffectiveRole(getRealAccess(member, this.initData));\n      // This pretends to be a computed to match the other case, but is really a constant.\n      inheritedAccess = Computed.create(this, (use) => initialAccessBasicRole);\n    } else {\n      // Gives the role inherited from parent taking the maxInheritedRole into account.\n      inheritedAccess = Computed.create(this, this.maxInheritedRole, (use, maxInherited) =>\n        roles.getWeakestRole(member.parentAccess, maxInherited));\n    }\n    // Gives the effective role of the member on the resource, taking everything into account.\n    const effectiveAccess = Computed.create(this, (use) =>\n      roles.getStrongestRole(use(access), use(inheritedAccess)));\n    effectiveAccess.onWrite((value) => {\n      // For UI simplicity, we use a single dropdown to represent the effective access level of\n      // the user AND to allow changing it. As a result, we do NOT allow using the dropdown to\n      // write/show values that provide less direct access than what the user already inherits.\n      // It is confusing to show and results in no change in the effective access.\n      const inherited = inheritedAccess.get();\n      const isAboveInherit = roles.getStrongestRole(value, inherited) !== inherited;\n      access.set(isAboveInherit ? value : null);\n    });\n    return {\n      id: member.id,\n      email: member.email,\n      name: member.name,\n      picture: member.picture,\n      access,\n      parentAccess: member.parentAccess || null,\n      inheritedAccess,\n      effectiveAccess,\n      origAccess: member.access,\n      isNew: false,\n      isRemoved: false,\n      isTeamMember: member.isTeamMember,\n    };\n  }\n}\n\nexport function getResourceParent(resource: ResourceType): ResourceType|null {\n  if (resource === 'workspace') {\n    return 'organization';\n  } else if (resource === 'document') {\n    return 'workspace';\n  } else {\n    return null;\n  }\n}\n\n// Check whether anon should be supported in the UI\nexport function shouldSupportAnon(): boolean {\n  const gristConfig: GristLoadConfig = (window as any).gristConfig || {};\n  return gristConfig.supportAnon || false;\n}\n","import {colors, theme, vars} from 'app/client/ui2018/cssVars';\nimport {icon} from 'app/client/ui2018/icons';\nimport {input, styled} from 'grainjs';\nimport {cssMenuItem} from 'popweasel';\n\n// Styled elements used for rendering a user, e.g. in the UserManager, Billing, etc.\n// There is a general structure, but enough small variation that there is no helper at this point.\n//\n//   cssMemberListItem(\n//     cssMemberImage(\n//       createUserImage(getFullUser(member), 'large')\n//     ),\n//     cssMemberText(\n//       cssMemberPrimary(NAME),\n//       cssMemberSecondary(EMAIL),\n//       cssMemberType(DESCRIPTION),\n//     )\n//   )\n\nexport const cssMemberListItem = styled('div', `\n  display: flex;\n  width: 460px;\n  min-height: 64px;\n  margin: 0 auto;\n  padding: 12px 0;\n`);\n\nexport const cssMemberImage = styled('div', `\n  width: 40px;\n  height: 40px;\n  margin: 0 4px;\n  border-radius: 20px;\n  background-color: ${colors.lightGreen};\n  background-size: cover;\n\n  .${cssMemberListItem.className}-removed & {\n    opacity: 0.4;\n  }\n`);\n\nexport const cssMemberText = styled('div', `\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  margin: 2px 12px;\n  flex: 1 1 0;\n  min-width: 0px;\n  font-size: ${vars.mediumFontSize};\n\n  .${cssMemberListItem.className}-removed & {\n    opacity: 0.4;\n  }\n`);\n\nexport const cssMemberPrimary = styled('span', `\n  font-weight: bold;\n  color: ${theme.text};\n  padding: 2px 0;\n\n  .${cssMenuItem.className}-sel & {\n    color: ${theme.menuItemSelectedFg};\n  }\n`);\n\nexport const cssMemberSecondary = styled('span', `\n  color: ${theme.lightText};\n  /* the following just undo annoying bootstrap styles that apply to all labels */\n  margin: 0px;\n  font-weight: normal;\n  padding: 2px 0;\n  white-space: nowrap;\n\n  .${cssMenuItem.className}-sel & {\n    color: ${theme.menuItemSelectedFg};\n  }\n`);\n\nexport const cssMemberType = styled('span', `\n  color: ${theme.lightText};\n  /* the following just undo annoying bootstrap styles that apply to all labels */\n  margin: 0px;\n  font-weight: normal;\n  padding: 2px 0;\n  white-space: nowrap;\n\n  .${cssMenuItem.className}-sel & {\n    color: ${theme.menuItemSelectedFg};\n  }\n`);\n\nexport const cssMemberTypeProblem = styled('span', `\n  color: ${theme.errorText};\n  /* the following just undo annoying bootstrap styles that apply to all labels */\n  margin: 0px;\n  font-weight: normal;\n  padding: 2px 0;\n  white-space: nowrap;\n\n  .${cssMenuItem.className}-sel & {\n    color: ${theme.menuItemSelectedFg};\n  }\n`);\n\nexport const cssMemberBtn = styled('div', `\n  width: 16px;\n  height: 16px;\n  cursor: pointer;\n\n  &-disabled {\n    opacity: 0.3;\n    cursor: default;\n  }\n`);\n\nexport const cssRemoveIcon = styled(icon, `\n  background-color: ${theme.lightText};\n  margin: 12px 0;\n`);\n\nexport const cssEmailInputContainer = styled('div', `\n  position: relative;\n  display: flex;\n  height: 42px;\n  padding: 0 3px;\n  margin: 16px 63px;\n  border: 1px solid ${theme.inputBorder};\n  border-radius: 3px;\n  font-size: ${vars.mediumFontSize};\n  outline: none;\n\n  &-green {\n    border: 1px solid ${theme.inputValid};\n  }\n`);\n\nexport const cssEmailInput = styled(input, `\n  color: ${theme.inputFg};\n  background-color: ${theme.inputBg};\n  flex: 1 1 0;\n  font-size: ${vars.mediumFontSize};\n  font-family: ${vars.fontFamily};\n  outline: none;\n  border: none;\n\n  &::placeholder {\n    color: ${theme.inputPlaceholderFg};\n  }\n`);\n\nexport const cssMailIcon = styled(icon, `\n  margin: 12px 8px 12px 13px;\n  background-color: ${theme.lightText};\n`);\n","/**\n * This module exports a UserManager component, consisting of a list of emails, each with an\n * associated role (See app/common/roles), and a way to change roles, and add or remove new users.\n * The component is instantiated as a modal with a confirm button to pass changes to the server.\n *\n * It can be instantiated by calling showUserManagerModal with the UserAPI and IUserManagerOptions.\n */\nimport { makeT } from 'app/client/lib/localization';\nimport {commonUrls} from 'app/common/gristUrls';\nimport {capitalizeFirstWord, isLongerThan} from 'app/common/gutil';\nimport {FullUser} from 'app/common/LoginSessionAPI';\nimport * as roles from 'app/common/roles';\nimport {Organization, PermissionData, UserAPI} from 'app/common/UserAPI';\nimport {Computed, Disposable, dom, DomElementArg, Observable, observable, styled} from 'grainjs';\nimport pick = require('lodash/pick');\n\nimport {ACIndexImpl, normalizeText} from 'app/client/lib/ACIndex';\nimport {copyToClipboard} from 'app/client/lib/clipboardUtils';\nimport {setTestState} from 'app/client/lib/testState';\nimport {buildMultiUserManagerModal} from 'app/client/lib/MultiUserManager';\nimport {ACUserItem, buildACMemberEmail} from 'app/client/lib/ACUserManager';\nimport {AppModel} from 'app/client/models/AppModel';\nimport {DocPageModel} from 'app/client/models/DocPageModel';\nimport {reportError} from 'app/client/models/errors';\nimport {urlState} from 'app/client/models/gristUrlState';\nimport {IEditableMember, IMemberSelectOption, IOrgMemberSelectOption,\n        Resource} from 'app/client/models/UserManagerModel';\nimport {UserManagerModel, UserManagerModelImpl} from 'app/client/models/UserManagerModel';\nimport {getResourceParent, ResourceType} from 'app/client/models/UserManagerModel';\nimport {GristTooltips} from 'app/client/ui/GristTooltips';\nimport {shadowScroll} from 'app/client/ui/shadowScroll';\nimport {hoverTooltip, ITooltipControl, showTransientTooltip, withInfoTooltip} from 'app/client/ui/tooltips';\nimport {createUserImage} from 'app/client/ui/UserImage';\nimport {cssMemberBtn, cssMemberImage, cssMemberListItem,\n        cssMemberPrimary, cssMemberSecondary, cssMemberText, cssMemberType, cssMemberTypeProblem,\n        cssRemoveIcon} from 'app/client/ui/UserItem';\nimport {basicButton, bigBasicButton, bigPrimaryButton} from 'app/client/ui2018/buttons';\nimport {mediaXSmall, testId, theme, vars} from 'app/client/ui2018/cssVars';\nimport {icon} from 'app/client/ui2018/icons';\nimport {cssLink} from 'app/client/ui2018/links';\nimport {loadingSpinner} from 'app/client/ui2018/loaders';\nimport {menu, menuItem, menuText} from 'app/client/ui2018/menus';\nimport {confirmModal, cssAnimatedModal, cssModalBody, cssModalButtons, cssModalTitle,\n        IModalControl, modal} from 'app/client/ui2018/modals';\n\nconst t = makeT('UserManager');\n\nexport interface IUserManagerOptions {\n  permissionData: Promise<PermissionData>;\n  activeUser: FullUser|null;\n  resourceType: ResourceType;\n  resourceId: string|number;\n  resource?: Resource;\n  docPageModel?: DocPageModel;\n  appModel?: AppModel;  // If present, we offer access to a nested team-level dialog.\n  linkToCopy?: string;\n  reload?: () => Promise<PermissionData>;\n  onSave?: (personal: boolean) => Promise<unknown>;\n  prompt?: {  // If set, user manager should open with this email filled in and ready to go.\n    email: string;\n  };\n  showAnimation?: boolean; // If true, animates opening of the modal. Defaults to false.\n}\n\n// Returns an instance of UserManagerModel given IUserManagerOptions. Makes the async call for the\n// required properties of the options.\nasync function getModel(options: IUserManagerOptions): Promise<UserManagerModelImpl> {\n  const permissionData = await options.permissionData;\n  return new UserManagerModelImpl(\n    permissionData, options.resourceType,\n    pick(options, ['activeUser', 'reload', 'appModel', 'docPageModel', 'resource'])\n  );\n}\n\n/**\n * Public interface for creating the UserManager in the app. Creates a modal that includes\n * the UserManager menu with save and cancel buttons.\n */\nexport function showUserManagerModal(userApi: UserAPI, options: IUserManagerOptions) {\n  const modelObs: Observable<UserManagerModel|null|\"slow\"> = observable(null);\n\n  async function onConfirm(ctl: IModalControl) {\n    const model = modelObs.get();\n    if (!model || model === \"slow\") {\n      ctl.close();\n      return;\n    }\n    const tryToSaveChanges = async () => {\n      // Save changes to the server, reporting any errors to the app.\n      try {\n        const isAnythingChanged = model.isAnythingChanged.get();\n        if (isAnythingChanged) {\n          await model.save(userApi, options.resourceId);\n        }\n        await options.onSave?.(model.isPersonal);\n        ctl.close();\n        if (model.isPersonal && isAnythingChanged) {\n          // the only thing an individual without ACL_EDIT rights can do is\n          // remove themselves - so reload.\n          window.location.reload();\n        }\n      } catch (err) {\n        reportError(err);\n      }\n    };\n    if (model.isSelfRemoved.get()) {\n      const resourceType = resourceName(model.resourceType);\n      confirmModal(\n        t(`You are about to remove your own access to this {{resourceType}}`, { resourceType }),\n        t('Remove my access'), tryToSaveChanges,\n        {\n          explanation: (\n            t(`Once you have removed your own access, \\\nyou will not be able to get it back without assistance \\\nfrom someone else with sufficient access to the {{resourceType}}.`, { resourceType })\n          ),\n        }\n      );\n    } else {\n      tryToSaveChanges().catch(reportError);\n    }\n  }\n\n  // Get the model and assign it to the observable. Report errors to the app.\n  const waitPromise = getModel(options)\n    .then(model => modelObs.set(model))\n    .catch(reportError);\n\n  isLongerThan(waitPromise, 400).then((slow) => slow && modelObs.set(\"slow\")).catch(() => {});\n\n  return buildUserManagerModal(modelObs, onConfirm, options);\n}\n\nfunction buildUserManagerModal(\n  modelObs: Observable<UserManagerModel|null|\"slow\">,\n  onConfirm: (ctl: IModalControl) => Promise<void>,\n  options: IUserManagerOptions\n) {\n  return modal(ctl => [\n    // We set the padding to 0 since the body scroll shadows extend to the edge of the modal.\n    { style: 'padding: 0;' },\n    options.showAnimation ? dom.cls(cssAnimatedModal.className) : null,\n    dom.domComputed(modelObs, model => {\n      if (!model) { return null; }\n      if (model === \"slow\") { return cssSpinner(loadingSpinner()); }\n\n      const cssBody = model.isPersonal ? cssAccessDetailsBody : cssUserManagerBody;\n      return [\n        cssTitle(\n          renderTitle(options.resourceType, options.resource, model.isPersonal),\n          (options.resourceType === 'document' && (!model.isPersonal || model.isPublicMember)\n            ? makeCopyBtn(options.linkToCopy, cssCopyBtn.cls('-header'))\n            : null\n          ),\n          testId('um-header'),\n        ),\n        cssModalBody(\n          cssBody(\n            new UserManager(\n              model,\n              pick(options, 'linkToCopy', 'docPageModel', 'appModel', 'prompt', 'resource')\n            ).buildDom()\n          ),\n        ),\n        cssModalButtons(\n          { style: 'margin: 32px 64px; display: flex;' },\n          (model.isPublicMember ? null :\n            bigPrimaryButton(t('Confirm'),\n              dom.boolAttr('disabled', (use) => !use(model.isAnythingChanged)),\n              dom.on('click', () => onConfirm(ctl)),\n              testId('um-confirm')\n            )\n          ),\n          bigBasicButton(\n            model.isPublicMember ? t('Close') : t('Cancel'),\n            dom.on('click', () => ctl.close()),\n            testId('um-cancel')\n          ),\n          (model.resourceType === 'document' && model.gristDoc && !model.isPersonal\n            ? withInfoTooltip(\n                cssLink({href: urlState().makeUrl({docPage: 'acl'})},\n                  dom.text(use => use(model.isAnythingChanged) ? t('Save & ') : ''),\n                  t('Open Access Rules'),\n                  dom.on('click', (ev) => {\n                    ev.preventDefault();\n                    return onConfirm(ctl).then(() => urlState().pushUrl({docPage: 'acl'}));\n                  }),\n                  testId('um-open-access-rules'),\n                ),\n                GristTooltips.openAccessRules(),\n                {domArgs: [cssAccessLink.cls('')]},\n            )\n            : null\n          ),\n          testId('um-buttons'),\n        )\n      ];\n    })\n  ]);\n}\n\n/**\n * See module documentation for overview.\n *\n * Usage:\n *    const um = new UserManager(model);\n *    um.buildDom();\n */\nexport class UserManager extends Disposable {\n  private _dom: HTMLDivElement;\n\n  constructor(\n    private _model: UserManagerModel,\n    private _options: {\n      linkToCopy?: string,\n      docPageModel?: DocPageModel,\n      appModel?: AppModel,\n      prompt?: {email: string},\n      resource?: Resource,\n  }) {\n    super();\n  }\n\n  public buildDom() {\n    if (this._model.isPublicMember) {\n      return this._buildSelfPublicAccessDom();\n    }\n\n    if (this._model.isPersonal) {\n      return this._buildSelfAccessDom();\n    }\n\n    const acMemberEmail = this.autoDispose(new ACMemberEmail(\n      this._onAdd.bind(this),\n      this._model.membersEdited.get(),\n      this._options.prompt,\n    ));\n\n    return [\n      acMemberEmail.buildDom(),\n      this._buildOptionsDom(),\n      this._dom = shadowScroll(\n        testId('um-members'),\n        this._buildPublicAccessMember(),\n        dom.forEach(this._model.membersEdited, (member) => this._buildMemberDom(member)),\n      ),\n    ];\n  }\n\n  private _onAddOrEdit(email: string, role: roles.NonGuestRole) {\n    const members = this._model.membersEdited.get();\n    const maybeMember = members.find(m => m.email === email);\n    if (maybeMember) {\n      maybeMember.access.set(role);\n    } else {\n      this._onAdd(email, role);\n    }\n  }\n\n  private _onAdd(email: string, role: roles.NonGuestRole) {\n    this._model.add(email, role);\n    // Make sure the entry we have just added is actually visible - confusing if not.\n    Array.from(this._dom.querySelectorAll('.member-email'))\n      .find(el => el.textContent === email)\n      ?.scrollIntoView();\n  }\n\n  private _buildOptionsDom(): Element {\n    const publicMember = this._model.publicMember;\n    let tooltipControl: ITooltipControl | undefined;\n    return dom('div',\n      cssOptionRowMultiple(\n        icon('AddUser'),\n        cssLabel(t('Invite multiple')),\n        dom.on('click', (_ev) => buildMultiUserManagerModal(\n          this,\n          this._model,\n          (email, role) => {\n            this._onAddOrEdit(email, role);\n          },\n        ))\n      ),\n      cssOptionRow(\n        // TODO: Consider adding a tooltip explaining inheritance. A brief text caption may\n        // be used to fill whitespace in org UserManager.\n        this._model.isOrg ? null : dom('span', { style: `float: left;` },\n          dom('span', 'Inherit access: '),\n          this._inheritRoleSelector()\n        ),\n        publicMember ? dom('span', { style: `float: right;` },\n          cssSmallPublicMemberIcon('PublicFilled'),\n          dom('span', t('Public access: ')),\n          cssOptionBtn(\n            menu(() => {\n              tooltipControl?.close();\n              return [\n                menuItem(() => publicMember.access.set(roles.VIEWER), t('On'), testId(`um-public-option`)),\n                menuItem(() => publicMember.access.set(null), t('Off'),\n                  // Disable null access if anonymous access is inherited.\n                  dom.cls('disabled', (use) => use(publicMember.inheritedAccess) !== null),\n                  testId(`um-public-option`)\n                ),\n                // If the 'Off' setting is disabled, show an explanation.\n                dom.maybe((use) => use(publicMember.inheritedAccess) !== null, () => menuText(\n                  t(`Public access inherited from {{parent}}. To remove, set 'Inherit access' option to 'None'.`,\n                    { parent: getResourceParent(this._model.resourceType) }\n                  )))\n              ];\n            }),\n            dom.text((use) => use(publicMember.effectiveAccess) ? t('On') : t('Off')),\n            cssCollapseIcon('Collapse'),\n            testId('um-public-access')\n          ),\n          hoverTooltip((ctl) => {\n            tooltipControl = ctl;\n            return t('Allow anyone with the link to open.');\n          }),\n        ) : null,\n      ),\n    );\n  }\n\n  // Build a single member row.\n  private _buildMemberDom(member: IEditableMember) {\n    const disableRemove = Computed.create(null, (use) =>\n      this._model.isPersonal ? !member.origAccess :\n      Boolean(this._model.isActiveUser(member) || use(member.inheritedAccess)));\n    return dom('div',\n      dom.autoDispose(disableRemove),\n      dom.maybe((use) => use(member.effectiveAccess) && use(member.effectiveAccess) !== roles.GUEST, () =>\n        cssMemberListItem(\n          cssMemberListItem.cls('-removed', member.isRemoved),\n          cssMemberImage(\n            createUserImage(getFullUser(member), 'large')\n          ),\n          cssMemberText(\n            cssMemberPrimary(\n              member.name || member.email,\n              member.email ? dom.cls('member-email') : null,\n              testId('um-member-name'),\n            ),\n            !member.name ? null : cssMemberSecondary(\n              member.email, dom.cls('member-email'), testId('um-member-email')\n            ),\n            (this._model.isPersonal\n              ? this._buildSelfAnnotationDom(member)\n              : this._buildAnnotationDom(member)\n            ),\n          ),\n          member.isRemoved ? null : this._memberRoleSelector(member.effectiveAccess,\n            member.inheritedAccess, this._model.isActiveUser(member)),\n          // Only show delete buttons when editing the org users or when a user is being newly\n          // added to any resource. In workspace/doc UserManager instances we want to see all the\n          // users in the org, whether or not they have access to the resource of interest. They may\n          // be denied access via the role dropdown.\n          // Show the undo icon when an item has been removed but its removal has not been saved to\n          // the server.\n          cssMemberBtn(\n            // Button icon.\n            member.isRemoved ? cssUndoIcon('Undo', testId('um-member-undo')) :\n              cssRemoveIcon('Remove', testId('um-member-delete')),\n            cssMemberBtn.cls('-disabled', disableRemove),\n            // Click handler.\n            dom.on('click', () => disableRemove.get() ||\n              (member.isRemoved ? this._model.add(member.email, member.access.get()) :\n                this._model.remove(member)))\n          ),\n          testId('um-member')\n        )\n      )\n    );\n  }\n\n  // Build an annotation for a single member in the Manage Users dialog.\n  private _buildAnnotationDom(member: IEditableMember) {\n    return dom.domComputed(this._model.annotations, (annotations) => {\n      const annotation = annotations.users.get(member.email);\n      if (!annotation) { return null; }\n      if (annotation.isSupport) {\n        return cssMemberType(t('Grist support'));\n      }\n      if (annotation.isMember && annotations.hasTeam) {\n        return cssMemberType(t('Team member'));\n      }\n      const collaborator = annotations.hasTeam ? t('guest') : t('free collaborator');\n      const limit = annotation.collaboratorLimit;\n      if (!limit || !limit.top) { return null; }\n      const elements: HTMLSpanElement[] = [];\n      if (limit.at <= limit.top) {\n        elements.push(cssMemberType(\n          t(`{{limitAt}} of {{limitTop}} {{collaborator}}s`, { limitAt: limit.at, limitTop: limit.top, collaborator }))\n        );\n      } else {\n        elements.push(cssMemberTypeProblem(\n          t(`{{collaborator}} limit exceeded`, { collaborator: capitalizeFirstWord(collaborator) }))\n        );\n      }\n      if (annotations.hasTeam) {\n        // Add a link for adding a member. For a doc, streamline this so user can make\n        // the change and continue seamlessly.\n        // TODO: streamline for workspaces.\n        elements.push(cssLink(\n          {href: urlState().makeUrl({manageUsers: true})},\n          dom.on('click', (e) => {\n            if (this._options.appModel) {\n              e.preventDefault();\n              manageTeam(this._options.appModel,\n                         () => this._model.reloadAnnotations(),\n                         { email: member.email }).catch(reportError);\n            }\n          }),\n          t(`Add {{member}} to your team`, { member: member.name || t('member') })));\n      } else if (limit.at >= limit.top) {\n        elements.push(cssLink({href: commonUrls.plans, target: '_blank'},\n          t('Create a team to share with more people')));\n      }\n      return elements;\n    });\n  }\n\n  // Build an annotation for the current user in the Access Details dialog.\n  private _buildSelfAnnotationDom(user: IEditableMember) {\n    return dom.domComputed(this._model.annotations, (annotations) => {\n      const annotation = annotations.users.get(user.email);\n      if (!annotation) { return null; }\n\n      let memberType: string;\n      if (annotation.isSupport) {\n        memberType = t('Grist support');\n      } else if (annotation.isMember && annotations.hasTeam) {\n        memberType = t('Team member');\n      } else if (annotations.hasTeam) {\n        memberType = t('Outside collaborator');\n      } else {\n        memberType = t('Collaborator');\n      }\n\n      return cssMemberType(memberType, testId('um-member-annotation'));\n    });\n  }\n\n  private _buildPublicAccessMember() {\n    const publicMember = this._model.publicMember;\n    if (!publicMember) { return null; }\n    return dom('div',\n      dom.maybe((use) => Boolean(use(publicMember.effectiveAccess)), () =>\n        cssMemberListItem(\n          cssPublicMemberIcon('PublicFilled'),\n          cssMemberText(\n            cssMemberPrimary(t('Public Access')),\n            cssMemberSecondary(t('Anyone with link '), makeCopyBtn(this._options.linkToCopy)),\n          ),\n          this._memberRoleSelector(publicMember.effectiveAccess, publicMember.inheritedAccess, false,\n            this._model.publicUserSelectOptions\n          ),\n          cssMemberBtn(\n            cssRemoveIcon('Remove', testId('um-member-delete')),\n            dom.on('click', () => publicMember.access.set(null)),\n          ),\n          testId('um-public-member')\n        )\n      )\n    );\n  }\n\n  private _buildSelfPublicAccessDom() {\n    const accessValue = this._options.resource?.access;\n    const accessLabel = this._model.publicUserSelectOptions\n      .find(opt => opt.value === accessValue)?.label;\n    const activeUser = this._model.activeUser;\n    const name = activeUser?.name ?? 'Anonymous';\n\n    return dom('div',\n      cssMemberListItem(\n        (!activeUser\n          ? cssPublicMemberIcon('PublicFilled')\n          : cssMemberImage(createUserImage(activeUser, 'large'))\n        ),\n        cssMemberText(\n          cssMemberPrimary(name, testId('um-member-name')),\n          activeUser?.email ? cssMemberSecondary(activeUser.email) : null,\n          cssMemberPublicAccess(\n            dom('span', t('Public access'), testId('um-member-annotation')),\n            cssPublicAccessIcon('PublicFilled'),\n          ),\n        ),\n        cssRoleBtn(\n          accessLabel ?? t('Guest'),\n          cssCollapseIcon('Collapse'),\n          dom.cls('disabled'),\n          testId('um-member-role'),\n        ),\n        testId('um-member'),\n      ),\n      testId('um-members'),\n    );\n  }\n\n  private _buildSelfAccessDom() {\n    return dom('div',\n      dom.domComputed(this._model.membersEdited, members =>\n        members[0] ? this._buildMemberDom(members[0]) : null\n      ),\n      testId('um-members'),\n    );\n  }\n\n  // Returns a div containing a button that opens a menu to choose between roles.\n  private _memberRoleSelector(\n    role: Observable<string|null>,\n    inherited: Observable<roles.Role|null>,\n    isActiveUser: boolean,\n    allRolesOverride?: IOrgMemberSelectOption[],\n  ) {\n    const allRoles = allRolesOverride ||\n      (this._model.isOrg ? this._model.orgUserSelectOptions : this._model.userSelectOptions);\n    return cssRoleBtn(\n      // Don't include the menu if we're only showing access details for the current user.\n      this._model.isPersonal ? null : menu(() => [\n        dom.forEach(allRoles, _role =>\n          // The active user should be prevented from changing their own role.\n          menuItem(() => isActiveUser || role.set(_role.value), _role.label,\n            // Indicate which option is inherited, if any.\n            dom.text((use) => use(inherited) && (use(inherited) === _role.value)\n              && !isActiveUser ? ' (inherited)' : ''),\n            // Disable everything providing less access than the inherited access\n            dom.cls('disabled', (use) =>\n              roles.getStrongestRole(_role.value, use(inherited)) !== _role.value),\n            testId(`um-role-option`)\n          )\n        ),\n        // If the user's access is inherited, give an explanation on how to change it.\n        isActiveUser ? menuText(t(`User may not modify their own access.`)) : null,\n        // If the user's access is inherited, give an explanation on how to change it.\n        dom.maybe((use) => use(inherited) && !isActiveUser, () => menuText(\n          t(`User inherits permissions from {{parent}}. To remove, \\\nset 'Inherit access' option to 'None'.`, { parent: getResourceParent(this._model.resourceType) }))),\n        // If the user is a guest, give a description of the guest permission.\n        dom.maybe((use) => !this._model.isOrg && use(role) === roles.GUEST, () => menuText(\n          t(`User has view access to {{resource}} resulting from manually-set access \\\nto resources inside. If removed here, this user will lose access to resources inside.`,\n            { resource: this._model.resourceType }))),\n        this._model.isOrg ? menuText(t(`No default access allows access to be \\\ngranted to individual documents or workspaces, rather than the full team site.`)) : null\n      ]),\n      dom.text((use) => {\n        // Get the label of the active role. Note that the 'Guest' role is assigned when the role\n        // is not found because it is not included as a selection.\n        const activeRole = allRoles.find((_role: IOrgMemberSelectOption) => use(role) === _role.value);\n        return activeRole ? activeRole.label : t(\"Guest\");\n      }),\n      cssCollapseIcon('Collapse'),\n      this._model.isPersonal ? dom.cls('disabled') : null,\n      testId('um-member-role')\n    );\n  }\n\n  // Builds the max inherited role selection button and menu.\n  private _inheritRoleSelector() {\n    const role = this._model.maxInheritedRole;\n    const allRoles = this._model.inheritSelectOptions;\n    return cssOptionBtn(\n      menu(() => [\n        dom.forEach(allRoles, _role =>\n          menuItem(() => role.set(_role.value), _role.label,\n            testId(`um-role-option`)\n          )\n        )\n      ]),\n      dom.text((use) => {\n        // Get the label of the active role.\n        const activeRole = allRoles.find((_role: IMemberSelectOption) => use(role) === _role.value);\n        return activeRole ? activeRole.label : \"\";\n      }),\n      cssCollapseIcon('Collapse'),\n      testId('um-max-inherited-role')\n    );\n  }\n}\n\nfunction getUserItem(member: IEditableMember): ACUserItem {\n  return {\n    value: member.email,\n    label: member.email,\n    cleanText: normalizeText(member.email),\n    email: member.email,\n    name: member.name,\n    picture: member?.picture,\n    id: member.id,\n  };\n}\n\n/**\n * Represents the widget that allows typing in an email and adding it.\n */\nexport class ACMemberEmail extends Disposable {\n  private _email = this.autoDispose(observable<string>(\"\"));\n\n  constructor(\n    private _onAdd: (email: string, role: roles.NonGuestRole) => void,\n    private _members: Array<IEditableMember>,\n    private _prompt?: {email: string}\n  ) {\n    super();\n    if (_prompt) {\n      this._email.set(_prompt.email);\n    }\n  }\n\n  public buildDom() {\n    const acUserItem = this._members\n      // Only suggest team members in autocomplete.\n      .filter((member: IEditableMember) => member.isTeamMember)\n      .map((member: IEditableMember) => getUserItem(member));\n    const acIndex = new ACIndexImpl<ACUserItem>(acUserItem);\n\n    return buildACMemberEmail(this,\n      {\n        acIndex,\n        emailObs: this._email,\n        save: this._handleSave.bind(this),\n        prompt: this._prompt,\n      },\n      testId('um-member-new')\n    );\n  }\n\n  private _handleSave(selectedEmail: string) {\n    this._onAdd(selectedEmail, roles.VIEWER);\n  }\n}\n\n// Returns a new FullUser object from an IEditableMember.\nfunction getFullUser(member: IEditableMember): FullUser {\n  return {\n    id: member.id,\n    name: member.name,\n    email: member.email,\n    picture: member.picture,\n    locale: member.locale\n  };\n}\n\n// Create a \"Copy Link\" button.\nfunction makeCopyBtn(linkToCopy: string|undefined, ...domArgs: DomElementArg[]) {\n  return linkToCopy && cssCopyBtn(cssCopyIcon('Copy'), t('Copy Link'),\n    dom.on('click', (ev, elem) => copyLink(elem, linkToCopy)),\n    testId('um-copy-link'),\n    ...domArgs,\n  );\n}\n\n// Copy the current document link to clipboard, and notify the user with a transient popup near\n// the given element.\nasync function copyLink(elem: HTMLElement, link: string) {\n  await copyToClipboard(link);\n  setTestState({clipboard: link});\n  showTransientTooltip(elem, t('Link copied to clipboard'), { key: 'copy-doc-link' });\n}\n\nasync function manageTeam(appModel: AppModel,\n                          onSave?: () => Promise<void>,\n                          prompt?: { email: string }) {\n  await urlState().pushUrl({manageUsers: false});\n  const user = appModel.currentValidUser;\n  const currentOrg = appModel.currentOrg;\n  if (currentOrg) {\n    const api = appModel.api;\n    showUserManagerModal(api, {\n      permissionData: api.getOrgAccess(currentOrg.id),\n      activeUser: user,\n      resourceType: 'organization',\n      resourceId: currentOrg.id,\n      resource: currentOrg,\n      onSave,\n      prompt,\n      showAnimation: true,\n    });\n  }\n}\n\nconst cssAccessDetailsBody = styled('div', `\n  display: flex;\n  flex-direction: column;\n  width: 600px;\n  font-size: ${vars.mediumFontSize};\n`);\n\nconst cssUserManagerBody = styled(cssAccessDetailsBody, `\n  height: 374px;\n  border-bottom: 1px solid ${theme.modalBorderDark};\n`);\n\nconst cssSpinner = styled('div', `\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin: 32px;\n`);\n\nconst cssCopyBtn = styled(basicButton, `\n  border: none;\n  font-weight: normal;\n  padding: 0 8px;\n  &-header {\n    float: right;\n    margin-top: 8px;\n  }\n`);\n\nconst cssCopyIcon = styled(icon, `\n  margin-right: 4px;\n  margin-top: -2px;\n`);\n\nconst cssOptionRow = styled('div', `\n  font-size: ${vars.mediumFontSize};\n  margin: 0 63px 23px 63px;\n`);\n\nconst cssOptionRowMultiple = styled('div', `\n  margin: 0 63px 12px 63px;\n  font-size: ${vars.mediumFontSize};\n  display: flex;\n  cursor: pointer;\n  color: ${theme.controlFg};\n  --icon-color: ${theme.controlFg};\n\n  &:hover {\n    color: ${theme.controlHoverFg};\n    --icon-color: ${theme.controlHoverFg};\n  }\n`);\n\nconst cssLabel = styled('span', `\n  margin-left: 4px;\n`);\n\nconst cssOptionBtn = styled('span', `\n  display: inline-flex;\n  font-size: ${vars.mediumFontSize};\n  color: ${theme.controlFg};\n  cursor: pointer;\n`);\n\nconst cssPublicMemberIcon = styled(icon, `\n  width: 40px;\n  height: 40px;\n  margin: 0 4px;\n  --icon-color: ${theme.accentIcon};\n`);\n\nconst cssSmallPublicMemberIcon = styled(cssPublicMemberIcon, `\n  width: 16px;\n  height: 16px;\n  top: -2px;\n`);\n\nconst cssPublicAccessIcon = styled(icon, `\n  --icon-color: ${theme.accentIcon};\n`);\n\nconst cssUndoIcon = styled(icon, `\n  --icon-color: ${theme.controlSecondaryFg};\n  margin: 12px 0;\n`);\n\nconst cssRoleBtn = styled('div', `\n  display: flex;\n  justify-content: flex-end;\n  font-size: ${vars.mediumFontSize};\n  color: ${theme.controlFg};\n  margin: 12px 24px;\n  cursor: pointer;\n\n  &.disabled {\n    opacity: 0.5;\n    cursor: default;\n  }\n`);\n\nconst cssCollapseIcon = styled(icon, `\n  margin-top: 1px;\n  background-color: ${theme.controlFg};\n`);\n\nconst cssAccessLink = styled(cssLink, `\n  align-self: center;\n  margin-left: auto;\n`);\n\nconst cssOrgName = styled('div', `\n  font-size: ${vars.largeFontSize};\n`);\n\nconst cssOrgDomain = styled('span', `\n  color: ${theme.accentText};\n`);\n\nconst cssTitle = styled(cssModalTitle, `\n  margin: 40px 64px 0 64px;\n\n  @media ${mediaXSmall} {\n    & {\n      margin: 16px;\n    }\n  }\n`);\n\nconst cssMemberPublicAccess = styled(cssMemberSecondary, `\n  display: flex;\n  align-items: center;\n  gap: 8px;\n`);\n\n// Render the UserManager title for `resourceType` (e.g. org as \"team site\").\nfunction renderTitle(resourceType: ResourceType, resource?: Resource, personal?: boolean) {\n  switch (resourceType) {\n    case 'organization': {\n      if (personal) { return t('Your role for this team site'); }\n      return [\n        t('Manage members of team site'),\n        !resource ? null : cssOrgName(\n          `${(resource as Organization).name} (`,\n          cssOrgDomain(`${(resource as Organization).domain}.getgrist.com`),\n          ')',\n        )\n      ];\n    }\n    default: {\n      return personal ?\n        t(`Your role for this {{resourceType}}`, { resourceType }) :\n        t(`Invite people to {{resourceType}}`, { resourceType });\n    }\n  }\n}\n\n// Rename organization to team site.\nfunction resourceName(resourceType: ResourceType): string {\n  return resourceType === 'organization' ? t('team site') : resourceType;\n}\n","import { isTeamPlan, Product } from 'app/common/Features';\nimport { normalizeEmail } from 'app/common/emails';\nimport { PermissionData, PermissionDelta } from 'app/common/UserAPI';\n\n/**\n * Mark that the share is share number #at of a maximum of #top. The #at values\n * start at 1.\n */\nexport interface ShareLimitAnnotation {\n  at: number;\n  top?: number;\n}\n\n/**\n * Some facts about a share.\n */\nexport interface ShareAnnotation {\n  isMember?: boolean;   // Is the share for a team member.\n  isSupport?: boolean;  // Is the share for a support user.\n  collaboratorLimit?: ShareLimitAnnotation;  // Does the share count towards a collaborator limit.\n}\n\n/**\n * Facts about all shares for a resource.\n */\nexport interface ShareAnnotations {\n  hasTeam?: boolean;   // Is the resource in a team site?\n  users: Map<string, ShareAnnotation>;  // Annotations keyed by normalized user email.\n}\n\nexport interface ShareAnnotatorOptions {\n  supportEmail?: string;   // Known email address of the support user (e.g. support@getgrist.com).\n}\n\n/**\n * Helper for annotating users mentioned in a proposed change of shares, given the\n * current shares in place.\n */\nexport class ShareAnnotator {\n  private _features = this._product?.features ?? {};\n  private _supportEmail = this._options.supportEmail;\n\n  constructor(\n    private _product: Product|null,\n    private _state: PermissionData,\n    private _options: ShareAnnotatorOptions = {}\n  ) {\n  }\n\n  public updateState(state: PermissionData) {\n    this._state = state;\n  }\n\n  public annotateChanges(change: PermissionDelta): ShareAnnotations {\n    const features = this._features;\n    const annotations: ShareAnnotations = {\n      hasTeam: !this._product || isTeamPlan(this._product.name),\n      users: new Map(),\n    };\n    if (features.maxSharesPerDocPerRole || features.maxSharesPerWorkspace) {\n      // For simplicity, don't try to annotate if limits not used at the time of writing\n      // are in place.\n      return annotations;\n    }\n    const top = features.maxSharesPerDoc;\n    let at = 0;\n    const makeAnnotation = (user: {email: string, isMember?: boolean, isSupport?: boolean, access: string|null}) => {\n      const annotation: ShareAnnotation = {\n        isMember: user.isMember,\n      };\n      if (user.isSupport) {\n        return { isSupport: true };\n      }\n      if (!annotation.isMember && user.access) {\n        at++;\n        annotation.collaboratorLimit = {\n          at,\n          top\n        };\n      }\n      return annotation;\n    };\n    const removed = new Set(\n      Object.entries(change?.users||{}).filter(([, v]) => v === null)\n        .map(([k, ]) => normalizeEmail(k)));\n    for (const user of this._state.users) {\n      if (removed.has(user.email)) { continue; }\n      if (!user.isMember && !user.access) { continue; }\n      annotations.users.set(user.email, makeAnnotation(user));\n    }\n    const tweaks = new Set(\n      Object.entries(change?.users||{}).filter(([, v]) => v !== null)\n        .map(([k, ]) => normalizeEmail(k)));\n    for (const email of tweaks) {\n      const annotation = annotations.users.get(email) || makeAnnotation({\n        email,\n        isMember: false,\n        isSupport: Boolean(email.trim() !== '' && email === this._supportEmail),\n        access: '<set>',\n      });\n      annotations.users.set(email, annotation);\n    }\n    return annotations;\n  }\n}\n","/**\n *\n * Utilities related to email normalization.  Currently\n * trivial, but could potentially need special per-domain\n * rules in future.\n *\n * Email addresses are a bit slippery.  Domain names are\n * case insensitive, but user names may or may not be,\n * depending on the mail server handling the domain.\n * Other special treatment of user names may also be in\n * place for particular domains (periods, plus sign, etc).\n *\n * We treat emails as case-insensitive for the purposes\n * of determining equality of emails, and indexing users\n * by email address.\n *\n */\n\n/**\n *\n * Convert the supplied email address to a normalized form\n * that we will use for indexing and equality tests.\n * Many possible email addresses could map to the same\n * normalized result; as far as we are concerned those\n * addresses are equivalent.\n *\n * The normalization we do is a simple lowercase.  This\n * means we won't be able to treat both Jane@x.y and\n * jane@x.y as separate email addresses, even through\n * they may in fact be separate mailboxes on x.y.\n *\n * The normalized email is not something we should show\n * the user in the UI, but is rather for internal purposes.\n *\n * The original non-normalized email is called a\n * \"display email\" to distinguish it from a \"normalized\n * email\"\n *\n */\nexport function normalizeEmail(displayEmail: string): string {\n  // We take the lower case, without use of locale.\n  return displayEmail.toLowerCase();\n}\n"],"names":[],"sourceRoot":""}