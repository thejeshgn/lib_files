{"version":3,"file":"662.bundle.js","mappings":"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","sources":["./app/client/ui/SupportGristPage.ts?","./stubs/app/client/components/Banners.ts?"],"sourcesContent":["import {buildHomeBanners} from 'app/client/components/Banners';\nimport {makeT} from 'app/client/lib/localization';\nimport {AppModel} from 'app/client/models/AppModel';\nimport {urlState} from 'app/client/models/gristUrlState';\nimport {TelemetryModel, TelemetryModelImpl} from 'app/client/models/TelemetryModel';\nimport {AppHeader} from 'app/client/ui/AppHeader';\nimport {leftPanelBasic} from 'app/client/ui/LeftPanelCommon';\nimport {pagePanels} from 'app/client/ui/PagePanels';\nimport {createTopBarHome} from 'app/client/ui/TopBar';\nimport {cssBreadcrumbs, separator} from 'app/client/ui2018/breadcrumbs';\nimport {bigBasicButton, bigBasicButtonLink, bigPrimaryButton} from 'app/client/ui2018/buttons';\nimport {mediaSmall, theme, vars} from 'app/client/ui2018/cssVars';\nimport {icon} from 'app/client/ui2018/icons';\nimport {cssLink} from 'app/client/ui2018/links';\nimport {loadingSpinner} from 'app/client/ui2018/loaders';\nimport {commonUrls} from 'app/common/gristUrls';\nimport {TelemetryPrefsWithSources} from 'app/common/InstallAPI';\nimport {getGristConfig} from 'app/common/urlUtils';\nimport {Computed, Disposable, dom, makeTestId, Observable, styled} from 'grainjs';\n\nconst testId = makeTestId('test-support-grist-page-');\n\nconst t = makeT('SupportGristPage');\n\nexport class SupportGristPage extends Disposable {\n  private readonly _model: TelemetryModel = new TelemetryModelImpl(this._appModel);\n  private readonly _optInToTelemetry = Computed.create(this, this._model.prefs,\n    (_use, prefs) => {\n      if (!prefs) { return null; }\n\n      return prefs.telemetryLevel.value !== 'off';\n    })\n    .onWrite(async (optIn) => {\n      const telemetryLevel = optIn ? 'limited' : 'off';\n      await this._model.updateTelemetryPrefs({telemetryLevel});\n    });\n\n  constructor(private _appModel: AppModel) {\n    super();\n    this._model.fetchTelemetryPrefs().catch(reportError);\n  }\n\n  public buildDom() {\n    const panelOpen = Observable.create(this, false);\n    return pagePanels({\n      leftPanel: {\n        panelWidth: Observable.create(this, 240),\n        panelOpen,\n        hideOpener: true,\n        header: dom.create(AppHeader, this._appModel),\n        content: leftPanelBasic(this._appModel, panelOpen),\n      },\n      headerMain: this._buildMainHeader(),\n      contentTop: buildHomeBanners(this._appModel),\n      contentMain: this._buildMainContent(),\n    });\n  }\n\n  private _buildMainHeader() {\n    return dom.frag(\n      cssBreadcrumbs({style: 'margin-left: 16px;'},\n        cssLink(\n          urlState().setLinkUrl({}),\n          t('Home'),\n        ),\n        separator(' / '),\n        dom('span', t('Support Grist')),\n      ),\n      createTopBarHome(this._appModel),\n    );\n  }\n\n  private _buildMainContent() {\n    return cssPageContainer(\n      cssPage(\n        dom('div',\n          cssPageTitle(t('Support Grist')),\n          this._buildTelemetrySection(),\n          this._buildSponsorshipSection(),\n        ),\n      ),\n    );\n  }\n\n  private _buildTelemetrySection() {\n    return cssSection(\n      cssSectionTitle(t('Telemetry')),\n      dom.domComputed(this._model.prefs, prefs => {\n        if (prefs === null) {\n          return cssSpinnerBox(loadingSpinner());\n        }\n\n        const {activation} = getGristConfig();\n        if (!activation?.isManager) {\n          if (prefs.telemetryLevel.value === 'limited') {\n            return [\n              cssParagraph(t(\n                'This instance is opted in to telemetry. Only the site administrator has permission to change this.',\n              ))\n            ];\n          } else {\n            return [\n              cssParagraph(t(\n                'This instance is opted out of telemetry. Only the site administrator has permission to change this.',\n              ))\n            ];\n          }\n        } else {\n          return [\n            cssParagraph(t(\n              'Support Grist by opting in to telemetry, which helps us understand how the product ' +\n              'is used, so that we can prioritize future improvements.'\n            )),\n            cssParagraph(\n              t('We only collect usage statistics, as detailed in our {{link}}, never document contents.', {\n                link: telemetryHelpCenterLink(),\n              }),\n            ),\n            cssParagraph(t('You can opt out of telemetry at any time from this page.')),\n            this._buildTelemetrySectionButtons(prefs),\n          ];\n        }\n      }),\n      testId('telemetry-section'),\n    );\n  }\n\n  private _buildTelemetrySectionButtons(prefs: TelemetryPrefsWithSources) {\n    const {telemetryLevel: {value, source}} = prefs;\n    if (source === 'preferences') {\n      return dom.domComputed(this._optInToTelemetry, (optedIn) => {\n        if (optedIn) {\n          return [\n            cssOptInOutMessage(\n              t('You have opted in to telemetry. Thank you!'), ' üôè',\n              testId('telemetry-section-message'),\n            ),\n            cssOptOutButton(t('Opt out of Telemetry'),\n              dom.on('click', () => this._optInToTelemetry.set(false)),\n            ),\n          ];\n        } else {\n          return [\n            cssOptInButton(t('Opt in to Telemetry'),\n              dom.on('click', () => this._optInToTelemetry.set(true)),\n            ),\n          ];\n        }\n      });\n    } else {\n      return cssOptInOutMessage(\n        value !== 'off'\n          ? [t('You have opted in to telemetry. Thank you!'), ' üôè']\n          : t('You have opted out of telemetry.'),\n        testId('telemetry-section-message'),\n      );\n    }\n  }\n\n  private _buildSponsorshipSection() {\n    return cssSection(\n      cssSectionTitle(t('Sponsor Grist Labs on GitHub')),\n      cssParagraph(\n        t(\n          'Grist software is developed by Grist Labs, which offers free and paid ' +\n          'hosted plans. We also make Grist code available under a standard free ' +\n          'and open OSS license (Apache 2.0) on {{link}}.',\n          {link: gristCoreLink()},\n        ),\n      ),\n      cssParagraph(\n        t(\n          'You can support Grist open-source development by sponsoring ' +\n          'us on our {{link}}.',\n          {link: sponsorGristLink()},\n        ),\n      ),\n      cssParagraph(t(\n        'We are a small and determined team. Your support matters a lot to us. ' +\n        'It also shows to others that there is a determined community behind this product.'\n      )),\n      cssSponsorButton(\n        cssButtonIconAndText(icon('Heart'), cssButtonText(t('Manage Sponsorship'))),\n        {href: commonUrls.githubSponsorGristLabs, target: '_blank'},\n      ),\n      testId('sponsorship-section'),\n    );\n  }\n}\n\nfunction telemetryHelpCenterLink() {\n  return cssLink(\n    t('Help Center'),\n    {href: commonUrls.helpTelemetryLimited, target: '_blank'},\n  );\n}\n\nfunction sponsorGristLink() {\n  return cssLink(\n    t('GitHub Sponsors page'),\n    {href: commonUrls.githubSponsorGristLabs, target: '_blank'},\n  );\n}\n\nfunction gristCoreLink() {\n  return cssLink(\n    t('GitHub'),\n    {href: commonUrls.githubGristCore, target: '_blank'},\n  );\n}\n\nconst cssPageContainer = styled('div', `\n  overflow: auto;\n  padding: 64px 80px;\n\n  @media ${mediaSmall} {\n    & {\n      padding: 0px;\n    }\n  }\n`);\n\nconst cssPage = styled('div', `\n  padding: 16px;\n  max-width: 600px;\n  width: 100%;\n`);\n\nconst cssPageTitle = styled('div', `\n  height: 32px;\n  line-height: 32px;\n  margin-bottom: 24px;\n  color: ${theme.text};\n  font-size: 24px;\n  font-weight: ${vars.headerControlTextWeight};\n`);\n\nconst cssSectionTitle = styled('div', `\n  height: 24px;\n  line-height: 24px;\n  margin-bottom: 24px;\n  color: ${theme.text};\n  font-size: ${vars.xlargeFontSize};\n  font-weight: ${vars.headerControlTextWeight};\n`);\n\nconst cssSection = styled('div', `\n  margin-bottom: 60px;\n`);\n\nconst cssParagraph = styled('div', `\n  color: ${theme.text};\n  font-size: 14px;\n  line-height: 20px;\n  margin-bottom: 12px;\n`);\n\nconst cssOptInOutMessage = styled(cssParagraph, `\n  line-height: 40px;\n  font-weight: 600;\n  margin-top: 24px;\n  margin-bottom: 0px;\n`);\n\nconst cssOptInButton = styled(bigPrimaryButton, `\n  margin-top: 24px;\n`);\n\nconst cssOptOutButton = styled(bigBasicButton, `\n  margin-top: 24px;\n`);\n\nconst cssSponsorButton = styled(bigBasicButtonLink, `\n  margin-top: 24px;\n`);\n\nconst cssButtonIconAndText = styled('div', `\n  display: flex;\n  align-items: center;\n`);\n\nconst cssButtonText = styled('span', `\n  margin-left: 8px;\n`);\n\nconst cssSpinnerBox = styled('div', `\n  margin-top: 24px;\n  text-align: center;\n`);\n","import {AppModel} from 'app/client/models/AppModel';\nimport {DocPageModel} from 'app/client/models/DocPageModel';\n\nexport function buildHomeBanners(_app: AppModel) {\n  return null;\n}\n\nexport function buildDocumentBanners(_docPageModel: DocPageModel) {\n  return null;\n}\n"],"names":["testId","makeTestId","t","makeT","SupportGristPage","Disposable","constructor","_appModel","super","_model","this","_optInToTelemetry","Computed","prefs","_use","telemetryLevel","value","onWrite","async","optIn","updateTelemetryPrefs","fetchTelemetryPrefs","catch","reportError","panelOpen","Observable","leftPanel","panelWidth","hideOpener","header","dom","content","headerMain","_buildMainHeader","contentTop","contentMain","_buildMainContent","style","urlState","setLinkUrl","cssPageContainer","cssPage","cssPageTitle","_buildTelemetrySection","_buildSponsorshipSection","cssSection","cssSectionTitle","cssSpinnerBox","activation","getGristConfig","isManager","cssParagraph","link","href","target","_buildTelemetrySectionButtons","source","optedIn","cssOptInOutMessage","cssOptOutButton","set","cssOptInButton","cssSponsorButton","cssButtonIconAndText","icon","cssButtonText","styled","mediaSmall","theme","vars","bigPrimaryButton","bigBasicButton","bigBasicButtonLink","buildHomeBanners","_app","buildDocumentBanners","_docPageModel"],"sourceRoot":""}