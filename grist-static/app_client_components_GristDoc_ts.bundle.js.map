{"version":3,"file":"app_client_components_GristDoc_ts.bundle.js","mappings":"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","sources":["./app/client/aclui/ACLColumnList.ts?","./app/client/aclui/ACLFormulaEditor.ts?","./app/client/aclui/ACLMemoEditor.ts?","./app/client/aclui/ACLSelect.ts?","./app/client/aclui/ACLUsers.ts?","./app/client/aclui/AccessRules.ts?","./app/client/aclui/PermissionsWidget.ts?","./app/client/components/ActionLog.ts?","./app/client/components/BaseView2.ts?","./app/client/components/CellPosition.ts?","./app/client/components/CellSelector.ts?","./app/client/components/CodeEditorPanel.ts?","./app/client/components/CopySelection.ts?","./app/client/components/CursorMonitor.ts?","./app/client/components/CustomCalendarView.ts?","./app/client/components/CustomView.ts?","./app/client/components/DataTables.ts?","./app/client/components/DocComm.ts?","./app/client/components/DocumentUsage.ts?","./app/client/components/Drafts.ts?","./app/client/components/EditorMonitor.ts?","./app/client/components/GristDoc.ts?","./app/client/components/Importer.ts?","./app/client/components/Layout.ts?","./app/client/components/LayoutEditor.ts?","./app/client/components/LayoutTray.ts?","./app/client/components/LinkingState.ts?","./app/client/components/ParseOptions.ts?","./app/client/components/PluginScreen.ts?","./app/client/components/Printing.ts?","./app/client/components/RawDataPage.ts?","./app/client/components/SelectionSummary.ts?","./app/client/components/UndoStack.ts?","./app/client/components/ViewLayout.ts?","./app/client/components/WidgetFrame.ts?","./app/client/components/buildViewSectionDom.ts?","./app/client/lib/DocPluginManager.ts?","./app/client/lib/HomePluginManager.ts?","./app/client/lib/ImportSourceElement.ts?","./app/client/lib/Signal.ts?","./app/client/lib/dblclick.ts?","./app/client/lib/domUtils.ts?","./app/client/lib/guessTimezone.ts?","./app/client/models/ColumnACIndexes.ts?","./app/client/models/ColumnCache.ts?","./app/client/models/DocData.ts?","./app/client/models/DocModel.ts?","./app/client/models/HomeModel.ts?","./app/client/models/RuleOwner.ts?","./app/client/models/TableData.ts?","./app/client/models/ViewFieldConfig.ts?","./app/client/models/VirtualTable.ts?","./app/client/models/entities/ACLRuleRec.ts?","./app/client/models/entities/CellRec.ts?","./app/client/models/entities/ColumnRec.ts?","./app/client/models/entities/DocInfoRec.ts?","./app/client/models/entities/FilterRec.ts?","./app/client/models/entities/PageRec.ts?","./app/client/models/entities/TabBarRec.ts?","./app/client/models/entities/TableRec.ts?","./app/client/models/entities/ValidationRec.ts?","./app/client/models/entities/ViewFieldRec.ts?","./app/client/models/entities/ViewRec.ts?","./app/client/models/entities/ViewSectionRec.ts?","./app/client/ui/CellContextMenu.ts?","./app/client/ui/ColumnTitle.ts?","./app/client/ui/DocHistory.ts?","./app/client/ui/DocMenuCss.ts?","./app/client/ui/DocTour.ts?","./app/client/ui/DocTutorial.ts?","./app/client/ui/DocTutorialRenderer.ts?","./app/client/ui/DocumentSettings.ts?","./app/client/ui/DuplicateTable.ts?","./app/client/ui/ExampleCard.ts?","./app/client/ui/FieldContextMenu.ts?","./app/client/ui/GridViewMenus.ts?","./app/client/ui/MenuToggle.ts?","./app/client/ui/OnBoardingPopups.ts?","./app/client/ui/RenamePopupStyles.ts?","./app/client/ui/RowContextMenu.ts?","./app/client/ui/UserItem.ts?","./app/client/ui/ViewLayoutMenu.ts?","./app/client/ui/ViewSectionMenu.ts?","./app/client/ui/WebhookPage.ts?","./app/client/ui/WelcomeTour.ts?","./app/client/ui/WidgetTitle.ts?","./app/client/ui/YouTubePlayer.ts?","./app/client/ui/contextMenu.ts?","./app/client/ui/transientInput.ts?","./app/client/ui2018/IconList.ts?","./app/common/ACLPermissions.ts?","./app/common/ACLRuleCollection.ts?","./app/common/ActionBundle.ts?","./app/common/ActionDispatcher.ts?","./app/common/ActionSummarizer.ts?","./app/common/ActiveDocAPI.ts?","./app/common/AlternateActions.ts?","./app/common/DocActions.ts?","./app/common/DocData.ts?","./app/common/DocDataCache.ts?","./app/common/DocUsage.ts?","./app/common/GranularAccessClause.ts?","./app/common/TableData.ts?","./app/common/schema.ts?","./app/client/components/Clipboard.js?","./app/client/components/DetailView.js?","./app/client/components/DocConfigTab.js?","./app/client/components/GridView.js?","./app/client/components/RecordLayout.js?","./app/client/components/RecordLayoutEditor.js?","./app/client/components/ValidationPanel.js?","./app/client/components/viewCommon.js?","./app/client/lib/koDomScrolly.js?","./app/client/models/MetaRowModel.js?","./app/client/models/MetaTableModel.js?","./app/common/BinaryIndexedTree.js?"],"sourcesContent":["/**\n * Implements a widget for showing and editing a list of colIds. It offers a select dropdown to\n * add a new column, and allows removing already-added columns.\n */\nimport {aclSelect, cssSelect} from 'app/client/aclui/ACLSelect';\nimport {testId, theme} from 'app/client/ui2018/cssVars';\nimport {icon} from 'app/client/ui2018/icons';\nimport {Computed, dom, Observable, styled} from 'grainjs';\n\nexport function aclColumnList(colIds: Observable<string[]>, validColIds: string[]) {\n  // Define some helpers functions.\n  function removeColId(colId: string) {\n    colIds.set(colIds.get().filter(c => (c !== colId)));\n  }\n  function addColId(colId: string) {\n    colIds.set([...colIds.get(), colId]);\n    selectBox.focus();\n  }\n  function onFocus(ev: FocusEvent) {\n    editing.set(true);\n    // Focus the select box, except when focus just moved from it, e.g. after Shift-Tab.\n    if (ev.relatedTarget !== selectBox) {\n      selectBox.focus();\n    }\n  }\n  function onBlur() {\n    if (!selectBox.matches('.weasel-popup-open') && colIds.get().length > 0) {\n      editing.set(false);\n    }\n  }\n\n  // The observable for the selected element is a Computed, with a callback for being set, which\n  // adds the selected colId to the list.\n  const newColId = Computed.create(null, (use) => '')\n    .onWrite((value) => { setTimeout(() => addColId(value), 0); });\n\n  // We don't allow adding the same column twice, so for the select dropdown build a list of\n  // unused colIds.\n  const unusedColIds = Computed.create(null, colIds, (use, _colIds) => {\n    const used = new Set(_colIds);\n    return validColIds.filter(c => !used.has(c));\n  });\n\n  // The \"editing\" observable determines which of two states is active: to show or to edit.\n  const editing = Observable.create(null, !colIds.get().length);\n\n  let selectBox: HTMLElement;\n  return cssColListWidget({tabIndex: '0'},\n    dom.autoDispose(unusedColIds),\n    cssColListWidget.cls('-editing', editing),\n    dom.on('focus', onFocus),\n    dom.forEach(colIds, colId =>\n      cssColItem(\n        cssColId(colId),\n        cssColItemIcon(icon('CrossSmall'),\n          dom.on('click', () => removeColId(colId)),\n          testId('acl-col-remove'),\n        ),\n        testId('acl-column'),\n      )\n    ),\n    cssNewColItem(\n      dom.update(\n        selectBox = aclSelect(newColId, unusedColIds, {defaultLabel: '[Add Column]'}),\n        cssSelect.cls('-active'),\n        dom.on('blur', onBlur),\n        dom.onKeyDown({Escape: onBlur}),\n        // If starting out in edit mode, focus the select box.\n        (editing.get() ? (elem) => { setTimeout(() => elem.focus(), 0); } : null)\n      ),\n    )\n  );\n}\n\n\nconst cssColListWidget = styled('div', `\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  position: relative;\n  outline: none;\n  margin: 6px 8px;\n  cursor: pointer;\n  border-radius: 4px;\n\n  border: 1px solid transparent;\n  &:not(&-editing):hover {\n    border: 1px solid ${theme.accessRulesColumnListBorder};\n  }\n`);\n\nconst cssColItem = styled('div', `\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  border-radius: 3px;\n  padding-left: 6px;\n  padding-right: 2px;\n  color: ${theme.accessRulesColumnItemFg};\n\n  .${cssColListWidget.className}-editing & {\n    background-color: ${theme.accessRulesColumnItemBg};\n  }\n`);\n\nconst cssColId = styled('div', `\n  flex: auto;\n  height: 24px;\n  line-height: 24px;\n  min-width: 0;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`);\n\nconst cssNewColItem = styled('div', `\n  margin-top: 2px;\n  display: none;\n  .${cssColListWidget.className}-editing & {\n    display: flex;\n  }\n`);\n\nconst cssColItemIcon = styled('div', `\n  flex: none;\n  height: 16px;\n  width: 16px;\n  border-radius: 16px;\n  display: none;\n  cursor: default;\n  --icon-color: ${theme.accessRulesColumnItemIconFg};\n  &:hover {\n    background-color: ${theme.accessRulesColumnItemIconHoverBg};\n    --icon-color: ${theme.accessRulesColumnItemIconHoverFg};\n  }\n  .${cssColListWidget.className}-editing & {\n    display: flex;\n  }\n`);\n","import ace, {Ace} from 'ace-builds';\nimport {setupAceEditorCompletions} from 'app/client/components/AceEditorCompletions';\nimport {theme} from 'app/client/ui2018/cssVars';\nimport {Theme} from 'app/common/ThemePrefs';\nimport {getGristConfig} from 'app/common/urlUtils';\nimport {Computed, dom, DomArg, Listener, Observable, styled} from 'grainjs';\nimport debounce from 'lodash/debounce';\n\nexport interface ACLFormulaOptions {\n  gristTheme: Computed<Theme>;\n  initialValue: string;\n  readOnly: boolean;\n  placeholder: DomArg;\n  setValue: (value: string) => void;\n  getSuggestions: (prefix: string) => string[];\n  customiseEditor?: (editor: Ace.Editor) => void;\n}\n\nexport function aclFormulaEditor(options: ACLFormulaOptions) {\n  // Create an element and an editor within it.\n  const editorElem = dom('div');\n  const editor: Ace.Editor = ace.edit(editorElem);\n\n  // Set various editor options.\n  function setAceTheme(gristTheme: Theme) {\n    const {enableCustomCss} = getGristConfig();\n    const gristAppearance = gristTheme.appearance;\n    const aceTheme = gristAppearance === 'dark' && !enableCustomCss ? 'dracula' : 'chrome';\n    editor.setTheme(`ace/theme/${aceTheme}`);\n  }\n  setAceTheme(options.gristTheme.get());\n  let themeListener: Listener | undefined;\n  if (!getGristConfig().enableCustomCss) {\n    themeListener = options.gristTheme.addListener((gristTheme) => {\n      setAceTheme(gristTheme);\n    });\n  }\n  // ACE editor resizes automatically when maxLines is set.\n  editor.setOptions({enableLiveAutocompletion: true, maxLines: 10});\n  editor.renderer.setShowGutter(false);       // Default line numbers to hidden\n  editor.renderer.setPadding(5);\n  editor.renderer.setScrollMargin(4, 4, 0, 0);\n  (editor as any).$blockScrolling = Infinity;\n  editor.setReadOnly(options.readOnly);\n  editor.setFontSize('12');\n  editor.setHighlightActiveLine(false);\n\n  const session = editor.getSession();\n  session.setMode('ace/mode/python');\n  session.setTabSize(2);\n  session.setUseWrapMode(false);\n\n  // Implement placeholder text since the version of ACE we use doesn't support one.\n  const showPlaceholder = Observable.create(null, !options.initialValue.length);\n  editor.renderer.scroller.appendChild(\n    cssAcePlaceholder(dom.show(showPlaceholder), options.placeholder)\n  );\n  editor.on(\"change\", () => showPlaceholder.set(!editor.getValue().length));\n\n  async function getSuggestions(prefix: string): Promise<Array<[string, null]>> {\n    return [\n      // The few Python keywords and constants we support.\n      'and', 'or', 'not', 'in', 'is', 'True', 'False', 'None',\n      // Some grist-specific constants:\n      'OWNER', 'EDITOR', 'VIEWER',\n      // The common variables.\n      'user', 'rec', 'newRec',\n      // Other completions that depend on doc schema or other rules.\n      ...options.getSuggestions(prefix),\n    ].map(suggestion => [suggestion, null]);  // null means no example value\n  }\n  setupAceEditorCompletions(editor, {getSuggestions});\n\n  // Save on blur.\n  editor.on(\"blur\", () => options.setValue(editor.getValue()));\n\n  // Save changes every 1 second\n  const save = debounce(() => options.setValue(editor.getValue()), 1000);\n  editor.on(\"change\", save);\n\n  // Blur (and save) on Enter key.\n  editor.commands.addCommand({\n    name: 'onEnter',\n    bindKey: {win: 'Enter', mac: 'Enter'},\n    exec: () => editor.blur(),\n  });\n  // Disable Tab/Shift+Tab commands to restore their regular behavior.\n  (editor.commands as any).removeCommands(['indent', 'outdent']);\n\n  // Set the editor's initial value.\n  editor.setValue(options.initialValue);\n\n  if (options.customiseEditor) {\n    options.customiseEditor(editor);\n  }\n\n  return cssConditionInputAce(\n    dom.autoDispose(themeListener ?? null),\n    cssConditionInputAce.cls('-disabled', options.readOnly),\n    // ACE editor calls preventDefault on clicks into the scrollbar area, which prevents focus\n    // being set when the click happens to be into there. To ensure we can focus on such clicks\n    // anyway, listen to the mousedown event in the capture phase.\n    dom.on('mousedown', () => { editor.focus(); }, {useCapture: true}),\n    dom.onDispose(() => editor.destroy()),\n    dom.onDispose(() => save.cancel()),\n    editorElem,\n  );\n}\n\nconst cssConditionInputAce = styled('div', `\n  width: 100%;\n  min-height: 28px;\n  padding: 1px;\n  border-radius: 3px;\n  border: 1px solid transparent;\n  cursor: pointer;\n\n  &:hover {\n    border: 1px solid ${theme.accessRulesFormulaEditorBorderHover};\n  }\n  &:not(&-disabled):focus-within {\n    box-shadow: inset 0 0 0 1px ${theme.accessRulesFormulaEditorFocus};\n    border-color: ${theme.accessRulesFormulaEditorFocus};\n  }\n  &:not(:focus-within) .ace_scroller, &-disabled .ace_scroller {\n    cursor: unset;\n  }\n  &-disabled, &-disabled:hover {\n    background-color: ${theme.accessRulesFormulaEditorBgDisabled};\n    box-shadow: unset;\n    border-color: transparent;\n  }\n  & .ace-chrome, & .ace-dracula {\n    background-color: ${theme.accessRulesFormulaEditorBg};\n  }\n  &-disabled .ace-chrome, &-disabled .ace-dracula {\n    background-color: ${theme.accessRulesFormulaEditorBgDisabled};\n  }\n  & .ace_marker-layer, & .ace_cursor-layer {\n    display: none;\n  }\n  &:not(&-disabled) .ace_focus .ace_marker-layer, &:not(&-disabled) .ace_focus .ace_cursor-layer {\n    display: block;\n  }\n`);\n\nconst cssAcePlaceholder = styled('div', `\n  padding: 4px 5px;\n  opacity: 0.5;\n`);\n","import {theme} from 'app/client/ui2018/cssVars';\nimport {dom, DomElementArg, Observable, styled} from 'grainjs';\n\nexport function aclMemoEditor(obs: Observable<string>, ...args: DomElementArg[]): HTMLInputElement {\n  return cssMemoInput(\n    dom.prop('value', obs),\n    dom.on('input', (_e, elem) => obs.set(elem.value)),\n    ...args,\n  );\n}\n\nconst cssMemoInput = styled('input', `\n  width: 100%;\n  min-height: 28px;\n  padding: 4px 5px;\n  border-radius: 3px;\n  border: 1px solid transparent;\n  cursor: pointer;\n  color: ${theme.accentText};\n  background-color: ${theme.inputBg};\n  caret-color : ${theme.inputFg};\n  font: 12px 'Monaco', 'Menlo', 'Ubuntu Mono', 'Consolas', 'source-code-pro', monospace;\n  overflow: hidden;\n  text-overflow: ellipsis;\n\n  &:hover {\n    border: 1px solid ${theme.inputBorder};\n  }\n  &:not(&-disabled):focus-within {\n    outline: none !important;\n    cursor: text;\n    box-shadow: inset 0 0 0 1px ${theme.accentBorder};\n    border-color: ${theme.accentBorder};\n  }\n`);\n","import {colors} from 'app/client/ui2018/cssVars';\nimport {icon} from 'app/client/ui2018/icons';\nimport {IOption, select} from 'app/client/ui2018/menus';\nimport {MaybeObsArray, Observable, styled} from 'grainjs';\nimport * as weasel from 'popweasel';\n\n/**\n * A styled version of select() from ui2018/menus, for use in the AccessRules page.\n */\nexport function aclSelect<T>(obs: Observable<T>, optionArray: MaybeObsArray<IOption<T>>,\n                             options: weasel.ISelectUserOptions = {}) {\n  return cssSelect(obs, optionArray, {buttonArrow: cssSelectArrow('Collapse'), ...options});\n}\n\nexport const cssSelect = styled(select, `\n  height: 28px;\n  width: 100%;\n  border: 1px solid transparent;\n  cursor: pointer;\n\n  &:hover, &:focus, &.weasel-popup-open, &-active {\n    border: 1px solid ${colors.darkGrey};\n    box-shadow: none;\n  }\n`);\n\nconst cssSelectCls = cssSelect.className;\n\nconst cssSelectArrow = styled(icon, `\n  margin: 0 2px;\n  pointer-events: none;\n  display: none;\n\n  .${cssSelectCls}:hover &, .${cssSelectCls}:focus &, .weasel-popup-open &, .${cssSelectCls}-active & {\n    display: flex;\n  }\n`);\n","import {DocPageModel} from 'app/client/models/DocPageModel';\nimport {urlState} from 'app/client/models/gristUrlState';\nimport {createUserImage} from 'app/client/ui/UserImage';\nimport {cssMemberImage, cssMemberListItem, cssMemberPrimary,\n        cssMemberSecondary, cssMemberText} from 'app/client/ui/UserItem';\nimport {testId, theme, vars} from 'app/client/ui2018/cssVars';\nimport {PermissionDataWithExtraUsers} from 'app/common/ActiveDocAPI';\nimport {menu, menuCssClass, menuItemLink} from 'app/client/ui2018/menus';\nimport {IGristUrlState, userOverrideParams} from 'app/common/gristUrls';\nimport {FullUser} from 'app/common/LoginSessionAPI';\nimport {ANONYMOUS_USER_EMAIL, EVERYONE_EMAIL} from 'app/common/UserAPI';\nimport {getRealAccess, UserAccessData} from 'app/common/UserAPI';\nimport {Disposable, dom, Observable, styled} from 'grainjs';\nimport {cssMenu, cssMenuWrap, defaultMenuOptions, IMenuOptions, IPopupOptions, setPopupToCreateDom} from 'popweasel';\nimport {getUserRoleText} from 'app/common/UserAPI';\nimport {makeT} from 'app/client/lib/localization';\nimport {waitGrainObs} from 'app/common/gutil';\nimport noop from 'lodash/noop';\n\nconst t = makeT(\"ViewAsDropdown\");\n\nfunction isSpecialEmail(email: string) {\n  return email === ANONYMOUS_USER_EMAIL || email === EVERYONE_EMAIL;\n}\n\nexport class ACLUsersPopup extends Disposable {\n  public readonly isInitialized = Observable.create(this, false);\n  public readonly allUsers = Observable.create<UserAccessData[]>(this, []);\n  private _shareUsers: UserAccessData[] = [];           // Users doc is shared with.\n  private _attributeTableUsers: UserAccessData[] = [];  // Users mentioned in attribute tables.\n  private _exampleUsers: UserAccessData[] = [];         // Example users.\n  private _currentUser: FullUser|null = null;\n\n  constructor(public pageModel: DocPageModel,\n              public fetch: () => Promise<PermissionDataWithExtraUsers|null> = () => this._fetchData()) {\n    super();\n  }\n\n  public async load() {\n    const permissionData = await this.fetch();\n    if (this.isDisposed()) { return; }\n    this.init(permissionData);\n  }\n\n  public getUsers() {\n    const users = [...this._shareUsers, ...this._attributeTableUsers];\n    if (this._showExampleUsers()) { users.push(...this._exampleUsers); }\n    return users;\n  }\n\n  public init(permissionData: PermissionDataWithExtraUsers|null) {\n    const pageModel = this.pageModel;\n    this._currentUser = pageModel.userOverride.get()?.user || pageModel.appModel.currentValidUser;\n\n    if (permissionData) {\n      this._shareUsers = permissionData.users.map(user => ({\n        ...user,\n        access: getRealAccess(user, permissionData),\n      }))\n        .filter(user => user.access && !isSpecialEmail(user.email))\n        .filter(user => this._currentUser?.id !== user.id);\n      this._attributeTableUsers = permissionData.attributeTableUsers;\n      this._exampleUsers = permissionData.exampleUsers;\n      this.allUsers.set(this.getUsers());\n      this.isInitialized.set(true);\n    }\n  }\n\n  // Optionnally have document page reverts to the default page upon activation of the view as mode\n  // by setting `options.resetDocPage` to true.\n  public attachPopup(elem: Element, options: IPopupOptions & {resetDocPage?: boolean}) {\n    setPopupToCreateDom(elem, (ctl) => {\n      const buildRow =\n        (user: UserAccessData) => this._buildUserRow(user, options);\n      const buildExampleUserRow =\n        (user: UserAccessData) => this._buildUserRow(user, {isExampleUser: true, ...options});\n      return cssMenuWrap(cssMenu(\n        dom.cls(menuCssClass),\n        cssUsers.cls(''),\n        cssHeader(t('View As'), dom.show(this._shareUsers.length > 0)),\n        dom.forEach(this._shareUsers, buildRow),\n        (this._attributeTableUsers.length > 0) ? cssHeader(t(\"Users from table\")) : null,\n        dom.forEach(this._attributeTableUsers, buildExampleUserRow),\n        // Include example users only if there are not many \"real\" users.\n        // It might be better to have an expandable section with these users, collapsed\n        // by default, but that's beyond my UI ken.\n        this._showExampleUsers() ? [\n          (this._exampleUsers.length > 0) ? cssHeader(t(\"Example Users\")) : null,\n          dom.forEach(this._exampleUsers, buildExampleUserRow)\n        ] : null,\n        (el) => { setTimeout(() => el.focus(), 0); },\n        dom.onKeyDown({Escape: () => ctl.close()}),\n      ));\n    }, {...defaultMenuOptions, ...options});\n  }\n\n  // See 'attachPopup' for more info on the 'resetDocPage' option.\n  public menu(options: IMenuOptions) {\n    return menu(() => {\n      this.load().catch(noop);\n      return [\n        cssMenuHeader('view as'),\n        dom.forEach(this.allUsers, user => menuItemLink(\n          `${user.name || user.email} (${getUserRoleText(user)})`,\n          testId('acl-user-access'),\n          this._viewAs(user),\n        )),\n      ];\n    }, options);\n  }\n\n  private async _fetchData() {\n    const doc = this.pageModel.currentDoc.get();\n    const gristDoc = await waitGrainObs(this.pageModel.gristDoc);\n    return doc && gristDoc.docComm.getUsersForViewAs();\n  }\n\n  private _showExampleUsers() {\n    return this._shareUsers.length + this._attributeTableUsers.length < 5;\n  }\n\n  private _buildUserRow(user: UserAccessData, opt: {isExampleUser?: boolean, resetDocPage?: boolean} = {}) {\n    return dom('a',\n      {class: cssMemberListItem.className + ' ' + cssUserItem.className},\n      cssMemberImage(\n        createUserImage(opt.isExampleUser ? 'exampleUser' : user, 'large')\n      ),\n      cssMemberText(\n        cssMemberPrimary(user.name || dom('span', user.email),\n          cssRole('(', getUserRoleText(user), ')', testId('acl-user-access')),\n        ),\n        user.name ? cssMemberSecondary(user.email) : null\n      ),\n      this._viewAs(user, opt.resetDocPage),\n      testId('acl-user-item'),\n    );\n  }\n\n  private _viewAs(user: UserAccessData, resetDocPage: boolean = false) {\n    const extraState: IGristUrlState = {};\n    if (resetDocPage) { extraState.docPage = undefined; }\n    if (this.pageModel?.isPrefork.get() &&\n        this.pageModel?.currentDoc.get()?.access !== 'owners') {\n      // \"View As\" is restricted to document owners on the back-end. Non-owners can be\n      // permitted to pretend to be owners of a pre-forked document, but if they want\n      // to do \"View As\", that would be layering pretence over pretense. Better to just\n      // go ahead and create the fork, so the user becomes a genuine owner, so the\n      // back-end doesn't have to become too metaphysical (and maybe hard to review).\n      return dom.on('click', async () => {\n        const forkResult = await this.pageModel?.gristDoc.get()?.docComm.fork();\n        if (!forkResult) { throw new Error('Failed to create fork'); }\n        window.location.assign(urlState().makeUrl(userOverrideParams(user.email,\n                                                                     {...extraState, doc: forkResult.urlId})));\n      });\n    } else {\n      // When forking isn't needed, we return a direct link to be maximally transparent\n      // about where button will go.\n      return urlState().setHref(userOverrideParams(user.email, extraState));\n    }\n  }\n}\n\nconst cssUsers = styled('div', `\n  max-width: unset;\n`);\n\nconst cssUserItem = styled(cssMemberListItem, `\n  width: auto;\n  padding: 8px 16px;\n  align-items: center;\n  &:hover {\n    background-color: ${theme.lightHover};\n  }\n  &, &:hover, &:focus {\n    text-decoration: none;\n  }\n`);\n\nconst cssRole = styled('span', `\n  margin: 0 8px;\n  font-weight: normal;\n`);\n\nconst cssHeader = styled('div', `\n  margin: 11px 24px 14px 24px;\n  font-weight: 700;\n  text-transform: uppercase;\n  font-size: ${vars.xsmallFontSize};\n  color: ${theme.darkText};\n`);\n\nconst cssMenuHeader = styled('div', `\n  margin: 8px 24px;\n  margin-bottom: 4px;\n  font-weight: 700;\n  text-transform: uppercase;\n  font-size: ${vars.xsmallFontSize};\n  color: ${theme.darkText};\n`);\n","/**\n * UI for managing granular ACLs.\n */\nimport {aclColumnList} from 'app/client/aclui/ACLColumnList';\nimport {aclFormulaEditor} from 'app/client/aclui/ACLFormulaEditor';\nimport {aclMemoEditor} from 'app/client/aclui/ACLMemoEditor';\nimport {aclSelect} from 'app/client/aclui/ACLSelect';\nimport {ACLUsersPopup} from 'app/client/aclui/ACLUsers';\nimport {PermissionKey, permissionsWidget} from 'app/client/aclui/PermissionsWidget';\nimport {GristDoc} from 'app/client/components/GristDoc';\nimport {reportError, UserError} from 'app/client/models/errors';\nimport {TableData} from 'app/client/models/TableData';\nimport {shadowScroll} from 'app/client/ui/shadowScroll';\nimport {bigBasicButton, bigPrimaryButton} from 'app/client/ui2018/buttons';\nimport {squareCheckbox} from 'app/client/ui2018/checkbox';\nimport {testId, theme} from 'app/client/ui2018/cssVars';\nimport {textInput} from 'app/client/ui2018/editableLabel';\nimport {cssIconButton, icon} from 'app/client/ui2018/icons';\nimport {menu, menuItemAsync} from 'app/client/ui2018/menus';\nimport {\n  emptyPermissionSet,\n  MixedPermissionValue,\n  parsePermissions,\n  PartialPermissionSet,\n  permissionSetToText,\n  summarizePermissions,\n  summarizePermissionSet\n} from 'app/common/ACLPermissions';\nimport {ACLRuleCollection, isSchemaEditResource, SPECIAL_RULES_TABLE_ID} from 'app/common/ACLRuleCollection';\nimport {AclRuleProblem, AclTableDescription, getTableTitle} from 'app/common/ActiveDocAPI';\nimport {BulkColValues, getColValues, RowRecord, UserAction} from 'app/common/DocActions';\nimport {\n  FormulaProperties,\n  getFormulaProperties,\n  RulePart,\n  RuleSet,\n  UserAttributeRule\n} from 'app/common/GranularAccessClause';\nimport {isHiddenCol} from 'app/common/gristTypes';\nimport {isNonNullish, unwrap} from 'app/common/gutil';\nimport {SchemaTypes} from 'app/common/schema';\nimport {MetaRowRecord} from 'app/common/TableData';\nimport {\n  BaseObservable,\n  Computed,\n  Disposable,\n  dom,\n  DomContents,\n  DomElementArg,\n  IDisposableOwner,\n  MutableObsArray,\n  obsArray,\n  Observable,\n  styled\n} from 'grainjs';\nimport {makeT} from 'app/client/lib/localization';\nimport isEqual = require('lodash/isEqual');\n\nconst t = makeT('AccessRules');\n\n// tslint:disable:max-classes-per-file no-console\n\n// Types for the rows in the ACL tables we use.\ntype ResourceRec = SchemaTypes[\"_grist_ACLResources\"] & {id?: number};\ntype RuleRec = Partial<SchemaTypes[\"_grist_ACLRules\"]> & {id?: number, resourceRec?: ResourceRec};\n\ntype UseCB = <T>(obs: BaseObservable<T>) => T;\n\n// Status of rules, which determines whether the \"Save\" button is enabled. The order of the values\n// matters, as we take the max of all the parts to determine the ultimate status.\nenum RuleStatus {\n  Unchanged,\n  ChangedValid,\n  Invalid,\n  CheckPending,\n}\n\n// UserAttribute autocomplete choices. RuleIndex is used to filter for only those user\n// attributes made available by the previous rules.\ninterface IAttrOption {\n  ruleIndex: number;\n  value: string;\n}\n\n/**\n * Top-most container managing state and dom-building for the ACL rule UI.\n */\nexport class AccessRules extends Disposable {\n  // Whether anything has changed, i.e. whether to show a \"Save\" button.\n  private _ruleStatus: Computed<RuleStatus>;\n\n  // Parsed rules obtained from DocData during last call to update(). Used for _ruleStatus.\n  private _ruleCollection = new ACLRuleCollection();\n\n  // Array of all per-table rules.\n  private _tableRules = this.autoDispose(obsArray<TableRules>());\n\n  // The default rule set for the document (for \"*:*\").\n  private _docDefaultRuleSet = Observable.create<DefaultObsRuleSet|null>(this, null);\n\n  // Special document-level rules, for resources of the form (\"*SPECIAL:<RuleType>\").\n  // These rules are shown in different places - currently most are shown as a separate\n  // section, and one is folded into the default rule section (for SeedRule).\n  private _specialRulesWithDefault = Observable.create<SpecialRules|null>(this, null);\n  private _specialRulesSeparate = Observable.create<SpecialRules|null>(this, null);\n\n  // Array of all UserAttribute rules.\n  private _userAttrRules = this.autoDispose(obsArray<ObsUserAttributeRule>());\n\n  // Array of all user-attribute choices created by UserAttribute rules. Used for lookup items in\n  // rules, and for ACLFormula completions.\n  private _userAttrChoices: Computed<IAttrOption[]>;\n\n  // Whether the save button should be enabled.\n  private _savingEnabled: Computed<boolean>;\n\n  // Error or warning message to show next to Save/Reset buttons if non-empty.\n  private _errorMessage = Observable.create(this, '');\n\n  // Details of rule problems, for offering solutions to the user.\n  private _ruleProblems = this.autoDispose(obsArray<AclRuleProblem>());\n\n  // Map of tableId to basic metadata for all tables in the document.\n  private _aclResources = new Map<string, AclTableDescription>();\n\n  private _aclUsersPopup = ACLUsersPopup.create(this, this.gristDoc.docPageModel);\n\n  constructor(public gristDoc: GristDoc) {\n    super();\n    this._ruleStatus = Computed.create(this, (use) => {\n      const defRuleSet = use(this._docDefaultRuleSet);\n      const tableRules = use(this._tableRules);\n      const specialRulesWithDefault = use(this._specialRulesWithDefault);\n      const specialRulesSeparate = use(this._specialRulesSeparate);\n      const userAttr = use(this._userAttrRules);\n      return Math.max(\n        defRuleSet ? use(defRuleSet.ruleStatus) : RuleStatus.Unchanged,\n        // If any tables/userAttrs were changed or added, they will be considered changed. If\n        // there were only removals, then length will be reduced.\n        getChangedStatus(tableRules.length < this._ruleCollection.getAllTableIds().length),\n        getChangedStatus(userAttr.length < this._ruleCollection.getUserAttributeRules().size),\n        ...tableRules.map(tr => use(tr.ruleStatus)),\n        ...userAttr.map(u => use(u.ruleStatus)),\n        specialRulesWithDefault ? use(specialRulesWithDefault.ruleStatus) : RuleStatus.Unchanged,\n        specialRulesSeparate ? use(specialRulesSeparate.ruleStatus) : RuleStatus.Unchanged,\n      );\n    });\n\n    this._savingEnabled = Computed.create(this, this._ruleStatus, (use, s) =>\n      (s === RuleStatus.ChangedValid));\n\n    this._userAttrChoices = Computed.create(this, this._userAttrRules, (use, rules) => {\n      const result: IAttrOption[] = [\n        {ruleIndex: -1, value: 'user.Access'},\n        {ruleIndex: -1, value: 'user.Email'},\n        {ruleIndex: -1, value: 'user.UserID'},\n        {ruleIndex: -1, value: 'user.Name'},\n        {ruleIndex: -1, value: 'user.LinkKey.'},\n        {ruleIndex: -1, value: 'user.Origin'},\n        {ruleIndex: -1, value: 'user.SessionID'},\n        {ruleIndex: -1, value: 'user.IsLoggedIn'},\n        {ruleIndex: -1, value: 'user.UserRef'},\n      ];\n      for (const [i, rule] of rules.entries()) {\n        const tableId = use(rule.tableId);\n        const name = use(rule.name);\n        for (const colId of this.getValidColIds(tableId) || []) {\n          result.push({ruleIndex: i, value: `user.${name}.${colId}`});\n        }\n      }\n      return result;\n    });\n\n    // The UI in this module isn't really dynamic (that would be tricky while allowing unsaved\n    // changes). Instead, react deliberately if rules change. Note that table/column renames would\n    // trigger changes to rules, so we don't need to listen for those separately.\n    for (const tableId of ['_grist_ACLResources', '_grist_ACLRules']) {\n      const tableData = this.gristDoc.docData.getTable(tableId)!;\n      this.autoDispose(tableData.tableActionEmitter.addListener(this._onChange, this));\n    }\n    this.autoDispose(this.gristDoc.docPageModel.currentDoc.addListener(this._updateDocAccessData, this));\n\n    this.update().catch((e) => this._errorMessage.set(e.message));\n  }\n\n  public get allTableIds() { return Array.from(this._aclResources.keys()).sort(); }\n  public get userAttrRules() { return this._userAttrRules; }\n  public get userAttrChoices() { return this._userAttrChoices; }\n\n  public getTableTitle(tableId: string) {\n    const table = this._aclResources.get(tableId);\n    if (!table) { return `#Invalid (${tableId})`; }\n    return getTableTitle(table);\n  }\n\n  /**\n   * Replace internal state from the rules in DocData.\n   */\n  public async update() {\n    if (this.isDisposed()) { return; }\n    this._errorMessage.set('');\n    const rules = this._ruleCollection;\n\n    const [ , , aclResources] = await Promise.all([\n      rules.update(this.gristDoc.docData, {log: console, pullOutSchemaEdit: true}),\n      this._updateDocAccessData(),\n      this.gristDoc.docComm.getAclResources(),\n    ]);\n    this._aclResources = new Map(Object.entries(aclResources.tables));\n    this._ruleProblems.set(aclResources.problems);\n    if (this.isDisposed()) { return; }\n\n    this._tableRules.set(\n      rules.getAllTableIds()\n      .filter(tableId => (tableId !== SPECIAL_RULES_TABLE_ID))\n      .map(tableId => TableRules.create(this._tableRules,\n          tableId, this, rules.getAllColumnRuleSets(tableId), rules.getTableDefaultRuleSet(tableId)))\n    );\n\n    const withDefaultRules = ['SeedRule'];\n    const separateRules = ['SchemaEdit', 'FullCopies', 'AccessRules'];\n\n    SpecialRules.create(\n      this._specialRulesWithDefault, SPECIAL_RULES_TABLE_ID, this,\n      filterRuleSets(withDefaultRules, rules.getAllColumnRuleSets(SPECIAL_RULES_TABLE_ID)),\n      filterRuleSet(withDefaultRules, rules.getTableDefaultRuleSet(SPECIAL_RULES_TABLE_ID)));\n    SpecialRules.create(\n      this._specialRulesSeparate, SPECIAL_RULES_TABLE_ID, this,\n      filterRuleSets(separateRules, rules.getAllColumnRuleSets(SPECIAL_RULES_TABLE_ID)),\n      filterRuleSet(separateRules, rules.getTableDefaultRuleSet(SPECIAL_RULES_TABLE_ID)));\n    DefaultObsRuleSet.create(this._docDefaultRuleSet, this, null, undefined, rules.getDocDefaultRuleSet());\n    this._userAttrRules.set(\n      Array.from(rules.getUserAttributeRules().values(), userAttr =>\n        ObsUserAttributeRule.create(this._userAttrRules, this, userAttr))\n    );\n  }\n\n  /**\n   * Collect the internal state into records and sync them to the document.\n   */\n  public async save(): Promise<void> {\n    if (!this._savingEnabled.get()) { return; }\n\n    // Note that if anything has changed, we apply changes relative to the current state of the\n    // ACL tables (they may have changed by other users). So our changes will win.\n\n    const docData = this.gristDoc.docData;\n    const resourcesTable = docData.getMetaTable('_grist_ACLResources');\n    const rulesTable = docData.getMetaTable('_grist_ACLRules');\n\n    // Add/remove resources to have just the ones we need.\n    const newResources: MetaRowRecord<'_grist_ACLResources'>[] = flatten(\n      [{tableId: '*', colIds: '*'}],\n      this._specialRulesWithDefault.get()?.getResources() || [],\n      this._specialRulesSeparate.get()?.getResources() || [],\n      ...this._tableRules.get().map(tr => tr.getResources())\n    )\n    // Skip the fake \"*SPECIAL:SchemaEdit\" resource (frontend-specific); these rules are saved to the default resource.\n    .filter(resource => !isSchemaEditResource(resource))\n    .map(r => ({id: -1, ...r}));\n\n    // Prepare userActions and a mapping of serializedResource to rowIds.\n    const resourceSync = syncRecords(resourcesTable, newResources, serializeResource);\n\n    const defaultResourceRowId = resourceSync.rowIdMap.get(serializeResource({id: -1, tableId: '*', colIds: '*'}));\n    if (!defaultResourceRowId) {\n      throw new Error('Default resource missing in resource map');\n    }\n\n    // For syncing rules, we'll go by rowId that we store with each RulePart and with the RuleSet.\n    const newRules: RowRecord[] = [];\n    for (const rule of this.getRules()) {\n      // We use id of 0 internally to mark built-in rules. Skip those.\n      if (rule.id === 0) {\n        continue;\n      }\n\n      // Look up the rowId for the resource.\n      let resourceRowId: number|undefined;\n      // Assign the rules for the fake \"*SPECIAL:SchemaEdit\" resource to the default resource where they belong.\n      if (isSchemaEditResource(rule.resourceRec!)) {\n        resourceRowId = defaultResourceRowId;\n      } else {\n        const resourceKey = serializeResource(rule.resourceRec as RowRecord);\n        resourceRowId = resourceSync.rowIdMap.get(resourceKey);\n        if (!resourceRowId) {\n          throw new Error(`Resource missing in resource map: ${resourceKey}`);\n        }\n      }\n      newRules.push({\n        id: rule.id || -1,\n        resource: resourceRowId,\n        aclFormula: rule.aclFormula!,\n        permissionsText: rule.permissionsText!,\n        rulePos: rule.rulePos || null,\n        memo: rule.memo ?? '',\n      });\n    }\n\n    // UserAttribute rules are listed in the same rulesTable.\n    for (const userAttr of this._userAttrRules.get()) {\n      const rule = userAttr.getRule();\n      newRules.push({\n        id: rule.id || -1,\n        resource: defaultResourceRowId,\n        rulePos: rule.rulePos || null,\n        userAttributes: rule.userAttributes,\n      });\n    }\n\n    // We need to fill in rulePos values. We'll add them in the order the rules are listed (since\n    // this.getRules() returns them in a suitable order), keeping rulePos unchanged when possible.\n    let lastGoodRulePos = 0;\n    let lastGoodIndex = -1;\n    for (let i = 0; i < newRules.length; i++) {\n      const pos = newRules[i].rulePos as number;\n      if (pos && pos > lastGoodRulePos) {\n        const step = (pos - lastGoodRulePos) / (i - lastGoodIndex);\n        for (let k = lastGoodIndex + 1; k < i; k++) {\n          newRules[k].rulePos = lastGoodRulePos + step * (k - lastGoodIndex);\n        }\n        lastGoodRulePos = pos;\n        lastGoodIndex = i;\n      }\n    }\n    // Fill in the rulePos values for the remaining rules.\n    for (let k = lastGoodIndex + 1; k < newRules.length; k++) {\n      newRules[k].rulePos = ++lastGoodRulePos;\n    }\n    // Prepare the UserActions for syncing the Rules table.\n    const rulesSync = syncRecords(rulesTable, newRules);\n\n    // Finally collect and apply all the actions together.\n    try {\n      await docData.sendActions([...resourceSync.userActions, ...rulesSync.userActions]);\n    } catch (e) {\n      // Report the error, but go on to update the rules. The user may lose their entries, but\n      // will see what's in the document. To preserve entries and show what's wrong, we try to\n      // catch errors earlier.\n      reportError(e);\n    }\n\n    // Re-populate the state from DocData once the records are synced.\n    await this.update();\n  }\n\n  public buildDom() {\n    return cssOuter(\n      dom('div', this.gristDoc.behavioralPromptsManager.attachTip('accessRules', {\n        hideArrow: true,\n      })),\n      cssAddTableRow(\n        bigBasicButton({disabled: true}, dom.hide(this._savingEnabled),\n          dom.text((use) => {\n            const s = use(this._ruleStatus);\n            return s === RuleStatus.CheckPending ? t(\"Checking...\") :\n              s === RuleStatus.Unchanged ? t(\"Saved\") : t(\"Invalid\");\n          }),\n          testId('rules-non-save')\n        ),\n        bigPrimaryButton(t(\"Save\"), dom.show(this._savingEnabled),\n          dom.on('click', () => this.save()),\n          testId('rules-save'),\n        ),\n        bigBasicButton(t(\"Reset\"), dom.show(use => use(this._ruleStatus) !== RuleStatus.Unchanged),\n          dom.on('click', () => this.update()),\n          testId('rules-revert'),\n        ),\n\n        bigBasicButton(t(\"Add Table Rules\"), cssDropdownIcon('Dropdown'), {style: 'margin-left: auto'},\n          menu(() =>\n            this.allTableIds.map((tableId) =>\n              // Add the table on a timeout, to avoid disabling the clicked menu item\n              // synchronously, which prevents the menu from closing on click.\n              menuItemAsync(() => this._addTableRules(tableId),\n                this.getTableTitle(tableId),\n                dom.cls('disabled', (use) => use(this._tableRules).some(tr => tr.tableId === tableId)),\n              )\n            ),\n          ),\n        ),\n        bigBasicButton(t('Add User Attributes'), dom.on('click', () => this._addUserAttributes())),\n        bigBasicButton(t('View As'), cssDropdownIcon('Dropdown'),\n          elem => this._aclUsersPopup.attachPopup(elem, {placement: 'bottom-end', resetDocPage: true}),\n          dom.style('visibility', use => use(this._aclUsersPopup.isInitialized) ? '' : 'hidden')),\n      ),\n      cssConditionError({style: 'margin-left: 16px'},\n        dom.text(this._errorMessage),\n        testId('access-rules-error')\n      ),\n\n      dom.maybe(use => {\n        const ruleProblems = use(this._ruleProblems);\n        return ruleProblems.length > 0 ? ruleProblems : null;\n      }, ruleProblems =>\n        cssSection(\n          cssRuleProblems(\n            this.buildRuleProblemsDom(ruleProblems)))),\n      shadowScroll(\n        dom.maybe(use => use(this._userAttrRules).length, () =>\n          cssSection(\n            cssSectionHeading(t(\"User Attributes\")),\n            cssTableRounded(\n              cssTableHeaderRow(\n                cssCell1(cssCell.cls('-rborder'), cssCell.cls('-center'), cssColHeaderCell('Name')),\n                cssCell4(\n                  cssColumnGroup(\n                    cssCell1(cssColHeaderCell(t(\"Attribute to Look Up\"))),\n                    cssCell1(cssColHeaderCell(t(\"Lookup Table\"))),\n                    cssCell1(cssColHeaderCell(t(\"Lookup Column\"))),\n                    cssCellIcon(),\n                  ),\n                ),\n              ),\n              dom.forEach(this._userAttrRules, (userAttr) => userAttr.buildUserAttrDom()),\n            ),\n          ),\n        ),\n        dom.forEach(this._tableRules, (tableRules) => tableRules.buildDom()),\n        cssSection(\n          cssSectionHeading(t(\"Default Rules\"), testId('rule-table-header')),\n          dom.maybe(this._specialRulesWithDefault, tableRules => cssSeedRule(\n            tableRules.buildCheckBoxes())),\n          cssTableRounded(\n            cssTableHeaderRow(\n              cssCell1(cssCell.cls('-rborder'), cssCell.cls('-center'), cssColHeaderCell('Columns')),\n              cssCell4(\n                cssColumnGroup(\n                  cssCellIcon(),\n                  cssCell2(cssColHeaderCell(t('Condition'))),\n                  cssCell1(cssColHeaderCell(t('Permissions'))),\n                  cssCellIconWithMargins(),\n                  cssCellIcon(),\n                )\n              )\n            ),\n            dom.maybe(this._docDefaultRuleSet, ruleSet => ruleSet.buildRuleSetDom()),\n          ),\n          testId('rule-table'),\n        ),\n        dom.maybe(this._specialRulesSeparate, tableRules => tableRules.buildDom()),\n      ),\n    );\n  }\n\n  public buildRuleProblemsDom(ruleProblems: AclRuleProblem[]) {\n    const buttons: Array<HTMLAnchorElement | HTMLButtonElement> = [];\n    for (const problem of ruleProblems) {\n      // Is the problem a missing table?\n      if (problem.tables) {\n        this._addButtonsForMissingTables(buttons, problem.tables.tableIds);\n      }\n      // Is the problem a missing column?\n      if (problem.columns) {\n        this._addButtonsForMissingColumns(buttons, problem.columns.tableId, problem.columns.colIds);\n      }\n      // Is the problem a misconfigured user attribute?\n      if (problem.userAttributes) {\n        const names = problem.userAttributes.names;\n        this._addButtonsForMisconfiguredUserAttributes(buttons, names);\n      }\n    }\n    return buttons.map(button => dom('span', button));\n  }\n\n  /**\n   * Get a list of all rule records, for saving.\n   */\n  public getRules(): RuleRec[] {\n    return flatten(\n      ...this._tableRules.get().map(tr => tr.getRules()),\n      this._specialRulesWithDefault.get()?.getRules() || [],\n      this._specialRulesSeparate.get()?.getRules() || [],\n      this._docDefaultRuleSet.get()?.getRules('*') || []\n    );\n  }\n\n  public removeTableRules(tableRules: TableRules) {\n    removeItem(this._tableRules, tableRules);\n  }\n\n  public removeUserAttributes(userAttr: ObsUserAttributeRule) {\n    removeItem(this._userAttrRules, userAttr);\n  }\n\n  public async checkAclFormula(text: string): Promise<FormulaProperties> {\n    if (text) {\n      return this.gristDoc.docComm.checkAclFormula(text);\n    }\n    return {};\n  }\n\n  // Check if the given tableId, and optionally a list of colIds, are present in this document.\n  // Returns '' if valid, or an error string if not. Exempt colIds will not trigger an error.\n  public checkTableColumns(tableId: string, colIds?: string[], exemptColIds?: string[]): string {\n    if (!tableId || tableId === SPECIAL_RULES_TABLE_ID) { return ''; }\n    const tableColIds = this._aclResources.get(tableId)?.colIds;\n    if (!tableColIds) { return `Invalid table: ${tableId}`; }\n    if (colIds) {\n      const validColIds = new Set([...tableColIds, ...exemptColIds || []]);\n      const invalidColIds = colIds.filter(c => !validColIds.has(c));\n      if (invalidColIds.length === 0) { return ''; }\n      return `Invalid columns in table ${tableId}: ${invalidColIds.join(', ')}`;\n    }\n    return '';\n  }\n\n  // Returns a list of valid colIds for the given table, or undefined if the table isn't valid.\n  public getValidColIds(tableId: string): string[]|undefined {\n    return this._aclResources.get(tableId)?.colIds.filter(id => !isHiddenCol(id)).sort();\n  }\n\n  // Get rules to use for seeding any new set of table/column rules, e.g. to give owners\n  // broad rights over the table/column contents.\n  public getSeedRules(): ObsRulePart[] {\n    return this._specialRulesWithDefault.get()?.getCustomRules('SeedRule') || [];\n  }\n\n  private _addTableRules(tableId: string) {\n    if (this._tableRules.get().some(tr => tr.tableId === tableId)) {\n      throw new Error(`Trying to add TableRules for existing table ${tableId}`);\n    }\n    const defRuleSet: RuleSet = {tableId, colIds: '*', body: []};\n    const tableRules = TableRules.create(this._tableRules, tableId, this, undefined, defRuleSet);\n    this._tableRules.push(tableRules);\n    tableRules.addDefaultRules(this.getSeedRules());\n  }\n\n  private _addUserAttributes() {\n    this._userAttrRules.push(ObsUserAttributeRule.create(this._userAttrRules, this, undefined, {focus: true}));\n  }\n\n  private _onChange() {\n    if (this._ruleStatus.get() === RuleStatus.Unchanged) {\n      // If no changes, it's safe to just reload the rules from docData.\n      this.update().catch((e) => this._errorMessage.set(e.message));\n    } else {\n      this._errorMessage.set(\n        'Access rules have changed. Click Reset to revert your changes and refresh the rules.'\n      );\n    }\n  }\n\n  private async _updateDocAccessData() {\n    await this._aclUsersPopup.load();\n  }\n\n  private _addButtonsForMissingTables(buttons: Array<HTMLAnchorElement | HTMLButtonElement>, tableIds: string[]) {\n    for (const tableId of tableIds) {\n      // We don't know what the table's name was, just its tableId.\n      // Hopefully, the user will understand.\n      const title = t('Remove {{- tableId }} rules', { tableId });\n      const button = bigBasicButton(title, cssRemoveIcon('Remove'), dom.on('click', async () => {\n        await Promise.all(this._tableRules.get()\n          .filter(rules => rules.tableId === tableId)\n          .map(rules => rules.remove()));\n        button.style.display = 'none';\n      }));\n      buttons.push(button);\n    }\n  }\n\n  private _addButtonsForMissingColumns(buttons: Array<HTMLAnchorElement | HTMLButtonElement>,\n                                       tableId: string, colIds: string[]) {\n    const removeColRules = (rules: TableRules, colId: string) => {\n      for (const rule of rules.columnRuleSets.get()) {\n        const ruleColIds = new Set(rule.getColIdList());\n        if (!ruleColIds.has(colId)) { continue; }\n        if (ruleColIds.size === 1) {\n          rule.remove();\n        } else {\n          rule.removeColId(colId);\n        }\n      }\n    };\n    for (const colId of colIds) {\n      // TODO: we could translate tableId to table name in this case.\n      const title = t('Remove column {{- colId }} from {{- tableId }} rules', { tableId, colId });\n      const button = bigBasicButton(title, cssRemoveIcon('Remove'), dom.on('click', async () => {\n        await Promise.all(this._tableRules.get()\n          .filter(rules => rules.tableId === tableId)\n          .map(rules => removeColRules(rules, colId)));\n        button.style.display = 'none';\n      }));\n      buttons.push(button);\n    }\n  }\n\n  private _addButtonsForMisconfiguredUserAttributes(\n    buttons: Array<HTMLAnchorElement | HTMLButtonElement>,\n    names: string[]\n  ) {\n    for (const name of names) {\n      const title = t('Remove {{- name }} user attribute', {name});\n      const button = bigBasicButton(title, cssRemoveIcon('Remove'), dom.on('click', async () => {\n        await Promise.all(this._userAttrRules.get()\n          .filter(rule => rule.name.get() === name)\n          .map(rule => rule.remove()));\n        button.style.display = 'none';\n      }));\n      buttons.push(button);\n    }\n  }\n}\n\n// Represents all rules for a table.\nclass TableRules extends Disposable {\n  // Whether any table rules changed, and if they are valid.\n  public ruleStatus: Computed<RuleStatus>;\n\n  // The column-specific rule sets.\n  protected _columnRuleSets = this.autoDispose(obsArray<ColumnObsRuleSet>());\n\n  // Whether there are any column-specific rule sets.\n  private _haveColumnRules = Computed.create(this, this._columnRuleSets, (use, cols) => cols.length > 0);\n\n  // The default rule set (for columns '*'), if one is set.\n  private _defaultRuleSet = Observable.create<DefaultObsRuleSet|null>(this, null);\n\n  constructor(public readonly tableId: string, public _accessRules: AccessRules,\n              private _colRuleSets?: RuleSet[], private _defRuleSet?: RuleSet) {\n    super();\n    this._columnRuleSets.set(this._colRuleSets?.map(rs =>\n      this._createColumnObsRuleSet(this._columnRuleSets, this._accessRules, this, rs,\n        rs.colIds === '*' ? [] : rs.colIds)) || []);\n\n    if (!this._colRuleSets) {\n      // Must be a newly-created TableRules object. Just create a default RuleSet (for tableId:*)\n      DefaultObsRuleSet.create(this._defaultRuleSet, this._accessRules, this, this._haveColumnRules);\n    } else if (this._defRuleSet) {\n      DefaultObsRuleSet.create(this._defaultRuleSet, this._accessRules, this, this._haveColumnRules,\n        this._defRuleSet);\n   }\n\n    this.ruleStatus = Computed.create(this, (use) => {\n      const columnRuleSets = use(this._columnRuleSets);\n      const d = use(this._defaultRuleSet);\n      return Math.max(\n        getChangedStatus(\n          !this._colRuleSets ||                               // This TableRules object must be newly-added\n          Boolean(d) !== Boolean(this._defRuleSet) ||         // Default rule set got added or removed\n          columnRuleSets.length < this._colRuleSets.length    // There was a removal\n        ),\n        d ? use(d.ruleStatus) : RuleStatus.Unchanged,         // Default rule set got changed.\n        ...columnRuleSets.map(rs => use(rs.ruleStatus)));     // Column rule set was added or changed.\n    });\n  }\n\n  /**\n   * Get all custom rules for the specific column. Used to gather the current\n   * setting of a special rule. Returns an empty list for unknown columns.\n   */\n  public getCustomRules(colId: string): ObsRulePart[] {\n    for (const ruleSet of this._columnRuleSets.get()) {\n      if (ruleSet.getColIds() === colId) {\n        return ruleSet.getCustomRules();\n      }\n    }\n    return [];\n  }\n\n  /**\n   * Add the provided rules, copying their formula, permissions, and memo.\n   */\n  public addDefaultRules(rules: ObsRulePart[]) {\n    const ruleSet = this._defaultRuleSet.get();\n    ruleSet?.addRuleParts(rules, {foldEveryoneRule: true});\n  }\n\n  public remove() {\n    this._accessRules.removeTableRules(this);\n  }\n\n  public get columnRuleSets() {\n    return this._columnRuleSets;\n  }\n\n  public buildDom() {\n    return cssSection(\n      cssSectionHeading(\n        dom('span', t(\"Rules for table \"), cssTableName(this._accessRules.getTableTitle(this.tableId))),\n        cssIconButton(icon('Dots'), {style: 'margin-left: auto'},\n          menu(() => [\n            menuItemAsync(() => this._addColumnRuleSet(), t(\"Add Column Rule\")),\n            menuItemAsync(() => this._addDefaultRuleSet(), t(\"Add Default Rule\"),\n              dom.cls('disabled', use => Boolean(use(this._defaultRuleSet)))),\n            menuItemAsync(() => this._accessRules.removeTableRules(this), t(\"Delete Table Rules\")),\n          ]),\n          testId('rule-table-menu-btn'),\n        ),\n        testId('rule-table-header'),\n      ),\n      cssTableRounded(\n        cssTableHeaderRow(\n          cssCell1(cssCell.cls('-rborder'), cssCell.cls('-center'), cssColHeaderCell('Columns')),\n          cssCell4(\n            cssColumnGroup(\n              cssCellIcon(),\n              cssCell2(cssColHeaderCell(t('Condition'))),\n              cssCell1(cssColHeaderCell(t('Permissions'))),\n              cssCellIconWithMargins(),\n              cssCellIcon(),\n            )\n          ),\n        ),\n        this.buildColumnRuleSets(),\n      ),\n      this.buildErrors(),\n      testId('rule-table'),\n    );\n  }\n\n  public buildColumnRuleSets() {\n    return [\n      dom.forEach(this._columnRuleSets, ruleSet => ruleSet.buildRuleSetDom()),\n      dom.maybe(this._defaultRuleSet, ruleSet => ruleSet.buildRuleSetDom()),\n    ];\n  }\n\n  public buildErrors() {\n    return dom.forEach(this._columnRuleSets, c => cssConditionError(dom.text(c.formulaError)));\n  }\n\n  /**\n   * Return the resources (tableId:colIds entities), for saving, checking along the way that they\n   * are valid.\n   */\n  public getResources(): ResourceRec[] {\n    // Check that the colIds are valid.\n    const seen = {\n      allow: new Set<string>(),   // columns mentioned in rules that only have 'allow's.\n      deny: new Set<string>(),    // columns mentioned in rules that only have 'deny's.\n      mixed: new Set<string>()    // columns mentioned in any rules.\n    };\n    for (const ruleSet of this._columnRuleSets.get()) {\n      const sign = ruleSet.summarizePermissions();\n      const counterSign = sign === 'mixed' ? 'mixed' : (sign === 'allow' ? 'deny' : 'allow');\n      const colIds = ruleSet.getColIdList();\n      if (colIds.length === 0) {\n        throw new UserError(`No columns listed in a column rule for table ${this.tableId}`);\n      }\n      for (const colId of colIds) {\n        if (seen[counterSign].has(colId)) {\n          // There may be an order dependency between rules.  We've done a little analysis, to\n          // allow the useful pattern of forbidding all access to columns, and then adding back\n          // access to different sets for different teams/conditions (or allowing all access\n          // by default, and then forbidding different sets).  But if there's a mix of\n          // allows and denies, then we throw up our hands.\n          // TODO: could analyze more deeply.  An easy step would be to analyze per permission bit.\n          // Could also allow order dependency and provide a way to control the order.\n          // TODO: could be worth also flagging multiple rulesets with the same columns as\n          // undesirable.\n          throw new UserError(`Column ${colId} appears in multiple rules for table ${this.tableId}` +\n                              ` that might be order-dependent. Try splitting rules up differently?`);\n        }\n        if (sign === 'mixed') {\n          seen.allow.add(colId);\n          seen.deny.add(colId);\n          seen.mixed.add(colId);\n        } else {\n          seen[sign].add(colId);\n          seen.mixed.add(colId);\n        }\n      }\n    }\n\n    return [\n      ...this._columnRuleSets.get().map(rs => ({tableId: this.tableId, colIds: rs.getColIds()})),\n      {tableId: this.tableId, colIds: '*'},\n    ];\n  }\n\n  /**\n   * Get rules for this table, for saving.\n   */\n  public getRules(): RuleRec[] {\n    return flatten(\n      ...this._columnRuleSets.get().map(rs => rs.getRules(this.tableId)),\n      this._defaultRuleSet.get()?.getRules(this.tableId) || [],\n    );\n  }\n\n  public removeRuleSet(ruleSet: ObsRuleSet) {\n    if (ruleSet === this._defaultRuleSet.get()) {\n      this._defaultRuleSet.set(null);\n    } else {\n      removeItem(this._columnRuleSets, ruleSet);\n    }\n    if (!this._defaultRuleSet.get() && this._columnRuleSets.get().length === 0) {\n      this._accessRules.removeTableRules(this);\n    }\n  }\n\n  protected _createColumnObsRuleSet(\n    owner: IDisposableOwner, accessRules: AccessRules, tableRules: TableRules,\n    ruleSet: RuleSet|undefined, initialColIds: string[],\n  ): ColumnObsRuleSet {\n    return ColumnObsRuleSet.create(owner, accessRules, tableRules, ruleSet, initialColIds);\n  }\n\n  private _addColumnRuleSet() {\n    const ruleSet = ColumnObsRuleSet.create(this._columnRuleSets, this._accessRules, this, undefined, []);\n    this._columnRuleSets.push(ruleSet);\n    ruleSet.addRuleParts(this._accessRules.getSeedRules(), {foldEveryoneRule: true});\n  }\n\n  private _addDefaultRuleSet() {\n    if (!this._defaultRuleSet.get()) {\n      DefaultObsRuleSet.create(this._defaultRuleSet, this._accessRules, this, this._haveColumnRules);\n      this.addDefaultRules(this._accessRules.getSeedRules());\n    }\n  }\n}\n\nclass SpecialRules extends TableRules {\n  public buildDom() {\n    return cssSection(\n      cssSectionHeading(t('Special Rules'), testId('rule-table-header')),\n      this.buildCheckBoxes(),\n      testId('rule-table'),\n    );\n  }\n\n  // Build dom with checkboxes, without a section wrapping it.\n  // Used for folding a special rule into another section.\n  public buildCheckBoxes() {\n    return [\n      this.buildColumnRuleSets(),\n      this.buildErrors(),\n    ];\n  }\n\n  public getResources(): ResourceRec[] {\n    return this._columnRuleSets.get()\n      .filter(rs => !rs.hasOnlyBuiltInRules())\n      .map(rs => ({tableId: this.tableId, colIds: rs.getColIds()}));\n  }\n\n  protected _createColumnObsRuleSet(\n    owner: IDisposableOwner, accessRules: AccessRules, tableRules: TableRules,\n    ruleSet: RuleSet|undefined, initialColIds: string[],\n  ): ColumnObsRuleSet {\n    if (isEqual(ruleSet?.colIds, ['SchemaEdit'])) {\n      // The special rule for \"schemaEdit\" permissions.\n      return SpecialSchemaObsRuleSet.create(owner, accessRules, tableRules, ruleSet, initialColIds);\n    } else {\n      return SpecialObsRuleSet.create(owner, accessRules, tableRules, ruleSet, initialColIds);\n    }\n  }\n}\n\n// Represents one RuleSet, for a combination of columns in one table, or the default RuleSet for\n// all remaining columns in a table.\nabstract class ObsRuleSet extends Disposable {\n  // Whether rules changed, and if they are valid. Never unchanged if this._ruleSet is undefined.\n  public ruleStatus: Computed<RuleStatus>;\n\n  // List of individual rule parts for this entity. The default permissions may be included as the\n  // last rule part, with an empty aclFormula.\n  protected readonly _body = this.autoDispose(obsArray<ObsRulePart>());\n\n  // ruleSet is omitted for a new ObsRuleSet added by the user.\n  constructor(public accessRules: AccessRules, protected _tableRules: TableRules|null, private _ruleSet?: RuleSet) {\n    super();\n    const parts = this._ruleSet?.body.map(part => ObsRulePart.create(this._body, this, part)) || [];\n    if (parts.length === 0) {\n      // If creating a new RuleSet, or if there are no rules,\n      // start with just a default permission part.\n      parts.push(ObsRulePart.create(this._body, this, undefined));\n    }\n    this._body.set(parts);\n\n    this.ruleStatus = Computed.create(this, this._body, (use, body) => {\n      // If anything was changed or added, some part.ruleStatus will be other than Unchanged. If\n      // there were only removals, then body.length will have changed.\n      // Ignore empty rules.\n      return Math.max(\n        getChangedStatus(body.filter(part => !part.isEmpty(use)).length < (this._ruleSet?.body?.length || 0)),\n        ...body.map(part => use(part.ruleStatus)));\n    });\n  }\n\n  public remove() {\n    this._tableRules?.removeRuleSet(this);\n  }\n\n  public getRules(tableId: string): RuleRec[] {\n    // Return every part in the body, tacking on resourceRec to each rule.\n    return this._body.get().map(part => ({\n      ...part.getRulePart(),\n      resourceRec: {tableId, colIds: this.getColIds()}\n    }))\n    // Skip entirely empty rule parts: they are invalid and dropping them is the best fix.\n    .filter(part => part.aclFormula || part.permissionsText);\n  }\n\n  public getColIds(): string {\n    return '*';\n  }\n\n  /**\n   * Check if RuleSet may only add permissions, only remove permissions, or may do either.\n   * A rule that neither adds nor removes permissions is treated as mixed for simplicity,\n   * though this would be suboptimal if this were a useful case to support.\n   */\n  public summarizePermissions(): MixedPermissionValue {\n    return summarizePermissions(this._body.get().map(p => p.summarizePermissions()));\n  }\n\n  public abstract buildResourceDom(): DomElementArg;\n\n  public buildRuleSetDom() {\n    return cssTableRow(\n      cssCell1(cssCell.cls('-rborder'),\n        this.buildResourceDom(),\n        testId('rule-resource')\n      ),\n      cssCell4(cssRuleBody.cls(''),\n        dom.forEach(this._body, part => part.buildRulePartDom()),\n        dom.maybe(use => !this.hasDefaultCondition(use), () =>\n          cssColumnGroup(\n            {style: 'min-height: 28px'},\n            cssCellIcon(\n              cssIconButton(icon('Plus'),\n                dom.on('click', () => this.addRulePart(null)),\n                testId('rule-add'),\n              )\n            ),\n            testId('rule-extra-add'),\n          )\n        ),\n      ),\n      testId('rule-set'),\n    );\n  }\n\n  public removeRulePart(rulePart: ObsRulePart) {\n    removeItem(this._body, rulePart);\n    if (this._body.get().length === 0) {\n      this._tableRules?.removeRuleSet(this);\n    }\n  }\n\n  public addRulePart(beforeRule: ObsRulePart|null,\n                     content?: RulePart,\n                     isNew: boolean = false): ObsRulePart {\n    const body = this._body.get();\n    const i = beforeRule ? body.indexOf(beforeRule) : body.length;\n    const part = ObsRulePart.create(this._body, this, content, isNew);\n    this._body.splice(i, 0, part);\n    return part;\n  }\n\n  /**\n   * Add a sequence of rules, taking priority over existing rules.\n   * optionally, if lowest-priority rule being added applies to\n   * everyone, and the existing rule also applies to everyone,\n   * fold those rules into one.\n   * This method is currently only called on newly created rule\n   * sets, so there's no need to check permissions and memos.\n   */\n  public addRuleParts(newParts: ObsRulePart[], options: {foldEveryoneRule?: boolean}) {\n    // Check if we need to consider folding rules that apply to everyone.\n    if (options.foldEveryoneRule) {\n      const oldParts = this._body.get();\n      const myEveryonePart = (oldParts.length === 1 && !oldParts[0].getRulePart().aclFormula) ? oldParts[0] : null;\n      const newEveryonePart = newParts[newParts.length - 1]?.getRulePart().aclFormula ? null :\n        newParts[newParts.length - 1];\n       if (myEveryonePart && newEveryonePart) {\n         // It suffices to remove the existing rule that applies to everyone,\n         // which is just an empty default from rule set creation.\n         removeItem(this._body, myEveryonePart);\n       }\n    }\n    for (const part of [...newParts].reverse()) {\n      const {permissionsText, aclFormula, memo} = part.getRulePart();\n      if (permissionsText === undefined || aclFormula === undefined) {\n        // Should not happen.\n        continue;\n      }\n      this.addRulePart(\n        this.getFirst() || null,\n        {\n          aclFormula,\n          permissionsText,\n          permissions: parsePermissions(permissionsText),\n          memo,\n        },\n        true,\n      );\n    }\n  }\n\n  /**\n   * Returns the first built-in rule. It's the only one of the built-in rules to get a \"+\" next to\n   * it, since we don't allow inserting new rules in-between built-in rules.\n   */\n  public getFirstBuiltIn(): ObsRulePart|undefined {\n    return this._body.get().find(p => p.isBuiltIn());\n  }\n\n  // Get first rule part, built-in or not.\n  public getFirst(): ObsRulePart|undefined {\n    return this._body.get()[0];\n  }\n\n  /**\n   * When an empty-condition RulePart is the only part of a RuleSet, we can say it applies to\n   * \"Everyone\".\n   */\n  public isSoleCondition(use: UseCB, part: ObsRulePart): boolean {\n    const body = use(this._body);\n    return body.length === 1 && body[0] === part;\n  }\n\n  /**\n   * When an empty-condition RulePart is last in a RuleSet, we say it applies to \"Everyone Else\".\n   */\n  public isLastCondition(use: UseCB, part: ObsRulePart): boolean {\n    const body = use(this._body);\n    return body[body.length - 1] === part;\n  }\n\n  public hasDefaultCondition(use: UseCB): boolean {\n    const body = use(this._body);\n    return body.length > 0 && body[body.length - 1].hasEmptyCondition(use);\n  }\n\n  /**\n   * Which permission bits to allow the user to set.\n   */\n  public getAvailableBits(): PermissionKey[] {\n    return ['read', 'update', 'create', 'delete'];\n  }\n\n  /**\n   * Get valid colIds for the table that this RuleSet is for.\n   */\n  public getValidColIds(): string[] {\n    const tableId = this._tableRules?.tableId;\n    return (tableId && this.accessRules.getValidColIds(tableId)) || [];\n  }\n\n  /**\n   * Check if this rule set is limited to a set of columns.\n   */\n  public hasColumns() {\n    return false;\n  }\n\n  public hasOnlyBuiltInRules() {\n    return this._body.get().every(rule => rule.isBuiltIn());\n  }\n\n  // Get rule parts that are neither built-in nor empty.\n  public getCustomRules(): ObsRulePart[] {\n    return this._body.get().filter(rule => !rule.isBuiltInOrEmpty());\n  }\n}\n\nclass ColumnObsRuleSet extends ObsRuleSet {\n  // Error message for this rule set, or '' if valid.\n  public formulaError: Computed<string>;\n\n  private _colIds = Observable.create<string[]>(this, this._initialColIds);\n\n  constructor(accessRules: AccessRules, tableRules: TableRules, ruleSet: RuleSet|undefined,\n              private _initialColIds: string[]) {\n    super(accessRules, tableRules, ruleSet);\n\n    this.formulaError = Computed.create(this, (use) => {\n      // Exempt existing colIds from checks, by including as a third argument.\n      return accessRules.checkTableColumns(tableRules.tableId, use(this._colIds), this._initialColIds);\n    });\n\n    const baseRuleStatus = this.ruleStatus;\n    this.ruleStatus = Computed.create(this, (use) => {\n      if (use(this.formulaError)) { return RuleStatus.Invalid; }\n      return Math.max(\n        getChangedStatus(!isEqual(use(this._colIds), this._initialColIds)),\n        use(baseRuleStatus));\n    });\n  }\n\n  public buildResourceDom(): DomElementArg {\n    return aclColumnList(this._colIds, this._getValidColIdsList());\n  }\n\n  public getColIdList(): string[] {\n    return this._colIds.get();\n  }\n\n  public removeColId(colId: string) {\n    this._colIds.set(this._colIds.get().filter(c => (c !== colId)));\n  }\n\n  public getColIds(): string {\n    return this._colIds.get().join(\",\");\n  }\n\n  public getAvailableBits(): PermissionKey[] {\n    // Create/Delete bits can't be set on a column-specific rule.\n    return ['read', 'update'];\n  }\n\n  public hasColumns() {\n    return true;\n  }\n\n  private _getValidColIdsList(): string[] {\n    return this.getValidColIds().filter(id => id !== 'id');\n  }\n}\n\nclass DefaultObsRuleSet extends ObsRuleSet {\n  constructor(accessRules: AccessRules, tableRules: TableRules|null,\n              private _haveColumnRules?: Observable<boolean>, ruleSet?: RuleSet) {\n    super(accessRules, tableRules, ruleSet);\n  }\n  public buildResourceDom() {\n    return [\n      cssCenterContent.cls(''),\n      cssDefaultLabel(\n        dom.text(use => this._haveColumnRules && use(this._haveColumnRules) ? 'All Other' : 'All'),\n      )\n    ];\n  }\n}\n\ninterface SpecialRuleBody {\n  permissions: string;\n  formula: string;\n}\n\n/**\n * Properties we need to know about how a special rule should function and\n * be rendered.\n */\ninterface SpecialRuleProperties extends SpecialRuleBody {\n  description: string;\n  name: string;\n  availableBits: PermissionKey[];\n}\n\nconst schemaEditRules: {[key: string]: SpecialRuleBody} = {\n  allowEditors: {\n    permissions: '+S',\n    formula: 'user.Access == EDITOR',\n  },\n  denyEditors: {\n    permissions: '-S',\n    formula: 'user.Access != OWNER',\n  },\n};\n\nconst specialRuleProperties: Record<string, SpecialRuleProperties> = {\n  AccessRules: {\n    name: t('Permission to view Access Rules'),\n    description: t('Allow everyone to view Access Rules.'),\n    availableBits: ['read'],\n    permissions: '+R',\n    formula: 'True',\n  },\n  FullCopies: {\n    name: t('Permission to access the document in full when needed'),\n    description: t(`Allow everyone to copy the entire document, or view it in full in fiddle mode.\nUseful for examples and templates, but not for sensitive data.`),\n    availableBits: ['read'],\n    permissions: '+R',\n    formula: 'True',\n  },\n  SeedRule: {\n    name: t('Seed rules'),\n    description: t('When adding table rules, automatically add a rule to grant OWNER full access.'),\n    availableBits: ['read', 'create', 'update', 'delete'],\n    permissions: '+CRUD',\n    formula: 'user.Access in [OWNER]',\n  },\n  SchemaEdit: {\n    name: t(\"Permission to edit document structure\"),\n    description: t(\"Allow editors to edit structure (e.g. modify and delete tables, columns, \\\nlayouts), and to write formulas, which give access to all data regardless of read restrictions.\"),\n    availableBits: ['schemaEdit'],\n    ...schemaEditRules.denyEditors,\n  },\n};\n\nfunction getSpecialRuleProperties(name: string): SpecialRuleProperties {\n  return specialRuleProperties[name] || {\n    ...specialRuleProperties.AccessRules,\n    name,\n    description: name,\n  };\n}\n\nclass SpecialObsRuleSet extends ColumnObsRuleSet {\n  private _isExpanded = Observable.create<boolean>(this, false);\n\n  public get props() {\n    return getSpecialRuleProperties(this.getColIds());\n  }\n\n  public buildRuleSetDom() {\n    const isNonStandard = this._createIsNonStandardObs();\n    const isChecked = this._createIsCheckedObs(isNonStandard);\n    if (isNonStandard.get()) {\n      this._isExpanded.set(true);\n    }\n\n    return dom('div',\n      dom.autoDispose(isChecked),\n      dom.autoDispose(isNonStandard),\n      cssRuleDescription(\n        cssIconButton(icon('Expand'),\n          dom.style('transform', (use) => use(this._isExpanded) ? 'rotate(90deg)' : ''),\n          dom.on('click', () => this._isExpanded.set(!this._isExpanded.get())),\n          testId('rule-special-expand'),\n          {style: 'margin: -4px'},  // subtract padding to align better.\n        ),\n        cssCheckbox(isChecked,\n          dom.prop('disabled', isNonStandard),\n          testId('rule-special-checkbox'),\n        ),\n        this.props.description,\n      ),\n      this._buildDomWarning(),\n      dom.maybe(this._isExpanded, () =>\n        cssTableRounded(\n          {style: 'margin-left: 56px'},\n          cssTableHeaderRow(\n            cssCellIcon(),\n            cssCell4(cssColHeaderCell(this.props.name)),\n            cssCell1(cssColHeaderCell('Permissions')),\n            cssCellIconWithMargins(),\n            cssCellIcon(),\n          ),\n          cssTableRow(\n            cssRuleBody.cls(''),\n            dom.forEach(this._body, part => part.buildRulePartDom(true)),\n            dom.maybe(use => !this.hasDefaultCondition(use), () =>\n              cssColumnGroup(\n                {style: 'min-height: 28px'},\n                cssCellIcon(\n                  cssIconButton(\n                    icon('Plus'),\n                    dom.on('click', () => this.addRulePart(null)),\n                    testId('rule-add'),\n                  )\n                ),\n                testId('rule-extra-add'),\n              )\n            ),\n          ),\n          testId('rule-set'),\n        )\n      ),\n      testId('rule-special'),\n      testId(`rule-special-${this.getColIds()}`),   // Make accessible in tests as, e.g. rule-special-FullCopies\n    );\n  }\n\n  public getAvailableBits(): PermissionKey[] {\n    return this.props.availableBits;\n  }\n\n  public removeRulePart(rulePart: ObsRulePart) {\n    removeItem(this._body, rulePart);\n    if (this._body.get().length === 0) {\n      this._isExpanded.set(false);\n      this._allowEveryone(false);\n    }\n  }\n\n  protected _buildDomWarning(): DomContents {\n    return null;\n  }\n\n  // Observable for whether this ruleSet is \"standard\", i.e. checked or unchecked state, without\n  // any strange rules that need to be shown expanded with the checkbox greyed out.\n  protected _createIsNonStandardObs(): Observable<boolean> {\n    return Computed.create(null, this._body, (use, body) =>\n      !body.every(rule => rule.isBuiltInOrEmpty(use) || rule.matches(use, this.props.formula, this.props.permissions)));\n  }\n\n  // Observable for whether the checkbox should be shown as checked. Writing to it will update\n  // rules so as to toggle the checkbox.\n  protected _createIsCheckedObs(isNonStandard: Observable<boolean>): Observable<boolean> {\n    return Computed.create(null, this._body,\n      (use, body) => !use(isNonStandard) && !body.every(rule => rule.isBuiltInOrEmpty(use)))\n      .onWrite(val => this._allowEveryone(val));\n  }\n\n  private _allowEveryone(value: boolean) {\n    const builtInRules = this._body.get().filter(r => r.isBuiltIn());\n    if (value) {\n      const rulePart = makeRulePart(this.props);\n      this._body.set([ObsRulePart.create(this._body, this, rulePart, true), ...builtInRules]);\n    } else {\n      this._body.set(builtInRules);\n      if (builtInRules.length === 0) {\n        this._body.push(ObsRulePart.create(this._body, this, undefined));\n      }\n    }\n  }\n}\n\nfunction makeRulePart({permissions, formula}: SpecialRuleBody): RulePart {\n  const rulePart: RulePart = {\n    aclFormula: formula,\n    permissionsText: permissions,\n    permissions: parsePermissions(permissions),\n  };\n  return rulePart;\n}\n\n/**\n * SchemaEdit permissions are moved out to a special fake resource \"*SPECIAL:SchemaEdit\" in the\n * frontend, to be presented under their own checkbox option. Its behaviors are a bit different\n * from other checkbox options; the differences are in the overridden methods here.\n */\nclass SpecialSchemaObsRuleSet extends SpecialObsRuleSet {\n  protected _buildDomWarning(): DomContents {\n    return dom.maybe(\n      (use) => use(this._body).every(rule => rule.isBuiltInOrEmpty(use)),\n      () => cssConditionError({style: 'margin-left: 56px; margin-bottom: 8px;'},\n        t(\"This default should be changed if editors' access is to be limited. \"),\n        dom('a', {style: 'color: inherit; text-decoration: underline'},\n          'Dismiss', dom.on('click', () => this._allowEditors('confirm'))),\n        testId('rule-schema-edit-warning'),\n      )\n    );\n  }\n\n  // SchemaEdit rules support an extra \"standard\" state, where a no-op rule exists (explicit rule\n  // allowing EDITORs SchemaEdit permission), in which case we don't show a warning.\n  protected _createIsNonStandardObs(): Observable<boolean> {\n    return Computed.create(null, this._body, (use, body) =>\n      !body.every(rule => rule.isBuiltInOrEmpty(use) || rule.matches(use, this.props.formula, this.props.permissions)\n        || rule.matches(use, schemaEditRules.allowEditors.formula, schemaEditRules.allowEditors.permissions)));\n  }\n\n  protected _createIsCheckedObs(isNonStandard: Observable<boolean>): Observable<boolean> {\n    return Computed.create(null, this._body,\n      (use, body) => body.every(rule => rule.isBuiltInOrEmpty(use)\n        || rule.matches(use, schemaEditRules.allowEditors.formula, schemaEditRules.allowEditors.permissions)))\n      .onWrite(val => this._allowEditors(val));\n  }\n\n  // The third \"confirm\" option is used by the \"Dismiss\" link in the warning.\n  private _allowEditors(value: boolean|'confirm') {\n    const builtInRules = this._body.get().filter(r => r.isBuiltIn());\n    if (value === 'confirm') {\n      const rulePart = makeRulePart(schemaEditRules.allowEditors);\n      this._body.set([ObsRulePart.create(this._body, this, rulePart, true), ...builtInRules]);\n    } else if (!value) {\n      const rulePart = makeRulePart(schemaEditRules.denyEditors);\n      this._body.set([ObsRulePart.create(this._body, this, rulePart, true), ...builtInRules]);\n    } else {\n      this._body.set(builtInRules);\n    }\n  }\n}\n\nclass ObsUserAttributeRule extends Disposable {\n  public ruleStatus: Computed<RuleStatus>;\n\n  // If the rule failed validation, the error message to show. Blank if valid.\n  public formulaError: Computed<string>;\n\n  private _name = Observable.create<string>(this, this._userAttr?.name || '');\n  private _tableId = Observable.create<string>(this, this._userAttr?.tableId || '');\n  private _lookupColId = Observable.create<string>(this, this._userAttr?.lookupColId || '');\n  private _charId = Observable.create<string>(this, 'user.' + (this._userAttr?.charId || ''));\n  private _validColIds = Computed.create(this, this._tableId, (use, tableId) =>\n    this._accessRules.getValidColIds(tableId) || []);\n\n  private _userAttrChoices: Computed<IAttrOption[]>;\n  private _userAttrError = Observable.create(this, '');\n\n  constructor(private _accessRules: AccessRules, private _userAttr?: UserAttributeRule,\n              private _options: {focus?: boolean} = {}) {\n    super();\n    this.formulaError = Computed.create(\n      this, this._tableId, this._lookupColId, this._userAttrError,\n      (use, tableId, colId, userAttrError) => {\n        if (userAttrError.length) {\n          return userAttrError;\n        }\n\n        // Don't check for errors if it's an existing rule and hasn't changed.\n        if (use(this._tableId) === this._userAttr?.tableId &&\n            use(this._lookupColId) === this._userAttr?.lookupColId) {\n          return '';\n        }\n        return _accessRules.checkTableColumns(tableId, colId ? [colId] : undefined);\n      });\n    this.ruleStatus = Computed.create(this, use => {\n      if (use(this.formulaError)) { return RuleStatus.Invalid; }\n      return getChangedStatus(\n        use(this._name) !== this._userAttr?.name ||\n        use(this._tableId) !== this._userAttr?.tableId ||\n        use(this._lookupColId) !== this._userAttr?.lookupColId ||\n        use(this._charId) !== 'user.' + this._userAttr?.charId\n      );\n    });\n\n    // Reset lookupColId when tableId changes, since a colId from a different table would usually be wrong\n    this.autoDispose(this._tableId.addListener(() => this._lookupColId.set('')));\n\n    this._userAttrChoices = Computed.create(this, _accessRules.userAttrRules, (use, rules) => {\n      // Filter for only those choices created by previous rules.\n      const index = rules.indexOf(this);\n      return use(this._accessRules.userAttrChoices).filter(c => (c.ruleIndex < index));\n    });\n  }\n\n  public remove() {\n    this._accessRules.removeUserAttributes(this);\n  }\n\n  public get name() { return this._name; }\n  public get tableId() { return this._tableId; }\n\n  public buildUserAttrDom() {\n    return cssTableRow(\n      cssCell1(cssCell.cls('-rborder'),\n        cssCellContent(\n          cssInput(this._name, async (val) => this._name.set(val),\n            {placeholder: t(\"Attribute name\")},\n            (this._options.focus ? (elem) => { setTimeout(() => elem.focus(), 0); } : null),\n            testId('rule-userattr-name'),\n          ),\n        ),\n      ),\n      cssCell4(cssRuleBody.cls(''),\n        cssColumnGroup(\n          cssCell1(\n            aclFormulaEditor({\n              gristTheme: this._accessRules.gristDoc.currentTheme,\n              initialValue: this._charId.get(),\n              readOnly: false,\n              setValue: (text) => this._setUserAttr(text),\n              placeholder: '',\n              getSuggestions: () => this._userAttrChoices.get().map(choice => choice.value),\n              customiseEditor: (editor => {\n                editor.on('focus', () => {\n                  if (editor.getValue() == 'user.') {\n                    // TODO this weirdly only works on the first click\n                    (editor as any).completer?.showPopup(editor);\n                  }\n                });\n              })\n            }),\n            testId('rule-userattr-attr'),\n          ),\n          cssCell1(\n            aclSelect(\n              this._tableId,\n              this._accessRules.allTableIds.map(tableId => ({\n                value: tableId,\n                label: this._accessRules.getTableTitle(tableId),\n              })),\n              {defaultLabel: '[Select Table]'},\n            ),\n            testId('rule-userattr-table'),\n          ),\n          cssCell1(\n            aclSelect(this._lookupColId, this._validColIds,\n              {defaultLabel: '[Select Column]'}),\n            testId('rule-userattr-col'),\n          ),\n          cssCellIcon(\n            cssIconButton(icon('Remove'),\n              dom.on('click', () => this._accessRules.removeUserAttributes(this)))\n          ),\n          dom.maybe(this.formulaError, (msg) => cssConditionError(msg, testId('rule-error'))),\n        ),\n      ),\n      testId('rule-userattr'),\n    );\n  }\n\n  public getRule() {\n    const fullCharId = this._charId.get().trim();\n    const strippedCharId = fullCharId.startsWith('user.') ?\n      fullCharId.substring('user.'.length) : fullCharId;\n    const spec = {\n      name: this._name.get(),\n      tableId: this._tableId.get(),\n      lookupColId: this._lookupColId.get(),\n      charId: strippedCharId,\n    };\n    for (const [prop, value] of Object.entries(spec)) {\n      if (!value) {\n        throw new UserError(`Invalid user attribute rule: ${prop} must be set`);\n      }\n    }\n    if (this._getUserAttrError(fullCharId)) {\n      throw new UserError(`Invalid user attribute to look up`);\n    }\n    return {\n      id: this._userAttr?.origRecord?.id,\n      rulePos: this._userAttr?.origRecord?.rulePos as number|undefined,\n      userAttributes: JSON.stringify(spec),\n    };\n  }\n\n  private _setUserAttr(text: string) {\n    if (text === this._charId.get()) {\n      return;\n    }\n    this._charId.set(text);\n    this._userAttrError.set(this._getUserAttrError(text) || '');\n  }\n\n  private _getUserAttrError(text: string): string | null {\n    text = text.trim();\n    if (text.startsWith('user.LinkKey')) {\n      if (/user\\.LinkKey\\.\\w+$/.test(text)) {\n        return null;\n      }\n      return 'Use a simple attribute of user.LinkKey, e.g. user.LinkKey.something';\n    }\n\n    const isChoice = this._userAttrChoices.get().map(choice => choice.value).includes(text);\n    if (!isChoice) {\n      return 'Not a valid user attribute';\n    }\n    return null;\n  }\n}\n\n// Represents one line of a RuleSet, a combination of an aclFormula and permissions to apply to\n// requests that match it.\nclass ObsRulePart extends Disposable {\n  // Whether the rule part, and if it's valid or being checked.\n  public ruleStatus: Computed<RuleStatus>;\n\n  // Formula to show in the formula editor.\n  private _aclFormula = Observable.create<string>(this, this._rulePart?.aclFormula || \"\");\n\n  // Rule-specific completions for editing the formula, e.g. \"user.Email\" or \"rec.City\".\n  private _completions = Computed.create<string[]>(this, (use) => [\n    ...use(this._ruleSet.accessRules.userAttrChoices).map(opt => opt.value),\n    ...this._ruleSet.getValidColIds().map(colId => `rec.${colId}`),\n    ...this._ruleSet.getValidColIds().map(colId => `$${colId}`),\n    ...this._ruleSet.getValidColIds().map(colId => `newRec.${colId}`),\n  ]);\n\n  // The permission bits.\n  private _permissions = Observable.create<PartialPermissionSet>(\n    this, this._rulePart?.permissions || emptyPermissionSet());\n\n  // The memo text. Updated whenever changes are made within `_memoEditor`.\n  private _memo: Observable<string>;\n\n  // Reference to the memo editor element, for triggering focus. Shown when\n  // `_showMemoEditor` is true.\n  private _memoEditor: HTMLInputElement | undefined;\n\n  // Is the memo editor visible? Initialized to true if a saved memo exists for this rule.\n  private _showMemoEditor: Observable<boolean>;\n\n  // Whether the rule is being checked after a change. Saving will wait for such checks to finish.\n  private _checkPending = Observable.create(this, false);\n\n  // If the formula failed validation, the error message to show. Blank if valid.\n  private _formulaError = Observable.create(this, '');\n\n  private _formulaProperties = Observable.create<FormulaProperties>(this, getAclFormulaProperties(this._rulePart));\n\n  // Error message if any validation failed.\n  private _error: Computed<string>;\n\n  constructor(private _ruleSet: ObsRuleSet, private _rulePart?: RulePart, isNew = false) {\n    super();\n    this._memo = Observable.create(this, _rulePart?.memo ?? '');\n\n    if (_rulePart && isNew) {\n      // rulePart is omitted for a new ObsRulePart added by the user. If given, isNew may be set to\n      // treat the rule as new and only use the rulePart for its initialization.\n      this._rulePart = undefined;\n    }\n\n    // If this rule has a blank memo, don't show the editor.\n    this._showMemoEditor = Observable.create(this, !this.isBuiltIn() && this._memo.get() !== '');\n\n    this._error = Computed.create(this, (use) => {\n      return use(this._formulaError) ||\n        this._warnInvalidColIds(use(this._formulaProperties).usedColIds) ||\n        ( !this._ruleSet.isLastCondition(use, this) &&\n          use(this._aclFormula) === '' &&\n          permissionSetToText(use(this._permissions)) !== '' ?\n          'Condition cannot be blank' : ''\n        );\n    });\n\n    const emptyPerms = emptyPermissionSet();\n    this.ruleStatus = Computed.create(this, (use) => {\n      if (use(this._error)) { return RuleStatus.Invalid; }\n      if (use(this._checkPending)) { return RuleStatus.CheckPending; }\n      return getChangedStatus(\n        use(this._aclFormula) !== (this._rulePart?.aclFormula ?? '') ||\n        use(this._memo) !== (this._rulePart?.memo ?? '') ||\n        !isEqual(use(this._permissions), this._rulePart?.permissions ?? emptyPerms)\n      );\n    });\n  }\n\n  public getRulePart(): RuleRec {\n    // Use id of 0 to distinguish built-in rules from newly added rule, which will have id of undefined.\n    const id = this.isBuiltIn() ? 0 : this._rulePart?.origRecord?.id;\n    return {\n      id,\n      aclFormula: this._aclFormula.get(),\n      permissionsText: permissionSetToText(this._permissions.get()),\n      rulePos: this._rulePart?.origRecord?.rulePos as number|undefined,\n      memo: this._memo.get(),\n    };\n  }\n\n  public hasEmptyCondition(use: UseCB): boolean {\n    return use(this._aclFormula) === '';\n  }\n\n  public matches(use: UseCB, aclFormula: string, permissionsText: string): boolean {\n    return (use(this._aclFormula) === aclFormula &&\n            permissionSetToText(use(this._permissions)) === permissionsText);\n  }\n\n  /**\n   * Check if RulePart may only add permissions, only remove permissions, or may do either.\n   * A rule that neither adds nor removes permissions is treated as mixed for simplicity,\n   * though this would be suboptimal if this were a useful case to support.\n   */\n  public summarizePermissions(): MixedPermissionValue {\n    return summarizePermissionSet(this._permissions.get());\n  }\n\n  /**\n   * Verify that the rule is in a good state, optionally given a proposed permission change.\n   */\n  public sanityCheck(pset?: PartialPermissionSet) {\n    // Nothing to do!  We now support all expressible rule permutations.\n  }\n\n  public buildRulePartDom(wide: boolean = false) {\n    return cssRulePartAndMemo(\n      cssColumnGroup(\n        cssCellIcon(\n          (this._isNonFirstBuiltIn() ?\n            null :\n            cssIconButton(icon('Plus'),\n              dom.on('click', () => this._ruleSet.addRulePart(this)),\n              testId('rule-add'),\n            )\n          ),\n        ),\n        cssCell2(\n          wide ? cssCell4.cls('') : null,\n          aclFormulaEditor({\n            gristTheme: this._ruleSet.accessRules.gristDoc.currentTheme,\n            initialValue: this._aclFormula.get(),\n            readOnly: this.isBuiltIn(),\n            setValue: (value) => this._setAclFormula(value),\n            placeholder: dom.text((use) => {\n              return (\n                this._ruleSet.isSoleCondition(use, this) ? t('Everyone') :\n                this._ruleSet.isLastCondition(use, this) ? t('Everyone Else') :\n                t('Enter Condition')\n              );\n            }),\n            getSuggestions: (prefix) => this._completions.get(),\n          }),\n          testId('rule-acl-formula'),\n        ),\n        cssCell1(cssCell.cls('-stretch'),\n          permissionsWidget(this._ruleSet.getAvailableBits(), this._permissions,\n            {disabled: this.isBuiltIn(), sanityCheck: (pset) => this.sanityCheck(pset)},\n            testId('rule-permissions')\n          ),\n        ),\n        cssCellIconWithMargins(\n          dom.maybe(use => !this.isBuiltIn() && !use(this._showMemoEditor), () =>\n            cssIconButton(icon('Memo'),\n              dom.on('click', () => {\n                this._showMemoEditor.set(true);\n                // Note that focus is set when the memo icon is clicked, and not when\n                // the editor is attached to the DOM; because rules with non-blank\n                // memos have their editors visible by default when the page is first\n                // loaded, focusing on creation could cause unintended focusing.\n                setTimeout(() => this._memoEditor?.focus(), 0);\n              }),\n              testId('rule-memo-add'),\n            )\n          ),\n        ),\n        cssCellIcon(\n          (this.isBuiltIn() ?\n            null :\n            cssIconButton(icon('Remove'),\n              dom.on('click', () => this._ruleSet.removeRulePart(this)),\n              testId('rule-remove'),\n            )\n          ),\n        ),\n        dom.maybe(this._error, (msg) => cssConditionError(msg, testId('rule-error'))),\n        testId('rule-part'),\n      ),\n      dom.maybe(this._showMemoEditor, () =>\n        cssMemoColumnGroup(\n          cssCellIcon(),\n          cssMemoIcon('Memo'),\n          cssCell2(\n            wide ? cssCell4.cls('') : null,\n            this._memoEditor = aclMemoEditor(this._memo,\n              {\n                placeholder: t(\"Type a message...\"),\n              },\n              dom.onKeyDown({\n                // Match the behavior of the formula editor.\n                Enter: (_ev, el) => el.blur(),\n              }),\n            ),\n            testId('rule-memo-editor'),\n          ),\n          cssCellIconWithMargins(),\n          cssCellIcon(\n            cssIconButton(icon('Remove'),\n              dom.on('click', () => {\n                this._showMemoEditor.set(false);\n                this._memo.set('');\n              }),\n              testId('rule-memo-remove'),\n            ),\n          ),\n          testId('rule-memo'),\n        ),\n      ),\n      testId('rule-part-and-memo'),\n    );\n  }\n\n  public isBuiltIn(): boolean {\n    return this._rulePart ? !this._rulePart.origRecord?.id : false;\n  }\n\n  // return true if formula, permissions, and memo are all empty.\n  public isEmpty(use: UseCB = unwrap): boolean {\n    return use(this._aclFormula) === '' &&\n      isEqual(use(this._permissions), emptyPermissionSet()) &&\n      use(this._memo) === '';\n  }\n\n  public isBuiltInOrEmpty(use: UseCB = unwrap): boolean {\n    return this.isBuiltIn() || this.isEmpty(use);\n  }\n\n  private _isNonFirstBuiltIn(): boolean {\n    return this.isBuiltIn() && this._ruleSet.getFirstBuiltIn() !== this;\n  }\n\n  private async _setAclFormula(text: string) {\n    if (text === this._aclFormula.get()) { return; }\n    this._aclFormula.set(text);\n    this._checkPending.set(true);\n    this._formulaProperties.set({});\n    this._formulaError.set('');\n    try {\n      this._formulaProperties.set(await this._ruleSet.accessRules.checkAclFormula(text));\n      this.sanityCheck();\n    } catch (e) {\n      this._formulaError.set(e.message);\n    } finally {\n      this._checkPending.set(false);\n    }\n  }\n\n  private _warnInvalidColIds(colIds?: string[]) {\n    if (!colIds || !colIds.length) { return false; }\n    const allValid = new Set(this._ruleSet.getValidColIds());\n    const invalid = colIds.filter(c => !allValid.has(c));\n    if (invalid.length > 0) {\n      return `Invalid columns: ${invalid.join(', ')}`;\n    }\n  }\n}\n\n/**\n * Produce UserActions to create/update/remove records, to replace data in tableData\n * with newRecords. Records are matched on uniqueId(record), which defaults to returning\n * String(record.id). UniqueIds of new records don't need to be unique as long as they don't\n * overlap with uniqueIds of existing records.\n *\n * Return also a rowIdMap, mapping uniqueId(record) to a rowId used in the actions. The rowIds may\n * include negative values (auto-generated when newRecords doesn't include one). These may be used\n * in Reference values within the same action bundle.\n *\n * TODO This is a general-purpose function, and should live in a separate module.\n */\nfunction syncRecords(tableData: TableData, newRecords: RowRecord[],\n                     uniqueId: (r: RowRecord) => string = (r => String(r.id))\n): {userActions: UserAction[], rowIdMap: Map<string, number>} {\n  const oldRecords = tableData.getRecords();\n  const rowIdMap = new Map<string, number>(oldRecords.map(r => [uniqueId(r), r.id]));\n  const newRecordMap = new Map<string, RowRecord>(newRecords.map(r => [uniqueId(r), r]));\n\n  const removedRecords: RowRecord[] = oldRecords.filter(r => !newRecordMap.has(uniqueId(r)));\n\n  // Generate a unique negative rowId for each added record.\n  const addedRecords: RowRecord[] = newRecords.filter(r => !rowIdMap.has(uniqueId(r)))\n    .map((r, index) => ({...r, id: -(index + 1)}));\n\n  // Array of [before, after] pairs for changed records.\n  const updatedRecords: Array<[RowRecord, RowRecord]> = oldRecords.map((r): ([RowRecord, RowRecord]|null) => {\n    const newRec = newRecordMap.get(uniqueId(r));\n    const updated = newRec && {...r, ...newRec, id: r.id};\n    return updated && !isEqual(updated, r) ? [r, updated] : null;\n  }).filter(isNonNullish);\n\n  console.log(\"syncRecords: removing [%s], adding [%s], updating [%s]\",\n    removedRecords.map(uniqueId).join(\", \"),\n    addedRecords.map(uniqueId).join(\", \"),\n    updatedRecords.map(([r]) => uniqueId(r)).join(\", \"));\n\n  const tableId = tableData.tableId;\n  const userActions: UserAction[] = [];\n  if (removedRecords.length > 0) {\n    userActions.push(['BulkRemoveRecord', tableId, removedRecords.map(r => r.id)]);\n  }\n  if (updatedRecords.length > 0) {\n    userActions.push(['BulkUpdateRecord', tableId, updatedRecords.map(([r]) => r.id), getColChanges(updatedRecords)]);\n  }\n  if (addedRecords.length > 0) {\n    userActions.push(['BulkAddRecord', tableId, addedRecords.map(r => r.id), getColValues(addedRecords)]);\n  }\n\n  // Include generated rowIds for added records into the returned map.\n  addedRecords.forEach(r => rowIdMap.set(uniqueId(r), r.id));\n  return {userActions, rowIdMap};\n}\n\n/**\n * Convert a list of [before, after] rows into an object of changes, skipping columns which\n * haven't changed.\n */\nfunction getColChanges(pairs: Array<[RowRecord, RowRecord]>): BulkColValues {\n  const colIdSet = new Set<string>();\n  for (const [before, after] of pairs) {\n    for (const c of Object.keys(after)) {\n      if (c !== 'id' && !isEqual(before[c], after[c])) {\n        colIdSet.add(c);\n      }\n    }\n  }\n  const result: BulkColValues = {};\n  for (const colId of colIdSet) {\n    result[colId] = pairs.map(([before, after]) => after[colId]);\n  }\n  return result;\n}\n\nfunction serializeResource(rec: RowRecord): string {\n  return JSON.stringify([rec.tableId, rec.colIds]);\n}\n\nfunction flatten<T>(...args: T[][]): T[] {\n  return ([] as T[]).concat(...args);\n}\n\nfunction removeItem<T>(observableArray: MutableObsArray<T>, item: T): boolean {\n  const i = observableArray.get().indexOf(item);\n  if (i >= 0) {\n    observableArray.splice(i, 1);\n    return true;\n  }\n  return false;\n}\n\nfunction getChangedStatus(value: boolean): RuleStatus {\n  return value ? RuleStatus.ChangedValid : RuleStatus.Unchanged;\n}\n\nfunction getAclFormulaProperties(part?: RulePart): FormulaProperties {\n  const aclFormulaParsed = part?.origRecord?.aclFormulaParsed;\n  return aclFormulaParsed ? getFormulaProperties(JSON.parse(String(aclFormulaParsed))) : {};\n}\n\n// Return a rule set if it applies to one of the specified columns.\nfunction filterRuleSet(colIds: string[], ruleSet?: RuleSet): RuleSet|undefined {\n  if (!ruleSet) { return undefined; }\n  if (ruleSet.colIds === '*') { return ruleSet; }\n  for (const colId of ruleSet.colIds) {\n    if (colIds.includes(colId)) { return ruleSet; }\n  }\n  return undefined;\n}\n\n// Filter an array of rule sets for just those that apply to one of the specified\n// columns.\nfunction filterRuleSets(colIds: string[], ruleSets: RuleSet[]): RuleSet[] {\n  return ruleSets.map(ruleSet => filterRuleSet(colIds, ruleSet)).filter(rs => rs) as RuleSet[];\n}\n\nconst cssOuter = styled('div', `\n  flex: auto;\n  height: 100%;\n  width: 100%;\n  max-width: 800px;\n  margin: 0 auto;\n  display: flex;\n  flex-direction: column;\n`);\n\nconst cssAddTableRow = styled('div', `\n  flex: none;\n  margin: 16px 16px 8px 16px;\n  display: flex;\n  gap: 16px;\n`);\n\nconst cssDropdownIcon = styled(icon, `\n  margin: -2px -2px 0 4px;\n`);\n\nconst cssRemoveIcon = styled(icon, `\n  margin: -2px -2px 0 4px;\n`);\n\nconst cssSection = styled('div', `\n  margin: 16px 16px 24px 16px;\n`);\n\nconst cssSectionHeading = styled('div', `\n  display: flex;\n  align-items: center;\n  margin-bottom: 8px;\n  font-weight: bold;\n  color: ${theme.lightText};\n`);\n\nconst cssTableName = styled('span', `\n  color: ${theme.text};\n`);\n\nconst cssInput = styled(textInput, `\n  color: ${theme.inputFg};\n  background-color: ${theme.inputBg};\n  width: 100%;\n  border: 1px solid transparent;\n  cursor: pointer;\n\n  &:hover {\n    border: 1px solid ${theme.inputBorder};\n  }\n  &:focus {\n    box-shadow: inset 0 0 0 1px ${theme.controlFg};\n    border-color: ${theme.controlFg};\n    cursor: unset;\n  }\n  &[disabled] {\n    color: ${theme.inputDisabledFg};\n    background-color: ${theme.inputDisabledBg};\n    box-shadow: unset;\n    border-color: transparent;\n  }\n  &::placeholder {\n    color: ${theme.inputPlaceholderFg};\n  }\n`);\n\nconst cssConditionError = styled('div', `\n  margin-top: 4px;\n  width: 100%;\n  color: ${theme.errorText};\n`);\n\n/**\n * Fairly general table styles.\n */\nconst cssTableRounded = styled('div', `\n  border: 1px solid ${theme.accessRulesTableBorder};\n  border-radius: 8px;\n  overflow: hidden;\n`);\n\n// Row with a border\nconst cssTableRow = styled('div', `\n  display: flex;\n  border-bottom: 1px solid ${theme.accessRulesTableBorder};\n  &:last-child {\n    border-bottom: none;\n  }\n`);\n\n// Darker table header\nconst cssTableHeaderRow = styled(cssTableRow, `\n  background-color: ${theme.accessRulesTableHeaderBg};\n  color: ${theme.accessRulesTableHeaderFg};\n`);\n\n// Cell for table column header.\nconst cssColHeaderCell = styled('div', `\n  margin: 4px 8px;\n  text-transform: uppercase;\n  font-weight: 500;\n  font-size: 10px;\n`);\n\n// General table cell.\nconst cssCell = styled('div', `\n  min-width: 0px;\n  overflow: hidden;\n\n  &-rborder {\n    border-right: 1px solid ${theme.accessRulesTableBorder};\n  }\n  &-center {\n    text-align: center;\n  }\n  &-stretch {\n    min-width: unset;\n    overflow: visible;\n  }\n`);\n\n// Variations on columns of different widths.\nconst cssCellIcon = styled(cssCell, `flex: none; width: 24px;`);\nconst cssCellIconWithMargins = styled(cssCellIcon, `margin: 0px 8px;`);\nconst cssCell1 = styled(cssCell, `flex: 1;`);\nconst cssCell2 = styled(cssCell, `flex: 2;`);\nconst cssCell4 = styled(cssCell, `flex: 4;`);\n\n// Group of columns, which may be placed inside a cell.\nconst cssColumnGroup = styled('div', `\n  display: flex;\n  align-items: center;\n  gap: 0px 8px;\n  margin: 0 8px;\n  flex-wrap: wrap;\n`);\n\nconst cssRuleBody = styled('div', `\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  margin: 4px 0;\n`);\n\nconst cssRuleDescription = styled('div', `\n  color: ${theme.text};\n  display: flex;\n  align-items: top;\n  margin: 16px 0 8px 0;\n  gap: 12px;\n  white-space: pre-line;  /* preserve line breaks in long descriptions */\n`);\n\nconst cssCheckbox = styled(squareCheckbox, `\n  flex: none;\n`);\n\nconst cssCellContent = styled('div', `\n  margin: 4px 8px;\n`);\n\nconst cssCenterContent = styled('div', `\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`);\n\nconst cssDefaultLabel = styled('div', `\n  color: ${theme.accessRulesTableBodyFg};\n  font-weight: bold;\n`);\n\nconst cssRuleProblems = styled('div', `\n  flex: auto;\n  height: 100%;\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  gap: 8px;\n`);\n\nconst cssRulePartAndMemo = styled('div', `\n  display: flex;\n  flex-direction: column;\n  row-gap: 4px;\n`);\n\nconst cssMemoColumnGroup = styled(cssColumnGroup, `\n  margin-bottom: 8px;\n`);\n\nconst cssMemoIcon = styled(icon, `\n  --icon-color: ${theme.accentIcon};\n  margin-left: 8px;\n  margin-right: 8px;\n`);\n\nconst cssSeedRule = styled('div', `\n  margin-bottom: 16px;\n`);\n","/**\n * Implements a widget showing 3-state boxes for permissions\n * (for Allow / Deny / Pass-Through).\n */\nimport {colors, testId} from 'app/client/ui2018/cssVars';\nimport {cssIconButton, icon} from 'app/client/ui2018/icons';\nimport {menu, menuIcon, menuItem} from 'app/client/ui2018/menus';\nimport {PartialPermissionSet, PartialPermissionValue} from 'app/common/ACLPermissions';\nimport {ALL_PERMISSION_PROPS, emptyPermissionSet} from 'app/common/ACLPermissions';\nimport {capitalize} from 'app/common/gutil';\nimport {dom, DomElementArg, Observable, styled} from 'grainjs';\nimport isEqual = require('lodash/isEqual');\nimport {makeT} from 'app/client/lib/localization';\n\n// One of the strings 'read', 'update', etc.\nexport type PermissionKey = keyof PartialPermissionSet;\n\n// Canonical order of permission bits when rendered in a permissionsWidget.\nconst PERMISSION_BIT_ORDER = 'RUCDS';\n\nconst t = makeT('PermissionsWidget');\n\n/**\n * Renders a box for each of availableBits, and a dropdown with a description and some shortcuts.\n */\nexport function permissionsWidget(\n  availableBits: PermissionKey[],\n  pset: Observable<PartialPermissionSet>,\n  options: {disabled: boolean, sanityCheck?: (p: PartialPermissionSet) => void},\n  ...args: DomElementArg[]\n) {\n  availableBits = sortBits(availableBits);\n  // These are the permission sets available to set via the dropdown.\n  const empty: PartialPermissionSet = emptyPermissionSet();\n  const allowAll: PartialPermissionSet = makePermissionSet(availableBits, () => 'allow');\n  const denyAll: PartialPermissionSet = makePermissionSet(availableBits, () => 'deny');\n  const readOnly: PartialPermissionSet = makePermissionSet(availableBits, (b) => b === 'read' ? 'allow' : 'deny');\n  const setPermissions = (p: PartialPermissionSet) => {\n    options.sanityCheck?.(p);\n    pset.set(p);\n  };\n\n  return cssPermissions(\n    dom.forEach(availableBits, (bit) => {\n      return cssBit(\n        bit.slice(0, 1).toUpperCase(),              // Show the first letter of the property (e.g. \"R\" for \"read\")\n        cssBit.cls((use) => '-' + use(pset)[bit]),  // -allow, -deny class suffixes.\n        dom.attr('title', (use) => capitalize(`${use(pset)[bit]} ${bit}`.trim())),    // Explanation on hover\n        dom.cls('disabled', options.disabled),\n        // Cycle the bit's value on click, unless disabled.\n        (options.disabled ? null :\n          dom.on('click', () => setPermissions({...pset.get(), [bit]: next(pset.get()[bit])}))\n        )\n      );\n    }),\n    cssIconButton(icon('Dropdown'), testId('permissions-dropdown'), menu(() => {\n      // Show a disabled \"Custom\" menu item if the permission set isn't a recognized one, for\n      // information purposes.\n      const isCustom = [allowAll, denyAll, readOnly, empty].every(ps => !isEqual(ps, pset.get()));\n      return [\n        (isCustom ?\n          cssMenuItem(() => null, dom.cls('disabled'), menuIcon('Tick'),\n            cssMenuItemContent(\n              'Custom',\n              cssMenuItemDetails(dom.text((use) => psetDescription(use(pset))))\n            ),\n          ) :\n          null\n        ),\n        // If the set matches any recognized pattern, mark that item with a tick (checkmark).\n        cssMenuItem(() => setPermissions(allowAll), tick(isEqual(pset.get(), allowAll)), t(\"Allow All\"),\n          dom.cls('disabled', options.disabled)\n        ),\n        cssMenuItem(() => setPermissions(denyAll), tick(isEqual(pset.get(), denyAll)), t(\"Deny All\"),\n          dom.cls('disabled', options.disabled)\n        ),\n        cssMenuItem(() => setPermissions(readOnly), tick(isEqual(pset.get(), readOnly)), t(\"Read Only\"),\n          dom.cls('disabled', options.disabled)\n        ),\n        cssMenuItem(() => setPermissions(empty),\n          // For the empty permission set, it seems clearer to describe it as \"No Effect\", but to\n          // all it \"Clear\" when offering to the user as the action.\n          isEqual(pset.get(), empty) ? [tick(true), 'No Effect'] : [tick(false), 'Clear'],\n          dom.cls('disabled', options.disabled),\n        ),\n      ];\n    })),\n    ...args\n  );\n}\n\nfunction next(pvalue: PartialPermissionValue): PartialPermissionValue {\n  switch (pvalue) {\n    case 'allow': return '';\n    case 'deny': return 'allow';\n  }\n  return 'deny';\n}\n\n// Helper to build up permission sets.\nfunction makePermissionSet(bits: PermissionKey[], makeValue: (bit: PermissionKey) => PartialPermissionValue) {\n  const pset = emptyPermissionSet();\n  for (const bit of bits) {\n    pset[bit] = makeValue(bit);\n  }\n  return pset;\n}\n\n// Helper for a tick (checkmark) icon, replacing it with an equivalent space when not shown.\nfunction tick(show: boolean) {\n  return show ? menuIcon('Tick') : cssMenuIconSpace();\n}\n\n// Human-readable summary of the permission set. E.g. \"Allow Read. Deny Update, Create.\".\nfunction psetDescription(permissionSet: PartialPermissionSet): string {\n  const allow: string[] = [];\n  const deny: string[] = [];\n  for (const prop of ALL_PERMISSION_PROPS) {\n    const value = permissionSet[prop];\n    if (value === \"allow\") {\n      allow.push(capitalize(prop));\n    } else if (value === \"deny\") {\n      deny.push(capitalize(prop));\n    }\n  }\n  const parts: string[] = [];\n  if (allow.length) { parts.push(`Allow ${allow.join(\", \")}.`); }\n  if (deny.length) { parts.push(`Deny ${deny.join(\", \")}.`); }\n  return parts.join(' ');\n}\n\n/**\n * Sort the bits in a standard way for viewing, since they could be in any order\n * in the underlying rule store. And in fact ACLPermissions.permissionSetToText\n * uses an order (CRUDS) that is different from how things have been historically\n * rendered in the UI (RUCDS).\n */\nfunction sortBits(bits: PermissionKey[]) {\n  return bits.sort((a, b) => {\n    const aIndex = PERMISSION_BIT_ORDER.indexOf(a.slice(0, 1).toUpperCase());\n    const bIndex = PERMISSION_BIT_ORDER.indexOf(b.slice(0, 1).toUpperCase());\n    return aIndex - bIndex;\n  });\n}\n\nconst cssPermissions = styled('div', `\n  display: flex;\n  gap: 4px;\n`);\n\nconst cssBit = styled('div', `\n  flex: none;\n  height: 24px;\n  width: 24px;\n  border-radius: 2px;\n  font-size: 13px;\n  font-weight: 500;\n  border: 1px dashed ${colors.darkGrey};\n  color: ${colors.darkGrey};\n  cursor: pointer;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  &-allow {\n    background-color: ${colors.lightGreen};\n    border: 1px solid ${colors.lightGreen};\n    color: white;\n  }\n  &-deny {\n    background-image: linear-gradient(-45deg, ${colors.error} 14px, white 15px 16px, ${colors.error} 16px);\n    border: 1px solid ${colors.error};\n    color: white;\n  }\n  &.disabled {\n    opacity: 0.5;\n  }\n`);\n\nconst cssMenuIconSpace = styled('div', `\n  width: 24px;\n`);\n\n// Don't make disabled item too hard to see here.\nconst cssMenuItem = styled(menuItem, `\n  align-items: start;\n  &.disabled {\n    opacity: unset;\n  }\n`);\n\nconst cssMenuItemContent = styled('div', `\n  display: flex;\n  flex-direction: column;\n`);\n\nconst cssMenuItemDetails = styled('div', `\n  font-size: 12px;\n`);\n","/**\n * ActionLog manages the list of actions from server and displays them in the side bar.\n */\n\nimport * as dispose from 'app/client/lib/dispose';\nimport dom from 'app/client/lib/dom';\nimport {timeFormat} from 'app/common/timeFormat';\nimport * as ko from 'knockout';\n\nimport koArray from 'app/client/lib/koArray';\nimport {KoArray} from 'app/client/lib/koArray';\nimport * as koDom from 'app/client/lib/koDom';\nimport * as koForm from 'app/client/lib/koForm';\n\nimport {GristDoc} from 'app/client/components/GristDoc';\nimport {ActionGroup} from 'app/common/ActionGroup';\nimport {ActionSummary, asTabularDiffs, defunctTableName, getAffectedTables,\n        LabelDelta} from 'app/common/ActionSummary';\nimport {CellDelta, TabularDiff} from 'app/common/TabularDiff';\nimport {DomContents, IDomComponent} from 'grainjs';\nimport {makeT} from 'app/client/lib/localization';\n\n/**\n *\n * Actions that are displayed in the log get a state observable\n * to track if they are undone/buried.\n *\n * Also for each table shown in the log, we create an observable\n * to track its name.  References to these observables are stored\n * with each action, by the name of the table at that time (the\n * name of a table can change).\n *\n */\nexport interface ActionGroupWithState extends ActionGroup {\n  state?: ko.Observable<string>;  // is action undone/buried\n  tableFilters?: {[tableId: string]: ko.Observable<string>};  // current names of tables\n  affectedTableIds?: Array<ko.Observable<string>>; // names of tables affecting this ActionGroup\n}\n\nconst gristNotify = (window as any).gristNotify;\n\n// Action display state enum.\nconst state = {\n  UNDONE: 'undone',\n  BURIED: 'buried',\n  DEFAULT: 'default'\n};\n\nconst t = makeT('ActionLog');\n\nexport class ActionLog extends dispose.Disposable implements IDomComponent {\n\n  private _displayStack: KoArray<ActionGroupWithState>;\n  private _gristDoc: GristDoc|null;\n  private _selectedTableId: ko.Computed<string>;\n  private _showAllTables: ko.Observable<boolean>;      // should all tables be visible?\n\n  private _pending: ActionGroupWithState[] = [];  // cache for actions that arrive while loading log\n  private _loaded: boolean = false;               // flag set once log is loaded\n  private _loading: ko.Observable<boolean>;  // flag set while log is loading\n\n  /**\n   * Create an ActionLog.\n   * @param options - supplies the GristDoc holding the log, if we have one, so that we\n   *   can cross-reference with it.  We may not have a document, if used from the\n   *   command line renderActions utility, in which case we don't set up cross-references.\n   */\n  public create(options: {gristDoc: GristDoc|null}) {\n    // By default, just show actions for the currently viewed table.\n    this._showAllTables = ko.observable(false);\n    // We load the ActionLog lazily now, when it is first viewed.\n    this._loading = ko.observable(false);\n\n    this._gristDoc = options.gristDoc;\n\n    // TODO: _displayStack grows without bound within a single session.\n    // Stack of actions as they should be displayed to the user.\n    this._displayStack = koArray<ActionGroupWithState>();\n\n    // Computed for the tableId of the table currently being viewed.\n    this._selectedTableId = this.autoDispose(ko.computed(() => {\n      if (!this._gristDoc || this._gristDoc.viewModel.isDisposed()) { return \"\"; }\n      const section = this._gristDoc.viewModel.activeSection();\n      if (!section || section.isDisposed()) { return \"\"; }\n      const table = section.table();\n      return table && !table.isDisposed() ? table.tableId() : \"\";\n    }));\n  }\n\n  public buildDom() {\n    return this._buildLogDom();\n  }\n\n  /**\n   * Pushes actions as they are received from the server to the display stack.\n   * @param {Object} actionGroup - ActionGroup instance from the server.\n   */\n  public pushAction(ag: ActionGroupWithState): void {\n    if (this._loading()) {\n      this._pending.push(ag);\n      return;\n    }\n\n    this._setupFilters(ag, this._displayStack.at(0) || undefined);\n    const otherAg = ag.otherId ? this._displayStack.all().find(a => a.actionNum === ag.otherId) : null;\n\n    if (otherAg) {\n      // Undo/redo action.\n      if (otherAg.state) {\n        otherAg.state(ag.isUndo ? state.UNDONE : state.DEFAULT);\n      }\n    } else {\n      // Any (non-link) action.\n      if (ag.fromSelf) {\n        // Bury all undos immediately preceding this action since they can no longer\n        // be redone. This is triggered by normal actions and undo/redo actions whose\n        // targets are not recent (not in the stack).\n        for (let i = 0; i < this._displayStack.peekLength; i++) {\n          const prevAction = this._displayStack.at(i)!;\n          if (!prevAction.state) { continue; }\n          const prevState = prevAction.state();\n          if (prevAction.fromSelf && prevState === state.DEFAULT) {\n            // When a normal action is found, stop looking to bury previous actions.\n            break;\n          } else if (prevAction.fromSelf && prevState === state.UNDONE) {\n            // The previous action was undone, so now it has become buried.\n            prevAction.state(state.BURIED);\n          }\n        }\n      }\n      if (!ag.otherId) {\n        ag.state = ko.observable(state.DEFAULT);\n        this._displayStack.unshift(ag);\n      }\n    }\n  }\n\n  /**\n   * Render a description of an action prepared on the server.\n   * @param {TabularDiffs} act - a collection of table changes\n   * @param {string} txt - a textual description of the action\n   * @param {ActionGroupWithState} ag - the full action information we have\n   */\n  public renderTabularDiffs(sum: ActionSummary, txt: string, ag?: ActionGroupWithState): HTMLElement {\n    const act = asTabularDiffs(sum);\n    const editDom = dom('div',\n      this._renderTableSchemaChanges(sum, ag),\n      this._renderColumnSchemaChanges(sum, ag),\n      Object.entries(act).map(([table, tdiff]: [string, TabularDiff]) => {\n        if (tdiff.cells.length === 0) { return dom('div'); }\n        return dom('table.action_log_table',\n          koDom.show(() => this._showForTable(table, ag)),\n          dom('caption',\n            this._renderTableName(table)),\n          dom('tr',\n            dom('th'),\n            tdiff.header.map(diff => {\n              return dom('th', this._renderCell(diff));\n            })),\n            tdiff.cells.map(row => {\n            return dom('tr',\n              dom('td', this._renderCell(row[0])),\n                row[2].map((diff, idx: number) => {\n                return dom('td',\n                           this._renderCell(diff),\n                           dom.on('click', () => {\n                             return this._selectCell(row[1], act[table].header[idx], table,\n                                              ag ? ag.actionNum : 0);\n                           }));\n              }));\n            }));\n      }),\n      dom('span.action_comment', txt));\n    return editDom;\n  }\n\n  /**\n   * Decorate an ActionGroup with observables for controlling visibility of any\n   * table information rendered from it.  Observables are shared with the previous\n   * ActionGroup, and simply stored under a new name as needed.\n   */\n  private _setupFilters(ag: ActionGroupWithState, prev?: ActionGroupWithState): void {\n    const filt: {[name: string]: ko.Observable<string>} = ag.tableFilters = {};\n\n    // First, bring along observables for tables from previous actions.\n    if (prev) {\n      // Tables are renamed from time to time - prepare dictionary of updates.\n      const renames = new Map(ag.actionSummary.tableRenames);\n      for (const name of Object.keys(prev.tableFilters!)) {\n        if (name.startsWith('-')) {\n          // skip\n        } else if (renames.has(name)) {\n          const newName = renames.get(name) || defunctTableName(name);\n          filt[newName] = prev.tableFilters![name];\n          filt[newName](newName);   // Update the observable with the new name.\n        } else {\n          filt[name] = prev.tableFilters![name];\n        }\n      }\n    }\n    // Add any more observables that we need for this action.\n    const names = getAffectedTables(ag.actionSummary);\n    for (const name of names) {\n      if (!filt[name]) { filt[name] = ko.observable(name); }\n    }\n    // Record the observables that affect this ActionGroup specifically\n    ag.affectedTableIds = names.map(name => ag.tableFilters![name]).filter(obs => obs);\n  }\n\n  /**\n   * Helper function that returns true if any table touched by the ActionGroup\n   * is set to be visible.\n   */\n  private _hasSelectedTable(ag: ActionGroupWithState): boolean {\n    if (!this._gristDoc) { return true; }\n    return ag.affectedTableIds!.some(tableId => tableId() === this._selectedTableId());\n  }\n\n  /**\n   * Return a koDom.show clause that activates when the named table is not\n   * filtered out.\n   */\n  private _showForTable(tableName: string, ag?: ActionGroupWithState): boolean {\n    if (!ag) { return true; }\n    const obs = ag.tableFilters![tableName];\n    return this._showAllTables() || !obs || obs() === this._selectedTableId();\n  }\n\n  private _buildLogDom() {\n    this._loadActionSummaries().catch(() => gristNotify(t(\"Action Log failed to load\")));\n    return dom('div.action_log',\n        {tabIndex: '-1'},\n        dom('div.preference_item',\n            koForm.checkbox(this._showAllTables,\n                            dom.testId('ActionLog_allTables'),\n                            dom('span.preference_desc', 'All tables'))),\n        dom('div.action_log_load',\n          koDom.show(() => this._loading()),\n          'Loading...'),\n        koDom.foreach(this._displayStack, (ag: ActionGroupWithState) => {\n        const timestamp = ag.time ? timeFormat(\"D T\", new Date(ag.time)) : \"\";\n        let desc: DomContents = ag.desc || \"\";\n        if (ag.actionSummary) {\n          desc = this.renderTabularDiffs(ag.actionSummary, desc, ag);\n        }\n        return dom('div.action_log_item',\n          koDom.cssClass(ag.state),\n          koDom.show(() => this._showAllTables() || this._hasSelectedTable(ag)),\n          dom('div.action_info',\n            dom('span.action_info_action_num', `#${ag.actionNum}`),\n            ag.user ? dom('span.action_info_user',\n              ag.user,\n              koDom.toggleClass('action_info_from_self', ag.fromSelf)\n            ) : '',\n            dom('span.action_info_timestamp', timestamp)),\n          dom('span.action_desc', desc)\n        );\n      })\n    );\n  }\n\n  /**\n   * Fetch summaries of recent actions (with summaries) from the server.\n   */\n  private async _loadActionSummaries() {\n    if (this._loaded || !this._gristDoc) { return; }\n    this._loading(true);\n    // Returned actions are ordered with earliest actions first.\n    const result = await this._gristDoc.docComm.getActionSummaries();\n    this._loading(false);\n    this._loaded = true;\n    // Add the actions to our action log.\n    result.forEach(item => this.pushAction(item));\n    // Add any actions that came in while we were fetching.  Unlikely, but\n    // perhaps possible?\n    const top = result.length > 0 ? result[result.length - 1].actionNum : 0;\n    for (const item of this._pending) {\n      if (item.actionNum > top) { this.pushAction(item); }\n    }\n    this._pending.length = 0;\n  }\n\n  /**\n   * Prepare dom element(s) for a cell that has been created, destroyed,\n   * or modified.\n   *\n   * @param {CellDelta|string|null} cell - a structure with before and after values,\n   *   or a plain string, or null\n   *\n   */\n  private _renderCell(cell: CellDelta|string|null) {\n    // we'll show completely empty cells as \"...\"\n    if (cell === null) {\n      return \"...\";\n    }\n    // strings are shown as themselves\n    if (typeof(cell) === 'string') {\n      return cell;\n    }\n    // by elimination, we have a TabularDiff.CellDelta with before and after values.\n    const [pre, post] = cell;\n    if (!pre && !post) {\n      // very boring before + after values :-)\n      return \"\";\n    } else if (pre && !post) {\n      // this is a cell that was removed\n      return dom('span.action_log_cell_remove', pre[0]);\n    } else if (post && (pre === null || (pre[0] === null || pre[0] === ''))) {\n      // this is a cell that was added, or modified from a previously empty value\n      return dom('span.action_log_cell_add', post[0]);\n    } else if (pre && post) {\n      // a modified cell\n      return dom('div',\n                 dom('span.action_log_cell_remove.action_log_cell_pre', pre[0]),\n                 dom('span.action_log_cell_add', post[0]));\n    }\n    return JSON.stringify(cell);\n  }\n\n  /**\n   * Choose a table name to show.  For now, we show diffs of metadata tables also.\n   * For those tables, we show \"_grist_Foo_bar\" as \"[Foo.bar]\".\n   * @param {string} name - tableId of table\n   * @returns {string} a friendlier name for the table\n   */\n  private _renderTableName(name: string): string {\n    if (name.indexOf('_grist_') !== 0) {\n      // Ordinary data table.  Ideally, we would look up\n      // a friendly name from a raw data view - TODO.\n      return name;\n    }\n    const metaName = name.split('_grist_')[1].replace(/_/g, '.');\n    return `[${metaName}]`;\n  }\n\n  /**\n   * Show an ActionLog item when a column or table is renamed, added, or removed.\n   * Make sure the item is only shown when the affected table is not filtered out.\n   *\n   * @param scope: blank for tables, otherwise \"<tablename>.\"\n   * @param pair: the rename/addition/removal in LabelDelta format: [null, name1]\n   * for addition of name1, [name2, null] for removal of name2, [name1, name2]\n   * for a rename of name1 to name2.\n   * @return a filtered dom element.\n   */\n  private _renderSchemaChange(scope: string, pair: LabelDelta, ag?: ActionGroupWithState) {\n    const [pre, post] = pair;\n    // ignore addition/removal of manualSort column\n    if ((pre || post) === 'manualSort') { return dom('div'); }\n    return dom('div.action_log_rename',\n      koDom.show(() => this._showForTable(post || defunctTableName(pre!), ag)),\n      (!post ? [\"Remove \", scope, dom(\"span.action_log_rename_pre\", pre)] :\n       (!pre ? [\"Add \", scope, dom(\"span.action_log_rename_post\", post)] :\n        [\"Rename \", scope, dom(\"span.action_log_rename_pre\", pre),\n         \" to \", dom(\"span.action_log_rename_post\", post)])));\n  }\n\n  /**\n   * Show any table additions/removals/renames.\n   */\n  private _renderTableSchemaChanges(sum: ActionSummary, ag?: ActionGroupWithState) {\n    return dom('div',\n               sum.tableRenames.map(pair => this._renderSchemaChange(\"\", pair, ag)));\n  }\n\n  /**\n   * Show any column additions/removals/renames.\n   */\n  private _renderColumnSchemaChanges(sum: ActionSummary, ag?: ActionGroupWithState) {\n    return dom('div',\n               Object.keys(sum.tableDeltas).filter(key => !key.startsWith('-')).map(key =>\n                 dom('div',\n                     koDom.show(() => this._showForTable(key, ag)),\n                     sum.tableDeltas[key].columnRenames.map(pair =>\n                        this._renderSchemaChange(key + \".\", pair)))));\n  }\n\n  /**\n   * Move cursor to show a given cell of a given table. Uses primary view of table.\n   */\n  private async _selectCell(rowId: number, colId: string, tableId: string, actionNum: number) {\n    if (!this._gristDoc) { return; }\n\n    // Find action in the stack.\n    const index = this._displayStack.peek().findIndex(a => a.actionNum === actionNum);\n    if (index < 0) { throw new Error(`Cannot find action ${actionNum} in the action log.`); }\n\n    // Found the action. Now trace forward to find current tableId, colId, rowId.\n    for (let i = index; i >= 0; i--) {\n      const action = this._displayStack.at(i)!;\n      const sum = action.actionSummary;\n\n      // Check if this table was renamed / removed.\n      const tableRename: LabelDelta|undefined = sum.tableRenames.find(r => r[0] === tableId);\n      if (tableRename) {\n        const newName = tableRename[1];\n        if (!newName) {\n          // TODO - find a better way to send informative notifications.\n          gristNotify(t(\n            \"Table {{tableId}} was subsequently removed in action #{{actionNum}}\",\n            {tableId:tableId, actionNum: action.actionNum}\n          ));\n          return;\n        }\n        tableId = newName;\n      }\n      const td = sum.tableDeltas[tableId];\n      if (!td) { continue; }\n\n      // Check is this row was removed - if so there's no reason to go on.\n      if (td.removeRows.indexOf(rowId) >= 0) {\n          // TODO - find a better way to send informative notifications.\n        gristNotify(t(\"This row was subsequently removed in action {{action.actionNum}}\", {actionNum}));\n        return;\n      }\n\n      // Check if this column was renamed / added.\n      const columnRename: LabelDelta|undefined = td.columnRenames.find(r => r[0] === colId);\n      if (columnRename) {\n        const newName = columnRename[1];\n        if (!newName) {\n          // TODO - find a better way to send informative notifications.\n          gristNotify(t(\n            \"Column {{colId}} was subsequently removed in action #{{action.actionNum}}\",\n            {colId, actionNum: action.actionNum}\n          ));\n          return;\n        }\n        colId = newName;\n      }\n    }\n\n    // Find the table model of interest.\n    const tableModel = this._gristDoc.getTableModel(tableId);\n    if (!tableModel) { return; }\n\n    // Get its \"primary\" view.\n    const viewRow = tableModel.tableMetaRow.primaryView();\n    const viewId = viewRow.getRowId();\n\n    // Switch to that view.\n    await this._gristDoc.openDocPage(viewId);\n\n    // Now let's pick a reasonable section in that view.\n    const viewSection = viewRow.viewSections().peek().find((s: any) => s.table().tableId() === tableId);\n    if (!viewSection) { return; }\n    const sectionId = viewSection.getRowId();\n\n    // Within that section, find the column of interest if possible.\n    const fieldIndex = viewSection.viewFields().peek().findIndex((f: any) => f.colId.peek() === colId);\n\n    // Finally, move cursor position to the section, column (if we found it), and row.\n    this._gristDoc.moveToCursorPos({rowId, sectionId, fieldIndex}).catch(() => { /* do nothing */ });\n  }\n\n}\n","/**\n * This file contains logic moved from BaseView.js and ported to TS.\n */\n\nimport {GristDoc} from 'app/client/components/GristDoc';\nimport {getDocIdHash, RichPasteObject} from 'app/client/lib/tableUtil';\nimport {ViewFieldRec} from 'app/client/models/entities/ViewFieldRec';\nimport {UserAction} from 'app/common/DocActions';\nimport {isFullReferencingType} from 'app/common/gristTypes';\nimport {SchemaTypes} from 'app/common/schema';\nimport {BulkColValues} from 'app/plugin/GristData';\nimport omit = require('lodash/omit');\n\n/**\n * Given a 2-d paste column-oriented paste data and target cols, transform the data to omit\n * fields that shouldn't be pasted over and extract rich paste data if available.\n * When pasting into empty columns, also update them with options from the source column.\n * `data` is a column-oriented 2-d array of either\n *    plain strings or rich paste data returned by `tableUtil.parsePasteHtml`.\n * `fields` are the target fields being pasted into.\n */\nexport async function parsePasteForView(\n  data: Array<string | RichPasteObject>[], fields: ViewFieldRec[], gristDoc: GristDoc\n): Promise<BulkColValues> {\n  const result: BulkColValues = {};\n  const actions: UserAction[] = [];\n  const thisDocIdHash = getDocIdHash();\n\n  data.forEach((col, idx) => {\n    const field = fields[idx];\n    const colRec = field?.column();\n    if (!colRec || colRec.isRealFormula() || colRec.disableEditData()) {\n      return;\n    }\n\n    const parser = field.createValueParser() || (x => x);\n    let typeMatches = false;\n    if (col[0] && typeof col[0] === \"object\") {\n      const {colType, docIdHash, colRef} = col[0];\n      const targetType = colRec.type();\n      const docIdMatches = docIdHash === thisDocIdHash;\n      typeMatches = docIdMatches || !isFullReferencingType(colType || \"\");\n\n      if (targetType !== \"Any\") {\n        typeMatches = typeMatches && colType === targetType;\n      } else if (docIdMatches && colRef) {\n        // Try copying source column type and options into empty columns\n        const sourceColRec = gristDoc.docModel.columns.getRowModel(colRef);\n        const sourceType = sourceColRec.type();\n        // Check that the source column still exists, has a type other than Text, and the type hasn't changed.\n        // For Text columns, we don't copy over column info so that type guessing can still happen.\n        if (sourceColRec.getRowId() && sourceType !== \"Text\" && sourceType === colType) {\n          const colInfo: Partial<SchemaTypes[\"_grist_Tables_column\"]> = {\n            type: sourceType,\n            visibleCol: sourceColRec.visibleCol(),\n            // Conditional formatting rules are not copied right now, that's a bit more complicated\n            // and copying the formula may or may not be desirable.\n            widgetOptions: JSON.stringify(omit(sourceColRec.widgetOptionsJson(), \"rulesOptions\")),\n          };\n          actions.push(\n            [\"UpdateRecord\", \"_grist_Tables_column\", colRec.getRowId(), colInfo],\n            [\"MaybeCopyDisplayFormula\", colRef, colRec.getRowId()],\n          );\n        }\n      }\n    }\n\n    result[colRec.colId()] = col.map(v => {\n      if (v) {\n        if (typeof v === \"string\") {\n          return parser(v);\n        }\n        if (typeMatches && v.hasOwnProperty('rawValue')) {\n          return v.rawValue;\n        }\n        if (v.hasOwnProperty('displayValue')) {\n          return parser(v.displayValue);\n        }\n      }\n      return v;\n    });\n  });\n\n  if (actions.length) {\n    await gristDoc.docData.sendActions(actions);\n  }\n\n  return result;\n}\n","import { DocModel, ViewFieldRec } from \"app/client/models/DocModel\";\nimport { CursorPos } from 'app/plugin/GristAPI';\nimport BaseRowModel = require(\"app/client/models/BaseRowModel\");\n\n/**\n * Absolute position of a cell in a document\n */\nexport abstract class CellPosition {\n  public static equals(a: CellPosition, b: CellPosition) {\n    return a && b && a.colRef == b.colRef &&\n      a.sectionId == b.sectionId &&\n      a.rowId == b.rowId;\n  }\n  public static create(row: BaseRowModel, field: ViewFieldRec): CellPosition {\n    const rowId = row.id.peek();\n    const colRef = field.colRef.peek();\n    const sectionId = field.viewSection.peek().id.peek();\n    return { rowId, colRef, sectionId };\n  }\n  public sectionId: number;\n  public rowId: number | string;\n  public colRef: number;\n}\n\n/**\n * Converts cursor position to cell absolute positions. Return null if the conversion is not\n * possible (if cursor position doesn't have enough information)\n * @param position Cursor position\n * @param docModel Document model\n */\nexport function fromCursor(position: CursorPos, docModel: DocModel): CellPosition | null {\n  if (!position.sectionId || !position.rowId || position.fieldIndex == null) {\n    return null;\n  }\n\n  const section = docModel.viewSections.getRowModel(position.sectionId);\n  const colRef = section.viewFields().peek()[position.fieldIndex]?.colRef.peek();\n\n  const cursorPosition = {\n    rowId: position.rowId as (string | number), // TODO: cursor position is wrongly typed\n    colRef,\n    sectionId: position.sectionId,\n  };\n\n  return cursorPosition;\n}\n\n/**\n * Converts cell's absolute position to current cursor position.\n * @param position Cell's absolute position\n * @param docModel DocModel\n */\nexport function toCursor(position: CellPosition, docModel: DocModel): CursorPos {\n\n  // translate colRef to fieldIndex\n  const fieldIndex = docModel.viewSections.getRowModel(position.sectionId)\n    .viewFields().peek()\n    .findIndex(x => x.colRef.peek() == position.colRef);\n\n  const cursorPosition = {\n    rowId: position.rowId as number, // this is hack, as cursor position can accept string\n    fieldIndex,\n    sectionId: position.sectionId\n  };\n\n  return cursorPosition;\n}\n","import ko from 'knockout';\nimport type BaseView from 'app/client/components/BaseView';\nimport type {DataRowModel} from 'app/client/models/DataRowModel';\nimport {between} from 'app/common/gutil';\nimport {Disposable} from 'grainjs';\n\nexport const ROW = 'row';\nexport const COL = 'col';\nexport const CELL = 'cell';\nexport const NONE = '';\n\nexport type ElemType = 'row' | 'col' | 'cell' | '';\n\ninterface GridView extends BaseView {\n  domToRowModel(elem: Element, elemType: ElemType): DataRowModel;\n  domToColModel(elem: Element, elemType: ElemType): DataRowModel;\n}\n\nexport class CellSelector extends Disposable {\n  // row or col.start denotes the anchor/initial index of the select range.\n  // start is not necessarily smaller than end.\n  // IE: clicking on col 10 and dragging until the mouse is on col 5 will yield: start = 10, end = 5\n  public row = {\n    start: ko.observable(0),\n    end: ko.observable(0),\n    linePos: ko.observable('0px'),    // Used by GridView for dragging rows\n    dropIndex: ko.observable(-1),     // Used by GridView for dragging rows\n  };\n  public col =  {\n    start: ko.observable(0),\n    end: ko.observable(0),\n    linePos: ko.observable('0px'),    // Used by GridView for dragging columns\n    dropIndex: ko.observable(-1),     // Used by GridView for dragging columns\n  };\n  public currentSelectType = ko.observable<ElemType>(NONE);\n  public currentDragType = ko.observable<ElemType>(NONE);\n\n  constructor(public readonly view: GridView) {\n    super();\n    this.autoDispose(this.view.cursor.rowIndex.subscribe(() => this.setToCursor()));\n    this.autoDispose(this.view.cursor.fieldIndex.subscribe(() => this.setToCursor()));\n    this.setToCursor();\n  }\n\n  public setToCursor(elemType: ElemType = NONE) {\n    // Must check that the view contains cursor.rowIndex/cursor.fieldIndex\n    // in case it has changed.\n    if (this.view.cursor.rowIndex) {\n      this.row.start(this.view.cursor.rowIndex()!);\n      this.row.end(this.view.cursor.rowIndex()!);\n    }\n    if (this.view.cursor.fieldIndex) {\n      this.col.start(this.view.cursor.fieldIndex());\n      this.col.end(this.view.cursor.fieldIndex());\n    }\n    this.currentSelectType(elemType);\n  }\n\n  public containsCell(rowIndex: number, colIndex: number): boolean {\n    return this.containsCol(colIndex) && this.containsRow(rowIndex);\n  }\n\n  public containsRow(rowIndex: number): boolean {\n    return between(rowIndex, this.row.start(), this.row.end());\n  }\n\n  public containsCol(colIndex: number): boolean {\n    return between(colIndex, this.col.start(), this.col.end());\n  }\n\n  public isSelected(elem: Element, handlerName: ElemType) {\n    if (handlerName !== this.currentSelectType()) {\n      return false;\n    }\n\n    // TODO: this only works with view: GridView.\n    // But it seems like we only ever use selectors with gridview anyway\n    const row = this.view.domToRowModel(elem, handlerName);\n    const col = this.view.domToColModel(elem, handlerName);\n    switch (handlerName) {\n      case ROW:\n        return this.containsRow(row._index()!);\n      case COL:\n        return this.containsCol(col._index()!);\n      case CELL:\n        return this.containsCell(row._index()!, col._index()!);\n      default:\n        console.error('Given element is not a row, cell or column');\n        return false;\n    }\n  }\n\n  public isRowSelected(rowIndex: number): boolean {\n    return this.isCurrentSelectType(COL) || this.containsRow(rowIndex);\n  }\n\n  public isColSelected(colIndex: number): boolean {\n    return this.isCurrentSelectType(ROW) || this.containsCol(colIndex);\n  }\n\n  public isCellSelected(rowIndex: number, colIndex: number): boolean {\n    return this.isColSelected(colIndex) && this.isRowSelected(rowIndex);\n  }\n\n  public onlyCellSelected(rowIndex: number, colIndex: number): boolean {\n    return (this.row.start() === rowIndex && this.row.end() === rowIndex) &&\n      (this.col.start() === colIndex && this.col.end() === colIndex);\n  }\n\n  public isCurrentSelectType(elemType: ElemType): boolean {\n    return this._isCurrentType(this.currentSelectType(), elemType);\n  }\n\n  public isCurrentDragType(elemType: ElemType): boolean {\n    return this._isCurrentType(this.currentDragType(), elemType);\n  }\n\n  public colLower(): number {\n    return Math.min(this.col.start(), this.col.end());\n  }\n\n  public colUpper(): number {\n    return Math.max(this.col.start(), this.col.end());\n  }\n\n  public rowLower(): number {\n    return Math.min(this.row.start(), this.row.end());\n  }\n\n  public rowUpper(): number {\n    return Math.max(this.row.start(), this.row.end());\n  }\n\n  public colCount(): number {\n    return this.colUpper() - this.colLower() + 1;\n  }\n\n  public rowCount(): number {\n    return this.rowUpper() - this.rowLower() + 1;\n  }\n\n  public selectArea(rowStartIdx: number, colStartIdx: number, rowEndIdx: number, colEndIdx: number): void {\n    this.row.start(rowStartIdx);\n    this.col.start(colStartIdx);\n    this.row.end(rowEndIdx);\n    this.col.end(colEndIdx);\n    // Only select the area if it's not a single cell\n    if (this.colCount() > 1 || this.rowCount() > 1) {\n      this.currentSelectType(CELL);\n    }\n  }\n\n  private _isCurrentType(currentType: ElemType, elemType: ElemType): boolean {\n    console.assert([ROW, COL, CELL, NONE].indexOf(elemType) !== -1);\n    return currentType === elemType;\n  }\n}\n","import {GristDoc} from 'app/client/components/GristDoc';\nimport {reportError} from 'app/client/models/errors';\nimport {DisposableWithEvents} from 'app/common/DisposableWithEvents';\nimport {dom, Observable} from 'grainjs';\nimport {makeT} from 'app/client/lib/localization';\n\n// Rather than require the whole of highlight.js, require just the core with the one language we\n// need, to keep our bundle smaller and the build faster.\nconst hljs           = require('highlight.js/lib/core');\nhljs.registerLanguage('python', require('highlight.js/lib/languages/python'));\n\nconst t = makeT('CodeEditorPanel');\n\nexport class CodeEditorPanel extends DisposableWithEvents {\n  private _schema = Observable.create(this, '');\n  private _denied = Observable.create(this, false);\n  constructor(private _gristDoc: GristDoc) {\n    super();\n    this.listenTo(_gristDoc, 'schemaUpdateAction', this._onSchemaAction.bind(this));\n    this._onSchemaAction().catch(reportError); // Fetch the schema to initialize\n  }\n\n  public buildDom() {\n    // The tabIndex enables the element to gain focus, and the .clipboard class prevents the\n    // Clipboard module from re-grabbing it. This is a quick fix for the issue where clipboard\n    // interferes with text selection. TODO it should be possible for the Clipboard to never\n    // interfere with text selection even for un-focusable elements.\n    return dom('div.g-code-panel.clipboard',\n      {tabIndex: \"-1\"},\n      dom.maybe(this._denied, () => dom('div.g-code-panel-denied',\n        dom('h2', dom.text(t(\"Access denied\"))),\n        dom('div', dom.text(t(\"Code View is available only when you have full document access.\"))),\n      )),\n      dom.maybe(this._schema, (schema) => {\n        // The reason to scope and rebuild instead of using `kd.text(schema)` is because\n        // hljs.highlightBlock(elem) replaces `elem` with a whole new dom tree.\n        const elem = dom('code.g-code-viewer',\n          dom.text(schema),\n          dom.hide(true)\n        );\n        setTimeout(() => {\n          hljs.highlightBlock(elem);\n          dom.showElem(elem, true);\n        });\n        return elem;\n      })\n    );\n  }\n\n  private async _onSchemaAction() {\n    try {\n      const schema = await this._gristDoc.docComm.fetchTableSchema();\n      if (!this.isDisposed()) {\n        this._schema.set(schema);\n        this._denied.set(false);\n      }\n    } catch (err) {\n      if (!String(err).match(/Cannot view code/)) {\n        throw err;\n      }\n      if (!this.isDisposed()) {\n        this._schema.set('');\n        this._denied.set(true);\n      }\n    }\n  }\n}\n","import type {ViewFieldRec} from 'app/client/models/entities/ViewFieldRec';\nimport type {CellValue} from 'app/common/DocActions';\nimport type {TableData} from 'app/common/TableData';\nimport type {UIRowId} from 'app/plugin/GristAPI';\n\n/**\n * The CopySelection class is an abstraction for a subset of currently selected cells.\n * @param {Array} rowIds - row ids of the rows selected\n * @param {Array} fields - MetaRowModels of the selected view fields\n * @param {Object} options.rowStyle - an object that maps rowId to an object containing\n * style options. i.e. { 1: { height: 20px } }\n * @param {Object} options.colStyle - an object that maps colId to an object containing\n * style options.\n */\nexport class CopySelection {\n  public readonly colIds = this.fields.map(f => f.colId());\n  public readonly colRefs = this.fields.map(f => f.colRef());\n  public readonly displayColIds = this.fields.map(f => f.displayColModel().colId());\n  public readonly rowStyle: {[r: number]: object}|undefined;\n  public readonly colStyle: {[c: string]: object}|undefined;\n\n  public readonly columns: Array<{\n    colId: string,\n    fmtGetter: (rowId: UIRowId) => string,\n    rawGetter: (rowId: UIRowId) => CellValue|undefined,\n  }>;\n\n  constructor(tableData: TableData, public readonly rowIds: UIRowId[], public readonly fields: ViewFieldRec[],\n              options: {\n                rowStyle?: {[r: number]: object},\n                colStyle?: {[c: string]: object},\n              }\n  ) {\n    this.rowStyle = options.rowStyle;\n    this.colStyle = options.colStyle;\n    this.columns = fields.map((f, i) => {\n      const formatter = f.formatter();\n      const _fmtGetter = tableData.getRowPropFunc(this.displayColIds[i])!;\n      const _rawGetter = tableData.getRowPropFunc(this.colIds[i])!;\n\n      return {\n        colId: this.colIds[i],\n        fmtGetter: rowId => formatter.formatAny(_fmtGetter(rowId)),\n        rawGetter: rowId => _rawGetter(rowId)\n      };\n    });\n  }\n\n  public isCellSelected(rowId: UIRowId, colId: string): boolean {\n    return this.rowIds.includes(rowId) && this.colIds.includes(colId);\n  }\n\n  public onlyAddRowSelected(): boolean {\n    return this.rowIds.length === 1 && this.rowIds[0] === \"new\";\n  }\n}\n","import {GristDoc} from 'app/client/components/GristDoc';\nimport {getStorage} from 'app/client/lib/storage';\nimport {IDocPage, isViewDocPage, ViewDocPage} from 'app/common/gristUrls';\nimport {Disposable, Listener, Observable} from 'grainjs';\nimport {reportError} from 'app/client/models/errors';\nimport {CursorPos} from 'app/plugin/GristAPI';\n\n/**\n * Enriched cursor position with a view id\n */\nexport type ViewCursorPos = CursorPos & { viewId: ViewDocPage }\n\n/**\n * Component for GristDoc that allows it to keep track of the latest cursor position.\n * In case, when a document is reloaded abnormally, the latest cursor\n * position should be restored from a local storage.\n */\nexport class CursorMonitor extends Disposable {\n\n  // abstraction to work with local storage\n  private _store: StorageWrapper;\n  // key for storing position in the memory (docId + userId)\n  private _key: string;\n  // flag that tells if the position was already restored\n  // we track document's view change event, so we only want\n  // to react to that event once\n  private _restored = false;\n\n  constructor(\n    doc: GristDoc,\n    store?: Storage) {\n    super();\n\n    this._store = new StorageWrapper(store);\n\n    // Use document id and user id as a key for storage.\n    const userId = doc.app.topAppModel.appObs.get()?.currentUser?.id ?? null;\n    this._key = doc.docId() + userId;\n\n    /**\n     * When document loads last cursor position should be restored from local storage.\n     */\n    this._whenDocumentLoadsRestorePosition(doc);\n\n    /**\n     * When a cursor position changes, its value is stored in a local storage.\n     */\n    this._whenCursorHasChangedStoreInMemory(doc);\n  }\n\n  public clear() {\n    this._store.clear(this._key);\n  }\n\n  private _whenCursorHasChangedStoreInMemory(doc: GristDoc) {\n    // whenever current position changes, store it in the memory\n    this.autoDispose(doc.cursorPosition.addListener(pos => {\n      // if current position is not restored yet, don't change it\n      if (!this._restored) { return; }\n      // store position only when we have valid rowId\n      // for some views (like CustomView) cursor position might not reflect actual row\n      if (pos && pos.rowId !== undefined) { this._storePosition(pos); }\n    }));\n  }\n\n  private _whenDocumentLoadsRestorePosition(doc: GristDoc) {\n    // if doc was opened with a hash link, don't restore last position\n    if (doc.hasCustomNav.get()) {\n      return this._abortRestore();\n    }\n\n    // if we are on raw data view, we need to set the position manually\n    // as currentView observable will not be changed.\n    if (doc.activeViewId.get() === 'data') {\n      this._doRestorePosition(doc).catch((e) => reportError(e));\n      return;\n    }\n\n    // on view shown\n    this.autoDispose(oneTimeListener(doc.currentView, async () => {\n      await this._doRestorePosition(doc);\n    }));\n  }\n\n  private async _doRestorePosition(doc: GristDoc) {\n    // if the position was restored for this document do nothing\n    if (this._restored) { return; }\n    // set that we already restored the position, as some view is shown to the user\n    this._restored = true;\n    const viewId = doc.activeViewId.get();\n    if (!isViewDocPage(viewId)) {\n      return this._abortRestore();\n    }\n    const position = this._readPosition(viewId);\n    if (position) {\n      // Don't restore position if this is a collapsed section.\n      const collapsed = doc.viewModel.activeCollapsedSections.peek();\n      if (position.sectionId && collapsed.includes(position.sectionId)) {\n        return;\n      }\n      // Ignore error with finding desired cell.\n      await doc.recursiveMoveToCursorPos(position, true, true);\n    }\n  }\n\n  private _abortRestore() {\n    this.clear();\n    this._restored = true;\n  }\n\n  private _storePosition(pos: ViewCursorPos) {\n    this._store.update(this._key, pos);\n  }\n\n  private _readPosition(view: IDocPage) {\n    const lastPosition = this._store.read(this._key);\n    this._store.clear(this._key);\n    if (lastPosition && lastPosition.position.viewId == view) {\n      return lastPosition.position;\n    }\n    return null;\n  }\n}\n\n// Internal implementations for working with local storage\nclass StorageWrapper {\n\n  constructor(private _storage = getStorage()) {\n\n  }\n\n  public update(docId: string, position: ViewCursorPos): void {\n    try {\n      const storage = this._storage;\n      const data = { docId, position, timestamp: Date.now() };\n      storage.setItem(this._key(docId), JSON.stringify(data));\n    } catch (e) {\n      console.error(\"Can't store latest position in storage. Detail error \" + e.message);\n    }\n  }\n\n  public clear(docId: string,): void {\n    const storage = this._storage;\n    storage.removeItem(this._key(docId));\n  }\n\n  public read(docId: string): { docId: string; position: ViewCursorPos; } | undefined {\n    const storage = this._storage;\n    const result = storage.getItem(this._key(docId));\n    if (!result) { return undefined; }\n    return JSON.parse(result);\n  }\n\n  protected _key(docId: string) {\n    return `grist-last-position-${docId}`;\n  }\n}\n\nexport function oneTimeListener<T>(obs: Observable<T>, handler: (value: T) => any) {\n  let listener: Listener|null = obs.addListener((value) => {\n    setImmediate(dispose);\n    handler(value);\n  });\n  function dispose() {\n    if (listener) {\n      listener.dispose();\n      listener = null;\n    }\n  }\n  return { dispose };\n}\n","import {AccessLevel} from \"app/common/CustomWidget\";\nimport {ViewSectionRec} from \"app/client/models/entities/ViewSectionRec\";\nimport {CustomView} from \"app/client/components/CustomView\";\nimport {GristDoc} from \"app/client/components/GristDoc\";\n\n//Abstract class for more future inheritances\nabstract class CustomAttachedView extends CustomView {\n  public override create(gristDoc: GristDoc, viewSectionModel: ViewSectionRec) {\n    super.create(gristDoc, viewSectionModel);\n    void viewSectionModel.customDef.access.setAndSave(AccessLevel.full);\n\n    const widgetsApi = this.gristDoc.app.topAppModel.api;\n    widgetsApi.getWidgets().then(async result=>{\n      const widget = result.find(w=>w.name == this.getWidgetName());\n      if(widget) {\n        await this.customDef.url.setAndSave(widget.url);\n      }\n    }).catch(()=>{\n      //do nothing\n    });\n  }\n\n  protected abstract getWidgetName(): string;\n\n}\n\nexport class CustomCalendarView extends CustomAttachedView {\n  protected getWidgetName(): string {\n    return \"Calendar\";\n  }\n}\n","import BaseView from 'app/client/components/BaseView';\nimport * as commands from 'app/client/components/commands';\nimport {Cursor} from 'app/client/components/Cursor';\nimport {GristDoc} from 'app/client/components/GristDoc';\nimport {\n  ConfigNotifier,\n  CustomSectionAPIImpl,\n  GristDocAPIImpl,\n  GristViewImpl,\n  MinimumLevel,\n  RecordNotifier,\n  TableNotifier,\n  WidgetAPIImpl,\n  WidgetFrame\n} from 'app/client/components/WidgetFrame';\nimport {CustomSectionElement, ViewProcess} from 'app/client/lib/CustomSectionElement';\nimport {Disposable} from 'app/client/lib/dispose';\nimport dom from 'app/client/lib/dom';\nimport * as kd from 'app/client/lib/koDom';\nimport DataTableModel from 'app/client/models/DataTableModel';\nimport {ViewSectionRec} from 'app/client/models/DocModel';\nimport {CustomViewSectionDef} from 'app/client/models/entities/ViewSectionRec';\nimport {UserError} from 'app/client/models/errors';\nimport {SortedRowSet} from 'app/client/models/rowset';\nimport {closeRegisteredMenu} from 'app/client/ui2018/menus';\nimport {AccessLevel} from 'app/common/CustomWidget';\nimport {PluginInstance} from 'app/common/PluginInstance';\nimport {getGristConfig} from 'app/common/urlUtils';\nimport {Events as BackboneEvents} from 'backbone';\nimport {dom as grains} from 'grainjs';\nimport * as ko from 'knockout';\nimport defaults = require('lodash/defaults');\n\n\n/**\n * CustomView components displays arbitrary html. There are two modes available, in the \"url\" mode\n * the content is hosted by a third-party (for instance a github page), as opposed to the \"plugin\"\n * mode where the contents is provided by a plugin. In both cases the content is rendered safely\n * within an iframe (or webview if running electron). Configuration of the component is done within\n * the view config tab in the side pane. In \"plugin\" mode, shows notification if either the plugin\n * of the section could not be found.\n */\nexport class CustomView extends Disposable {\n\n  private static _commands = {\n    async openWidgetConfiguration(this: CustomView) {\n      if (!this.isDisposed() && !this._frame?.isDisposed()) {\n        try {\n          await this._frame.editOptions();\n        } catch(err) {\n          if (err.message === \"Unknown interface\") {\n            throw new UserError(\"Custom widget doesn't expose configuration screen.\");\n          } else {\n            throw err;\n          }\n        }\n      }\n    },\n  };\n  /**\n   * The HTMLElement embedding the content.\n   */\n  public viewPane: HTMLElement;\n\n  // viewSection, sortedRows, tableModel, gristDoc, and cursor are inherited from BaseView\n  protected viewSection: ViewSectionRec;\n  protected sortedRows: SortedRowSet;\n  protected tableModel: DataTableModel;\n  protected gristDoc: GristDoc;\n  protected cursor: Cursor;\n\n  protected customDef: CustomViewSectionDef;\n\n  // state of the component\n  private _foundPlugin: ko.Observable<boolean>;\n  private _foundSection: ko.Observable<boolean>;\n  // Note the invariant: this._customSection != undefined if this._foundSection() == true\n  private _customSection: ViewProcess|undefined;\n  private _pluginInstance: PluginInstance|undefined;\n\n  private _frame: WidgetFrame;  // plugin frame (holding external page)\n\n\n  public create(gristDoc: GristDoc, viewSectionModel: ViewSectionRec) {\n    BaseView.call(this as any, gristDoc, viewSectionModel, { 'addNewRow': true });\n\n    this.customDef =  this.viewSection.customDef;\n\n    this.autoDisposeCallback(() => {\n      if (this._customSection) {\n        this._customSection.dispose();\n      }\n    });\n    this._foundPlugin = ko.observable(false);\n    this._foundSection = ko.observable(false);\n    // Ensure that selecting another section in same plugin update the view.\n    this._foundSection.extend({notify: 'always'});\n\n    this.autoDispose(this.customDef.pluginId.subscribe(this._updatePluginInstance, this));\n    this.autoDispose(this.customDef.sectionId.subscribe(this._updateCustomSection, this));\n    this.autoDispose(commands.createGroup(CustomView._commands, this, this.viewSection.hasFocus));\n\n    this.viewPane = this.autoDispose(this._buildDom());\n    this._updatePluginInstance();\n  }\n\n\n  public async triggerPrint() {\n    if (!this.isDisposed() && this._frame) {\n      return await this._frame.callRemote('print');\n    }\n  }\n\n  protected getEmptyWidgetPage(): string {\n    return new URL(\"custom-widget.html\", getGristConfig().homeUrl!).href;\n  }\n  /**\n   * Find a plugin instance that matches the plugin id, update the `found` observables, then tries to\n   * find a matching section.\n   */\n  private _updatePluginInstance() {\n\n    const pluginId = this.customDef.pluginId();\n    this._pluginInstance = this.gristDoc.docPluginManager.pluginsList.find(p => p.definition.id === pluginId);\n\n    if (this._pluginInstance) {\n      this._foundPlugin(true);\n    } else {\n      this._foundPlugin(false);\n      this._foundSection(false);\n    }\n    this._updateCustomSection();\n  }\n\n  /**\n   * If a plugin was found, find a custom section matching the section id and update the `found`\n   * observables.\n   */\n  private _updateCustomSection() {\n\n    if (!this._pluginInstance) { return; }\n\n    const sectionId = this.customDef.sectionId();\n    this._customSection = CustomSectionElement.find(this._pluginInstance, sectionId);\n\n    if (this._customSection) {\n      const el = this._customSection.element;\n      el.classList.add(\"flexitem\");\n      this._foundSection(true);\n    } else {\n      this._foundSection(false);\n    }\n  }\n\n  private _buildDom() {\n    const {mode, url, access} = this.customDef;\n    const showPlugin = ko.pureComputed(() => this.customDef.mode() === \"plugin\");\n\n    // When both plugin and section are not found, let's show only plugin notification.\n    const showPluginNotification = ko.pureComputed(() => showPlugin() && !this._foundPlugin());\n    const showSectionNotification = ko.pureComputed(() => showPlugin() && this._foundPlugin() && !this._foundSection());\n    const showPluginContent = ko.pureComputed(() => showPlugin() && this._foundSection())\n        // For the view to update when switching from one section to another one, the computed\n        // observable must always notify.\n        .extend({notify: 'always'});\n    return dom('div.flexauto.flexvbox.custom_view_container',\n      dom.autoDispose(showPlugin),\n      dom.autoDispose(showPluginNotification),\n      dom.autoDispose(showSectionNotification),\n      dom.autoDispose(showPluginContent),\n      // todo: should display content in webview when running electron\n      kd.scope(() => [mode(), url(), access()], ([_mode, _url, _access]: string[]) =>\n        _mode === \"url\" ? this._buildIFrame(_url, (_access || AccessLevel.none) as AccessLevel) : null),\n      kd.maybe(showPluginNotification, () => buildNotification('Plugin ',\n        dom('strong', kd.text(this.customDef.pluginId)), ' was not found',\n        dom.testId('customView_notification_plugin')\n      )),\n      kd.maybe(showSectionNotification, () => buildNotification('Section ',\n        dom('strong', kd.text(this.customDef.sectionId)), ' was not found in plugin ',\n        dom('strong', kd.text(this.customDef.pluginId)),\n        dom.testId('customView_notification_section')\n      )),\n      // When showPluginContent() is true then _foundSection() is also and _customSection is not\n      // undefined (invariant).\n      kd.maybe(showPluginContent, () => this._customSection!.element)\n    );\n  }\n\n  private _promptAccess(access: AccessLevel) {\n    if (this.gristDoc.isReadonly.get()) {\n      return;\n    }\n    this.viewSection.desiredAccessLevel(access);\n  }\n\n  private _buildIFrame(baseUrl: string, access: AccessLevel) {\n    return grains.create(WidgetFrame, {\n      url: baseUrl || this.getEmptyWidgetPage(),\n      access,\n      readonly: this.gristDoc.isReadonly.get(),\n      configure: (frame) => {\n        this._frame = frame;\n        // Need to cast myself to a BaseView\n        const view = this as unknown as BaseView;\n        frame.exposeAPI(\n          \"GristDocAPI\",\n          new GristDocAPIImpl(this.gristDoc),\n          GristDocAPIImpl.defaultAccess);\n        frame.exposeAPI(\n          \"GristView\",\n          new GristViewImpl(view), new MinimumLevel(AccessLevel.read_table));\n        frame.exposeAPI(\n          \"CustomSectionAPI\",\n          new CustomSectionAPIImpl(\n            this.viewSection,\n            access,\n            this._promptAccess.bind(this)),\n          new MinimumLevel(AccessLevel.none));\n        frame.useEvents(RecordNotifier.create(frame, view), new MinimumLevel(AccessLevel.read_table));\n        frame.useEvents(TableNotifier.create(frame, view), new MinimumLevel(AccessLevel.read_table));\n        frame.exposeAPI(\n          \"WidgetAPI\",\n          new WidgetAPIImpl(this.viewSection),\n          new MinimumLevel(AccessLevel.none)); // none access is enough\n        frame.useEvents(\n          ConfigNotifier.create(frame, this.viewSection, access),\n          new MinimumLevel(AccessLevel.none)); // none access is enough\n      },\n      onElem: (iframe) => onFrameFocus(iframe, () => {\n        if (this.isDisposed()) { return; }\n        if (!this.viewSection.isDisposed() && !this.viewSection.hasFocus()) {\n          this.viewSection.hasFocus(true);\n        }\n        // allow menus to close if any\n        closeRegisteredMenu();\n      })\n    });\n\n  }\n}\n\n// Getting an ES6 class to work with old-style multiple base classes takes a little hacking. Credits: ./ChartView.ts\ndefaults(CustomView.prototype, BaseView.prototype);\nObject.assign(CustomView.prototype, BackboneEvents);\n\n\n// helper to build the notification's frame.\nfunction buildNotification(...args: any[]) {\n  return dom('div.custom_view_notification.bg-warning', dom('p', ...args));\n}\n\n/**\n * There is no way to detect if the frame was clicked. This causes a bug, when\n * there are 2 custom widgets on a page then user can't switch focus from 1 section\n * to another. The only solution is too pool and test if the iframe is an active element\n * in the dom.\n * (See https://stackoverflow.com/questions/2381336/detect-click-into-iframe-using-javascript).\n *\n * For a single iframe, it will gain focus through a hack in ViewLayout.ts.\n */\nfunction onFrameFocus(frame: HTMLIFrameElement, handler: () => void) {\n  let timer: NodeJS.Timeout|null = null;\n  // Flag that will prevent mouseenter event to be fired\n  // after dom is disposed. This shouldn't happen.\n  let disposed = false;\n  // Stops pooling.\n  function stop() {\n    if (timer) {\n      clearInterval(timer);\n      timer = null;\n    }\n  }\n  return grains.update(frame,\n    grains.on(\"mouseenter\", () => {\n      // Make sure we weren't dispose (should not happen)\n      if (disposed) { return; }\n      // If frame already has focus, do nothing.\n      // NOTE: Frame will always be an active element from our perspective,\n      // even if the focus is somewhere inside the iframe.\n      if (document.activeElement === frame) { return; }\n      // Start pooling for frame focus.\n      timer = setInterval(() => {\n        if (document.activeElement === frame) {\n          try {\n            handler();\n          } finally {\n            // Stop checking, we will start again after next mouseenter.\n            stop();\n          }\n        }\n      }, 70); // 70 is enough to make it look like a click.\n    }),\n    grains.on(\"mouseleave\", stop),\n    grains.onDispose(() => {\n      stop();\n      disposed = true;\n    })\n  );\n}\n","import {GristDoc} from 'app/client/components/GristDoc';\nimport {copyToClipboard} from 'app/client/lib/clipboardUtils';\nimport {setTestState} from 'app/client/lib/testState';\nimport {TableRec} from 'app/client/models/DocModel';\nimport {docListHeader, docMenuTrigger} from 'app/client/ui/DocMenuCss';\nimport {duplicateTable, DuplicateTableResponse} from 'app/client/ui/DuplicateTable';\nimport {showTransientTooltip} from 'app/client/ui/tooltips';\nimport {buildTableName} from 'app/client/ui/WidgetTitle';\nimport * as css from 'app/client/ui2018/cssVars';\nimport {icon} from 'app/client/ui2018/icons';\nimport {loadingDots} from 'app/client/ui2018/loaders';\nimport {menu, menuItem, menuText} from 'app/client/ui2018/menus';\nimport {confirmModal} from 'app/client/ui2018/modals';\nimport {Computed, Disposable, dom, fromKo, makeTestId, Observable, styled} from 'grainjs';\nimport {makeT} from 'app/client/lib/localization';\n\nconst testId = makeTestId('test-raw-data-');\n\nconst t = makeT('DataTables');\n\nexport class DataTables extends Disposable {\n  private _tables: Observable<TableRec[]>;\n\n  private readonly _rowCount = Computed.create(\n    this, this._gristDoc.docPageModel.currentDocUsage, (_use, usage) => {\n      return usage?.rowCount;\n    }\n  );\n\n  // TODO: Update this whenever the rest of the UI is internationalized.\n  private readonly _rowCountFormatter = new Intl.NumberFormat('en-US');\n\n  constructor(private _gristDoc: GristDoc) {\n    super();\n    this._tables = Computed.create(this, use => {\n      const dataTables = use(_gristDoc.docModel.rawDataTables.getObservable());\n      const summaryTables = use(_gristDoc.docModel.rawSummaryTables.getObservable());\n      // Remove tables that we don't have access to. ACL will remove tableId from those tables.\n      return [...dataTables, ...summaryTables].filter(table => Boolean(use(table.tableId)));\n    });\n  }\n\n  public buildDom() {\n    return container(\n      cssTableList(\n        /***************  List section **********/\n        testId('list'),\n        cssHeader(t(\"Raw Data Tables\")),\n        cssList(\n          dom.forEach(this._tables, tableRec =>\n            cssItem(\n              testId('table'),\n              cssLeft(\n                dom.domComputed((use) => cssTableTypeIcon(\n                  use(tableRec.summarySourceTable) !== 0 ? 'PivotLight' : 'TypeTable',\n                  testId(`table-id-${use(tableRec.tableId)}`)\n                )),\n              ),\n              cssMiddle(\n                cssTitleRow(cssTableTitle(this._tableTitle(tableRec), testId('table-title'))),\n                cssDetailsRow(\n                  cssTableIdWrapper(cssHoverWrapper(\n                    cssUpperCase(\"Table ID: \"),\n                    cssTableId(\n                      testId('table-id'),\n                      dom.text(tableRec.tableId),\n                    ),\n                    { title : t(\"Click to copy\") },\n                    dom.on('click', async (e, d) => {\n                      e.stopImmediatePropagation();\n                      e.preventDefault();\n                      showTransientTooltip(d, t(\"Table ID copied to clipboard\"), {\n                        key: 'copy-table-id'\n                      });\n                      await copyToClipboard(tableRec.tableId.peek());\n                      setTestState({clipboard: tableRec.tableId.peek()});\n                    })\n                  )),\n                  this._tableRows(tableRec),\n                ),\n              ),\n              cssRight(\n                docMenuTrigger(\n                  testId('table-menu'),\n                  icon('Dots'),\n                  menu(() => this._menuItems(tableRec), {placement: 'bottom-start'}),\n                  dom.on('click', (ev) => { ev.stopPropagation(); ev.preventDefault(); }),\n                )\n              ),\n              dom.on('click', () => {\n                const sectionId = tableRec.rawViewSection.peek().getRowId();\n                if (!sectionId) {\n                  throw new Error(`Table ${tableRec.tableId.peek()} doesn't have a raw view section.`);\n                }\n                this._gristDoc.viewModel.activeSectionId(sectionId);\n              })\n            )\n          )\n        ),\n      ),\n    );\n  }\n\n  private _tableTitle(table: TableRec) {\n    return dom.domComputed((use) => {\n      const rawViewSectionRef = use(fromKo(table.rawViewSectionRef));\n      const isSummaryTable = use(table.summarySourceTable) !== 0;\n      if (!rawViewSectionRef || isSummaryTable) {\n        // Some very old documents might not have a rawViewSection, and raw summary\n        // tables can't currently be renamed.\n        const tableName = [\n          use(table.tableNameDef), isSummaryTable ? use(table.groupDesc) : ''\n        ].filter(p => Boolean(p?.trim())).join(' ');\n        return cssTableName(tableName);\n      } else {\n        return dom('div', // to disable flex grow in the widget\n          dom.domComputed(fromKo(table.rawViewSection), vs =>\n            buildTableName(vs, testId('widget-title'))\n          )\n        );\n      }\n    });\n  }\n\n  private _menuItems(table: TableRec) {\n    const {isReadonly, docModel} = this._gristDoc;\n    return [\n      menuItem(\n        () => this._duplicateTable(table),\n        t(\"Duplicate Table\"),\n        testId('menu-duplicate-table'),\n        dom.cls('disabled', use =>\n          use(isReadonly) ||\n          use(table.isHidden) ||\n          use(table.summarySourceTable) !== 0\n        ),\n      ),\n      menuItem(\n        () => this._removeTable(table),\n        'Remove',\n        testId('menu-remove'),\n        dom.cls('disabled', use => use(isReadonly) || (\n          // Can't delete last visible table, unless it is a hidden table.\n          use(docModel.visibleTables.getObservable()).length <= 1 && !use(table.isHidden)\n        ))\n      ),\n      dom.maybe(isReadonly, () => menuText(t(\"You do not have edit access to this document\"))),\n    ];\n  }\n\n  private _duplicateTable(r: TableRec) {\n    duplicateTable(this._gristDoc, r.tableId(), {\n      onSuccess: ({raw_section_id}: DuplicateTableResponse) =>\n        this._gristDoc.viewModel.activeSectionId(raw_section_id),\n    });\n  }\n\n  private _removeTable(r: TableRec) {\n    const {docModel} = this._gristDoc;\n    function doRemove() {\n      return docModel.docData.sendAction(['RemoveTable', r.tableId()]);\n    }\n    confirmModal(t(\n      \"Delete {{formattedTableName}} data, and remove it from all pages?\",\n      {formattedTableName : r.formattedTableName()}\n    ), 'Delete', doRemove);\n  }\n\n  private _tableRows(table: TableRec) {\n    return dom.maybe(this._rowCount, (rowCounts) => {\n      if (rowCounts === 'hidden') { return null; }\n\n      return cssTableRowsWrapper(\n        cssUpperCase(\"Rows: \"),\n        rowCounts === 'pending' ? cssLoadingDots() : cssTableRows(\n          rowCounts[table.getRowId()] !== undefined\n            ? this._rowCountFormatter.format(rowCounts[table.getRowId()])\n            : '',\n          testId('table-rows'),\n        )\n      );\n    });\n  }\n}\n\nconst container = styled('div', `\n  overflow-y: auto;\n  position: relative;\n`);\n\nconst cssHeader = styled(docListHeader, `\n  display: inline-block;\n`);\n\nconst cssList = styled('div', `\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n`);\n\nconst cssItem = styled('div', `\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n  border-radius: 3px;\n  width: 100%;\n  height: calc(1em * 56/13); /* 56px for 13px font */\n  max-width: 750px;\n  border: 1px solid ${css.theme.rawDataTableBorder};\n  &:hover {\n    border-color: ${css.theme.rawDataTableBorderHover};\n  }\n`);\n\n// Holds icon in top left corner\nconst cssLeft = styled('div', `\n  padding-top: 11px;\n  padding-left: 12px;\n  margin-right: 8px;\n  align-self: flex-start;\n  display: flex;\n  flex: none;\n`);\n\nconst cssMiddle = styled('div', `\n  flex-grow: 1;\n  min-width: 0px;\n  display: flex;\n  flex-wrap: wrap;\n  margin-top: 6px;\n  margin-bottom: 4px;\n`);\n\nconst cssTitleRow = styled('div', `\n  min-width: 100%;\n  margin-right: 4px;\n`);\n\nconst cssDetailsRow = styled('div', `\n  min-width: 100%;\n  display: flex;\n  gap: 8px;\n`);\n\n\n// Holds dots menu (which is 24px x 24px, but has its own 4px right margin)\nconst cssRight = styled('div', `\n  padding-right: 8px;\n  margin-left: 8px;\n  align-self: center;\n  display: flex;\n  flex: none;\n`);\n\nconst cssTableTypeIcon = styled(icon, `\n  --icon-color: ${css.theme.accentIcon};\n`);\n\nconst cssLine = styled('span', `\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  overflow: hidden;\n`);\n\nconst cssTableIdWrapper = styled('div', `\n  display: flex;\n  flex-grow: 1;\n  min-width: 0;\n`);\n\nconst cssTableRowsWrapper = styled('div', `\n  display: flex;\n  flex-shrink: 0;\n  min-width: 100px;\n  overflow: hidden;\n  align-items: baseline;\n  color: ${css.theme.lightText};\n  line-height: 18px;\n  padding: 0px 2px;\n`);\n\nconst cssHoverWrapper = styled('div', `\n  display: flex;\n  overflow: hidden;\n  cursor: default;\n  align-items: baseline;\n  color: ${css.theme.lightText};\n  transition: background 0.05s;\n  padding: 0px 2px;\n  line-height: 18px;\n  &:hover {\n    background: ${css.theme.lightHover};\n  }\n`);\n\nconst cssTableId = styled(cssLine, `\n  font-size: ${css.vars.smallFontSize};\n`);\n\nconst cssTableRows = cssTableId;\n\nconst cssTableTitle = styled('div', `\n  color: ${css.theme.text};\n  white-space: nowrap;\n`);\n\nconst cssUpperCase = styled('span', `\n  text-transform: uppercase;\n  letter-spacing: 0.81px;\n  font-weight: 500;\n  font-size: 9px; /* xxsmallFontSize is to small */\n  margin-right: 2px;\n  flex: 0;\n  white-space: nowrap;\n`);\n\nconst cssTableList = styled('div', `\n  overflow-y: auto;\n  position: relative;\n  margin-bottom: 56px;\n`);\n\nconst cssLoadingDots = styled(loadingDots, `\n  --dot-size: 6px;\n`);\n\nconst cssTableName = styled('span', `\n  color: ${css.theme.text};\n`);\n","import {Comm} from 'app/client/components/Comm';\nimport {reportError, reportMessage} from 'app/client/models/errors';\nimport {Notifier} from 'app/client/models/NotifyModel';\nimport {ActiveDocAPI, ApplyUAOptions, ApplyUAResult} from 'app/common/ActiveDocAPI';\nimport {CommMessage} from 'app/common/CommTypes';\nimport {UserAction} from 'app/common/DocActions';\nimport {OpenLocalDocResult} from 'app/common/DocListAPI';\nimport {docUrl} from 'app/common/urlUtils';\nimport {Events as BackboneEvents} from 'backbone';\nimport {Disposable, Emitter} from 'grainjs';\n\nconst SLOW_NOTIFICATION_TIMEOUT_MS = 1000; // applies to user actions only\n\n/**\n * The type of data.methods object created by openDoc() in app/client/components/Comm.js.\n * This is used in much of client-side code, and exposed firstly as GristDoc.docComm.\n */\nexport class DocComm extends Disposable implements ActiveDocAPI {\n  // These are all the methods of ActiveDocAPI. Listing them explicitly lets typescript verify\n  // that we haven't missed any.\n  // closeDoc has a special implementation below.\n  public fetchTable = this._wrapMethod(\"fetchTable\");\n  public fetchTableSchema = this._wrapMethod(\"fetchTableSchema\");\n  public useQuerySet = this._wrapMethod(\"useQuerySet\");\n  public disposeQuerySet = this._wrapMethod(\"disposeQuerySet\");\n  // applyUserActions has a special implementation below.\n  public applyUserActionsById = this._wrapMethod(\"applyUserActionsById\");\n  public importFiles = this._wrapMethod(\"importFiles\");\n  public finishImportFiles = this._wrapMethod(\"finishImportFiles\");\n  public cancelImportFiles = this._wrapMethod(\"cancelImportFiles\");\n  public generateImportDiff = this._wrapMethod(\"generateImportDiff\");\n  public addAttachments = this._wrapMethod(\"addAttachments\");\n  public findColFromValues = this._wrapMethod(\"findColFromValues\");\n  public getFormulaError = this._wrapMethod(\"getFormulaError\");\n  public fetchURL = this._wrapMethod(\"fetchURL\");\n  public autocomplete = this._wrapMethod(\"autocomplete\");\n  public removeInstanceFromDoc = this._wrapMethod(\"removeInstanceFromDoc\");\n  public getActionSummaries = this._wrapMethod(\"getActionSummaries\");\n  public startBundleUserActions = this._wrapMethod(\"startBundleUserActions\");\n  public stopBundleUserActions = this._wrapMethod(\"stopBundleUserActions\");\n  public forwardPluginRpc = this._wrapMethod(\"forwardPluginRpc\");\n  public reloadPlugins = this._wrapMethod(\"reloadPlugins\");\n  public reloadDoc = this._wrapMethod(\"reloadDoc\");\n  public fork = this._wrapMethod(\"fork\");\n  public checkAclFormula = this._wrapMethod(\"checkAclFormula\");\n  public getAclResources = this._wrapMethod(\"getAclResources\");\n  public waitForInitialization = this._wrapMethod(\"waitForInitialization\");\n  public getUsersForViewAs = this._wrapMethod(\"getUsersForViewAs\");\n  public getAccessToken = this._wrapMethod(\"getAccessToken\");\n\n  public changeUrlIdEmitter = this.autoDispose(new Emitter());\n\n  // We save the clientId that was used when opening the doc. If it changes (e.g. reconnecting to\n  // another server), it would be incorrect to use the new clientId without re-opening the doc\n  // (which is handled by App.ts). This way, Comm can protect against mismatched clientIds.\n  private _clientId: string;\n  private _docFD: number;\n  private _forkPromise: Promise<void>|null = null;\n  private _isClosed: boolean = false;\n  private listenTo: BackboneEvents['listenTo'];  // set by Backbone\n\n  constructor(private _comm: Comm, openResponse: OpenLocalDocResult, private _docId: string,\n              private _notifier: Notifier) {\n    super();\n    this._setOpenResponse(openResponse);\n    // If *this* doc is shutdown forcibly (e.g. via reloadDoc call), mark it as closed, so we\n    // don't attempt to close it again.\n    this.listenTo(_comm, 'docShutdown', (m: CommMessage) => {\n      if (this.isActionFromThisDoc(m)) { this._isClosed = true; }\n    });\n    this.onDispose(async () => {\n      try {\n        await this._shutdown();\n      } catch (e) {\n        if (!String(e).match(/GristWSConnection disposed/)) {\n          reportError(e);\n        }\n      }\n    });\n  }\n\n  // Returns the URL params that identifying this open document to the DocWorker\n  // (used e.g. in attachment and download URLs).\n  public getUrlParams(): {clientId: string, docFD: number} {\n    return { clientId: this._clientId, docFD: this._docFD };\n  }\n\n  // Completes a path by adding the correct worker host and prefix for this document.\n  // E.g. \"/uploads\" becomes \"https://host.name/v/ver/o/org/uploads\"\n  public docUrl(path: string) {\n    return docUrl(this.docWorkerUrl, path);\n  }\n\n  // Returns a base url to the worker serving the current document, e.g.\n  // \"https://host.name/v/ver/\"\n  public get docWorkerUrl() {\n    return this._comm.getDocWorkerUrl(this._docId);\n  }\n\n  // Returns whether a message received by this Comm object is for the current doc.\n  public isActionFromThisDoc(message: CommMessage): boolean {\n    return message.docFD === this._docFD;\n  }\n\n  /**\n   * Overrides applyUserActions() method to also add the UserActions to a list, for use in tests.\n   */\n  public applyUserActions(actions: UserAction[], options?: ApplyUAOptions): Promise<ApplyUAResult> {\n    this._comm.addUserActions(actions);\n    return this._callMethod('applyUserActions', actions, options);\n  }\n\n  /**\n   * Overrides closeDoc() method to call to Comm directly, without triggering forking logic.\n   * This is important in particular since it may be called while forking.\n   */\n  public closeDoc(): Promise<void> {\n    return this._callDocMethod('closeDoc');\n  }\n\n  /**\n   * Forks the document, making sure the url gets updated, and holding any actions\n   * until the fork is complete.  If a fork has already been started/completed, this\n   * does nothing.\n   */\n  public async forkAndUpdateUrl(): Promise<void> {\n    await (this._forkPromise || (this._forkPromise = this._doForkDoc()));\n  }\n\n  // Clean up connection after closing doc.\n  private async _shutdown() {\n    console.log(`DocComm: shutdown clientId ${this._clientId} docFD ${this._docFD}`);\n    try {\n      // Close the document to unsubscribe from further updates on it.\n      if (!this._isClosed) {\n        await this.closeDoc();\n      }\n    } catch (err) {\n      console.warn(`DocComm: closeDoc failed: ${err}`);\n    } finally {\n      if (!this._comm.isDisposed()) {\n        this._comm.releaseDocConnection(this._docId);\n      }\n    }\n  }\n\n  /**\n   * Store important information from the response to openDoc, and\n   * ensure we have a connection to a docWorker for the document\n   * identified by the current docId.  the caller of _setOpenResponse\n   * should call _releaseDocConnection for any previous docId.\n   */\n  private _setOpenResponse(openResponse: OpenLocalDocResult) {\n    this._docFD = openResponse.docFD;\n    this._clientId = openResponse.clientId;\n    this._comm.useDocConnection(this._docId);\n  }\n\n  private _wrapMethod<Name extends keyof ActiveDocAPI>(name: Name): ActiveDocAPI[Name] {\n    return this._callMethod.bind(this, name);\n  }\n\n  private async _callMethod(name: keyof ActiveDocAPI, ...args: any[]): Promise<any> {\n    return this._notifier.slowNotification(this._doCallMethod(name, ...args), SLOW_NOTIFICATION_TIMEOUT_MS);\n  }\n\n  private async _doCallMethod(name: keyof ActiveDocAPI, ...args: any[]): Promise<any> {\n    if (this._forkPromise) {\n      // If a fork is pending or has finished, call the method after waiting for it.\n      // (If we've gone through a fork, we will not consider forking again.)\n      await this._forkPromise;\n      return this._callDocMethod(name, ...args);\n    }\n    try {\n      return await this._callDocMethod(name, ...args);\n    } catch (err) {\n      // TODO should be the suggested fork id and fork user.\n      if (err.shouldFork) {\n        // If the server suggests to fork, do it now, or wait for the fork already pending.\n        await this.forkAndUpdateUrl();\n        return this._callDocMethod(name, ...args);\n      }\n      throw err;\n    }\n  }\n\n  private _callDocMethod(name: keyof ActiveDocAPI, ...args: any[]): Promise<any> {\n    return this._comm._makeRequest(this._clientId, this._docId, name, this._docFD, ...args);\n  }\n\n  private async _doForkDoc(): Promise<void> {\n    reportMessage('Preparing your copy...', {key: 'forking'});\n    const {urlId, docId} = await this.fork();\n    // TODO: may want to preserve linkParameters in call to openDoc.\n    const openResponse = await this._comm.openDoc(docId);\n    // Close the old doc and release the old connection. Note that the closeDoc call is expected\n    // to fail, since we close the websocket immediately after it. So let it fail silently.\n    this.closeDoc().catch(() => null);\n    this._comm.releaseDocConnection(this._docId);\n    this._docId = docId;\n    this._setOpenResponse(openResponse);\n    this.changeUrlIdEmitter.emit(urlId);\n    reportMessage('You are now editing your own copy', {key: 'forking'});\n  }\n}\n\nObject.assign(DocComm.prototype, BackboneEvents);\n","import {cssBannerLink} from 'app/client/components/Banner';\nimport {DocPageModel} from 'app/client/models/DocPageModel';\nimport {urlState} from 'app/client/models/gristUrlState';\nimport {docListHeader} from 'app/client/ui/DocMenuCss';\nimport {GristTooltips, TooltipContentFunc} from 'app/client/ui/GristTooltips';\nimport {withInfoTooltip} from 'app/client/ui/tooltips';\nimport {mediaXSmall, theme} from 'app/client/ui2018/cssVars';\nimport {icon} from 'app/client/ui2018/icons';\nimport {loadingDots, loadingSpinner} from 'app/client/ui2018/loaders';\nimport {APPROACHING_LIMIT_RATIO, DataLimitStatus} from 'app/common/DocUsage';\nimport {Features, isFreePlan} from 'app/common/Features';\nimport {capitalizeFirstWord} from 'app/common/gutil';\nimport {canUpgradeOrg} from 'app/common/roles';\nimport {Computed, Disposable, dom, DomContents, DomElementArg, makeTestId, styled} from 'grainjs';\nimport {makeT} from 'app/client/lib/localization';\n\nconst t = makeT('DocumentUsage');\n\nconst testId = makeTestId('test-doc-usage-');\n\n// Default used by the progress bar to visually indicate row usage.\nconst DEFAULT_MAX_ROWS = 20000;\n\n// Default used by the progress bar to visually indicate data size usage.\nconst DEFAULT_MAX_DATA_SIZE = DEFAULT_MAX_ROWS * 2 * 1024; // 40MB (2KiB per row)\n\n// Default used by the progress bar to visually indicate attachments size usage.\nconst DEFAULT_MAX_ATTACHMENTS_SIZE = 1 * 1024 * 1024 * 1024; // 1GiB\n\n/**\n * Displays statistics about document usage, such as number of rows used.\n */\nexport class DocumentUsage extends Disposable {\n  private readonly _currentDoc = this._docPageModel.currentDoc;\n  private readonly _currentDocUsage = this._docPageModel.currentDocUsage;\n  private readonly _currentOrg = this._docPageModel.currentOrg;\n  private readonly _currentProduct = this._docPageModel.currentProduct;\n\n  // TODO: Update this whenever the rest of the UI is internationalized.\n  private readonly _rowCountFormatter = new Intl.NumberFormat('en-US');\n\n  private readonly _dataLimitStatus = Computed.create(this, this._currentDocUsage, (_use, usage) => {\n    return usage?.dataLimitStatus ?? null;\n  });\n\n  private readonly _rowCount = Computed.create(this, this._currentDocUsage, (_use, usage) => {\n    return usage?.rowCount;\n  });\n\n  private readonly _dataSizeBytes = Computed.create(this, this._currentDocUsage, (_use, usage) => {\n    return usage?.dataSizeBytes;\n  });\n\n  private readonly _attachmentsSizeBytes = Computed.create(this, this._currentDocUsage, (_use, usage) => {\n    return usage?.attachmentsSizeBytes;\n  });\n\n  private readonly _rowMetricOptions: Computed<MetricOptions> =\n    Computed.create(this, this._currentProduct, this._rowCount, (_use, product, rowCount) => {\n      const maxRows = product?.features.baseMaxRowsPerDocument;\n      // Invalid row limits are currently treated as if they are undefined.\n      const maxValue = maxRows && maxRows > 0 ? maxRows : undefined;\n      return {\n        name: t(\"Rows\"),\n        currentValue: typeof rowCount !== 'object' ? undefined : rowCount.total,\n        maximumValue: maxValue ?? DEFAULT_MAX_ROWS,\n        unit: 'rows',\n        shouldHideLimits: maxValue === undefined,\n        formatValue: (val) => this._rowCountFormatter.format(val),\n      };\n    });\n\n  private readonly _dataSizeMetricOptions: Computed<MetricOptions> =\n    Computed.create(this, this._currentProduct, this._dataSizeBytes, (_use, product, dataSize) => {\n      const maxSize = product?.features.baseMaxDataSizePerDocument;\n      // Invalid data size limits are currently treated as if they are undefined.\n      const maxValue = maxSize && maxSize > 0 ? maxSize : undefined;\n      return {\n        name: t(\"Data Size\"),\n        currentValue: typeof dataSize !== 'number' ? undefined : dataSize,\n        maximumValue: maxValue ?? DEFAULT_MAX_DATA_SIZE,\n        unit: 'MB',\n        shouldHideLimits: maxValue === undefined,\n        tooltipContentFunc: GristTooltips.dataSize,\n        formatValue: (val) => {\n          // To display a nice, round number for `maximumValue`, we first convert\n          // to KiBs (base-2), and then convert to MBs (base-10). Normally, we wouldn't\n          // mix conversions like this, but to display something that matches our\n          // marketing limits (e.g. 40MB for Pro plan), we need to bend conversions a bit.\n          return ((val / 1024) / 1000).toFixed(2);\n        },\n      };\n    });\n\n  private readonly _attachmentsSizeMetricOptions: Computed<MetricOptions> =\n    Computed.create(this, this._currentProduct, this._attachmentsSizeBytes, (_use, product, attachmentsSize) => {\n      const maxSize = product?.features.baseMaxAttachmentsBytesPerDocument;\n      // Invalid attachments size limits are currently treated as if they are undefined.\n      const maxValue = maxSize && maxSize > 0 ? maxSize : undefined;\n      return {\n        name: t(\"Attachments Size\"),\n        currentValue: typeof attachmentsSize !== 'number' ? undefined : attachmentsSize,\n        maximumValue: maxValue ?? DEFAULT_MAX_ATTACHMENTS_SIZE,\n        unit: 'GB',\n        shouldHideLimits: maxValue === undefined,\n        formatValue: (val) => (val / (1024 * 1024 * 1024)).toFixed(2),\n      };\n    });\n\n  private readonly _areAllMetricsPending: Computed<boolean> =\n    Computed.create(\n      this, this._currentDoc, this._rowCount, this._dataSizeBytes, this._attachmentsSizeBytes,\n      (_use, doc, rowCount, dataSize, attachmentsSize) => {\n        const hasNonPendingMetrics = [rowCount, dataSize, attachmentsSize]\n          .some(metric => metric !== 'pending' && metric !== undefined);\n        return !doc || !hasNonPendingMetrics;\n      }\n    );\n\n  private readonly _isAccessDenied: Computed<boolean | null> =\n    Computed.create(this, this._areAllMetricsPending, this._currentDoc, this._rowCount,\n      this._dataSizeBytes, this._attachmentsSizeBytes,\n      (_use, isLoading, doc, rowCount, dataSize, attachmentsSize) => {\n        if (isLoading) { return null; }\n\n        const {access} = doc!.workspace.org;\n        const isPublicUser = access === 'guests' || access === null;\n        const hasHiddenMetrics = [rowCount, dataSize, attachmentsSize].some(metric => metric === 'hidden');\n        return isPublicUser || hasHiddenMetrics;\n      }\n    );\n\n  constructor(private _docPageModel: DocPageModel) {\n    super();\n  }\n\n  public buildDom() {\n    return dom('div',\n      cssHeader(t(\"Usage\"), testId('heading')),\n      dom.domComputed(this._areAllMetricsPending, (isLoading) => {\n        if (isLoading) { return cssSpinner(loadingSpinner(), testId('loading')); }\n\n        return [this._buildMessage(), this._buildMetrics()];\n      }),\n      testId('container'),\n    );\n  }\n\n  private _buildMessage() {\n    return dom.domComputed((use) => {\n      const isAccessDenied = use(this._isAccessDenied);\n      if (isAccessDenied === null) { return null; }\n      if (isAccessDenied) {\n        return buildMessage(t(\"Usage statistics are only available to users with full access to the document data.\"));\n      }\n\n      const org = use(this._currentOrg);\n      const product = use(this._currentProduct);\n      const status = use(this._dataLimitStatus);\n      if (!org || !status) { return null; }\n\n      return buildMessage([\n        buildLimitStatusMessage(status, product?.features, {\n          disableRawDataLink: true\n        }),\n        (product && isFreePlan(product.name)\n          ? [' ', buildUpgradeMessage(\n            canUpgradeOrg(org),\n            'long',\n            () =>  this._docPageModel.appModel.showUpgradeModal()\n          )]\n          : null\n        ),\n      ]);\n    });\n  }\n\n  private _buildMetrics() {\n    return dom.maybe(use => use(this._isAccessDenied) === false, () =>\n      cssUsageMetrics(\n        dom.domComputed(this._rowMetricOptions, (metrics) =>\n          buildUsageMetric(metrics, testId('rows')),\n        ),\n        dom.domComputed(this._dataSizeMetricOptions, (metrics) =>\n          buildUsageMetric(metrics, testId('data-size')),\n        ),\n        dom.domComputed(this._attachmentsSizeMetricOptions, (metrics) =>\n          buildUsageMetric(metrics, testId('attachments-size')),\n        ),\n        testId('metrics'),\n      ),\n    );\n  }\n}\n\nexport function buildLimitStatusMessage(\n  status: NonNullable<DataLimitStatus>,\n  features?: Features,\n  options: {\n    disableRawDataLink?: boolean;\n  } = {}\n) {\n  const {disableRawDataLink = false} = options;\n  switch (status) {\n    case 'approachingLimit': {\n      return [\n        'This document is ',\n        disableRawDataLink ? 'approaching' : buildRawDataPageLink('approaching'),\n        ' free plan limits.'\n      ];\n    }\n    case 'gracePeriod': {\n      const gracePeriodDays = features?.gracePeriodDays;\n      if (!gracePeriodDays) {\n        return [\n          'Document limits ',\n          disableRawDataLink ? 'exceeded' : buildRawDataPageLink('exceeded'),\n          '.'\n        ];\n      }\n\n      return [\n        'Document limits ',\n        disableRawDataLink ? 'exceeded' : buildRawDataPageLink('exceeded'),\n        `. In ${gracePeriodDays} days, this document will be read-only.`\n      ];\n    }\n    case 'deleteOnly': {\n      return [\n        'This document ',\n        disableRawDataLink ? 'exceeded' : buildRawDataPageLink('exceeded'),\n        ' free plan limits and is now read-only, but you can delete rows.'\n      ];\n    }\n  }\n}\n\nexport function buildUpgradeMessage(\n  canUpgrade: boolean,\n  variant: 'short' | 'long',\n  onUpgrade: () => void,\n) {\n  if (!canUpgrade) { return t(\"Contact the site owner to upgrade the plan to raise limits.\"); }\n\n  const upgradeLinkText = t(\"start your 30-day free trial of the Pro plan.\");\n  // TODO i18next\n  return [\n    variant === 'short' ? null : t(\"For higher limits, \"),\n    buildUpgradeLink(\n      variant === 'short' ? capitalizeFirstWord(upgradeLinkText) : upgradeLinkText,\n      () => onUpgrade(),\n    ),\n  ];\n}\n\nfunction buildUpgradeLink(linkText: string, onClick: () => void) {\n  return cssBannerLink(linkText, dom.on('click', () => onClick()));\n}\n\nfunction buildRawDataPageLink(linkText: string) {\n  return cssBannerLink(linkText, urlState().setLinkUrl({docPage: 'data'}));\n}\n\ninterface MetricOptions {\n  name: string;\n  // If undefined, loading dots will be shown.\n  currentValue?: number;\n  // If undefined or non-positive (i.e. invalid), no limits will be assumed.\n  maximumValue?: number;\n  unit?: string;\n  // If true, limits will always be hidden, even if `maximumValue` is a positive number.\n  shouldHideLimits?: boolean;\n  // Shows an icon next to the metric name that displays a tooltip on hover.\n  tooltipContentFunc?: TooltipContentFunc;\n  formatValue?(value: number): string;\n}\n\n/**\n * Builds a component which displays the current and maximum values for\n * a particular metric (e.g. row count), and a progress meter showing how\n * close `currentValue` is to hitting `maximumValue`.\n */\nfunction buildUsageMetric(options: MetricOptions, ...domArgs: DomElementArg[]) {\n  const {name, tooltipContentFunc} = options;\n  return cssUsageMetric(\n    cssMetricName(\n      tooltipContentFunc\n        ? withInfoTooltip(\n            cssOverflowableText(name, testId('name')),\n            tooltipContentFunc()\n          )\n        : cssOverflowableText(name, testId('name')),\n    ),\n    buildUsageProgressBar(options),\n    ...domArgs,\n  );\n}\n\nfunction buildUsageProgressBar(options: MetricOptions) {\n  const {\n    currentValue,\n    maximumValue,\n    shouldHideLimits,\n    unit,\n    formatValue = (n) => n.toString()\n  } = options;\n\n  let ratioUsed: number;\n  let percentUsed: number;\n  if (currentValue === undefined) {\n    ratioUsed = 0;\n    percentUsed = 0;\n  } else {\n    ratioUsed = currentValue / (maximumValue || Infinity);\n    percentUsed = Math.min(100, Math.floor(ratioUsed * 100));\n  }\n\n  return [\n    cssProgressBarContainer(\n      cssProgressBarFill(\n        {style: `width: ${percentUsed}%`},\n        // Change progress bar to red if close to limit, unless limits are hidden.\n        shouldHideLimits || ratioUsed <= APPROACHING_LIMIT_RATIO\n          ? null\n          : cssProgressBarFill.cls('-approaching-limit'),\n        testId('progress-fill'),\n      ),\n    ),\n    dom('div',\n      currentValue === undefined ? ['Loading ', cssLoadingDots()] : formatValue(currentValue)\n        + (shouldHideLimits || !maximumValue ? '' : ' of ' + formatValue(maximumValue))\n        + (unit ? ` ${unit}` : ''),\n      testId('value'),\n    ),\n  ];\n}\n\nfunction buildMessage(message: DomContents) {\n  return cssWarningMessage(\n    cssIcon('Idea'),\n    cssLightlyBoldedText(message, testId('message-text')),\n    testId('message'),\n  );\n}\n\nconst cssLightlyBoldedText = styled('div', `\n  font-weight: 500;\n`);\n\nconst cssWarningMessage = styled('div', `\n  color: ${theme.text};\n  --icon-color: ${theme.text};\n  display: flex;\n  gap: 16px;\n  margin-top: 16px;\n`);\n\nconst cssIcon = styled(icon, `\n  flex-shrink: 0;\n  width: 16px;\n  height: 16px;\n`);\n\nconst cssMetricName = styled('div', `\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  font-weight: 700;\n`);\n\nconst cssOverflowableText = styled('span', `\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n`);\n\nconst cssHeader = styled(docListHeader, `\n  margin-bottom: 0px;\n`);\n\nconst cssUsageMetrics = styled('div', `\n  display: flex;\n  flex-wrap: wrap;\n  margin-top: 24px;\n  row-gap: 24px;\n  column-gap: 54px;\n`);\n\nconst cssUsageMetric = styled('div', `\n  color: ${theme.text};\n  display: flex;\n  flex-direction: column;\n  width: 180px;\n  gap: 8px;\n\n  @media ${mediaXSmall} {\n    & {\n      width: 100%;\n    }\n  }\n`);\n\nconst cssProgressBarContainer = styled('div', `\n  width: 100%;\n  height: 4px;\n  border-radius: 5px;\n  background: ${theme.progressBarBg};\n`);\n\nconst cssProgressBarFill = styled(cssProgressBarContainer, `\n  background: ${theme.progressBarFg};\n\n  &-approaching-limit {\n    background: ${theme.progressBarErrorFg};\n  }\n`);\n\nconst cssSpinner = styled('div', `\n  display: flex;\n  justify-content: center;\n  margin-top: 32px;\n`);\n\nconst cssLoadingDots = styled(loadingDots, `\n  --dot-size: 8px;\n`);\n","import { CellPosition, toCursor } from \"app/client/components/CellPosition\";\nimport {\n  Disposable, dom, Emitter, Holder, IDisposable, IDisposableOwner,\n  IDomArgs, MultiHolder, styled, TagElem\n} from \"grainjs\";\nimport { GristDoc } from \"app/client/components/GristDoc\";\nimport { makeT } from 'app/client/lib/localization';\nimport { ITooltipControl, showTooltip, tooltipCloseButton } from \"app/client/ui/tooltips\";\nimport { FieldEditorStateEvent } from \"app/client/widgets/FieldEditor\";\nimport { testId, theme } from \"app/client/ui2018/cssVars\";\nimport { cssLink } from \"app/client/ui2018/links\";\n\nconst t = makeT('components.Drafts');\n\n/**\n * Component that keeps track of editor's state (draft value). If user hits an escape button\n * by accident, this component will provide a way to continue the work.\n * Each editor can report its current state, that will be remembered and restored\n * when user whishes to continue his work.\n * Each document can have only one draft at a particular time, that\n * is cleared when changes occur on any other cell or the cursor navigates await from a cell.\n *\n * This component is built as a plugin for GristDoc. GristDoc, FieldBuilder, FieldEditor were just\n * extended in order to provide some public interface that this objects plugs into.\n * To disable the drafts, just simple remove it from GristDoc.\n */\nexport class Drafts extends Disposable {\n  constructor(\n    doc: GristDoc\n  ) {\n    super();\n\n    // Here are all the parts that play some role in this feature\n\n    // Cursor will navigate the cursor on a view to a proper cell\n    const cursor: Cursor = CursorAdapter.create(this, doc);\n    // Storage will remember last draft\n    const storage: Storage = StorageAdapter.create(this);\n    // Notification will show notification with button to undo discard\n    const notification: Notification = NotificationAdapter.create(this, doc);\n    // Tooltip will hover above the editor and offer to continue from last edit\n    const tooltip: Tooltip = TooltipAdapter.create(this, doc);\n    // Editor will restore its previous state and inform about keyboard events\n    const editor: Editor = EditorAdapter.create(this, doc);\n\n    // Here is the main use case describing how parts are connected\n\n    const when = makeWhen(this);\n\n    // When user cancels the editor\n    when(editor.cellCancelled, (ev: StateChanged) => {\n      // if the state of the editor hasn't changed\n      if (!ev.modified) {\n        // close the tooltip and notification\n        tooltip.close();\n        notification.close();\n        // don't store the draft - we assume that user\n        // actually wanted to discard the draft by pressing\n        // escape again\n        return;\n      }\n      // Show notification\n      notification.showUndoDiscard();\n      // Save draft in memory\n      storage.save(ev);\n      // Make sure that tooltip is not visible\n      tooltip.close();\n    });\n\n    // When user clicks notification to continue with the draft\n    when(notification.pressed, async () => {\n      // if the draft is there\n      const draft = storage.get();\n      if (draft) {\n        // restore the position of a cell\n        await cursor.goToCell(draft.position);\n        // activate the editor\n        await editor.activate();\n        // and restore last draft\n        editor.setState(draft.state);\n      }\n      // We don't need the draft any more.\n      // If user presses escape one more time it will be created\n      // once again\n      storage.clear();\n      // Close the notification\n      notification.close();\n      // tooltip is not visible here, and will be shown\n      // when editor is activated\n    });\n\n    // When user doesn't do anything while the notification is visible\n    // remove the draft when it disappears\n    when(notification.disappeared, () => {\n      storage.clear();\n    });\n\n    // When editor is activated (user typed something or double clicked a cell)\n    when(editor.activated, (pos: CellPosition) => {\n      // if there was a draft for a cell\n      if (storage.hasDraftFor(pos)) {\n        // show tooltip to continue with a draft\n        tooltip.showContinueDraft();\n      }\n      // make sure that notification is not visible\n      notification.close();\n    });\n\n    // When editor is modified, close tooltip after some time\n    when(editor.cellModified, (_: StateChanged) => {\n      tooltip.scheduleClose();\n    });\n\n    // When user saves a cell\n    when(editor.cellSaved, (_: StateChanged) => {\n      // just close everything and clear draft\n      storage.clear();\n      tooltip.close();\n      notification.close();\n    });\n\n    // When a user clicks a tooltip to continue with a draft\n    when(tooltip.click, () => {\n      const draft = storage.get();\n      // if there was a draft\n      if (draft) {\n        // restore the draft\n        editor.setState(draft.state);\n      }\n      // close the tooltip\n      tooltip.close();\n    });\n  }\n}\n\n///////////////////////////////////////////////////////////\n// Roles definition that abstract the way this feature interacts with Grist\n\n/**\n * Cursor role can navigate the cursor to a proper cell\n */\ninterface Cursor {\n  goToCell(pos: CellPosition): Promise<void>;\n}\n\n/**\n * Editor role represents active editor that is attached to a cell.\n */\ninterface Editor {\n  // Occurs when user triggers the save operation (by the enter key, clicking away)\n  cellSaved: TypedEmitter<StateChanged>;\n  // Occurs when user triggers the save operation (by the enter key, clicking away)\n  cellModified: TypedEmitter<StateChanged>;\n  // Occurs when user typed something on a cell or double clicked it\n  activated: TypedEmitter<CellPosition>;\n  // Occurs when user cancels the edit (mainly by the escape key or by icon on mobile)\n  cellCancelled: TypedEmitter<StateChanged>;\n  // Editor can restore its state\n  setState(state: any): void;\n  // Editor can be shown up to the user on active cell\n  activate(): Promise<void>;\n}\n\n/**\n * Notification that is shown to the user on the right bottom corner\n */\ninterface Notification {\n  // Occurs when user clicked the notification\n  pressed: Signal;\n  // Occurs when notification disappears with no action from a user\n  disappeared: Signal;\n  // Notification can be closed if it is visible\n  close(): void;\n  // Show notification to the user, to inform him that he can continue with the draft\n  showUndoDiscard(): void;\n}\n\n/**\n * Storage abstraction. Is responsible for storing latest\n * draft (position and state)\n */\ninterface Storage {\n  // Retrieves latest draft data\n  get(): State | null;\n  // Stores latest draft data\n  save(ev: State): void;\n  // Checks if there is draft data at the position\n  hasDraftFor(position: CellPosition): boolean;\n  // Removes draft data\n  clear(): void;\n}\n\n/**\n * Tooltip role is responsible for showing tooltip over active field editor with an information\n * that the drafts is available, and a button to continue with the draft\n */\ninterface Tooltip {\n  // Occurs when user clicks the button on the tooltip - so he wants\n  // to continue with the draft\n  click: Signal;\n  // Show tooltip over active cell editor\n  showContinueDraft(): void;\n  // Close tooltip\n  close(): void;\n  // Close tooltip after some time\n  scheduleClose(): void;\n}\n\n/**\n * Schema of the information that is stored in the storage.\n */\ninterface State {\n  // State of the editor\n  state: any;\n  // Cell position where the draft was created\n  position: CellPosition;\n}\n\n/**\n * Event that is emitted when editor state has changed\n */\ninterface StateChanged extends State {\n  modified: boolean;\n}\n\n///////////////////////////////////////////////////////////\n// Here are all the adapters for the roles above. They\n// abstract the way this feature interacts with the GristDoc\n\nclass CursorAdapter extends Disposable implements Cursor {\n  constructor(private _doc: GristDoc) {\n    super();\n  }\n  public async goToCell(pos: CellPosition): Promise<void> {\n    await this._doc.recursiveMoveToCursorPos(toCursor(pos, this._doc.docModel), true);\n  }\n}\n\nclass StorageAdapter extends Disposable implements Storage {\n  private _memory: State | null;\n  public get(): State | null {\n    return this._memory;\n  }\n  public save(ev: State) {\n    this._memory = ev;\n  }\n  public hasDraftFor(position: CellPosition): boolean {\n    const item = this._memory;\n    if (item && CellPosition.equals(item.position, position)) {\n      return true;\n    }\n    return false;\n  }\n  public clear(): void {\n    this._memory = null;\n  }\n}\n\nclass NotificationAdapter extends Disposable implements Notification {\n  public readonly pressed: Signal;\n  public readonly disappeared: Signal;\n  private _hadAction = false;\n  private _holder = Holder.create(this);\n\n  constructor(private _doc: GristDoc) {\n    super();\n    this.pressed = this.autoDispose(new Emitter());\n    this.disappeared = this.autoDispose(new Emitter());\n  }\n  public close(): void {\n    this._hadAction = true;\n    this._holder.clear();\n  }\n  public showUndoDiscard() {\n    const notifier = this._doc.app.topAppModel.notifier;\n    const notification = notifier.createUserMessage(t(\"Undo discard\"), {\n      message: () =>\n        discardNotification(\n          dom.on(\"click\", () => {\n            this._hadAction = true;\n            this.pressed.emit();\n          })\n        )\n    });\n    notification.onDispose(() => {\n      if (!this._hadAction) {\n        this.disappeared.emit();\n      }\n    });\n    this._holder.autoDispose(notification);\n    this._hadAction = false;\n  }\n}\n\nclass TooltipAdapter extends Disposable implements Tooltip {\n  public readonly click: Signal;\n\n  // there can be only one tooltip at a time\n  private _tooltip: ITooltipControl | null = null;\n  private _scheduled = false;\n\n  constructor(private _doc: GristDoc) {\n    super();\n    this.click = this.autoDispose(new Emitter());\n\n    // make sure that the tooltip is closed when this object gets disposed\n    this.onDispose(() => {\n      this.close();\n    });\n  }\n\n  public scheduleClose(): void {\n    if (this._tooltip && !this._scheduled) {\n      this._scheduled = true;\n      const origClose = this._tooltip.close;\n      this._tooltip.close = () => { clearTimeout(timer); origClose(); };\n      const timer = setTimeout(this._tooltip.close, 6000);\n    }\n  }\n\n  public showContinueDraft(): void {\n    // close tooltip if there was a previous one\n    this.close();\n\n    // get the editor dom\n    const editorDom = this._doc.activeEditor.get()?.getDom();\n    if (!editorDom) {\n      return;\n    }\n\n    // attach the tooltip\n    this._tooltip = showTooltip(\n      editorDom,\n      cellTooltip(() => this.click.emit()));\n  }\n\n  public close(): void {\n    this._scheduled = false;\n    this._tooltip?.close();\n    this._tooltip = null;\n  }\n}\n\nclass EditorAdapter extends Disposable implements Editor {\n  public readonly cellSaved: TypedEmitter<StateChanged> = this.autoDispose(new Emitter());\n  public readonly cellModified: TypedEmitter<StateChanged> = this.autoDispose(new Emitter());\n  public readonly activated: TypedEmitter<CellPosition> = this.autoDispose(new Emitter());\n  public readonly cellCancelled: TypedEmitter<StateChanged> = this.autoDispose(new Emitter());\n\n  private _holder = Holder.create<MultiHolder>(this);\n\n  constructor(private _doc: GristDoc) {\n    super();\n\n    // observe active editor\n    this.autoDispose(_doc.activeEditor.addListener((editor) => {\n      if (!editor) {\n        return;\n      }\n\n      // when the editor is created we assume that it is visible to the user\n      this.activated.emit(editor.cellPosition());\n\n      // Auto dispose the previous MultiHolder along with all the previous listeners, and create a\n      // new MultiHolder for the new ones.\n      const mholder = MultiHolder.create(this._holder);\n\n      mholder.autoDispose(editor.changeEmitter.addListener((e: FieldEditorStateEvent) => {\n        this.cellModified.emit({\n          position: e.position,\n          state: e.currentState,\n          modified: e.wasModified\n        });\n      }));\n\n      // when user presses escape\n      mholder.autoDispose(editor.cancelEmitter.addListener((e: FieldEditorStateEvent) => {\n        this.cellCancelled.emit({\n          position: e.position,\n          state: e.currentState,\n          modified: e.wasModified\n        });\n      }));\n\n      // when user presses enter to save the value\n      mholder.autoDispose(editor.saveEmitter.addListener((e: FieldEditorStateEvent) => {\n        this.cellSaved.emit({\n          position: e.position,\n          state: e.currentState,\n          modified: e.wasModified\n        });\n      }));\n    }));\n  }\n\n  public setState(state: any): void {\n    // rebuild active editor with a state from a draft\n    this._doc.activeEditor.get()?.rebuildEditor(undefined, Number.POSITIVE_INFINITY, state);\n  }\n\n  public async activate() {\n    // open up the editor at current position\n    await this._doc.activateEditorAtCursor({});\n  }\n}\n\n///////////////////////////////////////////////////////////\n// Ui components\n\n// Cell tooltip to restore the draft - it is visible over active editor\nconst styledTooltip = styled('div', `\n  display: flex;\n  align-items: center;\n  --icon-color: ${theme.controlFg};\n\n  & > .${cssLink.className} {\n    margin-left: 8px;\n  }\n`);\n\nfunction cellTooltip(clb: () => any) {\n  return function (ctl: ITooltipControl) {\n    return styledTooltip(\n      cssLink(t(\"Restore last edit\"),\n        dom.on('mousedown', (ev) => { ev.preventDefault(); ctl.close(); clb(); }),\n        testId('draft-tooltip'),\n      ),\n      tooltipCloseButton(ctl),\n    );\n  };\n}\n\n// Discard notification dom\nconst styledNotification = styled('div', `\n  cursor: pointer;\n  color: ${theme.controlFg};\n  &:hover {\n    text-decoration: underline;\n  }\n`);\nfunction discardNotification(...args: IDomArgs<TagElem<\"div\">>) {\n  return styledNotification(\n    t(\"Undo discard\"),\n    testId(\"draft-notification\"),\n    ...args\n  );\n}\n\n///////////////////////////////////////////////////////////\n// Internal implementations - not relevant to main use case\n\n// helper method to listen to the Emitter and dispose the listener with a parent\nfunction makeWhen(owner: IDisposableOwner) {\n  return function <T extends EmitterType<any>>(emitter: T, handler: EmitterHandler<T>) {\n    owner.autoDispose(emitter.addListener(handler as any));\n  };\n}\n\n// Default emitter is not typed, this augments the Emitter interface\ninterface TypedEmitter<T> {\n  emit(item: T): void;\n  addListener(clb: (e: T) => any): IDisposable;\n}\ninterface Signal {\n  emit(): void;\n  addListener(clb: () => any): IDisposable;\n}\ntype EmitterType<T> = T extends TypedEmitter<infer E> ? TypedEmitter<E> : Signal;\ntype EmitterHandler<T> = T extends TypedEmitter<infer E> ? ((e: E) => any) : () => any;\n","import {CellPosition, toCursor} from 'app/client/components/CellPosition';\nimport {oneTimeListener} from 'app/client/components/CursorMonitor';\nimport {GristDoc} from 'app/client/components/GristDoc';\nimport {getStorage} from 'app/client/lib/storage';\nimport {UserError} from 'app/client/models/errors';\nimport {FieldEditor, FieldEditorStateEvent} from 'app/client/widgets/FieldEditor';\nimport {isViewDocPage} from 'app/common/gristUrls';\nimport {Disposable, Emitter, IDisposableOwner} from 'grainjs';\n\n/**\n * Feature for GristDoc that allows it to keep track of current editor's state.\n * State is stored in local storage by default.\n */\nexport class EditorMonitor extends Disposable {\n\n  // abstraction to work with local storage\n  private _store: EditMemoryStorage;\n  private _restored = false;\n\n  constructor(\n    doc: GristDoc,\n    store?: Storage) {\n    super();\n\n    // create store\n    const userId = doc.app.topAppModel.appObs.get()?.currentUser?.id ?? null;\n    // use document id and user id as a key for storage\n    const key = doc.docId() + userId;\n    this._store = new EditMemoryStorage(key, store);\n\n    // listen to document events to handle view load event\n    this._listenToReload(doc).catch((err) => {\n      if (!(err instanceof UserError)) {\n        throw err;\n      }\n      // Don't report UserErrors for this feature (should not happen as\n      // the only error that is thrown was silenced by recursiveMoveToCursorPos)\n      console.error(`Error while restoring last edit position`, err);\n    });\n  }\n\n  /**\n   * Monitors a field editor and updates latest edit position\n   * @param editor Field editor to track\n   */\n  public monitorEditor(editor: FieldEditor) {\n    // typed helper to connect to the emitter\n    const on = typedListener(this);\n    // When user cancels the edit process, discard the memory of the last edited cell.\n    on(editor.cancelEmitter, (event) => {\n      this._store.clear();\n    });\n    // When saves a cell, discard the memory of the last edited cell.\n    on(editor.saveEmitter, (event) => {\n      this._store.clear();\n    });\n    // When user types in the editor, store its state\n    on(editor.changeEmitter, (event) => {\n      this._store.updateValue(event.position, event.currentState);\n    });\n  }\n\n  /**\n   * When document gets reloaded, restore last cursor position and a state of the editor.\n   * Returns last edited cell position and saved editor state or undefined.\n   */\n  private async _listenToReload(doc: GristDoc) {\n    // don't restore on readonly mode or when there is custom nav\n    if (doc.isReadonly.get() || doc.hasCustomNav.get()) {\n      this._store.clear();\n      return;\n     }\n    // if we are on raw data view, we need to set the position manually\n    // as currentView observable will not be changed.\n    if (doc.activeViewId.get() === 'data') {\n      await this._doRestorePosition(doc);\n    } else {\n      // on view shown\n      this.autoDispose(oneTimeListener(doc.currentView, async () => {\n        await this._doRestorePosition(doc);\n      }));\n    }\n  }\n\n  private async _doRestorePosition(doc: GristDoc) {\n    if (this._restored) {\n      return;\n    }\n    this._restored = true;\n    const viewId = doc.activeViewId.get();\n    // if view wasn't rendered (page is displaying history or code view) do nothing\n    if (!isViewDocPage(viewId)) {\n      this._store.clear();\n      return;\n     }\n    const lastEdit = this._store.readValue();\n    if (lastEdit) {\n      // set the cursor at right cell\n      await doc.recursiveMoveToCursorPos(toCursor(lastEdit.position, doc.docModel), true, true);\n      // activate the editor\n      await doc.activateEditorAtCursor({ state: lastEdit.value });\n    }\n  }\n}\n\n// Internal implementation, not relevant to the main use case\n\n// typed listener for the Emitter class\nfunction typedListener(owner: IDisposableOwner) {\n  return function (emitter: Emitter, clb: (e: FieldEditorStateEvent) => any) {\n    owner.autoDispose(emitter.addListener(clb));\n  };\n}\n\n// Marker for a editor state - each editor can report any data as long as it is serialized\ntype EditorState = any;\n\n// Schema for value stored in the local storage\ninterface LastEditData {\n  // absolute position for a cell\n  position: CellPosition;\n  // editor's state\n  value: EditorState;\n}\n\n// Abstraction for working with local storage\nclass EditMemoryStorage {\n\n  private _entry: LastEditData | null = null;\n  private _timestamp = 0;\n\n  constructor(private _key: string, private _storage = getStorage()) {\n  }\n\n  public updateValue(pos: CellPosition, value: EditorState): void {\n    this._entry = { position: pos, value: value };\n    this.save();\n  }\n\n  public readValue(): LastEditData | null {\n    this.load();\n    return this._entry;\n  }\n\n  public clear(): void {\n    this._entry = null;\n    this.save();\n  }\n\n  public timestamp(): number {\n    return this._timestamp;\n  }\n\n  protected _storageKey() {\n    return `grist-last-edit-${this._key}`;\n  }\n\n  protected load() {\n    const storage = this._storage;\n    const data = storage.getItem(this._storageKey());\n    this._entry = null;\n    this._timestamp = 0;\n\n    if (data) {\n      try {\n        const { entry, timestamp } = JSON.parse(data);\n        if (typeof entry === 'undefined' || typeof timestamp != 'number') {\n          console.error(\"[EditMemory] Data in local storage has a different structure\");\n          return;\n        }\n        this._entry = entry;\n        this._timestamp = timestamp;\n      } catch (e) {\n        console.error(\"[EditMemory] Can't deserialize date from local storage\");\n      }\n    }\n  }\n\n  protected save(): void {\n    const storage = this._storage;\n\n    // if entry was removed - clear the storage\n    if (!this._entry) {\n      storage.removeItem(this._storageKey());\n      return;\n    }\n\n    try {\n      this._timestamp = Date.now();\n      const data = { timestamp: this._timestamp, entry: this._entry };\n      storage.setItem(this._storageKey(), JSON.stringify(data));\n    } catch (ex) {\n      console.error(\"Can't save current edited cell state. Error message: \" + ex?.message);\n    }\n  }\n}\n","/**\n * GristDoc manages an open Grist document on the client side.\n */\n// tslint:disable:no-console\n\nimport {AccessRules} from 'app/client/aclui/AccessRules';\nimport {ActionLog} from 'app/client/components/ActionLog';\nimport BaseView from 'app/client/components/BaseView';\nimport {isNumericLike, isNumericOnly} from 'app/client/components/ChartView';\nimport {CodeEditorPanel} from 'app/client/components/CodeEditorPanel';\nimport * as commands from 'app/client/components/commands';\nimport {CursorMonitor, ViewCursorPos} from \"app/client/components/CursorMonitor\";\nimport {DocComm} from 'app/client/components/DocComm';\nimport * as DocConfigTab from 'app/client/components/DocConfigTab';\nimport {Drafts} from \"app/client/components/Drafts\";\nimport {EditorMonitor} from \"app/client/components/EditorMonitor\";\nimport * as GridView from 'app/client/components/GridView';\nimport {importFromFile, selectAndImport} from 'app/client/components/Importer';\nimport {RawDataPage, RawDataPopup} from 'app/client/components/RawDataPage';\nimport {ActionGroupWithCursorPos, UndoStack} from 'app/client/components/UndoStack';\nimport {ViewLayout} from 'app/client/components/ViewLayout';\nimport {get as getBrowserGlobals} from 'app/client/lib/browserGlobals';\nimport {DocPluginManager} from 'app/client/lib/DocPluginManager';\nimport {ImportSourceElement} from 'app/client/lib/ImportSourceElement';\nimport {makeT} from 'app/client/lib/localization';\nimport {createSessionObs} from 'app/client/lib/sessionObs';\nimport {setTestState} from 'app/client/lib/testState';\nimport {selectFiles} from 'app/client/lib/uploads';\nimport {AppModel, reportError} from 'app/client/models/AppModel';\nimport BaseRowModel from 'app/client/models/BaseRowModel';\nimport DataTableModel from 'app/client/models/DataTableModel';\nimport {DataTableModelWithDiff} from 'app/client/models/DataTableModelWithDiff';\nimport {DocData} from 'app/client/models/DocData';\nimport {DocInfoRec, DocModel, ViewFieldRec, ViewRec, ViewSectionRec} from 'app/client/models/DocModel';\nimport {DocPageModel} from 'app/client/models/DocPageModel';\nimport {UserError} from 'app/client/models/errors';\nimport {getMainOrgUrl, urlState} from 'app/client/models/gristUrlState';\nimport {getFilterFunc, QuerySetManager} from 'app/client/models/QuerySet';\nimport {getUserOrgPrefObs, getUserOrgPrefsObs, markAsSeen} from 'app/client/models/UserPrefs';\nimport {App} from 'app/client/ui/App';\nimport {DocHistory} from 'app/client/ui/DocHistory';\nimport {startDocTour} from \"app/client/ui/DocTour\";\nimport {DocTutorial} from 'app/client/ui/DocTutorial';\nimport {DocSettingsPage} from 'app/client/ui/DocumentSettings';\nimport {isTourActive} from \"app/client/ui/OnBoardingPopups\";\nimport {IPageWidget, toPageWidget} from 'app/client/ui/PageWidgetPicker';\nimport {linkFromId, selectBy} from 'app/client/ui/selectBy';\nimport {WebhookPage} from 'app/client/ui/WebhookPage';\nimport {startWelcomeTour} from 'app/client/ui/WelcomeTour';\nimport {IWidgetType} from 'app/common/widgetTypes';\nimport {PlayerState, YouTubePlayer} from 'app/client/ui/YouTubePlayer';\nimport {isNarrowScreen, mediaSmall, mediaXSmall, testId, theme} from 'app/client/ui2018/cssVars';\nimport {IconName} from 'app/client/ui2018/IconList';\nimport {icon} from 'app/client/ui2018/icons';\nimport {invokePrompt} from 'app/client/ui2018/modals';\nimport {DiscussionPanel} from 'app/client/widgets/DiscussionEditor';\nimport {FieldEditor} from \"app/client/widgets/FieldEditor\";\nimport {MinimalActionGroup} from 'app/common/ActionGroup';\nimport {ClientQuery, FilterColValues} from \"app/common/ActiveDocAPI\";\nimport {CommDocChatter, CommDocUsage, CommDocUserAction} from 'app/common/CommTypes';\nimport {delay} from 'app/common/delay';\nimport {DisposableWithEvents} from 'app/common/DisposableWithEvents';\nimport {isSchemaAction, UserAction} from 'app/common/DocActions';\nimport {OpenLocalDocResult} from 'app/common/DocListAPI';\nimport {isList, isListType, isRefListType, RecalcWhen} from 'app/common/gristTypes';\nimport {HashLink, IDocPage, isViewDocPage, SpecialDocPage, ViewDocPage} from 'app/common/gristUrls';\nimport {undef, waitObs} from 'app/common/gutil';\nimport {LocalPlugin} from \"app/common/plugin\";\nimport {StringUnion} from 'app/common/StringUnion';\nimport {TableData} from 'app/common/TableData';\nimport {DocStateComparison} from 'app/common/UserAPI';\nimport {CursorPos} from 'app/plugin/GristAPI';\nimport {\n  bundleChanges,\n  Computed,\n  dom,\n  DomContents,\n  Emitter,\n  fromKo,\n  Holder,\n  IDisposable,\n  IDomComponent,\n  keyframes,\n  Observable,\n  styled,\n  subscribe,\n  toKo\n} from 'grainjs';\nimport * as ko from 'knockout';\nimport cloneDeepWith = require('lodash/cloneDeepWith');\nimport isEqual = require('lodash/isEqual');\n\nconst RICK_ROLL_YOUTUBE_EMBED_ID = 'dQw4w9WgXcQ';\n\nconst t = makeT('GristDoc');\n\nconst G = getBrowserGlobals('document', 'window');\n\n// Re-export some tools to move them from main webpack bundle to the one with GristDoc.\nexport {DocComm, startDocTour};\n\nexport interface TabContent {\n  showObs?: any;\n  header?: boolean;\n  label?: any;\n  items?: any;\n  buildDom?: any;\n  keywords?: any;\n}\n\nexport interface TabOptions {\n  shortLabel?: string;\n  hideSearchContent?: boolean;\n  showObs?: any;\n  category?: any;\n}\n\nconst RightPanelTool = StringUnion(\"none\", \"docHistory\", \"validations\", \"discussion\");\n\nexport interface IExtraTool {\n  icon: IconName;\n  label: DomContents;\n  content: TabContent[] | IDomComponent;\n}\n\ninterface RawSectionOptions {\n  viewSection: ViewSectionRec;\n  hash: HashLink;\n  close: () => void;\n}\n\nexport class GristDoc extends DisposableWithEvents {\n  public docModel: DocModel;\n  public viewModel: ViewRec;\n  public activeViewId: Computed<IDocPage>;\n  public currentPageName: Observable<string>;\n  public docData: DocData;\n  public docInfo: DocInfoRec;\n  public docPluginManager: DocPluginManager;\n  public querySetManager: QuerySetManager;\n  public rightPanelTool: Observable<IExtraTool | null>;\n  public isReadonly = this.docPageModel.isReadonly;\n  public isReadonlyKo = toKo(ko, this.isReadonly);\n  public comparison: DocStateComparison | null;\n  // component for keeping track of latest cursor position\n  public cursorMonitor: CursorMonitor;\n  // component for keeping track of a cell that is being edited\n  public editorMonitor: EditorMonitor;\n  // component for keeping track of a cell that is being edited\n  public draftMonitor: Drafts;\n  // will document perform its own navigation (from anchor link)\n  public hasCustomNav: Observable<boolean>;\n  // Emitter triggered when the main doc area is resized.\n  public readonly resizeEmitter = this.autoDispose(new Emitter());\n\n  // This holds a single FieldEditor. When a new FieldEditor is created (on edit), it replaces the\n  // previous one if any. The holder is maintained by GristDoc, so that we are guaranteed at\n  // most one instance of FieldEditor at any time.\n  public readonly fieldEditorHolder = Holder.create(this);\n  // active field editor\n  public readonly activeEditor: Observable<FieldEditor | null> = Observable.create(this, null);\n\n  // Holds current view that is currently rendered\n  public currentView: Observable<BaseView | null>;\n\n  // Holds current cursor position with a view id\n  public cursorPosition: Computed<ViewCursorPos | undefined>;\n\n  public readonly userOrgPrefs = getUserOrgPrefsObs(this.docPageModel.appModel);\n\n  public readonly behavioralPromptsManager = this.docPageModel.appModel.behavioralPromptsManager;\n  // One of the section can be expanded (as requested from the Layout), we will\n  // store its id in this variable. NOTE: expanded section looks exactly the same as a section\n  // in the popup. But they are rendered differently, as section in popup is probably an external\n  // section (or raw data section) that is not part of this view. Maximized section is a section\n  // in the view, so there is no need to render it twice, layout just hides all other sections to make\n  // the space.\n  public maximizedSectionId: Observable<number | null> = Observable.create(this, null);\n  // This is id of the section that is currently shown in the popup. Probably this is an external\n  // section, like raw data view, or a section from another view..\n  public externalSectionId: Computed<number | null>;\n  public viewLayout: ViewLayout | null = null;\n\n  // Holder for the popped up formula editor.\n  public readonly formulaPopup = Holder.create(this);\n\n  public readonly currentTheme = this.docPageModel.appModel.currentTheme;\n\n  public get docApi() {\n    return this.docPageModel.appModel.api.getDocAPI(this.docPageModel.currentDocId.get()!);\n  }\n\n  private _actionLog: ActionLog;\n  private _undoStack: UndoStack;\n  private _lastOwnActionGroup: ActionGroupWithCursorPos | null = null;\n  private _rightPanelTabs = new Map<string, TabContent[]>();\n  private _docHistory: DocHistory;\n  private _discussionPanel: DiscussionPanel;\n  private _rightPanelTool = createSessionObs(this, \"rightPanelTool\", \"none\", RightPanelTool.guard);\n  private _showGristTour = getUserOrgPrefObs(this.userOrgPrefs, 'showGristTour');\n  private _seenDocTours = getUserOrgPrefObs(this.userOrgPrefs, 'seenDocTours');\n  private _rawSectionOptions: Observable<RawSectionOptions | null> = Observable.create(this, null);\n  private _activeContent: Computed<IDocPage | RawSectionOptions>;\n  private _docTutorialHolder = Holder.create<DocTutorial>(this);\n  private _isRickRowing: Observable<boolean> = Observable.create(this, false);\n  private _showBackgroundVideoPlayer: Observable<boolean> = Observable.create(this, false);\n  private _backgroundVideoPlayerHolder: Holder<YouTubePlayer> = Holder.create(this);\n  private _disableAutoStartingTours: boolean = false;\n\n\n  constructor(\n    public readonly app: App,\n    public readonly appModel: AppModel,\n    public readonly docComm: DocComm,\n    public readonly docPageModel: DocPageModel,\n    openDocResponse: OpenLocalDocResult,\n    plugins: LocalPlugin[],\n    options: {\n      comparison?: DocStateComparison  // initial comparison with another document\n    } = {}\n  ) {\n    super();\n    console.log(\"RECEIVED DOC RESPONSE\", openDocResponse);\n    this.docData = new DocData(this.docComm, openDocResponse.doc);\n    this.docModel = new DocModel(this.docData, this.docPageModel);\n    this.querySetManager = QuerySetManager.create(this, this.docModel, this.docComm);\n    this.docPluginManager = new DocPluginManager(plugins,\n      app.topAppModel.getUntrustedContentOrigin(), this.docComm, app.clientScope);\n\n    // Maintain the MetaRowModel for the global document info, including docId and peers.\n    this.docInfo = this.docModel.docInfoRow;\n\n    const defaultViewId = this.docInfo.newDefaultViewId;\n\n    // Grainjs observable for current view id, which may be a string such as 'code'.\n    this.activeViewId = Computed.create(this, (use) => {\n      const {docPage} = use(urlState().state);\n\n      // Return most special pages like 'code' and 'acl' as is\n      if (typeof docPage === 'string' && docPage !== 'GristDocTour' && SpecialDocPage.guard(docPage)) {\n        return docPage;\n      }\n\n      // GristDocTour is a special table that is usually hidden from users, but putting /p/GristDocTour\n      // in the URL navigates to it and makes it visible in the list of pages in the sidebar\n      // For GristDocTour, find the view with that name.\n      // Otherwise find the view with the given row ID, because letting a non-existent row ID pass through here is bad.\n      // If no such view exists, return the default view.\n      const viewId = this.docModel.views.tableData.findRow(docPage === 'GristDocTour' ? 'name' : 'id', docPage);\n      return viewId || use(defaultViewId);\n    });\n    this._activeContent = Computed.create(this, use => use(this._rawSectionOptions) ?? use(this.activeViewId));\n    this.externalSectionId = Computed.create(this, use => {\n      const externalContent = use(this._rawSectionOptions);\n      return externalContent ? use(externalContent.viewSection.id) : null;\n    });\n    // This viewModel reflects the currently active view, relying on the fact that\n    // createFloatingRowModel() supports an observable rowId for its argument.\n    // Although typings don't reflect it, createFloatingRowModel() accepts non-numeric values,\n    // which yield an empty row, which is why we can cast activeViewId.\n    this.viewModel = this.autoDispose(\n      this.docModel.views.createFloatingRowModel(toKo(ko, this.activeViewId) as ko.Computed<number>));\n\n    // When active section is changed, clear the maximized state.\n    this.autoDispose(this.viewModel.activeSectionId.subscribe((id) => {\n      if (id === this.maximizedSectionId.get()) {\n        return;\n      }\n      this.maximizedSectionId.set(null);\n      // If we have layout, update it.\n      if (!this.viewLayout?.isDisposed()) {\n        this.viewLayout?.maximized.set(null);\n      }\n    }));\n\n    // Grainjs observable reflecting the name of the current document page.\n    this.currentPageName = Computed.create(this, this.activeViewId,\n      (use, docPage) => typeof docPage === 'number' ? use(this.viewModel.name) : docPage);\n\n    // Whenever the active viewModel is deleted, switch to the default view.\n    this.autoDispose(this.viewModel._isDeleted.subscribe((isDeleted) => {\n      if (isDeleted) {\n        // This should not be done synchronously, as that affects the same viewModel that triggered\n        // this callback, and causes some obscure effects on knockout subscriptions.\n        Promise.resolve().then(() => urlState().pushUrl({docPage: undefined})).catch(() => null);\n      }\n    }));\n\n\n    // Subscribe to URL state, and navigate to anchor or open a popup if necessary.\n    this.autoDispose(subscribe(urlState().state, async (use, state) => {\n      if (!state.hash) {\n        return;\n      }\n\n\n      try {\n        if (state.hash.popup) {\n          await this.openPopup(state.hash);\n        } else {\n          // Navigate to an anchor if one is present in the url hash.\n          const cursorPos = this._getCursorPosFromHash(state.hash);\n          await this.recursiveMoveToCursorPos(cursorPos, true);\n        }\n\n        const isTourOrTutorialActive = isTourActive() || this.docModel.isTutorial();\n        if (state.hash.rickRow && !this._isRickRowing.get() && !isTourOrTutorialActive) {\n          YouTubePlayer.create(this._backgroundVideoPlayerHolder, RICK_ROLL_YOUTUBE_EMBED_ID, {\n            height: '100%',\n            width: '100%',\n            origin: getMainOrgUrl(),\n            playerVars: {\n              controls: 0,\n              disablekb: 1,\n              fs: 0,\n              iv_load_policy: 3,\n              modestbranding: 1,\n            },\n            onPlayerStateChange: (_player, event) => {\n              if (event.data === PlayerState.Playing) {\n                this._isRickRowing.set(true);\n              }\n            },\n          }, cssYouTubePlayer.cls(''));\n          this._showBackgroundVideoPlayer.set(true);\n          this._waitForView()\n            .then(() => {\n              const cursor = document.querySelector('.selected_cursor.active_cursor');\n              if (!cursor) {\n                return;\n              }\n\n              this.behavioralPromptsManager.showTip(cursor, 'rickRow', {\n                forceShow: true,\n                hideDontShowTips: true,\n                markAsSeen: false,\n                showOnMobile: true,\n                onDispose: () => this.playRickRollVideo(),\n              });\n            })\n            .catch(reportError);\n        }\n      } catch (e) {\n        reportError(e);\n      } finally {\n        setTimeout(finalizeAnchor, 0);\n      }\n    }));\n\n    if (this.docModel.isTutorial()) {\n      this.behavioralPromptsManager.disable();\n    }\n\n    let isStartingTourOrTutorial = false;\n    this.autoDispose(subscribe(urlState().state, async (_use, state) => {\n      // Only start a tour or tutorial when the full interface is showing, i.e. not when in\n      // embedded mode.\n      if (state.params?.style === 'singlePage') {\n        return;\n      }\n\n      const isTutorial = this.docModel.isTutorial();\n      // Onboarding tours were not designed with mobile support in mind. Disable until fixed.\n      if (isNarrowScreen() && !isTutorial) {\n        return;\n      }\n\n      // Onboarding tours can conflict with rick rowing.\n      if (state.hash?.rickRow) {\n        this._disableAutoStartingTours = true;\n      }\n\n      // If we have an active tour or tutorial (or are in the process of starting one), don't start\n      // a new one.\n      const hasActiveTourOrTutorial = isTourActive() || !this._docTutorialHolder.isEmpty();\n      if (isStartingTourOrTutorial || hasActiveTourOrTutorial) {\n        return;\n      }\n\n      const shouldStartTutorial = isTutorial;\n      const shouldStartDocTour = state.docTour || this._shouldAutoStartDocTour();\n      const shouldStartWelcomeTour = state.welcomeTour || this._shouldAutoStartWelcomeTour();\n      if (shouldStartTutorial || shouldStartDocTour || shouldStartWelcomeTour) {\n        isStartingTourOrTutorial = true;\n        try {\n          await this._waitForView();\n\n          // Remove any tour-related hash-tags from the URL. So #repeat-welcome-tour and\n          // #repeat-doc-tour are used as triggers, but will immediately disappear.\n          await urlState().pushUrl({welcomeTour: false, docTour: false},\n            {replace: true, avoidReload: true});\n\n          if (shouldStartTutorial) {\n            await DocTutorial.create(this._docTutorialHolder, this).start();\n          } else if (shouldStartDocTour) {\n            const onFinishCB = () => (\n              !this._seenDocTours.get()?.includes(this.docId())\n              && markAsSeen(this._seenDocTours, this.docId())\n            );\n            await startDocTour(this.docData, this.docComm, onFinishCB);\n          } else {\n            startWelcomeTour(() => this._showGristTour.set(false));\n          }\n        } finally {\n          isStartingTourOrTutorial = false;\n        }\n      }\n    }));\n\n    // Importer takes a function for creating previews.\n    const createPreview = (vs: ViewSectionRec) => {\n      const preview = GridView.create(this, vs, true);\n      // We need to set the instance to the newly created section. This is important, as\n      // GristDoc is responsible for changing the cursor position not the cursor itself. Final\n      // cursor position is determined by finding active (or visible) section and passing this\n      // command (setCursor) to its instance.\n      vs.viewInstance(preview);\n      preview.autoDisposeCallback(() => vs.viewInstance(null));\n      return preview;\n    };\n\n    const importSourceElems = ImportSourceElement.fromArray(this.docPluginManager.pluginsList);\n    const importMenuItems = [\n      {\n        label: t(\"Import from file\"),\n        action: () => importFromFile(this, createPreview),\n      },\n      ...importSourceElems.map(importSourceElem => ({\n        label: importSourceElem.importSource.label,\n        action: () => selectAndImport(this, importSourceElems, importSourceElem, createPreview)\n      }))\n    ];\n\n    // Set the available import sources in the DocPageModel.\n    this.docPageModel.importSources = importMenuItems;\n\n    this._actionLog = this.autoDispose(ActionLog.create({gristDoc: this}));\n    this._undoStack = this.autoDispose(UndoStack.create(openDocResponse.log, {gristDoc: this}));\n    this._docHistory = DocHistory.create(this, this.docPageModel, this._actionLog);\n    this._discussionPanel = DiscussionPanel.create(this, this);\n\n    // Tap into docData's sendActions method to save the cursor position with every action, so that\n    // undo/redo can jump to the right place.\n    this.autoDispose(this.docData.sendActionsEmitter.addListener(this._onSendActionsStart, this));\n    this.autoDispose(this.docData.sendActionsDoneEmitter.addListener(this._onSendActionsEnd, this));\n\n    /* Command binding */\n    this.autoDispose(commands.createGroup({\n      undo() {\n        this._undoStack.sendUndoAction().catch(reportError);\n      },\n      redo() {\n        this._undoStack.sendRedoAction().catch(reportError);\n      },\n      reloadPlugins() {\n        void this.docComm.reloadPlugins().then(() => G.window.location.reload(false));\n      },\n\n      // Command to be manually triggered on cell selection. Moves the cursor to the selected cell.\n      // This is overridden by the formula editor to insert \"$col\" variables when clicking cells.\n      setCursor: this.onSetCursorPos.bind(this),\n    }, this, true));\n\n    this.listenTo(app.comm, 'docUserAction', this.onDocUserAction);\n\n    this.listenTo(app.comm, 'docUsage', this.onDocUsageMessage);\n\n    this.listenTo(app.comm, 'docChatter', this.onDocChatter);\n\n    this._handleTriggerQueueOverflowMessage();\n\n    this.autoDispose(DocConfigTab.create({gristDoc: this}));\n\n    this.rightPanelTool = Computed.create(this, (use) => this._getToolContent(use(this._rightPanelTool)));\n\n    this.comparison = options.comparison || null;\n\n    // We need prevent default here to allow drop events to fire.\n    this.autoDispose(dom.onElem(window, 'dragover', (ev) => ev.preventDefault()));\n    // The default action is to open dragged files as a link, navigating out of the app.\n    this.autoDispose(dom.onElem(window, 'drop', (ev) => ev.preventDefault()));\n\n    // On window resize, trigger the resizeEmitter to update ViewLayout and individual BaseViews.\n    this.autoDispose(dom.onElem(window, 'resize', () => this.resizeEmitter.emit()));\n\n    // create current view observer\n    this.currentView = Observable.create<BaseView | null>(this, null);\n\n    // create computed observable for viewInstance - if it is loaded or not\n\n    // GrainJS will not recalculate section.viewInstance correctly because it will be\n    // modified (updated from null to a correct instance) in the same tick. We need to\n    // switch for a moment to knockout to fix this.\n    const viewInstance = fromKo(this.autoDispose(ko.pureComputed(() => {\n      const viewId = toKo(ko, this.activeViewId)();\n      if (!isViewDocPage(viewId)) {\n        return null;\n      }\n      const section = this.viewModel.activeSection();\n      if (section?.isDisposed()) { return null; }\n      const view = section.viewInstance();\n      return view;\n    })));\n\n    // then listen if the view is present, because we still need to wait for it load properly\n    this.autoDispose(viewInstance.addListener(async (view) => {\n      if (view) {\n        await view.getLoadingDonePromise();\n      }\n      if (view?.isDisposed()) {\n        return;\n      }\n      // finally set the current view as fully loaded\n      this.currentView.set(view);\n    }));\n\n    // create observable for current cursor position\n    this.cursorPosition = Computed.create<ViewCursorPos | undefined>(this, use => {\n      // get the BaseView\n      const view = use(this.currentView);\n      if (!view) {\n        return undefined;\n      }\n      const viewId = use(this.activeViewId);\n      if (!isViewDocPage(viewId)) {\n        return undefined;\n      }\n      // read latest position\n      const currentPosition = use(view.cursor.currentPosition);\n      if (currentPosition) {\n        return {...currentPosition, viewId};\n      }\n      return undefined;\n    });\n\n    this.hasCustomNav = Computed.create(this, urlState().state, (_, state) => {\n      const hash = state.hash;\n      return !!(hash && (undef(hash.colRef, hash.rowId, hash.sectionId) !== undefined));\n    });\n\n    this.draftMonitor = Drafts.create(this, this);\n    this.cursorMonitor = CursorMonitor.create(this, this);\n    this.editorMonitor = EditorMonitor.create(this, this);\n\n    // When active section is changed to a chart or custom widget, change the tab in the creator\n    // panel to the table.\n    this.autoDispose(this.viewModel.activeSection.subscribe((section) => {\n      if (section.isDisposed() || section._isDeleted.peek()) {\n        return;\n      }\n      if (['chart', 'custom'].includes(section.parentKey.peek())) {\n        commands.allCommands.viewTabFocus.run();\n      }\n    }));\n  }\n\n  /**\n   * Returns current document's id\n   */\n  public docId() {\n    return this.docPageModel.currentDocId.get()!;\n  }\n\n  // DEPRECATED This is used only for validation, which is not used anymore.\n  public addOptionsTab(label: string, iconElem: any, contentObj: TabContent[], options: TabOptions): IDisposable {\n    this._rightPanelTabs.set(label, contentObj);\n    // Return a do-nothing disposable, to satisfy the previous interface.\n    return {dispose: () => null};\n  }\n\n  /**\n   * Builds the DOM for this GristDoc.\n   */\n  public buildDom() {\n    const isMaximized = Computed.create(this, use => use(this.maximizedSectionId) !== null);\n    const isPopup = Computed.create(this, use => {\n      return ['data', 'settings'].includes(use(this.activeViewId) as any) // On Raw data or doc settings pages\n        || use(isMaximized) // Layout has a maximized section visible\n        || typeof use(this._activeContent) === 'object'; // We are on show raw data popup\n    });\n    return cssViewContentPane(\n      testId('gristdoc'),\n      cssViewContentPane.cls(\"-contents\", isPopup),\n      dom.maybe(this._isRickRowing, () => cssStopRickRowingButton(\n        cssCloseIcon('CrossBig'),\n        dom.on('click', () => {\n          this._isRickRowing.set(false);\n          this._showBackgroundVideoPlayer.set(false);\n        }),\n        testId('gristdoc-stop-rick-rowing'),\n      )),\n      dom.domComputed(this._activeContent, (content) => {\n        return  (\n          content === 'code' ? dom.create(CodeEditorPanel, this) :\n          content === 'acl' ? dom.create(AccessRules, this) :\n          content === 'data' ? dom.create(RawDataPage, this) :\n          content === 'settings' ? dom.create(DocSettingsPage, this) :\n          content === 'webhook' ? dom.create(WebhookPage, this) :\n          content === 'GristDocTour' ? null :\n          (typeof content === 'object') ? dom.create(owner => {\n            // In case user changes a page, close the popup.\n            owner.autoDispose(this.activeViewId.addListener(content.close));\n            // In case the section is removed, close the popup.\n            content.viewSection.autoDispose({dispose: content.close});\n            return dom.create(RawDataPopup, this, content.viewSection, content.close);\n          }) :\n          dom.create((owner) => {\n            this.viewLayout = ViewLayout.create(owner, this, content);\n            this.viewLayout.maximized.addListener(n => this.maximizedSectionId.set(n));\n            owner.onDispose(() => this.viewLayout = null);\n            return this.viewLayout;\n          })\n        );\n      }),\n      dom.maybe(this._showBackgroundVideoPlayer, () => [\n        cssBackgroundVideo(\n          this._backgroundVideoPlayerHolder.get()?.buildDom(),\n          cssBackgroundVideo.cls('-fade-in-and-out', this._isRickRowing),\n          testId('gristdoc-background-video'),\n        ),\n      ]),\n    );\n  }\n\n  // Open the given page. Note that links to pages should use <a> elements together with setLinkUrl().\n  public openDocPage(viewId: IDocPage) {\n    return urlState().pushUrl({docPage: viewId});\n  }\n\n  public showTool(tool: typeof RightPanelTool.type): void {\n    this._rightPanelTool.set(tool);\n  }\n\n  /**\n   * Returns an object representing the position of the cursor, including the section. It will have\n   * fields { sectionId, rowId, fieldIndex }. Fields may be missing if no section is active.\n   */\n  public getCursorPos(): CursorPos {\n    const pos = {sectionId: this.viewModel.activeSectionId()};\n    const viewInstance = this.viewModel.activeSection.peek().viewInstance.peek();\n    return Object.assign(pos, viewInstance ? viewInstance.cursor.getCursorPos() : {});\n  }\n\n  public async onSetCursorPos(rowModel: BaseRowModel | undefined, fieldModel?: ViewFieldRec) {\n    return this.setCursorPos({\n      rowIndex: rowModel?._index() || 0,\n      fieldIndex: fieldModel?._index() || 0,\n      sectionId: fieldModel?.viewSection().getRowId(),\n    });\n  }\n\n  public async setCursorPos(cursorPos: CursorPos) {\n    if (cursorPos.sectionId && cursorPos.sectionId !== this.externalSectionId.get()) {\n      const desiredSection: ViewSectionRec = this.docModel.viewSections.getRowModel(cursorPos.sectionId);\n      // If the section id is 0, the section doesn't exist (can happen during undo/redo), and should\n      // be fixed there. For now ignore it, to not create empty sections or views (peeking a view will create it).\n      if (!desiredSection.id.peek()) {\n        return;\n      }\n      // If this is completely unknown section (without a parent), it is probably an import preview.\n      if (!desiredSection.parentId.peek() && !desiredSection.isRaw.peek()) {\n        const view = desiredSection.viewInstance.peek();\n        // Make sure we have a view instance here - it will prove our assumption that this is\n        // an import preview. Section might also be disconnected during undo/redo.\n        if (view && !view.isDisposed()) {\n          view.setCursorPos(cursorPos);\n          return;\n        }\n      }\n      if (desiredSection.view.peek().getRowId() !== this.activeViewId.get()) {\n        // This may be asynchronous. In other cases, the change is synchronous, and some code\n        // relies on it (doesn't wait for this function to resolve).\n        await this._switchToSectionId(cursorPos.sectionId);\n      } else if (desiredSection !== this.viewModel.activeSection.peek()) {\n        this.viewModel.activeSectionId(cursorPos.sectionId);\n      }\n    }\n    const viewInstance = this.viewModel.activeSection.peek().viewInstance.peek();\n    viewInstance?.setCursorPos(cursorPos);\n  }\n\n  /**\n   * Switch to the view/section and scroll to the record indicated by cursorPos. If cursorPos is\n   * null, then moves to a position best suited for optActionGroup (not yet implemented).\n   */\n  public async moveToCursorPos(cursorPos?: CursorPos, optActionGroup?: MinimalActionGroup): Promise<void> {\n    if (!cursorPos || !cursorPos.sectionId) {\n      // TODO We could come up with a suitable cursorPos here based on the action itself.\n      // This should only come up if trying to undo/redo after reloading a page (since the cursorPos\n      // associated with the action is only stored in memory of the current JS process).\n      // A function like `getCursorPosForActionGroup(ag)` would also be useful to jump to the best\n      // place from any action in the action log.\n      // When user deletes table from Raw Data view, the section id will be 0 and undoing that\n      // operation will move cursor to the empty section row (with id 0).\n      return;\n    }\n    try {\n      await this.setCursorPos(cursorPos);\n    } catch (e) {\n      reportError(e);\n    }\n  }\n\n  /**\n   * Process actions received from the server by forwarding them to `docData.receiveAction()` and\n   * pushing them to actionLog.\n   */\n  public onDocUserAction(message: CommDocUserAction) {\n    console.log(\"GristDoc.onDocUserAction\", message);\n    let schemaUpdated = false;\n    /**\n     * If an operation is applied successfully to a document, and then information about\n     * it is broadcast to clients, and one of those broadcasts has a failure (due to\n     * granular access control, which is client-specific), then that error is logged on\n     * the server and also sent to the client via an `error` field.  Under normal operation,\n     * there should be no such errors, but if they do arise it is best to make them as visible\n     * as possible.\n     */\n    if (message.data.error) {\n      reportError(new Error(message.data.error));\n      return;\n    }\n    if (this.docComm.isActionFromThisDoc(message)) {\n      const docActions = message.data.docActions;\n      for (let i = 0, len = docActions.length; i < len; i++) {\n        console.log(\"GristDoc applying #%d\", i, docActions[i]);\n        this.docData.receiveAction(docActions[i]);\n        this.docPluginManager.receiveAction(docActions[i]);\n\n        if (!schemaUpdated && isSchemaAction(docActions[i])) {\n          schemaUpdated = true;\n        }\n      }\n      // Add fromSelf property to actionGroup indicating if it's from the current session.\n      const actionGroup = message.data.actionGroup;\n      actionGroup.fromSelf = message.fromSelf || false;\n      // Push to the actionLog and the undoStack.\n      if (!actionGroup.internal) {\n        this._actionLog.pushAction(actionGroup);\n        this._undoStack.pushAction(actionGroup);\n        if (actionGroup.fromSelf) {\n          this._lastOwnActionGroup = actionGroup;\n        }\n      }\n      if (schemaUpdated) {\n        this.trigger('schemaUpdateAction', docActions);\n      }\n      this.docPageModel.updateCurrentDocUsage(message.data.docUsage);\n      this.trigger('onDocUserAction', docActions);\n    }\n  }\n\n  public getUndoStack() {\n    return this._undoStack;\n  }\n\n  /**\n   * Process usage and product received from the server by updating their respective\n   * observables.\n   */\n  public onDocUsageMessage(message: CommDocUsage) {\n    if (!this.docComm.isActionFromThisDoc(message)) {\n      return;\n    }\n\n    bundleChanges(() => {\n      this.docPageModel.updateCurrentDocUsage(message.data.docUsage);\n      this.docPageModel.currentProduct.set(message.data.product ?? null);\n    });\n  }\n\n  public onDocChatter(message: CommDocChatter) {\n    if (!this.docComm.isActionFromThisDoc(message) ||\n      !message.data.webhooks) {\n      return;\n    }\n    if (message.data.webhooks.type == 'webhookOverflowError') {\n      this.trigger('webhookOverflowError',\n        t('New changes are temporarily suspended. Webhooks queue overflowed.' +\n          ' Please check webhooks settings, remove invalid webhooks, and clean the queue.'),);\n    } else {\n      this.trigger('webhooks', message.data.webhooks);\n    }\n  }\n\n  public getTableModel(tableId: string): DataTableModel {\n    return this.docModel.dataTables[tableId];\n  }\n\n  // Get a DataTableModel, possibly wrapped to include diff data if a comparison is\n  // in effect.\n  public getTableModelMaybeWithDiff(tableId: string): DataTableModel {\n    const tableModel = this.getTableModel(tableId);\n    if (!this.comparison?.details) {\n      return tableModel;\n    }\n    // TODO: cache wrapped models and share between views.\n    return new DataTableModelWithDiff(tableModel, this.comparison.details);\n  }\n\n  /**\n   * Sends an action to create a new empty table and switches to that table's primary view.\n   */\n  public async addEmptyTable(): Promise<void> {\n    const name = await this._promptForName();\n    if (name === undefined) {\n      return;\n    }\n    const tableInfo = await this.docData.sendAction(['AddEmptyTable', name || null]);\n    await this.openDocPage(this.docModel.tables.getRowModel(tableInfo.id).primaryViewId());\n  }\n\n  /**\n   * Adds a view section described by val to the current page.\n   */\n  public async addWidgetToPage(val: IPageWidget) {\n    const docData = this.docModel.docData;\n    const viewName = this.viewModel.name.peek();\n    let tableId: string | null | undefined;\n    if (val.table === 'New Table') {\n      tableId = await this._promptForName();\n      if (tableId === undefined) {\n        return;\n      }\n    }\n    const res = await docData.bundleActions(\n      t(\"Added new linked section to view {{viewName}}\", {viewName}),\n      () => this.addWidgetToPageImpl(val, tableId ?? null)\n    );\n\n    // The newly-added section should be given focus.\n    this.viewModel.activeSectionId(res.sectionRef);\n\n    this._maybeShowEditCardLayoutTip(val.type).catch(reportError);\n  }\n\n  /**\n   * The actual implementation of addWidgetToPage\n   */\n  public async addWidgetToPageImpl(val: IPageWidget, tableId: string | null = null) {\n    const viewRef = this.activeViewId.get();\n    const tableRef = val.table === 'New Table' ? 0 : val.table;\n    const result = await this.docData.sendAction(\n      ['CreateViewSection', tableRef, viewRef, val.type, val.summarize ? val.columns : null, tableId]\n    );\n    if (val.type === 'chart') {\n      await this._ensureOneNumericSeries(result.sectionRef);\n    }\n    await this.saveLink(val.link, result.sectionRef);\n    return result;\n  }\n\n  /**\n   * Adds a new page (aka: view) with a single view section (aka: page widget) described by `val`.\n   */\n  public async addNewPage(val: IPageWidget) {\n    if (val.table === 'New Table') {\n      const name = await this._promptForName();\n      if (name === undefined) {\n        return;\n      }\n      const result = await this.docData.sendAction(['AddEmptyTable', name]);\n      await this.openDocPage(result.views[0].id);\n    } else {\n      let result: any;\n      await this.docData.bundleActions(`Add new page`, async () => {\n        result = await this.docData.sendAction(\n          ['CreateViewSection', val.table, 0, val.type, val.summarize ? val.columns : null, null]\n        );\n        if (val.type === 'chart') {\n          await this._ensureOneNumericSeries(result.sectionRef);\n        }\n      });\n      await this.openDocPage(result.viewRef);\n      // The newly-added section should be given focus.\n      this.viewModel.activeSectionId(result.sectionRef);\n\n      this._maybeShowEditCardLayoutTip(val.type).catch(reportError);\n    }\n  }\n\n  /**\n   * Opens a dialog to upload one or multiple files as tables and then switches to the first table's\n   * primary view.\n   */\n  public async uploadNewTable(): Promise<void> {\n    const uploadResult = await selectFiles({\n      docWorkerUrl: this.docComm.docWorkerUrl,\n      multiple: true\n    });\n    if (uploadResult) {\n      const dataSource = {uploadId: uploadResult.uploadId, transforms: []};\n      const importResult = await this.docComm.finishImportFiles(dataSource, [], {});\n      const tableId = importResult.tables[0].hiddenTableId;\n      const tableRowModel = this.docModel.dataTables[tableId].tableMetaRow;\n      await this.openDocPage(tableRowModel.primaryViewId());\n    }\n  }\n\n  public async saveViewSection(section: ViewSectionRec, newVal: IPageWidget) {\n    const docData = this.docModel.docData;\n    const oldVal: IPageWidget = toPageWidget(section);\n    const viewModel = section.view();\n    const colIds = section.viewFields().all().map((f) => f.column().colId());\n\n    if (isEqual(oldVal, newVal)) {\n      // nothing to be done\n      return section;\n    }\n\n    return await this.viewLayout!.freezeUntil(docData.bundleActions(\n      t(\"Saved linked section {{title}} in view {{name}}\", {title: section.title(), name: viewModel.name()}),\n      async () => {\n\n        // if table changes or a table is made a summary table, let's replace the view section by a\n        // new one, and return.\n        if (oldVal.table !== newVal.table || oldVal.summarize !== newVal.summarize) {\n          return await this._replaceViewSection(section, oldVal, newVal);\n        }\n\n        // if type changes, let's save it.\n        if (oldVal.type !== newVal.type) {\n          await section.parentKey.saveOnly(newVal.type);\n        }\n\n        // if grouped by column changes, let's use the specific user action.\n        if (!isEqual(oldVal.columns, newVal.columns)) {\n          await docData.sendAction(\n            ['UpdateSummaryViewSection', section.getRowId(), newVal.columns]\n          );\n          // Charts needs to keep view fields consistent across update.\n          if (newVal.type === 'chart' && oldVal.type === 'chart') {\n            await this.setSectionViewFieldsFromArray(section, colIds);\n          }\n        }\n\n        // update link\n        if (oldVal.link !== newVal.link) {\n          await this.saveLink(newVal.link);\n        }\n        return section;\n      },\n      {nestInActiveBundle: true}\n    ));\n  }\n\n  // Set section's viewFields to be colIds in that order. Omit any colum id that do not belong to\n  // section's table.\n  public async setSectionViewFieldsFromArray(section: ViewSectionRec, colIds: string[]) {\n\n    // remove old view fields\n    await Promise.all(section.viewFields.peek().all().map((viewField) => (\n      this.docModel.viewFields.sendTableAction(['RemoveRecord', viewField.id()])\n    )));\n\n    // create map\n    const mapColIdToColumn = new Map();\n    for (const col of section.table().columns().all()) {\n      mapColIdToColumn.set(col.colId(), col);\n    }\n\n    // If split series and/or x-axis do not exist any more in new table, update options to make them\n    // undefined\n    if (colIds.length) {\n      if (section.optionsObj.prop('multiseries')()) {\n        if (!mapColIdToColumn.has(colIds[0])) {\n          await section.optionsObj.prop('multiseries').saveOnly(false);\n        }\n        if (colIds.length > 1 && !mapColIdToColumn.has(colIds[1])) {\n          await section.optionsObj.prop('isXAxisUndefined').saveOnly(true);\n        }\n      } else if (!mapColIdToColumn.has(colIds[0])) {\n        await section.optionsObj.prop('isXAxisUndefined').saveOnly(true);\n      }\n    }\n\n    // adds new view fields; ignore colIds that do not exist in new table.\n    await Promise.all(colIds.map((colId, i) => {\n      if (!mapColIdToColumn.has(colId)) {\n        return;\n      }\n      const colInfo = {\n        parentId: section.id(),\n        colRef: mapColIdToColumn.get(colId).id(),\n        parentPos: i\n      };\n      const action = ['AddRecord', null, colInfo];\n      return this.docModel.viewFields.sendTableAction(action);\n    }));\n  }\n\n  // Save link for a given section, by default the active section.\n  public async saveLink(linkId: string, sectionId?: number) {\n    sectionId = sectionId || this.viewModel.activeSection.peek().getRowId();\n    const link = linkFromId(linkId);\n    if (link.targetColRef) {\n      const targetTable = this.docModel.viewSections.getRowModel(sectionId).table();\n      const targetCol = this.docModel.columns.getRowModel(link.targetColRef);\n      if (targetTable.id() !== targetCol.table().id()) {\n        // targetColRef is actually not a column in the target table.\n        // This should mean that the target table is a summary table (which didn't exist when the\n        // option was selected) and targetColRef is from the source table.\n        // Change it to the corresponding summary table column instead.\n        link.targetColRef = targetTable.columns().all().find(c => c.summarySourceCol() === link.targetColRef)!.id();\n      }\n    }\n    return this.docData.sendAction(\n      ['UpdateRecord', '_grist_Views_section', sectionId, {\n        linkSrcSectionRef: link.srcSectionRef,\n        linkSrcColRef: link.srcColRef,\n        linkTargetColRef: link.targetColRef\n      }]\n    );\n  }\n\n\n  // Returns the list of all the valid links to link from one of the sections in the active view to\n  // the page widget 'widget'.\n  public selectBy(widget: IPageWidget) {\n    const viewSections = this.viewModel.viewSections.peek().peek();\n    return selectBy(this.docModel, viewSections, widget);\n  }\n\n  // Fork the document if it is in prefork mode.\n  public async forkIfNeeded() {\n    if (this.docPageModel.isPrefork.get()) {\n      await this.docComm.forkAndUpdateUrl();\n    }\n  }\n\n  // Turn the given columns into empty columns, losing any data stored in them.\n  public async clearColumns(colRefs: number[], {keepType}: { keepType?: boolean } = {}): Promise<void> {\n    await this.docModel.columns.sendTableAction(\n      ['BulkUpdateRecord', colRefs, {\n        isFormula: colRefs.map(f => true),\n        formula: colRefs.map(f => ''),\n        ...(keepType ? {} : {\n          type: colRefs.map(f => 'Any'),\n          widgetOptions: colRefs.map(f => ''),\n          visibleCol: colRefs.map(f => null),\n          displayCol: colRefs.map(f => null),\n          rules: colRefs.map(f => null),\n        }),\n        // Set recalc settings to defaults when emptying a column.\n        recalcWhen: colRefs.map(f => RecalcWhen.DEFAULT),\n        recalcDeps: colRefs.map(f => null),\n      }]\n    );\n  }\n\n  // Convert the given columns to data, saving the calculated values and unsetting the formulas.\n  public async convertIsFormula(colRefs: number[], opts: { toFormula: boolean, noRecalc?: boolean }): Promise<void> {\n    return this.docModel.columns.sendTableAction(\n      ['BulkUpdateRecord', colRefs, {\n        isFormula: colRefs.map(f => opts.toFormula),\n        recalcWhen: colRefs.map(f => opts.noRecalc ? RecalcWhen.NEVER : RecalcWhen.DEFAULT),\n        recalcDeps: colRefs.map(f => null),\n      }]\n    );\n  }\n\n  // Updates formula for a column.\n  public async updateFormula(colRef: number, formula: string): Promise<void> {\n    return this.docModel.columns.sendTableAction(\n      ['UpdateRecord', colRef, {\n        formula,\n      }]\n    );\n  }\n\n  // Convert column to pure formula column.\n  public async convertToFormula(colRef: number, formula: string): Promise<void> {\n    return this.docModel.columns.sendTableAction(\n      ['UpdateRecord', colRef, {\n        isFormula: true,\n        formula,\n        recalcWhen: RecalcWhen.DEFAULT,\n        recalcDeps: null,\n      }]\n    );\n  }\n\n  // Convert column to data column with a trigger formula\n  public async convertToTrigger(colRefs: number, formula: string): Promise<void> {\n    return this.docModel.columns.sendTableAction(\n      ['UpdateRecord', colRefs, {\n        isFormula: false,\n        formula,\n        recalcWhen: RecalcWhen.DEFAULT,\n        recalcDeps: null,\n      }]\n    );\n  }\n\n  public getCsvLink() {\n    const params = this._getDocApiDownloadParams();\n    return this.docPageModel.appModel.api.getDocAPI(this.docId()).getDownloadCsvUrl(params);\n  }\n\n  public getXlsxActiveViewLink() {\n    const params = this._getDocApiDownloadParams();\n    return this.docPageModel.appModel.api.getDocAPI(this.docId()).getDownloadXlsxUrl(params);\n  }\n\n  public hasGranularAccessRules(): boolean {\n    const rulesTable = this.docData.getMetaTable('_grist_ACLRules');\n    // To check if there are rules, ignore the default no-op rule created for an older incarnation\n    // of ACLs. It exists in older documents, and is still created for new ones. We detect it by\n    // the use of the deprecated 'permissions' field, and not the new 'permissionsText' field.\n    return rulesTable.numRecords() > rulesTable.filterRowIds({permissionsText: '', permissions: 63}).length;\n  }\n\n  /**\n   * Move to the desired cursor position.  If colRef is supplied, the cursor will be\n   * moved to a field with that colRef.  Any linked sections that need their cursors\n   * moved in order to achieve the desired outcome are handled recursively.\n   * If setAsActiveSection is true, the section in cursorPos is set as the current\n   * active section.\n   */\n  public async recursiveMoveToCursorPos(\n    cursorPos: CursorPos,\n    setAsActiveSection: boolean,\n    silent: boolean = false): Promise<boolean> {\n    try {\n      if (!cursorPos.sectionId) {\n        throw new Error('sectionId required');\n      }\n      if (!cursorPos.rowId) {\n        throw new Error('rowId required');\n      }\n      const section = this.docModel.viewSections.getRowModel(cursorPos.sectionId);\n      if (!section.id.peek()) {\n        throw new Error(`Section ${cursorPos.sectionId} does not exist`);\n      }\n      const srcSection = section.linkSrcSection.peek();\n      if (srcSection.id.peek()) {\n        // We're in a linked section, so we need to recurse to make sure the row we want\n        // will be visible.\n        const linkTargetCol = section.linkTargetCol.peek();\n        let controller: any;\n        if (linkTargetCol.colId.peek()) {\n          const destTable = await this._getTableData(section);\n          controller = destTable.getValue(cursorPos.rowId, linkTargetCol.colId.peek());\n        } else {\n          controller = cursorPos.rowId;\n        }\n        const colId = section.linkSrcCol.peek().colId.peek();\n        let srcRowId: any;\n        const isSrcSummary = srcSection.table.peek().summarySource.peek().id.peek();\n        if (!colId && !isSrcSummary) {\n          // Simple case - source linked by rowId, not a summary.\n          if (isList(controller)) {\n            // Should be a reference list. Pick the first reference.\n            controller = controller[1];  // [0] is the L type code, [1] is the first value\n          }\n          srcRowId = controller;\n        } else {\n          const srcTable = await this._getTableData(srcSection);\n          const query: ClientQuery = {tableId: srcTable.tableId, filters: {}, operations: {}};\n          if (colId) {\n            query.operations[colId] = isRefListType(section.linkSrcCol.peek().type.peek()) ? 'intersects' : 'in';\n            query.filters[colId] = isList(controller) ? controller.slice(1) : [controller];\n          } else {\n            // must be a summary -- otherwise dealt with earlier.\n            const destTable = await this._getTableData(section);\n            for (const srcCol of srcSection.table.peek().groupByColumns.peek()) {\n              const filterCol = srcCol.summarySource.peek();\n              const filterColId = filterCol.colId.peek();\n              controller = destTable.getValue(cursorPos.rowId, filterColId);\n              // If the source groupby column is a ChoiceList or RefList, then null or '' in the summary table\n              // should match against an empty list in the source table.\n              query.operations[filterColId] = isListType(filterCol.type.peek()) && !controller ? 'empty' : 'in';\n              query.filters[filterColId] = isList(controller) ? controller.slice(1) : [controller];\n            }\n          }\n          srcRowId = srcTable.getRowIds().find(getFilterFunc(this.docData, query));\n        }\n        if (!srcRowId || typeof srcRowId !== 'number') {\n          throw new Error('cannot trace rowId');\n        }\n        await this.recursiveMoveToCursorPos({\n          rowId: srcRowId,\n          sectionId: srcSection.id.peek(),\n        }, false, silent);\n      }\n      const view: ViewRec = section.view.peek();\n      const docPage: ViewDocPage = section.isRaw.peek() ? \"data\" : view.getRowId();\n      if (docPage != this.activeViewId.get()) {\n        await this.openDocPage(docPage);\n      }\n      if (setAsActiveSection) {\n        view.activeSectionId(cursorPos.sectionId);\n      }\n      const fieldIndex = cursorPos.fieldIndex;\n      const viewInstance = await waitObs(section.viewInstance);\n      if (!viewInstance) {\n        throw new Error('view not found');\n      }\n      // Give any synchronous initial cursor setting a chance to happen.\n      await delay(0);\n      viewInstance.setCursorPos({...cursorPos, fieldIndex});\n      // TODO: column selection not working on card/detail view, or getting overridden -\n      // look into it (not a high priority for now since feature not easily discoverable\n      // in this view).\n\n      // even though the cursor is at right place, the scroll could not have yet happened\n      // wait for a bit (scroll is done in a setTimeout 0)\n      await delay(0);\n      return true;\n    } catch (e) {\n      console.debug(`_recursiveMoveToCursorPos(${JSON.stringify(cursorPos)}): ${e}`);\n      if (!silent) {\n        throw new UserError('There was a problem finding the desired cell.');\n      }\n      return false;\n    }\n  }\n\n  /**\n   * Opens up an editor at cursor position\n   * @param input Optional. Cell's initial value\n   */\n  public async activateEditorAtCursor(options?: { init?: string, state?: any }) {\n    const view = await this._waitForView();\n    view?.activateEditorAtCursor(options);\n  }\n\n  /**\n   * Renames table. Method exposed primarily for tests.\n   */\n  public async renameTable(tableId: string, newTableName: string) {\n    const tableRec = this.docModel.visibleTables.all().find(tb => tb.tableId.peek() === tableId);\n    if (!tableRec) {\n      throw new UserError(`No table with id ${tableId}`);\n    }\n    await tableRec.tableName.saveOnly(newTableName);\n  }\n\n  /**\n   * Opens popup with a section data (used by Raw Data view).\n   */\n  public async openPopup(hash: HashLink) {\n    // We can only open a popup for a section.\n    if (!hash.sectionId) {\n      return;\n    }\n    // We might open popup either for a section in this view or some other section (like Raw Data Page).\n    if (this.viewModel.viewSections.peek().peek().some(s => s.id.peek() === hash.sectionId)) {\n      if (this.viewLayout) {\n        this.viewLayout.previousSectionId = this.viewModel.activeSectionId.peek();\n      }\n      this.viewModel.activeSectionId(hash.sectionId);\n      // If the anchor link is valid, set the cursor.\n      if (hash.colRef && hash.rowId) {\n        const activeSection = this.viewModel.activeSection.peek();\n        const fieldIndex = activeSection.viewFields.peek().all().findIndex(f => f.colRef.peek() === hash.colRef);\n        if (fieldIndex >= 0) {\n          const view = await this._waitForView(activeSection);\n          view?.setCursorPos({rowId: hash.rowId, fieldIndex});\n        }\n      }\n      this.viewLayout?.maximized.set(hash.sectionId);\n      return;\n    }\n    // We will borrow active viewModel and will trick him into believing that\n    // the section from the link is his viewSection and it is active. Fortunately\n    // he doesn't care. After popup is closed, we will restore the original.\n    const prevSection = this.viewModel.activeSection.peek();\n    this.viewModel.activeSectionId(hash.sectionId);\n    // Now we have view section we want to show in the popup.\n    const popupSection = this.viewModel.activeSection.peek();\n    // We need to make it active, so that cursor on this section will be the\n    // active one. This will change activeViewSectionId on a parent view of this section,\n    // which might be a diffrent view from what we currently have. If the section is\n    // a raw data section it will use `EmptyRowModel` as raw sections don't have parents.\n    popupSection.hasFocus(true);\n    this._rawSectionOptions.set({\n      hash,\n      viewSection: popupSection,\n      close: () => {\n        // In case we are already close, do nothing.\n        if (!this._rawSectionOptions.get()) {\n          return;\n        }\n        if (popupSection !== prevSection) {\n          // We need to blur raw view section. Otherwise it will automatically be opened\n          // on raw data view. Note: raw data section doesn't have its own view, it uses\n          // empty row model as a parent (which feels like a hack).\n          if (!popupSection.isDisposed()) {\n            popupSection.hasFocus(false);\n          }\n          // We need to restore active viewSection for a view that we borrowed.\n          // When this popup was opened we tricked active view by setting its activeViewSection\n          // to our viewSection (which might be a completely diffrent section or a raw data section) not\n          // connected to this view.\n          if (!prevSection.isDisposed()) {\n            prevSection.hasFocus(true);\n          }\n        }\n        // Clearing popup data will close this popup.\n        this._rawSectionOptions.set(null);\n      }\n    });\n    // If the anchor link is valid, set the cursor.\n    if (hash.colRef && hash.rowId) {\n      const fieldIndex = popupSection.viewFields.peek().all().findIndex(f => f.colRef.peek() === hash.colRef);\n      if (fieldIndex >= 0) {\n        const view = await this._waitForView(popupSection);\n        view?.setCursorPos({rowId: hash.rowId, fieldIndex});\n      }\n    }\n  }\n\n  /**\n   * Starts playing the music video for Never Gonna Give You Up in the background.\n   */\n  public async playRickRollVideo() {\n    const backgroundVideoPlayer = this._backgroundVideoPlayerHolder.get();\n    if (!backgroundVideoPlayer) {\n      return;\n    }\n\n    await backgroundVideoPlayer.isLoaded();\n    backgroundVideoPlayer.play();\n\n    const setVolume = async (start: number, end: number, step: number) => {\n      let volume: number;\n      const condition = start <= end\n        ? () => volume <= end\n        : () => volume >= end;\n      const afterthought = start <= end\n        ? () => volume += step\n        : () => volume -= step;\n      for (volume = start; condition(); afterthought()) {\n        backgroundVideoPlayer.setVolume(volume);\n        await delay(250);\n      }\n    };\n\n    await setVolume(0, 100, 5);\n\n    await delay(190 * 1000);\n    if (!this._isRickRowing.get()) {\n      return;\n    }\n\n    await setVolume(100, 0, 5);\n\n    this._isRickRowing.set(false);\n    this._showBackgroundVideoPlayer.set(false);\n  }\n\n  /**\n   * Waits for a view to be ready\n   */\n  private async _waitForView(popupSection?: ViewSectionRec) {\n    const sectionToCheck = popupSection ?? this.viewModel.activeSection.peek();\n    // For pages like ACL's, there isn't a view instance to wait for.\n    if (!sectionToCheck.getRowId()) {\n      return null;\n    }\n\n    async function singleWait(s: ViewSectionRec): Promise<BaseView> {\n      const view = await waitObs(\n        sectionToCheck.viewInstance,\n        vsi => Boolean(vsi && !vsi.isDisposed())\n      );\n      return view!;\n    }\n\n    let view = await singleWait(sectionToCheck);\n    if (view.isDisposed()) {\n      // If the view is disposed (it can happen, as wait is not reliable enough, because it uses\n      // subscription for testing the predicate, which might dispose object before we have a chance to test it).\n      // This can happen when section is recreating itself on a popup.\n      if (popupSection) {\n        view = await singleWait(popupSection);\n      }\n      if (view.isDisposed()) {\n        return null;\n      }\n    }\n    await view.getLoadingDonePromise();\n    // Wait extra bit for scroll to happen.\n    await delay(0);\n    return view;\n  }\n\n  private _getToolContent(tool: typeof RightPanelTool.type): IExtraTool | null {\n    switch (tool) {\n      case 'docHistory': {\n        return {icon: 'Log', label: 'Document History', content: this._docHistory};\n      }\n      case 'validations': {\n        const content = this._rightPanelTabs.get(\"Validate Data\");\n        return content ? {icon: 'Validation', label: 'Validation Rules', content} : null;\n      }\n      case 'discussion': {\n        return {icon: 'Chat', label: this._discussionPanel.buildMenu(), content: this._discussionPanel};\n      }\n      case 'none':\n      default: {\n        return null;\n      }\n    }\n  }\n\n  private async _maybeShowEditCardLayoutTip(selectedWidgetType: IWidgetType) {\n    if (\n      // Don't show the tip if a non-card widget was selected.\n      !['single', 'detail'].includes(selectedWidgetType) ||\n      // Or if we've already seen it.\n      this.behavioralPromptsManager.hasSeenTip('editCardLayout')\n    ) {\n      return;\n    }\n\n    // Open the right panel to the widget subtab.\n    commands.allCommands.viewTabOpen.run();\n\n    // Wait for the right panel to finish animation if it was collapsed before.\n    await commands.allCommands.rightPanelOpen.run();\n\n    const editLayoutButton = document.querySelector('.behavioral-prompt-edit-card-layout');\n    if (!editLayoutButton) {\n      throw new Error('GristDoc failed to find edit card layout button');\n    }\n\n    this.behavioralPromptsManager.showTip(editLayoutButton, 'editCardLayout', {\n      popupOptions: {\n        placement: 'left-start',\n      }\n    });\n  }\n\n  private async _promptForName() {\n    return await invokePrompt(\"Table name\", \"Create\", '', \"Default table name\");\n  }\n\n  private async _replaceViewSection(\n    section: ViewSectionRec,\n    oldVal: IPageWidget,\n    newVal: IPageWidget\n  ) {\n\n    const docModel = this.docModel;\n    const viewModel = section.view();\n    const docData = this.docModel.docData;\n    const options = section.options();\n    const colIds = section.viewFields().all().map((f) => f.column().colId());\n    const chartType = section.chartType();\n    const sectionTheme = section.theme();\n\n    // we must read the current layout from the view layout because it can override the one in\n    // `section.layoutSpec` (in particular it provides a default layout when missing from the\n    // latter).\n    const layoutSpec = this.viewLayout!.layoutSpec();\n\n    const sectionTitle = section.title();\n    const sectionId = section.id();\n\n    // create a new section\n    const sectionCreationResult = await this.addWidgetToPageImpl(newVal);\n\n    // update section name\n    const newSection: ViewSectionRec = docModel.viewSections.getRowModel(sectionCreationResult.sectionRef);\n    await newSection.title.saveOnly(sectionTitle);\n\n    // replace old section id with new section id in the layout spec and save\n    const newLayoutSpec = cloneDeepWith(layoutSpec, (val) => {\n      if (typeof val === 'object' && val.leaf === sectionId) {\n        return {...val, leaf: newSection.id()};\n      }\n    });\n    await viewModel.layoutSpec.saveOnly(JSON.stringify(newLayoutSpec));\n\n    // persist options\n    await newSection.options.saveOnly(options);\n\n    // charts needs to keep view fields consistent across updates\n    if (oldVal.type === 'chart' && newVal.type === 'chart') {\n      await this.setSectionViewFieldsFromArray(newSection, colIds);\n    }\n\n    // update theme, and chart type\n    await newSection.theme.saveOnly(sectionTheme);\n    await newSection.chartType.saveOnly(chartType);\n\n    // The newly-added section should be given focus.\n    this.viewModel.activeSectionId(newSection.getRowId());\n\n    // remove old section\n    await docData.sendAction(['RemoveViewSection', sectionId]);\n    return newSection;\n  }\n\n  /**\n   * Helper called before an action is sent to the server. It saves cursor position to come back to\n   * in case of Undo.\n   */\n  private _onSendActionsStart(ev: { cursorPos: CursorPos }) {\n    this._lastOwnActionGroup = null;\n    ev.cursorPos = this.getCursorPos();\n  }\n\n  /**\n   * Helper called when server responds to an action. It attaches the saved cursor position to the\n   * received action (if any), and stores also the resulting position.\n   */\n  private _onSendActionsEnd(ev: { cursorPos: CursorPos }) {\n    const a = this._lastOwnActionGroup;\n    if (a) {\n      a.cursorPos = ev.cursorPos;\n      if (a.rowIdHint) {\n        a.cursorPos.rowId = a.rowIdHint;\n      }\n    }\n  }\n\n  private _getDocApiDownloadParams() {\n    const activeSection = this.viewModel.activeSection();\n    const filters = activeSection.activeFilters.get().map(filterInfo => ({\n      colRef: filterInfo.fieldOrColumn.origCol().origColRef(),\n      filter: filterInfo.filter()\n    }));\n    const linkingFilter: FilterColValues = activeSection.linkingFilter();\n\n    return {\n      viewSection: this.viewModel.activeSectionId(),\n      tableId: activeSection.table().tableId(),\n      activeSortSpec: JSON.stringify(activeSection.activeSortSpec()),\n      filters: JSON.stringify(filters),\n      linkingFilter: JSON.stringify(linkingFilter),\n    };\n  }\n\n  /**\n   * Switch to a given sectionId, wait for it to load, and return a Promise for the instantiated\n   * viewInstance (such as an instance of GridView or DetailView).\n   */\n  private async _switchToSectionId(sectionId: number) {\n    const section: ViewSectionRec = this.docModel.viewSections.getRowModel(sectionId);\n    if (section.isRaw.peek()) {\n      // This is raw data view\n      await urlState().pushUrl({docPage: 'data'});\n      this.viewModel.activeSectionId(sectionId);\n    } else if (section.isVirtual.peek()) {\n      // this is a virtual table, and therefore a webhook page (that is the only\n      // place virtual tables are used so far)\n      await urlState().pushUrl({docPage: 'webhook'});\n      this.viewModel.activeSectionId(sectionId);\n    } else {\n      const view: ViewRec = section.view.peek();\n      await this.openDocPage(view.getRowId());\n      view.activeSectionId(sectionId);  // this.viewModel will reflect this with a delay.\n    }\n\n    // Returns the value of section.viewInstance() as soon as it is truthy.\n    return waitObs(section.viewInstance);\n  }\n\n  private async _getTableData(section: ViewSectionRec): Promise<TableData> {\n    const viewInstance = await waitObs(section.viewInstance);\n    if (!viewInstance) {\n      throw new Error('view not found');\n    }\n    await viewInstance.getLoadingDonePromise();\n    const table = this.docData.getTable(section.table.peek().tableId.peek());\n    if (!table) {\n      throw new Error('no section table');\n    }\n    return table;\n  }\n\n  /**\n   * Convert a url hash to a cursor position.\n   */\n  private _getCursorPosFromHash(hash: HashLink): CursorPos {\n    const cursorPos: CursorPos = {rowId: hash.rowId, sectionId: hash.sectionId};\n    if (cursorPos.sectionId != undefined && hash.colRef !== undefined) {\n      // translate colRef to a fieldIndex\n      const section = this.docModel.viewSections.getRowModel(cursorPos.sectionId);\n      const fieldIndex = section.viewFields.peek().all()\n        .findIndex(x => x.colRef.peek() == hash.colRef);\n      if (fieldIndex >= 0) {\n        cursorPos.fieldIndex = fieldIndex;\n      }\n    }\n    return cursorPos;\n  }\n\n  /**\n   * Returns whether a doc tour should automatically be started.\n   *\n   * Currently, tours are started if a GristDocTour table exists and the user hasn't\n   * seen the tour before.\n   */\n  private _shouldAutoStartDocTour(): boolean {\n    if (this._disableAutoStartingTours || this.docModel.isTutorial()) {\n      return false;\n    }\n\n    return this.docModel.hasDocTour() && !this._seenDocTours.get()?.includes(this.docId());\n  }\n\n  /**\n   * Returns whether a welcome tour should automatically be started.\n   *\n   * Currently, tours are started for first-time users on a personal org, as long as\n   * a doc tutorial or tour isn't available.\n   */\n  private _shouldAutoStartWelcomeTour(): boolean {\n    // If a doc tutorial or tour are available, leave the welcome tour for another\n    // doc (e.g. a new one).\n    if (this._disableAutoStartingTours || this.docModel.isTutorial() || this.docModel.hasDocTour()) {\n      return false;\n    }\n\n    // Only show the tour if one is on a personal org and can edit. This excludes templates (on\n    // the Templates org, which may have their own tour) and team sites (where user's intended\n    // role is often other than document creator).\n    const appModel = this.docPageModel.appModel;\n    if (!appModel.currentOrg?.owner || this.isReadonly.get()) {\n      return false;\n    }\n    // Use the showGristTour pref if set; otherwise default to true for anonymous users, and false\n    // for real returning users.\n    return this._showGristTour.get() ?? (!appModel.currentValidUser);\n  }\n\n  /**\n   * Makes sure that the first y-series (ie: the view fields at index 1) is a numeric series. Does\n   * not handle chart with the group by option on: it is only intended to be used to make sure that\n   * newly created chart do have a visible y series.\n   */\n  private async _ensureOneNumericSeries(id: number) {\n    const viewSection = this.docModel.viewSections.getRowModel(id);\n    const viewFields = viewSection.viewFields.peek().peek();\n\n    // If no y-series, then simply return.\n    if (viewFields.length === 1) {\n      return;\n    }\n\n    const field = viewSection.viewFields.peek().peek()[1];\n    if (isNumericOnly(viewSection.chartTypeDef.peek()) &&\n      !isNumericLike(field.column.peek())) {\n      const actions: UserAction[] = [];\n\n      // remove non-numeric field\n      actions.push(['RemoveRecord', field.id.peek()]);\n\n      // add new field\n      const newField = viewSection.hiddenColumns.peek().find((col) => isNumericLike(col));\n      if (newField) {\n        const colInfo = {\n          parentId: viewSection.id.peek(),\n          colRef: newField.id.peek(),\n        };\n        actions.push(['AddRecord', null, colInfo]);\n      }\n\n      // send actions\n      await this.docModel.viewFields.sendTableActions(actions);\n    }\n  }\n\n  private _handleTriggerQueueOverflowMessage() {\n    this.listenTo(this, 'webhookOverflowError', (err: any) => {\n      this.app.topAppModel.notifier.createNotification({\n        message: err.toString(),\n        canUserClose: false,\n        level: \"error\",\n        badgeCounter: true,\n        expireSec: 5,\n        key: 'webhookOverflowError',\n        actions: [{\n          label: t('go to webhook settings'), action: async () => {\n            await urlState().pushUrl({docPage: 'webhook'});\n          }\n        }]\n      });\n    });\n  }\n}\n\nasync function finalizeAnchor() {\n  await urlState().pushUrl({hash: {}}, {replace: true});\n  setTestState({anchorApplied: true});\n}\n\nconst cssViewContentPane = styled('div', `\n  --view-content-page-margin: 12px;\n  flex: auto;\n  display: flex;\n  flex-direction: column;\n  overflow: visible;\n  position: relative;\n  min-width: 240px;\n  margin: var(--view-content-page-margin, 12px);\n  @media ${mediaSmall} {\n    & {\n      margin: 4px;\n    }\n  }\n  @media print {\n    & {\n      margin: 0px;\n    }\n  }\n  &-contents {\n    margin: 0px;\n    overflow: hidden;\n  }\n`);\n\nconst fadeInAndOut = keyframes(`\n  0% {\n    opacity: 0.01;\n  }\n  5%, 95% {\n    opacity: 0.2;\n  }\n  100% {\n    opacity: 0.01;\n  }\n`);\n\nconst cssBackgroundVideo = styled('div', `\n  position: fixed;\n  top: 0;\n  right: 0;\n  height: 100%;\n  width: 100%;\n  opacity: 0;\n  pointer-events: none;\n\n  &-fade-in-and-out {\n    animation: ${fadeInAndOut} 200s;\n  }\n`);\n\nconst cssYouTubePlayer = styled('div', `\n  position: absolute;\n  width: 450%;\n  height: 450%;\n  top: -175%;\n  left: -175%;\n\n  @media ${mediaXSmall} {\n    & {\n      width: 450%;\n      height: 450%;\n      top: -175%;\n      left: -175%;\n    }\n  }\n`);\n\nconst cssStopRickRowingButton = styled('div', `\n  position: fixed;\n  top: 0;\n  right: 0;\n  padding: 8px;\n  margin: 16px;\n  border-radius: 24px;\n  background-color: ${theme.toastBg};\n  cursor: pointer;\n`);\n\nconst cssCloseIcon = styled(icon, `\n  height: 24px;\n  width: 24px;\n  --icon-color: ${theme.toastControlFg};\n`);\n","/**\n * Importer manages an import files to Grist tables\n * TODO: hidden tables should be also deleted on page refresh, error...\n */\n// tslint:disable:no-console\n\nimport {GristDoc} from 'app/client/components/GristDoc';\nimport {buildParseOptionsForm, ParseOptionValues} from 'app/client/components/ParseOptions';\nimport {PluginScreen} from 'app/client/components/PluginScreen';\nimport {makeTestId} from 'app/client/lib/domUtils';\nimport {FocusLayer} from 'app/client/lib/FocusLayer';\nimport {ImportSourceElement} from 'app/client/lib/ImportSourceElement';\nimport {makeT} from 'app/client/lib/localization';\nimport {fetchURL, isDriveUrl, selectFiles, uploadFiles} from 'app/client/lib/uploads';\nimport {reportError} from 'app/client/models/AppModel';\nimport {ColumnRec, ViewFieldRec, ViewSectionRec} from 'app/client/models/DocModel';\nimport {SortedRowSet} from 'app/client/models/rowset';\nimport {buildHighlightedCode} from 'app/client/ui/CodeHighlight';\nimport {openFilePicker} from 'app/client/ui/FileDialog';\nimport {ACCESS_DENIED, AUTH_INTERRUPTED, canReadPrivateFiles, getGoogleCodeForReading} from 'app/client/ui/googleAuth';\nimport {cssPageIcon} from 'app/client/ui/LeftPanelCommon';\nimport {hoverTooltip, overflowTooltip} from 'app/client/ui/tooltips';\nimport {bigBasicButton, bigPrimaryButton, textButton} from 'app/client/ui2018/buttons';\nimport {labeledSquareCheckbox} from 'app/client/ui2018/checkbox';\nimport {testId as baseTestId, theme, vars} from 'app/client/ui2018/cssVars';\nimport {icon} from 'app/client/ui2018/icons';\nimport {loadingSpinner} from 'app/client/ui2018/loaders';\nimport {IOptionFull, menuDivider, menuItem, multiSelect, selectMenu, selectOption} from 'app/client/ui2018/menus';\nimport {cssModalTitle} from 'app/client/ui2018/modals';\nimport {openFormulaEditor} from 'app/client/widgets/FormulaEditor';\nimport {\n  DataSourceTransformed,\n  DestId,\n  ImportResult,\n  ImportTableResult,\n  MergeOptions,\n  MergeOptionsMap,\n  MergeStrategy,\n  NEW_TABLE,\n  SKIP_TABLE,\n  TransformColumn,\n  TransformRule,\n  TransformRuleMap\n} from 'app/common/ActiveDocAPI';\nimport {DisposableWithEvents} from 'app/common/DisposableWithEvents';\nimport {byteString, not} from 'app/common/gutil';\nimport {FetchUrlOptions, UploadResult} from 'app/common/uploads';\nimport {ParseOptions, ParseOptionSchema} from 'app/plugin/FileParserAPI';\nimport {\n  Computed,\n  Disposable,\n  dom,\n  DomContents,\n  fromKo,\n  Holder,\n  IDisposable,\n  MultiHolder,\n  MutableObsArray,\n  obsArray,\n  Observable,\n  styled,\n  UseCBOwner\n} from 'grainjs';\nimport debounce = require('lodash/debounce');\n\nconst t = makeT('Importer');\n// Custom testId that can be appended conditionally.\nconst testId = makeTestId('test-importer-');\n\n\n// We expect a function for creating the preview GridView, to avoid the need to require the\n// GridView module here. That brings many dependencies, making a simple test fixture difficult.\ntype CreatePreviewFunc = (vs: ViewSectionRec) => GridView;\ntype GridView = IDisposable & {viewPane: HTMLElement, sortedRows: SortedRowSet, listenTo: (...args: any[]) => void};\nconst TABLE_MAPPING = 1;\nconst COLUMN_MAPPING = 2;\ntype ViewType = typeof TABLE_MAPPING | typeof COLUMN_MAPPING;\n\n/**\n * Information returned by the backend of the current import state, and how the table and sections look there.\n * Also contains some UI state, so it is updated with the data that comes from the backend.\n */\nexport interface SourceInfo {\n  /** Table id that holds the imported data. */\n  hiddenTableId: string;\n  /** Uploaded file index */\n  uploadFileIndex: number;\n  /** Table name that was figured out by the backend. File name or tab in excel name */\n  origTableName: string;\n  /**\n   * Section that contains only imported columns. It is not shown to the user.\n   * Table besides the imported data have formula columns that are used to finalize import. Those formula\n   * columns are not part of this section.\n   */\n  sourceSection: ViewSectionRec;\n  /**\n   * A viewSection containing transform (formula) columns pointing to the original source columns.\n   * When user selects New table, they are basically formulas pointing to the source columns.\n   * When user selects Existing table, new formula columns are created that look like the selected table, and this\n   * section contains those formula columns.\n   */\n  transformSection: Observable<ViewSectionRec|null>;\n  /** The destination table id, selected by the user. Can be null for skip and empty string for `New table`  */\n  destTableId: Observable<DestId>;\n  /** True if there is at least one request in progress to create a new transform section. */\n  isLoadingSection: Observable<boolean>;\n  /** Reference to last promise for the GenImporterView action (which creates `transformSection`). */\n  lastGenImporterViewPromise: Promise<any>|null;\n  /** Selected view, can be table mapping or column mapping, used only in UI. */\n  selectedView: Observable<ViewType>;\n  /** List of columns that were customized (have custom formulas) */\n  customizedColumns: Observable<Set<string>>;\n}\n\n/** Changes the customization flag for the column */\nfunction toggleCustomized(info: SourceInfo, colId: string, on: boolean): void {\n  const customizedColumns = info.customizedColumns.get();\n  if (!on) {\n    customizedColumns.delete(colId);\n  } else {\n    customizedColumns.add(colId);\n  }\n  info.customizedColumns.set(new Set(customizedColumns));\n}\n\n\n/**\n * UI state for each imported table (file). Maps table id to the info object.\n */\ninterface MergeOptionsStateMap {\n  [hiddenTableId: string]: MergeOptionsState|undefined;\n}\n\n/**\n * UI state of merge options for a SourceInfo.\n */\ninterface MergeOptionsState {\n  /**\n   * Whether to update existing records or only add new ones. If false, mergeCols is empty.\n   */\n  updateExistingRecords: Observable<boolean>;\n  /**\n   * List of column ids to merge on if user set `updateExistingRecords` to true. Those are columns from the\n   * target table.\n   */\n  mergeCols: MutableObsArray<string>;\n  /**\n   * Merge strategy to use, not used currently.\n   */\n  mergeStrategy: Observable<MergeStrategy>;\n  /**\n   * Whether mergeCols contains invalid columns (set in the code to show error message).\n   */\n  hasInvalidMergeCols: Observable<boolean>;\n}\n\n/**\n * Imports using the given plugin importer.\n */\nexport async function selectAndImport(\n  gristDoc: GristDoc,\n  imports: ImportSourceElement[],\n  importSourceElem: ImportSourceElement,\n  createPreview: CreatePreviewFunc\n) {\n  // HACK: The url plugin does not support importing from google drive, and we don't want to\n  // ask a user for permission to access all his files (needed to download a single file from an URL).\n  // So to have a nice user experience, we will switch to the built-in google drive plugin and allow\n  // user to chose a file manually.\n  // Suggestion for the future is:\n  // (1) ask the user for the greater permission,\n  // (2) detect when the permission is not granted, and open the picker-based plugin in that case.\n  try {\n    // Importer disposes itself when its dialog is closed, so we do not take ownership of it.\n    await Importer.create(null, gristDoc, importSourceElem, createPreview).pickAndUploadSource(null);\n  } catch(err1) {\n    // If the url was a Google Drive Url, run the google drive plugin.\n    if (!(err1 instanceof GDriveUrlNotSupported)) {\n      reportError(err1);\n    } else {\n      const gdrivePlugin = imports.find((p) => p.plugin.definition.id === 'builtIn/gdrive' && p !== importSourceElem);\n      if (!gdrivePlugin) {\n        reportError(err1);\n      } else {\n        try {\n          await Importer.create(null, gristDoc, gdrivePlugin, createPreview).pickAndUploadSource(null);\n        } catch(err2) {\n          reportError(err2);\n        }\n      }\n    }\n  }\n}\n\n/**\n * Imports from file.\n */\nexport async function importFromFile(gristDoc: GristDoc, createPreview: CreatePreviewFunc) {\n  // In case of using built-in file picker we want to get upload result before instantiating Importer\n  // because if the user dismisses the dialog without picking a file,\n  // there is no good way to detect this and dispose Importer.\n  let uploadResult: UploadResult|null = null;\n  // Use the built-in file picker. On electron, it uses the native file selector (without\n  // actually uploading anything), which is why this requires a slightly different flow.\n  const files: File[] = await openFilePicker({multiple: true});\n  // Important to fork first before trying to import, so we end up uploading to a\n  // consistent doc worker.\n  await gristDoc.forkIfNeeded();\n  const label = files.map(f => f.name).join(', ');\n  const size = files.reduce((acc, f) => acc + f.size, 0);\n  const app = gristDoc.app.topAppModel.appObs.get();\n  const progress = app ? app.notifier.createProgressIndicator(label, byteString(size)) : null;\n  const onProgress = (percent: number) => progress && progress.setProgress(percent);\n  try {\n    onProgress(0);\n    uploadResult = await uploadFiles(files, {docWorkerUrl: gristDoc.docComm.docWorkerUrl,\n                                              sizeLimit: 'import'}, onProgress);\n    onProgress(100);\n  } finally {\n    if (progress) {\n      progress.dispose();\n    }\n  }\n  // Importer disposes itself when its dialog is closed, so we do not take ownership of it.\n  await Importer.create(null, gristDoc, null, createPreview).pickAndUploadSource(uploadResult);\n}\n\n\n/**\n * Importer manages an import files to Grist tables and shows Preview\n */\nexport class Importer extends DisposableWithEvents {\n\n  private _docComm = this._gristDoc.docComm;\n  private _uploadResult?: UploadResult;\n\n  private _screen: PluginScreen;\n  private _optionsScreenHolder = Holder.create(this);\n  /**\n   * Merge information (for updating existing rows).\n   */\n  private _mergeOptions: MergeOptionsStateMap = {};\n  /**\n   * Parsing options (for parsing the file), passed to the backend directly.\n   */\n  private _parseOptions = Observable.create<ParseOptions>(this, {});\n  /**\n   * Info about the data that was parsed from the imported files (or tabs in excel).\n   */\n  private _sourceInfoArray = Observable.create<SourceInfo[]>(this, []);\n  /**\n   * Currently selected table to import (a file or a tab in excel).\n   */\n  private _sourceInfoSelected = Observable.create<SourceInfo|null>(this, null);\n\n  // Owner of the observables in the _sourceInfoArray\n  private readonly _sourceInfoHolder = Holder.create(this);\n\n  // Holder for the column mapping formula editor.\n  private readonly _formulaEditorHolder = Holder.create(this);\n\n  /**\n   * Helper for the preview section (the transformSection from the backend). The naming is misleading a bit, sorry\n   * about that, but this transform section is shown to the user as a Grid.\n   *\n   * We need a helper to make sure section is in good state before showing it to the user.\n   */\n  private _previewViewSection: Observable<ViewSectionRec|null> =\n    Computed.create(this, this._sourceInfoSelected, (use, info) => {\n      if (!info) { return null; }\n\n      const isLoading = use(info.isLoadingSection);\n      if (isLoading) { return null; }\n\n      const viewSection = use(info.transformSection);\n      return viewSection && !viewSection.isDisposed() && !use(viewSection._isDeleted) ? viewSection : null;\n    });\n\n  /**\n   * True if there is at least one request in progress to generate an import diff.\n   */\n  private _isLoadingDiff = Observable.create(this, false);\n  // Promise for the most recent generateImportDiff action.\n  private _lastGenImportDiffPromise: Promise<any>|null = null;\n\n  private _debouncedUpdateDiff = debounce(this._updateDiff, 1000, {leading: true, trailing: true});\n\n  /**\n   * Flag that is set when _updateImportDiff is called, and unset when _debouncedUpdateDiff begins executing.\n   *\n   * This is a workaround until Lodash's next release, which supports checking if a debounced function is\n   * pending. We need to know if more debounced calls are pending so that we can decide to take down the\n   * loading spinner over the preview table, or leave it up until all scheduled calls settle.\n   */\n  private _hasScheduledDiffUpdate = false;\n\n  /**\n   * destTables is a list of tables user can choose to import data into, in the format suitable for the UI to consume.\n   */\n  private _destTables = Computed.create<Array<IOptionFull<DestId>>>(this, (use) => [\n    ...use(this._gristDoc.docModel.visibleTableIds.getObservable()).map((id) => ({value: id, label: id})),\n  ]);\n\n  /**\n   * List of transform fields, i.e. those formula fields of the transform section whose values will be used to\n   * populate the destination columns.\n   * For `New table` those fields are 1-1 with columns imported from the file.\n   * For `Existing table` those are fields that simulate the target table columns.\n   * In UI we will call it `GRIST COLUMNS`, whereas source columns will be called `SOURCE COLUMNS`.\n   *\n   * This is helper that makes sure that those fields from the transformSection are in a good state to show.\n   */\n  private _transformFields: Computed<ViewFieldRec[]|null> = Computed.create(\n      this, this._sourceInfoSelected, (use, info) => {\n    const section = info && use(info.transformSection);\n    if (!section || use(section._isDeleted)) { return null; }\n    return use(use(section.viewFields).getObservable());\n  });\n\n  /**\n   * Prepare a Map, mapping of colRef of each transform column to the set of options to offer in\n   * the dropdown. The options are represented as a Map too, mapping formula to label.\n   *\n   * It only matters for importing into existing table. Transform column are perceived as GRIST COLUMNS, so those\n   * columns that will be updated or imported into.\n   *\n   * For each of such column, this will create a map of possible options to choose in from (except SKIP).\n   * The result is a map (treated as just list of Records), with a formula and label to show in the UI.\n   * This formula will be used to update the target helper column, when user selects it.\n   *\n   * For example:\n   * File has those columns: `Name`, `Age`, `City`, `Country`\n   * Existing table has those: `First name`, `Last name`.\n   *\n   * So for `First name` (and `Last name`) we will have a map of options:\n   * - `$Name` -> `Name`\n   * - `$City` -> `City`\n   * - `$Country` -> `Country`\n   * - `$Age` -> `Age`\n   * (and skip added in the UI).\n   *\n   * There are some special cases for References and column ids.\n   */\n  private _transformColImportOptions: Computed<Map<number, Map<string, string>>> = Computed.create(\n      this, this._transformFields, this._sourceInfoSelected, (use, fields, info) => {\n    if (!fields || !info) { return new Map(); }\n    return new Map(fields.map(f =>\n      [use(f.colRef), this._makeImportOptionsForCol(use(f.column), info)]));\n  });\n\n  /**\n   * List of labels of destination columns that aren't mapped to a source column, i.e. transform\n   * columns with empty formulas.\n   *\n   * In other words, this is a list of GRIST COLUMNS that are not mapped to any SOURCE COLUMNS, so\n   * columns that won't be imported.\n   */\n  private _unmatchedFieldsMap: Computed<Map<SourceInfo, string[]|null>> = Computed.create(this, use => {\n    const sources = use(this._sourceInfoArray);\n    const result = new Map<SourceInfo, string[]|null>();\n    const unmatched = (info: SourceInfo) => {\n      // If Skip import selected, ignore.\n      if (use(info.destTableId) === SKIP_TABLE) { return null; }\n      // If New table selected, ignore.\n      if (use(info.destTableId) === NEW_TABLE) { return null; }\n      // Otherwise, return list of labels of unmatched fields.\n      const section = info && use(info.transformSection);\n      if (!section || section.isDisposed() || use(section._isDeleted)) { return null; }\n      const fields = use(use(section.viewFields).getObservable());\n      const labels = fields?.filter(f => (use(use(f.column).formula).trim() === ''))\n                            .map(f => use(f.label)) ?? null;\n      return labels?.length ? labels : null;\n    };\n    for (const info of sources) {\n      result.set(info, unmatched(info));\n    }\n    return result;\n  });\n\n  constructor(private _gristDoc: GristDoc,\n              // null tells to use the built-in file picker.\n              private _importSourceElem: ImportSourceElement|null,\n              private _createPreview: CreatePreviewFunc) {\n    super();\n    const label = _importSourceElem?.importSource.label || \"Import from file\";\n    this._screen = PluginScreen.create(this, label);\n\n    this.onDispose(() => {\n      this._resetImportDiffState();\n    });\n  }\n\n  /*\n   * Uploads file to the server using the built-in file picker or a plugin instance.\n   */\n  public async pickAndUploadSource(uploadResult: UploadResult|null = null) {\n    try {\n      if (!this._importSourceElem) {\n        // Use upload result if it was passed in or the built-in file picker.\n        // On electron, it uses the native file selector (without actually uploading anything),\n        // which is why this requires a slightly different flow.\n        uploadResult = uploadResult || await selectFiles({docWorkerUrl: this._docComm.docWorkerUrl,\n                                                          multiple: true, sizeLimit: 'import'});\n      } else {\n        // Need to use plugin to get the data, and manually upload it.\n        const plugin = this._importSourceElem.plugin;\n        const handle = this._screen.renderPlugin(plugin);\n        const importSource = await this._importSourceElem.importSourceStub.getImportSource(handle);\n        plugin.removeRenderTarget(handle);\n        this._screen.renderSpinner();\n\n        if (importSource) {\n          // If data has been picked, upload it.\n          const item = importSource.item;\n          if (item.kind === \"fileList\") {\n            const files = item.files.map(({content, name}) => new File([content], name));\n            uploadResult = await uploadFiles(files, {docWorkerUrl: this._docComm.docWorkerUrl,\n                                                     sizeLimit: 'import'});\n          } else if (item.kind ===  \"url\") {\n            if (isDriveUrl(item.url)) {\n              uploadResult = await this._fetchFromDrive(item.url);\n            } else {\n              uploadResult = await fetchURL(this._docComm, item.url);\n            }\n          } else {\n            throw new Error(`Import source of kind ${(item as any).kind} are not yet supported!`);\n          }\n        }\n      }\n    } catch (err) {\n      if (err instanceof CancelledError) {\n        await this._cancelImport();\n        return;\n      }\n      if (err instanceof GDriveUrlNotSupported) {\n        await this._cancelImport();\n        throw err;\n      }\n      this._screen.renderError(err.message);\n      return;\n    }\n\n    if (uploadResult) {\n      this._uploadResult = uploadResult;\n      await this._reImport(uploadResult);\n    } else {\n      await this._cancelImport();\n    }\n  }\n\n  private _getPrimaryViewSection(tableId: string): ViewSectionRec {\n    const tableModel = this._gristDoc.getTableModel(tableId);\n    const viewRow = tableModel.tableMetaRow.primaryView.peek();\n    return viewRow.viewSections.peek().peek()[0];\n  }\n\n  private _getSectionByRef(sectionRef: number): ViewSectionRec {\n    return this._gristDoc.docModel.viewSections.getRowModel(sectionRef);\n  }\n\n  private async _updateTransformSection(sourceInfo: SourceInfo) {\n    this._resetImportDiffState();\n\n    sourceInfo.isLoadingSection.set(true);\n    sourceInfo.transformSection.set(null);\n\n    const genImporterViewPromise = this._gristDoc.docData.sendAction(\n      ['GenImporterView', sourceInfo.hiddenTableId, sourceInfo.destTableId.get(), null, null]);\n    sourceInfo.lastGenImporterViewPromise = genImporterViewPromise;\n    const transformSectionRef = (await genImporterViewPromise).viewSectionRef;\n\n    // If the request is superseded by a newer request, or the Importer is disposed, do nothing.\n    if (this.isDisposed() || sourceInfo.lastGenImporterViewPromise !== genImporterViewPromise) {\n      return;\n    }\n\n    // Otherwise, update the transform section for `sourceInfo`.\n    sourceInfo.transformSection.set(this._gristDoc.docModel.viewSections.getRowModel(transformSectionRef));\n    sourceInfo.isLoadingSection.set(false);\n\n    // Change the active section to the transform section, so that formula autocomplete works.\n    this._gristDoc.viewModel.activeSectionId(transformSectionRef);\n  }\n\n  /**\n   * Reads the configuration from the temporary table and creates a configuration map for each table.\n   */\n  private _getTransformedDataSource(upload: UploadResult): DataSourceTransformed {\n    const transforms: TransformRuleMap[] = upload.files.map((file, i) => this._createTransformRuleMap(i));\n    return {uploadId: upload.uploadId, transforms};\n  }\n\n  private _getMergeOptionMaps(upload: UploadResult): MergeOptionsMap[] {\n    return upload.files.map((_file, i) => this._createMergeOptionsMap(i));\n  }\n\n  private _createTransformRuleMap(uploadFileIndex: number): TransformRuleMap {\n    const result: TransformRuleMap = {};\n    for (const sourceInfo of this._sourceInfoArray.get()) {\n      if (sourceInfo.uploadFileIndex === uploadFileIndex) {\n        result[sourceInfo.origTableName] = this._createTransformRule(sourceInfo);\n      }\n    }\n    return result;\n  }\n\n  private _createMergeOptionsMap(uploadFileIndex: number): MergeOptionsMap {\n    const result: MergeOptionsMap = {};\n    for (const sourceInfo of this._sourceInfoArray.get()) {\n      if (sourceInfo.uploadFileIndex === uploadFileIndex) {\n        result[sourceInfo.origTableName] = this._getMergeOptionsForSource(sourceInfo);\n      }\n    }\n    return result;\n  }\n\n  private _createTransformRule(sourceInfo: SourceInfo): TransformRule {\n    const transformSection = sourceInfo.transformSection.get();\n    if (!transformSection) {\n      throw new Error(`Table ${sourceInfo.hiddenTableId} is missing transform section`);\n    }\n\n    const transformFields = transformSection.viewFields().peek();\n    const sourceFields = sourceInfo.sourceSection.viewFields().peek();\n\n    const destTableId: DestId = sourceInfo.destTableId.get();\n    return {\n      destTableId,\n      destCols: transformFields.map<TransformColumn>((field) => ({\n        label: field.label(),\n        colId: destTableId ? field.colId() : null, // if inserting into new table, colId isn't defined\n        type: field.column().type(),\n        widgetOptions: field.column().widgetOptions(),\n        formula: field.column().formula()\n      })),\n      sourceCols: sourceFields.map((field) => field.colId())\n    };\n  }\n\n  private _getMergeOptionsForSource(sourceInfo: SourceInfo): MergeOptions|undefined {\n    const mergeOptions = this._mergeOptions[sourceInfo.hiddenTableId];\n    if (!mergeOptions) { return undefined; }\n\n    const {updateExistingRecords, mergeCols, mergeStrategy} = mergeOptions;\n    return {\n      mergeCols: updateExistingRecords.get() ? mergeCols.get() : [],\n      mergeStrategy: mergeStrategy.get()\n    };\n  }\n\n  private _getHiddenTableIds(): string[] {\n    return this._sourceInfoArray.get().map((si: SourceInfo) => si.hiddenTableId);\n  }\n\n  private async _reImport(upload: UploadResult) {\n    this._screen.renderSpinner();\n    this._resetImportDiffState();\n    try {\n      // Initialize parsing options with NUM_ROWS=0 (a whole file).\n      const parseOptions = {...this._parseOptions.get(), NUM_ROWS: 0};\n\n      // Create the temporary tables and import the files into it.\n      const importResult: ImportResult = await this._docComm.importFiles(\n        this._getTransformedDataSource(upload), parseOptions, this._getHiddenTableIds());\n\n      // Update the parsing options with the actual one used by the importer (it might have changed)\n      this._parseOptions.set(importResult.options);\n\n      this._sourceInfoHolder.clear();\n      const owner = MultiHolder.create(this._sourceInfoHolder);\n\n      // Read the information from what was imported in a better representation and some metadata, we\n      // will allow to change by the user.\n      this._sourceInfoArray.set(importResult.tables.map((info: ImportTableResult) => ({\n        hiddenTableId: info.hiddenTableId,\n        uploadFileIndex: info.uploadFileIndex,\n        origTableName: info.origTableName,\n        // This is the section with the data imported.\n        sourceSection: this._getPrimaryViewSection(info.hiddenTableId)!,\n        // This is the section created every time user changes the configuration, used for the preview.\n        transformSection: Observable.create(owner, this._getSectionByRef(info.transformSectionRef)),\n        // This is the table where the data will be imported, either a new table or an existing one.\n        // If a new one, it will be hidden for a while, until the user confirms the import.\n        destTableId: Observable.create<DestId>(owner, info.destTableId ?? NEW_TABLE),\n        // Helper to show the spinner.\n        isLoadingSection: Observable.create(owner, false),\n        // and another one.\n        lastGenImporterViewPromise: null,\n        // Which view to show or was shown previously.\n        selectedView: Observable.create(owner, TABLE_MAPPING),\n        // List of customized\n        customizedColumns: Observable.create(owner, new Set<string>()),\n      })));\n\n      if (this._sourceInfoArray.get().length === 0) {\n        throw new Error(\"No data was imported\");\n      }\n\n      this._prepareMergeOptions();\n\n      // Select the first sourceInfo to show in preview.\n      this._sourceInfoSelected.set(this._sourceInfoArray.get()[0] || null);\n\n      // And finally render the main screen.\n      this._renderMain(upload);\n    } catch (e) {\n      console.warn(\"Import failed\", e);\n      this._screen.renderError(e.message);\n    }\n  }\n\n  /**\n   * Create a merging options. This is an extension to the configuration above (_sourceInfoArray).\n   * By default, we are pointing to new tables, so it is empty. This method is used to communicate\n   * with the user about what they want and how they want to merge the data.\n   * For an existing table, it will be filled by the user with columns to merge on (how to identify\n   * existing rows).\n   */\n  private _prepareMergeOptions() {\n    this._mergeOptions = {};\n    this._getHiddenTableIds().forEach(tableId => {\n      this._mergeOptions[tableId] = {\n        // By default no, as we are importing into new tables.\n        updateExistingRecords: Observable.create(null, false),\n        // Empty, user will select it for existing table.\n        mergeCols: obsArray(),\n        // Strategy for the backend (from UI we don't care about it).\n        mergeStrategy: Observable.create(null, {type: 'replace-with-nonblank-source'}),\n        // Helper to show the validation that something is wrong with the columns selected to merge.\n        hasInvalidMergeCols: Observable.create(null, false),\n      };\n    });\n  }\n\n  private async _maybeFinishImport(upload: UploadResult) {\n    const isConfigValid = this._validateImportConfiguration();\n    if (!isConfigValid) { return; }\n\n    this._screen.renderSpinner();\n    this._resetImportDiffState();\n\n    const parseOptions = {...this._parseOptions.get(), NUM_ROWS: 0};\n    const mergeOptionMaps = this._getMergeOptionMaps(upload);\n\n    const importResult: ImportResult = await this._docComm.finishImportFiles(\n      this._getTransformedDataSource(upload), this._getHiddenTableIds(), {mergeOptionMaps, parseOptions});\n\n    // This is not hidden table anymore, it was renamed to the name of the final table.\n    if (importResult.tables[0]?.hiddenTableId) {\n      const tableRowModel = this._gristDoc.docModel.dataTables[importResult.tables[0].hiddenTableId].tableMetaRow;\n      const primaryViewId = tableRowModel.primaryViewId();\n      if (primaryViewId) {\n        // Switch page if there is a sensible one to switch to.\n        await this._gristDoc.openDocPage(primaryViewId);\n      }\n    }\n    this._screen.close();\n    this.dispose();\n  }\n\n  private async _cancelImport() {\n    this._resetImportDiffState();\n    // Formula editor cleanup needs to happen before the hidden tables are removed.\n    this._formulaEditorHolder.dispose();\n    if (this._uploadResult) {\n      await this._docComm.cancelImportFiles(this._uploadResult.uploadId, this._getHiddenTableIds());\n    }\n    this._screen.close();\n    this.dispose();\n  }\n\n  private _resetTableMergeOptions(tableId: string) {\n    this._mergeOptions[tableId]?.mergeCols.set([]);\n  }\n\n  private _validateImportConfiguration(): boolean {\n    let isValid = true;\n\n    const selectedSourceInfo = this._sourceInfoSelected.get();\n    if (!selectedSourceInfo) { return isValid; } // No configuration to validate.\n\n    const mergeOptions = this._mergeOptions[selectedSourceInfo.hiddenTableId];\n    if (!mergeOptions) { return isValid; } // No configuration to validate.\n\n    const destTableId = selectedSourceInfo.destTableId.get();\n    const {updateExistingRecords, mergeCols, hasInvalidMergeCols} = mergeOptions;\n\n    // Check that at least one merge column was selected (if merging into an existing table).\n    if (destTableId !== null && updateExistingRecords.get() && mergeCols.get().length === 0) {\n      hasInvalidMergeCols.set(true);\n      isValid = false;\n    }\n\n    return isValid;\n  }\n\n  private _buildModalTitle(rightElement?: DomContents) {\n    const title =  this._importSourceElem ? this._importSourceElem.importSource.label : 'Import from file';\n    return cssModalHeader(cssModalTitle(title), rightElement);\n  }\n\n  private _buildStaticTitle() {\n    return cssStaticHeader(cssModalTitle(t('Import from file')));\n  }\n\n  /**\n   * Triggers an update of the import diff in the preview table. When called in quick succession,\n   * only the most recent call will result in an update being made to the preview table.\n   *\n   * @param {SourceInfo} info The source to update the diff for.\n   */\n  private async _updateImportDiff(info: SourceInfo) {\n    const {updateExistingRecords, mergeCols} = this._mergeOptions[info.hiddenTableId]!;\n    const isMerging = info.destTableId && updateExistingRecords.get() && mergeCols.get().length > 0;\n    if (!isMerging && this._gristDoc.comparison) {\n      // If we're not merging but diffing is enabled, disable it; since `comparison` isn't\n      // currently observable, we'll wrap the modification around the `_isLoadingDiff`\n      // flag, which will force the preview table to re-render with diffing disabled.\n      this._isLoadingDiff.set(true);\n      this._gristDoc.comparison = null;\n      this._isLoadingDiff.set(false);\n    }\n\n    // If we're not merging, no diff is shown, so don't schedule an update for one.\n    if (!isMerging) { return; }\n\n    this._hasScheduledDiffUpdate = true;\n    this._isLoadingDiff.set(true);\n    await this._debouncedUpdateDiff(info);\n  }\n\n  /**\n   * NOTE: This method should not be called directly. Instead, use _updateImportDiff above, which\n   * wraps this method and calls a debounced version of it.\n   *\n   * Triggers an update of the import diff in the preview table. When called in quick succession,\n   * only the most recent call will result in an update being made to the preview table.\n   *\n   * @param {SourceInfo} info The source to update the diff for.\n   */\n  private async _updateDiff(info: SourceInfo) {\n    // Reset the flag tracking scheduled updates since the debounced update has started.\n    this._hasScheduledDiffUpdate = false;\n\n    // Request a diff of the current source and wait for a response.\n    const genImportDiffPromise = this._docComm.generateImportDiff(info.hiddenTableId,\n      this._createTransformRule(info), this._getMergeOptionsForSource(info)!);\n    this._lastGenImportDiffPromise = genImportDiffPromise;\n    const diff = await genImportDiffPromise;\n\n    // If the request is superseded by a newer request, or the Importer is disposed, do nothing.\n    if (this.isDisposed() || genImportDiffPromise !== this._lastGenImportDiffPromise) { return; }\n\n    // Put the document in comparison mode with the diff data.\n    this._gristDoc.comparison = diff;\n\n    // If more updates where scheduled since we started the update, leave the loading spinner up.\n    if (!this._hasScheduledDiffUpdate) {\n      this._isLoadingDiff.set(false);\n    }\n  }\n\n  /**\n   * Resets all state variables related to diffs to their default values.\n   */\n  private _resetImportDiffState() {\n    this._cancelPendingDiffRequests();\n    this._gristDoc.comparison = null;\n  }\n\n  /**\n   * Effectively cancels all pending diff requests by causing their fulfilled promises to\n   * be ignored by their attached handlers. Since we can't natively cancel the promises, this\n   * is functionally equivalent to canceling the outstanding requests.\n   */\n  private _cancelPendingDiffRequests() {\n    this._debouncedUpdateDiff.cancel();\n    this._lastGenImportDiffPromise = null;\n    this._hasScheduledDiffUpdate = false;\n    this._isLoadingDiff.set(false);\n  }\n\n  // The importer state showing import in progress, with a list of tables, and a preview.\n  private _renderMain(upload: UploadResult) {\n    const schema = this._parseOptions.get().SCHEMA;\n    const header = this._buildModalTitle();\n    const options = schema ? cssActionLink(cssLinkIcon('Settings'), 'Import options',\n      testId('options-link'),\n      dom.on('click', () => this._renderParseOptions(schema, upload))\n    ) : null;\n\n    const selectTab = async (info: SourceInfo) => {\n      // Ignore click if source is already selected.\n      if (info === this._sourceInfoSelected.get()) { return; }\n      // Prevent changing selected source if current configuration is invalid.\n      if (!this._validateImportConfiguration()) { return; }\n      this._cancelPendingDiffRequests();\n      this._sourceInfoSelected.set(info);\n      await this._updateImportDiff(info);\n    };\n\n    const tabs = cssTableList(\n      dom.forEach(this._sourceInfoArray, (info) => {\n        const owner = MultiHolder.create(null);\n        const destTableId = Computed.create(owner, (use) => use(info.destTableId));\n        destTableId.onWrite(async (destId) => {\n          // Prevent changing destination of un-selected sources if current configuration is invalid.\n          if (info !== this._sourceInfoSelected.get() && !this._validateImportConfiguration()) {\n            return;\n          }\n          info.destTableId.set(destId);\n          this._resetTableMergeOptions(info.hiddenTableId);\n          if (destId !== SKIP_TABLE) {\n            await this._updateTransformSection(info);\n          }\n        });\n\n        // If this is selected source.\n        const isSelected = Computed.create(owner, (use) => use(this._sourceInfoSelected) === info);\n\n        const unmatchedCount = Computed.create(owner, use => {\n          const map = use(this._unmatchedFieldsMap);\n          return map.get(info)?.length ?? 0;\n        });\n\n        return cssTabItem(\n          dom.autoDispose(owner),\n          cssBorderBottom(),\n          cssTabItem.cls('-not-selected', not(isSelected)),\n          testId('source'),\n          testId('source-selected', isSelected),\n          testId('source-not-selected', not(isSelected)),\n          cssTabItemContent(\n            cssFileTypeIcon(getSourceFileExtension(info, upload),\n              cssFileTypeIcon.cls('-active', isSelected),\n            ),\n            cssTabItemContent.cls('-selected', isSelected),\n            cssTableLine(cssTableSource(\n              getSourceDescription(info, upload),\n              testId('from'),\n              overflowTooltip(),\n            )),\n            dom.on('click', () => selectTab(info)),\n          ),\n          dom.maybe(unmatchedCount, (count) => cssError(\n            'Exclamation',\n            testId('error'),\n            hoverTooltip(t('{{count}} unmatched field', {count}))\n          )),\n        );\n      }),\n    );\n    const previewAndConfig = dom.maybeOwned(this._sourceInfoSelected, (owner, info) => {\n      const {mergeCols, updateExistingRecords, hasInvalidMergeCols} = this._mergeOptions[info.hiddenTableId]!;\n\n      // Computed for transform section if we have destination table selected.\n      const configSection = Computed.create(owner,\n        use => use(info.destTableId) && use(info.transformSection) ? use(info.transformSection) : null);\n\n      // Computed to show the loader while we are waiting for the preview.\n      const showLoader = Computed.create(owner, use => {\n        return use(this._isLoadingDiff) || !use(this._previewViewSection);\n      });\n\n      // The same computed as configSection, but will evaluate to null while we are waiting for the preview\n      const previewSection = Computed.create(owner, use => {\n        return use(showLoader) ? null : use(this._previewViewSection);\n      });\n\n      // Use helper for checking if destination is selected.\n      const isSelected = (destId: DestId) => (use: UseCBOwner) => use(info.destTableId) === destId;\n\n      // True if user selected `Skip import`\n      const isSkipTable = Computed.create(owner, isSelected(SKIP_TABLE));\n\n      // True if user selected a valid destination table.\n      const isMergeTable = Computed.create(owner, use => ![NEW_TABLE, SKIP_TABLE].includes(use(info.destTableId)));\n\n      // Changes the class if the item is selected. Creates a dom method that can be attached to element.\n      const selectIfDestIs = (destId: DestId) => cssDestination.cls('-selected', isSelected(destId));\n\n      // Helper to toggle visibility if target is selected.\n      const visibleIfDestIs = (destId: DestId) => dom.show(isSelected(destId));\n\n      // Creates a click handler that changes the destination table to the given value.\n      const onClickChangeDestTo = (destId: DestId) => dom.on('click', async () => {\n        if (info !== this._sourceInfoSelected.get() && !this._validateImportConfiguration()) {\n          return;\n        }\n        info.selectedView.set(TABLE_MAPPING);\n        info.destTableId.set(destId);\n        this._resetTableMergeOptions(info.hiddenTableId);\n        if (destId !== SKIP_TABLE) {\n          await this._updateTransformSection(info);\n        }\n      });\n\n      // Should we show the right panel with the column mapping.\n      const showRightPanel = Computed.create(owner, use => {\n        return use(isMergeTable) && use(info.selectedView) === COLUMN_MAPPING;\n      });\n\n      // Handler to switch the view, between destination and column mapping panes.\n      const onClickShowView = (view: ViewType) => dom.on('click', () => {\n        info.selectedView.set(view);\n      });\n\n      // Pattern to create a computed value that can create and dispose objects in its callback.\n      Computed.create(owner, use => {\n        // This value must be returned for this pattern to work.\n        const holder = MultiHolder.create(use.owner);\n        // Now we can safely take ownership of things we create here - the subscriber.\n        if (use(configSection)) {\n          holder.autoDispose(updateExistingRecords.addListener(async () => {\n            if (holder.isDisposed()) { return; }\n            await this._updateImportDiff(info);\n          }));\n        }\n        return holder;\n      });\n\n      return cssConfigAndPreview(\n        cssConfigPanel(\n          cssConfigPanel.cls('-right', showRightPanel),\n          cssConfigLeft(\n            cssTitle('Destination table', testId('target-top')),\n            cssDestinationWrapper(cssDestination(\n              cssPageIcon('Plus'),\n              dom('span', 'New Table'),\n              selectIfDestIs(NEW_TABLE),\n              onClickChangeDestTo(NEW_TABLE),\n              testId('target'),\n              testId('target-new-table'),\n              testId('target-selected', isSelected(NEW_TABLE)),\n            )),\n            dom.maybe(use => use(this._sourceInfoArray).length > 1, () => [\n              cssDestinationWrapper(cssDestination(\n                cssPageIcon('CrossBig'),\n                dom('span', t('Skip Import')),\n                selectIfDestIs(SKIP_TABLE),\n                onClickChangeDestTo(SKIP_TABLE),\n                testId('target'),\n                testId('target-skip'),\n                testId('target-selected', isSelected(SKIP_TABLE)),\n              )),\n            ]),\n            dom.forEach(this._destTables, (destTable) => {\n              return cssDestinationWrapper(\n                testId('target'),\n                testId('target-existing-table'),\n                testId('target-selected', isSelected(destTable.value)),\n                cssDestination(\n                  cssPageIcon('TypeTable'),\n                  dom('span', destTable.label),\n                  selectIfDestIs(destTable.value),\n                  onClickChangeDestTo(destTable.value),\n                  onClickShowView(COLUMN_MAPPING),\n                ),\n                cssDetailsIcon('ArrowRight',\n                  onClickShowView(COLUMN_MAPPING),\n                  visibleIfDestIs(destTable.value),\n                  hoverTooltip(t('Column mapping')),\n                  testId('target-column-mapping'),\n                )\n              );\n            }),\n          ),\n          cssConfigRight(\n            cssNavigation(\n              cssFlexBaseline(\n                cssDestinationTableSecondary(\n                  cssNavigationIcon('ArrowLeft'),\n                  t('Destination table'),\n                  onClickShowView(TABLE_MAPPING),\n                  testId('table-mapping')\n                ),\n                cssSlash(' / '),\n                cssColumnMappingNav(t('Column Mapping')),\n              )\n            ),\n            cssMergeOptions(\n              dom.maybe(isMergeTable, () => cssMergeOptionsToggle(labeledSquareCheckbox(\n                updateExistingRecords,\n                t(\"Update existing records\"),\n                testId('update-existing-records')\n              ))),\n              dom.maybe(configSection, (section) => {\n                return dom.maybeOwned(updateExistingRecords, (owner2) => {\n                  owner2.autoDispose(mergeCols.addListener(async val => {\n                    // Reset the error state of the multiSelect on change.\n                    if (val.length !== 0 && hasInvalidMergeCols.get()) {\n                      hasInvalidMergeCols.set(false);\n                    }\n                    await this._updateImportDiff(info);\n                  }));\n                  return [\n                    cssMergeOptionsMessage(\n                      t(\"Merge rows that match these fields:\"),\n                      testId('merge-fields-message')\n                    ),\n                    multiSelect(\n                      mergeCols,\n                      section.viewFields().peek().map(f => ({label: f.label(), value: f.colId()})) ?? [],\n                      {\n                        placeholder: t(\"Select fields to match on\"),\n                        error: hasInvalidMergeCols\n                      },\n                      testId('merge-fields-select')\n                    )\n                  ];\n                });\n              }),\n            ),\n            dom.maybeOwned(configSection, (owner1, section) => {\n              owner1.autoDispose(updateExistingRecords.addListener(async () => {\n                await this._updateImportDiff(info);\n              }));\n              return dom('div',\n                cssColumnMatchHeader(\n                  dom('span', t('Grist column')),\n                  dom('div', null),\n                  dom('span', t('Source column')),\n                ),\n                dom.forEach(fromKo(section.viewFields().getObservable()), field => {\n                  const owner2 = MultiHolder.create(null);\n                  const isCustomFormula = Computed.create(owner2, use => {\n                    return use(info.customizedColumns).has(field.colId());\n                  });\n                  return cssColumnMatchRow(\n                    testId('column-match-source-destination'),\n                    dom.autoDispose(owner2),\n                    dom.domComputed(field.label, () => cssDestinationFieldLabel(\n                      dom.text(field.label),\n                      overflowTooltip(),\n                      testId('column-match-destination'),\n                    )),\n                    cssIcon180('ArrowRightOutlined'),\n                    dom.domComputedOwned(isCustomFormula, (owner3, isCustom) => {\n                      if (isCustom) {\n                        return this._buildCustomFormula(owner3, field, info);\n                      } else {\n                        return this._buildSourceSelector(owner3, field, info);\n                      }\n                    }),\n                    dom('div',\n                      dom.maybe(isCustomFormula, () => icon('Revert',\n                        dom.style('cursor', 'pointer'),\n                        hoverTooltip(t('Revert')),\n                        dom.on('click', async () => {\n                          toggleCustomized(info, field.colId(), false);\n                          // Try to set the default label.\n                          const transformCol = field.column.peek();\n                          const possibilities = this._transformColImportOptions.get().get(transformCol.getRowId())\n                                                ?? new Map<string, string>();\n                          const matched = [...possibilities.entries()].find(([, v]) => v === transformCol.label.peek());\n                          if (matched) {\n                            await this._setColumnFormula(transformCol, matched[0], info);\n                          } else {\n                            await this._gristDoc.clearColumns([field.colRef()]);\n                          }\n                        }),\n                      )),\n                    ),\n                  );\n                }),\n                testId('column-match-options'),\n              );\n            }),\n          )\n        ),\n        cssPreviewColumn(\n          dom.maybe(showLoader, () => cssPreviewSpinner(loadingSpinner(), testId('preview-spinner'))),\n          dom.maybe(previewSection, () => [\n            cssOptions(\n              dom.domComputed(info.destTableId, destId => cssTableName(\n                destId === NEW_TABLE ? t(\"New Table\") :\n                destId === SKIP_TABLE ? t(\"Skip Import\") :\n                dom.domComputed(this._destTables, list =>\n                  list.find(dt => dt.value === destId)?.label ?? t(\"New Table\")\n                )\n              )),\n              options,\n            )\n          ]),\n          cssWarningText(dom.text(use => use(this._parseOptions)?.WARNING || \"\"), testId('warning')),\n          dom.domComputed(use => {\n            if (use(isSkipTable)) {\n              return cssOverlay(t('Skip Table on Import'), testId('preview-overlay'));\n            }\n            const section = use(previewSection);\n            if (!section || section.isDisposed()) { return null; }\n            const gridView = this._createPreview(section);\n            return cssPreviewGrid(\n              dom.autoDispose(gridView),\n              gridView.viewPane,\n              testId('preview'),\n            );\n          })\n        )\n      );\n    });\n\n    const buttons = cssImportButtons(cssImportButtonsLine(\n      bigPrimaryButton('Import',\n        dom.on('click', () => this._maybeFinishImport(upload)),\n        dom.boolAttr('disabled', use => {\n          return use(this._previewViewSection) === null ||\n                 use(this._sourceInfoArray).every(i => use(i.destTableId) === SKIP_TABLE);\n        }),\n        baseTestId('modal-confirm'),\n      ),\n      bigBasicButton('Cancel',\n        dom.on('click', () => this._cancelImport()),\n        baseTestId('modal-cancel'),\n      ),\n      dom.domComputed(this._unmatchedFieldsMap, fields => {\n        const piles: HTMLElement[] = [];\n        let count = 0;\n        for(const [info, list] of fields) {\n          if (!list?.length) { continue; }\n          count += list.length;\n          piles.push(cssUnmatchedFieldsList(\n            list.join(', '),\n            dom.on('click', () => selectTab(info)),\n            hoverTooltip(getSourceDescription(info, upload)),\n          ));\n        }\n        if (!count) { return null; }\n        return cssUnmatchedFields(\n          cssUnmatchedFieldsIntro(\n            cssUnmatchedIcon('Exclamation'),\n            t('{{count}} unmatched field in import', {count}), ': ',\n          ),\n          ...piles,\n          testId('unmatched-fields'),\n        );\n      }),\n    ));\n    const body = cssContainer(\n      {tabIndex: '-1'},\n      header,\n      cssPreviewWrapper(\n        cssTabsWrapper(\n          tabs,\n        ),\n        previewAndConfig,\n      ),\n      buttons,\n    );\n    this._addFocusLayer(body);\n    this._screen.render(body, {\n      fullscreen: true,\n      fullbody: true\n    });\n  }\n\n  private _makeImportOptionsForCol(gristCol: ColumnRec, info: SourceInfo) {\n    const options = new Map<string, string>();  // Maps formula to label.\n    const sourceFields = info.sourceSection.viewFields.peek().peek();\n\n    // Reference columns are populated using lookup formulas, so figure out now if this is a\n    // reference column, and if so, its destination table and the lookup column ID.\n    const refTable = gristCol.refTable.peek();\n    const refTableId = refTable ? refTable.tableId.peek() : undefined;\n\n    const visibleColId = gristCol.visibleColModel.peek().colId.peek();\n    const isRefDest = Boolean(info.destTableId.get() && gristCol.pureType.peek() === 'Ref');\n\n    for (const sourceField of sourceFields) {\n      const sourceCol = sourceField.column.peek();\n      const sourceId = sourceCol.colId.peek();\n      const sourceLabel = sourceCol.label.peek();\n      if (isRefDest && visibleColId) {\n        const formula = `${refTableId}.lookupOne(${visibleColId}=$${sourceId}) or ($${sourceId} and str($${sourceId}))`;\n        options.set(formula, sourceLabel);\n      } else {\n        options.set(`$${sourceId}`, sourceLabel);\n      }\n      if (isRefDest && ['Numeric', 'Int'].includes(sourceCol.type.peek())) {\n        options.set(`${refTableId}.lookupOne(id=NUM($${sourceId})) or ($${sourceId} and str(NUM($${sourceId})))`,\n          `${sourceLabel} (as row ID)`);\n      }\n    }\n    return options;\n  }\n\n  private _makeImportOptionsMenu(transformCol: ColumnRec, others: [string, string][], info: SourceInfo) {\n    return [\n      menuItem(() => this._setColumnFormula(transformCol, null, info),\n        'Skip',\n        testId('column-match-menu-item')),\n      others.length ? menuDivider() : null,\n      ...others.map(([formula, label]) =>\n        menuItem(() => this._setColumnFormula(transformCol, formula, info),\n          label,\n          testId('column-match-menu-item'))\n      )\n    ];\n  }\n\n  private _addFocusLayer(container: HTMLElement) {\n    dom.autoDisposeElem(container, new FocusLayer({\n      defaultFocusElem: container,\n      allowFocus: (elem) => (elem !== document.body),\n      onDefaultFocus: () => this.trigger('importer_focus'),\n    }));\n  }\n\n  /**\n   * Updates the formula on column `colRef` to `formula`, when user wants to match it to a source column.\n   */\n  private async _setColumnFormula(transformCol: ColumnRec, formula: string|null, info: SourceInfo) {\n    const transformColRef = transformCol.id();\n    const customized = info.customizedColumns.get();\n    customized.delete(transformCol.colId());\n    info.customizedColumns.set(customized);\n    if (formula === null) {\n      await this._gristDoc.clearColumns([transformColRef], {keepType: true});\n    } else {\n      await this._gristDoc.docModel.columns.sendTableAction(\n        ['UpdateRecord', transformColRef, { formula, isFormula: true }]);\n    }\n    await this._updateImportDiff(info);\n  }\n\n  /**\n   * Opens a formula editor for `field` over `refElem`.\n   */\n  private _activateFormulaEditor(refElem: Element, field: ViewFieldRec, onSave: (formula: string) => Promise<void>) {\n    const vsi = this._gristDoc.viewModel.activeSection().viewInstance();\n    const editRow = vsi?.moveEditRowToCursor();\n    const editorHolder = openFormulaEditor({\n      gristDoc: this._gristDoc,\n      column: field.column(),\n      editingFormula: field.editingFormula,\n      refElem,\n      editRow,\n      canDetach: false,\n      setupCleanup: this._setupFormulaEditorCleanup.bind(this),\n      onSave: async (column, formula) => {\n        if (formula === column.formula.peek()) { return; }\n        // Sorry for this hack. We need to store somewhere an info that the formula was edited\n        // unfortunately, we don't have a better place to store it. So we will save this by setting\n        // display column to the same column. This won't break anything as this is a default value.\n        await column.updateColValues({formula});\n        await onSave(formula);\n      }\n    });\n    this._formulaEditorHolder.autoDispose(editorHolder);\n  }\n\n  /**\n   * Called by _activateFormulaEditor to initialize cleanup\n   * code for when the formula editor is closed. Registers and\n   * unregisters callbacks for saving edits when the editor loses\n   * focus.\n   */\n  private _setupFormulaEditorCleanup(\n    owner: Disposable, _doc: GristDoc, editingFormula: ko.Computed<boolean>, _saveEdit: () => Promise<unknown>\n  ) {\n    const saveEdit = () => _saveEdit().catch(reportError);\n\n    // Whenever focus returns to the dialog, close the editor by saving the value.\n    this.on('importer_focus', saveEdit);\n\n    owner.onDispose(() => {\n      this.off('importer_focus', saveEdit);\n      editingFormula(false);\n    });\n  }\n\n  /**\n   * Builds an editable formula component that is displayed\n   * in the column mapping section of Importer. On click, opens\n   * an editor for the formula for `column`.\n   */\n  private _buildSourceSelector(owner: MultiHolder, field: ViewFieldRec, info: SourceInfo) {\n    const anyOtherColumns = Computed.create(owner, use => {\n      const transformCol = field.column.peek();\n      const options = use(this._transformColImportOptions)!.get(transformCol.getRowId()) ?? new Map<string, string>();\n      const otherFilter = ([formula]: [string, string] ) => {\n        // Notice how this is only reactive to the formula value, every other observable is\n        // just picked without being tracked. This is because we only want to recompute this\n        // when the formula is changed (so the target column is changed). If anything other is\n        // changed, we don't care here as this whole computed will be recreated by the caller.\n        const myFormula = use(transformCol.formula);\n        const anyOther = info.transformSection.get()?.viewFields.peek().all()\n            .filter(f => f.column.peek() !== transformCol)\n            .map(f => use(f.column.peek().formula));\n        // If we picked this formula thats ok.\n        if (formula === myFormula) { return true; }\n        // If any other column picked this formula, then we should not show it.\n        if (anyOther?.includes(formula)) { return false; }\n        // Otherwise, show it.\n        return true;\n      };\n      const possibleSources = Array.from(options).filter(otherFilter);\n\n      return this._makeImportOptionsMenu(transformCol, possibleSources, info);\n    });\n\n    const selectedSource = Computed.create(owner, use => {\n      const column = use(field.column);\n      const importOptions = use(this._transformColImportOptions).get(column.getRowId());\n      // Now translate the formula generated (which is unique) to the source label.\n      const label = importOptions?.get(use(column.formula)) || null;\n      return label;\n    });\n    const selectedSourceText = Computed.create(owner, use => use(selectedSource) || t('Skip'));\n\n    const selectedOption = cssSelected(\n      dom.text(selectedSourceText),\n      testId('column-match-formula'),\n      cssSelected.cls('-skip', not(selectedSource)),\n      overflowTooltip(),\n    );\n    const otherColsOptions = dom.domComputed(anyOtherColumns, x => x);\n    const formulaOption = selectOption(\n      () => {\n        this._activateFormulaEditor(selectMenuElement, field, async (newFormula) => {\n          toggleCustomized(info, field.colId.peek(), !!newFormula);\n          await this._updateImportDiff(info);\n        });\n      },\n      \"Apply Formula\",\n      \"Lighting\",\n      testId('apply-formula'),\n      cssGreenIcon.cls(''),\n    );\n    const selectMenuElement = selectMenu(selectedOption, () => [\n      otherColsOptions,\n      menuDivider(),\n      formulaOption,\n    ], testId('column-match-source'));\n    return selectMenuElement;\n  }\n\n  /**\n   * Builds an editable formula component that is displayed\n   * in the column mapping section of Importer. On click, opens\n   * an editor for the formula for `column`.\n   */\n  private _buildCustomFormula(owner: MultiHolder, field: ViewFieldRec, info: SourceInfo) {\n    const formula = Computed.create(owner, use => {\n      const column = use(field.column);\n      return use(column.formula);\n    });\n    const codeOptions = {gristTheme: this._gristDoc.currentTheme, placeholder: 'Skip', maxLines: 1};\n    return cssFieldFormula(formula, codeOptions,\n      dom.cls('disabled'),\n      dom.cls('formula_field_sidepane'),\n      {tabIndex: '-1'},\n      dom.on('focus', (_ev, elem) => this._activateFormulaEditor(elem, field, async (newFormula) => {\n        toggleCustomized(info, field.colId.peek(), !!newFormula);\n        await this._updateImportDiff(info);\n      })),\n      testId('column-match-formula'),\n    );\n  }\n\n  // The importer state showing parse options that may be changed.\n  private _renderParseOptions(schema: ParseOptionSchema[], upload: UploadResult) {\n    const anotherScreen = PluginScreen.create(this._optionsScreenHolder, 'Import from file');\n    anotherScreen.showImportDialog({\n      noClickAway: false,\n      noEscapeKey: false,\n    });\n    anotherScreen.render([\n      this._buildStaticTitle(),\n      dom.create(buildParseOptionsForm, schema, this._parseOptions.get() as ParseOptionValues,\n        (p: ParseOptions) => {\n          anotherScreen.dispose();\n          this._parseOptions.set(p);\n          // Drop what we previously matched because we may have different columns.\n          // If user manually matched, then changed import options, they'll have to re-match; when\n          // columns change at all, the alternative has incorrect columns in UI and is more confusing.\n          this._sourceInfoArray.set([]);\n          this._reImport(upload).catch((err) => reportError(err));\n        },\n        () => {\n          anotherScreen.dispose();\n          this._renderMain(upload);\n        },\n      )\n    ]);\n  }\n\n  private async _fetchFromDrive(itemUrl: string) {\n    // First we will assume that this is public file, so no need to ask for permissions.\n    try {\n      return await fetchURL(this._docComm, itemUrl);\n    } catch(err) {\n      // It is not a public file or the file id in the url is wrong,\n      // but we have no way to check it, so we assume that it is private file\n      // and ask the user for the permission (if we are configured to do so)\n      if (canReadPrivateFiles()) {\n        const options: FetchUrlOptions = {};\n        try {\n          // Request for authorization code from Google.\n          const code = await getGoogleCodeForReading(this);\n          options.googleAuthorizationCode = code;\n        } catch(permError) {\n          if (permError?.message === ACCESS_DENIED) {\n            // User declined to give us full readonly permission, fallback to GoogleDrive plugin\n            // or cancel import if GoogleDrive plugin is not configured.\n            throw new GDriveUrlNotSupported(itemUrl);\n          } else if(permError?.message === AUTH_INTERRUPTED) {\n            // User closed the window - we assume he doesn't want to continue.\n            throw new CancelledError();\n          } else {\n            // Some other error happened during authentication, report to user.\n            throw err;\n          }\n        }\n        // Download file from private drive, if it fails, report the error to user.\n        return await fetchURL(this._docComm, itemUrl, options);\n      } else {\n        // We are not allowed to ask for full readonly permission, fallback to GoogleDrive plugin.\n        throw new GDriveUrlNotSupported(itemUrl);\n      }\n    }\n  }\n}\n\n// Used for switching from URL plugin to Google drive plugin.\nclass GDriveUrlNotSupported extends Error {\n  constructor(public url: string) {\n    super(`This url ${url} is not supported`);\n  }\n}\n\n// Used to cancel import (close the dialog without any error).\nclass CancelledError extends Error {\n}\n\nfunction getSourceDescription(sourceInfo: SourceInfo, upload: UploadResult) {\n  const origName = upload.files[sourceInfo.uploadFileIndex].origName;\n  return sourceInfo.origTableName ? `${sourceInfo.origTableName} - ${origName}` : origName;\n}\n\nfunction getSourceFileExtension(sourceInfo: SourceInfo, upload: UploadResult) {\n  const origName = upload.files[sourceInfo.uploadFileIndex].origName;\n  return origName.includes(\".\") ? origName.split('.').pop() : \"file\";\n}\n\nconst cssContainer = styled('div', `\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  outline: unset;\n`);\n\nconst cssActionLink = styled('div', `\n  display: inline-flex;\n  align-items: center;\n  cursor: pointer;\n  color: ${theme.controlFg};\n  --icon-color: ${theme.controlFg};\n  &:hover {\n    color: ${theme.controlHoverFg};\n    --icon-color: ${theme.controlHoverFg};\n  }\n`);\n\nconst cssLinkIcon = styled(icon, `\n  flex: none;\n  margin-right: 4px;\n`);\n\nconst cssStaticHeader = styled('div', `\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 16px;\n  & > .${cssModalTitle.className} {\n    margin-bottom: 0px;\n  }\n`);\n\nconst cssModalHeader = styled(cssStaticHeader, `\n  padding-left: var(--css-modal-dialog-padding-horizontal, 0px);\n  padding-right: var(--css-modal-dialog-padding-horizontal, 0px);\n  padding-top: var(--css-modal-dialog-padding-vertical, 0px);\n`);\n\nconst cssPreviewWrapper = styled('div', `\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n`);\n\nconst cssBorderBottom = styled('div', `\n  border-bottom: 1px solid ${theme.importerTableInfoBorder};\n  display: none;\n  height: 0px;\n  bottom: 0px;\n  position: absolute;\n  width: 100%;\n`);\n\n\nconst cssFileTypeIcon = styled('div', `\n  background: ${theme.importerInactiveFileBg};\n  color: ${theme.importerInactiveFileFg};\n  border-radius: 4px;\n  height: 2em;\n  text-align: center;\n  display: flex;\n  align-items: center;\n  padding: 1em;\n  font-size: 15px;\n  font-weight: 600;\n  text-transform: uppercase;\n  &-active{\n    background: ${theme.importerActiveFileBg};\n    color: ${theme.importerActiveFileFg};\n  }\n`);\n\nconst cssTabsWrapper = styled('div', `\n  border-bottom: 1px solid ${theme.importerTableInfoBorder};\n  display: flex;\n  flex-direction: column;\n`);\n\nconst cssWarningText = styled('div', `\n  margin-bottom: 8px;\n  color: ${theme.errorText};\n  white-space: pre-line;\n`);\n\nconst cssTableList = styled('div', `\n  align-self: flex-start;\n  max-width: 100%;\n  display: flex;\n  padding: 0px var(--css-modal-dialog-padding-horizontal, 0px);\n`);\n\nconst cssTabItemContent = styled('div', `\n  border: 1px solid transparent;\n  padding-left: 20px;\n  padding-right: 20px;\n  display: flex;\n  align-items: center;\n  align-content: flex-end;\n  overflow: hidden;\n  border-radius: 4px 4px 0px 0px;\n  height: 56px;\n  column-gap: 8px;\n  &-selected {\n    border: 1px solid ${theme.importerTableInfoBorder};\n    border-bottom-color: ${theme.importerMainContentBg};\n    background-color: ${theme.importerMainContentBg};\n  }\n`);\n\nconst cssTabItem = styled('div', `\n  background: ${theme.importerOutsideBg};\n  position: relative;\n  cursor: pointer;\n  margin-bottom: -2px;\n  border-bottom: 1px solid ${theme.importerMainContentBg};\n  flex: 1;\n  &-not-selected + &-not-selected::after{\n    content: '';\n    position: absolute;\n    left: 0px;\n    top: 20%;\n    height: 60%;\n    border-left: 1px solid ${theme.importerTableInfoBorder};\n  }\n  &-not-selected .${cssBorderBottom.className} {\n    display: block;\n  }\n  &-not-selected .${cssFileTypeIcon.className} {\n    display: none;\n  }\n  &-not-selected {\n    min-width: 0px;\n  }\n  &-not-selected:first-child .${cssTabItemContent.className} {\n    padding-left: 0px;\n  }\n`);\n\nconst cssTableLine = styled('div', `\n  display: flex;\n  align-items: center;\n  overflow: hidden;\n  flex-shrink: 1;\n  height: 100%;\n`);\n\nconst cssTableSource = styled('div', `\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  flex-shrink: 1;\n`);\n\nconst cssConfigAndPreview = styled('div', `\n  display: flex;\n  gap: 8px;\n  flex-grow: 1;\n  height: 0px;\n  background-color: ${theme.importerMainContentBg};\n  padding-right: var(--css-modal-dialog-padding-horizontal, 0px);\n`);\n\nconst cssConfigLeft = styled('div', `\n  padding-right: 8px;\n  padding-top: 16px;\n  position: absolute;\n  inset: 0;\n  display: flex;\n  flex-direction: column;\n  overflow-y: auto;\n  width: 100%;\n  transition: transform 0.2s ease-in-out;\n`);\n\nconst cssConfigRight = styled(cssConfigLeft, `\n  left: 100%;\n  padding-left: var(--css-modal-dialog-padding-horizontal, 0px);\n`);\n\nconst cssConfigPanel = styled('div', `\n  width: 360px;\n  height: 100%;\n  position: relative;\n  overflow-x: hidden;\n  &-right .${cssConfigLeft.className} {\n    transform: translateX(-100%);\n  }\n  &-right .${cssConfigRight.className} {\n    transform: translateX(-100%);\n  }\n`);\n\n\nconst cssPreviewColumn = styled('div', `\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n`);\n\nconst cssPreview = styled('div', `\n  display: flex;\n  flex-grow: 1;\n`);\n\nconst cssPreviewSpinner = styled(cssPreview, `\n  align-items: center;\n  justify-content: center;\n`);\n\nconst cssOverlay = styled('div', `\n  background: ${theme.importerSkippedTableOverlay};\n  flex: 1;\n  display: grid;\n  place-items: center;\n`);\n\nconst cssPreviewGrid = styled(cssPreview, `\n  border: 1px solid ${theme.importerPreviewBorder};\n  position: relative;\n`);\n\nconst cssMergeOptions = styled('div', `\n  margin-bottom: 16px;\n`);\n\nconst cssMergeOptionsToggle = styled('div', `\n  margin-bottom: 8px;\n  margin-top: 8px;\n`);\n\nconst cssMergeOptionsMessage = styled('div', `\n  color: ${theme.lightText};\n  margin-bottom: 8px;\n`);\n\nconst cssColumnMatchHeader = styled('div', `\n  display: grid;\n  grid-template-columns: 1fr 20px 1fr;\n  text-transform: uppercase;\n  color: ${theme.lightText};\n  letter-spacing: 1px;\n  font-size: ${vars.xsmallFontSize};\n  margin-bottom: 12px;\n`);\n\nconst cssColumnMatchRow = styled('div', `\n  display: grid;\n  grid-template-columns: 1fr 20px 1fr 20px;\n  gap: 4px;\n  align-items: center;\n  --icon-color: ${theme.iconDisabled};\n  & + & {\n    margin-top: 16px;\n  }\n`);\n\nconst cssFieldFormula = styled(buildHighlightedCode, `\n  flex: auto;\n  cursor: pointer;\n  margin-top: 1px;\n  padding-left: 24px;\n  --icon-color: ${theme.accentIcon};\n`);\n\nconst cssDestinationFieldLabel = styled('div', `\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  padding-left: 4px;\n  cursor: unset;\n  background-color: ${theme.pageBg};\n  color: ${theme.text};\n  width: 100%;\n  height: 30px;\n  line-height: 16px;\n  font-size: ${vars.mediumFontSize};\n  padding: 5px;\n  border: 1px solid ${theme.selectButtonBorder};\n  border-radius: 3px;\n  user-select: none;\n  outline: none;\n`);\n\nconst cssUnmatchedIcon = styled(icon, `\n  height: 12px;\n  --icon-color: ${theme.lightText};\n  vertical-align: bottom;\n  margin-bottom: 2px;\n`);\n\nconst cssUnmatchedFields = styled('div', `\n  display: flex;\n  flex-wrap: wrap;\n  row-gap: 2px;\n  column-gap: 4px;\n  align-items: flex-start;\n`);\n\nconst cssUnmatchedFieldsIntro = styled('div', `\n  padding: 4px 8px;\n`);\n\nconst cssUnmatchedFieldsList = styled('div', `\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  padding-right: 16px;\n  color: ${theme.text};\n  border-radius: 8px;\n  padding: 4px 8px;\n  background-color: ${theme.pagePanelsBorder};\n  max-width: 160px;\n  cursor: pointer;\n`);\n\nconst cssImportButtons = styled('div', `\n  padding-top: 40px;\n  padding-left: var(--css-modal-dialog-padding-horizontal, 0px);\n  padding-right: var(--css-modal-dialog-padding-horizontal, 0px);\n  padding-bottom: calc(var(--css-modal-dialog-padding-vertical, 0px) - 12px);\n  background-color: ${theme.importerMainContentBg};\n`);\n\nconst cssImportButtonsLine = styled('div', `\n  height: 52px;\n  overflow: hidden;\n  display: flex;\n  gap: 8px;\n  align-items: flex-start;\n`);\n\n\nconst cssTitle = styled('span._cssToFrom', `\n  color: ${theme.darkText};\n  text-transform: uppercase;\n  font-weight: 600;\n  font-size: ${vars.smallFontSize};\n  letter-spacing: 0.5px;\n  padding-left: var(--css-modal-dialog-padding-horizontal, 0px);\n  text-align: left;\n  margin-bottom: 16px;\n`);\n\nconst cssDestinationWrapper = styled('div', `\n  margin-bottom: 1px;\n  /* Reuse the modal padding but move 16px to left if possible */\n  margin-left: max(0px, calc(var(--css-modal-dialog-padding-horizontal, 0px) - 16px));\n  display: flex;\n  align-items: center;\n`);\n\nconst cssDestination = styled('div', `\n  --icon-color: ${theme.lightText};\n  align-items: center;\n  border-radius: 0 3px 3px 0;\n  padding-left: 16px;\n  color: ${theme.text};\n  cursor: pointer;\n  display: flex;\n  height: 32px;\n  line-height: 32px;\n  flex: 1;\n  &:hover {\n    background-color: ${theme.pageHoverBg};\n  }\n  &-selected, &-selected:hover {\n    background-color: ${theme.activePageBg};\n    color: ${theme.activePageFg};\n    --icon-color: ${theme.activePageFg};\n  }\n`);\n\nconst cssOptions = styled('div', `\n  display: flex;\n  align-items: flex-end;\n  padding-bottom: 8px;\n  justify-content: space-between;\n  height: 36px;\n`);\n\nconst cssTableName = styled('span', `\n  font-weight: 600;\n`);\n\nconst cssNavigation = styled('div', `\n  display: flex;\n  align-items: center;\n  margin-bottom: 8px;\n`);\n\nconst cssDetailsIcon = styled(icon, `\n  flex: none;\n  color: ${theme.controlFg};\n  --icon-color: ${theme.controlFg};\n  margin-left: 4px;\n  margin-top: -4px;\n  cursor: pointer;\n  &:hover {\n    --icon-color: ${theme.controlHoverFg};\n  }\n`);\n\nconst cssError = styled(icon, `\n  --icon-color: ${theme.iconError};\n  right: 2px;\n  position: absolute;\n  z-index: 1;\n  top: calc(50% - 8px);\n`);\n\nconst cssNavigationIcon = styled(icon, `\n  flex: none;\n  color: ${theme.controlFg};\n  --icon-color: ${theme.controlFg};\n  margin-right: 4px;\n  margin-top: -3px;\n  width: 12px;\n`);\n\nconst cssFlexBaseline = styled('div', `\n  display: flex;\n  align-items: baseline;\n`);\n\nconst cssSelected = styled(cssTableSource, `\n  &-skip {\n    color: ${theme.lightText};\n  }\n`);\n\nconst cssIcon180 = styled(icon, `\n  transform: rotate(180deg);\n`);\n\nconst cssGreenIcon = styled(`div`, `\n--icon-color: ${theme.accentIcon};\n`);\n\n\nconst cssColumnMappingNav = styled('span', `\n  text-transform: uppercase;\n  color: ${theme.darkText};\n  text-transform: uppercase;\n  font-weight: 600;\n  font-size: ${vars.smallFontSize};\n  letter-spacing: 0.5px;\n`);\n\nconst cssSlash = styled('div', `\n  padding: 0px 4px;\n  font-size: ${vars.xsmallFontSize};\n  color: ${theme.lightText};\n`);\n\nconst cssDestinationTableSecondary = styled(textButton, `\n  text-transform: uppercase;\n  font-size: ${vars.smallFontSize};\n  letter-spacing: 0.5px;\n  text-align: left;\n  margin-bottom: 16px;\n  color: ${theme.lightText};\n`);\n","/**\n * This module provides the ability to render and edit hierarchical layouts of boxes. Each box may\n * contain a list of other boxes, and horizontally- and vertically-arranged lists alternating with\n * the depth in the hierarchy.\n *\n * Layout\n *    Layout is a tree of LayoutBoxes (HBoxes and VBoxes). It consists of HBoxes and VBoxes in\n *    alternating levels. The leaves of the tree are LeafBoxes, and those are the only items that\n *    may be moved around, with the structure of Boxes above them changing to accommodate.\n *\n * LayoutBox\n *    A LayoutBox is a node in the Layout tree. LayoutBoxes should typically have nothing visual\n *    about them (e.g. no borders) except their dimensions: they serve purely for layout purposes.\n *\n *    A LayoutBox may be an HBox or a VBox. An HBox may contain multiple VBoxes arranged in a row.\n *    A VBox may contain multiple HBoxes one under the other. Either kind of LayoutBox may contain\n *    a single LeafBox instead of child LayoutBoxes. No LayoutBox may be empty, and no LayoutBox\n *    may contain a single LayoutBox as a child: it must contain either multiple LayoutBox\n *    children, or a single LeafBox.\n *\n * LeafBox\n *    A LeafBox is the container for user content, i.e. what needs to be laid out, for example\n *    form elements. LeafBoxes are what the user can drag around to other location in the layout.\n *    All the LeafBoxes in a Layout together fill the entire Layout rectangle. If some parts of\n *    the layout are to be empty, they should still contain an empty LeafBox.\n *\n *    There is no separate JS class for LeafBoxes, they are simply LayoutBoxes with .layout_leaf\n *    class and set leafId and leafContent member observables.\n *\n * Floater\n *    A Floater is a rectangle that floats over the layout with the mouse pointer while the user is\n *    dragging a LeafBox. It contains the content of the LeafBox being dragged, so that the user\n *    can see what is being repositioned.\n *\n * DropOverlay\n *    An DropOverlay is a visual aid to the user to indicate area over the current LeafBox where a\n *    drop may be attempted. It also computes the \"affinity\": which border of the current LeafBox\n *    the user is trying to target as the insertion point.\n *\n * DropTargeter\n *    DropTargeter displays a set of rectangles, each of which represents a particular allowed\n *    insertion point for the element being dragged. E.g. dragging an element to the right side of\n *    a LeafBox would display a drop target for each LayoutBox up the tree that allows a sibling\n *    to be inserted on the right.\n *\n * Saving Changes\n * --------------\n *    We don't attempt to save granular changes to the layout, for each drag operation, because\n *    for the user, it's better to finish editing the layout, and only save the end result. Also,\n *    it's not so easy (the structure changes many times while dragging, and a single drag\n *    operation results in a non-trivial diff of the 'before' and 'after' layouts). So instead, we\n *    just have a way to serialize the layout to and from a JSON blob.\n */\n\n\nimport dom, {detachNode, findAncestor} from '../lib/dom';\nimport koArray, {isKoArray, KoArray} from '../lib/koArray';\nimport {cssClass, domData, foreach, scope, style, toggleClass} from '../lib/koDom';\nimport {Disposable} from 'app/client/lib/dispose';\nimport assert from 'assert';\nimport {Events as BackboneEvents} from 'backbone';\nimport * as ko from 'knockout';\nimport {computed, isObservable, observable, utils} from 'knockout';\nimport {identity, last, uniqueId} from 'underscore';\n\nexport interface ContentBox {\n  leafId: ko.Observable<any>;\n  leafContent: ko.Observable<Element|null>;\n  dom: HTMLElement|null;\n}\n\nexport interface BoxSpec {\n  leaf?: string|number;\n  size?: number;\n  children?: BoxSpec[];\n  collapsed?: BoxSpec[];\n}\n\n/**\n * A LayoutBox is the node in the hierarchy of boxes comprising the layout. This class is used for\n * rendering as well as for the code editor. Since it may be rendered many times on a page, it's\n * important for it to be efficient.\n * @param {Layout} layout: The Layout object that manages this LayoutBox.\n */\nexport class LayoutBox extends Disposable implements ContentBox {\n  public layout: Layout;\n  public dom: HTMLElement | null = null;\n  public leafId: ko.Observable<any>; // probably number for section id\n  public parentBox: ko.Observable<LayoutBox|null>;\n  public childBoxes: KoArray<LayoutBox>;\n  public leafContent: ko.Observable<Element|null>;\n  public uniqueId: string;\n  public isVBox: ko.Computed<boolean>;\n  public isHBox: ko.Computed<boolean>;\n  public isLeaf: ko.Computed<boolean>;\n  public isMaximized: ko.Computed<boolean>;\n  public isHidden: ko.Computed<boolean>;\n  public flexSize: ko.Observable<number>;\n  private _parentBeingDisposed: boolean;\n\n  public create(layout: Layout) {\n    this.layout = layout;\n    this.parentBox = observable(null as any);\n    this.childBoxes = koArray();\n    this.leafId = observable(null);\n    this.leafContent = observable(null as any);\n    this.uniqueId = uniqueId(\"lb\"); // For logging and debugging.\n\n    this.isVBox = this.autoDispose(computed(() => {\n      return this.parentBox() ? !this.parentBox()!.isVBox() : true;\n    }, this));\n    this.isHBox = this.autoDispose(computed(() => { return !this.isVBox(); }));\n    this.isLeaf = this.autoDispose(computed(() => { return this.leafId() !== null; },\n      this));\n\n    this.isMaximized = this.autoDispose(ko.pureComputed(() => {\n      const leafId = this.layout?.maximizedLeaf();\n      if (!leafId) { return false; }\n      if (leafId === this.leafId()) { return true; }\n      return this.childBoxes.all().some(function(child) { return child.isMaximized(); });\n    }, this));\n    this.isHidden = this.autoDispose(ko.pureComputed(() => {\n      // If there isn't any maximized box, then no box is hidden.\n      const maximized = this.layout?.maximizedLeaf();\n      if (!maximized) { return false; }\n      return !this.isMaximized();\n    }, this));\n\n    // flexSize represents flexWidth for VBoxes and flexHeight for HBoxes.\n    // Undesirable transition effects are likely when <1, so we set average value\n    // to 100 so that reduction below 1 is rare.\n    this.flexSize = observable(100);\n\n    this.dom = null;\n\n    // This is an optimization to avoid the wasted cost of removeFromParent during disposal.\n    this._parentBeingDisposed = false;\n\n    this.autoDisposeCallback(() => {\n      if (!this._parentBeingDisposed) {\n        this.removeFromParent();\n      }\n      this.childBoxes.peek().forEach(function(child) {\n        child._parentBeingDisposed = true;\n        child.dispose();\n      });\n    });\n  }\n  public getDom() {\n    return this.dom || (this.dom = this.autoDispose(this.buildDom()));\n  }\n  public maximize() {\n    if (this.layout.maximizedLeaf.peek() !== this.leafId.peek()) {\n      this.layout.maximizedLeaf(this.leafId());\n    } else {\n      this.layout.maximizedLeaf(null);\n    }\n  }\n  public buildDom() {\n    const self = this;\n    const wrap = this.layout.needDynamic ? identity : makeStatic;\n\n    return dom('div.layout_box',\n      toggleClass('layout_leaf', wrap(this.isLeaf)),\n      toggleClass('layout_hidden', this.isHidden),\n      toggleClass(this.layout.leafId, wrap(this.isLeaf)),\n      cssClass(wrap(function() { return self.isVBox() ? \"layout_vbox\" : \"layout_hbox\"; })),\n      cssClass(wrap(function() {\n        return (self.layout.fillWindow ? 'layout_fill_window' :\n          (self.isLastChild() ? 'layout_last_child' : null));\n      })),\n      style('--flex-grow', wrap(function() {\n        return (self.isVBox() || (self.isHBox() && self.layout.fillWindow)) ? self.flexSize() : '';\n      })),\n      domData('layoutBox', this),\n      foreach(wrap(this.childBoxes), function(layoutBox: LayoutBox) {\n        return layoutBox.getDom();\n      }),\n      scope(wrap(this.leafContent), function(leafContent: any) {\n        return leafContent;\n      })\n    );\n  }\n  /**\n   * Moves the leaf id and content from another layoutBox, unsetting them in the source one.\n   */\n  public takeLeafFrom(sourceLayoutBox: ContentBox) {\n    this.leafId(sourceLayoutBox.leafId.peek());\n    // Note that we detach the node, so that the old box doesn't destroy its DOM.\n    this.leafContent(detachNode(sourceLayoutBox.leafContent.peek()));\n    sourceLayoutBox.leafId(null);\n    sourceLayoutBox.leafContent(null);\n  }\n  public setChildren(children: LayoutBox[]) {\n    children.forEach((child) => child.parentBox(this));\n    this.childBoxes.assign(children);\n  }\n  public isFirstChild() {\n    return this.parentBox() ? this.parentBox()!.childBoxes.peek()[0] === this : true;\n  }\n  public isLastChild() {\n    // Use .all() rather than .peek() because it's used in kd.toggleClass('layout_last_child'), and\n    // we want it to automatically stay correct when childBoxes array changes.\n    return this.parentBox() ? last(this.parentBox()!.childBoxes.all()) === this : true;\n  }\n  public isDomDetached() {\n    return !(this.dom && this.dom.parentNode);\n  }\n  public getSiblingBox(isAfter: boolean) {\n    if (!this.parentBox()) {\n      return null;\n    }\n    const siblings = this.parentBox()!.childBoxes.peek();\n    let index = siblings.indexOf(this);\n    if (index < 0) {\n      return null;\n    }\n    index += (isAfter ? 1 : -1);\n    return (index < 0 || index >= siblings.length ? null : siblings[index]);\n  }\n  public _addChild(childBox: LayoutBox, isAfter: boolean, optNextSibling?: LayoutBox) {\n    assert(childBox.parentBox() === null, \"LayoutBox._addChild: child already has parentBox set\");\n    let index;\n    if (optNextSibling) {\n      index = this.childBoxes.peek().indexOf(optNextSibling) + (isAfter ? 1 : 0);\n    } else {\n      index = isAfter ? this.childBoxes.peekLength : 0;\n    }\n    childBox.parentBox(this);\n    this.childBoxes.splice(index, 0, childBox);\n  }\n  public addSibling(childBox: LayoutBox, isAfter: boolean) {\n    childBox.removeFromParent();\n    const parentBox = this.parentBox();\n    if (parentBox) {\n      // Normally, we just add a sibling as requested.\n      parentBox._addChild(childBox, isAfter, this);\n    } else {\n      // If adding a sibling to the root node (another VBox), we need to create a new root and push\n      // things down two levels (HBox and VBox), and add the sibling to the lower VBox.\n      if (this.childBoxes.peekLength === 1) {\n        // Except when the root has a single child, in which case there is already a good place to\n        // add the new node two levels lower. And we should not create another level because the\n        // root is the only place that can have a single child.\n        const lowerBox = this.childBoxes.peek()[0];\n        assert(!lowerBox.isLeaf(), 'LayoutBox.addSibling: should not have leaf as a single child');\n        lowerBox._addChild(childBox, isAfter);\n      } else {\n        // Create a new root, and add the sibling two levels lower.\n        const vbox = LayoutBox.create(this.layout);\n        const hbox = LayoutBox.create(this.layout);\n        // We don't need removeFromParent here because this only runs when there is no parent.\n        vbox._addChild(hbox, false);\n        hbox._addChild(this, false);\n        hbox._addChild(childBox, isAfter);\n        this.layout.setRoot(vbox);\n      }\n    }\n    this.layout.trigger('layoutChanged');\n  }\n  public addChild(childBox: LayoutBox, isAfter: boolean) {\n    childBox.removeFromParent();\n    if (this.isLeaf()) {\n      // Move the leaf data into a new child, then add the requested childBox.\n      const newBox = LayoutBox.create(this.layout);\n      newBox.takeLeafFrom(this);\n      this._addChild(newBox, false);\n    }\n    this._addChild(childBox, isAfter);\n    this.layout.trigger('layoutChanged');\n  }\n  public toString(): string {\n    return this.isDisposed() ? this.uniqueId + \"[disposed]\" : (this.uniqueId +\n      (this.isHBox() ? \"H\" : \"V\") +\n      (this.isLeaf() ? \"(\" + this.leafId() + \")\" :\n        \"[\" + this.childBoxes.peek().map(function(b) { return b.toString(); }).join(\",\") + \"]\")\n    );\n  }\n  public _removeChildBox(childBox: LayoutBox) {\n    //console.log(\"_removeChildBox %s from %s\", childBox.toString(), this.toString());\n    let index = this.childBoxes.peek().indexOf(childBox);\n    childBox.parentBox(null);\n    if (index >= 0) {\n      this.childBoxes.splice(index, 1);\n      this.rescaleFlexSizes();\n    }\n    if (this.childBoxes.peekLength === 1) {\n      // If we now have a single child, then something needs to collapse.\n      const lowerBox = this.childBoxes.peek()[0];\n      const parentBox = this.parentBox();\n      if (lowerBox.isLeaf()) {\n        // Move the leaf data into ourselves, and remove the lower box.\n        this.takeLeafFrom(lowerBox);\n        lowerBox.dispose();\n      } else if (parentBox) {\n        // Move grandchildren into our place within our parent, and collapse two levels.\n        // (Unless we are the root, in which case it's OK for us to have a single non-leaf child.)\n        index = parentBox.childBoxes.peek().indexOf(this);\n        assert(index >= 0, 'LayoutBox._removeChildBox: box not found in parent');\n\n        const grandchildBoxes = lowerBox.childBoxes.peek();\n        grandchildBoxes.forEach(function(box) { box.parentBox(parentBox); });\n        parentBox.childBoxes.arraySplice(index, 0, grandchildBoxes);\n\n        lowerBox.childBoxes.splice(0, lowerBox.childBoxes.peekLength);\n        this.removeFromParent();\n\n        lowerBox.dispose();\n        this.dispose();\n      }\n    }\n  }\n  /**\n   * Helper to detach a box from its parent without disposing it. If you no longer plan to reattach\n   * the box, you should probably call box.dispose().\n   */\n  public removeFromParent() {\n    if (this.parentBox()) {\n      this.parentBox()!._removeChildBox(this);\n      this.layout.trigger('layoutChanged');\n    }\n  }\n  /**\n   * Adjust flexSize values of the children so that they add up to at least 1.\n   * Otherwise, Firefox will not stretch them to the full size of the container.\n   */\n  public rescaleFlexSizes() {\n    // Just scale so that the smallest value is 1.\n    const children = this.childBoxes.peek();\n    const minSize = Math.min.apply(null, children.map(function(b) { return b.flexSize(); }));\n    if (minSize < 1) {\n      children.forEach(function(b) {\n        b.flexSize(b.flexSize() / minSize);\n      });\n    }\n  }\n}\n\n/**\n * This helper turns a value, observable, or function (as accepted by koDom functions) into a\n * plain value. It's used to build a static piece of DOM without subscribing to any of the\n * observables, to avoid the performance cost of subscribing/unsubscribing.\n */\nfunction makeStatic(valueOrFunc: any) {\n  if (isObservable(valueOrFunc) || isKoArray(valueOrFunc)) {\n    return valueOrFunc.peek();\n  } else if (typeof valueOrFunc === 'function') {\n    return valueOrFunc();\n  } else {\n    return valueOrFunc;\n  }\n}\n\n//----------------------------------------------------------------------\n\n/**\n * @event layoutChanged: Triggered on changes to the structure of the layout.\n * @event layoutResized: Triggered on non-structural changes that may affect the size of rootElem.\n */\nexport class Layout extends Disposable {\n  /**\n   * You can also find the nearest containing LayoutBox without having the Layout object itself by\n   * using Layout.Layout.getContainingBox. The Layout object is then accessible as box.layout.\n   */\n  public static getContainingBox(elem: Element|null, optContainer: any) {\n    const boxElem = findAncestor(elem, optContainer, '.layout_box');\n    return boxElem ? utils.domData.get(boxElem, 'layoutBox') : null;\n  }\n\n  public listenTo: BackboneEvents[\"listenTo\"];            // set by Backbone\n  public trigger: BackboneEvents[\"trigger\"];              // set by Backbone\n  public stopListening: BackboneEvents[\"stopListening\"];  // set by Backbone\n\n  public maximizedLeaf: ko.Observable<string|null>;\n  public rootBox: ko.Observable<LayoutBox|null>;\n  public createLeafFunc: (id: string) => HTMLElement;\n  public fillWindow: boolean;\n  public needDynamic: boolean;\n  public rootElem: HTMLElement;\n  public leafId: string;\n  private _leafIdMap: Map<any, LayoutBox>|null;\n\n  public create(boxSpec: BoxSpec, createLeafFunc: (id: string) => HTMLElement, optFillWindow: boolean) {\n    this.maximizedLeaf = observable(null as (string|null));\n    this.rootBox = observable(null as any);\n    this.createLeafFunc = createLeafFunc;\n    this._leafIdMap = null;\n    this.fillWindow = optFillWindow || false;\n    this.needDynamic = false;\n    this.rootElem = this.autoDispose(this.buildDom());\n\n    // Generates a unique id class so boxes can only be placed next to other boxes in this layout.\n    this.leafId = uniqueId('layout_leaf_');\n\n    this.buildLayout(boxSpec || {});\n\n    // Invalidate the _leafIdMap when the layout is adjusted.\n    this.listenTo(this, 'layoutChanged', () => { this._leafIdMap = null; });\n\n    this.autoDisposeCallback(() => {\n      if (this.rootBox()) {\n        this.rootBox()!.dispose();\n      }\n    });\n  }\n  /**\n   * Finds and returns the leaf layout box containing the content for the given leafId.\n   */\n  public getLeafBox(leafId: string|number) {\n    return this.getLeafIdMap().get(leafId);\n  }\n  /**\n   * Returns the list of all leafIds present in this layout.\n   */\n  public getAllLeafIds() {\n    return Array.from(this.getLeafIdMap().keys());\n  }\n  public setRoot(layoutBox: LayoutBox) {\n    this.rootBox(layoutBox);\n  }\n  public buildDom() {\n    return dom('div.layout_root',\n      domData('layoutModel', this),\n      toggleClass('layout_fill_window', this.fillWindow),\n      toggleClass('layout_box_maximized', this.maximizedLeaf),\n      scope(this.rootBox, (rootBox: LayoutBox) => {\n        return rootBox ? rootBox.getDom() : null;\n      })\n    );\n  }\n  /**\n   * Calls cb on each box in the layout recursively.\n   */\n  public forEachBox(cb: (box: LayoutBox) => void, optContext?: any) {\n    if (!this.rootBox.peek()) {\n      return;\n    }\n    function iter(box: any) {\n      cb.call(optContext, box);\n      box.childBoxes.peek().forEach(iter);\n    }\n    iter(this.rootBox.peek());\n  }\n  public buildLayoutBox(boxSpec: BoxSpec) {\n    // Note that this is hot code: it runs when rendering a layout for each record, not only for the\n    // layout editor.\n    const box = LayoutBox.create(this);\n    if (boxSpec.size) {\n      box.flexSize(boxSpec.size);\n    }\n    if (boxSpec.leaf) {\n      box.leafId(boxSpec.leaf);\n      box.leafContent(this.createLeafFunc(box.leafId()!));\n    } else if (boxSpec.children) {\n      box.setChildren(boxSpec.children.map(this.buildLayoutBox, this));\n    }\n    return box;\n  }\n  public buildLayout(boxSpec: BoxSpec, needDynamic = false) {\n    this.needDynamic = needDynamic;\n    const oldRootBox = this.rootBox();\n    this.rootBox(this.buildLayoutBox(boxSpec));\n    this.trigger('layoutChanged');\n    if (oldRootBox) {\n      oldRootBox.dispose();\n    }\n  }\n  public _getBoxSpec(layoutBox: LayoutBox) {\n    const spec: BoxSpec = {};\n    if (layoutBox.isDisposed()) {\n      return spec;\n    }\n    if (layoutBox.flexSize() && layoutBox.flexSize() !== 100) {\n      spec.size = layoutBox.flexSize();\n    }\n    if (layoutBox.isLeaf()) {\n      spec.leaf = layoutBox.leafId();\n    } else {\n      spec.children = layoutBox.childBoxes.peek().map(this._getBoxSpec, this);\n    }\n    return spec;\n  }\n  public getLayoutSpec() {\n    return this._getBoxSpec(this.rootBox()!);\n  }\n  /**\n   * Returns a Map object mapping leafId to its LayoutBox. This gets invalidated on layoutAdjust\n   * events, and rebuilt on next request.\n   */\n  public getLeafIdMap() {\n    if (!this._leafIdMap) {\n      this._leafIdMap = new Map<number|string, LayoutBox>();\n      this.forEachBox((box) => {\n        const leafId = box.leafId.peek();\n        if (leafId !== null) {\n          this._leafIdMap!.set(leafId, box);\n        }\n      }, this);\n    }\n    return this._leafIdMap;\n  }\n  /**\n   * Returns a LayoutBox object containing the given DOM element, or null if not found.\n   */\n  public getContainingBox(elem: Element|null) {\n    return Layout.getContainingBox(elem, this.rootElem);\n  }\n}\n\nObject.assign(Layout.prototype, BackboneEvents);\n","/**\n * The LayoutEditor can be attached to a Layout object to allow changing it.\n *\n * Issues:\n * TODO: Hitting ESC while dragging should revert smoothly. We can collapse the original leaf, but\n * not remove it. On Cancel, we would uncollapse it, and remove the newly-inserted targetBox.\n * TODO: UNDO should work. It's OK to just rebuild the old layout without any transition. In other\n * words, this may be fine to do fully outside of LayoutEditor.\n * TODO: if mouseup over an active hint of the DropTargeter, it might be a better experience to\n * reposition to that spot.\n *\n * TEST CASES THAT SHOULD BE VERIFIED AFTER ANY CHANGE.\n * These refer to test/client/components/sampleLayout.js, testable at\n * http://localhost:8080/testKoForm.html#topTab=4.\n * 1. Drag #1 down and up its container element, pausing at borders. Elements around that border\n * should smoothly float to open space for it. Dropping it should cause no jumps.\n * 2. Drag #1 down to top of #6. A grey \"drop target\" rectangle should appear. Hovering over it\n * should open space over #6. After that, dragging to bottom of #6 and back to top of #6 should\n * open the space automatically without the \"drop target\".\n * 3. Drag #3 right and left in its container, pausing at borders. Elements should again smoothly\n * float to open space for it. Dropping it should cause no jumps.\n * 4. Drag #4 down into #5, positioning above #5, below, to the left (splitting #5 horizontally)\n * or to the right.\n * 5. Drop #4 onto the leftmost \"drop target\" on the left side of #5. It should end up as 1/3 of\n * the width of the entire layout, spanning the full height above #6. Drop it back to its place\n * between #3 and #9.\n * 6. Resizing: every vertical line should allow dragging it left or right to resize. The \"resize\"\n * mouse pointer should appear over a few pixels to the left and right of the border, it should\n * not be a difficult area to target. (This gets messed up if overflow:hidden is set on the box\n * elements.)\n * 7. Drag box 3 to trash; hovering should make it disappear from Layout, mousing back should\n * bring it back. Mouse-up over the trash icon should leave it out of the layout.\n * 8. Drag boxes 3, 9, 10, 2, 7, 1 (8 should stretch vertically), 5 to trash. They should\n * disappear with other elements shrinking or expanding to close the gap.\n * 9. Adding a new element: Drag \"+ Add New\" box to between 1 and 2. A \"drop target\" should\n * appear, allowing you to insert it. Same for adding between 3 and 4. Should be no jumps.\n * 10. Drag new element to above #3: three possible drop targets should appear. Hover over each in\n * turn, starting from the bottommost part, and make sure it gets inserted in the right level.\n */\n\n\nimport {extend, noop, pick} from 'underscore';\nimport {observable, removeNode, utils} from 'knockout';\nimport assert from 'assert';\nimport Promise from 'bluebird';\nimport {Events as BackboneEvents} from 'backbone';\n\nimport {Disposable, emptyNode} from 'app/client/lib/dispose';\nimport {Delay} from 'app/client/lib/Delay';\nimport dom from 'app/client/lib/dom';\nimport koDom from 'app/client/lib/koDom';\nimport {ContentBox, Layout, LayoutBox} from './Layout';\nimport * as ko from 'knockout';\nimport {get as getBrowserGlobals} from 'app/client/lib/browserGlobals';\n\n/**\n * Use the browser globals in a way that allows replacing them with mocks in tests.\n */\nconst G = getBrowserGlobals('document', 'window', '$');\n\n//----------------------------------------------------------------------\n\nclass HelperBox {\n  public box!: LayoutBox;\n  public scalePerFlexUnit: number = 0;\n  public nextSiblings: LayoutBox[] = [];\n  public origNextSizes: number[] = [];\n  public origSize: number = 0;\n  public sumAll: number = 0;\n  public sumPrev: number = 0;\n  public sumNext: number = 0;\n  constructor(data?: Partial<HelperBox>) {\n    if (data) {\n      extend(this, data);\n    }\n  }\n}\n\ninterface TargetPart {\n  box: LayoutBox;\n  isChild: boolean;\n  isAfter: boolean;\n}\n\ninterface JqueryUI {\n  size: { width: number, height: number };\n  position: { left: number, top: number };\n  originalPosition: { left: number, top: number };\n  originalSize: { width: number, height: number };\n}\n\ntype LeafId = string|number;\n\n/**\n * The Floater class represents a floating version of the element being dragged around. Its size\n * corresponds to the box being dragged. It lets the user see what's being repositioned.\n */\nclass Floater extends Disposable implements ContentBox {\n  public leafId: ko.Observable<LeafId|null>;\n  public leafContent: ko.Observable<Element | null>;\n  public fillWindow: boolean;\n  public dom: HTMLElement;\n  public mouseOffsetX: number;\n  public mouseOffsetY: number;\n  public lastMouseEvent: MouseEvent | null;\n\n  public create(fillWindow?: boolean) {\n    this.leafId = observable<LeafId|null>(null);\n    this.leafContent = observable<Element | null>(null);\n    this.fillWindow = fillWindow || false;\n\n    this.dom = this.autoDispose(dom('div.layout_editor_floater',\n      koDom.show(this.leafContent),\n      koDom.scope(this.leafContent, (leafContent: Element) => {\n        return leafContent;\n      })\n    ));\n    G.document.body.appendChild(this.dom);\n\n    this.mouseOffsetX = 0;\n    this.mouseOffsetY = 0;\n    this.lastMouseEvent = null;\n  }\n  public onInitialMouseMove(mouseEvent: MouseEvent, sourceBox: ContentBox) {\n    const rect = sourceBox.dom!.getBoundingClientRect();\n    this.dom.style.width = rect.width + 'px';\n    this.dom.style.height = rect.height + 'px';\n    this.mouseOffsetX = 0.2 * rect.width;\n    this.mouseOffsetY = 0.1 * rect.height;\n    this.onMouseMove(mouseEvent);\n\n    this.leafId(sourceBox.leafId());\n    this.leafContent(sourceBox.leafContent());\n    // We use a dummy non-null leafId here, to ensure that sourceBox remains considered a leaf.\n    sourceBox.leafId('empty');\n    sourceBox.leafContent(dom('div.layout_editor_empty_space',\n      koDom.style('margin', (rect.height * 0.02) + 'px'),\n      koDom.style('min-height', (rect.height * 0.96) + 'px')\n    ));\n  }\n  public onMouseUp() {\n    this.lastMouseEvent = null;\n  }\n  public onMouseMove(mouseEvent: MouseEvent) {\n    this.lastMouseEvent = mouseEvent;\n    this.dom.style.left = (mouseEvent.clientX - this.mouseOffsetX) + 'px';\n    this.dom.style.top = (mouseEvent.clientY - this.mouseOffsetY) + 'px';\n  }\n}\n\n\n\n\n//----------------------------------------------------------------------\n\n/**\n * DropOverlay is a rectangular indicator that's displayed over a leaf box under the mouse\n * pointer, and shows regions of affinity towards one of the borders. It also computes which\n * region the user is targeting, and returns an affinity value.\n */\nclass DropOverlay extends Disposable {\n  public overlayElem: HTMLElement;\n  public overlayRect: DOMRect|null;\n  public hBorder: number | null;\n  public vBorder: number | null;\n  public create() {\n    this.overlayElem = this.autoDispose(dom('div.layout_editor_drop_overlay'));\n    this.overlayRect = null;\n    this.hBorder = null;\n    this.vBorder = null;\n  }\n  /**\n   * Hides the overlay box by detaching it from the current element, if any.\n   */\n  public detach() {\n    if (this.overlayElem.parentNode) {\n      this.overlayElem.parentNode.removeChild(this.overlayElem);\n    }\n  }\n  /**\n   * Shows the overlay box over the given element.\n   */\n  public attach(targetElem: HTMLElement) {\n    const rect = this.overlayRect = targetElem.getBoundingClientRect();\n    /*\n    // If uncommented, this will show areas of affinity when hovering over a box. This is helpful in\n    // debugging, and may be helpful to users too, but makes the interface feel more cluttered.\n    if (this.overlayElem.parentNode !== targetElem) {\n      // This also automatically removes it from the old parent, if any.\n      targetElem.appendChild(this.overlayElem);\n    }\n    */\n    // Areas of affinity are essentially fat borders, proportional to width and height. In addition,\n    // to avoid overly disproportionate regions, we use twice the smaller dimension to limit the\n    // larger dimension.\n    this.hBorder = Math.floor(Math.min(rect.height, rect.width * 2) / 3);\n    this.vBorder = Math.floor(Math.min(rect.width, rect.height * 2) / 3);\n    const s = this.overlayElem.style;\n    s.borderTopWidth = s.borderBottomWidth = this.hBorder + 'px';\n    s.borderLeftWidth = s.borderRightWidth = this.vBorder + 'px';\n  }\n  /**\n   * If the mouse is over a region of affinity, returns the affinity as an 0-3 integer (see\n   * AFFINITY_NAMES above). Otherwise, returns -1.\n   */\n  public getAffinity(mouseEvent: MouseEvent) {\n    const rect = this.overlayRect!;\n    const x = mouseEvent.clientX - rect.left, y = mouseEvent.clientY - rect.top;\n    const top = getFrac(y, this.hBorder!), down = getFrac(rect.height - y, this.hBorder!);\n    const left = getFrac(x, this.vBorder!), right = getFrac(rect.width - x, this.vBorder!);\n    const minValue = Math.min(top, down, left, right);\n\n    return (minValue === Infinity ? -1 : [top, down, left, right].indexOf(minValue));\n  }\n}\n\n//----------------------------------------------------------------------\n\n/**\n * DropTargeter displays a set of rectangles, each of which represents a particular allowed\n * insertion point for the element being dragged. It only shows the insertion points at the edge\n * of a particular layoutBox as indicated by DropOverlay.\n */\nclass DropTargeter extends Disposable {\n  public listenTo: BackboneEvents[\"listenTo\"];\n  public trigger: BackboneEvents[\"trigger\"];\n  public stopListening: BackboneEvents[\"stopListening\"];\n  public rootElem: HTMLElement;\n  public targetsDom: HTMLElement|null;\n  public currentBox: LayoutBox | null;\n  public currentAffinity: number | null;\n  public delayedInsertion: Delay;\n  public activeTarget: TargetPart|null;\n\n  public create(rootElem: HTMLElement) {\n    this.rootElem = rootElem;\n    this.targetsDom = null;\n    this.currentBox = null;\n    this.currentAffinity = null;\n    this.delayedInsertion = Delay.create();\n    this.activeTarget = null;\n    this.autoDisposeCallback(this.removeTargetHints);\n  }\n  public removeTargetHints() {\n    if (this.activeTarget?.box?.dom) {\n      this.activeTarget.box.dom.style.transition = '';\n      this.activeTarget.box.dom.style.padding = '0';\n    }\n    this.activeTarget = null;\n    this.delayedInsertion.cancel();\n    if (this.targetsDom) {\n      removeNode(this.targetsDom);\n      this.targetsDom = null;\n    }\n    this.currentBox = null;\n    this.currentAffinity = null;\n  }\n  public updateTargetHints(\n    layoutBox: LayoutBox|null,\n    affinity: number,\n    overlay: DropOverlay,\n    prevTargetBox?: LayoutBox\n  ) {\n    // Nothing to update.\n    if (!layoutBox || (layoutBox === this.currentBox && affinity === this.currentAffinity)) {\n      return;\n    }\n    this.removeTargetHints();\n    if (affinity === -1) {\n      return;\n    }\n    this.currentBox = layoutBox;\n    this.currentAffinity = affinity;\n\n    const upDown = isAffinityUpDown(affinity);\n    const isAfter = isAffinityAfter(affinity);\n\n    const targetParts: TargetPart[] = [];\n    // Allow dragging a leaf into another leaf as a child, splitting the latter into two.\n    // But don't allow dragging a leaf box into itself, that makes no sense.\n    if (upDown === layoutBox.isVBox() && layoutBox !== prevTargetBox) {\n      targetParts.push({box: layoutBox, isChild: true, isAfter: isAfter});\n    }\n    while (layoutBox) {\n      if (upDown === layoutBox.isHBox()) {\n        const children = layoutBox.childBoxes.peek();\n        // If one of two children is prevTargetBox, replace the last target hint since it\n        // will be redundant once prevTargetBox is removed.\n        if (children.length === 2 && prevTargetBox?.parentBox() === layoutBox) {\n          targetParts.splice(targetParts.length - 1, 1,\n            {box: layoutBox, isChild: false, isAfter: isAfter});\n        }\n        // If there is only one child (which may happen for the root box), the target hint\n        // is redundant.\n        else if (prevTargetBox !== layoutBox && prevTargetBox !== layoutBox.getSiblingBox(isAfter) &&\n          children.length !== 1) {\n          targetParts.push({box: layoutBox, isChild: false, isAfter: isAfter});\n        }\n        if (isAfter && !layoutBox.isLastChild()) { break; }\n        if (!isAfter && !layoutBox.isFirstChild()) { break; }\n      }\n      layoutBox = layoutBox.parentBox();\n    }\n    if (targetParts.length === 0) {\n      return;\n    }\n\n    // Render the hint parts.\n    if (!isAfter) {\n      targetParts.reverse();\n    }\n\n    // The same code works for both horizontal and vertical situation. For ease of thinking about\n    // it, we pretend below that we are dealing with an up-down situation (drop hints are horizontal\n    // wide boxes stacked vertically), and use properties that are named using the up-down\n    // situation, but whose values might reflect a left-right situation.\n    const pTop = upDown ? 'top' : 'left', pHeight = upDown ? 'height' : 'width',\n          pLeft = upDown ? 'left' : 'top', pWidth = upDown ? 'width' : 'height';\n    let totalHeight = upDown ? overlay.hBorder! : overlay.vBorder!;\n    const singleHeight = Math.floor(totalHeight / targetParts.length);\n\n    // Adjust to account for the rounding-down above.\n    totalHeight = singleHeight * targetParts.length;\n\n    const outerRect = this.rootElem.getBoundingClientRect();\n    const innerRect = this.currentBox.dom!.getBoundingClientRect();\n\n    const self = this;\n    this.targetsDom = dom('div.layout_editor_drop_targeter',\n      koDom.style(pTop,\n        (innerRect[pTop] - outerRect[pTop] +\n          (isAfter ? innerRect[pHeight] - totalHeight : 0)) + 'px'\n      ),\n      targetParts.map((part, index) => {\n        const rect = part.box.dom!.getBoundingClientRect();\n        return dom('div.layout_editor_drop_target', (elem: HTMLDivElement) => {\n            elem.style[pHeight] = (singleHeight + 1) + 'px'; // 1px of overlap for better looks\n            elem.style[pWidth] = rect[pWidth] + 'px';\n            elem.style[pLeft] = (rect[pLeft] - outerRect[pLeft]) + 'px';\n            elem.style[pTop] = (singleHeight * index) + 'px';\n          },\n          dom.on('mouseenter', function(this: HTMLElement) {\n            this.classList.add(\"layout_hover\");\n            self.activeTarget = part;\n            const padDir = upDown ? (isAfter ? 'Bottom' : 'Top') : (isAfter ? 'Right' : 'Left');\n            const padding = 'padding' + padDir;\n            part.box.dom!.style.transition = 'padding .3s';\n            part.box.dom!.style[padding as any] = '20px';\n          }),\n          dom.on('mouseleave', function(this: HTMLElement) {\n            this.classList.remove(\"layout_hover\");\n            self.activeTarget = null;\n            part.box.dom!.style.padding = '0';\n          }),\n          dom.on('transitionend', this.triggerInsertion.bind(this, part))\n        );\n      })\n    );\n    this.rootElem.appendChild(this.targetsDom!);\n  }\n  public triggerInsertion(part: TargetPart) {\n    this.removeTargetHints();\n    this.trigger('insertBox', (box: LayoutBox) => {\n      if (part.isChild) {\n        part.box.addChild(box, part.isAfter);\n      } else {\n        part.box.addSibling(box, part.isAfter);\n      }\n    });\n  }\n  public accelerateInsertion() {\n    if (this.activeTarget) {\n      this.activeTarget.box.dom!.style.transition = '';\n      this.activeTarget.box.dom!.style.padding = '0';\n      this.triggerInsertion(this.activeTarget);\n    }\n  }\n}\n\nextend(DropTargeter.prototype, BackboneEvents);\n\n//----------------------------------------------------------------------\n\n/**\n * When a LayoutEditor is created for a given Layout object, it makes it possible to drag\n * LayoutBoxes to change the layout.\n *\n * When a user drags a box, its content migrates temporarily to the Floater element, which moves\n * with the mouse cursor. As the user drags, the space for the element will open up here or there,\n * by adding an appropriate empty targetBox. DropOverlay and DropTargeter together decide the\n * insertion point for the drag operations.\n *\n * NOTES:\n *  There is some awkwardness in sizing: in a vertically laid out box, the last box takes up all\n *  available space, so moving it away does not show a transition (the box transitions to empty in\n *  theory, but it still takes all the same available space).\n */\nexport class LayoutEditor extends Disposable {\n  public layout: Layout;\n  public rootElem: HTMLElement;\n  public floater: Floater;\n  public dropOverlay: DropOverlay;\n  public dropTargeter: DropTargeter;\n  public measuringBox: HTMLElement;\n\n  public listenTo: BackboneEvents[\"listenTo\"];\n  public trigger: BackboneEvents[\"trigger\"];\n  public stopListening: BackboneEvents[\"stopListening\"];\n\n  public transitionPromise: Promise<void>;\n  public trashDelay: Delay;\n  public originalBox: LayoutBox|null;\n  public targetBox: LayoutBox|null;\n  public boundMouseDown: (ev: MouseEvent, el: HTMLElement) => void;\n  public boundMouseMove: (ev: MouseEvent, el: HTMLElement) => void;\n  public boundMouseUp: (ev: MouseEvent, el: HTMLElement) => void;\n  public initialMouseDown: boolean;\n  public lastTriggered: string;\n\n  public create(layout: Layout) {\n    this.layout = layout;\n    this.rootElem = layout.rootElem;\n\n    this.layout.buildLayout(this.layout.getLayoutSpec(), true);\n    this.floater = this.autoDispose(Floater.create(this.layout.fillWindow));\n    this.dropOverlay = this.autoDispose(DropOverlay.create());\n    this.dropTargeter = this.autoDispose(DropTargeter.create(this.rootElem));\n    this.listenTo(this.dropTargeter, 'insertBox', this.onInsertBox);\n\n    // This is a place to put LayoutBoxes that should NOT be shown, but SHOULD be possible to\n    // measure. It's used when a new box is being moved into the editor.\n    this.measuringBox = this.autoDispose(dom('div.layout_editor_measuring_box'));\n    this.rootElem.appendChild(this.measuringBox);\n\n    // For better experience, we prevent new repositions while a transition is active, and we\n    // require some work (leaving and re-entering affinity area) after a previous transition ends.\n    this.transitionPromise = Promise.resolve();\n    this.trashDelay = Delay.create();\n\n    // TODO: We don't use originalBox at the moment, but may want to, specifically to collapse it\n    // without removing, and restore if the user hits \"Escape\".\n    // This is the box the user clicked, to move its content elsewhere.\n    this.originalBox = null;\n\n    // The new box into which the content is to be inserted. During a move operation, it starts out\n    // with this.originalBox.\n    this.targetBox = null;\n\n    // Make all LayoutBoxes resizable. Update whenever the layout changes.\n    this.layout.forEachBox(this.makeResizable, this);\n    this.listenTo(this.layout, 'layoutChanged', () => {\n      this.layout.forEachBox(this.makeResizable, this);\n    });\n\n    const self = this;\n    this.boundMouseDown = function(this: HTMLElement, ev: MouseEvent) {\n      return self.handleMouseDown(ev, this);\n    };\n    this.boundMouseMove = this.handleMouseMove.bind(this);\n    this.boundMouseUp = this.handleMouseUp.bind(this);\n    G.$(this.rootElem).on('mousedown', '.layout_leaf', this.boundMouseDown);\n\n    this.initialMouseDown = false;\n\n    this.lastTriggered = 'stop';\n\n    this.autoDisposeCallback(() => {\n      G.$(G.window).off('mouseup', this.boundMouseUp);\n      G.$(G.window).off('mousemove', this.boundMouseMove);\n      G.$(this.rootElem).off('mousedown', this.boundMouseDown);\n      if (!this.layout.isDisposed()) {\n        this.layout.buildLayout(this.layout.getLayoutSpec(), false);\n        this.layout.forEachBox(this.unmakeResizable, this);\n      }\n    });\n  }\n  public triggerUserEditStart() {\n    assert(this.lastTriggered === 'stop', \"UserEditStart triggered twice in succession\");\n    this.lastTriggered = 'start';\n    // This attribute allows browser tests to tell when an edit is in progress.\n    this.rootElem.setAttribute('data-useredit', 'start');\n    this.layout.trigger('layoutUserEditStart');\n  }\n  public triggerUserEditStop() {\n    assert(this.lastTriggered === 'start', \"UserEditStop triggered twice in succession\");\n    this.lastTriggered = 'stop';\n    this.layout.trigger('layoutUserEditStop');\n    // This attribute allows browser tests to tell when an edit is finished.\n    this.rootElem.setAttribute('data-useredit', 'stop');\n  }\n  public makeResizable(box: LayoutBox) {\n    // Do not add resizable if:\n    // Box already resizable, box is not vertically resizable, box is last in it`s group.\n    if (G.$(box.dom).resizable('instance') || (box.isHBox() && !this.layout.fillWindow) ||\n      box.isLastChild()) {\n      return;\n    }\n    const helperObj = new HelperBox({box});\n    const isWidth = box.isVBox();\n    G.$(box.dom).resizable({\n      handles: isWidth ? 'e' : 's',\n      start: this.onResizeStart.bind(this, helperObj, isWidth),\n      resize: this.onResizeMove.bind(this, helperObj, isWidth),\n      stop: this.triggerUserEditStop.bind(this)\n    });\n  }\n  public unmakeResizable(box: LayoutBox) {\n    if (G.$(box.dom).resizable(\"instance\")) {\n      // Resizable widget is set for this box.\n      G.$(box.dom).resizable('destroy');\n    }\n  }\n  public onResizeStart(helperObj: HelperBox, isWidth: boolean, event: MouseEvent, ui: JqueryUI) {\n    this.triggerUserEditStart();\n    const size = isWidth ? ui.originalSize.width : ui.originalSize.height;\n    helperObj.scalePerFlexUnit = size / (helperObj.box.flexSize() || 1);\n    const allSiblings = helperObj.box.parentBox()!.childBoxes.peek();\n    const index = allSiblings.indexOf(helperObj.box);\n    helperObj.nextSiblings = allSiblings.slice(index + 1);\n    helperObj.origNextSizes = helperObj.nextSiblings.map(function(b) { return b.flexSize(); });\n    helperObj.origSize = helperObj.box.flexSize();\n    helperObj.sumPrev = allSiblings.slice(0, index).reduce(adder, 0);\n    helperObj.sumAll = allSiblings.reduce(adder, 0);\n    helperObj.sumNext = helperObj.sumAll - helperObj.sumPrev;\n  }\n  public onResizeMove(helperObj: HelperBox, isWidth: boolean, event: MouseEvent, ui: JqueryUI) {\n    const sizePx = isWidth ? ui.size.width : ui.size.height;\n    let newSize = sizePx / helperObj.scalePerFlexUnit;\n\n    // We need some amount of snapping to make it easier to align boxes. The way we'll do it is to\n    // adjust flexSize of the box being resized and all following boxes so that boundaries end up at\n    // multiples of fullSize / NumSteps.\n    newSize = snap(newSize, helperObj.sumPrev, helperObj.sumAll);\n    const siblingsFactor = (helperObj.sumNext - newSize) / (helperObj.sumNext - helperObj.origSize);\n    let sumPrev = helperObj.sumPrev + newSize;\n    const newSizes: number[] = [];\n    helperObj.origNextSizes.forEach(function(size) {\n      const s = snap(size * siblingsFactor, sumPrev, helperObj.sumAll);\n      sumPrev += s;\n      newSizes.push(s);\n    });\n\n    if (newSize <= 0 || newSizes.some(size => size <= 0)) {\n      return; // This isn't an acceptable position.\n    }\n    if (newSize !== helperObj.box.flexSize.peek()) {\n      helperObj.box.flexSize(newSize);\n      helperObj.nextSiblings.forEach(function(b, i) {\n        b.flexSize(newSizes[i]);\n      });\n      this.layout.trigger('layoutResized');\n    }\n  }\n  public handleMouseDown(event: MouseEvent, elem: HTMLElement) {\n    const target = (event.target as HTMLElement);\n    if (event.button !== 0 || target?.classList.contains('ui-resizable-handle')) {\n      return;\n    }\n    if (target?.classList.contains('layout_grabbable')) {\n      this.initialMouseDown = true;\n      this.originalBox = utils.domData.get(elem, 'layoutBox');\n      assert(this.originalBox, \"MouseDown on element without an associated layoutBox\");\n      G.$(G.window).on('mousemove', this.boundMouseMove);\n      G.$(G.window).on('mouseup', this.boundMouseUp);\n      return false;\n    }\n  }\n  // Exposed for tests\n  public dragInNewBox(event: MouseEvent, leafId: number) {\n    const box = this.layout.buildLayoutBox({leaf: leafId});\n\n    // Place this box into a measuring div.\n    this.measuringBox.appendChild(box.getDom());\n\n    this.handleMouseDown(event, box.dom!);\n  }\n  public startDragBox(event: MouseEvent, box: LayoutBox) {\n    this.triggerUserEditStart();\n    this.targetBox = box;\n    this.floater.onInitialMouseMove(event, box);\n    this.trigger('dragStart', this.originalBox);\n  }\n  public handleMouseUp(event: MouseEvent) {\n    G.$(G.window).off('mousemove', this.boundMouseMove);\n    G.$(G.window).off('mouseup', this.boundMouseUp);\n\n    if (this.initialMouseDown) {\n      this.initialMouseDown = false;\n      return;\n    }\n\n    // We stopped dragging, any listener can clean its modification\n    // to the floater element.\n    this.trigger('dragStop');\n    this.targetBox!.takeLeafFrom(this.floater);\n    // We dropped back the box to its original position, now\n    // anyone can hijack the box.\n    this.trigger('dragDrop', this.targetBox);\n\n    // Check if the box was hijacked by a drop target.\n    if (this.originalBox?.leafId() !== 'empty') {\n      if (this.dropTargeter.activeTarget) {\n        this.dropTargeter.accelerateInsertion();\n      } else {\n        resizeLayoutBox(this.targetBox!, 'reset');\n      }\n    }\n\n    this.dropTargeter.removeTargetHints();\n    this.dropOverlay.detach();\n    this.trigger('dragEnd');\n    // Cleanup for any state.\n    this.transitionPromise.finally(() => {\n      this.floater.onMouseUp();\n      resizeLayoutBox(this.targetBox!, 'reset');\n      this.targetBox = this.originalBox = null;\n      emptyNode(this.measuringBox);\n      this.triggerUserEditStop();\n    });\n  }\n\n  public getBoxFromElement(elem: HTMLElement) {\n    const box = this.layout.getContainingBox(elem);\n    if (box && !box.isDomDetached()) {\n      return box;\n    }\n    return null;\n  }\n\n  public getBox(leafId: number) {\n    return this.layout.getLeafBox(leafId);\n  }\n\n  public removeContainingBox(box: LayoutBox) {\n    if (box && !box.isDomDetached()) {\n      this.triggerUserEditStart();\n      this.targetBox = box;\n      this.doRemoveBox(box);\n      this.triggerUserEditStop();\n    }\n  }\n\n  public doRemoveBox(box: ContentBox) {\n    const rect = box.dom!.getBoundingClientRect();\n    box.leafId('empty');\n    box.leafContent(dom('div.layout_editor_empty_space',\n      koDom.style('min-height', rect.height + 'px')\n    ));\n    this.onInsertBox(noop).catch(noop);\n  }\n  public handleMouseMove(event: MouseEvent) {\n    // Make sure the grabbed box still exists\n    if (!this.originalBox || this.originalBox?.isDisposed()) {\n      return;\n    }\n\n    if (this.initialMouseDown) {\n      this.initialMouseDown = false;\n      this.startDragBox(event, this.originalBox);\n    }\n    this.floater.onMouseMove(event);\n\n    this.trigger('dragMove', event, this.originalBox);\n\n    if (this.transitionPromise.isPending()) {\n      // Don't attempt to do any repositioning while another reposition is happening.\n      return;\n    }\n\n    // Handle dragging to trash.\n    if (dom.findAncestor(event.target, null, '.layout_trash')) {\n      const isTrashed = this.targetBox && this.targetBox.isDomDetached();\n      if (!this.trashDelay.isPending() && !isTrashed) {\n        // To \"trash\" a box, we call onInsertBox with noop for the inserter function. The new box\n        // will still be created, just not attached to anything.\n        this.trashDelay.schedule(100, this.onInsertBox, this, noop);\n      }\n      return;\n    }\n    this.trashDelay.cancel();\n    this.updateTargets(event);\n  }\n\n  public updateTargets(event: MouseEvent) {\n    if (this.transitionPromise.isPending()) {\n      // Don't attempt to do any repositioning while another reposition is happening.\n      return;\n    }\n    // See if we are over a layout_leaf, and that the leaf is in the same layout as the dragged\n    // element. If so, we are dealing with repositioning.\n    const elem = dom.findAncestor(event.target, this.rootElem, '.' + this.layout.leafId);\n    if (elem) {\n      const hoverBox = utils.domData.get(elem, 'layoutBox');\n      this.dropOverlay.attach(elem);\n      const affinity = this.dropOverlay.getAffinity(event);\n      this.dropTargeter.updateTargetHints(hoverBox, affinity, this.dropOverlay, this.targetBox!);\n    } else if (!dom.findAncestor(event.target, this.rootElem, '.layout_editor_drop_target')) {\n      this.dropTargeter.removeTargetHints();\n    }\n  }\n  public async onInsertBox(inserterFunc: (box: LayoutBox) => void) {\n    // Create a new LayoutBox, and insert it using inserterFunc.\n    // Shrink prevTargetBox to 0. Create a new target box, initially shrunk, and grow it.\n    const prevTargetBox = this.targetBox!;\n\n    this.targetBox = LayoutBox.create(this.layout);\n    this.targetBox.takeLeafFrom(prevTargetBox);\n    this.targetBox.flexSize(prevTargetBox.flexSize());\n\n    // Sizing boxes vertically requires extra care that the sum of values doesn't change.\n    this.targetBox.getDom(); // Make sure its dom is created.\n\n\n    //console.log(\"onInsertBox %s -> %s\", prevTargetBox, this.targetBox);\n    let transitionPromiseResolve!: () => void;\n    this.transitionPromise = new Promise(function(resolve, reject) {\n      transitionPromiseResolve = resolve;\n    });\n\n    inserterFunc(this.targetBox);\n\n    const prevRect = prevTargetBox.dom!.getBoundingClientRect();\n\n    // Set previous box size to 0 for accurate measurement of new target box\n    const prevFlexGrow = prevTargetBox.dom!.style.flexGrow;\n    prevTargetBox.dom!.style.flexGrow = '0';\n\n    const targetRect = this.targetBox.dom!.getBoundingClientRect();\n\n    prevTargetBox.dom!.style.flexGrow = prevFlexGrow;\n\n    await Promise.all([\n      resizeLayoutBoxSmoothly(prevTargetBox, prevRect, 'collapse'),\n      resizeLayoutBoxSmoothly(this.targetBox, 'collapse', targetRect),\n    ]);\n    prevTargetBox.dispose();\n    if (this.targetBox) {\n      resizeLayoutBox(this.targetBox, 'reset');\n      this.dropOverlay.attach(this.targetBox.dom!);\n    }\n    transitionPromiseResolve();\n    this.layout.trigger('layoutResized');\n  }\n}\n\nextend(LayoutEditor.prototype, BackboneEvents);\n\n\n//----------------------------------------------------------------------\n\n/**\n * When the user hovers near the edge of a box, we call the direction the \"affinity\", and it\n * indicates where an insertion is to happen. Affinities are represented by numbers 0 - 3. The\n * functions below distinguish top-down vs left-right, and top/left vs down/right.\n */\n//const AFFINITY_NAMES = { 0: 'TOP', 1: 'DOWN', 2: 'LEFT', 3: 'RIGHT' };\nfunction isAffinityUpDown(affinity: number): boolean {\n  return (affinity >> 1) === 0;\n}\n\nfunction isAffinityAfter(affinity: number): boolean {\n  return (affinity & 1) === 1;\n}\n\nfunction getFrac(distance: number, max: number): number {\n  return distance < max ? distance / max : Infinity;\n}\n\n// We'll snap to 1/NumSteps of total size. The choice of 60 allows many evenly-sized layouts.\nconst NumSteps = 60;\n\nfunction round(value: number, multipleOf: number) {\n  return Math.round(value / multipleOf) * multipleOf;\n}\n\nfunction snap(flexSize: number, sumPrev: number, sumAll: number) {\n  const endEdge = round(sumPrev + flexSize, sumAll / NumSteps);\n  return Math.min(endEdge, sumAll) - sumPrev;\n}\n\n\n/**\n * Resizes the given LayoutBox to transition it when it's supposed to expand or collapse. It only\n * affects the height for HBoxes, and only the width for VBoxes. For rows, we use an explicit\n * height. For columns we rely on 'flex-grow' property.\n *    A rectangle object: set the relevant style according to the values there.\n *    'reset': unset the relevant style, to revert to the values associated with CSS classes.\n *    'collapse': collapse to empty size.\n *    'current': set and explicit value for the relevant style, which is needed for transitions.\n */\nfunction resizeLayoutBox(layoutBox: LayoutBox, sizeRect: string|DOMRect) {\n  const reset = (sizeRect === 'reset');\n  const collapse = (sizeRect === 'collapse');\n  if (sizeRect === 'current') {\n    sizeRect = layoutBox.dom!.getBoundingClientRect();\n  }\n  if (layoutBox.isHBox()) {\n    layoutBox.dom!.style.height = (reset ? '' : (collapse ? '0px' : (sizeRect as DOMRect).height + 'px'));\n  } else {\n    layoutBox.dom!.style.width = (reset ? '' : (collapse ? '0px' : (sizeRect as DOMRect).width + 'px'));\n  }\n  layoutBox.dom!.style.opacity = collapse ? '0.0' : '1.0';\n}\n\nfunction rectDesc(rect: string|DOMRect) {\n  return (typeof rect === 'string') ? rect :\n    Math.floor(rect.width) + \"x\" + Math.floor(rect.height);\n}\n\n/**\n * Resizes the given LayoutBox smoothly from starting to ending position, where startRect and\n * endRect are one of the values documented in 'resizeLayoutBox'.\n */\nfunction resizeLayoutBoxSmoothly(layoutBox: LayoutBox, startRect: string|DOMRect, endRect: string|DOMRect) {\n  if (layoutBox.isDomDetached()) {\n    return Promise.resolve();\n  }\n  const prevFlexGrow = layoutBox.dom!.style.flexGrow;\n  layoutBox.dom!.style.flexGrow = '0';\n  resizeLayoutBox(layoutBox, startRect);\n\n  // Force the layout engine to compute the current state of the layoutBox.dom element before\n  // applying the transition. This follows the recommendation here, and seems to work:\n  // https://timtaubert.de/blog/2012/09/css-transitions-for-dynamically-created-dom-elements/\n  pick(G.window.getComputedStyle(layoutBox.dom), 'height', 'width');\n\n  // Start the transition.\n  layoutBox.dom!.classList.add('layout_editor_resize_transition');\n  return new Promise(function(resolve, reject) {\n    dom.once(layoutBox.dom, 'transitionend', function() { resolve(); });\n    resizeLayoutBox(layoutBox, endRect);\n  })\n  .timeout(600)    // Transitions are only 400ms long, so complain if nothing happened for longer.\n  .catch(Promise.TimeoutError, function() {\n    console.error(\"LayoutEditor.resizeLayoutBoxSmoothly %s %s->%s: transition didn't run\",\n      layoutBox, rectDesc(startRect), rectDesc(endRect));\n    // We keep going. It should look like something's wrong and jumpy, but it should still be\n    // usable and not cause errors elsewhere.\n  })\n  .finally(function() {\n    layoutBox.dom!.classList.remove('layout_editor_resize_transition');\n    layoutBox.dom!.style.flexGrow = prevFlexGrow;\n  });\n}\n\n\nfunction adder(sum: number, box: LayoutBox) {\n  return sum + box.flexSize.peek();\n}\n","import BaseView from 'app/client/components/BaseView';\nimport {buildCollapsedSectionDom, buildViewSectionDom} from 'app/client/components/buildViewSectionDom';\nimport * as commands from 'app/client/components/commands';\nimport {ContentBox} from 'app/client/components/Layout';\nimport type {ViewLayout} from 'app/client/components/ViewLayout';\nimport {get as getBrowserGlobals} from 'app/client/lib/browserGlobals';\nimport {detachNode} from 'app/client/lib/dom';\nimport {Signal} from 'app/client/lib/Signal';\nimport {urlState} from 'app/client/models/gristUrlState';\nimport {TransitionWatcher} from 'app/client/ui/transitions';\nimport {theme} from 'app/client/ui2018/cssVars';\nimport {DisposableWithEvents} from 'app/common/DisposableWithEvents';\nimport {isNonNullish} from 'app/common/gutil';\nimport {Computed, Disposable, dom, IDisposable, IDisposableOwner,\n        makeTestId, obsArray, Observable, styled} from 'grainjs';\nimport isEqual from 'lodash/isEqual';\n\nconst testId = makeTestId('test-layoutTray-');\n\nconst G = getBrowserGlobals('document', 'window', '$');\n\n\n/**\n * Adds a tray for minimizing and restoring sections. It is built as a plugin for the ViewLayout component.\n */\nexport class LayoutTray extends DisposableWithEvents {\n  // We and LayoutEditor will emit this event with the box that is being dragged. When the\n  // drag is over there will be another event with null.\n  public drag = Signal.create<Dropped|null>(this, null);\n  // Event for dropping, contains a dropped element.\n  public drop = Signal.create<Dropped|null>(this, null);\n  // Monitor if the cursor is over the our tray.\n  public hovering = Signal.create(this, false);\n  // If the drag is active and the mouse is over the tray make a signal..\n  public over = Signal.compute(this, on => Boolean(on(this.drag) && on(this.hovering)));\n  // Mouse events during dragging (without a state).\n  public dragging = Signal.create<MouseEvent|null>(this, null);\n  // Create a layout to actually render the collapsed sections.\n  public layout = CollapsedLayout.create(this, this);\n  // Whether we are active (have a dotted border, that indicates we are ready to receive a drop)\n  public active = Signal.create(this, false);\n\n  private _rootElement: HTMLElement;\n\n  constructor(public viewLayout: ViewLayout) {\n    super();\n    // Create a proxy for the LayoutEditor. It will mimic the same interface as CollapsedLeaf.\n    const externalLeaf = ExternalLeaf.create(this, this);\n\n    // Build layout using saved settings.\n    this.layout.buildLayout(this.viewLayout.viewModel.collapsedSections.peek());\n\n    this._registerCommands();\n\n    // Override the drop event, to detect if we are dropped on the tray, and no one else\n    // gets the value.\n    this.drop.before((value, emit) => {\n      // Emit the value, if someone else will handle it, he should grab the state from it.\n      emit(value);\n      // See if the state is still there.\n      if (value && this.drop.state.get()) {\n        // No one took it, so we should handle it if we are over the tray.\n        if (this.over.state.get()) {\n          const leafId = value.leafId();\n          // Add it as a last element.\n          this.layout.addBox(leafId);\n          // Ask it to remove itself from the target.\n          value.removeFromLayout();\n        }\n      }\n      // Clear the state, any other listener will get null.\n      this.drop.state.set(null);\n    });\n\n    // Now wire up active state.\n\n    // When a drag is started, get the top point of the tray, over which we will activate.\n    let topPoint = 48; // By default it is 48 pixels.\n    this.autoDispose(externalLeaf.drag.listen(d => {\n      if (!d) { return; }\n      topPoint = (this._rootElement.parentElement?.getBoundingClientRect().top ?? 61) - 13;\n    }));\n\n    // First we can be activated when a drag has started and we have some boxes.\n    this.drag.map(drag => drag && this.layout.count.get() > 0)\n             .flag() // Map to a boolean, and emit only when the value changes.\n             .filter(Boolean) // Only emit when it is set to true\n             .pipe(this.active);\n\n    // Second, we can be activated when the drag has started by the main layout, and we don't have any boxes yet, but\n    // mouse pointer is relatively high on the screen.\n    Signal.compute(this, on => {\n      const drag = on(externalLeaf.drag);\n      if (!drag) { return false; }\n      const mouseEvent = on(externalLeaf.dragMove);\n      const over = mouseEvent && mouseEvent.clientY < topPoint;\n      return !!over;\n    }).flag().filter(Boolean).pipe(this.active);\n\n    // If a drag has ended, we should deactivate.\n    this.drag.flag().filter(d => !d).pipe(this.active);\n  }\n\n  public replaceLayout() {\n    const savedSections = this.viewLayout.viewModel.collapsedSections.peek();\n    this.viewLayout.viewModel.activeCollapsedSections(savedSections);\n    const boxes = this.layout.buildLayout(savedSections);\n    return {\n      dispose() {\n        boxes.forEach(box => box.dispose());\n        boxes.length = 0;\n      }\n    };\n  }\n\n  /**\n   * Builds a popup for a maximized section.\n   */\n  public buildPopup(owner: IDisposableOwner, selected: Observable<number|null>, close: () => void) {\n    const section = Observable.create<number|null>(owner, null);\n    owner.autoDispose(selected.addListener((cur, prev) => {\n      if (prev) {\n        this.layout.getBox(prev)?.attach();\n      }\n      if (cur) {\n        this.layout.getBox(cur)?.detach();\n      }\n      section.set(cur);\n    }));\n    return dom.domComputed(section, (id) => {\n      if (!id) { return null; }\n      return dom.update(\n        buildViewSectionDom({\n          gristDoc: this.viewLayout.gristDoc,\n          sectionRowId: id,\n          draggable: false,\n          focusable: false,\n        })\n      );\n    });\n  }\n\n  public buildDom() {\n    return this._rootElement = cssCollapsedTray(\n      testId('editor'),\n      // When drag is active we should show a dotted border around the tray.\n      cssCollapsedTray.cls('-is-active', this.active.state),\n      // If element is over the tray, we should indicate that we are ready by changing a color.\n      cssCollapsedTray.cls('-is-target', this.over.state),\n      // Synchronize the hovering state with the event.\n      syncHover(this.hovering),\n      // Create a drop zone (below actual sections)\n      dom.create(CollapsedDropZone, this),\n      // Build the layout.\n      this.layout.buildDom(),\n      // But show only if there are any sections in the tray (even if those are empty or drop target sections)\n      // or we can accept a drop.\n      dom.show(use => use(this.layout.count) > 0 || use(this.active.state)),\n    );\n  }\n\n  public buildContentDom(id: string|number) {\n    return buildCollapsedSectionDom({\n      gristDoc: this.viewLayout.gristDoc,\n      sectionRowId: id,\n    });\n  }\n\n\n\n  private _registerCommands() {\n    const viewLayout = this.viewLayout;\n    // Add custom commands for options in the menu.\n    const commandGroup = {\n      // Collapse visible section.\n      collapseSection: () => {\n        const leafId = viewLayout.viewModel.activeSectionId();\n        if (!leafId) { return; }\n\n        // Find the box for this section in the layout.\n        const box = viewLayout.layoutEditor.getBox(leafId);\n        if (!box) { return; }\n\n        // Change the active section now. This is important as this will destroy the view before we\n        // remove the box from the dom. Charts are very sensitive for this.\n        viewLayout.viewModel.activeSectionId(\n          // We can't collapse last section, so the main layout will always have at least one section.\n          viewLayout.layoutEditor.layout.getAllLeafIds().filter(x => x !== leafId)[0]\n        );\n\n        // Add the box to our collapsed editor (it will transfer the viewInstance).\n        this.layout.addBox(leafId);\n\n        // Remove it from the main layout.\n        box.dispose();\n\n        // And ask the viewLayout to save the specs.\n        viewLayout.saveLayoutSpec();\n      },\n      expandSection: () => {\n        // Get the section that is collapsed and clicked (we are setting this value).\n        const leafId = viewLayout.viewModel.activeCollapsedSectionId();\n        if (!leafId) { return; }\n        viewLayout.viewModel.activeCollapsedSectionId(0);\n        viewLayout.viewModel.activeCollapsedSections(\n          viewLayout.viewModel.activeCollapsedSections.peek().filter(x => x !== leafId)\n        );\n        viewLayout.viewModel.activeSectionId(leafId);\n        viewLayout.saveLayoutSpec();\n      },\n      // Delete collapsed section.\n      deleteCollapsedSection: () => {\n        // This section is still in the view (but not in the layout). So we can just remove it.\n        const leafId = viewLayout.viewModel.activeCollapsedSectionId();\n        if (!leafId) { return; }\n        this.viewLayout.removeViewSection(leafId);\n        // We need to manually update the layout. Main layout editor doesn't care about missing sections.\n        // but we can't afford that. Without removing it, user can add another section that will be collapsed\n        // from the start, as the id will be the same as the one we just removed.\n        const currentSpec = viewLayout.viewModel.layoutSpecObj();\n        const validSections = new Set(viewLayout.viewModel.viewSections.peek().peek().map(vs => vs.id.peek()));\n        validSections.delete(leafId);\n        currentSpec.collapsed = currentSpec.collapsed\n          ?.filter(x => typeof x.leaf === 'number' && validSections.has(x.leaf));\n        viewLayout.saveLayoutSpec(currentSpec);\n      }\n    };\n    this.autoDispose(commands.createGroup(commandGroup, this, true));\n  }\n}\n\n/**\n * Main component that detects where the section should be dropped.\n */\nclass CollapsedDropZone extends Disposable {\n  private _rootElement: HTMLElement;\n  // Some operations will be blocked when we are waiting for an animation to finish.\n  private _animation = Observable.create(this, 0);\n  private _lastTarget: TargetLeaf | undefined;\n  private _lastIndex = -1;\n\n  constructor(protected model: LayoutTray) {\n    super();\n    // When the drag has started or has finished we will add an empty leaf that can accept\n    // dragged section. Event is fire only once, and it will be fired with a null when the draggable\n    // has finished.\n    let pushedLeaf: EmptyLeaf | undefined;\n    const layout = model.layout;\n\n    this.autoDispose(model.active.distinct().listen(ok => {\n      if (ok) {\n        pushedLeaf = EmptyLeaf.create(null, this.model);\n        layout.addBox(pushedLeaf);\n      } else if (pushedLeaf) {\n        layout.destroy(pushedLeaf);\n      }\n    }));\n  }\n\n  public buildDom() {\n    const obsRects = Observable.create(this, [] as Array<VRect|null>);\n    return (this._rootElement = cssVirtualZone(\n      // We are only rendered when mouse is over the tray and it has some dragged leaf with it.\n      dom.maybeOwned(this.model.over.state, (owner) => {\n        // Get the bounding rect of the rootElement, virtual rects are relative, so we will be\n        // adjusting coordinates.\n        const root = this._rootElement.getBoundingClientRect();\n        // We store rects in an observable, that might be used to visualize the zones.\n        // Create the mouseMove listener.\n        const listener = async (e: MouseEvent) => {\n          if (owner.isDisposed() || this._isAnimating()) {\n            return;\n          }\n           // If there are some previous rects (from previous calculation), test if we are still in one of them.\n          if (this._lastTarget) {\n            const stillThere = obsRects.get()[this._lastIndex]?.contains(e);\n            if (stillThere) {\n              return;\n            }\n          }\n          // Calculate the virtual zones.\n          obsRects.set(this._calculate(root));\n          // Find the one under the mouse.\n          const underMouse = obsRects.get().findIndex((x) => x?.contains(e));\n          // If it is still the same, do nothing.\n          if (underMouse === this._lastIndex) { return; }\n          // If we found something, insert a drop target.\n          if (underMouse !== -1) {\n            this._insertDropTarget(underMouse)\n              .catch((err) => console.error(`Failed to insert zone:`, err)); // This should not happen.\n            return;\n          }\n          // We haven't found anything, remove the last drop target.\n          this._removeDropZone().catch((err) => console.error(`Failed to remove zone:`, err));// This should not happen.\n        };\n        G.window.addEventListener('mousemove', listener);\n        // When mouse leaves, we need to remove the last drop target.\n        owner.onDispose(() => {\n          this._removeDropZone().catch((err) => console.error(`Failed to remove zone:`, err));// This should not happen.\n        });\n        owner.onDispose(() => G.window.removeEventListener('mousemove', listener));\n        // For debugging, we can show the virtual zones.\n        const show = false;\n        return !show ? null : dom.domComputed(\n          obsRects,\n          rects => rects.filter(isNonNullish).map((rect: VRect) => cssVirtualPart(\n            {style: `left: ${rect.left}px; width: ${rect.width}px; top: ${rect.top}px; height: ${rect.height}px;`}\n        )));\n      })\n    ));\n  }\n\n  private _start() {\n    this._animation.set(this._animation.get() + 1);\n  }\n  private _stop() {\n    this._animation.set(this._animation.get() - 1);\n  }\n  private _isAnimating() {\n    return this._animation.get() > 0;\n  }\n  private _calculate(parentRect: DOMRect) {\n    const boxes = this.model.layout.all();\n    const rects: Array<VRect|null> = [];\n    // Boxes can be wrapped, we will detect the line offset.\n    let lineOffset = 12;\n    // We will always have at least one box, so we can use it to get the height.\n    const height = boxes[0]?.rootElement.getBoundingClientRect().height;\n    for (let i = 0; i < boxes.length; i++) {\n      const box = boxes[i];\n      const prev = boxes[i - 1];\n      const next = boxes[i + 1];\n\n      // First handle edge cases (don't add targets for first elements in next lines), it will mess up the wrapping.\n      if (prev && prev?.rootElement.offsetTop !== box.rootElement.offsetTop) {\n        rects.push(null);\n        continue;\n      }\n\n      // Now handle normal cases.\n      const root = box.rootElement;\n      lineOffset = root.offsetTop;\n\n      if (i === 0 && box instanceof CollapsedLeaf) {\n        // For the first one, we have very little rectangle, from the left + 50px past the left border.\n        const left = 0;\n        const right = root.offsetLeft + 50;\n        rects.push(new VRect(parentRect, { left, top: lineOffset, right, height }));\n      } else if (box instanceof CollapsedLeaf && i === boxes.length - 1) {\n        // Last one is very similar, little rectangle on the left part.\n        const left = root.offsetLeft + root.offsetWidth - 30;\n        const right = root.offsetLeft + root.offsetWidth + 30;\n        rects.push(new VRect(parentRect, { left, top: lineOffset, right, height }));\n      } else if (box instanceof CollapsedLeaf && prev instanceof CollapsedLeaf) {\n        // In between, we have a rectangle from the left border to the right border.\n        const leftRoot = prev.rootElement;\n        const rightRoot = root;\n        const left = leftRoot.offsetLeft + leftRoot.offsetWidth - 30;\n        const right = rightRoot.offsetLeft + 30;\n        rects.push(new VRect(parentRect, { left, top: lineOffset, right, height }));\n      } else if (next && box instanceof TargetLeaf && i === 0) {\n        // If this is a first box and it is a target, the first rectangle will be much larger, it should cover\n        // the TargetLeaf width.\n        const left = 0;\n        const right = next.rootElement.offsetLeft;\n        rects.push(new VRect(parentRect, { left, top: lineOffset, right, height }));\n      } else if (box instanceof TargetLeaf && prev instanceof CollapsedLeaf && next instanceof CollapsedLeaf) {\n        // If this box is target between two collapsed boxes, we will have a rectangle from the prev to next\n        // covering the whole target leaf.\n        const left = prev.rootElement.offsetLeft + prev.rootElement.offsetWidth - 30;\n        const right = next.rootElement.offsetLeft + 30;\n        rects.push(new VRect(parentRect, { left, top: lineOffset, right, height }));\n      }\n    }\n    return rects;\n  }\n  private async _insertDropTarget(index: number) {\n    this._start();\n    try {\n      await this._lastTarget?.remove();\n      this._lastTarget = TargetLeaf.create(null, this.model);\n      await this._lastTarget.insert(index);\n      this._lastIndex = index;\n    } finally {\n      this._stop();\n    }\n  }\n  private async _removeDropZone() {\n    if (!this._lastTarget) { return; }\n    this._start();\n    try {\n      await this._lastTarget?.remove();\n      this._lastTarget = undefined;\n      this._lastIndex = -1;\n    } finally {\n      this._stop();\n    }\n  }\n}\n\n\n/**\n * UI component that renders and owns all the collapsed leaves.\n */\nclass CollapsedLayout extends Disposable {\n  public rootElement: HTMLElement;\n  /**\n   * Leaves owner. Adding or removing leaves will not dispose them automatically, as they are released and\n   * return to the caller. Only those leaves that were not removed will be disposed with the layout.\n   */\n  public holder = ArrayHolder.create(this);\n  /**\n   * Number of leaves in the layout.\n   */\n  public count: Computed<number>;\n\n  private _boxes = this.autoDispose(obsArray<Leaf>());\n\n  constructor(protected model: LayoutTray) {\n    super();\n\n    // Whenever we add or remove box, update the model. This is used to test if the section is collapsed or not.\n    this._boxes.addListener(l => model.viewLayout.viewModel.activeCollapsedSections(this.leafIds()));\n\n    this.count = Computed.create(this, use => use(this._boxes).length);\n  }\n\n  public all() {\n    return this._boxes.get();\n  }\n\n  public buildLayout(leafs: number[]) {\n    if (isEqual(leafs, this._boxes.get().map((box) => box.id.get()))) { return []; }\n    const removed = this._boxes.splice(0, this._boxes.get().length,\n      ...leafs.map((id) => CollapsedLeaf.create(this.holder, this.model, id)));\n    removed.forEach((box) => this.holder.release(box));\n    return removed;\n  }\n\n  public addBox(id: number|Leaf, index?: number) {\n    index ??= -1;\n    const box = typeof id === 'number' ? CollapsedLeaf.create(this.holder, this.model, id): id;\n    if (typeof id !== 'number') {\n      this.holder.autoDispose(box);\n    }\n    return this.insert(index, box);\n  }\n\n  public indexOf(box: Leaf) {\n    return this._boxes.get().indexOf(box);\n  }\n\n  public insert(index: number, leaf: Leaf) {\n    this.holder.autoDispose(leaf);\n    if (index < 0) {\n      this._boxes.push(leaf);\n    } else {\n      this._boxes.splice(index, 0, leaf);\n    }\n    return leaf;\n  }\n\n  /**\n   * Removes the leaf from the list but doesn't dispose it.\n   */\n  public remove(leaf: Leaf) {\n    const index = this._boxes.get().indexOf(leaf);\n    if (index >= 0) {\n      const removed = this._boxes.splice(index, 1)[0];\n      if (removed) {\n        this.holder.release(removed);\n      }\n      return removed || null;\n    }\n    return null;\n  }\n\n  /**\n   * Removes and dispose the leaf from the list.\n   */\n  public destroy(leaf: Leaf) {\n    this.remove(leaf)?.dispose();\n  }\n\n  public leafIds() {\n    return this._boxes.get().map(l => l.id.get()).filter(x => x && typeof x === 'number');\n  }\n\n  public getBox(leaf: number): CollapsedLeaf|undefined {\n    return this._boxes.get().find(l => l.id.get() === leaf) as CollapsedLeaf|undefined;\n  }\n\n  public buildDom() {\n    return (this.rootElement = cssLayout(\n      testId('layout'),\n      useDragging(),\n      dom.hide(use => use(this._boxes).length === 0),\n      dom.forEach(this._boxes, line => line.buildDom())\n    ));\n  }\n}\n\ninterface Draggable {\n  dragStart?: (ev: DragEvent, floater: MiniFloater) => Draggable|null;\n  dragEnd?: (ev: DragEvent, floater: MiniFloater) => void;\n  drag?: (ev: DragEvent, floater: MiniFloater) => void;\n  drop?: (ev: DragEvent, floater: MiniFloater) => void;\n}\n\ninterface Dropped {\n  removeFromLayout(): void;\n  leafId(): number;\n}\n\n/**\n * Base class for all the leaves in the layout tray.\n */\nabstract class Leaf extends Disposable {\n  public id = Observable.create(this, 0);\n  public rootElement: HTMLElement;\n  public buildDom(): HTMLElement|null {\n    return null;\n  }\n}\n\n/**\n * Empty leaf that is used to represent the empty space in the collapsed layout. Can be used to drop boxes.\n */\nclass EmptyLeaf extends Leaf {\n  public name = Observable.create(this, 'empty');\n\n  // If we are hovering over the empty leaf.\n  private _onHover = Signal.create(this, false);\n\n  constructor(protected model: LayoutTray) {\n    super();\n    this.monitorDrop();\n  }\n\n  public monitorDrop() {\n    this.autoDispose(\n      this.model.drop.listen((box) => {\n        // If some box was dropped, and the cursor is over this leaf, we will add the box to the layout.\n        if (!box || !this._onHover.state.get()) {\n          return;\n        }\n        this.model.drop.state.set(null);\n        // Replace the empty leaf with the dropped box.\n        const myIndex = this.model.layout.indexOf(this);\n        const leafId = box.leafId();\n        this.model.layout.addBox(leafId, myIndex);\n        box.removeFromLayout();\n      })\n    );\n  }\n\n  public buildDom() {\n    return (this.rootElement = cssEmptyBox(\n      cssEmptyBox.cls('-can-accept', this._onHover.state),\n      syncHover(this._onHover),\n      testId('empty-box'),\n    ));\n  }\n}\n\n/**\n * This is an empty leaf that supports animation when added to the list.\n */\nclass TargetLeaf extends EmptyLeaf {\n  public buildDom() {\n    this.name.set('target');\n    const element = super.buildDom();\n    dom.update(element,\n      testId('target-box'),\n      dom.cls(cssProbe.className),\n      { style: 'width: 2px;' }\n    );\n    return element;\n  }\n\n  public insert(index: number) {\n    // First insert the drop target leaf.\n    this.model.layout.insert(index, this);\n    // Force the reflow, so that we can start the animation.\n    this.rootElement.getBoundingClientRect();\n    // Start and wait for the animation to finish.\n    return new Promise((resolve) => {\n      const watcher = new TransitionWatcher(this.rootElement);\n      watcher.onDispose(() => {\n        resolve(undefined);\n      });\n      this.rootElement.style.width = '';\n    });\n  }\n\n  public remove() {\n    return new Promise((resolve) => {\n      const watcher = new TransitionWatcher(this.rootElement);\n      watcher.onDispose(() => {\n        this.model.layout.destroy(this);\n        resolve(undefined);\n      });\n      this.rootElement.style.width = '0px';\n    });\n  }\n}\n\n/**\n * This is the collapsed widget that is shown in the collapsed layout. It can be dragged and dropped.\n */\nclass CollapsedLeaf extends Leaf implements Draggable, Dropped {\n  // The content of the leaf that is rendered. Stored in an observable so that we can update it when the\n  // content changes or put it in the floater.\n  private _content: Observable<HTMLElement|null> = Observable.create(this, null);\n\n  // Computed to get the view instance from the viewSection.\n  private _viewInstance: Computed<BaseView|null>;\n\n  // An observable for the dom that holds the viewInstance and displays it in a hidden element.\n  // This is owned by this leaf and is disposed separately from the dom that is returned by buildDom. Like a\n  // singleton, this element will be moved from one \"instance\" (a result of buildDom) to another.\n  // When a leaf is removed from the dom (e.g. when we remove the collapsed section or move it to the main area)\n  // the dom of this element is disposed, but the hidden element stays with this instance and can be disposed\n  // later on, giving anyone a chance to grab the viewInstance and display it somewhere else.\n  private _hiddenViewInstance: Observable<HTMLElement|null> = Observable.create(this, null);\n\n  // Helper to keeping track of the index of the leaf in the layout.\n  private _indexWhenDragged = 0;\n\n  // A helper variable that indicates that this section is in a popup, and we should\n  // make any attempt to grab it and attach to our dom. Note: this is not a computed variable.\n  private _detached = false;\n\n  constructor(protected model: LayoutTray, id: number) {\n    super();\n    this.id.set(id);\n    this._viewInstance = Computed.create(this, use => {\n      const sections = use(use(this.model.viewLayout.viewModel.viewSections).getObservable());\n      const view = sections.find(s => use(s.id) === use(this.id));\n      if (!view) { return null; }\n      const instance = use(view.viewInstance);\n      return instance;\n    });\n    this._buildHidden();\n    this.onDispose(() => {\n      const instance = this._hiddenViewInstance.get();\n      instance && dom.domDispose(instance);\n    });\n  }\n\n  public detach() {\n    this._detached = true;\n  }\n\n  public attach() {\n    this._detached = false;\n    const previous = this._hiddenViewInstance.get();\n    this._buildHidden();\n    previous && dom.domDispose(previous);\n  }\n\n  public buildDom() {\n    this._content.set(this.model.buildContentDom(this.id.get()));\n    return this.rootElement = cssBox(\n      testId('leaf-box'),\n      dom.domComputed(this._content, c => c),\n      // Add draggable interface.\n      asDraggable(this),\n      dom.on('click', (e) => {\n        this.model.viewLayout.viewModel.activeCollapsedSectionId(this.id.get());\n        // Sanity (and type) check.\n        if (!(e.target instanceof HTMLElement)) {\n          return;\n        }\n        // If the click not landed in a draggable-handle ignore it. Might be a click to open the menu.\n        if (!e.target.closest('.draggable-handle')) {\n          return;\n        }\n        // Apparently the click was to open the section in the popup. Use the anchor link to do that.\n        // Show my section on a popup using anchor link. We can't use maximize section for it, as we\n        // would need to rebuild the layout (as this is not a part of it).\n        urlState().pushUrl({\n          hash: {\n            sectionId: this.id.get(),\n            popup: true\n          }\n        }).catch(() => {});\n        e.preventDefault();\n        e.stopPropagation();\n      }),\n      detachedNode(this._hiddenViewInstance),\n    );\n  }\n\n  // Implement the drag interface. All those methods are called by the draggable helper.\n\n  public dragStart(ev: DragEvent, floater: MiniFloater) {\n    // Get the element.\n    const myElement = this._content.get();\n    this._content.set(null);\n    floater.content.set(myElement);\n    // Create a clone.\n    const clone = CollapsedLeaf.create(floater, this.model, this.id.get());\n    clone._indexWhenDragged = this.model.layout.indexOf(this);\n    this.model.drag.emit(clone);\n\n    // Remove self from the layout (it will dispose this instance, but the viewInstance was moved to the floater)\n    this.model.layout.destroy(this);\n    return clone;\n  }\n\n  public dragEnd(ev: DragEvent) {\n    this.model.drag.emit(null);\n  }\n\n  public drag(ev: DragEvent) {\n    this.model.dragging.emit(ev);\n  }\n\n  public drop(ev: DragEvent, floater: MiniFloater) {\n    // Take back the element.\n    const element = floater.content.get();\n    floater.content.set(null);\n    this._content.set(element);\n    this.model.drop.emit(this);\n    // If I wasn't moved somewhere else, read myself back.\n    if (this.id.get() !== 0) {\n      this.model.layout.addBox(this.id.get(), this._indexWhenDragged);\n    }\n  }\n\n  public removeFromLayout() {\n    // Set the id to 0 so that the layout doesn't try to read me back.\n    this.id.set(0);\n    this.model.layout.destroy(this);\n  }\n\n  public leafId() {\n    return this.id.get();\n  }\n\n  private _buildHidden() {\n    this._hiddenViewInstance.set(cssHidden(dom.maybe(this._viewInstance, view => {\n      return this._detached ? null : view.viewPane;\n    })));\n  }\n}\n\n/**\n * This is analogous component to the main Floater in the LayoutEditor. It holds the little preview of a widget,\n * while it is dragged.\n */\nclass MiniFloater extends Disposable {\n  public content: Observable<HTMLElement|null> = Observable.create(this, null);\n  public rootElement: HTMLElement;\n  constructor() {\n    super();\n    this.rootElement = this.buildDom();\n    G.document.body.appendChild(this.rootElement);\n    this.onDispose(() => {\n      this.rootElement.remove();\n      dom.domDispose(this.rootElement);\n    });\n  }\n\n  public buildDom() {\n    return cssMiniFloater(\n      dom.show(use => Boolean(use(this.content))),\n      // dom.cls('layout_editor_floater'),\n      dom.domComputed(this.content, c => c)\n    );\n  }\n\n  public onMove(ev: MouseEvent) {\n    if (this.content.get()) {\n      this.rootElement.style.left = `${ev.clientX}px`;\n      this.rootElement.style.top = `${ev.clientY}px`;\n    }\n  }\n}\n\n/**\n * ExternalLeaf pretends that it is a collapsed leaf and acts as a proxy between collapsed tray and the\n * ViewLayout.\n */\nclass ExternalLeaf extends Disposable implements Dropped {\n  // If external element is in drag mode\n  public drag: Signal<Dropped>;\n  // Event when external leaf is being dragged.\n  public dragMove: Signal<MouseEvent>;\n\n  // Event when external leaf is dropped.\n  private _drop: Signal<ContentBox>;\n\n  constructor(protected model: LayoutTray) {\n    super();\n    // Wire up external events to mimic that we are a part.\n\n    // First we will replace all events, so that they won't emit anything if we are the only leaf\n    // in the layout.\n    const multipleLeaves = () => this.model.viewLayout.layout.getAllLeafIds().length > 1;\n\n    this.drag = Signal.fromEvents(this, this.model.viewLayout.layoutEditor, 'dragStart', 'dragEnd')\n                      .filter(multipleLeaves);\n\n    this._drop = Signal.fromEvents(this, this.model.viewLayout.layoutEditor, 'dragDrop')\n                      .filter(multipleLeaves);\n\n    this.dragMove = Signal.fromEvents(this, this.model.viewLayout.layoutEditor, 'dragMove')\n                          .filter(multipleLeaves);\n\n    // Now bubble up those events to the model.\n\n    // For dragging we just need to know that it is on or off.\n    this.drag.map(box => {\n      // We are tricking the model, we report that we are dragged, not the external leaf.\n      return box ? this as Dropped : null;\n    }).distinct().pipe(this.model.drag);\n\n\n    // When the external box is dropped, we will pretend that we were dropped.\n    this._drop.map(x => this as Dropped|null).pipe(this.model.drop);\n\n    // Listen to the inDrag state in the model, if the dragged element is not us, update\n    // target hits. Otherwise target hits will be updated by the viewLayout.\n    this.autoDispose(model.dragging.listen(ev => {\n      // If the dragged box is not us, we need to update the targets.\n      if (ev && model.drag.state.get() !== this) {\n        this.model.viewLayout.layoutEditor.updateTargets(ev);\n      }\n    }));\n\n    // When drag is started by tray, we need to fire up user edit event. This is only needed\n    // because the viewLayout has a different UI when user is editing.\n    const miniDrag = Signal.compute(this, on => on(model.drag) && !on(this.drag)).map(Boolean).distinct();\n    this.autoDispose(miniDrag.listen(box => {\n      if (box) {\n        this.model.viewLayout.layoutEditor.triggerUserEditStart();\n      } else {\n        const dropTargeter = this.model.viewLayout.layoutEditor.dropTargeter;\n        dropTargeter.removeTargetHints();\n        // Save the layout immediately after the drop. Otherwise we would wait a bit,\n        // and the section won't be created on time.\n        this.model.viewLayout.layoutEditor.triggerUserEditStop();\n        // Manually save the layout.\n        this.model.viewLayout.saveLayoutSpec();\n      }\n    }));\n\n\n    // We are responsible for saving the layout, when section is collapsed or expanded.\n\n    // Also we need to monitor when mini leaf is dropped, it will trigger a drop event,\n    // but non-one will listen to it.\n    this.autoDispose(\n      model.drop.listen(dropped => {\n        if (!dropped) {\n          return;\n        }\n        // If I was dropped (collapsed) over the tray, we don't need to do anything here.\n        // Our leaf was removed already and the layout will be saved by the miniDrag event.\n\n        // If I was dropped anywhere else, we don't need to do anything either, viewLayout will\n        // take care of it.\n        if (dropped === this) {\n          return;\n        }\n        // We only care when collapsed widget was dropped over the main area.\n        const externalEditor = this.model.viewLayout.layoutEditor;\n        const dropTargeter = this.model.viewLayout.layoutEditor.dropTargeter;\n        // Check that it was dropped over the main area.\n        if (dropTargeter?.activeTarget && !dropTargeter?.activeTarget?.box.isDisposed()) {\n          // Remove the widget from the tray, and at new leaf to the layout.\n          const part = dropTargeter.activeTarget;\n          dropTargeter.removeTargetHints();\n          const leaf = dropped.leafId();\n          const box = externalEditor.layout.buildLayoutBox({leaf});\n          dropped.removeFromLayout();\n          if (part.isChild) {\n            part.box.addChild(box, part.isAfter);\n          } else {\n            part.box.addSibling(box, part.isAfter);\n          }\n          this.model.viewLayout.viewModel.activeSectionId(leaf);\n          this.model.drop.state.set(null);\n        }\n      })\n    );\n    this._replaceFloater();\n  }\n\n  /**\n   * Dropped interface implementation, it is called only when a section in the main area is collapsed (dragged\n   * onto the valid target in the tray).\n   */\n  public removeFromLayout() {\n    const droppedBox = this._drop.state.get();\n    if (!droppedBox) { return; }\n    const leafId = this.leafId();\n    const otherSection = this.model.viewLayout.layoutEditor\n      .layout.getAllLeafIds().find(x => typeof x === 'number' && x !== leafId);\n    this.model.viewLayout.viewModel.activeSectionId(otherSection);\n    // We can safely remove the box, because we should be called after viewInstance is grabbed by\n    // the tray.\n    this.model.viewLayout.layoutEditor.doRemoveBox(droppedBox);\n  }\n\n  public leafId() {\n    return this._drop.state.get()?.leafId.peek() || 0;\n  }\n\n  /**\n   * Monitors the external floater element, and if it is on top of the collapsed tray, replaces its content.\n   */\n  private _replaceFloater() {\n    const model = this.model;\n    // We will replace floater just after it starts till it is about to be dropped.\n    const period = Signal.fromEvents(model, model.viewLayout.layoutEditor, 'dragStart', 'dragStop');\n    const overEditor = Signal.compute(model, on => Boolean(on(period) && on(model.over))).distinct();\n    let lastContent: HTMLElement|null = null;\n    let lastTransform: string|null = null;\n    let lastX: number|null = null;\n    let lastY: number|null = null;\n    // When the external box is on top of the tray, we need to replace the content to be much smaller.\n    model.autoDispose(\n      overEditor.listen(over => {\n        if (over) {\n          const floater = model.viewLayout.layoutEditor.floater;\n          const leafId = floater.leafId.peek();\n          if (typeof leafId !== 'number') {\n            return;\n          }\n          const content = floater.leafContent.peek() as HTMLElement;\n          if (content) {\n            lastContent = content;\n            // Hide this element.\n            content.style.display = 'none';\n            // Create another element to show in the floater.\n            const newContent = cssFloaterWrapper(content, buildCollapsedSectionDom({\n              gristDoc: model.viewLayout.gristDoc,\n              sectionRowId: leafId,\n            }));\n            floater.leafContent(newContent);\n            lastTransform = floater.dom.style.transform;\n            lastX = floater.mouseOffsetX;\n            lastY = floater.mouseOffsetY;\n            floater.dom.style.transform = 'none';\n            floater.mouseOffsetX = 0;\n            floater.mouseOffsetY = 0;\n          }\n        } else if (lastContent) {\n          lastContent.style.display = '';\n          const floater = model.viewLayout.layoutEditor.floater;\n          const currentContent = floater.leafContent.peek() as HTMLElement;\n          floater.leafContent(lastContent);\n          if (currentContent) {\n            dom.domDispose(currentContent);\n          }\n          lastContent = null;\n          floater.dom.style.transform = lastTransform!;\n          floater.mouseOffsetX = lastX!;\n          floater.mouseOffsetY = lastY!;\n        }\n      })\n    );\n  }\n}\n\n/**\n * A class that holds an array of IDisposable objects, and disposes them all when it is disposed.\n * The difference from a MultipleHolder is that it can release individual disposables from the array.\n */\nclass ArrayHolder extends Disposable {\n  private _array: IDisposable[] = [];\n\n  constructor() {\n    super();\n    this.onDispose(() => {\n      const seen = new Set();\n      for (const obj of this._array) {\n        if (!seen.has(obj)) {\n          seen.add(obj);\n          obj.dispose();\n        }\n      }\n      this._array = [];\n    });\n  }\n\n  public autoDispose<T extends IDisposable>(obj: T): T {\n    this._array.push(obj);\n    return obj;\n  }\n\n  public release(obj: IDisposable) {\n    const index = this._array.indexOf(obj);\n    if (index >= 0) {\n      return this._array.splice(index, 1);\n    }\n    return null;\n  }\n}\n\nfunction syncHover(obs: Signal) {\n  return [dom.on('mouseenter', () => obs.emit(true)), dom.on('mouseleave', () => obs.emit(false))];\n}\n\n/**\n * Helper function that renders an element from an observable, but prevents it from being disposed.\n * Used to keep viewInstance from being disposed when it is added as a child in various containers.\n */\nfunction detachedNode(node: Observable<HTMLElement|null>) {\n  return [\n    dom.maybe(node, n => n),\n    dom.onDispose(() => node.get() && detachNode(node.get()))\n  ];\n}\n\n/**\n * Finds element that is marked as draggable from the mouse event.\n */\nfunction findDraggable(ev: EventTarget|null) {\n  if (ev instanceof HTMLElement) {\n    const target = ev.closest(\".draggable-handle\")?.closest(\".draggable\");\n    return !target ? null : dom.getData(target, 'draggable') as Draggable;\n  }\n  return null;\n}\n\n/**\n * Marks a dom element as draggable. It sets a class and a data attribute that is looked up by the useDragging helper.\n */\nfunction asDraggable(item: Draggable) {\n  return [\n    dom.cls('draggable'),\n    dom.data('draggable', item)\n  ];\n}\n\n/**\n * Attaches a mouse events for dragging to a parent container. This way we have a single mouse event listener\n * for all draggable elements. All events are then delegated to the draggable elements.\n *\n * When a drag is started a MiniFloater is created, and the draggable element can be moved to the floater.\n */\nfunction useDragging() {\n  return (el: HTMLElement) => {\n    // Implement them by hand, using mouseenter, mouseleave, and mousemove events.\n    // This is a inspired by LayoutEditor.ts.\n    let justStarted = false;\n    let isDragging = false;\n    let dragged: Draggable|null = null;\n    let floater: MiniFloater|null = null;\n    let downX: number|null = null;\n    let downY: number|null = null;\n    const listener = (ev: MouseEvent) => {\n      switch (ev.type) {\n        case 'mousedown':\n          // Only handle left button.\n          if (ev.button !== 0) {\n            return;\n          }\n          // If we haven't found a draggable element, return.\n          dragged = findDraggable(ev.target);\n          if (!dragged) {\n            return;\n          }\n          // If we had floater, dispose it.\n          floater?.dispose();\n          floater = new MiniFloater();\n          // Start drag and attach mousemove and mouseup listeners.\n          justStarted = true;\n          G.$(G.window).on('mousemove', mouseMoveListener);\n          G.$(G.window).on('mouseup', mouseUpListener);\n          downX = ev.clientX;\n          downY = ev.clientY;\n          return false;\n        case 'mouseup':\n          if (!dragged) {\n            return;\n          }\n          justStarted = false;\n          G.$(G.window).off('mousemove', mouseMoveListener);\n          G.$(G.window).off('mouseup', mouseUpListener);\n\n          if (isDragging) {\n            isDragging = false;\n            if (dragged?.drop) {\n              dragged.drop(ev as DragEvent, floater!);\n            }\n            if (dragged?.dragEnd) {\n              dragged.dragEnd(ev as DragEvent, floater!);\n            }\n          }\n          dragged = null;\n          floater?.dispose();\n          floater = null;\n          return false;\n        case 'mousemove':\n          if (justStarted) {\n            const slightMove = downX && downY &&\n              (Math.abs(ev.clientX - downX) > 3 || Math.abs(ev.clientY - downY) > 3);\n            if (slightMove) {\n              justStarted = false;\n              if (dragged?.dragStart) {\n                // Drag element has an opportunity to return a new draggable object.\n                dragged = dragged.dragStart(ev as DragEvent, floater!);\n                if (!dragged) {\n                  return;\n                }\n              }\n              // Now we are dragging.\n              isDragging = true;\n            }\n          }\n          if (!isDragging) {\n            return;\n          }\n          if (dragged?.drag) {\n            dragged.drag(ev as DragEvent, floater!);\n          }\n          floater!.onMove(ev);\n          return false;\n      }\n    };\n    const mouseMoveListener = (ev: MouseEvent) => listener(ev);\n    const mouseUpListener = (ev: MouseEvent) => listener(ev);\n    dom.autoDisposeElem(el, dom.onElem(G.window, 'mousedown', (e) => listener(e)));\n    dom.onDisposeElem(el, () => (floater?.dispose(), floater = null));\n  };\n}\n\n/**\n * A virtual rectangle that is relative to a DOMRect.\n */\nclass VRect {\n  public left: number;\n  public width: number;\n  public top: number;\n  public right: number;\n  public height: number;\n  constructor(offset: DOMRect, params: Partial<VRect>) {\n    Object.assign(this, params);\n    this.left += offset.left;\n    this.right += offset.left;\n    this.top += offset.top;\n    this.width = this.right - this.left;\n  }\n  public contains(ev: MouseEvent) {\n    return ev.clientX >= this.left && ev.clientX <= this.right &&\n      ev.clientY >= this.top && ev.clientY <= this.top + this.height;\n  }\n}\n\nconst cssVirtualZone = styled('div', `\n  position: absolute;\n  inset: 0;\n`);\n\n\nconst cssFloaterWrapper = styled('div', `\n  height: 40px;\n  width: 140px;\n  max-width: 140px;\n  background: ${theme.tableBodyBg};\n  border: 1px solid ${theme.widgetBorder};\n  border-radius: 4px;\n  -webkit-transform: rotate(5deg) scale(0.8) translate(-10px, 0px);\n  transform: rotate(5deg) scale(0.8) translate(-10px, 0px);\n  & .mini_section_container {\n    overflow: hidden;\n    white-space: nowrap;\n  }\n`);\n\nconst cssCollapsedTray = styled('div.collapsed_layout', `\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  transition: height 0.2s;\n  position: relative;\n  margin: calc(-1 * var(--view-content-page-margin, 12px));\n  margin-bottom: 0;\n  user-select: none;\n  background-color: ${theme.pageBg};\n  border-bottom: 1px solid ${theme.pagePanelsBorder};\n  outline-offset: -1px;\n\n  &-is-active {\n    outline: 2px dashed ${theme.widgetBorder};\n  }\n  &-is-target {\n    outline: 2px dashed #7B8CEA;\n    background: rgba(123, 140, 234, 0.1);\n  }\n`\n);\n\nconst cssRow = styled('div', `display: flex`);\nconst cssLayout = styled(cssRow, `\n  padding: 8px 24px;\n  column-gap: 16px;\n  row-gap: 8px;\n  flex-wrap: wrap;\n  position: relative;\n`);\n\nconst cssBox = styled('div', `\n  border: 1px solid ${theme.widgetBorder};\n  border-radius: 3px;\n  background: ${theme.widgetBg};\n  min-width: 120px;\n  min-height: 34px;\n  cursor: pointer;\n`);\n\nconst cssEmptyBox = styled('div', `\n  text-align: center;\n  text-transform: uppercase;\n  color: ${theme.widgetBorder};\n  font-weight: bold;\n  letter-spacing: 1px;\n  border: 2px dashed ${theme.widgetBorder};\n  border-radius: 3px;\n  padding: 8px;\n  width: 120px;\n  min-height: 34px;\n  &-can-accept {\n    border: 2px dashed #7B8CEA;\n    background: rgba(123, 140, 234, 0.1);\n  }\n`);\n\nconst cssProbe = styled('div', `\n  min-width: 0px;\n  padding: 0px;\n  transition: width 0.2s ease-out;\n`);\n\nconst cssMiniFloater = styled(cssBox, `\n  pointer-events: none;\n  position: absolute;\n  overflow: hidden;\n  pointer-events: none;\n  z-index: 10;\n  -webkit-transform: rotate(5deg) scale(0.8);\n  transform: rotate(5deg) scale(0.8);\n  transform-origin: top left;\n`);\n\nconst cssVirtualPart = styled('div', `\n  outline: 1px solid blue;\n  position: absolute;\n  z-index: 10;\n  background: rgba(0, 0, 0, 0.1);\n`);\n\nconst cssHidden = styled('div', `display: none;`);\n","import {DataRowModel} from \"app/client/models/DataRowModel\";\nimport DataTableModel from \"app/client/models/DataTableModel\";\nimport {DocModel} from 'app/client/models/DocModel';\nimport {ColumnRec} from \"app/client/models/entities/ColumnRec\";\nimport {TableRec} from \"app/client/models/entities/TableRec\";\nimport {ViewSectionRec} from \"app/client/models/entities/ViewSectionRec\";\nimport {LinkConfig} from \"app/client/ui/selectBy\";\nimport {FilterColValues, QueryOperation} from \"app/common/ActiveDocAPI\";\nimport {isList, isListType, isRefListType} from \"app/common/gristTypes\";\nimport * as gutil from \"app/common/gutil\";\nimport {UIRowId} from 'app/plugin/GristAPI';\nimport {encodeObject} from 'app/plugin/objtypes';\nimport {Disposable} from \"grainjs\";\nimport * as  ko from \"knockout\";\nimport identity = require('lodash/identity');\nimport mapValues = require('lodash/mapValues');\nimport pickBy = require('lodash/pickBy');\n\n\n/**\n * Returns if the first table is a summary of the second. If both are summary tables, returns true\n * if the second table is a more detailed summary, i.e. has additional group-by columns.\n * @param summary: TableRec for the table to check for being the summary table.\n * @param detail: TableRec for the table to check for being the detailed version.\n * @returns {Boolean} Whether the first argument is a summarized version of the second.\n */\nfunction isSummaryOf(summary: TableRec, detail: TableRec): boolean {\n  const summarySource = summary.summarySourceTable();\n  if (summarySource === detail.getRowId()) { return true; }\n  const detailSource = detail.summarySourceTable();\n  return (Boolean(summarySource) &&\n    detailSource === summarySource &&\n    summary.getRowId() !== detail.getRowId() &&\n    gutil.isSubset(summary.summarySourceColRefs(), detail.summarySourceColRefs()));\n}\n\n/**\n * Maintains state useful for linking sections, i.e. auto-filtering and auto-scrolling.\n * Exposes .filterColValues, which is either null or a computed evaluating to a filtering object;\n * and .cursorPos, which is either null or a computed that evaluates to a cursor position.\n * LinkingState must be created with a valid srcSection and tgtSection.\n *\n * There are several modes of linking:\n * (1) If tgtColId is set, tgtSection will be filtered to show rows whose values of target column\n *     are equal to the value of source column in srcSection at the cursor. With byAllShown set, all\n *     values in srcSection are used (rather than only the value in the cursor).\n * (2) If srcSection is a summary of tgtSection, then tgtSection is filtered to show only those\n *     rows that match the row at the cursor of srcSection.\n * (3) If tgtColId is null, tgtSection is scrolled to the rowId determined by the value of the\n *     source column at the cursor in srcSection.\n *\n * @param gristDoc: GristDoc instance, for getting the relevant TableData objects.\n * @param srcSection: RowModel for the section that drives the target section.\n * @param srcColId: Name of the column that drives the target section, or null to use rowId.\n * @param tgtSection: RowModel for the section that's being driven.\n * @param tgtColId: Name of the reference column to auto-filter by, or null to auto-scroll.\n * @param byAllShown: For auto-filter, filter by all values in srcSection rather than only the\n *    value at the cursor. The user can use column filters on srcSection to control what's shown\n *    in the linked tgtSection.\n */\nexport class LinkingState extends Disposable {\n  // If linking affects target section's cursor, this will be a computed for the cursor rowId.\n  public readonly cursorPos?: ko.Computed<UIRowId>;\n\n  // If linking affects filtering, this is a computed for the current filtering state, as a\n  // {[colId]: colValues} mapping, with a dependency on srcSection.activeRowId()\n  public readonly filterColValues?: ko.Computed<FilterColValues>;\n\n  // Get default values for a new record so that it continues to satisfy the current linking filters\n  public readonly getDefaultColValues: () => any;\n\n  private _srcSection: ViewSectionRec;\n  private _srcTableModel: DataTableModel;\n  private _srcCol: ColumnRec;\n  private _srcColId: string | undefined;\n\n  constructor(docModel: DocModel, linkConfig: LinkConfig) {\n    super();\n    const {srcSection, srcCol, srcColId, tgtSection, tgtCol, tgtColId} = linkConfig;\n    this._srcSection = srcSection;\n    this._srcCol = srcCol;\n    this._srcColId = srcColId;\n    this._srcTableModel = docModel.dataTables[srcSection.table().tableId()];\n    const srcTableData = this._srcTableModel.tableData;\n\n    if (tgtColId) {\n      const operation = isRefListType(tgtCol.type()) ? 'intersects' : 'in';\n      if (srcSection.selectedRowsActive()) {\n        this.filterColValues = this._srcCustomFilter(tgtColId, operation);\n      } else if (srcColId) {\n        this.filterColValues = this._srcCellFilter(tgtColId, operation);\n      } else {\n        this.filterColValues = this._simpleFilter(tgtColId, operation, (rowId => [rowId]));\n      }\n    } else if (srcColId && isRefListType(srcCol.type())) {\n      this.filterColValues = this._srcCellFilter('id', 'in');\n    } else if (!srcColId && isSummaryOf(srcSection.table(), tgtSection.table())) {\n      // We filter summary tables when a summary section is linked to a more detailed one without\n      // specifying src or target column. The filtering is on the shared group-by column (i.e. all\n      // those in the srcSection).\n      // TODO: This approach doesn't help cursor-linking (the other direction). If we have the\n      // inverse of summary-table's 'group' column, we could implement both, and more efficiently.\n      const isDirectSummary = srcSection.table().summarySourceTable() === tgtSection.table().getRowId();\n      const _filterColValues = ko.observable<FilterColValues>();\n      this.filterColValues = this.autoDispose(ko.computed(() => _filterColValues()));\n\n      // source data table could still be loading (this could happen after changing the group by\n      // columns of a linked summary table for instance), hence the below listener.\n      this.autoDispose(srcTableData.dataLoadedEmitter.addListener(_update));\n\n      _update();\n      function _update() {\n        const result: FilterColValues = {filters: {}, operations: {}};\n        if (srcSection.isDisposed()) {\n          return result;\n        }\n        const srcRowId = srcSection.activeRowId();\n        for (const c of srcSection.table().groupByColumns()) {\n          const colId = c.colId();\n          const srcValue = srcTableData.getValue(srcRowId as number, colId);\n          result.filters[colId] = [srcValue];\n          result.operations[colId] = 'in';\n          if (isDirectSummary && isListType(c.summarySource().type())) {\n            // If the source groupby column is a ChoiceList or RefList, then null or '' in the summary table\n            // should match against an empty list in the source table.\n            result.operations[colId] = srcValue ? 'intersects' : 'empty';\n          }\n        }\n        _filterColValues(result);\n      }\n    } else if (srcSection.selectedRowsActive()) {\n      this.filterColValues = this._srcCustomFilter('id', 'in');\n    } else {\n      const srcValueFunc = srcColId ? this._makeSrcCellGetter() : identity;\n      if (srcValueFunc) {\n        this.cursorPos = this.autoDispose(ko.computed(() =>\n          srcValueFunc(srcSection.activeRowId()) as UIRowId\n        ));\n      }\n\n      if (!srcColId) {\n        // This is a same-record link: copy getDefaultColValues from the source if possible\n        const getDefaultColValues = srcSection.linkingState()?.getDefaultColValues;\n        if (getDefaultColValues) {\n          this.getDefaultColValues = getDefaultColValues;\n        }\n      }\n    }\n\n    if (!this.getDefaultColValues) {\n      this.getDefaultColValues = () => {\n        if (!this.filterColValues) {\n          return {};\n        }\n        const {filters, operations} = this.filterColValues.peek();\n        return mapValues(\n          pickBy(filters, (value: any[], key: string) => value.length > 0 && key !== \"id\"),\n          (value, key) => operations[key] === \"intersects\" ? encodeObject(value) : value[0]\n        );\n      };\n    }\n  }\n\n  /**\n   * Returns a boolean indicating whether editing should be disabled in the destination section.\n   */\n  public disableEditing(): boolean {\n    return Boolean(this.filterColValues) && this._srcSection.activeRowId() === 'new';\n  }\n\n  // Value for this.filterColValues filtering based on a single column\n  private _simpleFilter(\n    colId: string, operation: QueryOperation, valuesFunc: (rowId: UIRowId|null) => any[]\n  ): ko.Computed<FilterColValues> {\n    return this.autoDispose(ko.computed(() => {\n      const srcRowId = this._srcSection.activeRowId();\n      if (srcRowId === null) {\n        console.warn(\"_simpleFilter activeRowId is null\");\n        return { filters: {}, operations: {}};\n      }\n      const values = valuesFunc(srcRowId);\n      return {filters: {[colId]: values}, operations: {[colId]: operation}} as FilterColValues;\n    }));\n  }\n\n  // Value for this.filterColValues based on the value in srcCol at the selected row\n  private _srcCellFilter(colId: string, operation: QueryOperation): ko.Computed<FilterColValues> | undefined {\n    const srcCellGetter = this._makeSrcCellGetter();\n    if (srcCellGetter) {\n      const isSrcRefList = isRefListType(this._srcCol.type());\n      return this._simpleFilter(colId, operation, rowId => {\n        const value = srcCellGetter(rowId);\n        if (isSrcRefList) {\n          if (isList(value)) {\n            return value.slice(1);\n          } else {\n            // The cell value is invalid, so the filter should be empty\n            return [];\n          }\n        } else {\n          return [value];\n        }\n      });\n    }\n  }\n\n  // Value for this.filterColValues based on the values in srcSection.selectedRows\n  private _srcCustomFilter(colId: string, operation: QueryOperation): ko.Computed<FilterColValues> | undefined {\n    return this.autoDispose(ko.computed(() => {\n      const values = this._srcSection.selectedRows();\n      return {filters: {[colId]: values}, operations: {[colId]: operation}} as FilterColValues;\n    }));\n  }\n\n  // Returns a function which returns the value of the cell\n  // in srcCol in the selected record of srcSection.\n  // Uses a row model to create a dependency on the cell's value,\n  // so changes to the cell value will notify observers\n  private _makeSrcCellGetter() {\n    const srcRowModel = this.autoDispose(this._srcTableModel.createFloatingRowModel()) as DataRowModel;\n    const srcCellObs = srcRowModel.cells[this._srcColId!];\n    // If no srcCellObs, linking is broken; do nothing. This shouldn't happen, but may happen\n    // transiently while the separate linking-related observables get updated.\n    if (!srcCellObs) {\n      return null;\n    }\n    return (rowId: UIRowId | null) => {\n      srcRowModel.assign(rowId);\n      if (rowId === 'new') {\n        return 'new';\n      }\n      return srcCellObs();\n    };\n  }\n}\n","import {bigBasicButton, bigPrimaryButton} from 'app/client/ui2018/buttons';\nimport {squareCheckbox} from 'app/client/ui2018/checkbox';\nimport {testId, theme} from 'app/client/ui2018/cssVars';\nimport {makeLinks} from 'app/client/ui2018/links';\nimport {cssModalButtons} from 'app/client/ui2018/modals';\nimport {ParseOptionSchema} from 'app/plugin/FileParserAPI';\nimport {Computed, dom, DomContents, IDisposableOwner, input, Observable, styled} from 'grainjs';\nimport fromPairs = require('lodash/fromPairs');\nimport invert = require('lodash/invert');\n\nexport type ParseOptionValueType = boolean|string|number;\n\nexport interface ParseOptionValues {\n  [name: string]: ParseOptionValueType;\n}\n\n/**\n * EscapeChars contains mapping for some escape characters that we need to convert\n * for displaying in input fields\n */\ninterface EscapeChars {\n  [char: string]: string;\n}\n\nconst escapeCharDict: EscapeChars = {\n  '\\n': '\\\\n',\n  '\\r': '\\\\r',\n  '\\t': '\\\\t',\n};\nconst invertedEscapeCharDict: EscapeChars = invert(escapeCharDict);\n\n// Helpers to escape and unescape certain non-printable characters that are useful in parsing\n// options, e.g. as separators.\nfunction escapeChars(value: string) {\n  return value.replace(/[\\n\\r\\t]/g, (match) => escapeCharDict[match]);\n}\nfunction unescapeChars(value: string) {\n  return value.replace(/\\\\[nrt]/g, (match) => invertedEscapeCharDict[match]);\n}\n\n/**\n * Builds a DOM form consisting of inputs built according to schema, with the passed-in values.\n * The included \"Update\" button is enabled if any value has changed, and calls doUpdate() with the\n * current values.\n */\nexport function buildParseOptionsForm(\n  owner: IDisposableOwner,\n  schema: ParseOptionSchema[],\n  values: ParseOptionValues,\n  doUpdate: (v: ParseOptionValues) => void,\n  doCancel: () => void,\n): DomContents {\n  const items = schema.filter(item => item.visible);\n  const optionsMap = new Map<string, Observable<ParseOptionValueType>>(\n    items.map((item) => [item.name, Observable.create(owner, values[item.name])]));\n\n  function collectParseOptions(): ParseOptionValues {\n    return fromPairs(items.map((item) => [item.name, optionsMap.get(item.name)!.get()]));\n  }\n\n  return [\n    cssParseOptionForm(\n      items.map((item) => cssParseOption(\n        cssParseOptionName(makeLinks(item.label)),\n        optionToInput(owner, item.type, optionsMap.get(item.name)!),\n        testId('parseopts-opt'),\n      )),\n    ),\n    cssModalButtons(\n      dom.domComputed((use) => items.every((item) => use(optionsMap.get(item.name)!) === values[item.name]),\n        (unchanged) => (unchanged ?\n          bigBasicButton('Close', dom.on('click', doCancel), testId('parseopts-back')) :\n          bigPrimaryButton('Update preview', dom.on('click', () => doUpdate(collectParseOptions())),\n            testId('parseopts-update'))\n        )\n      )\n    ),\n  ];\n}\n\nfunction optionToInput(owner: IDisposableOwner, type: string, value: Observable<ParseOptionValueType>): HTMLElement {\n  switch (type) {\n    case 'boolean': return squareCheckbox(value as Observable<boolean>);\n    default: {\n      const obs = Computed.create(owner, (use) => escapeChars(String(use(value) || \"\")))\n        .onWrite((val) => value.set(unescapeChars(val)));\n      return cssInputText(obs, {onInput: true},\n        dom.on('focus', (ev, elem) => elem.select()));\n    }\n  }\n}\n\nconst cssParseOptionForm = styled('div', `\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  padding: 16px 0;\n  width: 400px;\n  overflow-y: auto;\n`);\nconst cssParseOption = styled('div', `\n  flex: none;\n  margin: 8px 0;\n  width: calc(50% - 16px);\n  font-weight: initial;   /* negate bootstrap */\n`);\nconst cssParseOptionName = styled('div', `\n  margin-bottom: 8px;\n`);\nconst cssInputText = styled(input, `\n  color: ${theme.inputFg};\n  background-color: ${theme.inputBg};\n  position: relative;\n  display: inline-block;\n  outline: none;\n  height: 28px;\n  border: 1px solid ${theme.inputBorder};\n  border-radius: 3px;\n  padding: 0 6px;\n  width: 100%;\n\n  &::placeholder {\n    color: ${theme.inputPlaceholderFg};\n  }\n`);\n","import { makeT } from 'app/client/lib/localization';\nimport { bigBasicButton } from 'app/client/ui2018/buttons';\nimport { testId, theme } from 'app/client/ui2018/cssVars';\nimport { loadingSpinner } from 'app/client/ui2018/loaders';\nimport { cssModalButtons, cssModalTitle, IModalControl, IModalOptions, modal } from 'app/client/ui2018/modals';\nimport { PluginInstance } from 'app/common/PluginInstance';\nimport { RenderTarget } from 'app/plugin/RenderOptions';\nimport { Disposable, dom, DomContents, Observable, styled } from 'grainjs';\n\nconst t = makeT('PluginScreen');\n\n/**\n * Rendering options for the PluginScreen modal.\n */\nexport interface RenderOptions {\n  // Maximizes modal to fill the viewport.\n  fullscreen?: boolean;\n  fullbody?: boolean;\n}\n\n/**\n * Helper for showing plugin components during imports.\n */\nexport class PluginScreen extends Disposable {\n  private _openModalCtl: IModalControl | null = null;\n  private _importerContent = Observable.create<DomContents>(this, null);\n  private _fullscreen = Observable.create(this, false);\n  private _fullbody = Observable.create(this, false);\n\n  constructor(private _title: string) {\n    super();\n  }\n\n  // The importer state showing the inline element from the plugin (e.g. to enter URL in case of\n  // import-from-url).\n  public renderContent(inlineElement: HTMLElement) {\n    this.render([this._buildModalTitle(), inlineElement]);\n  }\n\n  // registers a render target for plugin to render inline.\n  public renderPlugin(plugin: PluginInstance): RenderTarget {\n    const handle: RenderTarget = plugin.addRenderTarget((el, opt = {}) => {\n      el.style.width = \"100%\";\n      el.style.height = opt.height || \"200px\";\n      this.renderContent(el);\n    });\n    return handle;\n  }\n\n  public render(content: DomContents, options?: RenderOptions) {\n    this._fullscreen.set(Boolean(options?.fullscreen));\n    this._fullbody.set(Boolean(options?.fullbody));\n    this.showImportDialog();\n    this._importerContent.set(content);\n  }\n\n  // The importer state showing just an error.\n  public renderError(message: string) {\n    this._fullbody.set(false);\n    this.render([\n      this._buildModalTitle(),\n      cssModalBody(t(\"Import failed: \"), message, testId('importer-error')),\n      cssModalButtons(\n        bigBasicButton('Close',\n          dom.on('click', () => this.close()),\n          testId('modal-cancel'))),\n    ]);\n  }\n\n  // The importer state showing just a spinner, when the user has to wait. We don't even let the\n  // user cancel it, because the cleanup can only happen properly once the wait completes.\n  public renderSpinner() {\n    this._fullbody.set(false);\n    this.render([this._buildModalTitle(), cssSpinner(loadingSpinner())]);\n  }\n\n  public close() {\n    this._openModalCtl?.close();\n    this._openModalCtl = null;\n  }\n\n  public showImportDialog(options?: IModalOptions) {\n    if (this._openModalCtl) { return; }\n    modal((ctl, ctlOwner) => {\n      this._openModalCtl = ctl;\n\n      // Make sure we are close when parent is closed.\n      this.onDispose(() => {\n        if (ctlOwner.isDisposed()) { return; }\n        ctl.close();\n      });\n\n      return [\n        cssModalOverrides.cls(''),\n        cssModalOverrides.cls('-fullscreen', this._fullscreen),\n        cssModalOverrides.cls('-fullbody', this._fullbody),\n        dom.domComputed(this._importerContent),\n        testId('importer-dialog'),\n      ];\n    }, {\n      noClickAway: true,\n      noEscapeKey: true,\n      ...options,\n    });\n  }\n\n  private _buildModalTitle(rightElement?: DomContents) {\n    return cssModalHeader(cssModalTitle(this._title), rightElement);\n  }\n}\n\n\nconst cssModalOverrides = styled('div', `\n  max-height: calc(100% - 32px);\n  display: flex;\n  flex-direction: column;\n  & > .${cssModalButtons.className} {\n    margin-top: 16px;\n  }\n\n  &-fullscreen {\n    height: 100%;\n    margin: 32px;\n  }\n\n  &-fullbody {\n    padding: 0px;\n    background-color: ${theme.importerOutsideBg};\n  }\n`);\n\nconst cssModalBody = styled('div', `\n  padding: 16px 0;\n  overflow-y: auto;\n  max-width: 470px;\n  white-space: pre-line;\n`);\n\nconst cssModalHeader = styled('div', `\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 16px;\n  & > .${cssModalTitle.className} {\n    margin-bottom: 0px;\n  }\n`);\n\nconst cssSpinner = styled('div', `\n  display: flex;\n  align-items: center;\n  height: 80px;\n  margin: auto;\n`);\n","import {CustomView} from 'app/client/components/CustomView';\nimport {DataRowModel} from 'app/client/models/DataRowModel';\nimport DataTableModel from 'app/client/models/DataTableModel';\nimport {ViewSectionRec} from 'app/client/models/DocModel';\nimport {prefersDarkMode, prefersDarkModeObs} from 'app/client/ui2018/cssVars';\nimport {dom} from 'grainjs';\n\ntype RowId = number|'new';\n\n/**\n * Print the specified viewSection (aka page widget). We use the existing view instance rather\n * than render a new one, since it may have state local to this instance view, such as current\n * filters.\n *\n * Views get a chance to render things specially for printing (which is needed when they use\n * scrolly for normal rendering).\n *\n * To let an existing view print across multiple pages, we can't have it nested in a flexbox or a\n * div with 'height: 100%'. We achieve it by forcing all parents of our view to have a simple\n * layout. This is potentially fragile.\n */\nexport async function printViewSection(layout: any, viewSection: ViewSectionRec) {\n  const viewInstance = viewSection.viewInstance.peek();\n  const sectionElem = viewInstance?.viewPane?.closest('.viewsection_content');\n  if (!sectionElem) {\n    throw new Error(\"No page widget to print\");\n  }\n  if (viewInstance instanceof CustomView) {\n    try {\n      await viewInstance.triggerPrint();\n      return;\n    } catch (e) {\n      // tslint:disable-next-line:no-console\n      console.warn(`Failed to trigger print in CustomView: ${e}`);\n      // continue on to trying to print from outside, which should work OK for a single page.\n    }\n  }\n\n  function prepareToPrint(onOff: boolean) {\n    // window.print() is a blocking call, which means our listener for the\n    // `prefers-color-scheme: dark` media feature will not receive any updates for the\n    // duration that the print dialog is shown. This proves problematic since an event is\n    // sent just before the blocking call containing a value of false, regardless of the\n    // user agent's color scheme preference. It's not clear why this happens, but the result\n    // is Grist temporarily reverting to the light theme until the print dialog is dismissed.\n    // As a workaround, we'll temporarily pause our listener, and unpause after the print dialog\n    // is dismissed.\n    prefersDarkModeObs().pause();\n\n    // Hide all layout boxes that do NOT contain the section to be printed.\n    layout?.forEachBox((box: any) => {\n      if (!box.dom.contains(sectionElem)) {\n        box.dom.classList.toggle('print-hide', onOff);\n      }\n    });\n\n    // Mark the section to be printed.\n    sectionElem.classList.toggle('print-widget', onOff);\n\n    // Let the view instance update its rendering, e.g. to render all rows when scrolly is in use.\n    viewInstance?.prepareToPrint(onOff);\n\n    // If .print-all-rows element is present (created for scrolly-based views), use it as the\n    // start element for the loop below, to ensure it's rendered flexbox-free.\n    const keyElem = sectionElem.querySelector('.print-all-rows') || sectionElem;\n\n    // Go through all parents of the element to be printed. For @media print, we override their\n    // layout in a heavy-handed way, forcing them all to be non-flexbox and sized to content,\n    // since our normal flexbox-based layout is sized to screen and would not print multiple pages.\n    let elem = keyElem.parentElement;\n    while (elem) {\n      elem.classList.toggle('print-parent', onOff);\n      elem = elem.parentElement;\n    }\n  }\n\n  const sub1 = dom.onElem(window, 'beforeprint', () => prepareToPrint(true));\n  const sub2 = dom.onElem(window, 'afterprint', (window as any).afterPrintCallback = () => {\n    sub1.dispose();\n    sub2.dispose();\n    // To debug printing, set window.debugPrinting=1 in the console, then print a section, dismiss\n    // the print dialog, switch to \"@media print\" emulation, and you can explore the styles. You'd\n    // need to call window.finishPrinting() or reload the page to do it again.\n    if ((window as any).debugPrinting) {\n      (window as any).finishPrinting = () => prepareToPrint(false);\n    } else {\n      prepareToPrint(false);\n    }\n    delete (window as any).afterPrintCallback;\n    prefersDarkModeObs().pause(false);\n\n    // This may have changed while window.print() was blocking.\n    prefersDarkModeObs().set(prefersDarkMode());\n  });\n\n  // Running print on a timeout makes it possible to test printing using selenium, and doesn't\n  // seem to affect normal printing.\n  setTimeout(() => window.print(), 0);\n}\n\n\n/**\n * Produces a div with all requested rows using the same renderRow() function as used with scrolly\n * for dynamically rendered views. This is used for printing, so these rows do not subscribe to\n * data.\n *\n * To avoid creating a lot of subscriptions when rendering rows this way, we render one DOM row at\n * a time, copy the produced HTML, and dispose the produced DOM.\n */\nexport function renderAllRows(\n  tableModel: DataTableModel, rowIds: RowId[], renderRow: (r: DataRowModel) => Element,\n) {\n  const rowModel = tableModel.createFloatingRowModel(null) as DataRowModel;\n  const html: string[] = [];\n  rowIds.forEach((rowId, index) => {\n    if (rowId !== 'new') {\n      rowModel._index(index);\n      rowModel.assign(rowId);\n      const elem = renderRow(rowModel);\n      html.push(`<div class=\"print-row\">${elem.outerHTML}</div>`);\n      dom.domDispose(elem);\n    }\n  });\n  rowModel.dispose();\n  const result = dom('div.print-all-rows');\n  result.innerHTML = html.join(\"\\n\");\n  return result;\n}\n","import * as commands from 'app/client/components/commands';\nimport {DataTables} from 'app/client/components/DataTables';\nimport {DocumentUsage} from 'app/client/components/DocumentUsage';\nimport {GristDoc} from 'app/client/components/GristDoc';\nimport {printViewSection} from 'app/client/components/Printing';\nimport {ViewSectionHelper} from 'app/client/components/ViewLayout';\nimport {mediaSmall, theme} from 'app/client/ui2018/cssVars';\nimport {icon} from 'app/client/ui2018/icons';\nimport {Computed, Disposable, dom, fromKo, makeTestId, Observable, styled} from 'grainjs';\nimport {reportError} from 'app/client/models/errors';\nimport {ViewSectionRec} from 'app/client/models/DocModel';\nimport {buildViewSectionDom} from 'app/client/components/buildViewSectionDom';\n\nconst testId = makeTestId('test-raw-data-');\n\nexport class RawDataPage extends Disposable {\n  private _lightboxVisible: Observable<boolean>;\n  constructor(private _gristDoc: GristDoc) {\n    super();\n    const commandGroup = {\n      printSection: () => { printViewSection(null, this._gristDoc.viewModel.activeSection()).catch(reportError); },\n    };\n    this.autoDispose(commands.createGroup(commandGroup, this, true));\n    this._lightboxVisible = Computed.create(this, use => {\n      const section = use(this._gristDoc.viewModel.activeSection);\n      return Boolean(use(section.id)) && use(section.isRaw);\n    });\n    // When we are disposed, we want to clear active section in the viewModel we got (which is an empty model)\n    // to not restore the section when user will come back to Raw Data page.\n    // But by the time we are gone (disposed), active view will be changed, so here we will save the reference.\n    // TODO: empty view should rather have id = 0, not undefined. Should be fixed soon.\n    const emptyView = this._gristDoc.docModel.views.rowModels.find(x => x.id.peek() === undefined);\n    this.autoDispose(this._gristDoc.activeViewId.addListener(() => {\n      emptyView?.activeSectionId(0);\n    }));\n    // Whenever we close lightbox, clear cursor monitor state.\n    this.autoDispose(this._lightboxVisible.addListener(state => {\n      if (!state) {\n        this._gristDoc.cursorMonitor.clear();\n      }\n    }));\n  }\n\n  public buildDom() {\n    return cssContainer(\n      cssPage(\n        dom('div', this._gristDoc.behavioralPromptsManager.attachTip('rawDataPage', {hideArrow: true})),\n        dom('div',\n          dom.create(DataTables, this._gristDoc),\n          dom.create(DocumentUsage, this._gristDoc.docPageModel)\n        ),\n        // We are hiding it, because overlay doesn't have a z-index (it conflicts with a searchbar and list buttons)\n        dom.hide(this._lightboxVisible)\n      ),\n      /***************  Lightbox section **********/\n      dom.domComputed(fromKo(this._gristDoc.viewModel.activeSection), (viewSection) => {\n        const sectionId = viewSection.getRowId();\n        if (!sectionId || !viewSection.isRaw.peek()) {\n          return null;\n        }\n        return dom.create(RawDataPopup, this._gristDoc, viewSection, () => this._close());\n      }),\n    );\n  }\n\n  private _close() {\n    this._gristDoc.viewModel.activeSectionId(0);\n  }\n}\n\nexport class RawDataPopup extends Disposable {\n  constructor(\n    private _gristDoc: GristDoc,\n    private _viewSection: ViewSectionRec,\n    private _onClose: () => void,\n    ) {\n    super();\n    const commandGroup = {\n      cancel: () => { this._onClose(); },\n      deleteSection: () => {\n        // Normally this command is disabled on the menu, but for collapsed section it is active.\n        if (this._viewSection.isRaw.peek()) {\n          throw new Error(\"Can't delete a raw section\");\n        }\n        this._gristDoc.docData.sendAction(['RemoveViewSection', this._viewSection.id.peek()]).catch(reportError);\n      },\n    };\n    this.autoDispose(commands.createGroup(commandGroup, this, true));\n  }\n  public buildDom() {\n    ViewSectionHelper.create(this, this._gristDoc, this._viewSection);\n    return cssOverlay(\n      testId('overlay'),\n      cssSectionWrapper(\n        buildViewSectionDom({\n          gristDoc: this._gristDoc,\n          sectionRowId: this._viewSection.getRowId(),\n          draggable: false,\n          focusable: false,\n          widgetNameHidden: this._viewSection.isRaw.peek(), // We are sometimes used for non raw sections.\n        })\n      ),\n      cssCloseButton('CrossBig',\n        testId('close-button'),\n        dom.on('click', () => this._onClose())\n      ),\n      // Close the lightbox when user clicks exactly on the overlay.\n      dom.on('click', (ev, elem) => void (ev.target === elem ? this._onClose() : null))\n    );\n  }\n}\n\nconst cssContainer = styled('div', `\n  height: 100%;\n  overflow: hidden;\n  position: relative;\n`);\n\nconst cssPage = styled('div', `\n  overflow-y: auto;\n  height: 100%;\n  padding: 32px 64px 24px 64px;\n  @media ${mediaSmall} {\n    & {\n      padding: 32px 24px 24px 24px;\n    }\n  }\n`);\n\nconst cssOverlay = styled('div', `\n  background-color: ${theme.modalBackdrop};\n  inset: 0px;\n  height: 100%;\n  width: 100%;\n  padding: 20px 56px 20px 56px;\n  position: absolute;\n  @media ${mediaSmall} {\n    & {\n      padding: 22px;\n      padding-top: 30px;\n    }\n  }\n`);\n\nconst cssSectionWrapper = styled('div', `\n  background: ${theme.mainPanelBg};\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  border-radius: 5px;\n  border-bottom-left-radius: 0px;\n  border-bottom-right-radius: 0px;\n  & .viewsection_content {\n    margin: 0px;\n    margin-top: 12px;\n  }\n  & .viewsection_title {\n    padding: 0px 12px;\n  }\n  & .filter_bar {\n    margin-left: 6px;\n  }\n`);\n\nconst cssCloseButton = styled(icon, `\n  position: absolute;\n  top: 16px;\n  right: 16px;\n  height: 24px;\n  width: 24px;\n  cursor: pointer;\n  --icon-color: ${theme.modalBackdropCloseButtonFg};\n  &:hover {\n    --icon-color: ${theme.modalBackdropCloseButtonHoverFg};\n  }\n  @media ${mediaSmall} {\n    & {\n      top: 6px;\n      right: 6px;\n    }\n  }\n`);\n","import {CellSelector, COL, ROW} from 'app/client/components/CellSelector';\nimport {copyToClipboard} from 'app/client/lib/clipboardUtils';\nimport {Delay} from \"app/client/lib/Delay\";\nimport {KoArray} from 'app/client/lib/koArray';\nimport {ViewFieldRec} from 'app/client/models/entities/ViewFieldRec';\nimport {UserError} from 'app/client/models/errors';\nimport {ALL, RowsChanged, SortedRowSet} from \"app/client/models/rowset\";\nimport {showTransientTooltip} from 'app/client/ui/tooltips';\nimport {colors, isNarrowScreen, isNarrowScreenObs, theme, vars} from 'app/client/ui2018/cssVars';\nimport {icon} from 'app/client/ui2018/icons';\nimport {CellValue} from 'app/common/DocActions';\nimport {isEmptyList, isListType, isRefListType} from \"app/common/gristTypes\";\nimport {TableData} from \"app/common/TableData\";\nimport {BaseFormatter} from 'app/common/ValueFormatter';\nimport ko from 'knockout';\nimport {Computed, Disposable, dom, makeTestId, Observable, styled, subscribe} from 'grainjs';\nimport {makeT} from 'app/client/lib/localization';\n\nconst t = makeT('SelectionSummary');\n\n/**\n * A beginning and end index for a range of columns or rows.\n */\ninterface Range {\n  begin: number;\n  end: number;\n}\n\n/**\n * A single part of the cell selection summary.\n */\ninterface SummaryPart {\n  /** Identifier for the summary part. */\n  id: 'sum' | 'count' | 'dimensions';\n  /** Label that's shown to the left of `value`. */\n  label: string;\n  /** Value of the summary part. */\n  value: string;\n  /** If true, displays a copy button on hover. Defaults to false. */\n  clickToCopy?: boolean;\n}\n\nconst testId = makeTestId('test-selection-summary-');\n\n// We can handle a million cells in under 60ms on a good laptop. Much beyond that, and we'll break\n// selection with the bad performance. Instead, skip the counting and summing for too many cells.\nconst MAX_CELLS_TO_SCAN = 1_000_000;\n\nexport class SelectionSummary extends Disposable {\n  private _colTotalCount = Computed.create(this, (use) =>\n    use(use(this._viewFields).getObservable()).length);\n\n  private _rowTotalCount = Computed.create(this, (use) => {\n    const rowIds = use(this._sortedRows.getKoArray().getObservable());\n    const includesNewRow = (rowIds.length > 0 && rowIds[rowIds.length - 1] === 'new');\n    return rowIds.length - (includesNewRow ? 1 : 0);\n  });\n\n  // In CellSelector, start and end are 0-based, inclusive, and not necessarily in order.\n  // It's not good for representing an empty range. Here, we convert ranges as [begin, end),\n  // with end >= begin.\n  private _rowRange = Computed.create<Range>(this, (use) => {\n    const type = use(this._cellSelector.currentSelectType);\n    if (type === COL) {\n      return {begin: 0, end: use(this._rowTotalCount)};\n    } else {\n      const start = use(this._cellSelector.row.start);\n      const end = use(this._cellSelector.row.end);\n      return {\n        begin: Math.min(start, end),\n        end: Math.max(start, end) + 1,\n      };\n    }\n  });\n\n  private _colRange = Computed.create<Range>(this, (use) => {\n    const type = use(this._cellSelector.currentSelectType);\n    if (type === ROW) {\n      return {begin: 0, end: use(this._colTotalCount)};\n    } else {\n      const start = use(this._cellSelector.col.start);\n      const end = use(this._cellSelector.col.end);\n      return {\n        begin: Math.min(start, end),\n        end: Math.max(start, end) + 1,\n      };\n    }\n  });\n\n  private _summary = Observable.create<SummaryPart[]>(this, []);\n  private _delayedRecalc = this.autoDispose(Delay.create());\n\n  constructor(\n    private _cellSelector: CellSelector,\n    private _tableData: TableData,\n    private _sortedRows: SortedRowSet,\n    private _viewFields: ko.Computed<KoArray<ViewFieldRec>>,\n  ) {\n    super();\n\n    this.autoDispose(this._sortedRows.getKoArray().subscribe(this._onSpliceChange, this, 'spliceChange'));\n    const onRowNotify = this._onRowNotify.bind(this);\n    this._sortedRows.on('rowNotify', onRowNotify);\n    this.onDispose(() => this._sortedRows.off('rowNotify', onRowNotify));\n    this.autoDispose(subscribe(this._rowRange, this._colRange,\n      () => this._scheduleRecalc()));\n    this.autoDispose(isNarrowScreenObs().addListener((isNarrow) => {\n      if (isNarrow) { return; }\n      // No calculations occur while the screen is narrow, so we need to schedule one.\n      this._scheduleRecalc();\n    }));\n  }\n\n  public buildDom() {\n    return cssSummary(\n      dom.forEach(this._summary, ({id, label, value, clickToCopy}) =>\n        cssSummaryPart(\n          label ? dom('span', cssLabelText(label), cssCopyIcon('Copy')) : null,\n          value,\n          cssSummaryPart.cls('-copyable', Boolean(clickToCopy)),\n          (clickToCopy ? dom.on('click', (ev, elem) => doCopy(value, elem)) : null),\n          testId(id),\n        )\n      ),\n    );\n  }\n\n  private _onSpliceChange(splice: {start: number}) {\n    const rowRange = this._rowRange.get();\n    const rowCount = rowRange.end - rowRange.begin;\n    if (rowCount === 1) { return; }\n    if (splice.start >= rowRange.end) { return; }\n    // We could be smart here and only recalculate when the splice affects our selection. But for\n    // that to make sense, the selection itself needs to be smart. Currently, the selection is\n    // lost whenever the cursor is affected. For example, when you have a selection and another\n    // user adds/removes columns or rows before the selection, the selection won't be shifted\n    // with the cursor, and will instead be cleared. Since we can't always rely on the selection\n    // being there, we'll err on the safe side and always schedule a recalc.\n    this._scheduleRecalc();\n  }\n\n  private _onRowNotify(rows: RowsChanged) {\n    const rowRange = this._rowRange.get();\n    if (rows === ALL) {\n      this._scheduleRecalc();\n    } else {\n      const rowArray = this._sortedRows.getKoArray().peek();\n      const rowIdSet = new Set(rows);\n      for (let r = rowRange.begin; r < rowRange.end; r++) {\n        if (rowIdSet.has(rowArray[r])) {\n          this._scheduleRecalc();\n          break;\n        }\n      }\n    }\n  }\n\n  /**\n   * Schedules a re-calculation to occur in the immediate future.\n   *\n   * May be called repeatedly, but only a single re-calculation will be scheduled, to\n   * avoid queueing unnecessary amounts of work.\n   */\n  private _scheduleRecalc() {\n    // `_recalc` may take a non-trivial amount of time, so we defer until the stack is clear.\n    this._delayedRecalc.schedule(0, () => this._recalc());\n  }\n\n  private _recalc() {\n    const rowRange = this._rowRange.get();\n    const colRange = this._colRange.get();\n    let rowCount = rowRange.end - rowRange.begin;\n    let colCount = colRange.end - colRange.begin;\n    const cellCount = rowCount * colCount;\n    const summary: SummaryPart[] = [];\n    // Do nothing on narrow screens, because we haven't come up with a place to render sum anyway.\n    if (cellCount > 1 && !isNarrowScreen()) {\n      if (cellCount <= MAX_CELLS_TO_SCAN) {\n        const rowArray = this._sortedRows.getKoArray().peek();\n        const fields = this._viewFields.peek().peek();\n        let countNumeric = 0;\n        let countNonEmpty = 0;\n        let sum = 0;\n        let sumFormatter: BaseFormatter|null = null;\n        const rowIndices: number[] = [];\n        for (let r = rowRange.begin; r < rowRange.end; r++) {\n          const rowId = rowArray[r];\n          if (rowId === undefined || rowId === 'new') {\n            // We can run into this whenever the selection gets out of sync due to external\n            // changes, like another user removing some rows. For now, we'll skip rows that are\n            // still selected and no longer exist, but the real TODO is to better update the\n            // selection so that it doesn't have out-of-date and invalid ranges.\n            rowCount -= 1;\n            continue;\n          }\n          rowIndices.push(this._tableData.getRowIdIndex(rowId)!);\n        }\n        for (let c = colRange.begin; c < colRange.end; c++) {\n          const field = fields[c];\n          if (field === undefined) {\n            // Like with rows (see comment above), we need to watch out for out-of-date ranges.\n            colCount -= 1;\n            continue;\n          }\n          const col = fields[c].column.peek();\n          const displayCol = fields[c].displayColModel.peek();\n          const colType = col.type.peek();\n          const visibleColType = fields[c].visibleColModel.peek().type.peek();\n          const effectiveColType = visibleColType ?? colType;\n          const displayColId = displayCol.colId.peek();\n          // Note: we get values from the display column so that reference columns displaying\n          // numbers are included in the computed sum. Unfortunately, that also means we can't\n          // show a count of non-empty references. For now, that's a trade-off we'll have to make,\n          // but in the future it should be possible to allow showing multiple summary parts with\n          // some level of configurability.\n          const values = this._tableData.getColValues(displayColId);\n          if (!values) {\n            throw new UserError(`Invalid column ${this._tableData.tableId}.${displayColId}`);\n          }\n          const isNumeric = ['Numeric', 'Int', 'Any'].includes(effectiveColType);\n          const isEmpty: undefined | ((value: CellValue) => boolean) = (\n            colType.startsWith('Ref:') && !visibleColType ? value => (value === 0) :\n            isRefListType(colType) || isListType(effectiveColType) ? isEmptyList :\n            undefined\n          );\n          // The loops below are optimized, minimizing the amount of work done per row. For\n          // example, column values are retrieved in bulk above instead of once per row. In one\n          // unscientific test, they take 30-60ms per million numeric cells.\n          //\n          // TODO: Add a benchmark test suite that automates checking for performance regressions.\n          if (isNumeric) {\n            if (!sumFormatter) {\n              sumFormatter = fields[c].formatter.peek();\n            }\n            for (const i of rowIndices) {\n              const value = values[i];\n              if (typeof value === 'number') {\n                countNumeric++;\n                sum += value;\n              } else if (value !== null && value !== undefined && value !== '' && !isEmpty?.(value)) {\n                countNonEmpty++;\n              }\n            }\n          } else {\n            for (const i of rowIndices) {\n              const value = values[i];\n              if (value !== null && value !== undefined && value !== '' && value !== false && !isEmpty?.(value)) {\n                countNonEmpty++;\n              }\n            }\n          }\n        }\n\n        if (countNumeric > 0) {\n          const sumValue = sumFormatter ? sumFormatter.formatAny(sum) : String(sum);\n          summary.push({id: 'sum', label: 'Sum ', value: sumValue, clickToCopy: true});\n        } else {\n          summary.push({id: 'count', label: 'Count ', value: String(countNonEmpty), clickToCopy: true});\n        }\n      }\n      summary.push({id: 'dimensions', label: '', value: `${rowCount}⨯${colCount}`});\n    }\n    this._summary.set(summary);\n  }\n}\n\nasync function doCopy(value: string, elem: Element) {\n  await copyToClipboard(value);\n  showTransientTooltip(elem, t(\"Copied to clipboard\"), {key: 'copy-selection-summary'});\n}\n\nconst cssSummary = styled('div', `\n  position: absolute;\n  bottom: -18px;\n  height: 18px;\n  line-height: 18px;\n  display: flex;\n  column-gap: 8px;\n  width: 100%;\n  justify-content: end;\n  color: ${theme.text};\n  font-family: ${vars.fontFamilyData};\n\n  @media print {\n    & {\n      display: none;\n    }\n  }\n`);\n\n// Note: the use of an extra element for the background is to set its opacity, to make it a bit\n// lighter (or darker, in dark-mode) than actual mediumGrey, without defining a special color.\nconst cssSummaryPart = styled('div', `\n  padding: 0 8px;\n  border-radius: 4px;\n  border-top-left-radius: 0px;\n  border-top-right-radius: 0px;\n  border-top: none;\n  z-index: 100;\n  position: relative;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  /* Set explicit backdrop to improve visibility in raw data views. */\n  background-color: ${theme.mainPanelBg};\n\n  &-copyable:hover {\n    cursor: pointer;\n  }\n  &::before {\n    content: \"\";\n    position: absolute;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0;\n    background-color: ${colors.mediumGrey};\n    opacity: 0.8;\n    z-index: -1;\n  }\n`);\n\nconst cssLabelText = styled('span', `\n  font-size: ${vars.xsmallFontSize};\n  text-transform: uppercase;\n  position: relative;\n  margin-right: 4px;\n  .${cssSummaryPart.className}-copyable:hover & {\n    visibility: hidden;\n  }\n`);\n\nconst cssCopyIcon = styled(icon, `\n  position: absolute;\n  top: 0;\n  margin: 1px 0 0 4px;\n  --icon-color: ${theme.controlFg};\n  display: none;\n  .${cssSummaryPart.className}-copyable:hover & {\n    display: block;\n  }\n`);\n","import {GristDoc} from 'app/client/components/GristDoc';\nimport * as dispose from 'app/client/lib/dispose';\nimport {MinimalActionGroup} from 'app/common/ActionGroup';\nimport {PromiseChain, setDefault} from 'app/common/gutil';\nimport {CursorPos} from 'app/plugin/GristAPI';\nimport {fromKo, Observable} from 'grainjs';\nimport * as ko from 'knockout';\nimport sortBy = require('lodash/sortBy');\n\nexport interface ActionGroupWithCursorPos extends MinimalActionGroup {\n  cursorPos?: CursorPos;\n  // For operations not done by the server, we supply a function to\n  // handle them.\n  op?: (ag: MinimalActionGroup, isUndo: boolean) => Promise<void>;\n}\n\n// Provides observables indicating disabled state for undo/redo.\nexport interface IUndoState {\n  isUndoDisabled: Observable<boolean>;\n  isRedoDisabled: Observable<boolean>;\n}\n\n/**\n * Maintains the stack of actions which can be undone and redone, and maintains the\n * position in this stack. Undo and redo actions are generated and sent to the server here.\n */\nexport class UndoStack extends dispose.Disposable {\n  public isDisabled: Observable<boolean>;\n  public undoDisabledObs: ko.Observable<boolean>;\n  public redoDisabledObs: ko.Observable<boolean>;\n  private _gristDoc: GristDoc;\n  private _stack: ActionGroupWithCursorPos[];\n  private _pointer: number;\n  private _linkMap: Map<number, ActionGroupWithCursorPos[]>;\n\n  // Chain of promises which send undo actions to the server. This delays the execution of the\n  // next action until the current one has been received and moved the pointer index.\n  private _undoChain = new PromiseChain<void>();\n\n  public create(log: MinimalActionGroup[], options: {gristDoc: GristDoc}) {\n    this._gristDoc = options.gristDoc;\n\n    this.isDisabled = Observable.create(this, false);\n\n    // TODO: _stack and _linkMap grow without bound within a single session.\n    // The top of the stack is stack.length - 1. The pointer points above the most\n    // recently applied (not undone) action.\n    this._stack = [];\n    this._pointer = 0;\n\n    // Map leading from actionNums to the action groups which link to them.\n    this._linkMap = new Map();\n\n    // Observables for when there is nothing to undo/redo.\n    this.undoDisabledObs = ko.observable(true);\n    this.redoDisabledObs = ko.observable(true);\n\n    // Set the history nav interface in the DocPageModel to properly enable/disabled undo/redo.\n    if (this._gristDoc.docPageModel) {\n      this._gristDoc.docPageModel.undoState.set({\n        isUndoDisabled: fromKo(this.undoDisabledObs),\n        isRedoDisabled: fromKo(this.redoDisabledObs)\n      });\n    }\n\n    // Initialize the stack from the log of recent actions from the server.\n    log.forEach(ag => { this.pushAction(ag); });\n  }\n\n  /**\n   * Should only be given own actions. Pays attention to actionNum, otherId, linkId, and\n   * uses those to adjust undo index.\n   */\n  public pushAction(ag: MinimalActionGroup): void {\n    if (!ag.fromSelf) {\n      return;\n    }\n    const otherIndex = ag.otherId ?\n      this._stack.findIndex(a => a.actionNum === ag.otherId) : -1;\n\n    if (ag.linkId) {\n      // Link action. Add the action to the linkMap, but not to any stacks.\n      setDefault(this._linkMap, ag.linkId, []).push(ag);\n    } else if (otherIndex > -1) {\n      // Undo/redo action from the current session.\n      this._pointer = ag.isUndo ? otherIndex : otherIndex + 1;\n    } else {\n      // Either a normal action from the current session, or an undo/redo which\n      // applies to a non-recent action. Bury all undone actions.\n      if (!this.redoDisabledObs()) {\n        this._stack.splice(this._pointer);\n      }\n      // Reset pointer and add to the stack (if not an undo action).\n      if (!ag.otherId) {\n        this._stack.push(ag);\n      }\n      this._pointer = this._stack.length;\n    }\n    this.undoDisabledObs(this._pointer <= 0);\n    this.redoDisabledObs(this._pointer >= this._stack.length);\n  }\n\n  // Send an undo action. This should be called when the user presses 'undo'.\n  public async sendUndoAction(): Promise<void> {\n    if (this.isDisabled.get()) { return; }\n\n    return this._undoChain.add(() => this._sendAction(true));\n  }\n\n  // Send a redo action. This should be called when the user presses 'redo'.\n  public async sendRedoAction(): Promise<void> {\n    if (this.isDisabled.get()) { return; }\n\n    return this._undoChain.add(() => this._sendAction(false));\n  }\n\n  public enable(): void {\n    this.isDisabled.set(false);\n  }\n\n  public disable(): void {\n    this.isDisabled.set(true);\n  }\n\n  private async _sendAction(isUndo: boolean): Promise<void> {\n    // Pick the action group to undo or redo.\n    const ag = this._stack[isUndo ? this._pointer - 1 : this._pointer];\n    if (!ag) { return; }\n\n    try {\n      // Get all actions in the bundle that starts at the current index. Typically, an array with a\n      // single action group is returned.\n      const actionGroups = this._findActionBundle(ag);\n      // When we undo/redo, jump to the place where this action occurred, to bring the user to the\n      // context where the change was originally made. We jump first immediately to feel more\n      // responsive, then again when the action is done. The second jump matters more for most\n      // changes, but the first is the important one when Undoing an AddRecord.\n      this._gristDoc.moveToCursorPos(ag.cursorPos, ag).catch(() => { /* do nothing */ });\n      if (actionGroups.length === 1 && actionGroups[0].op) {\n        // this is an internal operation, rather than one done by the server,\n        // so we can't ask the server to undo it.\n        await actionGroups[0].op(actionGroups[0], isUndo);\n      } else {\n        await this._gristDoc.docComm.applyUserActionsById(\n          actionGroups.map(a => a.actionNum),\n          actionGroups.map(a => a.actionHash),\n          isUndo,\n          { otherId: ag.actionNum });\n      }\n      this._gristDoc.moveToCursorPos(ag.cursorPos, ag).catch(() => { /* do nothing */ });\n    } catch (err) {\n      err.message = `Failed to apply ${isUndo ? 'undo' : 'redo'} action: ${err.message}`;\n      throw err;\n    }\n  }\n\n  /**\n   * Find all actionGroups in the bundle that starts with the given action group.\n   */\n  private _findActionBundle(ag: ActionGroupWithCursorPos) {\n    const prevNums = new Set();\n    const actionGroups = [];\n    const queue = [ag];\n    // Follow references through the linkMap adding items to the array bundle.\n    while (queue.length) {\n      ag = queue.pop()!;\n      // Checking that actions are only accessed once prevents an infinite circular loop.\n      if (prevNums.has(ag.actionNum)) {\n        break;\n      }\n      actionGroups.push(ag);\n      prevNums.add(ag.actionNum);\n      queue.push(...this._linkMap.get(ag.actionNum) || []);\n    }\n    return sortBy(actionGroups, group => group.actionNum);\n  }\n}\n","import BaseView from 'app/client/components/BaseView';\nimport {buildViewSectionDom} from 'app/client/components/buildViewSectionDom';\nimport {ChartView} from 'app/client/components/ChartView';\nimport * as commands from 'app/client/components/commands';\nimport {CustomCalendarView} from \"app/client/components/CustomCalendarView\";\nimport {CustomView} from 'app/client/components/CustomView';\nimport * as DetailView from 'app/client/components/DetailView';\nimport * as GridView from 'app/client/components/GridView';\nimport {GristDoc} from 'app/client/components/GristDoc';\nimport {BoxSpec, Layout} from 'app/client/components/Layout';\nimport {LayoutEditor} from 'app/client/components/LayoutEditor';\nimport {LayoutTray} from 'app/client/components/LayoutTray';\nimport {printViewSection} from 'app/client/components/Printing';\nimport {Delay} from 'app/client/lib/Delay';\nimport {createObsArray} from 'app/client/lib/koArrayWrap';\nimport {ViewRec, ViewSectionRec} from 'app/client/models/DocModel';\nimport {reportError} from 'app/client/models/errors';\nimport {isNarrowScreen, mediaSmall, testId, theme} from 'app/client/ui2018/cssVars';\nimport {icon} from 'app/client/ui2018/icons';\nimport {DisposableWithEvents} from 'app/common/DisposableWithEvents';\nimport {mod} from 'app/common/gutil';\nimport {\n  Computed,\n  computedArray,\n  Disposable,\n  dom,\n  fromKo,\n  Holder,\n  IDomComponent,\n  MultiHolder,\n  Observable,\n  styled,\n  subscribe\n} from 'grainjs';\nimport * as ko from 'knockout';\nimport debounce from 'lodash/debounce';\nimport * as _ from 'underscore';\n\n// tslint:disable:no-console\n\nconst viewSectionTypes: {[key: string]: any} = {\n  record: GridView,\n  detail: DetailView,\n  chart: ChartView,\n  single: DetailView,\n  custom: CustomView,\n  'custom.calendar': CustomCalendarView,\n};\n\nfunction getInstanceConstructor(parentKey: string) {\n  const Cons = viewSectionTypes[parentKey];\n  if (!Cons) {\n    console.error('ViewLayout error: requested an unsupported section type:', parentKey);\n  }\n  // Default to GridView if no valid constructor\n  return Cons || viewSectionTypes.record;\n}\n\nexport class ViewSectionHelper extends Disposable {\n  private _instance = Holder.create<BaseView>(this);\n\n  constructor(gristDoc: GristDoc, vs: ViewSectionRec) {\n    super();\n    this.onDispose(() => vs.viewInstance(null));\n\n    this.autoDispose(subscribe((use) => {\n      // Rebuild the section when its type changes or its underlying table.\n      const table = use(vs.table);\n      const Cons = getInstanceConstructor(use(vs.parentKey));\n      this._instance.clear();\n      if (table.getRowId()) {\n        this._instance.autoDispose(Cons.create(gristDoc, vs));\n      }\n      vs.viewInstance(this._instance.get());\n    }));\n  }\n}\n\n/**\n * ViewLayout - Handles layout for a single page.\n */\nexport class ViewLayout extends DisposableWithEvents implements IDomComponent {\n  public docModel = this.gristDoc.docModel;\n  public viewModel: ViewRec;\n  public layoutSpec: ko.Computed<BoxSpec>;\n  public maximized: Observable<number|null>;\n  public previousSectionId = 0; // Used to restore focus after a maximized section is closed.\n  public isResizing = Observable.create(this, false);\n  public layout: Layout;\n  public layoutEditor: LayoutEditor;\n  public layoutTray: LayoutTray;\n  public layoutSaveDelay = this.autoDispose(new Delay());\n\n  private _freeze = false;\n  // Exposed for test to indicate that save has not yet been called.\n  private _savePending = Observable.create(this, false);\n  constructor(public readonly gristDoc: GristDoc, viewId: number) {\n    super();\n    this.viewModel = this.docModel.views.getRowModel(viewId);\n\n\n    // A Map from viewSection RowModels to corresponding View class instances.\n    // TODO add a test that creating / deleting a section creates/destroys one instance, and\n    // switching pages destroys all instances.\n    const viewSectionObs = createObsArray(this, this.viewModel.viewSections());\n    this.autoDispose(computedArray(viewSectionObs, (vs, i, compArr) =>\n      ViewSectionHelper.create(compArr, gristDoc, vs)));\n\n    // Update the stored layoutSpecObj with any missing fields that are present in viewFields.\n    this.layoutSpec = this.autoDispose(ko.computed(\n      () => this._updateLayoutSpecWithSections(this.viewModel.layoutSpecObj()))\n      .extend({rateLimit: 0}));\n\n    this.layout = this.autoDispose(Layout.create(this.layoutSpec(),\n                                                 this._buildLeafContent.bind(this), true));\n\n\n    // When the layoutSpec changes by some means other than the layout editor, rebuild.\n    // This includes adding/removing sections and undo/redo.\n    this.autoDispose(this.layoutSpec.subscribe((spec) => this._freeze || this.rebuildLayout(spec)));\n\n    this.listenTo(this.layout, 'layoutUserEditStop', () => {\n      this.isResizing.set(false);\n      this.layoutSaveDelay.schedule(1000, () => {\n        this.saveLayoutSpec();\n      });\n    });\n\n    // Do not save if the user has started editing again.\n    this.listenTo(this.layout, 'layoutUserEditStart', () => {\n      this.layoutSaveDelay.cancel();\n      this._savePending.set(true);\n      this.isResizing.set(true);\n    });\n\n    this.layoutEditor = this.autoDispose(LayoutEditor.create(this.layout));\n    this.layoutTray = LayoutTray.create(this, this);\n\n    // Add disposal of this._layout after layoutEditor, so that it gets disposed first, and\n    // layoutEditor doesn't attempt to update it in its own disposal logic.\n    this.onDispose(() => this.layout.dispose());\n\n    this.autoDispose(this.gristDoc.resizeEmitter.addListener(this._onResize, this));\n\n    // It's hard to detect a click or mousedown on a third-party iframe\n    // (See https://stackoverflow.com/questions/2381336/detect-click-into-iframe-using-javascript).\n    this.listenTo(this.gristDoc.app, 'clipboard_blur', this._maybeFocusInSection);\n\n    // On narrow screens (e.g. mobile), we need to resize the section after a transition.\n    // There will two transition events (one from section one from row), so we debounce them after a tick.\n    const handler = debounce((e: TransitionEvent) => {\n      // We work only on the transition of the flex-grow property, and only on narrow screens.\n      if (e.propertyName !== 'flex-grow' || !isNarrowScreen()) { return; }\n      // Make sure the view is still active.\n      if (this.viewModel.isDisposed() || !this.viewModel.activeSection) { return; }\n      const section = this.viewModel.activeSection.peek();\n      if (!section || section.isDisposed()) { return; }\n      const view = section.viewInstance.peek();\n      if (!view || view.isDisposed()) { return; }\n      // Make resize.\n      view.onResize();\n    }, 0);\n    this.layout.rootElem.addEventListener('transitionend', handler);\n    // Don't need to dispose the listener, as the rootElem is disposed with the layout.\n\n    const classActive = cssLayoutBox.className + '-active';\n    const classInactive = cssLayoutBox.className + '-inactive';\n    this.autoDispose(subscribe(fromKo(this.viewModel.activeSection), (use, section) => {\n      const id = section.getRowId();\n      this.layout.forEachBox(box => {\n        box.dom!.classList.add(classInactive);\n        box.dom!.classList.remove(classActive);\n        box.dom!.classList.remove(\"transition\");\n      });\n      let elem: Element|null = this.layout.getLeafBox(id)?.dom || null;\n      while (elem?.matches('.layout_box')) {\n        elem.classList.remove(classInactive);\n        elem.classList.add(classActive);\n        elem = elem.parentElement;\n      }\n      if (!isNarrowScreen()) {\n        section.viewInstance.peek()?.onResize();\n      }\n    }));\n\n    const commandGroup = {\n      deleteSection: () => { this.removeViewSection(this.viewModel.activeSectionId()); },\n      nextSection: () => { this._otherSection(+1); },\n      prevSection: () => { this._otherSection(-1); },\n      printSection: () => { printViewSection(this.layout, this.viewModel.activeSection()).catch(reportError); },\n      sortFilterMenuOpen: (sectionId?: number) => { this._openSortFilterMenu(sectionId); },\n      maximizeActiveSection: () => { this._maximizeActiveSection(); },\n      cancel: () => {\n        if (this.maximized.get()) {\n          this.maximized.set(null);\n        }\n      }\n    };\n    this.autoDispose(commands.createGroup(commandGroup, this, true));\n\n    this.maximized = fromKo(this.layout.maximizedLeaf) as any;\n    this.autoDispose(this.maximized.addListener((sectionId, prev) => {\n      // If we are closing popup, resize all sections.\n      if (!sectionId) {\n        this._onResize();\n        // Reset active section to the first one if the section is popup is collapsed.\n        if (prev\n            && this.viewModel.activeCollapsedSections.peek().includes(prev)\n            && this.previousSectionId) {\n          // Make sure that previous section exists still.\n          if (this.viewModel.viewSections.peek().all()\n                  .some(s => !s.isDisposed() && s.id.peek() === this.previousSectionId)) {\n            this.viewModel.activeSectionId(this.previousSectionId);\n          }\n        }\n      } else {\n        // Otherwise resize only active one (the one in popup).\n        const section = this.viewModel.activeSection.peek();\n        if (!section.isDisposed() && section.id.peek()) {\n          section?.viewInstance.peek()?.onResize();\n        }\n      }\n    }));\n  }\n\n  public buildDom() {\n    const owner = MultiHolder.create(null);\n    const close = () => this.maximized.set(null);\n    const mainBoxInPopup = Computed.create(owner, use => this.layout.getAllLeafIds().includes(use(this.maximized)));\n    const miniBoxInPopup = Computed.create(owner, use => use(mainBoxInPopup) ? null : use(this.maximized));\n    return cssOverlay(\n      dom.autoDispose(owner),\n      cssOverlay.cls('-active', use => !!use(this.maximized)),\n      testId('viewLayout-overlay'),\n      cssVFull(\n        this.layoutTray.buildDom(),\n        cssLayoutWrapper(\n          cssLayoutWrapper.cls('-active', use => Boolean(use(this.maximized))),\n          dom.update(\n            this.layout.rootElem,\n            dom.hide(use => Boolean(use(miniBoxInPopup))),\n          ),\n          this.layoutTray.buildPopup(owner, miniBoxInPopup, close),\n        ),\n      ),\n      dom.maybe(use => !!use(this.maximized), () =>\n        cssCloseButton('CrossBig',\n          testId('close-button'),\n          dom.on('click', () => close())\n        )\n      ),\n      // Close the lightbox when user clicks exactly on the overlay.\n      dom.on('click', (ev, elem) => void (ev.target === elem && this.maximized.get() ? close() : null)),\n      dom.cls('test-viewLayout-save-pending', this._savePending)\n    );\n  }\n\n  // Freezes the layout until the passed in promise resolves. This is useful to achieve a single\n  // layout rebuild when multiple user actions needs to apply, simply pass in a promise that resolves\n  // when all user actions have resolved.\n  public async freezeUntil<T>(promise: Promise<T>): Promise<T> {\n    this._freeze = true;\n    try {\n      return await promise;\n    } finally {\n      this._freeze = false;\n      this.rebuildLayout(this.layoutSpec.peek());\n    }\n  }\n\n  public saveLayoutSpec(specs?: BoxSpec) {\n    this._savePending.set(false);\n    // Cancel the automatic delay.\n    this.layoutSaveDelay.cancel();\n    if (!this.layout) { return; }\n    // Only save layout changes when the document isn't read-only.\n    if (!this.gristDoc.isReadonly.get()) {\n      if (!specs) {\n        specs = this.layout.getLayoutSpec();\n        specs.collapsed = this.viewModel.activeCollapsedSections.peek().map((leaf)=> ({leaf}));\n      }\n      this.viewModel.layoutSpecObj.setAndSave(specs).catch(reportError);\n    }\n    this._onResize();\n  }\n\n  // Removes a view section from the current view. Should only be called if there is\n  // more than one viewsection in the view.\n  public removeViewSection(viewSectionRowId: number) {\n    this.maximized.set(null);\n    this.gristDoc.docData.sendAction(['RemoveViewSection', viewSectionRowId]).catch(reportError);\n  }\n\n  public rebuildLayout(layoutSpec: BoxSpec) {\n    // Rebuild the collapsed section layout. In return we will get all leaves that were\n    // removed from collapsed dom. Some of them will hold a view instance dom.\n    const oldTray = this.layoutTray.replaceLayout();\n    // Build the normal layout. While building, some leaves will grab the view instance dom\n    // and attach it to their dom (and detach them from the old layout in the process).\n    this.layout.buildLayout(layoutSpec, true);\n    this._onResize();\n    // Dispose the old layout. This will dispose the view instances that were not reused.\n    oldTray.dispose();\n  }\n\n  private _maximizeActiveSection() {\n    const activeSection = this.viewModel.activeSection();\n    const activeSectionId = activeSection.getRowId();\n    const activeSectionBox = this.layout.getLeafBox(activeSectionId);\n    if (!activeSectionBox) { return; }\n    activeSectionBox.maximize();\n  }\n\n  private _buildLeafContent(sectionRowId: number) {\n    return buildViewSectionDom({\n       gristDoc: this.gristDoc,\n       sectionRowId,\n       isResizing: this.isResizing,\n       viewModel: this.viewModel\n    });\n  }\n\n  /**\n   * If there is no layout saved, we can create a default layout just from the list of fields for\n   * this view section. By default we just arrange them into a list of rows, two fields per row.\n   */\n  private _updateLayoutSpecWithSections(spec: BoxSpec) {\n    // We use tmpLayout as a way to manipulate the layout before we get a final spec from it.\n    const tmpLayout = Layout.create(spec, () => dom('div'), true);\n\n    const specFieldIds = tmpLayout.getAllLeafIds();\n    const viewSectionIds = this.viewModel.viewSections().all().map(function(f) { return f.getRowId(); });\n\n    function addToSpec(leafId: number) {\n      const newBox = tmpLayout.buildLayoutBox({ leaf: leafId });\n      const rows = tmpLayout.rootBox()!.childBoxes.peek();\n      const lastRow = rows[rows.length - 1];\n      if (rows.length >= 1 && lastRow.isLeaf()) {\n        // Add a new child to the last row.\n        lastRow.addChild(newBox, true);\n      } else {\n        // Add a new row.\n        tmpLayout.rootBox()!.addChild(newBox, true);\n      }\n      return newBox;\n    }\n\n    // For any stale fields (no longer among viewFields), remove them from tmpLayout.\n    _.difference(specFieldIds, viewSectionIds).forEach(function(leafId: string|number) {\n      tmpLayout.getLeafBox(leafId)?.dispose();\n    });\n\n    // For all fields that should be in the spec but aren't, add them to tmpLayout. We maintain a\n    // two-column layout, so add a new row, or a second box to the last row if it's a leaf.\n    const missingLeafs = _.difference(viewSectionIds, specFieldIds);\n    const collapsedLeafs = new Set((spec.collapsed || []).map(c => c.leaf));\n    missingLeafs.forEach(function(leafId: any) {\n      if (!collapsedLeafs.has(leafId)) {\n        addToSpec(leafId);\n      }\n    });\n\n    spec = tmpLayout.getLayoutSpec();\n    tmpLayout.dispose();\n    return spec;\n  }\n\n\n\n  // Resizes the scrolly windows of all viewSection classes with a 'scrolly' property.\n  private _onResize() {\n    this.viewModel.viewSections().all().forEach(vs => {\n      const inst = vs.viewInstance.peek();\n      if (inst) {\n        inst.onResize();\n      }\n    });\n  }\n\n  // Select another section in cyclic ordering of sections. Order is counter-clockwise if given a\n  // positive `delta`, clockwise otherwise.\n  private _otherSection(delta: number) {\n    const sectionIds = this.layout.getAllLeafIds();\n    const sectionId = this.viewModel.activeSectionId.peek();\n    const currentIndex = sectionIds.indexOf(sectionId);\n    const index = mod(currentIndex + delta, sectionIds.length);\n    // update the active section id\n    this.viewModel.activeSectionId(sectionIds[index]);\n  }\n\n  private _maybeFocusInSection()  {\n    // If the focused element is inside a view section, make that section active.\n    const layoutBox = this.layout.getContainingBox(document.activeElement);\n    if (layoutBox && layoutBox.leafId) {\n      this.gristDoc.viewModel.activeSectionId(layoutBox.leafId.peek());\n    }\n  }\n\n  /**\n   * Opens the sort and filter menu of the active view section.\n   *\n   * Optionally accepts a `sectionId` for opening a specific section's menu.\n   */\n  private _openSortFilterMenu(sectionId?: number)  {\n    const id = sectionId ?? this.viewModel.activeSectionId();\n    const leafBoxDom = this.layout.getLeafBox(id)?.dom;\n    if (!leafBoxDom) { return; }\n\n    const menu: HTMLElement | null = leafBoxDom.querySelector('.test-section-menu-sortAndFilter');\n    menu?.click();\n  }\n}\n\nconst cssLayoutBox = styled('div', `\n  @media screen and ${mediaSmall} {\n    &-active, &-inactive {\n      transition: flex-grow var(--grist-layout-animation-duration, 0.4s); // Exposed for tests\n    }\n    &-active > &-inactive,\n    &-active > &-inactive.layout_hbox .layout_hbox,\n    &-active > &-inactive.layout_vbox .layout_vbox {\n      flex: none !important;\n    }\n\n    &-active > &-inactive.layout_hbox.layout_leaf,\n    &-active > &-inactive.layout_hbox .layout_hbox.layout_leaf {\n      height: 40px;\n    }\n\n    &-active > &-inactive.layout_vbox.layout_leaf,\n    &-active > &-inactive.layout_vbox .layout_vbox.layout_leaf {\n      width: 40px;\n    }\n\n    &-inactive.layout_leaf {\n      min-height: 40px;\n      min-width: 40px;\n    }\n  }\n`);\n\nconst cssLayoutWrapper = styled('div', `\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  flex-grow: 1;\n  @media not print {\n    &-active {\n      background: ${theme.mainPanelBg};\n      height: 100%;\n      width: 100%;\n      border-radius: 5px;\n      border-bottom-left-radius: 0px;\n      border-bottom-right-radius: 0px;\n      position: relative;\n    }\n    &-active .viewsection_content {\n      margin: 0px;\n      margin-top: 12px;\n    }\n    &-active .viewsection_title {\n      padding: 0px 12px;\n    }\n    &-active .filter_bar {\n      margin-left: 6px;\n    }\n  }\n`);\n\nconst cssOverlay = styled('div', `\n  height: 100%;\n  @media screen {\n    &-active {\n      background-color: ${theme.modalBackdrop};\n      inset: 0px;\n      height: 100%;\n      width: 100%;\n      padding: 20px 56px 20px 56px;\n      position: absolute;\n    }\n    &-active .collapsed_layout {\n      display: none !important;\n    }\n  }\n  @media screen and ${mediaSmall} {\n    &-active {\n      padding: 22px;\n      padding-top: 30px;\n    }\n  }\n`);\n\nconst cssCloseButton = styled(icon, `\n  position: absolute;\n  top: 16px;\n  right: 16px;\n  height: 24px;\n  width: 24px;\n  cursor: pointer;\n  --icon-color: ${theme.modalBackdropCloseButtonFg};\n  &:hover {\n    --icon-color: ${theme.modalBackdropCloseButtonHoverFg};\n  }\n  @media ${mediaSmall} {\n    & {\n      top: 6px;\n      right: 6px;\n    }\n  }\n`);\n\nconst cssVFull = styled('div', `\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n`);\n","import BaseView from 'app/client/components/BaseView';\nimport {GristDoc} from 'app/client/components/GristDoc';\nimport {hooks} from 'app/client/Hooks';\nimport {get as getBrowserGlobals} from 'app/client/lib/browserGlobals';\nimport {makeTestId} from 'app/client/lib/domUtils';\nimport {ColumnRec, ViewSectionRec} from 'app/client/models/DocModel';\nimport {AccessLevel, isSatisfied} from 'app/common/CustomWidget';\nimport {DisposableWithEvents} from 'app/common/DisposableWithEvents';\nimport {BulkColValues, fromTableDataAction, RowRecord} from 'app/common/DocActions';\nimport {extractInfoFromColType, reencodeAsAny} from 'app/common/gristTypes';\nimport {AccessTokenOptions, CursorPos, CustomSectionAPI, GristDocAPI, GristView,\n        InteractionOptionsRequest, WidgetAPI, WidgetColumnMap} from 'app/plugin/grist-plugin-api';\nimport {MsgType, Rpc} from 'grain-rpc';\nimport {Computed, Disposable, dom, Observable} from 'grainjs';\nimport noop = require('lodash/noop');\nimport debounce = require('lodash/debounce');\nimport isEqual = require('lodash/isEqual');\nimport flatMap = require('lodash/flatMap');\n\nconst testId = makeTestId('test-custom-widget-');\n\n\n/**\n * This file contains a WidgetFrame and all its components.\n *\n * WidgetFrame embeds an external Custom Widget (external webpage) in an iframe. It is used on a CustomView,\n * to display widget content, and on the configuration screen to display widget's configuration screen.\n *\n * Beside exposing widget content, it also exposes some of the API's that Grist offers via grist-rpc.\n * API are defined in the core/app/plugin/grist-plugin-api.ts.\n */\n\nconst G = getBrowserGlobals('window');\n\n/**\n * Options for WidgetFrame\n */\nexport interface WidgetFrameOptions {\n  /**\n   * Url of external page. Iframe is rebuild each time the URL changes.\n   */\n  url: string;\n  /**\n   * Assigned access level. Iframe is rebuild each time access level is changed.\n   */\n  access: AccessLevel;\n  /**\n   * If document is in readonly mode.\n   */\n  readonly: boolean;\n  /**\n   * Optional callback to configure exposed API.\n   */\n  configure?: (frame: WidgetFrame) => void;\n  /**\n   * Optional handler to modify the iframe.\n   */\n  onElem?: (iframe: HTMLIFrameElement) => void;\n}\n\n/**\n * Iframe that embeds Custom Widget page and exposes Grist API.\n */\nexport class WidgetFrame extends DisposableWithEvents {\n  // A grist-rpc object, encapsulated to prevent direct access.\n  private _rpc: Rpc;\n  // Created iframe element, used to receive and post messages via Rpc\n  private _iframe: HTMLIFrameElement | null;\n  // If widget called ready() method, this will be set to true.\n  private _readyCalled = Observable.create(this, false);\n\n  constructor(private _options: WidgetFrameOptions) {\n    super();\n    _options.access = _options.access || AccessLevel.none;\n    // Build RPC object and connect it to iframe.\n    this._rpc = new Rpc({});\n\n    // queue until iframe's content emit ready() message\n    this._rpc.queueOutgoingUntilReadyMessage();\n\n    // Register outgoing message handler.\n    this._rpc.setSendMessage(msg => this._iframe?.contentWindow!.postMessage(msg, '*'));\n\n    // Register incoming message handler.\n    const listener = this._onMessage.bind(this);\n    // 'message' is an event's name used by Rpc in window to iframe communication.\n    G.window.addEventListener('message', listener);\n    this.onDispose(() => {\n      // Stop listening for events from the iframe.\n      G.window.removeEventListener('message', listener);\n      // Stop sending messages to the iframe.\n      this._rpc.setSendMessage(noop);\n    });\n\n    // Call custom configuration handler.\n    _options.configure?.(this);\n  }\n  /**\n   * Attach an EventSource with desired access level.\n   */\n  public useEvents(source: IEventSource, access: AccessChecker) {\n    // Wrap event handler with access check.\n    const handler = async (data: any) => {\n      if (access.check(this._options.access)) {\n        await this._rpc.postMessage(data);\n      }\n    };\n    this.listenTo(source, 'event', handler);\n    // Give EventSource a chance to attach to WidgetFrame events.\n    source.attach(this);\n  }\n\n  /**\n   * Exposes API for Custom Widget.\n   * TODO: add ts-interface support. Currently all APIs are written in typescript,\n   * so those checks are not that needed.\n   */\n  public exposeAPI(name: string, api: any, access: AccessChecker) {\n    this._rpc.registerImpl(name, wrapObject(api, access, this._options.access));\n    this.onDispose(() => this._rpc.unregisterImpl(name));\n  }\n\n  /**\n   * Expose a method for Custom Widget.\n   */\n  public exposeMethod(name: string, handler: (...args: any[]) => any, access: AccessChecker) {\n    this._rpc.registerFunc(name, (...args: any[]) => {\n      if (access.check(this._options.access, 'invoke')) {\n        return handler(...args);\n      } else {\n        throwError(this._options.access);\n      }\n    });\n  }\n\n  /**\n   * Make configure call to the widget. Widget should open some configuration screen or ignore it.\n   */\n  public editOptions() {\n    return this.callRemote('editOptions');\n  }\n\n  /**\n   * Call remote function that is exposed by the widget.\n   */\n  public callRemote(name: string, ...args: any[]) {\n    return this._rpc.callRemoteFunc(name, ...args);\n  }\n\n  public buildDom() {\n    // Append access level to query string.\n    const urlWithAccess = (url: string) => {\n      if (!url) {\n        return url;\n      }\n      const urlObj = new URL(url);\n      urlObj.searchParams.append('access', this._options.access);\n      urlObj.searchParams.append('readonly', String(this._options.readonly));\n      return urlObj.href;\n    };\n    const fullUrl = urlWithAccess(this._options.url);\n    const onElem = this._options.onElem ?? ((el: HTMLIFrameElement) => el);\n    return onElem(\n      (this._iframe = dom('iframe',\n        dom.cls('clipboard_focus'),\n        dom.cls('custom_view'), {\n          src: fullUrl,\n          ...hooks.iframeAttributes,\n        },\n        testId('ready', this._readyCalled),\n      ))\n    );\n  }\n\n  private _onMessage(event: MessageEvent) {\n    if (this._iframe && event.source === this._iframe.contentWindow && !this.isDisposed()) {\n      // Previously, we forwarded messages targeted at \"grist\" to the back-end.\n      // Now, we process them immediately in the context of the client for access\n      // control purposes.  To do that, any message that comes in with mdest of\n      // \"grist\" will have that destination wiped, and we provide a local\n      // implementation of the interface.\n      // It feels like it should be possible to deal with the mdest more cleanly,\n      // with a rpc.registerForwarder('grist', { ... }), but it seems somehow hard\n      // to call a locally registered interface of an rpc object?\n      if (event.data.mdest === 'grist') {\n        event.data.mdest = '';\n      }\n      if (event.data.mtype === MsgType.Ready) {\n        this.trigger('ready', this);\n        this._readyCalled.set(true);\n      }\n      this._rpc.receiveMessage(event.data);\n    }\n  }\n}\n\nconst throwError = (access: AccessLevel) => {\n  throw new Error('Access not granted. Current access level ' + access);\n};\n\n/**\n * Wraps an object to check access level before it is called.\n * TODO: grain-rpc exposes callWrapper which could be used for this purpose,\n * but currently it doesn't have access to the incoming message.\n */\nfunction wrapObject<T extends object>(impl: T, accessChecker: AccessChecker, access: AccessLevel): T {\n  return new Proxy(impl, {\n    // This proxies all the calls to methods on the API.\n    get(target: any, methodName: string) {\n      return function () {\n        if (methodName === 'then') {\n          // Making a proxy for then invocation is not a good idea.\n          return undefined;\n        }\n        if (accessChecker.check(access, methodName)) {\n          return target[methodName](...arguments);\n        } else {\n          throwError(access);\n        }\n      };\n    },\n  });\n}\n\n/**\n * Interface for custom access rules.\n */\nexport interface AccessChecker {\n  /**\n   * Checks if the incoming call can be served on current access level.\n   * @param access Current access level\n   * @param method Method called on the interface, can use * or undefined to match all methods.\n   */\n  check(access: AccessLevel, method?: string): boolean;\n}\n\n/**\n * Checks if current access level is enough.\n */\nexport class MinimumLevel implements AccessChecker {\n  constructor(private _minimum: AccessLevel) {}\n  public check(access: AccessLevel): boolean {\n    return isSatisfied(access, this._minimum);\n  }\n}\n\ntype MethodMatcher<T> = keyof T | '*';\n/**\n * Helper object that allows assigning access level to a particular method in the interface.\n *\n * Example:\n *\n * 1. Expose two methods, all other will be denied (even in full access mode)\n * new ApiGranularAccess<GristDocAPI>()\n *  .require(\"read_table\", \"method1\") // for method1 we need at least read_table\n *  .require(\"none\", \"method2\") // for method2 no access level is needed\n *\n * 2. Expose two methods, all other will require full access (effectively the same as ex. 1)\n * new ApiGranularAccess<GristDocAPI>()\n *  .require(\"read_table\", \"method1\") // for method1 we need at least read_table\n *  .require(\"none\", \"method2\") // for method2 no access level is needed\n *  .require(\"full\", \"*\") // for any other, require full\n *\n * 3. Expose all methods on read_table access, but one can have none\n * new ApiGranularAccess<GristDocAPI>()\n *  .require(\"none\", \"method2\") // for method2 we are ok with none access\n *  .require(\"read_table\", \"*\") // for any other, require read_table\n */\nexport class MethodAccess<T> implements AccessChecker {\n  private _accessMap: Map<MethodMatcher<T>, AccessLevel> = new Map();\n  constructor() {}\n  public require(level: AccessLevel, method: MethodMatcher<T> = '*') {\n    this._accessMap.set(method, level);\n    return this;\n  }\n  public check(access: AccessLevel, method?: string): boolean {\n    if (!method) {\n      throw new Error('Method name is required for MethodAccess check');\n    }\n    // Check if the iface was registered.\n    if (this._accessMap.has(method as MethodMatcher<T>)) {\n      // If it was, check that minimum access level is granted.\n      const minimum = this._accessMap.get(method as MethodMatcher<T>)!;\n      return isSatisfied(access, minimum);\n    } else if (this._accessMap.has('*')) {\n      // If there is a default rule, check if it permits the access.\n      const minimum = this._accessMap.get('*')!;\n      return isSatisfied(access, minimum);\n    } else {\n      // By default, don't allow anything on this interface.\n      return false;\n    }\n  }\n}\n\n/***********************\n * Exposed APIs for Custom Widgets.\n *\n * Currently we expose 3 APIs\n * - GristDocAPI - full access to document.\n * - ViewAPI - access to current table.\n * - WidgetAPI - access to widget configuration.\n ***********************/\n\n/**\n * GristDocApi implemented over active GristDoc.\n */\nexport class GristDocAPIImpl implements GristDocAPI {\n  public static readonly defaultAccess = new MethodAccess<GristDocAPI>()\n    .require(AccessLevel.read_table, 'getDocName')\n    .require(AccessLevel.full); // for any other, require full Access.\n\n  constructor(private _doc: GristDoc) {}\n\n  public async getDocName() {\n    return this._doc.docId();\n  }\n\n  public async listTables(): Promise<string[]> {\n    // Could perhaps read tableIds from this.gristDoc.docModel.visibleTableIds.all()?\n    const {tableData} = await this._doc.docComm.fetchTable('_grist_Tables');\n    // Tables the user doesn't have access to are just blanked out.\n    return tableData[3].tableId.filter(tableId => tableId !== '') as string[];\n  }\n\n  public async fetchTable(tableId: string) {\n    return fromTableDataAction(await this._doc.docComm.fetchTable(tableId));\n  }\n\n  public async applyUserActions(actions: any[][], options?: any) {\n    return this._doc.docComm.applyUserActions(actions, {desc: undefined, ...options});\n  }\n\n  // Get a token for out-of-band access to the document.\n  // Currently will require the custom widget to have full access to the\n  // document.\n  // It would be great to support this with read_table rights. This could be\n  // possible to do by adding a tableId setting to AccessTokenOptions,\n  // encoding that limitation in the access token, and ensuring the back-end\n  // respects it. But the current motivating use for adding access tokens is\n  // showing attachments, and they aren't currently something that logically\n  // lives within a specific table.\n  public async getAccessToken(options: AccessTokenOptions) {\n    return this._doc.docComm.getAccessToken({\n      readOnly: options.readOnly,\n    });\n  }\n}\n\n/**\n * GristViewAPI implemented over BaseView.\n */\nexport class GristViewImpl implements GristView {\n  constructor(private _baseView: BaseView) {}\n\n  public async fetchSelectedTable(): Promise<any> {\n    // If widget has a custom columns mapping, we will ignore hidden columns section.\n    // Hidden/Visible columns will eventually reflect what is available, but this operation\n    // is not instant - and widget can receive rows with fields that are not in the mapping.\n    const columns: ColumnRec[] = this._visibleColumns();\n    const rowIds = this._baseView.sortedRows.getKoArray().peek().filter(id => id != 'new');\n    const data: BulkColValues = {};\n    for (const column of columns) {\n      // Use the colId of the displayCol, which may be different in case of Reference columns.\n      const colId: string = column.displayColModel.peek().colId.peek();\n      const getter = this._baseView.tableModel.tableData.getRowPropFunc(colId)!;\n      const typeInfo = extractInfoFromColType(column.type.peek());\n      data[column.colId.peek()] = rowIds.map(r => reencodeAsAny(getter(r)!, typeInfo));\n    }\n    data.id = rowIds;\n    return data;\n  }\n\n  public async fetchSelectedRecord(rowId: number): Promise<any> {\n    // Prepare an object containing the fields available to the view\n    // for the specified row.  A RECORD()-generated rendering would be\n    // more useful. but the data engine needs to know what information\n    // the custom view depends on, so we shouldn't volunteer any untracked\n    // information here.\n    const columns: ColumnRec[] = this._visibleColumns();\n    const data: RowRecord = {id: rowId};\n    for (const column of columns) {\n      const colId: string = column.displayColModel.peek().colId.peek();\n      const typeInfo = extractInfoFromColType(column.type.peek());\n      data[column.colId.peek()] = reencodeAsAny(\n        this._baseView.tableModel.tableData.getValue(rowId, colId)!,\n        typeInfo\n      );\n    }\n    return data;\n  }\n\n  /**\n   * This is deprecated method to turn on cursor linking. Previously it was used\n   * to create a custom row id filter. Now widgets can be treated as normal source of linking.\n   * Now allowSelectBy should be set using the ready event.\n   */\n  public async allowSelectBy(): Promise<void> {\n    this._baseView.viewSection.allowSelectBy(true);\n    // This is to preserve a legacy behavior, where when allowSelectBy is called widget expected\n    // that the filter was already applied to clear all rows.\n    this._baseView.viewSection.selectedRows([]);\n  }\n\n  public async setSelectedRows(rowIds: number[]|null): Promise<void> {\n    this._baseView.viewSection.selectedRows(rowIds);\n  }\n\n  public setCursorPos(cursorPos: CursorPos): Promise<void> {\n    this._baseView.setCursorPos(cursorPos);\n    return Promise.resolve();\n  }\n\n  private _visibleColumns() {\n    const columns: ColumnRec[] = this._baseView.viewSection.columns.peek();\n    const hiddenCols = this._baseView.viewSection.hiddenColumns.peek().map(c => c.id.peek());\n    const mappings = this._baseView.viewSection.mappedColumns.peek();\n    const mappedColumns = new Set(flatMap(Object.values(mappings || {})));\n    const notHidden = (col: ColumnRec) => !hiddenCols.includes(col.id.peek());\n    const mapped = (col: ColumnRec) => mappings && mappedColumns.has(col.colId.peek());\n    // If columns are mapped, return only those that are mapped.\n    // Otherwise return all not hidden columns;\n    return mappings ? columns.filter(mapped) : columns.filter(notHidden);\n  }\n}\n\n/**\n * WidgetAPI implemented over active section.\n */\nexport class WidgetAPIImpl implements WidgetAPI {\n  constructor(private _section: ViewSectionRec) {}\n\n  /**\n   * Stores options in viewSection.customDef.widgetDef json field.\n   * This way whenever widget is changed, options are removed and not shared\n   * between widgets by design.\n   */\n  public async setOptions(options: object): Promise<void> {\n    if (options === null || options === undefined || typeof options !== 'object') {\n      throw new Error('options must be a valid JSON object');\n    }\n    this._section.activeCustomOptions(options);\n  }\n\n  public async getOptions(): Promise<Record<string, unknown> | null> {\n    return this._section.activeCustomOptions.peek() ?? null;\n  }\n\n  public async clearOptions(): Promise<void> {\n    this._section.activeCustomOptions(null);\n  }\n\n  public async setOption(key: string, value: any): Promise<void> {\n    const options = {...this._section.activeCustomOptions.peek()};\n    options[key] = value;\n    this._section.activeCustomOptions(options);\n  }\n\n  public getOption(key: string): Promise<unknown> {\n    const options = this._section.activeCustomOptions.peek();\n    return options?.[key];\n  }\n}\n\n/************************\n * Events that are sent to the CustomWidget.\n *\n * Currently:\n * - onRecord, implemented by RecordNotifier, sends a message each time active row is changed.\n * - onRecords, implemented by TableNotifier, sends a message each time table is changed\n * - onOptions, implemented by ConfigNotifier, sends a message each time configuration is changed\n *\n * All of those events are also sent when CustomWidget sends its ready message.\n ************************/\n\n/**\n * EventSource should trigger event called \"event\" that will be send to the Custom Widget.\n */\nexport interface IEventSource extends DisposableWithEvents {\n  /**\n   * Called by WidgetFrame, allowing EventSource to attach to its ready event.\n   */\n  attach(frame: WidgetFrame): void;\n}\n\nexport class BaseEventSource extends DisposableWithEvents implements IEventSource {\n  // Attaches to WidgetFrame ready event.\n  public attach(frame: WidgetFrame): void {\n    this.listenTo(frame, 'ready', this._ready.bind(this));\n  }\n  protected _ready() {\n    // To override if needed to react on the ready event.\n  }\n  protected _notify(data: any) {\n    if (this.isDisposed()) {\n      return;\n    }\n    this.trigger('event', data);\n  }\n}\n\n/**\n * Notifies about cursor position change. Exposed in the API as a onRecord handler.\n */\nexport class RecordNotifier extends BaseEventSource {\n  private _debounced: () => void; // debounced call to let the view know linked cursor changed.\n  constructor(private _baseView: BaseView) {\n    super();\n    this._debounced = debounce(() => this._update(), 0);\n    this.autoDispose(_baseView.cursor.rowIndex.subscribe(this._debounced));\n  }\n\n  private _update() {\n    if (this.isDisposed()) {\n      return;\n    }\n    const state = {\n      tableId: this._baseView.viewSection.table().tableId(),\n      rowId: this._baseView.cursor.getCursorPos().rowId || undefined,\n      dataChange: false,\n    };\n    this._notify(state);\n  }\n}\n\n/**\n * Notifies about options change. Exposed in the API as a onOptions handler.\n */\nexport class ConfigNotifier extends BaseEventSource {\n  private _currentConfig: Computed<any | null>;\n  private _debounced: () => void; // debounced call to let the view know linked cursor changed.\n  constructor(private _section: ViewSectionRec, private _accessLevel: AccessLevel) {\n    super();\n    this._currentConfig = Computed.create(this, use => {\n      const options = use(this._section.activeCustomOptions);\n      return options;\n    });\n    this._debounced = debounce(() => this._update(), 0);\n    const subscribe = (obs: Observable<any>) => {\n      this.autoDispose(\n        obs.addListener((cur, prev) => {\n          if (isEqual(prev, cur)) {\n            return;\n          }\n          this._debounced();\n        })\n      );\n    };\n    subscribe(this._currentConfig);\n  }\n\n  protected _ready() {\n    // On ready, send initial configuration.\n    this._debounced();\n  }\n\n  private _update() {\n    if (this.isDisposed()) {\n      return;\n    }\n    this._notify({\n      options: this._currentConfig.get(),\n      settings: {\n        accessLevel: this._accessLevel,\n      },\n    });\n  }\n}\n\n/**\n * Notifies about cursor table data or structure change.\n * Exposed in the API as a onRecords handler.\n * This Notifier sends an initial event when subscribed\n */\nexport class TableNotifier extends BaseEventSource {\n  private _debounced: () => void;\n  private _updateMapping = true;\n  constructor(private _baseView: BaseView) {\n    super();\n    this._debounced = debounce(() => this._update(), 0);\n    this.autoDispose(_baseView.viewSection.viewFields().subscribe(this._debounced.bind(this)));\n    this.listenTo(_baseView.sortedRows, 'rowNotify', this._debounced.bind(this));\n    this.autoDispose(_baseView.sortedRows.getKoArray().subscribe(this._debounced.bind(this)));\n    this.autoDispose(_baseView.viewSection.mappedColumns\n      .subscribe(() => {\n        this._updateMapping = true;\n        this._debounced();\n      })\n    );\n  }\n\n  protected _ready() {\n    // On ready, send initial table information.\n    this._debounced();\n  }\n\n  private _update() {\n    if (this.isDisposed()) {\n      return;\n    }\n    const state = {\n      tableId: this._baseView.viewSection.table().tableId(),\n      rowId: this._baseView.cursor.getCursorPos().rowId || undefined,\n      dataChange: true,\n      mappingsChange: this._updateMapping\n    };\n    this._updateMapping = false;\n    this._notify(state);\n  }\n}\n\nexport class CustomSectionAPIImpl extends Disposable implements CustomSectionAPI {\n  constructor(\n    private _section: ViewSectionRec,\n    private _currentAccess: AccessLevel,\n    private _promptCallback: (access: AccessLevel) => void\n  ) {\n    super();\n  }\n\n  public async mappings(): Promise<WidgetColumnMap|null> {\n    return this._section.mappedColumns.peek();\n  }\n\n  /**\n   * Method called as part of ready message. Allows widget to request for particular features or inform about\n   * capabilities.\n   */\n  public async configure(settings: InteractionOptionsRequest): Promise<void> {\n    if (settings.hasCustomOptions !== undefined) {\n      this._section.hasCustomOptions(settings.hasCustomOptions);\n    }\n    if (settings.requiredAccess && settings.requiredAccess !== this._currentAccess) {\n      this._promptCallback(settings.requiredAccess as AccessLevel);\n    }\n    if (settings.columns !== undefined) {\n      this._section.columnsToMap(settings.columns);\n    } else {\n      this._section.columnsToMap(null);\n    }\n    if (settings.allowSelectBy !== undefined) {\n      this._section.allowSelectBy(settings.allowSelectBy);\n    }\n  }\n}\n","import BaseView from 'app/client/components/BaseView';\nimport {GristDoc} from 'app/client/components/GristDoc';\nimport {makeT} from 'app/client/lib/localization';\nimport {ViewRec, ViewSectionRec} from 'app/client/models/DocModel';\nimport {filterBar} from 'app/client/ui/FilterBar';\nimport {cssIcon} from 'app/client/ui/RightPanelStyles';\nimport {makeCollapsedLayoutMenu} from 'app/client/ui/ViewLayoutMenu';\nimport {cssDotsIconWrapper, cssMenu, viewSectionMenu} from 'app/client/ui/ViewSectionMenu';\nimport {buildWidgetTitle} from 'app/client/ui/WidgetTitle';\nimport {colors, isNarrowScreenObs, mediaSmall, testId, theme} from 'app/client/ui2018/cssVars';\nimport {icon} from 'app/client/ui2018/icons';\nimport {menu} from 'app/client/ui2018/menus';\nimport {getWidgetTypes} from \"app/client/ui/widgetTypesMap\";\nimport {Computed, dom, DomElementArg, Observable, styled} from 'grainjs';\nimport {defaultMenuOptions} from 'popweasel';\n\nconst t = makeT('ViewSection');\n\nexport function buildCollapsedSectionDom(options: {\n  gristDoc: GristDoc,\n  sectionRowId: number|string,\n}, ...domArgs: DomElementArg[]) {\n  const {gristDoc, sectionRowId} = options;\n  if (typeof sectionRowId === 'string') {\n    return cssMiniSection(\n      dom('span.viewsection_title_font',\n        'Empty'\n      )\n    );\n  }\n  const vs: ViewSectionRec = gristDoc.docModel.viewSections.getRowModel(sectionRowId);\n  const typeComputed = Computed.create(null, use => getWidgetTypes(use(vs.parentKey) as any).icon);\n  return cssMiniSection(\n    testId(`collapsed-section-${sectionRowId}`),\n    testId(`collapsed-section`),\n    cssDragHandle(\n      dom.domComputed(typeComputed, (type) => icon(type)),\n      dom('div', {style: 'margin-right: 16px;'}),\n      dom.maybe((use) => use(use(vs.table).summarySourceTable), () => cssSigmaIcon('Pivot', testId('sigma'))),\n      dom('span.viewsection_title_font', testId('collapsed-section-title'),\n        dom.text(vs.titleDef),\n      ),\n    ),\n    cssMenu(\n      testId('section-menu-viewLayout'),\n      cssDotsIconWrapper(cssIcon('Dots')),\n      menu(_ctl => makeCollapsedLayoutMenu(vs, gristDoc), {\n        ...defaultMenuOptions,\n        placement: 'bottom-end',\n      })\n    ),\n    ...domArgs\n  );\n}\n\n\nexport function buildViewSectionDom(options: {\n  gristDoc: GristDoc,\n  sectionRowId: number,\n  isResizing?: Observable<boolean>\n  viewModel?: ViewRec,\n  // Should show drag anchor.\n  draggable?: boolean, /* defaults to true */\n  // Should show green bar on the left (but preserves active-section class).\n  focusable?: boolean, /* defaults to true */\n  tableNameHidden?: boolean,\n  widgetNameHidden?: boolean,\n}) {\n  const isResizing = options.isResizing ?? Observable.create(null, false);\n  const {gristDoc, sectionRowId, viewModel, draggable = true, focusable = true} = options;\n\n  // Creating normal section dom\n  const vs: ViewSectionRec = gristDoc.docModel.viewSections.getRowModel(sectionRowId);\n  const selectedBySectionTitle = Computed.create(null, (use) => {\n    if (!use(vs.linkSrcSectionRef)) { return null; }\n    return use(use(vs.linkSrcSection).titleDef);\n  });\n  return dom('div.view_leaf.viewsection_content.flexvbox.flexauto',\n    testId(`viewlayout-section-${sectionRowId}`),\n    dom.autoDispose(selectedBySectionTitle),\n    !options.isResizing ? dom.autoDispose(isResizing) : null,\n    cssViewLeaf.cls(''),\n    cssViewLeafInactive.cls('', (use) => !vs.isDisposed() && !use(vs.hasFocus)),\n    dom.cls('active_section', vs.hasFocus),\n    dom.cls('active_section--no-indicator', !focusable),\n    dom.maybe<BaseView|null>((use) => use(vs.viewInstance), (viewInstance) => dom('div.viewsection_title.flexhbox',\n      cssDragIcon('DragDrop',\n        dom.cls(\"viewsection_drag_indicator\"),\n        // Makes element grabbable only if grist is not readonly.\n        dom.cls('layout_grabbable', (use) => !use(gristDoc.isReadonlyKo)),\n        !draggable ? dom.style(\"visibility\", \"hidden\") : null\n      ),\n      dom.maybe((use) => use(use(viewInstance.viewSection.table).summarySourceTable), () =>\n        cssSigmaIcon('Pivot', testId('sigma'))),\n      buildWidgetTitle(vs, options, testId('viewsection-title'), cssTestClick(testId(\"viewsection-blank\"))),\n      viewInstance.buildTitleControls(),\n      dom('div.viewsection_buttons',\n        dom.create(viewSectionMenu, gristDoc, vs)\n      )\n     )),\n    dom.create(filterBar, gristDoc, vs),\n    dom.maybe<BaseView|null>(vs.viewInstance, (viewInstance) => [\n      dom('div.view_data_pane_container.flexvbox',\n        cssResizing.cls('', isResizing),\n        dom.maybe(viewInstance.disableEditing, () =>\n          dom('div.disable_viewpane.flexvbox',\n            dom.domComputed(selectedBySectionTitle, (title) => title\n              ? t(`No row selected in {{title}}`, {title})\n              : t('No data')),\n          )\n        ),\n        dom.maybe(viewInstance.isTruncated, () =>\n          dom('div.viewsection_truncated', t('Not all data is shown'))\n        ),\n        dom.cls((use) => 'viewsection_type_' + use(vs.parentKey)),\n        viewInstance.viewPane\n      ),\n      dom.maybe(use => !use(isNarrowScreenObs()), () => viewInstance.selectionSummary?.buildDom()),\n    ]),\n    dom.on('mousedown', () => { viewModel?.activeSectionId(sectionRowId); }),\n  );\n}\n\n// With new widgetPopup it is hard to click on viewSection without a activating it, hence we\n// add a little blank space to use in test.\nconst cssTestClick = styled(`div`, `\n  min-width: 2px;\n`);\n\nconst cssSigmaIcon = styled(icon, `\n  bottom: 1px;\n  margin-right: 5px;\n  background-color: ${theme.lightText}\n`);\n\nconst cssViewLeaf = styled('div', `\n  @media ${mediaSmall} {\n    & {\n      margin: 4px;\n    }\n  }\n`);\n\nconst cssViewLeafInactive = styled('div', `\n  @media screen and ${mediaSmall} {\n    & {\n      overflow: hidden;\n      background: repeating-linear-gradient(\n        -45deg,\n        ${theme.widgetInactiveStripesDark},\n        ${theme.widgetInactiveStripesDark} 10px,\n        ${theme.widgetInactiveStripesLight} 10px,\n        ${theme.widgetInactiveStripesLight} 20px\n      );\n      border: 1px solid ${theme.widgetBorder};\n      border-radius: 4px;\n      padding: 0 2px;\n    }\n    &::after {\n      content: '';\n      position: absolute;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n    }\n    &.layout_vbox {\n      max-width: 32px;\n    }\n    &.layout_hbox {\n      max-height: 32px;\n    }\n    & > .viewsection_title.flexhbox {\n      position: absolute;\n    }\n    & > .view_data_pane_container,\n    & .viewsection_buttons,\n    & .grist-single-record__menu,\n    & > .filter_bar {\n      display: none;\n    }\n  }\n`);\n\n\n// z-index ensure it's above the resizer line, since it's hard to grab otherwise\nconst cssDragIcon = styled(icon, `\n  visibility: hidden;\n  --icon-color: ${colors.slate};\n  top: -1px;\n  z-index: 100;\n\n  .viewsection_title:hover &.layout_grabbable {\n    visibility: visible;\n  }\n`);\n\n// This class is added while sections are being resized (or otherwise edited), to ensure that the\n// content of the section (such as an iframe) doesn't interfere with mouse drag-related events.\n// (It assumes that contained elements do not set pointer-events to another value; if that were\n// important then we'd need to use an overlay element during dragging.)\nconst cssResizing = styled('div', `\n  pointer-events: none;\n`);\n\nconst cssMiniSection = styled('div.mini_section_container', `\n  --icon-color: ${colors.lightGreen};\n  display: flex;\n  align-items: center;\n  padding-right: 8px;\n`);\n\nconst cssDragHandle = styled('div.draggable-handle', `\n  display: flex;\n  padding: 8px;\n  flex: 1;\n  padding-right: 16px;\n`);\n","\nimport {ClientScope} from 'app/client/components/ClientScope';\nimport {SafeBrowser} from 'app/client/lib/SafeBrowser';\nimport {ActiveDocAPI} from 'app/common/ActiveDocAPI';\nimport {LocalPlugin} from 'app/common/plugin';\nimport {createRpcLogger, PluginInstance} from 'app/common/PluginInstance';\nimport {Rpc} from 'grain-rpc';\n\n/**\n * DocPluginManager's Client side implementation.\n */\nexport class DocPluginManager {\n\n  public pluginsList: PluginInstance[];\n\n  constructor(localPlugins: LocalPlugin[], private _untrustedContentOrigin: string, private _docComm: ActiveDocAPI,\n              private _clientScope: ClientScope) {\n    this.pluginsList = [];\n    for (const plugin of localPlugins) {\n      try {\n        const pluginInstance = new PluginInstance(plugin, createRpcLogger(console, `PLUGIN ${plugin.id}:`));\n        const components = plugin.manifest.components || {};\n        const safeBrowser = pluginInstance.safeBrowser = new SafeBrowser(pluginInstance,\n          this._clientScope, this._untrustedContentOrigin, components.safeBrowser);\n        if (components.safeBrowser) {\n          pluginInstance.rpc.registerForwarder(components.safeBrowser, safeBrowser);\n        }\n\n        // Forward calls to the server, if no matching forwarder.\n        pluginInstance.rpc.registerForwarder('*', {\n          forwardCall: (call) => this._docComm.forwardPluginRpc(plugin.id, call),\n          forwardMessage: (msg) => this._docComm.forwardPluginRpc(plugin.id, msg),\n        });\n        this.pluginsList.push(pluginInstance);\n      } catch (err) {\n        console.error( // tslint:disable-line:no-console\n          `DocPluginManager: failed to instantiate ${plugin.id}: ${err.message}`);\n      }\n    }\n  }\n\n  /**\n   * `receiveAction` handles an action received from the server by forwarding it to all safe browser component.\n   */\n  public receiveAction(action: any[]) {\n    for (const plugin of this.pluginsList) {\n      const safeBrowser = plugin.safeBrowser as SafeBrowser;\n      if (safeBrowser) {\n        safeBrowser.receiveAction(action);\n      }\n    }\n  }\n\n  /**\n   * Make an Rpc object to call server methods from a url-flavored custom view.\n   */\n  public makeAnonForwarder() {\n    const rpc = new Rpc({});\n    rpc.queueOutgoingUntilReadyMessage();\n    rpc.registerForwarder('*', {\n      forwardCall: (call) => this._docComm.forwardPluginRpc(\"builtIn/core\", call),\n      forwardMessage: (msg) => this._docComm.forwardPluginRpc(\"builtIn/core\", msg),\n    });\n    return rpc;\n  }\n}\n","import {ClientScope} from 'app/client/components/ClientScope';\nimport {SafeBrowser} from 'app/client/lib/SafeBrowser';\nimport {LocalPlugin} from 'app/common/plugin';\nimport {createRpcLogger, PluginInstance} from 'app/common/PluginInstance';\n\n/**\n * Home plugins are all plugins that contributes to a general Grist management tasks.\n * They operate on Grist as a whole, without current document context.\n * TODO: currently it is used primary for importing documents on home screen and supports\n * only safeBrowser components without any access to Grist.\n */\nexport class HomePluginManager {\n\n  public pluginsList: PluginInstance[];\n\n  constructor(localPlugins: LocalPlugin[],\n              _untrustedContentOrigin: string,\n              _clientScope: ClientScope) {\n    this.pluginsList = [];\n    for (const plugin of localPlugins) {\n      try {\n        const components = plugin.manifest.components || {};\n        // Home plugins supports only safeBrowser components\n        if (components.safePython || components.unsafeNode) {\n          continue;\n        }\n        // and currently implements only safe imports\n        const importSources = plugin.manifest.contributions.importSources;\n        if (!importSources?.some(i => i.safeHome)) {\n          continue;\n        }\n        const pluginInstance = new PluginInstance(plugin, createRpcLogger(console, `HOME PLUGIN ${plugin.id}:`));\n        const safeBrowser = pluginInstance.safeBrowser = new SafeBrowser(pluginInstance,\n          _clientScope, _untrustedContentOrigin, components.safeBrowser);\n        if (components.safeBrowser) {\n          pluginInstance.rpc.registerForwarder(components.safeBrowser, safeBrowser);\n        }\n        const forwarder = new NotAvailableForwarder();\n        // Block any calls to internal apis.\n        pluginInstance.rpc.registerForwarder('*', {\n          forwardCall: (call) => forwarder.forwardPluginRpc(plugin.id, call),\n          forwardMessage: (msg) => forwarder.forwardPluginRpc(plugin.id, msg),\n        });\n        this.pluginsList.push(pluginInstance);\n      } catch (err) {\n        console.error( // tslint:disable-line:no-console\n          `HomePluginManager: failed to instantiate ${plugin.id}: ${err.message}`);\n      }\n    }\n  }\n}\n\nclass NotAvailableForwarder {\n  public async forwardPluginRpc(pluginId: string, msg: any) {\n    throw new Error(\"This api is not available\");\n  }\n}\n","import {PluginInstance} from 'app/common/PluginInstance';\nimport {InternalImportSourceAPI} from 'app/plugin/InternalImportSourceAPI';\nimport {ImportSource} from 'app/plugin/PluginManifest';\nimport {checkers} from 'app/plugin/TypeCheckers';\n\n/**\n * Encapsulate together an import source contribution with its plugin instance and a callable stub\n * for the ImportSourceAPI. Exposes as well a `fromArray` static method to get all the import\n * sources from an array of plugins instances.\n */\nexport class ImportSourceElement {\n\n  /**\n   * Get all import sources from an array of plugin instances.\n   */\n  public static fromArray(pluginInstances: PluginInstance[]): ImportSourceElement[] {\n    const importSources: ImportSourceElement[] = [];\n    for (const plugin of pluginInstances) {\n      const definitions = plugin.definition.manifest.contributions.importSources;\n      if (definitions) {\n        for (const importSource of definitions) {\n          importSources.push(new ImportSourceElement(plugin, importSource));\n        }\n      }\n    }\n    return importSources;\n  }\n\n  public importSourceStub: InternalImportSourceAPI;\n\n  private constructor(public plugin: PluginInstance, public importSource: ImportSource) {\n    this.importSourceStub = plugin.getStub<InternalImportSourceAPI>(importSource.importSource,\n      checkers.InternalImportSourceAPI);\n  }\n}\n","import { DisposableWithEvents } from 'app/common/DisposableWithEvents';\nimport { Disposable, IDisposable, IDisposableOwner, Observable } from 'grainjs';\n\n/**\n * A simple abstraction for events composition. It is an object that can emit a single value of type T,\n * and holds the last value emitted. It can be used to compose events from other events.\n *\n * Simple observables can't be used for this purpose because they are not reentrant. We can't update\n * an observable from within a listener, because it won't trigger a new event.\n *\n * This class is basically a wrapper around Observable, that emits events when the value changes after it is\n * set.\n *\n * Example:\n *  const signal = Signal.create(null, 0);\n *  signal.listen(value => console.log(value));\n *  const onlyEven = signal.filter(value => value % 2 === 0);\n *  onlyEven.listen(value => console.log('even', value));\n *\n *  const flag1 = Signal.create(null, false);\n *  const flag2 = Signal.create(null, false);\n *  const flagAnd = Signal.compute(null, on => on(flag1) && on(flag2));\n *  // This will still emit multiple times with the same value repeated.\n *  flagAnd.listen(value => console.log('Both are true', value));\n *\n *  // This will emit only when both are true, and will ignore further changes while both are true.\n *  const toggle = flagAnd.distinct();\n *\n *  // Current value can be accessed via signal.state.get()\n *  const emitter = Signal.from(null, 0);\n *  // Emit values only when the toggle is true.\n *  const emitterWhileAnd = emitter.filter(() => toggle.state.get());\n *  // Equivalent to:\n *  const emitterWhileAnd = Signal.compute(null, on => on(toggle) ? on(emitter) : null).distinct();\n */\nexport class Signal<T = any> implements IDisposable, IDisposableOwner {\n  /**\n   * Creates a new event with a default value. A convenience method for creating an event that supports\n   * generic attribute.\n   */\n  public static create<T>(owner: IDisposableOwner | null, value: T) {\n    return new Signal(owner, value);\n  }\n\n  /**\n   * Creates an event from a set of events. Holds last value emitted by any of the events.\n   */\n  public static fromEvents<T = any>(\n    owner: Disposable | null,\n    emitter: any,\n    first: string,\n    ...rest: string[]\n  ) {\n    const signal = Signal.create(owner, null);\n    for(const event of [first, ...rest]) {\n      signal._emitter.listenTo(emitter, event, (value: any) => signal.emit(value));\n    }\n    return signal as Signal<T | null>;\n  }\n\n  /**\n   * Helper methods that creates a signal that emits the result of a function that takes a function\n   */\n  public static compute<T>(owner: Disposable | null, compute: ComputeFunction<T>) {\n    const signal = Signal.create(owner, null as any);\n    const on: any = (s: Signal) => {\n      if (!signal._listeners.has(s)) {\n        signal._listeners.add(s);\n        signal._emitter.listenTo(s._emitter, 'signal', () => signal.emit(compute(on)));\n      }\n      return s.state.get();\n    };\n    signal.state.set(compute(on));\n    return signal as Signal<T>;\n  }\n\n  /**\n   * Last value emitted if any.\n   */\n  public state: Observable<T>;\n\n  /**\n   * List of signals that we are listening to. Stored in a WeakSet to avoid memory leaks.\n   */\n  private _listeners: WeakSet<Signal> = new WeakSet();\n\n  /**\n   * Flag that can be changed by stateless() function. It won't hold last value (but can't be used in compute function).\n   */\n  private _emitter: DisposableWithEvents;\n\n  private _beforeHandler: CustomEmitter<T>;\n\n  constructor(owner: IDisposableOwner|null, initialValue: T) {\n    this._emitter = DisposableWithEvents.create(owner);\n    this.state = Observable.create(this, initialValue);\n  }\n\n  public dispose() {\n    this._emitter.dispose();\n  }\n\n  public autoDispose(disposable: IDisposable) {\n    this._emitter.autoDispose(disposable);\n  }\n\n  /**\n   * Push all events from this signal to another signal.\n   */\n  public pipe(signal: Signal<T>) {\n    this.autoDispose(this.listen(value => signal.emit(value)));\n    return this;\n  }\n\n  /**\n   * Modify all values emitted by this signal.\n   */\n  public map<Z>(selector: (value: T) => Z): Signal<Z> {\n    const signal = Signal.create(this, selector(this.state.get()));\n    this.listen(value => {\n      signal.emit(selector(value));\n    });\n    return signal;\n  }\n\n  /**\n   * Creates a new signal with the same state, but it will only\n   * emit those values that pass the test implemented by the provided function.\n   */\n  public filter(selector: (value: T) => boolean): Signal<T> {\n    const signal = Signal.create(this, this.state.get());\n    this.listen(value => {\n      if (selector(value)) {\n        signal.emit(value);\n      }\n    });\n    return signal;\n  }\n\n  /**\n   * Emit only the value that is different from the previous one.\n   */\n  public distinct(): Signal<T> {\n    let last = this.state.get();\n    const signal = this.filter((value: any) => {\n      if (value !== last) {\n        last = value;\n        return true;\n      }\n      return false;\n    });\n    signal.state.set(last);\n    return signal;\n  }\n\n  /**\n   * Emits true or false only when the value is changed from truthy to falsy or vice versa.\n   */\n  public flag() {\n    return this.map(Boolean).distinct();\n  }\n\n  /**\n   * Listen to changes of the signal.\n   */\n  public listen(handler: (value: T) => any) {\n    const stateHandler = () => {\n      handler(this.state.get());\n    };\n    this._emitter.on('signal', stateHandler);\n    return {\n      dispose: () => this._emitter.off('signal', stateHandler),\n    };\n  }\n\n  public emit(value: T) {\n    if (this._beforeHandler) {\n      this._beforeHandler(value, (emitted: T) => {\n        this.state.set(emitted);\n        this._emitter.trigger('signal', emitted);\n      });\n    } else {\n      this.state.set(value);\n      this._emitter.trigger('signal', value);\n    }\n  }\n\n  public before(handler: CustomEmitter<T>) {\n    this._beforeHandler = handler;\n  }\n}\n\ntype ComputeFunction<T> = (on: <TS>(s: Signal<TS>) => TS) => T;\ntype CustomEmitter<T> = (value: T, emit: (value: T) => void) => any;\n","import {dom, EventCB} from 'grainjs';\n\nconst DOUBLE_TAP_INTERVAL_MS = 500;\n\n/**\n * Helper to handle 'dblclick' events on either browser or mobile.\n *\n * This is equivalent to a 'dblclick' handler when touch events are not supported. When they are,\n * the callback will be called on second touch within a short time of a first one. (In that case,\n * preventDefault() prevents a 'dblclick' event from being emulated.)\n *\n * Background: though mobile browsers we care about already generate 'click' and 'dblclick' events\n * in response to touch events, it doesn't seem to be treated as a direct user interaction. E.g.\n * double-click to edit a cell should focus the editor and open the mobile keyboard, but a\n * JS-issued focus() call only works when triggered by a direct user interaction, and synthesized\n * dblclick doesn't seem to do that.\n *\n * Helpful links on emulated (synthesized) events:\n * - https://developer.mozilla.org/en-US/docs/Web/API/Touch_events/Supporting_both_TouchEvent_and_MouseEvent\n * - https://github.com/w3c/pointerevents/issues/171\n */\nexport function onDblClickMatchElem(elem: EventTarget, selector: string, callback: EventCB): void {\n  // According to https://developer.mozilla.org/en-US/docs/Web/CSS/touch-action, this \"removes the\n  // need for browsers to delay the generation of click events when the user taps the screen\".\n  // Without it, the delay (e.g. on mobile Chrome) prevents cursor from moving on double-tap.\n  dom.styleElem(elem as HTMLElement, 'touch-action', 'manipulation');\n  dom.onMatchElem(elem, selector, 'dblclick', (ev, _elem) => {\n    callback(ev, _elem);\n  });\n\n  let lastTapTime = 0;\n  let lastTapElem: EventTarget|null = null;\n  dom.onMatchElem(elem, selector, 'touchend', (ev, _elem) => {\n    const currentTime = Date.now();\n    const tapLength = currentTime - lastTapTime;\n    const sameElem = (_elem === lastTapElem);\n    lastTapTime = currentTime;\n    lastTapElem = _elem;\n    // Only consider a gesture a double-tap if it's on the same cell. Otherwise, two-finger\n    // gestures, such as zooming, may trigger this too.\n    if (sameElem && tapLength < DOUBLE_TAP_INTERVAL_MS && tapLength > 0) {\n      ev.preventDefault();\n      callback(ev, _elem);\n    }\n  });\n}\n","import {BindableValue, dom} from 'grainjs';\n\n/**\n * Version of makeTestId that can be appended conditionally.\n * TODO: update grainjs typings, as this is already supported there.\n */\nexport function makeTestId(prefix: string) {\n  return (id: string, obs?: BindableValue<boolean>) => dom.cls(prefix + id, obs ?? true);\n}\n","import {loadMomentTimezone} from 'app/client/lib/imports';\n\n/**\n * Returns the browser timezone, using moment.tz.guess(), allowing overriding it via a \"timezone\"\n * URL parameter, for the sake of tests.\n */\nexport async function guessTimezone() {\n  const moment = await loadMomentTimezone();\n  const searchParams = new URLSearchParams(window.location.search);\n  return searchParams.get('timezone') || moment.tz.guess();\n}\n","/**\n * Implements a cache of ACIndex objects for columns in Grist table.\n *\n * The getColACIndex() function returns the corresponding ACIndex, building it if needed and\n * caching for subsequent calls. Any change to the column or a value in it invalidates the cache.\n *\n * It is available as tableData.columnACIndexes.\n *\n * It is currently used for auto-complete in the ReferenceEditor and ReferenceListEditor widgets.\n */\nimport {ACIndex, ACIndexImpl, normalizeText} from 'app/client/lib/ACIndex';\nimport {ColumnCache} from 'app/client/models/ColumnCache';\nimport {UserError} from 'app/client/models/errors';\nimport {TableData} from 'app/client/models/TableData';\nimport {localeCompare, nativeCompare} from 'app/common/gutil';\nimport {BaseFormatter} from 'app/common/ValueFormatter';\n\nexport interface ICellItem {\n  rowId: number|'new';\n  text: string;           // Formatted cell text.\n  cleanText: string;      // Trimmed lowercase text for searching.\n}\n\n\nexport class ColumnACIndexes {\n  private _columnCache = new ColumnCache<ACIndex<ICellItem>>(this._tableData);\n\n  constructor(private _tableData: TableData) {}\n\n  /**\n   * Returns the column index for the given column, using a cached one if available.\n   * The formatter should be created using field.visibleColFormatter(). It's assumed that\n   * getColACIndex() is called for the same column with the the same formatter.\n   */\n  public getColACIndex(colId: string, formatter: BaseFormatter): ACIndex<ICellItem> {\n    return this._columnCache.getValue(colId, () => this._buildColACIndex(colId, formatter));\n  }\n\n  private _buildColACIndex(colId: string, formatter: BaseFormatter): ACIndex<ICellItem> {\n    const rowIds = this._tableData.getRowIds();\n    const valColumn = this._tableData.getColValues(colId);\n    if (!valColumn) {\n      throw new UserError(`Invalid column ${this._tableData.tableId}.${colId}`);\n    }\n    const items: ICellItem[] = valColumn.map((val, i) => {\n      const rowId = rowIds[i];\n      const text = formatter.formatAny(val);\n      const cleanText = normalizeText(text);\n      return {rowId, text, cleanText};\n    });\n    items.sort(itemCompare);\n    return new ACIndexImpl(items);\n  }\n}\n\nfunction itemCompare(a: ICellItem, b: ICellItem) {\n  return localeCompare(a.cleanText, b.cleanText) ||\n    localeCompare(a.text, b.text) ||\n    nativeCompare(a.rowId, b.rowId);\n}\n","/**\n * Implements a cache of values computed from the data in a Grist column.\n */\nimport {TableData} from 'app/client/models/TableData';\nimport {DocAction} from 'app/common/DocActions';\nimport {isBulkUpdateRecord, isUpdateRecord} from 'app/common/DocActions';\nimport {getSetMapValue} from 'app/common/gutil';\n\nexport class ColumnCache<T> {\n  private _cachedColIndexes = new Map<string, T>();\n\n  constructor(private _tableData: TableData) {\n    // Whenever a table action is applied, consider invalidating per-column caches.\n    this._tableData.tableActionEmitter.addListener(this._invalidateCache, this);\n    this._tableData.dataLoadedEmitter.addListener(this._clearCache, this);\n  }\n\n  /**\n   * Returns the cached value for the given column, or calculates and caches the value using the\n   * provided calc() function.\n   */\n  public getValue(colId: string, calc: () => T): T {\n    return getSetMapValue(this._cachedColIndexes, colId, calc);\n  }\n\n  private _invalidateCache(action: DocAction): void {\n    if (isUpdateRecord(action) || isBulkUpdateRecord(action)) {\n      // If the update only affects existing records, only invalidate affected columns.\n      const colValues = action[3];\n      for (const colId of Object.keys(colValues)) {\n        this._cachedColIndexes.delete(colId);\n      }\n    } else {\n      // For add/delete actions and all schema changes, drop the cache entirely to be on the safe side.\n      this._clearCache();\n    }\n  }\n\n  private _clearCache(): void {\n    this._cachedColIndexes.clear();\n  }\n}\n","/**\n * DocData maintains all underlying data for a Grist document, knows how to load it,\n * subscribes to actions which change it, and forwards those actions to individual tables.\n * It also provides the interface to apply actions to data.\n */\n\nimport {DocComm} from 'app/client/components/DocComm';\nimport {MetaTableData, TableData} from 'app/client/models/TableData';\nimport {ApplyUAOptions, ApplyUAResult} from 'app/common/ActiveDocAPI';\nimport {CellValue, getTableId, isDataAction, TableDataAction, UserAction} from 'app/common/DocActions';\nimport {DocData as BaseDocData} from 'app/common/DocData';\nimport {SchemaTypes} from 'app/common/schema';\nimport {ColTypeMap} from 'app/common/TableData';\nimport * as bluebird from 'bluebird';\nimport {Emitter} from 'grainjs';\nimport defaults = require('lodash/defaults');\n\nconst gristNotify = (window as any).gristNotify;\n\nexport class DocData extends BaseDocData {\n  public readonly sendActionsEmitter = new Emitter();\n  public readonly sendActionsDoneEmitter = new Emitter();\n\n  private _bundlesPending: number = 0;          // How many bundles are currently pending.\n  private _lastBundlePromise?: Promise<void>;   // Promise for completion of the last pending bundle.\n  private _triggerBundleFinalize?: () => void;  // When a bundle is pending, trigger its finalize() callback.\n\n  // When a bundle is pending and actions should be checked, the callback to check them.\n  private _shouldIncludeInBundle?: (actions: UserAction[]) => boolean;\n\n  private _nextDesc: string|null = null;        // The description for the next incoming action.\n  private _lastActionNum: number|null = null;   // ActionNum of the last action in the current bundle, or null.\n  private _bundleSender: BundleSender;\n\n  private _virtualTablesFunc: Map<string, Constructor<TableData>>;\n\n  /**\n   * Constructor for DocData.\n   * @param {Object} docComm: A map of server methods available on this document.\n   * @param {Object} metaTableData: A map from tableId to table data, presented as an action,\n   *      equivalent to BulkAddRecord, i.e. [\"TableData\", tableId, rowIds, columnValues].\n   */\n  constructor(public readonly docComm: DocComm, metaTableData: {[tableId: string]: TableDataAction}) {\n    super((tableId) => docComm.fetchTable(tableId), metaTableData);\n    this._bundleSender = new BundleSender(this.docComm);\n    this._virtualTablesFunc = new Map();\n  }\n\n  public createTableData(tableId: string, tableData: TableDataAction|null, colTypes: ColTypeMap): TableData {\n    const Cons = this._virtualTablesFunc?.get(tableId) || TableData;\n    return new Cons(this, tableId, tableData, colTypes);\n  }\n\n  // Version of inherited getTable() which returns the enhance TableData type.\n  public getTable(tableId: string): TableData|undefined {\n    return super.getTable(tableId) as TableData;\n  }\n\n  // Version of inherited getMetaTable() which returns the enhanced TableData type.\n  public getMetaTable<TableId extends keyof SchemaTypes>(tableId: TableId): MetaTableData<TableId> {\n    return super.getMetaTable(tableId) as any;\n  }\n\n  /**\n   * Finds up to n most likely target columns for the given values in the document.\n   */\n  public async findColFromValues(values: any[], n: number, optTableId?: string): Promise<number[]> {\n    try {\n      return await this.docComm.findColFromValues(values, n, optTableId);\n    } catch (e) {\n      gristNotify(`Error finding matching columns: ${e.message}`);\n      return [];\n    }\n  }\n\n  /**\n   * Returns error message (traceback) for one invalid formula cell.\n   */\n  public getFormulaError(tableId: string, colId: string, rowId: number): Promise<CellValue> {\n    return this.docComm.getFormulaError(tableId, colId, rowId);\n  }\n\n  // Sets a bundle to collect all incoming actions. Throws an error if any actions which\n  // do not match the verification callback are sent.\n  public startBundlingActions<T>(options: BundlingOptions<T>): BundlingInfo<T> {\n    if (this._bundlesPending >= 2) {\n      // We don't expect a full-blown queue of bundles or actions at any point. If a bundle is\n      // pending, a new bundle should immediately finalize it. Here we refuse to queue up more\n      // actions than that. (This could crop up in theory while disconnected, but is hard to\n      // trigger to test.)\n      throw new Error('Too many actions already pending');\n    }\n    this._bundlesPending++;\n\n    // Promise to allow waiting for the result of prepare() callback before it's even called.\n    let prepareResolve!: (value: T|Promise<T>) => void;\n    const preparePromise = new Promise<T>(resolve => { prepareResolve = resolve; });\n\n    // Manually-triggered promise for when finalize() should be called. It's triggered by user,\n    // and when an unrelated action or a new bundle is started.\n    let triggerFinalize!: () => void;\n    const triggerFinalizePromise = new Promise<void>(resolve => { triggerFinalize = resolve; });\n\n    const doBundleActions = async () => {\n      if (this._lastBundlePromise) {\n        this._triggerBundleFinalize?.();\n        await this._lastBundlePromise;\n      }\n      try {\n        this._nextDesc = options.description;\n        this._lastActionNum = null;\n        this._triggerBundleFinalize = triggerFinalize;\n        prepareResolve(options.prepare());\n        this._shouldIncludeInBundle = options.shouldIncludeInBundle;\n\n        // If finalize is triggered, we must wait for preparePromise to fulfill before proceeding.\n        await Promise.all([triggerFinalizePromise, preparePromise]);\n\n        // Unset _shouldIncludeInBundle so that actions sent by finalize() are included in the\n        // bundle. If they were checked and incorrectly failed the check, we'd have a deadlock.\n        // TODO The downside is that when sending multiple unrelated actions quickly, the first\n        // can trigger finalize, and subsequent ones can get bundled in while finalize() is\n        // running. This changes the order of actions and may create problems (e.g. with undo).\n        this._shouldIncludeInBundle = undefined;\n        await options.finalize();\n      } finally {\n        // In all cases, reset the bundle-specific values we set above\n        this._shouldIncludeInBundle = undefined;\n        this._triggerBundleFinalize = undefined;\n        this._bundlesPending--;\n        if (this._bundlesPending === 0) {\n          this._lastBundlePromise = undefined;\n        }\n      }\n    };\n\n    const completionPromise = this._lastBundlePromise = doBundleActions();\n    return {preparePromise, triggerFinalize, completionPromise};\n  }\n\n  // Execute a callback that may send multiple actions, and bundle those actions together. The\n  // callback may return a promise, in which case bundleActions() will wait for it to resolve.\n  // If nestInActiveBundle is true, and there is an active bundle, then simply calls callback()\n  // without starting a new bundle.\n  public async bundleActions<T>(desc: string|null, callback: () => T|Promise<T>,\n                                options: {nestInActiveBundle?: boolean} = {}): Promise<T> {\n    if (options.nestInActiveBundle && this._bundlesPending) {\n      return await callback();\n    }\n    const bundlingInfo = this.startBundlingActions<T>({\n      description: desc,\n      shouldIncludeInBundle: () => true,\n      prepare: callback,\n      finalize: async () => undefined,\n    });\n    try {\n      return await bundlingInfo.preparePromise;\n    } finally {\n      bundlingInfo.triggerFinalize();\n      await bundlingInfo.completionPromise;\n    }\n  }\n\n  /**\n   * Sends actions to the server to be applied.\n   * @param {String} optDesc: Optional description of the actions to be shown in the log.\n   *\n   * sendActions also emits two events:\n   * 'sendActions': emitted before the action is sent, with { actions } object as data.\n   * 'sendActionsDone': emitted on success, with the same data object.\n   *   Note that it allows a handler for 'sendActions' to pass along information to the handler\n   *   for the corresponding 'sendActionsDone', by tacking it onto the event data object.\n   */\n  public sendActions(actions: UserAction[], optDesc?: string): Promise<any[]> {\n    // Some old code relies on this promise being a bluebird Promise.\n    // TODO Remove bluebird and this cast.\n    return bluebird.Promise.resolve(this._sendActionsImpl(actions, optDesc)) as unknown as Promise<any[]>;\n  }\n\n  /**\n   * Sends a single action to the server to be applied. Calls this.sendActions to manage the\n   * optional bundle.\n   * @param {String} optDesc: Optional description of the actions to be shown in the log.\n   */\n  public sendAction(action: UserAction, optDesc?: string): Promise<any> {\n    return this.sendActions([action], optDesc).then((retValues) => retValues[0]);\n  }\n\n  public registerVirtualTable(tableId: string, Cons: typeof TableData) {\n    this._virtualTablesFunc.set(tableId, Cons);\n  }\n\n  // See documentation of sendActions().\n  private async _sendActionsImpl(actions: UserAction[], optDesc?: string): Promise<any[]> {\n    const tableName = String(actions[0]?.[1]);\n    if (this._virtualTablesFunc?.has(tableName)) {\n      // Actions applying to virtual tables are handled directly by their TableData instance.\n      for (const action of actions) {\n        if (!isDataAction(action)) {\n          throw new Error('virtual table received an action it cannot handle');\n        }\n        if (getTableId(action) !== tableName) {\n          throw new Error('virtual table actions mixed with other actions');\n        }\n      }\n      const tableActions = actions.map(a => [a[0], ...a.slice(2)]);\n      // The type on sendTableActions seems kind of misleading, and\n      // only working because UserAction is defined weakly. The first\n      // thing the method does is splice back in the table names...\n      return this.getTable(tableName)!.sendTableActions(tableActions, optDesc);\n    }\n    const eventData = {actions};\n    this.sendActionsEmitter.emit(eventData);\n    const options = { desc: optDesc };\n    if (this._shouldIncludeInBundle && !this._shouldIncludeInBundle(actions)) {\n      this._triggerBundleFinalize?.();\n      await this._lastBundlePromise;\n    }\n    if (this._bundlesPending) {\n      defaults(options, {\n        desc: this._nextDesc,\n        linkId: this._lastActionNum,\n      });\n      this._nextDesc = null;\n    }\n\n    const result: ApplyUAResult = await this._bundleSender.applyUserActions(actions, options);\n    this._lastActionNum = result.actionNum;\n    this.sendActionsDoneEmitter.emit(eventData);\n    return result.retValues;\n  }\n}\n\n/**\n * BundleSender helper class collects multiple applyUserActions() calls that happen on the same\n * tick, and sends them to the server all at once.\n */\nclass BundleSender {\n  private _options = {};\n  private _actions: UserAction[] = [];\n  private _sendPromise?: Promise<ApplyUAResult>;\n\n  constructor(private _docComm: DocComm) {}\n\n  public applyUserActions(actions: UserAction[], options: ApplyUAOptions): Promise<ApplyUAResult> {\n    defaults(this._options, options);\n    const start = this._actions.length;\n    this._actions.push(...actions);\n    const end = this._actions.length;\n    return this._getSendPromise()\n    .then(result => ({\n      actionNum: result.actionNum,\n      retValues: result.retValues.slice(start, end),\n      isModification: result.isModification\n    }));\n  }\n\n  public _getSendPromise(): Promise<ApplyUAResult> {\n    if (!this._sendPromise) {\n      // Note that the first Promise.resolve() ensures that the next step (actual send) happens on\n      // the next tick. By that time, more actions may have been added to this._actions array.\n      this._sendPromise = Promise.resolve()\n      .then(() => {\n        this._sendPromise = undefined;\n        const ret = this._docComm.applyUserActions(this._actions, this._options);\n        this._options = {};\n        this._actions = [];\n        return ret;\n      });\n    }\n    return this._sendPromise;\n  }\n}\n\n\n/**\n * Options to startBundlingAction().\n */\nexport interface BundlingOptions<T = unknown> {\n  // Description of the action bundle.\n  description: string|null;\n\n  // Checker for whether an action belongs in the current bundle. If not, finalize() will be\n  // called immediately. Note that this checker is NOT applied for actions sent from prepare()\n  // or finalize() callbacks, only those in between.\n  shouldIncludeInBundle: (actions: UserAction[]) => boolean;\n\n  // Callback to start this action bundle.\n  prepare: () => T|Promise<T>;\n\n  // Callback to finalize this action bundle.\n  finalize: () => Promise<void>;\n}\n\n/**\n * Result of startBundlingActions(), to allow waiting for prepare() to complete, and to trigger\n * finalize() manually, and to wait for the full bundle to complete.\n */\nexport interface BundlingInfo<T = unknown> {\n  // Promise for when the prepare() has completed. Note that sometimes it's delayed until the\n  // previous bundle has been finalized.\n  preparePromise: Promise<T>;\n\n  // Ask DocData to call the finalize callback immediately.\n  triggerFinalize: () => void;\n\n  // Promise for when the bundle has been finalized.\n  completionPromise: Promise<void>;\n}\n\ntype Constructor<T> = new (...args: any[]) => T;\n","/**\n * DocModel describes the observable models for all document data, including the built-in tables\n * (aka metatables), which are used in the Grist application itself (e.g. to render views).\n *\n * Since all data is structured as tables, we have several levels of models:\n * (1) DocModel maintains all tables\n * (2) MetaTableModel maintains data for a built-in table.\n * (3) DataTableModel maintains data for a user-defined table.\n * (4) RowModels (defined in {Data,Meta}TableModel.js) maintains data for one record in a table.\n *     For built-in tables, the records are defined in this module, below.\n */\nimport {KoArray} from 'app/client/lib/koArray';\nimport {KoSaveableObservable} from 'app/client/models/modelUtil';\n\nimport * as ko from 'knockout';\nimport memoize from 'lodash/memoize';\n\nimport * as koArray from 'app/client/lib/koArray';\nimport * as koUtil from 'app/client/lib/koUtil';\nimport DataTableModel from 'app/client/models/DataTableModel';\nimport {DocData} from 'app/client/models/DocData';\nimport {DocPageModel} from 'app/client/models/DocPageModel';\nimport {urlState} from 'app/client/models/gristUrlState';\nimport MetaRowModel from 'app/client/models/MetaRowModel';\nimport MetaTableModel from 'app/client/models/MetaTableModel';\nimport * as rowset from 'app/client/models/rowset';\nimport {TableData} from 'app/client/models/TableData';\nimport {isHiddenTable, isSummaryTable} from 'app/common/isHiddenTable';\nimport {canEdit} from 'app/common/roles';\nimport {RowFilterFunc} from 'app/common/RowFilterFunc';\nimport {schema, SchemaTypes} from 'app/common/schema';\nimport {ACLRuleRec, createACLRuleRec} from 'app/client/models/entities/ACLRuleRec';\nimport {ColumnRec, createColumnRec} from 'app/client/models/entities/ColumnRec';\nimport {createDocInfoRec, DocInfoRec} from 'app/client/models/entities/DocInfoRec';\nimport {createFilterRec, FilterRec} from 'app/client/models/entities/FilterRec';\nimport {createPageRec, PageRec} from 'app/client/models/entities/PageRec';\nimport {createTabBarRec, TabBarRec} from 'app/client/models/entities/TabBarRec';\nimport {createTableRec, TableRec} from 'app/client/models/entities/TableRec';\nimport {createValidationRec, ValidationRec} from 'app/client/models/entities/ValidationRec';\nimport {createViewFieldRec, ViewFieldRec} from 'app/client/models/entities/ViewFieldRec';\nimport {createViewRec, ViewRec} from 'app/client/models/entities/ViewRec';\nimport {createViewSectionRec, ViewSectionRec} from 'app/client/models/entities/ViewSectionRec';\nimport {CellRec, createCellRec} from 'app/client/models/entities/CellRec';\nimport {RefListValue} from 'app/common/gristTypes';\nimport {decodeObject} from 'app/plugin/objtypes';\nimport {toKo} from 'grainjs';\nimport {UIRowId} from 'app/plugin/GristAPI';\n\n// Re-export all the entity types available. The recommended usage is like this:\n//    import {ColumnRec, ViewFieldRec} from 'app/client/models/DocModel';\nexport type {ColumnRec, DocInfoRec, FilterRec, PageRec, TabBarRec, TableRec, ValidationRec,\n  ViewFieldRec, ViewRec, ViewSectionRec, CellRec};\n\n/**\n * Creates the type for a MetaRowModel containing a KoSaveableObservable for each field listed in\n * the auto-generated app/common/schema.ts. It represents the metadata record in the database.\n * Particular DocModel entities derive from this, and add other helpful computed values.\n */\nexport type IRowModel<TName extends keyof SchemaTypes> = MetaRowModel<TName> & {\n  [ColId in keyof SchemaTypes[TName]]: KoSaveableObservable<SchemaTypes[TName][ColId]>;\n};\n\n\n/**\n * Returns an observable for an observable array of records from the given table.\n *\n * @param {RowModel} rowModel: RowModel that owns this recordSet.\n * @param {TableModel} tableModel: The model for the table to return records from.\n * @param {String} groupByField: The name of the field in the other table by which to group. The\n *    returned observable arrays will be for the group matching the value of rowModel.id().\n * @param {String} [options.sortBy]: Keep the returned array sorted by this key. If omitted, the\n *    returned array will be sorted by rowId.\n */\nexport function recordSet<TRow extends MetaRowModel>(\n  rowModel: MetaRowModel, tableModel: MetaTableModel<TRow>, groupByField: string, options?: {sortBy: string}\n): ko.Computed<KoArray<TRow>> {\n\n  const opts = {groupBy: groupByField, sortBy: 'id', ...options};\n  return koUtil.computedAutoDispose(\n    () => tableModel.createRowGroupModel(rowModel.id() || 0, opts),\n    null, { pure: true });\n}\n\n\n/**\n * Returns an observable for a record from another table, selected using the passed-in observable\n * for a rowId. If rowId is invalid, returns the row model for the fake empty record.\n * @param {TableModel} tableModel: The model for the table to return a record from.\n * @param {ko.observable} rowIdObs: An observable for the row id to look up.\n */\nexport function refRecord<TRow extends MetaRowModel>(\n  tableModel: MetaTableModel<TRow>, rowIdObs: ko.Observable<number>|ko.Computed<number>\n): ko.Computed<TRow> {\n  // Pass 'true' to getRowModel() to depend on the row version.\n  return ko.pureComputed(() => tableModel.getRowModel(rowIdObs() || 0, true));\n}\n\n\n/**\n * Returns an observable with a list of records from another table, selected using RefList column.\n * @param {TableModel} tableModel: The model for the table to return a record from.\n * @param {ko.observable} rowsIdObs: An observable with a RefList value.\n */\nexport function refListRecords<TRow extends MetaRowModel>(\n  tableModel: MetaTableModel<TRow>, rowsIdObs: ko.Observable<RefListValue>|ko.Computed<RefListValue>\n) {\n  return ko.pureComputed(() => {\n    const ids = decodeObject(rowsIdObs()) as number[]|null;\n    if (!Array.isArray(ids)) {\n      return [];\n    }\n    return ids.map(id => tableModel.getRowModel(id, true));\n  });\n}\n\n// Use an alias for brevity.\ntype MTM<RowModel extends MetaRowModel> = MetaTableModel<RowModel>;\n\nexport class DocModel {\n  // MTM is a shorthand for MetaTableModel below, to keep each item to one line.\n  public docInfo: MTM<DocInfoRec> = this._metaTableModel(\"_grist_DocInfo\", createDocInfoRec);\n  public tables: MTM<TableRec> = this._metaTableModel(\"_grist_Tables\", createTableRec);\n  public columns: MTM<ColumnRec> = this._metaTableModel(\"_grist_Tables_column\", createColumnRec);\n  public views: MTM<ViewRec> = this._metaTableModel(\"_grist_Views\", createViewRec);\n  public viewSections: MTM<ViewSectionRec> = this._metaTableModel(\"_grist_Views_section\", createViewSectionRec);\n  public viewFields: MTM<ViewFieldRec> = this._metaTableModel(\"_grist_Views_section_field\", createViewFieldRec);\n  public tabBar: MTM<TabBarRec> = this._metaTableModel(\"_grist_TabBar\", createTabBarRec);\n  public validations: MTM<ValidationRec> = this._metaTableModel(\"_grist_Validations\", createValidationRec);\n  public pages: MTM<PageRec> = this._metaTableModel(\"_grist_Pages\", createPageRec);\n  public rules: MTM<ACLRuleRec> = this._metaTableModel(\"_grist_ACLRules\", createACLRuleRec);\n  public filters: MTM<FilterRec> = this._metaTableModel(\"_grist_Filters\", createFilterRec);\n  public cells: MTM<CellRec> = this._metaTableModel(\"_grist_Cells\", createCellRec);\n\n  public docInfoRow: DocInfoRec;\n\n  public allTables: KoArray<TableRec>;\n  public visibleTables: KoArray<TableRec>;\n  public rawDataTables: KoArray<TableRec>;\n  public rawSummaryTables: KoArray<TableRec>;\n\n  public allTableIds: KoArray<string>;\n  public visibleTableIds: KoArray<string>;\n\n  // A mapping from tableId to DataTableModel for user-defined tables.\n  public dataTables: {[tableId: string]: DataTableModel} = {};\n\n  // Another map, this one mapping tableRef (rowId) to DataTableModel.\n  public dataTablesByRef = new Map<number, DataTableModel>();\n\n  public allTabs: KoArray<TabBarRec> = this.tabBar.createAllRowsModel('tabPos');\n\n  /** Pages that are shown in the menu. These can include censored pages if they have children. */\n  public menuPages: ko.Computed<PageRec[]>;\n  // Excludes pages hidden by ACL rules or other reasons (e.g. doc-tour)\n  public visibleDocPages: ko.Computed<PageRec[]>;\n\n  // Flag for tracking whether document is in formula-editing mode\n  public editingFormula: ko.Observable<boolean> = ko.observable(false);\n\n  // If the doc has a docTour. Used also to enable the UI button to restart the tour.\n  public readonly hasDocTour: ko.Computed<boolean>;\n\n  public readonly isTutorial: ko.Computed<boolean>;\n\n  // TODO This is a temporary solution until we expose creation of doc-tours to users. This flag\n  // is initialized once on page load. If set, then the tour page (if any) will be visible.\n  public showDocTourTable: boolean = (urlState().state.get().docPage === 'GristDocTour');\n\n  // Whether the GristDocTutorial table should be shown. Initialized once on page load.\n  public showDocTutorialTable: boolean =\n    // We skip subscribing to the observables below since they normally shouldn't change during\n    // this object's lifetime. If that changes, this should be made into a computed observable.\n    !this._docPageModel.isTutorialFork.get() ||\n    canEdit(this._docPageModel.currentDoc.get()?.trunkAccess ?? null);\n\n  // List of all the metadata tables.\n  private _metaTables: Array<MetaTableModel<any>>;\n\n  constructor(public readonly docData: DocData, private readonly _docPageModel: DocPageModel) {\n    // For all the metadata tables, load their data (and create the RowModels).\n    for (const model of this._metaTables) {\n      model.loadData();\n    }\n\n    this.docInfoRow = this.docInfo.getRowModel(1);\n\n    // An observable array of all tables, sorted by tableId, with no exclusions.\n    this.allTables = this._createAllTablesArray();\n\n    // An observable array of user-visible tables, sorted by tableId, excluding summary tables.\n    // This is a publicly exposed member.\n    this.visibleTables = this._createVisibleTablesArray();\n\n    // Observable arrays of raw data and summary tables, sorted by tableId.\n    this.rawDataTables = this._createRawDataTablesArray();\n    this.rawSummaryTables = this._createRawSummaryTablesArray();\n\n    // An observable array of all tableIds. A shortcut mapped from allTables.\n    const allTableIds = ko.computed(() => this.allTables.all().map(t => t.tableId()));\n    this.allTableIds = koArray.syncedKoArray(allTableIds);\n\n    // An observable array of user-visible tableIds. A shortcut mapped from visibleTables.\n    const visibleTableIds = ko.computed(() => this.visibleTables.all().map(t => t.tableId()));\n    this.visibleTableIds = koArray.syncedKoArray(visibleTableIds);\n\n    // Create an observable array of RowModels for all the data tables. We'll trigger\n    // onAddTable/onRemoveTable in response to this array's splice events below.\n    const allTableMetaRows = this.tables.createAllRowsModel('id');\n\n    // For a new table, we get AddTable action followed by metadata actions to add a table record\n    // (which triggers this subscribeForEach) and to add all the column records. So we have to keep\n    // in mind that metadata for columns isn't available yet.\n    allTableMetaRows.subscribeForEach({\n      add: r => this._onAddTable(r),\n      remove: r => this._onRemoveTable(r),\n    });\n\n    // Get a list of only the visible pages.\n    const allPages = this.pages.createAllRowsModel('pagePos');\n    this.menuPages = ko.computed(() => {\n      const pagesToShow = allPages.all().filter(p => !p.isSpecial()).sort((a, b) => a.pagePos() - b.pagePos());\n      // Helper to find all children of a page.\n      const children = memoize((page: PageRec) => {\n        const following = pagesToShow.slice(pagesToShow.indexOf(page) + 1);\n        const firstOutside = following.findIndex(p => p.indentation() <= page.indentation());\n        return firstOutside >= 0 ? following.slice(0, firstOutside) : following;\n      });\n      // Helper to test if the page is hidden and all its children are hidden.\n      // In that case, we won't show it at all.\n      const hide = memoize((page: PageRec): boolean => page.isCensored() && children(page).every(p => hide(p)));\n      return pagesToShow.filter(p => !hide(p));\n    });\n    this.visibleDocPages = ko.computed(() => allPages.all().filter(p => !p.isHidden()));\n\n    this.hasDocTour = ko.computed(() => this.visibleTableIds.all().includes('GristDocTour'));\n\n    this.isTutorial = ko.computed(() =>\n      toKo(ko, this._docPageModel.isTutorialFork)()\n      && this.allTableIds.all().includes('GristDocTutorial'));\n  }\n\n  private _metaTableModel<TName extends keyof SchemaTypes, TRow extends IRowModel<TName>>(\n    tableId: TName,\n    rowConstructor: (this: TRow, docModel: DocModel) => void,\n  ): MetaTableModel<TRow> {\n    const fields = Object.keys(schema[tableId]);\n    const model = new MetaTableModel<TRow>(this, this.docData.getTable(tableId)!, fields, rowConstructor);\n    // To keep _metaTables private member listed after public ones, initialize it on first use.\n    if (!this._metaTables) { this._metaTables = []; }\n    this._metaTables.push(model);\n    return model;\n  }\n\n  private _onAddTable(tableMetaRow: TableRec) {\n    let tid = tableMetaRow.tableId();\n    const dtm = new DataTableModel(this, this.docData.getTable(tid)!, tableMetaRow);\n    this.dataTables[tid] = dtm;\n    this.dataTablesByRef.set(tableMetaRow.getRowId(), dtm);\n\n    // Subscribe to tableMetaRow.tableId() to handle table renames.\n    tableMetaRow.tableId.subscribe(newTableId => {\n      this.dataTables[newTableId] = this.dataTables[tid];\n      delete this.dataTables[tid];\n      tid = newTableId;\n    });\n  }\n\n  private _onRemoveTable(tableMetaRow: TableRec) {\n    const tid = tableMetaRow.tableId();\n    this.dataTables[tid].dispose();\n    delete this.dataTables[tid];\n    this.dataTablesByRef.delete(tableMetaRow.getRowId());\n  }\n\n  /**\n   * Returns an observable array of all tables, sorted by tableId.\n   */\n  private _createAllTablesArray(): KoArray<TableRec> {\n    return createTablesArray(this.tables);\n  }\n\n  /**\n   * Returns an observable array of user tables, sorted by tableId, and excluding hidden/summary\n   * tables.\n   */\n  private _createVisibleTablesArray(): KoArray<TableRec> {\n    return createTablesArray(this.tables, r =>\n      !isHiddenTable(this.tables.tableData, r) &&\n      !isVirtualTable(this.tables.tableData, r) &&\n      (!isTutorialTable(this.tables.tableData, r) || this.showDocTutorialTable)\n    );\n  }\n\n  /**\n   * Returns an observable array of raw data tables, sorted by tableId, and excluding summary\n   * tables.\n   */\n  private _createRawDataTablesArray(): KoArray<TableRec> {\n    return createTablesArray(this.tables, r =>\n      !isSummaryTable(this.tables.tableData, r) &&\n      (!isTutorialTable(this.tables.tableData, r) || this.showDocTutorialTable)\n    );\n  }\n\n  /**\n   * Returns an observable array of raw summary tables, sorted by tableId.\n   */\n  private _createRawSummaryTablesArray(): KoArray<TableRec> {\n    return createTablesArray(this.tables, r => isSummaryTable(this.tables.tableData, r));\n  }\n}\n\n/**\n * Creates an observable array of tables, sorted by tableId.\n *\n * An optional `filterFunc` may be specified to filter tables.\n */\nfunction createTablesArray(\n  tablesModel: MetaTableModel<TableRec>,\n  filterFunc: RowFilterFunc<UIRowId> = (_row) => true\n) {\n  const rowSource = new rowset.FilteredRowSource(filterFunc);\n  rowSource.subscribeTo(tablesModel);\n  // Create an observable RowModel array based on this rowSource, sorted by tableId.\n  return tablesModel._createRowSetModel(rowSource, 'tableId');\n}\n\n/**\n * Return whether a table (identified by the rowId of its metadata record) is\n * the special GristDocTutorial table.\n */\nfunction isTutorialTable(tablesData: TableData, tableRef: UIRowId): boolean {\n  return tablesData.getValue(tableRef, 'tableId') === 'GristDocTutorial';\n}\n\n/**\n * Check whether a table is virtual - currently that is done\n * by having a string rowId rather than the expected integer.\n */\nfunction isVirtualTable(tablesData: TableData, tableRef: UIRowId): boolean {\n  return typeof(tableRef) === 'string';\n}\n","import {ClientScope} from 'app/client/components/ClientScope';\nimport {guessTimezone} from 'app/client/lib/guessTimezone';\nimport {HomePluginManager} from 'app/client/lib/HomePluginManager';\nimport {ImportSourceElement} from 'app/client/lib/ImportSourceElement';\nimport {localStorageObs} from 'app/client/lib/localStorageObs';\nimport {AppModel, reportError} from 'app/client/models/AppModel';\nimport {reportMessage, UserError} from 'app/client/models/errors';\nimport {urlState} from 'app/client/models/gristUrlState';\nimport {ownerName} from 'app/client/models/WorkspaceInfo';\nimport {IHomePage} from 'app/common/gristUrls';\nimport {isLongerThan} from 'app/common/gutil';\nimport {SortPref, UserOrgPrefs, ViewPref} from 'app/common/Prefs';\nimport * as roles from 'app/common/roles';\nimport {getGristConfig} from 'app/common/urlUtils';\nimport {Document, Organization, Workspace} from 'app/common/UserAPI';\nimport {bundleChanges, Computed, Disposable, Observable, subscribe} from 'grainjs';\nimport moment from 'moment';\nimport flatten = require('lodash/flatten');\nimport sortBy = require('lodash/sortBy');\n\nconst DELAY_BEFORE_SPINNER_MS = 500;\n\n// Given a UTC Date ISO 8601 string (the doc updatedAt string), gives a reader-friendly\n// relative time to now - e.g. 'yesterday', '2 days ago'.\nexport function getTimeFromNow(utcDateISO: string): string {\n  const time = moment.utc(utcDateISO);\n  const now = moment();\n  const diff = now.diff(time, 's');\n  if (diff < 0 && diff > -60) {\n    // If the time appears to be in the future, but less than a minute\n    // in the future, chalk it up to a difference in time\n    // synchronization and don't claim the resource will be changed in\n    // the future.  For larger differences, just report them\n    // literally, there's a more serious problem or lack of\n    // synchronization.\n    return now.fromNow();\n  }\n  return time.fromNow();\n}\n\nexport interface HomeModel {\n  // PageType value, one of the discriminated union values used by AppModel.\n  pageType: \"home\";\n\n  app: AppModel;\n  currentPage: Observable<IHomePage>;\n  currentWSId: Observable<number|undefined>;    // should be set when currentPage is 'workspace'\n\n  // Note that Workspace contains its documents in .docs.\n  workspaces: Observable<Workspace[]>;\n  loading: Observable<boolean|\"slow\">;          // Set to \"slow\" when loading for a while.\n  available: Observable<boolean>;               // set if workspaces loaded correctly.\n  showIntro: Observable<boolean>;               // set if no docs and we should show intro.\n  singleWorkspace: Observable<boolean>;         // set if workspace name should be hidden.\n  trashWorkspaces: Observable<Workspace[]>;     // only set when viewing trash\n  templateWorkspaces: Observable<Workspace[]>;  // Only set when viewing templates or all documents.\n\n  // currentWS is undefined when currentPage is not \"workspace\" or if currentWSId doesn't exist.\n  currentWS: Observable<Workspace|undefined>;\n\n  // List of pinned docs to show for currentWS.\n  currentWSPinnedDocs: Observable<Document[]>;\n\n  // List of featured templates from templateWorkspaces.\n  featuredTemplates: Observable<Document[]>;\n\n  // List of other sites (orgs) user can access. Only populated on All Documents, and only when\n  // the current org is a personal org, or the current org is view access only.\n  otherSites: Observable<Organization[]>;\n\n  currentSort: Observable<SortPref>;\n  currentView: Observable<ViewPref>;\n  importSources: Observable<ImportSourceElement[]>;\n\n  // The workspace for new docs, or \"unsaved\" to only allow unsaved-doc creation, or null if the\n  // user isn't allowed to create a doc.\n  newDocWorkspace: Observable<Workspace|null|\"unsaved\">;\n\n  shouldShowAddNewTip: Observable<boolean>;\n\n  createWorkspace(name: string): Promise<void>;\n  renameWorkspace(id: number, name: string): Promise<void>;\n  deleteWorkspace(id: number, forever: boolean): Promise<void>;\n  restoreWorkspace(ws: Workspace): Promise<void>;\n\n  createDoc(name: string, workspaceId: number|\"unsaved\"): Promise<string>;\n  renameDoc(docId: string, name: string): Promise<void>;\n  deleteDoc(docId: string, forever: boolean): Promise<void>;\n  restoreDoc(doc: Document): Promise<void>;\n  pinUnpinDoc(docId: string, pin: boolean): Promise<void>;\n  moveDoc(docId: string, workspaceId: number): Promise<void>;\n}\n\nexport interface ViewSettings {\n  currentSort: Observable<SortPref>;\n  currentView: Observable<ViewPref>;\n}\n\nexport class HomeModelImpl extends Disposable implements HomeModel, ViewSettings {\n  public readonly pageType = \"home\";\n  public readonly currentPage = Computed.create(this, urlState().state, (use, s) =>\n    s.homePage || (s.ws !== undefined ? \"workspace\" : \"all\"));\n  public readonly currentWSId = Computed.create(this, urlState().state, (use, s) => s.ws);\n  public readonly workspaces = Observable.create<Workspace[]>(this, []);\n  public readonly loading = Observable.create<boolean|\"slow\">(this, true);\n  public readonly available = Observable.create(this, false);\n  public readonly singleWorkspace = Observable.create(this, true);\n  public readonly trashWorkspaces = Observable.create<Workspace[]>(this, []);\n  public readonly templateWorkspaces = Observable.create<Workspace[]>(this, []);\n  public readonly importSources = Observable.create<ImportSourceElement[]>(this, []);\n\n  // Get the workspace details for the workspace with id of currentWSId.\n  public readonly currentWS = Computed.create(this, (use) =>\n    use(this.workspaces).find(ws => (ws.id === use(this.currentWSId))));\n\n  public readonly currentWSPinnedDocs = Computed.create(this, this.currentPage, this.currentWS, (use, page, ws) => {\n    const docs = (page === 'all') ?\n      flatten((use(this.workspaces).map(w => w.docs))) :\n      (ws ? ws.docs : []);\n    return sortBy(docs.filter(doc => doc.isPinned), (doc) => doc.name.toLowerCase());\n  });\n\n  public readonly featuredTemplates = Computed.create(this, this.templateWorkspaces, (_use, templates) => {\n    const featuredTemplates = flatten((templates).map(t => t.docs)).filter(t => t.isPinned);\n    return sortBy(featuredTemplates, (t) => t.name.toLowerCase());\n  });\n\n  public readonly otherSites = Computed.create(this, this.currentPage, this.app.topAppModel.orgs,\n    (_use, page, orgs) => {\n      if (page !== 'all') { return []; }\n\n      const currentOrg = this._app.currentOrg;\n      if (!currentOrg) { return []; }\n\n      const isPersonalOrg = currentOrg.owner;\n      if (!isPersonalOrg && (currentOrg.access !== 'viewers' || !currentOrg.public)) {\n        return [];\n      }\n\n      return orgs.filter(org => org.id !== currentOrg.id);\n    });\n\n  public readonly currentSort: Observable<SortPref>;\n  public readonly currentView: Observable<ViewPref>;\n\n  // The workspace for new docs, or \"unsaved\" to only allow unsaved-doc creation, or null if the\n  // user isn't allowed to create a doc.\n  public readonly newDocWorkspace = Computed.create(this, this.currentPage, this.currentWS, (use, page, ws) => {\n    // Anonymous user can create docs, but in unsaved mode.\n    if (!this.app.currentValidUser) { return \"unsaved\"; }\n    if (page === 'trash') { return null; }\n    const destWS = (['all', 'templates'].includes(page)) ? (use(this.workspaces)[0] || null) : ws;\n    return destWS && roles.canEdit(destWS.access) ? destWS : null;\n  });\n\n  // Whether to show intro: no docs (other than examples).\n  public readonly showIntro = Computed.create(this, this.workspaces, (use, wss) => (\n    wss.every((ws) => ws.isSupportWorkspace || ws.docs.length === 0)));\n\n  public readonly shouldShowAddNewTip = Observable.create(this,\n    !this._app.behavioralPromptsManager.hasSeenTip('addNew'));\n\n  private _userOrgPrefs = Observable.create<UserOrgPrefs|undefined>(this, this._app.currentOrg?.userOrgPrefs);\n\n  constructor(private _app: AppModel, clientScope: ClientScope) {\n    super();\n\n    if (!this.app.currentValidUser) {\n      // For the anonymous user, use local settings, don't attempt to save anything to the server.\n      const viewSettings = makeLocalViewSettings(null, 'all');\n      this.currentSort = viewSettings.currentSort;\n      this.currentView = viewSettings.currentView;\n    } else {\n      // Preference for sorting. Defaults to 'name'. Saved to server on write.\n      this.currentSort = Computed.create(this, this._userOrgPrefs,\n        (use, prefs) => SortPref.parse(prefs?.docMenuSort) || 'name')\n        .onWrite(s => this._saveUserOrgPref(\"docMenuSort\", s));\n\n      // Preference for view mode. The default is somewhat complicated. Saved to server on write.\n      this.currentView = Computed.create(this, this._userOrgPrefs,\n        (use, prefs) => ViewPref.parse(prefs?.docMenuView) || getViewPrefDefault(use(this.workspaces)))\n        .onWrite(s => this._saveUserOrgPref(\"docMenuView\", s));\n    }\n\n    this.autoDispose(subscribe(this.currentPage, this.currentWSId, (use) =>\n      this._updateWorkspaces().catch(reportError)));\n\n    // Defer home plugin initialization\n    const pluginManager = new HomePluginManager(\n      _app.topAppModel.plugins,\n      _app.topAppModel.getUntrustedContentOrigin()!,\n      clientScope);\n    const importSources = ImportSourceElement.fromArray(pluginManager.pluginsList);\n    this.importSources.set(importSources);\n\n    this._app.refreshOrgUsage().catch(reportError);\n  }\n\n  // Accessor for the AppModel containing this HomeModel.\n  public get app(): AppModel { return this._app; }\n\n  public async createWorkspace(name: string) {\n    const org = this._app.currentOrg;\n    if (!org) { return; }\n    this._checkForDuplicates(name);\n    await this._app.api.newWorkspace({name}, org.id);\n    await this._updateWorkspaces();\n  }\n\n  public async renameWorkspace(id: number, name: string) {\n    this._checkForDuplicates(name);\n    await this._app.api.renameWorkspace(id, name);\n    await this._updateWorkspaces();\n  }\n\n  public async deleteWorkspace(id: number, forever: boolean) {\n    // TODO: Prevent the last workspace from being removed.\n    await (forever ? this._app.api.deleteWorkspace(id) : this._app.api.softDeleteWorkspace(id));\n    await this._updateWorkspaces();\n  }\n\n  public async restoreWorkspace(ws: Workspace) {\n    await  this._app.api.undeleteWorkspace(ws.id);\n    await this._updateWorkspaces();\n    reportMessage(`Workspace \"${ws.name}\" restored`);\n  }\n\n  // Creates a new doc by calling the API, and returns its docId.\n  public async createDoc(name: string, workspaceId: number|\"unsaved\"): Promise<string> {\n    if (workspaceId === \"unsaved\") {\n      const timezone = await guessTimezone();\n      return await this._app.api.newUnsavedDoc({timezone});\n    }\n    const id = await this._app.api.newDoc({name}, workspaceId);\n    await this._updateWorkspaces();\n    return id;\n  }\n\n  public async renameDoc(docId: string, name: string): Promise<void> {\n    await this._app.api.renameDoc(docId, name);\n    await this._updateWorkspaces();\n  }\n\n  public async deleteDoc(docId: string, forever: boolean): Promise<void> {\n    await (forever ? this._app.api.deleteDoc(docId) : this._app.api.softDeleteDoc(docId));\n    await this._updateWorkspaces();\n  }\n\n  public async restoreDoc(doc: Document): Promise<void> {\n    await this._app.api.undeleteDoc(doc.id);\n    await this._updateWorkspaces();\n    reportMessage(`Document \"${doc.name}\" restored`);\n  }\n\n  public async pinUnpinDoc(docId: string, pin: boolean): Promise<void> {\n    await (pin ? this._app.api.pinDoc(docId) : this._app.api.unpinDoc(docId));\n    await this._updateWorkspaces();\n  }\n\n  public async moveDoc(docId: string, workspaceId: number): Promise<void> {\n    await this._app.api.moveDoc(docId, workspaceId);\n    await this._updateWorkspaces();\n  }\n\n  private _checkForDuplicates(name: string): void {\n    if (this.workspaces.get().find(ws => ws.name === name)) {\n      throw new UserError('Name already exists. Please choose a different name.');\n    }\n  }\n\n  // Fetches and updates workspaces, which include contained docs as well.\n  private async _updateWorkspaces() {\n    if (this.isDisposed()) {\n      return;\n    }\n    const org = this._app.currentOrg;\n    if (!org) {\n      this.workspaces.set([]);\n      this.trashWorkspaces.set([]);\n      this.templateWorkspaces.set([]);\n      return;\n    }\n\n    this.loading.set(true);\n    const currentPage = this.currentPage.get();\n    const promises = [\n      this._fetchWorkspaces(org.id, false).catch(reportError),\n      currentPage === 'trash' ? this._fetchWorkspaces(org.id, true).catch(reportError) : null,\n      this._maybeFetchTemplates(),\n    ] as const;\n\n    const promise = Promise.all(promises);\n    if (await isLongerThan(promise, DELAY_BEFORE_SPINNER_MS)) {\n      this.loading.set(\"slow\");\n    }\n    const [wss, trashWss, templateWss] = await promise;\n    if (this.isDisposed()) {\n      return;\n    }\n    // bundleChanges defers computeds' evaluations until all changes have been applied.\n    bundleChanges(() => {\n      this.workspaces.set(wss || []);\n      this.trashWorkspaces.set(trashWss || []);\n      this.templateWorkspaces.set(templateWss || []);\n      this.loading.set(false);\n      this.available.set(!!wss);\n      // Hide workspace name if we are showing a single (non-support) workspace, and active\n      // product doesn't allow adding workspaces.  It is important to check both conditions because:\n      //   * A personal org, where workspaces can't be added, can still have multiple\n      //     workspaces via documents shared by other users.\n      //   * An org with workspace support might happen to just have one workspace right\n      //     now, but it is good to show names to highlight the possibility of adding more.\n      const nonSupportWss = Array.isArray(wss) ? wss.filter(ws => !ws.isSupportWorkspace) : null;\n      this.singleWorkspace.set(\n        // The anon personal site always has 0 non-support workspaces.\n        nonSupportWss?.length === 0 ||\n        nonSupportWss?.length === 1 && _isSingleWorkspaceMode(this._app)\n      );\n    });\n  }\n\n  private async _fetchWorkspaces(orgId: number, forRemoved: boolean) {\n    let api = this._app.api;\n    if (forRemoved) {\n        api = api.forRemoved();\n    }\n    const wss = await api.getOrgWorkspaces(orgId);\n    if (this.isDisposed()) { return null; }\n    for (const ws of wss) {\n      ws.docs = sortBy(ws.docs, (doc) => doc.name.toLowerCase());\n\n      // Populate doc.removedAt for soft-deleted docs even when deleted along with a workspace.\n      if (forRemoved) {\n        for (const doc of ws.docs) {\n          doc.removedAt = doc.removedAt || ws.removedAt;\n        }\n      }\n\n      // Populate doc.workspace, which is used by DocMenu/PinnedDocs and\n      // is useful in cases where there are multiple workspaces containing\n      // pinned documents that need to be sorted in alphabetical order.\n      for (const doc of ws.docs) {\n        doc.workspace = doc.workspace ?? ws;\n      }\n    }\n    // Sort workspaces such that workspaces from the personal orgs of others\n    // come after workspaces from our own personal org; workspaces from personal\n    // orgs are grouped by personal org and the groups are ordered alphabetically\n    // by owner name; and all else being equal workspaces are ordered alphabetically\n    // by their name.  All alphabetical ordering is case-insensitive.\n    // Workspaces shared from support account (e.g. samples) are put last.\n    return sortBy(wss, (ws) => [ws.isSupportWorkspace,\n                                ownerName(this._app, ws).toLowerCase(),\n                                ws.name.toLowerCase()]);\n  }\n\n  /**\n   * Fetches templates if on the Templates or All Documents page.\n   *\n   * Only fetches featured (pinned) templates on the All Documents page.\n   */\n  private async _maybeFetchTemplates(): Promise<Workspace[] | null> {\n    const {templateOrg} = getGristConfig();\n    if (!templateOrg) { return null; }\n\n    const currentPage = this.currentPage.get();\n    const shouldFetchTemplates = ['all', 'templates'].includes(currentPage);\n    if (!shouldFetchTemplates) { return null; }\n\n    let templateWss: Workspace[] = [];\n    try {\n      const onlyFeatured = currentPage === 'all';\n      templateWss = await this._app.api.getTemplates(onlyFeatured);\n    } catch {\n      reportError('Failed to load templates');\n    }\n    if (this.isDisposed()) { return null; }\n\n    for (const ws of templateWss) {\n      for (const doc of ws.docs) {\n        // Populate doc.workspace, which is used by DocMenu/PinnedDocs and\n        // is useful in cases where there are multiple workspaces containing\n        // pinned documents that need to be sorted in alphabetical order.\n        doc.workspace = doc.workspace ?? ws;\n      }\n      ws.docs = sortBy(ws.docs, (doc) => doc.name.toLowerCase());\n    }\n    return templateWss;\n  }\n\n  private async _saveUserOrgPref<K extends keyof UserOrgPrefs>(key: K, value: UserOrgPrefs[K]) {\n    const org = this._app.currentOrg;\n    if (org) {\n      org.userOrgPrefs = {...org.userOrgPrefs, [key]: value};\n      this._userOrgPrefs.set(org.userOrgPrefs);\n      await this._app.api.updateOrg('current', {userOrgPrefs: org.userOrgPrefs});\n    }\n  }\n}\n\n// Check if active product allows just a single workspace.\nfunction _isSingleWorkspaceMode(app: AppModel): boolean {\n  return app.currentFeatures.maxWorkspacesPerOrg === 1;\n}\n\n// Returns a default view mode preference. We used to show 'list' for everyone. We now default to\n// 'icons' for new or light users. But if a user has more than 4 docs or any pinned docs, we'll\n// switch to 'list'. This will also avoid annoying existing users who may prefer a list.\nfunction getViewPrefDefault(workspaces: Workspace[]): ViewPref {\n  const userWorkspaces = workspaces.filter(ws => !ws.isSupportWorkspace);\n  const numDocs = userWorkspaces.reduce((sum, ws) => sum + ws.docs.length, 0);\n  const pinnedDocs = userWorkspaces.some((ws) => ws.docs.some(doc => doc.isPinned));\n  return (numDocs > 4 || pinnedDocs) ? 'list' : 'icons';\n}\n\n/**\n * Create observables for per-workspace view settings which default to org-wide settings, but can\n * be changed independently and persisted in localStorage.\n */\nexport function makeLocalViewSettings(home: HomeModel|null, wsId: number|'trash'|'all'|'templates'): ViewSettings {\n  const userId = home?.app.currentUser?.id || 0;\n  const sort = localStorageObs(`u=${userId}:ws=${wsId}:sort`);\n  const view = localStorageObs(`u=${userId}:ws=${wsId}:view`);\n\n  return {\n    currentSort: Computed.create(null,\n      // If no value in localStorage, use sort of All Documents.\n      (use) => SortPref.parse(use(sort)) || (home ? use(home.currentSort) : 'name'))\n      .onWrite((val) => sort.set(val)),\n    currentView: Computed.create(null,\n      // If no value in localStorage, use mode of All Documents, except Trash which defaults to 'list'.\n      (use) => ViewPref.parse(use(view)) || (wsId === 'trash' ? 'list' : (home ? use(home.currentView) : 'icons')))\n      .onWrite((val) => view.set(val)),\n  };\n}\n","import {ColumnRec, DocModel} from 'app/client/models/DocModel';\nimport {Style} from 'app/client/models/Styles';\nimport * as modelUtil from 'app/client/models/modelUtil';\nimport {GristObjCode} from 'app/plugin/GristData';\n\nexport interface RuleOwner {\n  // Field or Section can have a list of conditional styling rules. Each style is a combination of a formula and options\n  // that must by applied. Style is persisted as a new hidden formula column and the list of such\n  // columns is stored as Reference List property ('rules') in a field or column.\n  tableId: ko.Computed<string>;\n  // If this field (or column) has a list of conditional styling rules.\n  hasRules: ko.Computed<boolean>;\n  // List of rules.\n  rulesList: ko.Computed<[GristObjCode.List, ...number[]] | null>;\n  // List of columns that are used as rules for conditional styles.\n  rulesCols: ko.Computed<ColumnRec[]>;\n  // List of columns ids that are used as rules for conditional styles.\n  rulesColsIds: ko.Computed<string[]>;\n  // List of styles used by conditional rules.\n  rulesStyles: modelUtil.KoSaveableObservable<Style[]>;\n  // Adds empty conditional style rule. Sets before sending to the server.\n  addEmptyRule(): Promise<void>;\n  // Removes one rule from the collection. Removes before sending update to the server.\n  removeRule(index: number): Promise<void>;\n}\n\nexport async function removeRule(docModel: DocModel, owner: RuleOwner, index: number) {\n  const col = owner.rulesCols.peek()[index];\n  if (!col) {\n    throw new Error(`There is no rule at index ${index}`);\n  }\n  const newStyles = owner.rulesStyles.peek()?.slice() ?? [];\n  if (newStyles.length >= index) {\n    newStyles.splice(index, 1);\n  } else {\n    console.debug(`There are not style options at index ${index}`);\n  }\n  await docModel.docData.bundleActions(\"Remove conditional rule\", () =>\n    Promise.all([\n      owner.rulesStyles.setAndSave(newStyles),\n      docModel.docData.sendAction(['RemoveColumn', owner.tableId.peek(), col.colId.peek()])\n    ])\n  );\n}\n","/**\n * TableData maintains a single table's data.\n */\nimport {ColumnACIndexes} from 'app/client/models/ColumnACIndexes';\nimport {ColumnCache} from 'app/client/models/ColumnCache';\nimport {DocData} from 'app/client/models/DocData';\nimport {DocAction, ReplaceTableData, TableDataAction, UserAction} from 'app/common/DocActions';\nimport {isRaisedException} from 'app/common/gristTypes';\nimport {countIf} from 'app/common/gutil';\nimport {SchemaTypes} from 'app/common/schema';\nimport {ColTypeMap, MetaTableData as MetaTableDataBase, TableData as TableDataBase} from 'app/common/TableData';\nimport {Emitter} from 'grainjs';\n\n/**\n * TableData class to maintain a single table's data.\n */\nexport class TableData extends TableDataBase {\n  public readonly tableActionEmitter = new Emitter();\n  public readonly dataLoadedEmitter = new Emitter();\n\n  public readonly columnACIndexes = new ColumnACIndexes(this);\n\n  private _columnErrorCounts = new ColumnCache<number|undefined>(this);\n\n  /**\n   * Constructor for TableData.\n   * @param {DocData} docData: The root DocData object for this document.\n   * @param {String} tableId: The name of this table.\n   * @param {Object} tableData: An object equivalent to BulkAddRecord, i.e.\n   *        [\"TableData\", tableId, rowIds, columnValues].\n   * @param {Object} columnTypes: A map of colId to colType.\n   */\n  constructor(public readonly docData: DocData,\n              tableId: string, tableData: TableDataAction|null, columnTypes: ColTypeMap) {\n    super(tableId, tableData, columnTypes);\n  }\n\n  public loadData(tableData: TableDataAction|ReplaceTableData): number[] {\n    const oldRowIds = super.loadData(tableData);\n    // If called from base constructor, this.dataLoadedEmitter may be unset; in that case there\n    // are no subscribers anyway.\n    if (this.dataLoadedEmitter) {\n      this.dataLoadedEmitter.emit(oldRowIds, this.getRowIds());\n    }\n    return oldRowIds;\n  }\n\n  // Used by QuerySet to load new rows for onDemand tables.\n  public loadPartial(data: TableDataAction): void {\n    super.loadPartial(data);\n    // Emit dataLoaded event, to trigger ('rowChange', 'add') on the TableModel RowSource.\n    this.dataLoadedEmitter.emit([], data[2]);\n  }\n\n  // Used by QuerySet to remove unused rows for onDemand tables when a QuerySet is disposed.\n  public unloadPartial(rowIds: number[]): void {\n    super.unloadPartial(rowIds);\n    // Emit dataLoaded event, to trigger ('rowChange', 'rm') on the TableModel RowSource.\n    this.dataLoadedEmitter.emit(rowIds, []);\n  }\n\n  /**\n   * Counts and returns the number of error values in the given column. The count is cached to\n   * keep it faster for large tables, and the cache is cleared as needed on changes to the table.\n   */\n  public countErrors(colId: string): number|undefined {\n    return this._columnErrorCounts.getValue(colId, () => {\n      const values = this.getColValues(colId);\n      return values && countIf(values, isRaisedException);\n    });\n  }\n\n  /**\n   * Sends an array of table-specific action to the server to be applied. The tableId should be\n   * omitted from each `action` parameter and will be inserted automatically.\n   *\n   * @param {Array} actions: Array of user actions of the form [actionType, rowId, etc], which is sent\n   * to the server as [actionType, **tableId**, rowId, etc]\n   * @param {String} optDesc: Optional description of the actions to be shown in the log.\n   * @returns {Array} Array of return values for all the UserActions as produced by the data engine.\n   */\n  public sendTableActions(actions: UserAction[], optDesc?: string) {\n    actions.forEach((action) => action.splice(1, 0, this.tableId));\n    return this.docData.sendActions(actions as DocAction[], optDesc);\n  }\n\n  /**\n   * Sends a table-specific action to the server. The tableId should be omitted from the action parameter\n   * and will be inserted automatically.\n   *\n   * @param {Array} action: [actionType, rowId...], sent as [actionType, **tableId**, rowId...]\n   * @param {String} optDesc: Optional description of the actions to be shown in the log.\n   * @returns {Object} Return value for the UserAction as produced by the data engine.\n   */\n  public sendTableAction(action: UserAction, optDesc?: string) {\n    if (!action) { return; }\n    action.splice(1, 0, this.tableId);\n    return this.docData.sendAction(action as DocAction, optDesc);\n  }\n\n  /**\n   * Emits a table-specific action received from the server as a 'tableAction' event.\n   */\n  public receiveAction(action: DocAction): boolean {\n    const applied = super.receiveAction(action);\n    if (applied) {\n      this.tableActionEmitter.emit(action);\n    }\n    return applied;\n  }\n}\n\nexport type MetaTableData<TableId extends keyof SchemaTypes> = MetaTableDataBase<TableId> & TableData;\n","import * as modelUtil from 'app/client/models/modelUtil';\n// This is circular import, but only for types so it's fine.\nimport type {DocModel, ViewFieldRec} from 'app/client/models/DocModel';\nimport * as UserType from 'app/client/widgets/UserType';\nimport {ifNotSet} from 'app/common/gutil';\nimport * as ko from 'knockout';\nimport intersection from \"lodash/intersection\";\nimport isEqual from \"lodash/isEqual\";\nimport zip from 'lodash/zip';\n\nexport class ViewFieldConfig {\n  /** If there are multiple columns selected in the viewSection */\n  public multiselect: ko.Computed<boolean>;\n  /** If all selected columns have the same widget list. */\n  public sameWidgets: ko.Computed<boolean>;\n  /** Widget options for a field or multiple fields. Doesn't contain style options */\n  public options: CommonOptions;\n  /** Style options for a field or multiple fields  */\n  public style: ko.Computed<StyleOptions>;\n  /** Header style options for a field or multiple fields  */\n  public headerStyle: ko.Computed<StyleOptions>;\n\n  // Rest of the options mimic the same options from ViewFieldRec.\n  public wrap: modelUtil.KoSaveableObservable<boolean|undefined>;\n  public widget: ko.Computed<string|undefined>;\n  public alignment: modelUtil.KoSaveableObservable<string|undefined>;\n  public fields: ko.PureComputed<ViewFieldRec[]>;\n  constructor(private _field: ViewFieldRec, private _docModel: DocModel) {\n    // Everything here will belong to a _field, this class is just a builder.\n    const owner = _field;\n\n    // Get all selected fields from the viewSection, if there is only one field\n    // selected (or the selection is empty) return it in an array.\n    this.fields = owner.autoDispose(ko.pureComputed(() => {\n      const list = this._field.viewSection().selectedFields();\n      if (!list || !list.length) {\n        return [_field];\n      }\n      // Make extra sure that field and column is not disposed, most of the knockout\n      // based entities, don't dispose their computed observables. As we keep references\n      // for them, it can happen that some of them are disposed while we are still\n      // computing something (mainly when columns are removed or restored using undo).\n      return list.filter(f => !f.isDisposed() && !f.column().isDisposed());\n    }));\n\n    // Just a helper field to see if we have multiple selected columns or not.\n    this.multiselect = owner.autoDispose(ko.pureComputed(() => this.fields().length > 1));\n\n    // Calculate if all columns share the same allowed widget list (like for Numeric type\n    // we have normal TextBox and Spinner). This will be used to allow the user to change\n    // this type if such columns are selected.\n    this.sameWidgets = owner.autoDispose(ko.pureComputed(() => {\n      const list = this.fields();\n      // If we have only one field selected, list is always the same.\n      if (list.length <= 1) { return true; }\n      // Now get all widget list and calculate intersection of the Sets.\n      // Widget types are just strings defined in UserType.\n      const widgets = list.map(c =>\n        Object.keys(UserType.typeDefs[c.column().pureType()]?.widgets ?? {})\n      );\n      return intersection(...widgets).length === widgets[0]?.length;\n    }));\n\n    // Changing widget type is not trivial, as we need to carefully reset all\n    // widget options to their default values, and there is a nuance there.\n    this.widget = owner.autoDispose(ko.pureComputed({\n      read: () => {\n        // For single column, just return its widget type.\n        if (!this.multiselect()) {\n          return this._field.widget();\n        }\n        // If all have the same value, return it, otherwise\n        // return a default value for this option \"undefined\"\n        const values = this.fields().map(f => f.widget());\n        if (allSame(values)) {\n          return values[0];\n        } else {\n          return undefined;\n        }\n      },\n      write: (widget) => {\n        // Go through all the fields, and reset them all.\n        for(const field of this.fields.peek()) {\n          // Reset the entire JSON, so that all options revert to their defaults.\n          const previous = field.widgetOptionsJson.peek();\n          // We don't need to bundle anything (actions send in the same tick, are bundled\n          // by default).\n          field.widgetOptionsJson.setAndSave({\n            widget,\n            // Persists color settings across widgets (note: we cannot use `field.fillColor` to get the\n            // current value because it returns a default value for `undefined`. Same for `field.textColor`.\n            fillColor: previous.fillColor,\n            textColor: previous.textColor,\n          }).catch(reportError);\n        }\n      }\n    }));\n\n    // Calculate common options for all column types (and their widgets).\n    // We will use this, to know which options are allowed to be changed\n    // when multiple columns are selected.\n    const commonOptions = owner.autoDispose(ko.pureComputed(() => {\n      const fields = this.fields();\n      // Put all options of first widget in the Set, and then remove\n      // them one by one, if they are not present in other fields.\n      let options: Set<string>|null = null;\n      for(const field of fields) {\n        // First get the data, and prepare initial set.\n        const widget = field.widget() || '';\n        const widgetOptions = UserType.typeDefs[field.column().pureType()]?.widgets[widget]?.options;\n        if (!widgetOptions) { continue; }\n        if (!options) { options = new Set(Object.keys(widgetOptions)); }\n        else {\n          // And now remove options that are not common.\n          const newOptions = new Set(Object.keys(widgetOptions));\n          for(const key of options) {\n            if (!newOptions.has(key)) {\n              options.delete(key);\n            }\n          }\n        }\n      }\n      return options ?? new Set();\n    }));\n\n    // Prepare our \"multi\" widgetOptionsJson, that can read and save\n    // options for multiple columns.\n    const options = modelUtil.savingComputed({\n      read: () => {\n        // For one column, just proxy this to the field.\n        if (!this.multiselect()) {\n          return this._field.widgetOptionsJson();\n        }\n        // Assemble final json object.\n        const result: any = {};\n        // First get all widgetOption jsons from all columns/fields.\n        const optionList = this.fields().map(f => f.widgetOptionsJson());\n        // And fill only those that are common\n        const common = commonOptions();\n        for(const key of common) {\n          // Setting null means that this options is there, but has no value.\n          result[key] = null;\n          // If all columns have the same value, use it.\n          if (allSame(optionList.map(v => v[key]))) {\n            result[key] = optionList[0][key] ?? null;\n          }\n        }\n        return result;\n      },\n      write: (setter, value) => {\n        if (!this.multiselect.peek()) {\n          return setter(this._field.widgetOptionsJson, value);\n        }\n        // When the creator panel is saving widgetOptions, it will pass\n        // our virtual widgetObject, which has nulls for mixed values.\n        // If this option wasn't changed (set), we don't want to save it.\n        value = {...value};\n        for(const key of Object.keys(value)) {\n          if (value[key] === null) {\n            delete value[key];\n          }\n        }\n        // Now update all options, for all fields, by amending the options\n        // object from the field/column.\n        for(const item of this.fields.peek()) {\n          const previous = item.widgetOptionsJson.peek();\n          setter(item.widgetOptionsJson, {\n            ...previous,\n            ...value,\n          });\n        }\n      }\n    });\n\n    // We need some additional information about each property.\n    this.options = owner.autoDispose(extendObservable(modelUtil.objObservable(options), {\n      // Property is not supported by set of columns if it is not a common option.\n      disabled: prop => ko.pureComputed(() => !commonOptions().has(prop)),\n      // Property has mixed value, if not all options are the same.\n      mixed: prop => ko.pureComputed(() => !allSame(this.fields().map(f => f.widgetOptionsJson.prop(prop)()))),\n      // Property has empty value, if all options are empty (are null, undefined, empty Array or empty Object).\n      empty: prop => ko.pureComputed(() => allEmpty(this.fields().map(f => f.widgetOptionsJson.prop(prop)()))),\n    }));\n\n    // This is repeated logic for wrap property in viewFieldRec,\n    // every field has wrapping implicitly set to true on a card view.\n    this.wrap = modelUtil.fieldWithDefault(\n      this.options.prop('wrap'),\n      () => this._field.viewSection().parentKey() !== 'record'\n    );\n\n    this.alignment = this.options.prop('alignment');\n\n    // Style options are a bit different, as they are saved when style picker is disposed.\n    // By the time it happens, fields may have changed (since user might have clicked some other column).\n    // To support this use case we need to compute a snapshot of fields, and use it to save style. Style\n    // picker will be rebuild every time fields change, and it will have access to last selected fields\n    // when it will be disposed.\n    this.style = ko.pureComputed(() => {\n      const fields = this.fields();\n      const multiSelect = fields.length > 1;\n      const savableOptions = modelUtil.savingComputed({\n        read: () => {\n          // For one column, just proxy this to the field.\n          if (!multiSelect) {\n            return this._field.widgetOptionsJson();\n          }\n          // Assemble final json object.\n          const result: any = {};\n          // First get all widgetOption jsons from all columns/fields.\n          const optionList = fields.map(f => f.widgetOptionsJson());\n          // And fill only those that are common\n          for(const key of ['textColor', 'fillColor', 'fontBold',\n                            'fontItalic', 'fontUnderline', 'fontStrikethrough']) {\n            // Setting null means that this options is there, but has no value.\n            result[key] = null;\n            // If all columns have the same value, use it.\n            if (allSame(optionList.map(v => v[key]))) {\n              result[key] = optionList[0][key] ?? null;\n            }\n          }\n          return result;\n        },\n        write: (setter, value) => {\n          if (!multiSelect) {\n            return setter(this._field.widgetOptionsJson, value);\n          }\n          // When the creator panel is saving widgetOptions, it will pass\n          // our virtual widgetObject, which has nulls for mixed values.\n          // If this option wasn't changed (set), we don't want to save it.\n          value = {...value};\n          for(const key of Object.keys(value)) {\n            if (value[key] === null) {\n              delete value[key];\n            }\n          }\n          // Now update all options, for all fields, by amending the options\n          // object from the field/column.\n          for(const item of fields) {\n            const previous = item.widgetOptionsJson.peek();\n            setter(item.widgetOptionsJson, {\n              ...previous,\n              ...value,\n            });\n          }\n        }\n      });\n      // Style picker needs to be able revert to previous value, if user cancels.\n      const state = fields.map(f => f.style.peek());\n      // We need some additional information about each property.\n      const result: StyleOptions = extendObservable(modelUtil.objObservable(savableOptions), {\n        // Property has mixed value, if not all options are the same.\n        mixed: prop => ko.pureComputed(() => !allSame(fields.map(f => f.widgetOptionsJson.prop(prop)()))),\n        // Property has empty value, if all options are empty (are null, undefined, empty Array or empty Object).\n        empty: prop => ko.pureComputed(() => allEmpty(fields.map(f => f.widgetOptionsJson.prop(prop)()))),\n      });\n      result.revert = () => { zip(fields, state).forEach(([f, s]) => f!.style(s!)); };\n      return result;\n    });\n\n    this.headerStyle = ko.pureComputed(() => {\n      const fields = this.fields();\n      const multiSelect = fields.length > 1;\n      const savableOptions = modelUtil.savingComputed({\n        read: () => {\n          // For one column, just proxy this to the field.\n          if (!multiSelect) {\n            return this._field.widgetOptionsJson();\n          }\n          // Assemble final json object.\n          const result: any = {};\n          // First get all widgetOption jsons from all columns/fields.\n          const optionList = fields.map(f => f.widgetOptionsJson());\n          // And fill only those that are common\n          for(const key of ['headerTextColor', 'headerFillColor', 'headerFontBold',\n                            'headerFontItalic', 'headerFontUnderline', 'headerFontStrikethrough']) {\n            // Setting null means that this options is there, but has no value.\n            result[key] = null;\n            // If all columns have the same value, use it.\n            if (allSame(optionList.map(v => v[key]))) {\n              result[key] = optionList[0][key] ?? null;\n            }\n          }\n          return result;\n        },\n        write: (setter, value) => {\n          if (!multiSelect) {\n            return setter(this._field.widgetOptionsJson, value);\n          }\n          // When the creator panel is saving widgetOptions, it will pass\n          // our virtual widgetObject, which has nulls for mixed values.\n          // If this option wasn't changed (set), we don't want to save it.\n          value = {...value};\n          for(const key of Object.keys(value)) {\n            if (value[key] === null) {\n              delete value[key];\n            }\n          }\n          // Now update all options, for all fields, by amending the options\n          // object from the field/column.\n          for(const item of fields) {\n            const previous = item.widgetOptionsJson.peek();\n            setter(item.widgetOptionsJson, {\n              ...previous,\n              ...value,\n            });\n          }\n        }\n      });\n      // Style picker needs to be able revert to previous value, if user cancels.\n      const state = fields.map(f => f.headerStyle.peek());\n      // We need some additional information about each property.\n      const result: StyleOptions = extendObservable(modelUtil.objObservable(savableOptions), {\n        // Property has mixed value, if not all options are the same.\n        mixed: prop => ko.pureComputed(() => !allSame(fields.map(f => f.widgetOptionsJson.prop(prop)()))),\n        // Property has empty value, if all options are empty (are null, undefined, empty Array or empty Object).\n        empty: prop => ko.pureComputed(() => allEmpty(fields.map(f => f.widgetOptionsJson.prop(prop)()))),\n      });\n      result.revert = () => { zip(fields, state).forEach(([f, s]) => f!.headerStyle(s!)); };\n      return result;\n    });\n  }\n\n  // Helper for Choice/ChoiceList columns, that saves widget options and renames values in a document\n  // in one bundle\n  public async updateChoices(renames: Record<string, string>, options: any){\n    const hasRenames = !!Object.entries(renames).length;\n    const tableId = this._field.column.peek().table.peek().tableId.peek();\n    if (this.multiselect.peek()) {\n      this._field.config.options.update(options);\n      const colIds = this.fields.peek().map(f => f.colId.peek());\n      return this._docModel.docData.bundleActions(\"Update choices configuration\", () => Promise.all([\n        this._field.config.options.save(),\n        !hasRenames ? null : this._docModel.docData.sendActions(\n          colIds.map(colId => [\"RenameChoices\", tableId, colId, renames])\n        )\n      ]));\n    } else {\n      const column = this._field.column.peek();\n      // In case this column is being transformed - using Apply Formula to Data, bundle the action\n      // together with the transformation.\n      const actionOptions = {nestInActiveBundle: column.isTransforming.peek()};\n      this._field.widgetOptionsJson.update(options);\n      return this._docModel.docData.bundleActions(\"Update choices configuration\", () => Promise.all([\n        this._field.widgetOptionsJson.save(),\n        !hasRenames ? null\n        : this._docModel.docData.sendAction([\"RenameChoices\", tableId, column.colId.peek(), renames])\n      ]), actionOptions);\n    }\n\n  }\n}\n\n/**\n * Deeply checks that all elements in a list are equal. Equality is checked by first\n * converting \"empty like\" elements to null and then deeply comparing the elements.\n */\nfunction allSame(arr: any[]) {\n  if (arr.length <= 1) { return true; }\n  const first = ifNotSet(arr[0], null);\n  const same = arr.every(next => {\n    return isEqual(ifNotSet(next, null), first);\n  });\n  return same;\n}\n\n/**\n * Checks if every item in a list is empty (empty like in empty string, null, undefined, empty Array or Object)\n */\nfunction allEmpty(arr: any[]) {\n  if (arr.length === 0) { return true; }\n  return arr.every(item => ifNotSet(item, null) === null);\n}\n\n/**\n * Extended version of widget options observable that contains information about mixed and empty values.\n */\ntype CommonOptions = modelUtil.SaveableObjObservable<any> & {\n  disabled(prop: string): ko.Computed<boolean>,\n  mixed(prop: string): ko.Computed<boolean>,\n  empty(prop: string): ko.Computed<boolean>,\n}\n\n/**\n * Extended version of widget options observable that contains information about mixed and empty styles, and supports\n * reverting to a previous value.\n */\ntype StyleOptions = modelUtil.SaveableObjObservable<any> & {\n  mixed(prop: string): ko.Computed<boolean>,\n  empty(prop: string): ko.Computed<boolean>,\n  revert(): void;\n}\n\n// This is helper that adds disabled computed to an ObjObservable, it follows\n// the same pattern as `prop` helper.\nfunction extendObservable(\n  obs: modelUtil.SaveableObjObservable<any>,\n  options: { [key: string]: (prop: string) => ko.PureComputed<boolean> }\n) {\n  const result = obs as any;\n  for(const key of Object.keys(options)) {\n    const cacheKey = `__${key}`;\n    result[cacheKey] = new Map();\n    result[key] = (prop: string) => {\n      if (!result[cacheKey].has(prop)) {\n        result[cacheKey].set(prop, options[key](prop));\n      }\n      return result[cacheKey].get(prop);\n    };\n  }\n\n  return result;\n}\n","import { reportError } from 'app/client/models/errors';\nimport { GristDoc } from 'app/client/components/GristDoc';\nimport { DocData } from 'app/client/models/DocData';\nimport { TableData } from 'app/client/models/TableData';\nimport { concatenateSummaries, summarizeStoredAndUndo } from 'app/common/ActionSummarizer';\nimport { TableDelta } from 'app/common/ActionSummary';\nimport { ProcessedAction } from 'app/common/AlternateActions';\nimport { DisposableWithEvents } from 'app/common/DisposableWithEvents';\nimport { DocAction, TableDataAction, UserAction } from 'app/common/DocActions';\nimport { DocDataCache } from 'app/common/DocDataCache';\nimport { ColTypeMap } from 'app/common/TableData';\nimport { RowRecord } from 'app/plugin/GristData';\nimport debounce = require('lodash/debounce');\n\n/**\n * An interface for use while editing a virtual table.\n * This is the interface passed to beforeEdit and afterEdit callbacks.\n * The getRecord method gives access to the record prior to the edit;\n * the getRecordNew method gives access to (an internal copy of)\n * the record after the edit.\n * The same interface is passed in other places, in which case\n * actions and delta are trivial.\n */\nexport interface IEdit {\n  gristDoc: GristDoc,\n  actions: ProcessedAction[],  // UserActions plus corresponding DocActions (forward and undo).\n  delta: TableDelta,           // A summary of the effect actions would have (or had).\n\n  /**\n   * Apply a set of actions. The result is from the store backing the\n   * virtual table. Will not trigger beforeEdit or afterEdit callbacks.\n   */\n  patch(actions: UserAction[]): Promise<ProcessedAction[]>;\n\n  getRecord(rowId: number): RowRecord|undefined;     // A record in the table.\n  getRecordNew(rowId: number): RowRecord|undefined;  // A record in the table, after the edit.\n  getRowIds(): readonly number[];  // All rowIds in the table.\n}\n\n/**\n * Interface with a back-end for a specific virtual table.\n */\nexport interface IExternalTable {\n  name: string;  // the tableId of the virtual table (e.g. GristHidden_WebhookTable)\n  initialActions: DocAction[];  // actions to create the table.\n  fetchAll(): Promise<TableDataAction>;  // get initial state of the table.\n  sync(editor: IEdit): Promise<void>;    // incorporate external changes.\n  beforeEdit(editor: IEdit): Promise<void>;  // called prior to committing a change.\n  afterEdit(editor: IEdit): Promise<void>;   // called after committing a change.\n  afterAnySchemaChange(editor: IEdit): Promise<void>;  // called after any schema change in the document.\n}\n\n// A counter to generate unique actionNums for undo actions.\nlet _counterForUndoActions: number = 1;\n\n/**\n * A flavor of TableData that is backed by external operations and local cache.\n * This lets virtual tables \"fit in\" to a DocData instance.\n */\nexport class VirtualTableData extends TableData {\n\n  public gristDoc: GristDoc;\n  public ext: IExternalTable;\n  public cache: DocDataCache;\n\n  constructor(docData: DocData, tableId: string, tableData: TableDataAction|null, columnTypes: ColTypeMap) {\n    super(docData, tableId, tableData, columnTypes);\n  }\n\n  public setExt(_ext: IExternalTable) {\n    this.ext = _ext;\n    this.cache = new DocDataCache(this.ext.initialActions);\n  }\n\n  public get name() {\n    return this.ext.name;\n  }\n\n  public fetchData() {\n    return super.fetchData(async () => {\n      const data = await this.ext.fetchAll();\n      this.cache.docData.getTable(this.name)?.loadData(data);\n      return data;\n    });\n  }\n\n  public async sendTableActions(userActions: UserAction[]): Promise<any[]> {\n    const actions = await this._sendTableActionsCore(userActions,\n                                                     {isUser: true});\n    await this.ext.afterEdit(this._editor(actions));\n    return actions.map(action => action.retValues);\n  }\n\n  public sync() {\n    return this.ext.sync(this._editor());\n  }\n\n  public async sendTableAction(action: UserAction): Promise<any> {\n    const retValues = await this.sendTableActions([action]);\n    return retValues[0];\n  }\n\n  public async schemaChange() {\n    await this.ext.afterAnySchemaChange(this._editor());\n  }\n\n  private _editor(actions: ProcessedAction[] = []): IEdit {\n    const summary = concatenateSummaries(\n      actions\n        .map(action => summarizeStoredAndUndo(action.stored, action.undo)));\n    const delta = summary.tableDeltas[this.name];\n    return {\n      actions,\n      delta,\n      gristDoc: this.gristDoc,\n      getRecord: rowId => this.getRecord(rowId),\n      getRecordNew: rowId => this.getRecord(rowId),\n      getRowIds: () => this.getRowIds(),\n      patch: userActions => this._sendTableActionsCore(userActions, {\n        hasTableIds: true,\n        isUser: false,\n      })\n    };\n  }\n\n  private async _sendTableActionsCore(userActions: UserAction[], options: {\n    isUser: boolean,\n    isUndo?: boolean,\n    hasTableIds?: boolean,\n    actionNum?: any,\n  }): Promise<ProcessedAction[]> {\n    const {isUndo, isUser, hasTableIds} = options;\n    if (!hasTableIds) {\n      userActions.forEach((action) => action.splice(1, 0, this.tableId));\n    }\n    const actions = await this.cache.sendTableActions(userActions);\n    if (isUser) {\n      const newTable = await this.cache.docData.requireTable(this.name);\n      try {\n        await this.ext.beforeEdit({\n          ...this._editor(actions),\n          getRecordNew: rowId => newTable.getRecord(rowId),\n        });\n      } catch (e) {\n        actions.reverse();\n        for (const action of actions) {\n          await this.cache.sendTableActions(action.undo);\n        }\n        throw e;\n      }\n    }\n\n    for (const action of actions) {\n      for (const docAction of action.stored) {\n        this.docData.receiveAction(docAction);\n        this.cache.docData.receiveAction(docAction);\n        if (isUser) {\n          const code = `ext-${this.name}-${_counterForUndoActions}`;\n          _counterForUndoActions++;\n          this.gristDoc.getUndoStack().pushAction({\n            actionNum: code,\n            actionHash: 'hash',\n            fromSelf: true,\n            otherId: options.actionNum || 0,\n            linkId: 0,\n            rowIdHint: 0,\n            isUndo,\n            action,\n            op: this._doUndo.bind(this),\n          } as any);\n        }\n      }\n    }\n    return actions;\n  }\n\n\n  private async _doUndo(actionGroup: {\n    action: ProcessedAction,\n    actionNum: number|string,\n  }, isUndo: boolean) {\n    await this._sendTableActionsCore(\n      isUndo ? actionGroup.action.undo : actionGroup.action.stored,\n      {\n        isUndo,\n        isUser: true,\n        actionNum: actionGroup.actionNum,\n        hasTableIds: true,\n      });\n  }\n}\n\n/**\n * Everything needed to run a virtual table. Contains a tableData instance.\n * Subscribes to schema changes. Offers a debouncing lazySync method that\n * will attempt to synchronize the virtual table with the external source\n * one second after last call (or at most 2 seconds after the first\n * call).\n */\nexport class VirtualTable {\n  public lazySync = debounce(this.sync, 1000, {\n    maxWait: 2000,\n    trailing: true,\n  });\n  public tableData: VirtualTableData;\n\n  public constructor(private _owner: DisposableWithEvents,\n                     _gristDoc: GristDoc,\n                     _ext: IExternalTable) {\n    if (!_gristDoc.docModel.docData.getTable(_ext.name)) {\n\n      // register the virtual table\n      _gristDoc.docModel.docData.registerVirtualTable(_ext.name, VirtualTableData);\n\n      // then process initial actions\n      for (const action of _ext.initialActions) {\n        _gristDoc.docData.receiveAction(action);\n      }\n\n      // pass in gristDoc and external interface\n      this.tableData = _gristDoc.docModel.docData.getTable(_ext.name)! as VirtualTableData;\n      //this.tableData.docApi = this.docApi;\n      this.tableData.gristDoc = _gristDoc;\n      this.tableData.setExt(_ext);\n\n      // subscribe to schema changes\n      this.tableData.schemaChange().catch(e => reportError(e));\n      _owner.listenTo(_gristDoc, 'schemaUpdateAction', () => this.tableData.schemaChange());\n    } else {\n      this.tableData = _gristDoc.docModel.docData.getTable(_ext.name)! as VirtualTableData;\n    }\n    // debounce is typed as returning a promise, but doesn't appear to actually do so?\n    Promise.resolve(this.lazySync()).catch(e => reportError(e));\n  }\n\n  public async sync() {\n    if (this._owner.isDisposed()) {\n      return;\n    }\n    await this.tableData.sync();\n  }\n}\n","import {DocModel, IRowModel} from 'app/client/models/DocModel';\n\nexport type ACLRuleRec = IRowModel<\"_grist_ACLRules\">;\n\nexport function createACLRuleRec(this: ACLRuleRec, docModel: DocModel): void {\n  // currently don't care much about content.\n}\n","import {isCensored} from 'app/common/gristTypes';\nimport * as ko from 'knockout';\nimport {KoArray} from 'app/client/lib/koArray';\nimport {jsonObservable} from 'app/client/models/modelUtil';\nimport * as modelUtil from 'app/client/models/modelUtil';\nimport {ColumnRec, DocModel, IRowModel, recordSet, refRecord, TableRec} from 'app/client/models/DocModel';\n\n\nexport interface CellRec extends IRowModel<\"_grist_Cells\"> {\n  column: ko.Computed<ColumnRec>;\n  table: ko.Computed<TableRec>;\n  children: ko.Computed<KoArray<CellRec>>;\n  hidden: ko.Computed<boolean>;\n  parent: ko.Computed<CellRec>;\n\n  text: modelUtil.KoSaveableObservable<string|undefined>;\n  userName: modelUtil.KoSaveableObservable<string|undefined>;\n  timeCreated: modelUtil.KoSaveableObservable<number|undefined>;\n  timeUpdated: modelUtil.KoSaveableObservable<number|undefined>;\n  resolved: modelUtil.KoSaveableObservable<boolean|undefined>;\n  resolvedBy: modelUtil.KoSaveableObservable<string|undefined>;\n}\n\nexport function createCellRec(this: CellRec, docModel: DocModel): void {\n  this.hidden = ko.pureComputed(() => isCensored(this.content()));\n  this.column = refRecord(docModel.columns, this.colRef);\n  this.table = refRecord(docModel.tables, this.tableRef);\n  this.parent = refRecord(docModel.cells, this.parentId);\n  this.children = recordSet(this, docModel.cells, 'parentId');\n  const properContent = modelUtil.savingComputed({\n    read: () => this.hidden() ? '{}' : this.content(),\n    write: (setter, val) => setter(this.content, val)\n  });\n  const optionJson = jsonObservable(properContent);\n\n  // Comments:\n  this.text = optionJson.prop('text');\n  this.userName = optionJson.prop('userName');\n  this.timeCreated = optionJson.prop('timeCreated');\n  this.timeUpdated = optionJson.prop('timeUpdated');\n  this.resolved = optionJson.prop('resolved');\n  this.resolvedBy = optionJson.prop('resolvedBy');\n}\n","import {KoArray} from 'app/client/lib/koArray';\nimport {localStorageJsonObs} from 'app/client/lib/localStorageObs';\nimport {CellRec, DocModel, IRowModel, recordSet,\n        refRecord, TableRec, ViewFieldRec} from 'app/client/models/DocModel';\nimport {urlState} from 'app/client/models/gristUrlState';\nimport {jsonObservable, ObjObservable} from 'app/client/models/modelUtil';\nimport {AssistanceState} from 'app/common/AssistancePrompts';\nimport * as gristTypes from 'app/common/gristTypes';\nimport {getReferencedTableId} from 'app/common/gristTypes';\nimport {\n  BaseFormatter,\n  createFullFormatterRaw,\n  createVisibleColFormatterRaw,\n  FullFormatterArgs\n} from 'app/common/ValueFormatter';\nimport {createParser} from 'app/common/ValueParser';\nimport {Observable} from 'grainjs';\nimport * as ko from 'knockout';\nimport {v4 as uuidv4} from 'uuid';\n\n// Column behavior type, used primarily in the UI.\nexport type BEHAVIOR = \"empty\"|\"formula\"|\"data\";\n\n// Represents a column in a user-defined table.\nexport interface ColumnRec extends IRowModel<\"_grist_Tables_column\"> {\n  table: ko.Computed<TableRec>;\n  widgetOptionsJson: ObjObservable<any>;\n  viewFields: ko.Computed<KoArray<ViewFieldRec>>;\n  summarySource: ko.Computed<ColumnRec>;\n\n  // Is an empty column (undecided if formula or data); denoted by an empty formula.\n  isEmpty: ko.Computed<boolean>;\n\n  // Is a real formula column (not an empty column; i.e. contains a non-empty formula).\n  isRealFormula: ko.Computed<boolean>;\n\n  // Is a trigger formula column (not formula, but contains non-empty formula)\n  hasTriggerFormula: ko.Computed<boolean>;\n\n  // Used for transforming a column.\n  // Reference to the original column for a transform column, or to itself for a non-transforming column.\n  origColRef: ko.Observable<number>;\n  origCol: ko.Computed<ColumnRec>;\n  // Indicates whether a column is transforming. Manually set, but should be true in both the original\n  // column being transformed and that column's transform column.\n  isTransforming: ko.Observable<boolean>;\n\n  // Convenience observable to obtain and set the type with no suffix\n  pureType: ko.Computed<string>;\n\n  // Column behavior as seen by the user.\n  behavior: ko.Computed<BEHAVIOR>;\n\n  // The column's display column\n  _displayColModel: ko.Computed<ColumnRec>;\n\n  // Display col ref to use for the column, defaulting to the plain column itself.\n  displayColRef: ko.Computed<number>;\n\n  // The display column to use for the column, or the column itself when no displayCol is set.\n  displayColModel: ko.Computed<ColumnRec>;\n  visibleColModel: ko.Computed<ColumnRec>;\n\n  disableModifyBase: ko.Computed<boolean>;    // True if column config can't be modified (name, type, etc.)\n  disableModify: ko.Computed<boolean>;        // True if column can't be modified (is summary) or is being transformed.\n  disableEditData: ko.Computed<boolean>;      // True to disable editing of the data in this column.\n\n  isHiddenCol: ko.Computed<boolean>;\n\n  // Returns the rowModel for the referenced table, or null, if is not a reference column.\n  refTable: ko.Computed<TableRec|null>;\n\n  // Helper for Reference/ReferenceList columns, which returns a formatter according\n  // to the visibleCol associated with column.\n  visibleColFormatter: ko.Computed<BaseFormatter>;\n\n  // A formatter for values of this column.\n  // The difference between visibleColFormatter and formatter is especially important for ReferenceLists:\n  // `visibleColFormatter` is for individual elements of a list, sometimes hypothetical\n  // (i.e. they aren't actually referenced but they exist in the visible column and are relevant to e.g. autocomplete)\n  // `formatter` formats actual cell values, e.g. a whole list from the display column.\n  formatter: ko.Computed<BaseFormatter>;\n  cells: ko.Computed<KoArray<CellRec>>;\n\n  /**\n   * Current history of chat. This is a temporary array used only in the ui.\n   */\n  chatHistory: ko.PureComputed<Observable<ChatHistory>>;\n\n  // Helper which adds/removes/updates column's displayCol to match the formula.\n  saveDisplayFormula(formula: string): Promise<void>|undefined;\n\n  createValueParser(): (value: string) => any;\n}\n\nexport function createColumnRec(this: ColumnRec, docModel: DocModel): void {\n  this.table = refRecord(docModel.tables, this.parentId);\n  this.widgetOptionsJson = jsonObservable(this.widgetOptions);\n  this.viewFields = recordSet(this, docModel.viewFields, 'colRef');\n  this.summarySource = refRecord(docModel.columns, this.summarySourceCol);\n  this.cells = recordSet(this, docModel.cells, 'colRef');\n\n  // Is this an empty column (undecided if formula or data); denoted by an empty formula.\n  this.isEmpty = ko.pureComputed(() => this.isFormula() && this.formula() === '');\n\n  // Is this a real formula column (not an empty column; i.e. contains a non-empty formula).\n  this.isRealFormula = ko.pureComputed(() => this.isFormula() && this.formula() !== '');\n  // If this column has a trigger formula defined\n  this.hasTriggerFormula = ko.pureComputed(() => !this.isFormula() && this.formula() !== '');\n\n  // Used for transforming a column.\n  // Reference to the original column for a transform column, or to itself for a non-transforming column.\n  this.origColRef = ko.observable(this.getRowId());\n  this.origCol = refRecord(docModel.columns, this.origColRef);\n  // Indicates whether a column is transforming. Manually set, but should be true in both the original\n  // column being transformed and that column's transform column.\n  this.isTransforming = ko.observable(false);\n\n  // Convenience observable to obtain and set the type with no suffix\n  this.pureType = ko.pureComputed(() => gristTypes.extractTypeFromColType(this.type()));\n\n  // The column's display column\n  this._displayColModel = refRecord(docModel.columns, this.displayCol);\n\n  // Helper which adds/removes/updates this column's displayCol to match the formula.\n  this.saveDisplayFormula = function(formula) {\n    if (formula !== (this._displayColModel().formula() || '')) {\n      return docModel.docData.sendAction([\"SetDisplayFormula\", this.table().tableId(),\n        null, this.getRowId(), formula]);\n    }\n  };\n\n  // Display col ref to use for the column, defaulting to the plain column itself.\n  this.displayColRef = ko.pureComputed(() => this.displayCol() || this.origColRef());\n\n  // The display column to use for the column, or the column itself when no displayCol is set.\n  this.displayColModel = refRecord(docModel.columns, this.displayColRef);\n  this.visibleColModel = refRecord(docModel.columns, this.visibleCol);\n\n  this.disableModifyBase = ko.pureComputed(() => Boolean(this.summarySourceCol()));\n  this.disableModify = ko.pureComputed(() => this.disableModifyBase() || this.isTransforming());\n  this.disableEditData = ko.pureComputed(() => Boolean(this.summarySourceCol()));\n\n  this.isHiddenCol = ko.pureComputed(() => gristTypes.isHiddenCol(this.colId()));\n\n  // Returns the rowModel for the referenced table, or null, if this is not a reference column.\n  this.refTable = ko.pureComputed(() => {\n    const refTableId = getReferencedTableId(this.type() || \"\");\n    return refTableId ? docModel.visibleTables.all().find(t => t.tableId() === refTableId) || null : null;\n  });\n\n  // Helper for Reference/ReferenceList columns, which returns a formatter according to the visibleCol\n  // associated with this column. If no visible column available, return formatting for the column itself.\n  this.visibleColFormatter = ko.pureComputed(() => formatterForRec(this, this, docModel, 'vcol'));\n\n  this.formatter = ko.pureComputed(() => formatterForRec(this, this, docModel, 'full'));\n\n  this.createValueParser = function() {\n    const parser = createParser(docModel.docData, this.id.peek());\n    return parser.cleanParse.bind(parser);\n  };\n\n  this.behavior = ko.pureComputed(() => this.isEmpty() ? 'empty' : this.isFormula() ? 'formula' : 'data');\n\n  this.chatHistory = this.autoDispose(ko.computed(() => {\n    const docId = urlState().state.get().doc ?? '';\n    // Changed key name from history to history-v2 when ChatHistory changed in incompatible way.\n    const key = `formula-assistant-history-v2-${docId}-${this.table().tableId()}-${this.colId()}`;\n    return localStorageJsonObs(key, {messages: [], conversationId: uuidv4()} as ChatHistory);\n  }));\n}\n\nexport function formatterForRec(\n  rec: ColumnRec | ViewFieldRec, colRec: ColumnRec, docModel: DocModel, kind: 'full' | 'vcol'\n): BaseFormatter {\n  const vcol = rec.visibleColModel();\n  const func = kind === 'full' ? createFullFormatterRaw : createVisibleColFormatterRaw;\n  const args: FullFormatterArgs = {\n    docData: docModel.docData,\n    type: colRec.type(),\n    widgetOpts: rec.widgetOptionsJson(),\n    visibleColType: vcol?.type(),\n    visibleColWidgetOpts: vcol?.widgetOptionsJson(),\n    docSettings: docModel.docInfoRow.documentSettingsJson(),\n  };\n  return func(args);\n}\n\n/**\n * A chat message. Either send by the user or by the AI.\n */\nexport interface ChatMessage {\n  /**\n   * The message to display. It is a prompt typed by the user or a formula returned from the AI.\n   */\n  message: string;\n  /**\n   * The sender of the message. Either the user or the AI.\n   */\n  sender: 'user' | 'ai';\n  /**\n   * The formula returned from the AI. It is only set when the sender is the AI.\n   */\n  formula?: string|null;\n  /**\n   * Suggested actions returned from the AI.\n   */\n  action?: any;\n}\n\n/**\n * The state of assistance for a particular column.\n * ChatMessages are what are shown in the UI, whereas state is\n * how the back-end represents the conversation. The two are\n * similar but not the same because of post-processing.\n * It may be possible to reconcile them when things settle down\n * a bit?\n */\nexport interface ChatHistory {\n  messages: ChatMessage[];\n  conversationId?: string;\n  state?: AssistanceState;\n}\n","import {DocModel, IRowModel} from 'app/client/models/DocModel';\nimport * as modelUtil from 'app/client/models/modelUtil';\nimport {jsonObservable} from 'app/client/models/modelUtil';\nimport {DocumentSettings} from 'app/common/DocumentSettings';\nimport * as ko from 'knockout';\n\n// The document-wide metadata. It's all contained in a single record with id=1.\nexport interface DocInfoRec extends IRowModel<\"_grist_DocInfo\"> {\n  documentSettingsJson: modelUtil.SaveableObjObservable<DocumentSettings>\n  defaultViewId: ko.Computed<number>;\n  newDefaultViewId: ko.Computed<number>;\n}\n\nexport function createDocInfoRec(this: DocInfoRec, docModel: DocModel): void {\n  this.documentSettingsJson = jsonObservable(this.documentSettings);\n  this.defaultViewId = this.autoDispose(ko.pureComputed(() => {\n    const tab = docModel.allTabs.at(0);\n    return tab ? tab.viewRef() : 0;\n  }));\n  this.newDefaultViewId = this.autoDispose(ko.pureComputed(() => {\n    const page = docModel.visibleDocPages()[0];\n    return page ? page.viewRef() : 0;\n  }));\n}\n","import {ColumnRec, DocModel, IRowModel, refRecord, ViewSectionRec} from 'app/client/models/DocModel';\nimport * as modelUtil from 'app/client/models/modelUtil';\nimport * as ko from 'knockout';\n\n// Represents a column filter for a view section.\nexport interface FilterRec extends IRowModel<\"_grist_Filters\"> {\n  viewSection: ko.Computed<ViewSectionRec>;\n  column: ko.Computed<ColumnRec>;\n\n  // Observable for the parsed filter object.\n  activeFilter: modelUtil.CustomComputed<string>;\n}\n\nexport function createFilterRec(this: FilterRec, docModel: DocModel): void {\n  this.viewSection = refRecord(docModel.viewSections, this.viewSectionRef);\n  this.column = refRecord(docModel.columns, this.colRef);\n\n  // Observable for the active filter that's initialized from the value saved to the server.\n  this.activeFilter = modelUtil.customComputed({\n    read: () => { const f = this.filter(); return f === 'null' ? '' : f; }, // To handle old empty filters.\n  });\n}\n","import {DocModel, IRowModel, refRecord, ViewRec} from 'app/client/models/DocModel';\nimport * as ko from 'knockout';\n\n// Represents a page entry in the tree of pages.\nexport interface PageRec extends IRowModel<\"_grist_Pages\"> {\n  view: ko.Computed<ViewRec>;\n  isHidden: ko.Computed<boolean>;\n  isCensored: ko.Computed<boolean>;\n  isSpecial: ko.Computed<boolean>;\n}\n\nexport function createPageRec(this: PageRec, docModel: DocModel): void {\n  this.view = refRecord(docModel.views, this.viewRef);\n  // Page is hidden when any of this is true:\n  // - It has an empty name (or no name at all)\n  // - It is GristDocTour (unless user wants to see it)\n  // - It is GristDocTutorial (unless user should see it)\n  // - It is a page generated for a hidden table TODO: Follow up - don't create\n  //   pages for hidden tables.\n  // This is used currently only the left panel, to hide pages from the user.\n  this.isCensored = ko.pureComputed(() => !this.view().name());\n  this.isSpecial = ko.pureComputed(() => {\n    const name = this.view().name();\n    const isTableHidden = () => {\n      const viewId = this.view().id();\n      const tables = docModel.rawDataTables.all();\n      const primaryTable = tables.find(t => t.primaryViewId() === viewId);\n      return !!primaryTable && primaryTable.tableId()?.startsWith(\"GristHidden_\");\n    };\n    return (\n      (name === 'GristDocTour' && !docModel.showDocTourTable) ||\n      (name === 'GristDocTutorial' && !docModel.showDocTutorialTable) ||\n      isTableHidden()\n    );\n  });\n  this.isHidden = ko.pureComputed(() => {\n    return this.isCensored() || this.isSpecial();\n  });\n}\n","import {DocModel, IRowModel, refRecord, ViewRec} from 'app/client/models/DocModel';\nimport * as ko from 'knockout';\n\n// Represents a page entry in the tree of pages.\nexport interface TabBarRec extends IRowModel<\"_grist_TabBar\"> {\n  view: ko.Computed<ViewRec>;\n}\n\nexport function createTabBarRec(this: TabBarRec, docModel: DocModel): void {\n  this.view = refRecord(docModel.views, this.viewRef);\n}\n","import {KoArray} from 'app/client/lib/koArray';\nimport {DocModel, IRowModel, recordSet, refRecord, ViewSectionRec} from 'app/client/models/DocModel';\nimport {ColumnRec, ValidationRec, ViewRec} from 'app/client/models/DocModel';\nimport * as modelUtil from 'app/client/models/modelUtil';\nimport {summaryGroupByDescription} from 'app/common/ActiveDocAPI';\nimport {MANUALSORT} from 'app/common/gristTypes';\nimport * as ko from 'knockout';\nimport randomcolor from 'randomcolor';\n\n// Represents a user-defined table.\nexport interface TableRec extends IRowModel<\"_grist_Tables\"> {\n  columns: ko.Computed<KoArray<ColumnRec>>;\n  validations: ko.Computed<KoArray<ValidationRec>>;\n\n  primaryView: ko.Computed<ViewRec>;\n  rawViewSection: ko.Computed<ViewSectionRec>;\n  summarySource: ko.Computed<TableRec>;\n\n  // A Set object of colRefs for all summarySourceCols of table.\n  summarySourceColRefs: ko.Computed<Set<number>>;\n\n  // tableId for normal tables, or tableId of the source table for summary tables.\n  primaryTableId: ko.Computed<string>;\n\n  // The list of grouped by columns.\n  groupByColumns: ko.Computed<ColumnRec[]>;\n  // Grouping description.\n  groupDesc: ko.PureComputed<string>;\n  // Name of the data table - title of the rawViewSection\n  // for summary table it is name of primary table.\n  tableName: modelUtil.KoSaveableObservable<string>;\n  // Table name with a default value (which is tableId).\n  tableNameDef: modelUtil.KoSaveableObservable<string>;\n  // Like tableNameDef, but formatted to be more suitable for displaying to\n  // users (e.g. including group columns for summary tables).\n  formattedTableName: ko.PureComputed<string>;\n  // If user can select this table in various places.\n  // Note: Some hidden tables can still be visible on RawData view.\n  isHidden: ko.Computed<boolean>;\n\n  tableColor: string;\n  disableAddRemoveRows: ko.Computed<boolean>;\n  supportsManualSort: ko.Computed<boolean>;\n}\n\nexport function createTableRec(this: TableRec, docModel: DocModel): void {\n  this.columns = recordSet(this, docModel.columns, 'parentId', {sortBy: 'parentPos'});\n  this.validations = recordSet(this, docModel.validations, 'tableRef');\n\n  this.primaryView = refRecord(docModel.views, this.primaryViewId);\n  this.rawViewSection = refRecord(docModel.viewSections, this.rawViewSectionRef);\n  this.summarySource = refRecord(docModel.tables, this.summarySourceTable);\n  this.isHidden = this.autoDispose(\n    // This is repeated logic from isHiddenTable.\n    ko.pureComputed(() => !this.tableId() || !!this.summarySourceTable() || this.tableId().startsWith(\"GristHidden_\"))\n  );\n\n  // A Set object of colRefs for all summarySourceCols of this table.\n  this.summarySourceColRefs = this.autoDispose(ko.pureComputed(() => new Set(\n    this.columns().all().map(c => c.summarySourceCol()).filter(colRef => colRef))));\n\n  // tableId for normal tables, or tableId of the source table for summary tables.\n  this.primaryTableId = ko.pureComputed(() =>\n    this.summarySourceTable() ? this.summarySource().tableId() : this.tableId());\n\n  this.groupByColumns = ko.pureComputed(() => this.columns().all().filter(c => c.summarySourceCol()));\n\n  this.groupDesc = ko.pureComputed(() => {\n    if (!this.summarySourceTable()) {\n      return '';\n    }\n    return summaryGroupByDescription(this.groupByColumns().map(c => c.label()));\n  });\n\n  // TODO: We should save this value and let users change it.\n  this.tableColor = randomcolor({\n    luminosity: 'light',\n    seed: typeof this.id() === 'number' ? 5 * this.id() : this.id()\n  });\n\n  this.disableAddRemoveRows = ko.pureComputed(() => Boolean(this.summarySourceTable()));\n\n  this.supportsManualSort = ko.pureComputed(() => this.columns().all().some(c => c.colId() === MANUALSORT));\n\n  this.tableName = modelUtil.savingComputed({\n    read: () => {\n      if (this.isDisposed()) {\n        return '';\n      }\n      if (this.summarySourceTable()) {\n        return this.summarySource().rawViewSection().title();\n      } else {\n        // Need to be extra careful here, rawViewSection might be disposed.\n        if (this.rawViewSection().isDisposed()) {\n          return '';\n        }\n        return this.rawViewSection().title();\n      }\n    },\n    write: (setter, val) => {\n      if (this.summarySourceTable()) {\n        setter(this.summarySource().rawViewSection().title, val);\n      } else {\n        setter(this.rawViewSection().title, val);\n      }\n    }\n  });\n  this.tableNameDef = modelUtil.fieldWithDefault(\n    this.tableName,\n    // TableId will be null/undefined when ACL will restrict access to it.\n    ko.computed(() => {\n      // During table removal, we could be disposed.\n      if (this.isDisposed()) {\n        return '';\n      }\n      const table = this.summarySourceTable() ? this.summarySource() : this;\n      return table.tableId() || '';\n    })\n  );\n  this.formattedTableName = ko.pureComputed(() => {\n    return this.summarySourceTable()\n      ? `${this.tableNameDef()} ${this.groupDesc()}`\n      : this.tableNameDef();\n  });\n}\n","import {DocModel, IRowModel} from 'app/client/models/DocModel';\n\n// Represents a validation rule.\nexport type ValidationRec = IRowModel<\"_grist_Validations\">\n\nexport function createValidationRec(this: ValidationRec, docModel: DocModel): void {\n  // no extra fields\n}\n","import {ColumnRec, DocModel, IRowModel, refListRecords, refRecord, ViewSectionRec} from 'app/client/models/DocModel';\nimport {formatterForRec} from 'app/client/models/entities/ColumnRec';\nimport * as modelUtil from 'app/client/models/modelUtil';\nimport {removeRule, RuleOwner} from 'app/client/models/RuleOwner';\nimport { HeaderStyle, Style } from 'app/client/models/Styles';\nimport {ViewFieldConfig} from 'app/client/models/ViewFieldConfig';\nimport * as UserType from 'app/client/widgets/UserType';\nimport {DocumentSettings} from 'app/common/DocumentSettings';\nimport {BaseFormatter} from 'app/common/ValueFormatter';\nimport {createParser} from 'app/common/ValueParser';\nimport * as ko from 'knockout';\n\n// Represents a page entry in the tree of pages.\nexport interface ViewFieldRec extends IRowModel<\"_grist_Views_section_field\">, RuleOwner {\n  viewSection: ko.Computed<ViewSectionRec>;\n  widthDef: modelUtil.KoSaveableObservable<number>;\n\n  widthPx: ko.Computed<string>;\n  column: ko.Computed<ColumnRec>;\n  origCol: ko.Computed<ColumnRec>;\n  colId: ko.Computed<string>;\n  label: ko.Computed<string>;\n  description: modelUtil.KoSaveableObservable<string>;\n\n  // displayLabel displays label by default but switches to the more helpful colId whenever a\n  // formula field in the view is being edited.\n  displayLabel: modelUtil.KoSaveableObservable<string>;\n\n  // The field knows when we are editing a formula, so that all rows can reflect that.\n  editingFormula: ko.Computed<boolean>;\n\n  // CSS class to add to formula cells, incl. to show that we are editing field's formula.\n  formulaCssClass: ko.Computed<string|null>;\n\n  // The fields's display column\n  _displayColModel: ko.Computed<ColumnRec>;\n\n  // Whether field uses column's widgetOptions (true) or its own (false).\n  // During transform, use the transform column's options (which should be initialized to match\n  // field or column when the transform starts TODO).\n  useColOptions: ko.Computed<boolean>;\n\n  // Helper that returns the RowModel for either field or its column, depending on\n  // useColOptions. Field and Column have a few identical fields:\n  //    .widgetOptions()        // JSON string of options\n  //    .saveDisplayFormula()   // Method to save the display formula\n  //    .displayCol()           // Reference to an optional associated display column.\n  _fieldOrColumn: ko.Computed<ColumnRec|ViewFieldRec>;\n\n  // Display col ref to use for the field, defaulting to the plain column itself.\n  displayColRef: ko.Computed<number>;\n\n  visibleColRef: modelUtil.KoSaveableObservable<number>;\n\n  // The display column to use for the field, or the column itself when no displayCol is set.\n  displayColModel: ko.Computed<ColumnRec>;\n  visibleColModel: ko.Computed<ColumnRec>;\n\n  // The widgetOptions to read and write: either the column's or the field's own.\n  _widgetOptionsStr: modelUtil.KoSaveableObservable<string>;\n\n  // Observable for the object with the current options, either for the field or for the column,\n  // which takes into account the default options for column's type.\n  widgetOptionsJson: modelUtil.SaveableObjObservable<any>;\n\n\n  disableModify: ko.Computed<boolean>;\n  disableEditData: ko.Computed<boolean>;\n\n  // Whether lines should wrap in a cell.\n  wrap: modelUtil.KoSaveableObservable<boolean>;\n  widget: modelUtil.KoSaveableObservable<string|undefined>;\n  textColor: modelUtil.KoSaveableObservable<string|undefined>;\n  fillColor: modelUtil.KoSaveableObservable<string|undefined>;\n  fontBold: modelUtil.KoSaveableObservable<boolean|undefined>;\n  fontUnderline: modelUtil.KoSaveableObservable<boolean|undefined>;\n  fontItalic: modelUtil.KoSaveableObservable<boolean|undefined>;\n  fontStrikethrough: modelUtil.KoSaveableObservable<boolean|undefined>;\n  headerTextColor: modelUtil.KoSaveableObservable<string|undefined>;\n  headerFillColor: modelUtil.KoSaveableObservable<string|undefined>;\n  headerFontBold: modelUtil.KoSaveableObservable<boolean|undefined>;\n  headerFontUnderline: modelUtil.KoSaveableObservable<boolean|undefined>;\n  headerFontItalic: modelUtil.KoSaveableObservable<boolean|undefined>;\n  headerFontStrikethrough: modelUtil.KoSaveableObservable<boolean|undefined>;\n  // Helper computed to change style of a cell and headerStyle without saving it.\n  style: ko.PureComputed<Style>;\n  headerStyle: ko.PureComputed<HeaderStyle>;\n\n  config: ViewFieldConfig;\n\n  documentSettings: ko.PureComputed<DocumentSettings>;\n\n  // Helper for Reference/ReferenceList columns, which returns a formatter according\n  // to the visibleCol associated with field.\n  visibleColFormatter: ko.Computed<BaseFormatter>;\n\n  // A formatter for values of this column.\n  // The difference between visibleColFormatter and formatter is especially important for ReferenceLists:\n  // `visibleColFormatter` is for individual elements of a list, sometimes hypothetical\n  // (i.e. they aren't actually referenced but they exist in the visible column and are relevant to e.g. autocomplete)\n  // `formatter` formats actual cell values, e.g. a whole list from the display column.\n  formatter: ko.Computed<BaseFormatter>;\n\n  createValueParser(): (value: string) => any;\n\n  // Helper which adds/removes/updates field's displayCol to match the formula.\n  saveDisplayFormula(formula: string): Promise<void>|undefined;\n}\n\nexport function createViewFieldRec(this: ViewFieldRec, docModel: DocModel): void {\n  this.viewSection = refRecord(docModel.viewSections, this.parentId);\n  this.widthDef = modelUtil.fieldWithDefault(this.width, () => this.viewSection().defaultWidth());\n\n  this.widthPx = ko.pureComputed(() => this.widthDef() + 'px');\n  this.column = refRecord(docModel.columns, this.colRef);\n  this.origCol = ko.pureComputed(() => this.column().origCol());\n  this.colId = ko.pureComputed(() => this.column().colId());\n  this.label = ko.pureComputed(() => this.column().label());\n  this.description = modelUtil.savingComputed({\n    read: () => this.column().description(),\n    write: (setter, val) => setter(this.column().description, val)\n  });\n\n  // displayLabel displays label by default but switches to the more helpful colId whenever a\n  // formula field in the view is being edited.\n  this.displayLabel = modelUtil.savingComputed({\n    read: () => docModel.editingFormula() ? '$' + this.origCol().colId() : this.origCol().label(),\n    write: (setter, val) => setter(this.column().label, val)\n  });\n\n  // The field knows when we are editing a formula, so that all rows can reflect that.\n  const _editingFormula = ko.observable(false);\n  this.editingFormula = ko.pureComputed({\n    read: () => _editingFormula(),\n    write: val => {\n      // Whenever any view field changes its editingFormula status, let the docModel know.\n      docModel.editingFormula(val);\n      _editingFormula(val);\n    }\n  });\n\n  // CSS class to add to formula cells, incl. to show that we are editing this field's formula.\n  this.formulaCssClass = ko.pureComputed<string|null>(() => {\n    const col = this.column();\n\n    // If the current column is transforming, assign the CSS class \"transform_field\"\n    if (col.isTransforming()) {\n      if ( col.origCol().isFormula() && col.origCol().formula() !== \"\") {\n        return \"transform_field formula_field\";\n      }\n      return \"transform_field\";\n    }\n    // If the column is not transforming but a formula is being edited\n    else if (this.editingFormula()) {\n      return \"formula_field_edit\";\n    }\n    // If a formula exists and it is not empty\n    else if (col.isFormula() && col.formula() !== \"\") {\n      return \"formula_field\";\n    }\n    // If none of the above conditions are met, assign null\n    else {\n      return null;\n    }\n  });\n\n  // The fields's display column\n  this._displayColModel = refRecord(docModel.columns, this.displayCol);\n\n  // Helper which adds/removes/updates this field's displayCol to match the formula.\n  this.saveDisplayFormula = function(formula) {\n    if (formula !== (this._displayColModel().formula() || '')) {\n      return docModel.docData.sendAction([\"SetDisplayFormula\", this.column().table().tableId(),\n        this.getRowId(), null, formula]);\n    }\n  };\n\n  // Whether this field uses column's widgetOptions (true) or its own (false).\n  // During transform, use the transform column's options (which should be initialized to match\n  // field or column when the transform starts TODO).\n  this.useColOptions = this.autoDispose(ko.pureComputed(() => !this.widgetOptions() || this.column().isTransforming()));\n\n  // Helper that returns the RowModel for either this field or its column, depending on\n  // useColOptions. Field and Column have a few identical fields:\n  //    .widgetOptions()        // JSON string of options\n  //    .saveDisplayFormula()   // Method to save the display formula\n  //    .displayCol()           // Reference to an optional associated display column.\n  this._fieldOrColumn = this.autoDispose(ko.pureComputed(() => this.useColOptions() ? this.column() : this));\n\n  // Display col ref to use for the field, defaulting to the plain column itself.\n  this.displayColRef = this.autoDispose(ko.pureComputed(() => this._fieldOrColumn().displayCol() || this.colRef()));\n\n  this.visibleColRef = modelUtil.addSaveInterface(ko.pureComputed({\n      read: () => this._fieldOrColumn().visibleCol(),\n      write: (colRef) => this._fieldOrColumn().visibleCol(colRef),\n    }),\n    colRef => docModel.docData.bundleActions(null, async () => {\n      const col = docModel.columns.getRowModel(colRef);\n      await Promise.all([\n        this._fieldOrColumn().visibleCol.saveOnly(colRef),\n        this._fieldOrColumn().saveDisplayFormula(colRef ? `$${this.colId()}.${col.colId()}` : '')\n      ]);\n    }, {nestInActiveBundle: this.column.peek().isTransforming.peek()})\n  );\n\n  // The display column to use for the field, or the column itself when no displayCol is set.\n  this.displayColModel = refRecord(docModel.columns, this.displayColRef);\n  this.visibleColModel = refRecord(docModel.columns, this.visibleColRef);\n\n  // Helper for Reference/ReferenceList columns, which returns a formatter according to the visibleCol\n  // associated with this field. If no visible column available, return formatting for the field itself.\n  this.visibleColFormatter = ko.pureComputed(() => formatterForRec(this, this.column(), docModel, 'vcol'));\n\n  this.formatter = ko.pureComputed(() => formatterForRec(this, this.column(), docModel, 'full'));\n\n  this.createValueParser = function() {\n    const fieldRef = this.useColOptions.peek() ? undefined : this.id.peek();\n    const parser = createParser(docModel.docData, this.colRef.peek(), fieldRef);\n    return parser.cleanParse.bind(parser);\n  };\n\n  // The widgetOptions to read and write: either the column's or the field's own.\n  this._widgetOptionsStr = this.autoDispose(modelUtil.savingComputed({\n    read: () => this._fieldOrColumn().widgetOptions(),\n    write: (setter, val) => setter(this._fieldOrColumn().widgetOptions, val)\n  }));\n\n  // Observable for the object with the current options, either for the field or for the column,\n  // which takes into account the default options for this column's type.\n  this.widgetOptionsJson = this.autoDispose(modelUtil.jsonObservable(this._widgetOptionsStr,\n    (opts: any) => UserType.mergeOptions(opts || {}, this.column().pureType())));\n\n  // When user has yet to specify a desired wrapping state, we use different defaults for\n  // GridView (no wrap) and DetailView (wrap).\n  this.wrap = this.autoDispose(modelUtil.fieldWithDefault(\n    this.widgetOptionsJson.prop('wrap'),\n    () => this.viewSection().parentKey() !== 'record'\n  ));\n  this.widget = this.widgetOptionsJson.prop('widget');\n  this.textColor = this.widgetOptionsJson.prop('textColor');\n  this.fillColor = this.widgetOptionsJson.prop('fillColor');\n  this.fontBold = this.widgetOptionsJson.prop('fontBold');\n  this.fontUnderline = this.widgetOptionsJson.prop('fontUnderline');\n  this.fontItalic = this.widgetOptionsJson.prop('fontItalic');\n  this.fontStrikethrough = this.widgetOptionsJson.prop('fontStrikethrough');\n  this.headerTextColor = this.widgetOptionsJson.prop('headerTextColor');\n  this.headerFillColor = this.widgetOptionsJson.prop('headerFillColor');\n  this.headerFontBold = this.widgetOptionsJson.prop('headerFontBold');\n  this.headerFontUnderline = this.widgetOptionsJson.prop('headerFontUnderline');\n  this.headerFontItalic = this.widgetOptionsJson.prop('headerFontItalic');\n  this.headerFontStrikethrough = this.widgetOptionsJson.prop('headerFontStrikethrough');\n\n  this.documentSettings = ko.pureComputed(() => docModel.docInfoRow.documentSettingsJson());\n  this.style = ko.pureComputed({\n    read: () => ({\n      textColor: this.textColor(),\n      fillColor: this.fillColor(),\n      fontBold: this.fontBold(),\n      fontUnderline: this.fontUnderline(),\n      fontItalic: this.fontItalic(),\n      fontStrikethrough: this.fontStrikethrough(),\n    }) as Style,\n    write: (style: Style) => {\n      this.widgetOptionsJson.update(style);\n    },\n  });\n  this.headerStyle = ko.pureComputed({\n    read: () => ({\n      headerTextColor: this.headerTextColor(),\n      headerFillColor: this.headerFillColor(),\n      headerFontBold: this.headerFontBold(),\n      headerFontUnderline: this.headerFontUnderline(),\n      headerFontItalic: this.headerFontItalic(),\n      headerFontStrikethrough: this.headerFontStrikethrough(),\n    }) as HeaderStyle,\n    write: (headerStyle: HeaderStyle) => {\n      this.widgetOptionsJson.update(headerStyle);\n    },\n  });\n\n  this.tableId = ko.pureComputed(() => this.column().table().tableId());\n  this.rulesList = ko.pureComputed(() => this._fieldOrColumn().rules());\n  this.rulesCols = refListRecords(docModel.columns, ko.pureComputed(() => this._fieldOrColumn().rules()));\n  this.rulesColsIds = ko.pureComputed(() => this.rulesCols().map(c => c.colId()));\n  this.rulesStyles = modelUtil.fieldWithDefault(\n    this.widgetOptionsJson.prop(\"rulesOptions\") as modelUtil.KoSaveableObservable<Style[]>,\n    []);\n  this.hasRules = ko.pureComputed(() => this.rulesCols().length > 0);\n\n  // Helper method to add an empty rule (either initial or additional one).\n  // Style options are added to widget options directly and can be briefly out of sync,\n  // which is taken into account during rendering.\n  this.addEmptyRule = async () => {\n    const useCol = this.useColOptions.peek();\n    const action = [\n      'AddEmptyRule',\n      this.column.peek().table.peek().tableId.peek(),\n      useCol ? 0 : this.id.peek(), // field_ref\n      useCol ? this.column.peek().id.peek() : 0, // col_ref\n    ];\n    await docModel.docData.sendAction(action, `Update rules for ${this.colId.peek()}`);\n  };\n\n  this.removeRule = (index: number) => removeRule(docModel, this, index);\n  // Externalize widgetOptions configuration, to support changing those options\n  // for multiple fields at once.\n  this.config = new ViewFieldConfig(this, docModel);\n\n  this.disableModify = this.autoDispose(ko.pureComputed(() => this.column().disableModify()));\n  this.disableEditData = this.autoDispose(ko.pureComputed(() => this.column().disableEditData()));\n}\n","import {BoxSpec} from 'app/client/components/Layout';\nimport {KoArray} from 'app/client/lib/koArray';\nimport * as koUtil from 'app/client/lib/koUtil';\nimport {DocModel, IRowModel, recordSet, refRecord} from 'app/client/models/DocModel';\nimport {TabBarRec, ViewSectionRec} from 'app/client/models/DocModel';\nimport * as modelUtil from 'app/client/models/modelUtil';\nimport * as ko from 'knockout';\n\n// Represents a view (now also referred to as a \"page\") containing one or more view sections.\nexport interface ViewRec extends IRowModel<\"_grist_Views\"> {\n  viewSections: ko.Computed<KoArray<ViewSectionRec>>;\n  tabBarItem: ko.Computed<KoArray<TabBarRec>>;\n\n  layoutSpecObj: modelUtil.SaveableObjObservable<BoxSpec>;\n\n  // An observable for the ref of the section last selected by the user.\n  activeSectionId: ko.Computed<number>;\n\n  // This is active collapsed section id. Set when the widget is clicked.\n  activeCollapsedSectionId: ko.Observable<number>;\n\n  // Saved collapsed sections.\n  collapsedSections: ko.Computed<number[]>;\n\n  // Active collapsed sections, changed by the user, can be different from the\n  // saved collapsed sections, for a brief moment (editor is buffering changes).\n  activeCollapsedSections: ko.Observable<number[]>;\n\n  activeSection: ko.Computed<ViewSectionRec>;\n\n  // If the active section is removed, set the next active section to be the default.\n  _isActiveSectionGone: ko.Computed<boolean>;\n}\n\nexport function createViewRec(this: ViewRec, docModel: DocModel): void {\n  this.viewSections = recordSet(this, docModel.viewSections, 'parentId');\n  this.tabBarItem = recordSet(this, docModel.tabBar, 'viewRef');\n\n  this.layoutSpecObj = modelUtil.jsonObservable(this.layoutSpec);\n\n  this.activeCollapsedSectionId = ko.observable(0);\n\n  this.collapsedSections = this.autoDispose(ko.pureComputed(() => {\n    const allSections = new Set(this.viewSections().all().map(x => x.id()));\n    const collapsed: number[] = (this.layoutSpecObj().collapsed || []).map(x => x.leaf as number);\n    return collapsed.filter(x => allSections.has(x));\n  }));\n  this.activeCollapsedSections = ko.observable(this.collapsedSections.peek());\n\n  // An observable for the ref of the section last selected by the user.\n  this.activeSectionId = koUtil.observableWithDefault(ko.observable(), () => {\n    // The default function which is used when the conditional case is true.\n    // Read may occur for recently disposed sections, must check condition first.\n    // `!this.getRowId()` implies that this is an empty (non-existent) view record\n    // which happens when viewing the raw data tables, in which case the default is no active view section.\n\n    if (this.isDisposed() || !this.getRowId()) { return 0; }\n    const all = this.viewSections().all();\n    const collapsed = new Set(this.activeCollapsedSections());\n    const visible = all.filter(x => !collapsed.has(x.id()));\n\n    // Default to the first leaf from layoutSpec (which corresponds to the top-left section), or\n    // fall back to the first item in the list if anything goes wrong (previous behavior).\n    const firstLeaf = getFirstLeaf(this.layoutSpecObj.peek());\n    const result = visible.find(s => s.id() === firstLeaf) ? firstLeaf as number :\n      (visible[0]?.id() || 0);\n    return result;\n  });\n\n  this.activeSection = refRecord(docModel.viewSections, this.activeSectionId);\n\n  // If the active section is removed, set the next active section to be the default.\n  this._isActiveSectionGone = this.autoDispose(ko.computed(() => this.activeSection()._isDeleted()));\n  this.autoDispose(this._isActiveSectionGone.subscribe(gone => {\n    if (gone) {\n      this.activeSectionId(0);\n    }\n  }));\n}\n\nfunction getFirstLeaf(layoutSpec: BoxSpec|undefined): BoxSpec['leaf'] {\n  while (layoutSpec?.children?.length) {\n    layoutSpec = layoutSpec.children[0];\n  }\n  return layoutSpec?.leaf;\n}\n","import BaseView from 'app/client/components/BaseView';\nimport {LinkingState} from 'app/client/components/LinkingState';\nimport {KoArray} from 'app/client/lib/koArray';\nimport {ColumnToMapImpl} from 'app/client/models/ColumnToMap';\nimport {\n  ColumnRec,\n  DocModel,\n  FilterRec,\n  IRowModel,\n  recordSet,\n  refListRecords,\n  refRecord,\n  TableRec,\n  ViewFieldRec,\n  ViewRec\n} from 'app/client/models/DocModel';\nimport {BEHAVIOR} from 'app/client/models/entities/ColumnRec';\nimport * as modelUtil from 'app/client/models/modelUtil';\nimport {removeRule, RuleOwner} from 'app/client/models/RuleOwner';\nimport {LinkConfig} from 'app/client/ui/selectBy';\nimport {getWidgetTypes} from \"app/client/ui/widgetTypesMap\";\nimport {FilterColValues} from \"app/common/ActiveDocAPI\";\nimport {AccessLevel, ICustomWidget} from 'app/common/CustomWidget';\nimport {UserAction} from 'app/common/DocActions';\nimport {arrayRepeat} from 'app/common/gutil';\nimport {Sort} from 'app/common/SortSpec';\nimport {ColumnsToMap, WidgetColumnMap} from 'app/plugin/CustomSectionAPI';\nimport {CursorPos, UIRowId} from 'app/plugin/GristAPI';\nimport {Computed, Holder, Observable} from 'grainjs';\nimport * as ko from 'knockout';\nimport defaults = require('lodash/defaults');\n\n// Represents a section of user views, now also known as a \"page widget\" (e.g. a view may contain\n// a grid section and a chart section).\nexport interface ViewSectionRec extends IRowModel<\"_grist_Views_section\">, RuleOwner {\n  viewFields: ko.Computed<KoArray<ViewFieldRec>>;\n\n  // List of sections linked from this one, i.e. for whom this one is the selector or link source.\n  linkedSections: ko.Computed<KoArray<ViewSectionRec>>;\n\n  // All table columns associated with this view section, excluding hidden helper columns.\n  columns: ko.Computed<ColumnRec[]>;\n\n  optionsObj: modelUtil.SaveableObjObservable<any>;\n\n  customDef: CustomViewSectionDef;\n\n  themeDef: modelUtil.KoSaveableObservable<string>;\n  chartTypeDef: modelUtil.KoSaveableObservable<string>;\n  view: ko.Computed<ViewRec>;\n\n  table: ko.Computed<TableRec>;\n\n  // Widget title with a default value\n  titleDef: modelUtil.KoSaveableObservable<string>;\n  // Default widget title (the one that is used in titleDef).\n  defaultWidgetTitle: ko.PureComputed<string>;\n\n  description: modelUtil.KoSaveableObservable<string>;\n\n  // true if this record is its table's rawViewSection, i.e. a 'raw data view'\n  // in which case the UI prevents various things like hiding columns or changing the widget type.\n  isRaw: ko.Computed<boolean>;\n  isVirtual: ko.Computed<boolean>;\n  isCollapsed: ko.Computed<boolean>;\n\n  borderWidthPx: ko.Computed<string>;\n\n  layoutSpecObj: modelUtil.ObjObservable<any>;\n\n  _savedFilters: ko.Computed<KoArray<FilterRec>>;\n\n  /**\n   * Unsaved client-side filters, keyed by original col ref. Currently only wiped when unsaved filters\n   * are applied or reverted.\n   *\n   * If saved filters exist for a col ref, unsaved filters take priority and are applied instead. This\n   * prevents disruption when changes are made to saved filters for the same field/column, but there\n   * may be some cases where we'd want to reset _unsavedFilters on some indirect change to the document.\n   *\n   * NOTE: See `filters`, where `_unsavedFilters` is merged with `savedFilters`.\n   */\n  _unsavedFilters: Map<number, Partial<Filter>>;\n\n  /**\n   * Filter information for all fields/section in the section.\n   *\n   * Re-computed on changes to `savedFilters`, as well as any changes to `viewFields` or `columns`. Any\n   * unsaved filters saved in `_unsavedFilters` are applied on computation, taking priority over saved\n   * filters for the same field/column, if any exist.\n   */\n  filters: ko.Computed<FilterInfo[]>;\n\n  // Subset of `filters` containing non-blank active filters.\n  activeFilters: Computed<FilterInfo[]>;\n\n  // Subset of `activeFilters` that are pinned.\n  pinnedActiveFilters: Computed<FilterInfo[]>;\n\n  // Helper metadata item which indicates whether any of the section's fields/columns have unsaved\n  // changes to their filters. (True indicates unsaved changes)\n  filterSpecChanged: Computed<boolean>;\n\n  // Set to true when a second pinned filter is added, to trigger a behavioral prompt. Note that\n  // the popup is only shown once, even if this observable is set to true again in the future.\n  showNestedFilteringPopup: Observable<boolean>;\n\n  // Customizable version of the JSON-stringified sort spec. It may diverge from the saved one.\n  activeSortJson: modelUtil.CustomComputed<string>;\n\n  // is an array (parsed from JSON) of colRefs (i.e. rowIds into the columns table), with a\n  // twist: a rowId may be positive or negative, for ascending or descending respectively.\n  activeSortSpec: modelUtil.ObjObservable<Sort.SortSpec>;\n\n  // Modified sort spec to take into account any active display columns.\n  activeDisplaySortSpec: ko.Computed<Sort.SortSpec>;\n\n  // Evaluates to an array of column models, which are not referenced by anything in viewFields.\n  hiddenColumns: ko.Computed<ColumnRec[]>;\n\n  hasFocus: ko.Computed<boolean>;\n\n  // Section-linking affects table if linkSrcSection is set. The controller value of the\n  // link is the value of srcCol at activeRowId of linkSrcSection, or activeRowId itself when\n  // srcCol is unset. If targetCol is set, we filter for all rows whose targetCol is equal to\n  // the controller value. Otherwise, the controller value determines the rowId of the cursor.\n\n  /**\n   * Section selected in the `Select By` dropdown. Used for filtering this section.\n   */\n  linkSrcSection: ko.Computed<ViewSectionRec>;\n  /**\n   * Column selected in the `Select By` dropdown in the remote section. It points to a column in remote section\n   * that contains a reference to this table (or common table - because we can be linked by having the same reference\n   * to some other section).\n   * Used for filtering this section. Can be empty as user can just link by section.\n   * Watch out, it is not cleared, so it is only valid when we have linkSrcSection.\n   * In UI it is shown as Target Section (dot) Target Column.\n   */\n  linkSrcCol: ko.Computed<ColumnRec>;\n  /**\n   * In case we have multiple reference columns, that are shown as\n   *   Target Section -> My Column or\n   *   Target Section . Target Column -> My Column\n   * store the reference to the column (my column) to use.\n   */\n  linkTargetCol: ko.Computed<ColumnRec>;\n\n  // Linking state maintains .filterFunc and .cursorPos observables which we use for\n  // auto-scrolling and filtering.\n  linkingState: ko.Computed<LinkingState | null>;\n  _linkingState: Holder<LinkingState>; // Holder for the current value of linkingState\n\n  linkingFilter: ko.Computed<FilterColValues>;\n\n  activeRowId: ko.Observable<UIRowId | null>;     // May be null when there are no rows.\n\n  // If the view instance for section is instantiated, it will be accessible here.\n  viewInstance: ko.Observable<BaseView | null>;\n\n  // Describes the most recent cursor position in the section. Only rowId and fieldIndex are used.\n  lastCursorPos: CursorPos;\n\n  // Describes the most recent scroll position.\n  lastScrollPos: {\n    rowIndex: number;   // Used for scrolly sections. Indicates the index of the first visible row.\n    offset: number;     // Pixel distance past the top of row indicated by rowIndex.\n    scrollLeft: number; // Used for grid sections. Indicates the scrollLeft value of the scroll pane.\n  };\n\n  disableAddRemoveRows: ko.Computed<boolean>;\n\n  isSorted: ko.Computed<boolean>;\n  disableDragRows: ko.Computed<boolean>;\n  // Number of frozen columns\n  rawNumFrozen: modelUtil.CustomComputed<number>;\n  // Number for frozen columns to display.\n  // We won't freeze all the columns on a grid, it will leave at least 1 column unfrozen.\n  numFrozen: ko.Computed<number>;\n  activeCustomOptions: modelUtil.CustomComputed<any>;\n\n  // Temporary fields used to communicate with the Custom Widget. There are set through the Widget API.\n\n  // Temporary variable holding columns mapping requested by the widget (set by API).\n  columnsToMap: ko.Observable<ColumnsToMap|null>;\n  // Temporary variable holding columns mapped by the user;\n  mappedColumns: ko.Computed<WidgetColumnMap|null>;\n  // Temporary variable holding flag that describes if the widget supports custom options (set by API).\n  hasCustomOptions: ko.Observable<boolean>;\n  // Temporary variable holding widget desired access (changed either from manifest or via API).\n  desiredAccessLevel: ko.Observable<AccessLevel|null>;\n\n  // Show widget as linking source. Used by custom widget.\n  allowSelectBy: ko.Observable<boolean>;\n\n  // List of selected rows from a custom widget, or null if a filter shouldn't be applied.\n  selectedRows: ko.Observable<number[]|null>;\n\n  // If the row filter is active (i.e. if selectedRows is non-null). Separate computed to avoid\n  // re-computing the filter when selectedRows changes.\n  selectedRowsActive: ko.Computed<boolean>;\n\n  editingFormula: ko.Computed<boolean>;\n\n  // Selected fields (columns) for the section.\n  selectedFields: ko.Observable<ViewFieldRec[]>;\n\n  // Some computed observables for multi-select, used in the creator panel, by more than one widgets.\n\n  // Common column behavior or mixed.\n  columnsBehavior: ko.PureComputed<BEHAVIOR|'mixed'>;\n  // If all selected columns are empty or formula column.\n  columnsAllIsFormula: ko.PureComputed<boolean>;\n  // Common type of selected columns or mixed.\n  columnsType: ko.PureComputed<string|'mixed'>;\n\n  // Save all filters of fields/columns in the section.\n  saveFilters(): Promise<void>;\n\n  // Revert all filters of fields/columns in the section.\n  revertFilters(): void;\n\n  // Set `filter` for the field or column identified by `colRef`.\n  setFilter(colRef: number, filter: Partial<Filter>): void;\n\n  // Revert the filter of the field or column identified by `colRef`.\n  revertFilter(colRef: number): void;\n\n  // Saves custom definition (bundles change)\n  saveCustomDef(): Promise<void>;\n}\n\nexport type WidgetMappedColumn = number|number[]|null;\nexport type WidgetColumnMapping = Record<string, WidgetMappedColumn>\n\nexport interface CustomViewSectionDef {\n  /**\n   * The mode.\n   */\n  mode: modelUtil.KoSaveableObservable<\"url\"|\"plugin\">;\n  /**\n   * The url.\n   */\n  url: modelUtil.KoSaveableObservable<string|null>;\n   /**\n   * Custom widget information.\n   */\n  widgetDef: modelUtil.KoSaveableObservable<ICustomWidget|null>;\n   /**\n   * Custom widget options.\n   */\n  widgetOptions: modelUtil.KoSaveableObservable<Record<string, any>|null>;\n  /**\n   * Custom widget interaction options.\n   */\n  columnsMapping: modelUtil.KoSaveableObservable<WidgetColumnMapping|null>;\n  /**\n   * Access granted to url.\n   */\n  access: modelUtil.KoSaveableObservable<string>;\n  /**\n   * The plugin id.\n   */\n  pluginId: modelUtil.KoSaveableObservable<string>;\n  /**\n   * The section id.\n   */\n  sectionId: modelUtil.KoSaveableObservable<string>;\n}\n\n/** Information about filters for a field or hidden column. */\nexport interface FilterInfo {\n  /** The section that's being filtered. */\n  viewSection: ViewSectionRec;\n  /** The field or column that's being filtered. (Field if column is visible.) */\n  fieldOrColumn: ViewFieldRec|ColumnRec;\n  /** Filter that applies to this field/column, if any. */\n  filter: modelUtil.CustomComputed<string>;\n  /** Whether this filter is pinned to the filter bar. */\n  pinned: modelUtil.CustomComputed<boolean>;\n  /** True if `filter` has a non-blank value. */\n  isFiltered: ko.PureComputed<boolean>;\n  /** True if `pinned` is true. */\n  isPinned: ko.PureComputed<boolean>;\n}\n\nexport interface Filter {\n  filter: string;\n  pinned: boolean;\n}\n\nexport function createViewSectionRec(this: ViewSectionRec, docModel: DocModel): void {\n  this.viewFields = recordSet(this, docModel.viewFields, 'parentId', {sortBy: 'parentPos'});\n  this.linkedSections = recordSet(this, docModel.viewSections, 'linkSrcSectionRef');\n\n  // All table columns associated with this view section, excluding any hidden helper columns.\n  this.columns = this.autoDispose(ko.pureComputed(() => this.table().columns().all().filter(c => !c.isHiddenCol())));\n  this.editingFormula = ko.pureComputed({\n    read: () => docModel.editingFormula(),\n    write: val => {\n      docModel.editingFormula(val);\n    }\n  });\n  const defaultOptions = {\n    verticalGridlines: true,\n    horizontalGridlines: true,\n    zebraStripes: false,\n    customView: '',\n    numFrozen: 0\n  };\n  this.optionsObj = modelUtil.jsonObservable(this.options,\n    (obj: any) => defaults(obj || {}, defaultOptions));\n\n  const customViewDefaults = {\n    mode: 'url',\n    url: null,\n    widgetDef: null,\n    access: '',\n    pluginId: '',\n    sectionId: ''\n  };\n  const customDefObj = modelUtil.jsonObservable(this.optionsObj.prop('customView'),\n    (obj: any) => defaults(obj || {}, customViewDefaults));\n\n  this.customDef = {\n    mode: customDefObj.prop('mode'),\n    url: customDefObj.prop('url'),\n    widgetDef: customDefObj.prop('widgetDef'),\n    widgetOptions: customDefObj.prop('widgetOptions'),\n    columnsMapping: customDefObj.prop('columnsMapping'),\n    access: customDefObj.prop('access'),\n    pluginId: customDefObj.prop('pluginId'),\n    sectionId: customDefObj.prop('sectionId')\n  };\n\n  this.selectedFields = ko.observable<any>([]);\n\n  // During schema change, some columns/fields might be disposed beyond our control.\n  const selectedColumns = this.autoDispose(ko.pureComputed(() => this.selectedFields()\n    .filter(f => !f.isDisposed())\n    .map(f => f.column())\n    .filter(c => !c.isDisposed())));\n  this.columnsBehavior = ko.pureComputed(() => {\n    const list = new Set(selectedColumns().map(c => c.behavior()));\n    return list.size === 1 ? list.values().next().value : 'mixed';\n  });\n  this.columnsType = ko.pureComputed(() => {\n    const list = new Set(selectedColumns().map(c => c.type()));\n    return list.size === 1 ? list.values().next().value : 'mixed';\n  });\n  this.columnsAllIsFormula = ko.pureComputed(() => {\n    return selectedColumns().every(c => c.isFormula());\n  });\n\n  this.activeCustomOptions = modelUtil.customValue(this.customDef.widgetOptions);\n\n  this.saveCustomDef = async () => {\n    await customDefObj.save();\n    this.activeCustomOptions.revert();\n  };\n\n  this.themeDef = modelUtil.fieldWithDefault(this.theme, 'form');\n  this.chartTypeDef = modelUtil.fieldWithDefault(this.chartType, 'bar');\n  this.view = refRecord(docModel.views, this.parentId);\n\n  this.table = refRecord(docModel.tables, this.tableRef);\n\n\n  // The user-friendly name of the table, which is the same as tableId for non-summary tables,\n  // and is 'tableId[groupByCols...]' for summary tables.\n  // Consist of 3 parts\n  // - TableId (or primary table id for summary tables) capitalized\n  // - Grouping description (table record contains this for summary tables)\n  // - Widget type description (if not grid)\n  // All concatenated separated by space.\n  this.defaultWidgetTitle = this.autoDispose(ko.pureComputed(() => {\n    const widgetTypeDesc = this.parentKey() !== 'record' ? `${getWidgetTypes(this.parentKey.peek() as any).label}` : '';\n    const table = this.table();\n    return [\n      table.tableNameDef()?.toUpperCase(), // Due to ACL this can be null.\n      table.groupDesc(),\n      widgetTypeDesc\n    ].filter(part => Boolean(part?.trim())).join(' ');\n  }));\n  // Widget title.\n  this.titleDef = modelUtil.fieldWithDefault(this.title, this.defaultWidgetTitle);\n\n  // Widget description\n  this.description = modelUtil.fieldWithDefault(this.description, this.description());\n\n  // true if this record is its table's rawViewSection, i.e. a 'raw data view'\n  // in which case the UI prevents various things like hiding columns or changing the widget type.\n  this.isRaw = this.autoDispose(ko.pureComputed(() => this.table().rawViewSectionRef() === this.getRowId()));\n\n  this.isVirtual = this.autoDispose(ko.pureComputed(() => typeof this.id() === 'string'));\n\n  this.borderWidthPx = ko.pureComputed(() => this.borderWidth() + 'px');\n\n  this.layoutSpecObj = modelUtil.jsonObservable(this.layoutSpec);\n\n  this._savedFilters = recordSet(this, docModel.filters, 'viewSectionRef');\n\n  /**\n   * Unsaved client-side filters, keyed by original col ref. Currently only wiped when unsaved filters\n   * are applied or reverted.\n   *\n   * If saved filters exist for a col ref, unsaved filters take priority and are applied instead. This\n   * prevents disruption when changes are made to saved filters for the same field/column, but there\n   * may be some cases where we'd want to reset _unsavedFilters on some indirect change to the document.\n   *\n   * NOTE: See `filters`, where `_unsavedFilters` is merged with `savedFilters`.\n   */\n  this._unsavedFilters = new Map();\n\n  /**\n   * Filter information for all fields/columns in the section.\n   *\n   * Re-computed on changes to `savedFilters`, as well as any changes to `viewFields` or `columns`. Any\n   * unsaved filters saved in `_unsavedFilters` are applied on computation, taking priority over saved\n   * filters for the same field/column, if any exist.\n   */\n  this.filters = this.autoDispose(ko.computed(() => {\n    const savedFiltersByColRef = new Map(this._savedFilters().all().map(f => [f.colRef(), f]));\n    const viewFieldsByColRef = new Map(this.viewFields().all().map(f => [f.origCol().getRowId(), f]));\n\n    return this.columns().map(column => {\n      const savedFilter = savedFiltersByColRef.get(column.origColRef());\n      // Initialize with a saved filter, if one exists. Otherwise, use a blank filter.\n      const filter = modelUtil.customComputed({\n        read: () => { return savedFilter ? savedFilter.activeFilter() : ''; },\n      });\n      const pinned = modelUtil.customComputed({\n        read: () => { return savedFilter ? savedFilter.pinned() : false; },\n      });\n\n      // If an unsaved filter exists, overwrite the filter with it.\n      const unsavedFilter = this._unsavedFilters.get(column.origColRef());\n      if (unsavedFilter) {\n        const {filter: f, pinned: p} = unsavedFilter;\n        if (f !== undefined) { filter(f); }\n        if (p !== undefined) { pinned(p); }\n      }\n\n      return {\n        viewSection: this,\n        filter,\n        pinned,\n        fieldOrColumn: viewFieldsByColRef.get(column.origColRef()) ?? column,\n        isFiltered: ko.pureComputed(() => filter() !== ''),\n        isPinned: ko.pureComputed(() => pinned()),\n      };\n    });\n  }));\n\n  // List of `filters` that have non-blank active filters.\n  this.activeFilters = Computed.create(this, use => use(this.filters).filter(f => use(f.isFiltered)));\n\n  // List of `activeFilters` that are pinned.\n  this.pinnedActiveFilters = Computed.create(this, use => use(this.activeFilters).filter(f => use(f.isPinned)));\n\n  // Helper metadata item which indicates whether any of the section's fields/columns have unsaved\n  // changes to their filters. (True indicates unsaved changes)\n  this.filterSpecChanged = Computed.create(this, use => {\n    return use(this.filters).some(col => !use(col.filter.isSaved) || !use(col.pinned.isSaved));\n  });\n\n  this.showNestedFilteringPopup = Observable.create(this, false);\n\n  // Save all filters of fields/columns in the section.\n  this.saveFilters = () => {\n    return docModel.docData.bundleActions(`Save all filters in ${this.titleDef()}`,\n      async () => {\n        const savedFiltersByColRef = new Map(this._savedFilters().all().map(f => [f.colRef(), f]));\n        const updatedFilters: [number, Filter][] = []; // Pairs of row ids and filters to update.\n        const removedFilterIds: number[] = []; // Row ids of filters to remove.\n        const newFilters: [number, Filter][] = []; // Pairs of column refs and filters to add.\n\n        for (const f of this.filters()) {\n          const {fieldOrColumn, filter, pinned} = f;\n          // Skip saved filters (i.e. filters whose local values are unchanged from server).\n          if (filter.isSaved() && pinned.isSaved()) { continue; }\n\n          const savedFilter = savedFiltersByColRef.get(fieldOrColumn.origCol().origColRef());\n          if (!savedFilter) {\n            // Never save blank filters. (This is primarily a sanity check.)\n            if (filter() === '') { continue; }\n\n            // Since no saved filter exists, we must add a new record to the filters table.\n            newFilters.push([fieldOrColumn.origCol().origColRef(), {\n              filter: filter(),\n              pinned: pinned(),\n            }]);\n          } else if (filter() === '') {\n            // Mark the saved filter for removal from the filters table.\n            removedFilterIds.push(savedFilter.id());\n          } else {\n            // Mark the saved filter for update in the filters table.\n            updatedFilters.push([savedFilter.id(), {\n              filter: filter(),\n              pinned: pinned(),\n            }]);\n          }\n        }\n\n        const actions: UserAction[] = [];\n\n        // Remove records of any deleted filters.\n        if (removedFilterIds.length > 0) {\n          actions.push(['BulkRemoveRecord', removedFilterIds]);\n        }\n\n        // Update existing filter records with new filter values.\n        if (updatedFilters.length > 0) {\n          actions.push(['BulkUpdateRecord',\n            updatedFilters.map(([id]) => id),\n            {\n              filter: updatedFilters.map(([, {filter}]) => filter),\n              pinned: updatedFilters.map(([, {pinned}]) => pinned),\n            }\n          ]);\n        }\n\n        // Add new filter records.\n        if (newFilters.length > 0) {\n          actions.push(['BulkAddRecord',\n            arrayRepeat(newFilters.length, null),\n            {\n              viewSectionRef: arrayRepeat(newFilters.length, this.id()),\n              colRef: newFilters.map(([colRef]) => colRef),\n              filter: newFilters.map(([, {filter}]) => filter),\n              pinned: newFilters.map(([, {pinned}]) => pinned),\n            }\n          ]);\n        }\n\n        if (actions.length > 0) {\n          await docModel.filters.sendTableActions(actions);\n        }\n\n        // Reset client filter state.\n        this.revertFilters();\n      }\n    );\n  };\n\n  // Revert all filters of fields/columns in the section.\n  this.revertFilters = () => {\n    this._unsavedFilters.clear();\n    this.filters().forEach(c => {\n      c.filter.revert();\n      c.pinned.revert();\n    });\n  };\n\n  // Set `filter` for the field or column identified by `colRef`.\n  this.setFilter = (colRef: number, filter: Partial<Filter>) => {\n    this._unsavedFilters.set(colRef, {...this._unsavedFilters.get(colRef), ...filter});\n    const filterInfo = this.filters().find(c => c.fieldOrColumn.origCol().origColRef() === colRef);\n    if (!filterInfo) { return; }\n\n    const {filter: newFilter, pinned: newPinned} = filter;\n    if (newFilter !== undefined) { filterInfo.filter(newFilter); }\n    if (newPinned !== undefined) { filterInfo.pinned(newPinned); }\n  };\n\n  // Revert the filter of the field or column identified by `colRef`.\n  this.revertFilter = (colRef: number) => {\n    this._unsavedFilters.delete(colRef);\n    const filterInfo = this.filters().find(c => c.fieldOrColumn.origCol().origColRef() === colRef);\n    if (!filterInfo) { return; }\n\n    filterInfo.filter.revert();\n    filterInfo.pinned.revert();\n  };\n\n  // Customizable version of the JSON-stringified sort spec. It may diverge from the saved one.\n  this.activeSortJson = modelUtil.customValue(this.sortColRefs);\n\n  // This is an array (parsed from JSON) of colRefs (i.e. rowIds into the columns table), with a\n  // twist: a rowId may be positive or negative, for ascending or descending respectively.\n  // TODO: This method of ignoring columns which are deleted is inefficient and may cause conflicts\n  //  with sharing.\n  this.activeSortSpec = modelUtil.jsonObservable(this.activeSortJson, (obj: Sort.SortSpec|null) => {\n    return (obj || []).filter((sortRef: Sort.ColSpec) => {\n      const colModel = docModel.columns.getRowModel(Sort.getColRef(sortRef));\n      return !colModel._isDeleted() && colModel.getRowId();\n    });\n  });\n\n  // Modified sort spec to take into account any active display columns.\n  this.activeDisplaySortSpec = this.autoDispose(ko.computed(() => {\n    return this.activeSortSpec().map(directionalColRef => {\n      const colRef = Sort.getColRef(directionalColRef);\n      const field = this.viewFields().all().find(f => f.column().origColRef() === colRef);\n      const effectiveColRef = field ? field.displayColRef() : colRef;\n      return Sort.swapColRef(directionalColRef, effectiveColRef);\n    });\n  }));\n\n  // Evaluates to an array of column models, which are not referenced by anything in viewFields.\n  this.hiddenColumns = this.autoDispose(ko.pureComputed(() => {\n    const included = new Set(this.viewFields().all().map((f) => f.column().origColRef()));\n    return this.columns().filter(c => !included.has(c.getRowId()));\n  }));\n\n  this.hasFocus = ko.pureComputed({\n    // Read may occur for recently disposed sections, must check condition first.\n    read: () => !this.isDisposed() && this.view().activeSectionId() === this.id(),\n    write: (val) => { this.view().activeSectionId(val ? this.id() : 0); }\n  });\n\n  // Section-linking affects this table if linkSrcSection is set. The controller value of the\n  // link is the value of srcCol at activeRowId of linkSrcSection, or activeRowId itself when\n  // srcCol is unset. If targetCol is set, we filter for all rows whose targetCol is equal to\n  // the controller value. Otherwise, the controller value determines the rowId of the cursor.\n  this.linkSrcSection = refRecord(docModel.viewSections, this.linkSrcSectionRef);\n  this.linkSrcCol = refRecord(docModel.columns, this.linkSrcColRef);\n  this.linkTargetCol = refRecord(docModel.columns, this.linkTargetColRef);\n\n  this.activeRowId = ko.observable<UIRowId|null>(null);\n\n  this._linkingState = Holder.create(this);\n  this.linkingState = this.autoDispose(ko.pureComputed(() => {\n    if (!this.linkSrcSectionRef()) {\n      // This view section isn't selected by anything.\n      return null;\n    }\n    try {\n      const config = new LinkConfig(this);\n      return LinkingState.create(this._linkingState, docModel, config);\n    } catch (err) {\n      console.warn(err);\n      // Dispose old LinkingState in case creating the new one failed.\n      this._linkingState.dispose();\n      return null;\n    }\n  }));\n\n  this.linkingFilter = this.autoDispose(ko.pureComputed(() => {\n    return this.linkingState()?.filterColValues?.() || {filters: {}, operations: {}};\n  }));\n\n  // If the view instance for this section is instantiated, it will be accessible here.\n  this.viewInstance = ko.observable<BaseView|null>(null);\n\n  // Describes the most recent cursor position in the section.\n  this.lastCursorPos = {\n    rowId:      0,\n    fieldIndex: 0\n  };\n\n  // Describes the most recent scroll position.\n  this.lastScrollPos = {\n    rowIndex:   0, // Used for scrolly sections. Indicates the index of the first visible row.\n    offset:     0, // Pixel distance past the top of row indicated by rowIndex.\n    scrollLeft: 0  // Used for grid sections. Indicates the scrollLeft value of the scroll pane.\n  };\n\n  this.disableAddRemoveRows = ko.pureComputed(() => this.table().disableAddRemoveRows());\n\n  this.isSorted = ko.pureComputed(() => this.activeSortSpec().length > 0);\n  this.disableDragRows = ko.pureComputed(() => this.isSorted() || !this.table().supportsManualSort());\n\n  // Number of frozen columns\n  this.rawNumFrozen = modelUtil.customValue(this.optionsObj.prop('numFrozen'));\n  // Number for frozen columns to display\n  this.numFrozen = ko.pureComputed(() =>\n    Math.max(\n      0,\n      Math.min(\n        this.rawNumFrozen(),\n        this.viewFields().all().length - 1\n      )\n    )\n  );\n\n  this.hasCustomOptions = ko.observable(false);\n  this.desiredAccessLevel = ko.observable<AccessLevel|null>(null);\n  this.columnsToMap = ko.observable<ColumnsToMap|null>(null);\n  // Calculate mapped columns for Custom Widget.\n  this.mappedColumns = ko.pureComputed(() => {\n    // First check if widget has requested a custom column mapping and\n    // if we have a saved configuration.\n    const request = this.columnsToMap();\n    const mapping = this.customDef.columnsMapping();\n    if (!request || !mapping) {\n      return null;\n    }\n    // Convert simple column expressions (widget can just specify a name of a column) to a rich column definition.\n    const columnsToMap = request.map(r => new ColumnToMapImpl(r));\n    const result: WidgetColumnMap = {};\n    // Prepare map of existing column, will need this for translating colRefs to colIds.\n    const colMap = new Map(this.columns().map(f => [f.id.peek(), f]));\n    for(const widgetCol of columnsToMap) {\n      // Start with marking this column as not mapped.\n      result[widgetCol.name] = widgetCol.allowMultiple ? [] : null;\n      const mappedCol = mapping[widgetCol.name];\n      if (!mappedCol) {\n        continue;\n      }\n      if (widgetCol.allowMultiple) {\n        // We expect a list of colRefs be mapped;\n        if (!Array.isArray(mappedCol)) { continue; }\n        result[widgetCol.name] = mappedCol\n          // Remove all colRefs saved but deleted\n          .filter(cId => colMap.has(cId))\n          // And those with wrong type.\n          .filter(cId => widgetCol.canByMapped(colMap.get(cId)!.pureType()))\n          .map(cId => colMap.get(cId)!.colId());\n      } else {\n         // Widget expects a single value and existing column\n         if (Array.isArray(mappedCol) || !colMap.has(mappedCol)) { continue; }\n         const selectedColumn = colMap.get(mappedCol)!;\n         result[widgetCol.name] = widgetCol.canByMapped(selectedColumn.pureType()) ? selectedColumn.colId() : null;\n      }\n    }\n    return result;\n  });\n\n  this.allowSelectBy = ko.observable(false);\n  this.selectedRows = ko.observable(null as number[]|null);\n  this.selectedRowsActive = this.autoDispose(ko.pureComputed(() => this.selectedRows() !== null));\n\n  this.tableId = this.autoDispose(ko.pureComputed(() => this.table().tableId()));\n  const rawSection = this.autoDispose(ko.pureComputed(() => this.table().rawViewSection()));\n  this.rulesCols = refListRecords(docModel.columns, ko.pureComputed(() => rawSection().rules()));\n  this.rulesColsIds = ko.pureComputed(() => this.rulesCols().map(c => c.colId()));\n  this.rulesStyles = modelUtil.savingComputed({\n    read: () => rawSection().optionsObj.prop(\"rulesOptions\")() ?? [],\n    write: (setter, val) => setter(rawSection().optionsObj.prop(\"rulesOptions\"), val)\n  });\n  this.hasRules = ko.pureComputed(() => this.rulesCols().length > 0);\n  this.addEmptyRule = async () => {\n    const action = [\n      'AddEmptyRule',\n      this.tableId.peek(),\n      null,\n      null\n    ];\n    await docModel.docData.sendAction(action, `Update rules for ${this.table.peek().tableId.peek()}`);\n  };\n\n  this.removeRule = (index: number) => removeRule(docModel, this, index);\n\n  this.isCollapsed = this.autoDispose(ko.pureComputed(() => {\n    const list = this.view().activeCollapsedSections();\n    return list.includes(this.id());\n  }));\n}\n","import { allCommands } from 'app/client/components/commands';\nimport { makeT } from 'app/client/lib/localization';\nimport { menuDivider, menuItemCmd } from 'app/client/ui2018/menus';\nimport { IMultiColumnContextMenu } from 'app/client/ui/GridViewMenus';\nimport { IRowContextMenu } from 'app/client/ui/RowContextMenu';\nimport { COMMENTS } from 'app/client/models/features';\nimport { dom } from 'grainjs';\n\nconst t = makeT('CellContextMenu');\n\nexport function CellContextMenu(rowOptions: IRowContextMenu, colOptions: IMultiColumnContextMenu) {\n\n  const { disableInsert, disableDelete, isViewSorted } = rowOptions;\n  const { disableModify, isReadonly } = colOptions;\n\n  // disableModify is true if the column is a summary column or is being transformed.\n  // isReadonly is true for readonly mode.\n  const disableForReadonlyColumn = dom.cls('disabled', Boolean(disableModify) || isReadonly);\n  const disableForReadonlyView = dom.cls('disabled', isReadonly);\n\n  const numCols: number = colOptions.numColumns;\n  const nameClearColumns = colOptions.isFiltered ?\n    t(\"Reset {{count}} entire columns\", {count: numCols}) :\n    t(\"Reset {{count}} columns\", {count: numCols});\n  const nameDeleteColumns = t(\"Delete {{count}} columns\", {count: numCols});\n\n  const numRows: number = rowOptions.numRows;\n  const nameDeleteRows = t(\"Delete {{count}} rows\", {count: numRows});\n\n  const nameClearCells = (numRows > 1 || numCols > 1) ? t(\"Clear values\") : t(\"Clear cell\");\n\n  const result: Array<Element|null> = [];\n\n  result.push(\n    menuItemCmd(allCommands.contextMenuCut, t('Cut'), disableForReadonlyColumn),\n    menuItemCmd(allCommands.contextMenuCopy, t('Copy')),\n    menuItemCmd(allCommands.contextMenuPaste, t('Paste'), disableForReadonlyColumn),\n    menuDivider(),\n    colOptions.isFormula ?\n      null :\n      menuItemCmd(allCommands.clearValues, nameClearCells, disableForReadonlyColumn),\n      menuItemCmd(allCommands.clearColumns, nameClearColumns, disableForReadonlyColumn),\n\n    ...(\n      (numCols > 1 || numRows > 1) ? [] : [\n        menuDivider(),\n        menuItemCmd(allCommands.copyLink, t(\"Copy anchor link\")),\n        menuDivider(),\n        menuItemCmd(allCommands.filterByThisCellValue, t(\"Filter by this value\")),\n        menuItemCmd(allCommands.openDiscussion, t('Comment'), dom.cls('disabled', (\n         isReadonly || numRows === 0 || numCols === 0\n        )), dom.hide(use => !use(COMMENTS()))) //TODO: i18next\n      ]\n    ),\n\n    menuDivider(),\n\n    // inserts\n    ...(\n      isViewSorted ?\n        // When the view is sorted, any newly added records get shifts instantly at the top or\n        // bottom. It could be very confusing for users who might expect the record to stay above or\n        // below the active row. Thus in this case we show a single `insert row` command.\n        [menuItemCmd(allCommands.insertRecordAfter, t(\"Insert row\"),\n                    dom.cls('disabled', disableInsert))] :\n\n        [menuItemCmd(allCommands.insertRecordBefore, t(\"Insert row above\"),\n                     dom.cls('disabled', disableInsert)),\n         menuItemCmd(allCommands.insertRecordAfter, t(\"Insert row below\"),\n                     dom.cls('disabled', disableInsert))]\n    ),\n    menuItemCmd(allCommands.duplicateRows, t(\"Duplicate rows\", {count: numRows}),\n        dom.cls('disabled', disableInsert || numRows === 0)),\n    menuItemCmd(allCommands.insertFieldBefore, t(\"Insert column to the left\"),\n                disableForReadonlyView),\n    menuItemCmd(allCommands.insertFieldAfter, t(\"Insert column to the right\"),\n                disableForReadonlyView),\n\n\n    menuDivider(),\n\n    // deletes\n    menuItemCmd(allCommands.deleteRecords, nameDeleteRows, dom.cls('disabled', disableDelete)),\n\n    menuItemCmd(allCommands.deleteFields, nameDeleteColumns, disableForReadonlyColumn),\n\n    // todo: add \"hide N columns\"\n  );\n\n  return result;\n}\n","import * as Clipboard from 'app/client/components/Clipboard';\nimport * as commands from 'app/client/components/commands';\nimport {copyToClipboard} from 'app/client/lib/clipboardUtils';\nimport {FocusLayer} from 'app/client/lib/FocusLayer';\nimport {makeT} from 'app/client/lib/localization';\nimport {setTestState} from 'app/client/lib/testState';\nimport {ViewFieldRec} from 'app/client/models/DocModel';\nimport {autoGrow} from 'app/client/ui/forms';\nimport {showTransientTooltip} from 'app/client/ui/tooltips';\nimport {basicButton, primaryButton, textButton} from 'app/client/ui2018/buttons';\nimport {theme, vars} from 'app/client/ui2018/cssVars';\nimport {icon} from 'app/client/ui2018/icons';\nimport {menuCssClass} from 'app/client/ui2018/menus';\n\nimport {Computed, dom, makeTestId, Observable, styled} from 'grainjs';\nimport * as ko from 'knockout';\nimport {IOpenController, PopupControl, setPopupToCreateDom} from 'popweasel';\nimport { cssInput, cssLabel, cssRenamePopup, cssTextArea } from 'app/client/ui/RenamePopupStyles';\n\n\nconst testId = makeTestId('test-column-title-');\nconst t = makeT('ColumnTitle');\n\ninterface IColumnTitleOptions {\n  field: ViewFieldRec;\n  isEditing: ko.Computed<boolean>;\n  optCommands?: any;\n}\n\nexport function buildRenameColumn(options: IColumnTitleOptions) {\n  return (elem: Element) => {\n    // To open the popup we will listen to the isEditing observable, and open the popup when it\n    // it is changed. This can be changed either by us, but also by an external source.\n    const trigger = (triggerElem: Element, ctl: PopupControl) => {\n      ctl.autoDispose(options.isEditing.subscribe((editing) => {\n        if (editing) {\n          ctl.open();\n        } else if (!ctl.isDisposed()) {\n          ctl.close();\n        }\n      }));\n    };\n    setPopupToCreateDom(elem, ctl => buildColumnRenamePopup(ctl, options), {\n      placement: 'bottom-start',\n      trigger: [trigger],\n      attach: 'body',\n      boundaries: 'viewport',\n    });\n  };\n}\n\nfunction buildColumnRenamePopup(\n  ctrl: IOpenController, {field, isEditing, optCommands}: IColumnTitleOptions\n) {\n  // Store temporary values for the label and description.\n  const editedLabel = Observable.create(ctrl, field.displayLabel.peek());\n  const editedDesc = Observable.create(ctrl, field.description.peek());\n  // Col id is static, as we can't forsee if it will change and what it will\n  // change to (it may overlap with another column)\n  const colId = '$' + field.colId.peek();\n\n  const hasChange = Computed.create(ctrl, (use) => {\n    return use(editedLabel)?.trim() !== field.displayLabel.peek()\n        || use(editedDesc)?.trim() !== field.description.peek();\n  });\n\n  const cantSave = Computed.create(ctrl, (use) => {\n    const filledLabel = Boolean(use(editedLabel)?.trim());\n    return !filledLabel;\n  });\n\n  // Function to change a column name.\n  const saveColumnLabel = async () => {\n    // Trim new label and make sure it is a string (not null).\n    const newLabel = editedLabel.get()?.trim() ?? '';\n    // Save only when it is not empty and different from the current value.\n    if (newLabel && newLabel !== field.displayLabel.peek()) {\n      await field.displayLabel.setAndSave(newLabel);\n    }\n  };\n\n  // Function to change a column description.\n  const saveColumnDesc = async () => {\n    const newDesc = editedDesc.get()?.trim() ?? '';\n    if (newDesc !== field.description.peek()) {\n      await field.description.saveOnly(newDesc);\n    }\n  };\n\n  // Function save column name and description and close the popup.\n  const save = () => Promise.all([\n    saveColumnLabel(),\n    saveColumnDesc()\n  ]);\n\n  // When the popup is closing we will save everything, unless the user has pressed the cancel button.\n  let cancelled = false;\n\n  // Function to close the popup with saving.\n  const close = () => ctrl.close();\n\n  // Function to close the popup without saving.\n  const cancel = () => { cancelled = true; close(); };\n\n  // Function that is called when popup is closed.\n  const onClose = () => {\n    if (!cancelled) {\n      save().catch(reportError);\n    }\n    // Reset the isEditing flag. It will set the editIndex in GridView to -1 if this is active column.\n    // It can happen that we will be open even if the column is not active (as the isEditing flag is asynchronous).\n    isEditing(false);\n  };\n\n  // User interface for the popup.\n  const myCommands = {\n    // Escape key: just close the popup.\n    cancel,\n    // Enter key: save and close the popup, unless the description input is focused.\n    // There is also a variant for Ctrl+Enter which will always save.\n    accept: () => {\n      // Enters are ignored in the description input (unless ctrl is pressed)\n      if (document.activeElement === descInput) { return true; }\n      close();\n    },\n    // Tab: save and close the popup, and move to the next field.\n    nextField: () => {\n      close();\n      optCommands?.nextField?.();\n    },\n    // Shift + Tab: save and close the popup, and move to the previous field.\n    prevField: () => {\n      close();\n      optCommands?.prevField?.();\n    },\n    // ArrowUp: moves focus to the label if it is already at the top\n    cursorUp: () => {\n      if (document.activeElement === descInput && descInput?.selectionStart === 0) {\n        labelInput?.focus();\n        labelInput?.select();\n      } else {\n        return true;\n      }\n    },\n    // ArrowDown: move to the description input, only if the label input is focused.\n    cursorDown: () => {\n      if (document.activeElement === labelInput) {\n        const focus = () => {\n          descInput?.focus();\n          descInput?.select();\n        };\n        showDesc.set(true);\n        focus();\n      } else {\n        return true;\n      }\n    }\n  };\n\n  // Create this group and attach it to the popup and both inputs.\n  const commandGroup = commands.createGroup({...optCommands, ...myCommands}, ctrl, true);\n\n  // We will still focus from other elements and restore it on either the label or description input.\n  let lastFocus: HTMLElement | undefined;\n  const rememberFocus = (el: HTMLElement) => dom.on('focus', () => lastFocus = el);\n  const restoreFocus = (el: HTMLElement) => dom.on('focus', () => lastFocus?.focus());\n\n  const showDesc = Observable.create(null, Boolean(field.description.peek() !== ''));\n\n  let labelInput: HTMLInputElement | undefined;\n  let descInput: HTMLTextAreaElement | undefined;\n  return cssRenamePopup(\n    dom.onDispose(onClose),\n    dom.autoDispose(commandGroup),\n    dom.autoDispose(showDesc),\n    testId('popup'),\n    dom.cls(menuCssClass),\n    cssLabel(t(\"Column label\")),\n    cssColLabelBlock(\n      labelInput = cssInput(\n        editedLabel,\n        updateOnKey,\n        { placeholder: t(\"Provide a column label\") },\n        testId('label'),\n        commandGroup.attach(),\n        rememberFocus,\n      ),\n      cssColId(\n        t(\"COLUMN ID: \"),\n        colId,\n        dom.on('click', async (e, d) => {\n          e.stopImmediatePropagation();\n          e.preventDefault();\n          showTransientTooltip(d, t(\"Column ID copied to clipboard\"), {\n            key: 'copy-column-id'\n          });\n          await copyToClipboard(colId);\n          setTestState({clipboard: colId});\n        }),\n        testId('colid'),\n      ),\n    ),\n    dom.maybe(use => !use(showDesc), () => cssAddDescription(\n      textButton(\n        icon('Plus'),\n        t(\"Add description\"),\n        dom.on('click', () => {\n          showDesc.set(true);\n          descInput?.focus();\n          setTimeout(() => descInput?.focus(), 0);\n        }),\n        testId('add-description'),\n      ),\n    )),\n    dom.maybe(showDesc, () => [\n      cssLabel(t(\"Column description\")),\n      descInput = cssTextArea(editedDesc, updateOnKey,\n        testId('description'),\n        commandGroup.attach(),\n        rememberFocus,\n        autoGrow(editedDesc),\n      ),\n    ]),\n    dom.onKeyDown({\n      Enter$: e => {\n        if (e.ctrlKey || e.metaKey) {\n          close();\n          return false;\n        }\n      }\n    }),\n    cssButtons(\n      primaryButton(\n        dom.on('click', cancel),\n        testId('close'),\n        dom.hide(hasChange),\n        t(\"Close\"),\n      ),\n      primaryButton(t(\"Save\"),\n        dom.on('click', close),\n        testId('save'),\n        dom.show(hasChange),\n        dom.boolAttr('disabled', cantSave),\n      ),\n      basicButton(t(\"Cancel\"),\n        testId('cancel'),\n        dom.on('click', cancel),\n        dom.show(hasChange)\n      ),\n    ),\n    // After showing the popup, focus the label input and select it's content.\n    elem => { setTimeout(() => {\n      if (ctrl.isDisposed()) { return; }\n      labelInput?.focus();\n      labelInput?.select();\n    }, 0); },\n    // Create a FocusLayer to keep focus in this popup while it's active, by default when focus is stolen\n    // by someone else, we will bring back it to the label element. Clicking anywhere outside the popup\n    // will close it, but not when we click on the header itself (as it will reopen it). So this one\n    // makes sure that the focus is restored in the label.\n    elem => { FocusLayer.create(ctrl, {\n      defaultFocusElem: elem,\n      pauseMousetrap: false,\n      allowFocus: Clipboard.allowFocus\n    }); },\n    restoreFocus\n  );\n}\n\nconst updateOnKey = { onInput: true };\n\nconst cssAddDescription = styled('div', `\n  display: flex;\n  padding-top: 14px;\n  padding-bottom: 4px;\n  & button {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n  }\n`);\n\nconst cssColLabelBlock = styled('div', `\n  display: flex;\n  flex-direction: column;\n  flex: auto;\n  min-width: 80px;\n`);\n\nconst cssColId = styled('div', `\n  font-size: ${vars.xsmallFontSize};\n  font-weight: ${vars.bigControlTextWeight};\n  margin-top: 8px;\n  color: ${theme.lightText};\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  cursor: pointer;\n  align-self: start;\n`);\n\nconst cssButtons = styled('div', `\n  display: flex;\n  margin-top: 16px;\n  gap: 8px;\n  & button {\n    min-width: calc(50 / 13 * 1em); /* Min 50px for 13px font size, to make Save and Close buttons equal width */\n  }\n`);\n","import {makeT} from 'app/client/lib/localization';\nimport {createSessionObs} from 'app/client/lib/sessionObs';\nimport {DocPageModel} from 'app/client/models/DocPageModel';\nimport {reportError} from 'app/client/models/errors';\nimport {urlState} from 'app/client/models/gristUrlState';\nimport {getTimeFromNow} from 'app/client/models/HomeModel';\nimport {buildConfigContainer} from 'app/client/ui/RightPanel';\nimport {buttonSelect} from 'app/client/ui2018/buttonSelect';\nimport {testId, theme, vars} from 'app/client/ui2018/cssVars';\nimport {icon} from 'app/client/ui2018/icons';\nimport {menu, menuAnnotate, menuItemLink} from 'app/client/ui2018/menus';\nimport {buildUrlId, parseUrlId} from 'app/common/gristUrls';\nimport {StringUnion} from 'app/common/StringUnion';\nimport {DocSnapshot} from 'app/common/UserAPI';\nimport {Disposable, dom, IDomComponent, MultiHolder, Observable, styled} from 'grainjs';\nimport moment from 'moment';\n\nconst t = makeT('DocHistory');\n\nconst DocHistorySubTab = StringUnion(\"activity\", \"snapshots\");\n\nexport class DocHistory extends Disposable implements IDomComponent {\n  private _subTab = createSessionObs(this, \"docHistorySubTab\", \"snapshots\", DocHistorySubTab.guard);\n\n  constructor(private _docPageModel: DocPageModel, private _actionLog: IDomComponent) {\n    super();\n  }\n\n  public buildDom() {\n    const tabs = [\n      {value: 'activity', label: t(\"Activity\")},\n      {value: 'snapshots', label: t(\"Snapshots\")},\n    ];\n    return [\n      cssSubTabs(\n        buttonSelect(this._subTab, tabs, {}, testId('doc-history-tabs')),\n      ),\n      dom.domComputed(this._subTab, (subTab) =>\n        buildConfigContainer(\n          subTab === 'activity' ? this._actionLog.buildDom() :\n          subTab === 'snapshots' ? dom.create(this._buildSnapshots.bind(this)) :\n          null\n        )\n      ),\n    ];\n  }\n\n  private _buildSnapshots(owner: MultiHolder) {\n    // Fetch snapshots, and render.\n    const doc = this._docPageModel.currentDoc.get();\n    if (!doc) { return null; }\n\n    // origUrlId is the snapshot-less URL, which we use to fetch snapshot history, and for\n    // snapshot comparisons.\n    const origUrlId = buildUrlId({...doc.idParts, snapshotId: undefined});\n\n    // If comparing one snapshot to another, get the other ID, so that we can highlight it too.\n    const compareUrlId = urlState().state.get().params?.compare;\n    const compareSnapshotId = compareUrlId && parseUrlId(compareUrlId).snapshotId;\n\n    // Helper to set a link to open a snapshot, optionally comparing it with a docId.\n    // We include urlState().state to preserve the currently selected page.\n    function setLink(snapshot: DocSnapshot, compareDocId?: string) {\n      return dom.attr('href', (use) => urlState().makeUrl({\n        ...use(urlState().state), doc: snapshot.docId,\n        params: (compareDocId ? {compare: compareDocId} : {})\n      }));\n    }\n\n    const snapshots = Observable.create<DocSnapshot[]>(owner, []);\n    const snapshotsDenied = Observable.create<boolean>(owner, false);\n    const userApi = this._docPageModel.appModel.api;\n    const docApi = userApi.getDocAPI(origUrlId);\n    docApi.getSnapshots().then(result =>\n      snapshots.isDisposed() || snapshots.set(result.snapshots)).catch(err => {\n        snapshotsDenied.set(true);\n        reportError(err);\n      });\n    return dom(\n      'div',\n      dom.maybe(snapshotsDenied, () => cssSnapshotDenied(\n        t(\"Snapshots are unavailable.\"),\n        testId('doc-history-error'))),\n      // Note that most recent snapshots are first.\n      dom.domComputed(snapshots, (snapshotList) => snapshotList.map((snapshot, index) => {\n        const modified = moment(snapshot.lastModified);\n        const prevSnapshot = snapshotList[index + 1] || null;\n        return cssSnapshot(\n          cssSnapshotTime(getTimeFromNow(snapshot.lastModified)),\n          cssSnapshotCard(\n            cssSnapshotCard.cls('-current', Boolean(\n              snapshot.snapshotId === doc.idParts.snapshotId ||\n              (compareSnapshotId && snapshot.snapshotId === compareSnapshotId)\n            )),\n            dom('div',\n              cssDatePart(modified.format('ddd ll')), ' ',\n              cssDatePart(modified.format('LT'))\n            ),\n            cssMenuDots(icon('Dots'),\n              menu(() => [\n                  menuItemLink(setLink(snapshot), t(\"Open Snapshot\")),\n                  menuItemLink(setLink(snapshot, origUrlId), t(\"Compare to Current\"),\n                    menuAnnotate(t(\"Beta\"))),\n                  prevSnapshot && menuItemLink(setLink(prevSnapshot, snapshot.docId), t(\"Compare to Previous\"),\n                    menuAnnotate(t(\"Beta\"))),\n                ],\n                {placement: 'bottom-end', parentSelectorToMark: '.' + cssSnapshotCard.className}\n              ),\n              testId('doc-history-snapshot-menu'),\n            ),\n            testId('doc-history-card'),\n          ),\n          testId('doc-history-snapshot'),\n        );\n      })),\n    );\n  }\n}\n\nconst cssSubTabs = styled('div', `\n  padding: 16px;\n  border-bottom: 1px solid ${theme.pagePanelsBorder};\n`);\n\nconst cssSnapshot = styled('div', `\n  margin: 8px 16px;\n`);\n\nconst cssSnapshotDenied = styled('div', `\n  margin: 8px 16px;\n`);\n\nconst cssSnapshotTime = styled('div', `\n  text-align: right;\n  color: ${theme.lightText};\n  font-size: ${vars.smallFontSize};\n`);\n\nconst cssSnapshotCard = styled('div', `\n  border: 1px solid ${theme.documentHistorySnapshotBorder};\n  padding: 8px;\n  color: ${theme.documentHistorySnapshotFg};\n  background: ${theme.documentHistorySnapshotBg};\n  border-radius: 8px;\n  overflow: hidden;\n  display: flex;\n  align-items: center;\n  --icon-color: ${theme.controlSecondaryFg};\n\n  &-current {\n    background-color: ${theme.documentHistorySnapshotSelectedBg};\n    color: ${theme.documentHistorySnapshotSelectedFg};\n    --icon-color: ${theme.documentHistorySnapshotSelectedFg};\n  }\n`);\n\nconst cssDatePart = styled('span', `\n  display: inline-block;\n`);\n\nconst cssMenuDots = styled('div', `\n  flex: none;\n  margin: 0 4px 0 auto;\n  height: 24px;\n  width: 24px;\n  padding: 4px;\n  line-height: 0px;\n  border-radius: 3px;\n  cursor: default;\n  &:hover, &.weasel-popup-open {\n    background-color: ${theme.hover};\n  }\n`);\n","import {transientInput} from 'app/client/ui/transientInput';\nimport {mediaSmall, theme, vars} from 'app/client/ui2018/cssVars';\nimport {icon} from 'app/client/ui2018/icons';\nimport {styled} from 'grainjs';\nimport {bigBasicButton} from 'app/client/ui2018/buttons';\n\n// Import popweasel to ensure that sortSelector style below comes later in CSS than popweasel\n// styles, which gives it priority.\nimport 'popweasel';\n\n// The \"&:after\" clause forces some padding below all docs.\nexport const docList = styled('div', `\n  height: 100%;\n  padding: 32px 64px 24px 64px;\n  overflow-y: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n\n  &:after {\n    content: \"\";\n    display: block;\n    height: 64px;\n  }\n  @media ${mediaSmall} {\n    & {\n      padding: 32px 24px 24px 24px;\n    }\n  }\n  @media print {\n    & {\n      display: none;\n    }\n  }\n`);\n\nexport const docListContent = styled('div', `\n  display: flex;\n`);\n\nexport const docMenu = styled('div', `\n  flex-grow: 1;\n  max-width: 100%;\n`);\n\nconst listHeader = styled('div', `\n  min-height: 32px;\n  line-height: 32px;\n  color: ${theme.text};\n  font-size: ${vars.xxxlargeFontSize};\n  font-weight: ${vars.headerControlTextWeight};\n`);\n\nexport const docListHeader = styled(listHeader, `\n  margin-bottom: 24px;\n`);\n\nexport const templatesHeaderWrap = styled('div', `\n  display: flex;\n  align-items: baseline;\n  justify-content: space-between;\n  gap: 16px;\n  margin-bottom: 24px;\n\n  @media ${mediaSmall} {\n    & {\n      flex-direction: column;\n      align-items: flex-start;\n    }\n  }\n`);\n\nexport const templatesHeader = styled(listHeader, `\n  cursor: pointer;\n`);\n\nexport const featuredTemplatesHeader = styled(docListHeader, `\n  display: flex;\n  align-items: center;\n`);\n\nexport const otherSitesHeader = templatesHeader;\n\nexport const allDocsTemplates = styled('div', `\n  display: flex;\n`);\n\nexport const docBlock = styled('div', `\n  color: ${theme.text};\n  max-width: 550px;\n  min-width: 300px;\n  margin-bottom: 28px;\n\n  &-icons {\n    max-width: max-content;\n    min-width: calc(min(550px, 100%));\n  }\n`);\n\nexport const templatesDocBlock = styled(docBlock, `\n  margin-top: 32px;\n`);\n\nexport const otherSitesBlock = styled('div', `\n  color: ${theme.text};\n  margin-bottom: 32px;\n`);\n\nexport const otherSitesButtons = styled('div', `\n  display: flex;\n  overflow: auto;\n  padding-bottom: 16px;\n  margin-top: 16px;\n  margin-bottom: 28px;\n  gap: 16px;\n`);\n\nexport const siteButton = styled(bigBasicButton, `\n  flex: 0 0 auto;\n`);\n\nexport const docHeaderIcon = styled(icon, `\n  margin-right: 8px;\n  margin-top: -3px;\n  --icon-color: ${theme.lightText};\n`);\n\nexport const pinnedDocsIcon = styled(docHeaderIcon, `\n  --icon-color: ${theme.text};\n`);\n\nexport const featuredTemplatesIcon = styled(icon, `\n  --icon-color: ${theme.text};\n  margin-right: 8px;\n  width: 20px;\n  height: 20px;\n`);\n\nexport const templatesHeaderIcon = styled(docHeaderIcon, `\n  width: 24px;\n  height: 24px;\n`);\n\nexport const otherSitesHeaderIcon = templatesHeaderIcon;\n\nconst docBlockHeader = `\n  display: flex;\n  align-items: center;\n  height: 40px;\n  line-height: 40px;\n  margin-bottom: 8px;\n  margin-right: -16px;\n  color: ${theme.text};\n  font-size: ${vars.mediumFontSize};\n  font-weight: bold;\n  &, &:hover, &:focus {\n    text-decoration: none;\n    outline: none;\n    color: inherit;\n  }\n`;\n\nexport const docBlockHeaderLink = styled('a', docBlockHeader);\n\nexport const templateBlockHeader = styled('div', docBlockHeader);\n\nexport const wsLeft = styled('div', `\n  color: ${theme.text};\n  flex: 1 0 50%;\n  min-width: 0px;\n  margin-right: 24px;\n`);\n\nexport const docRowWrapper = styled('div', `\n  position: relative;\n  margin: 0px -16px 8px -16px;\n  border-radius: 3px;\n  font-size: ${vars.mediumFontSize};\n  color: ${theme.text};\n  --icon-color: ${theme.lightText};\n\n  &:hover, &.weasel-popup-open, &-renaming {\n    background-color: ${theme.hover};\n  }\n`);\n\nexport const docRowLink = styled('a', `\n  display: flex;\n  align-items: center;\n  height: 40px;\n  line-height: 40px;\n  border-radius: 3px;\n  outline: none;\n  transition: background-color 2s;\n  &, &:hover, &:focus {\n    text-decoration: none;\n    outline: none;\n    color: inherit;\n  }\n  &-no-access, &-no-access:hover, &-no-access:focus {\n    color: ${theme.disabledText};\n    cursor: not-allowed;\n  }\n`);\n\nexport const docLeft = styled('div', `\n  flex: 1 0 50%;\n  min-width: 0px;\n  margin: 0 16px;\n  display: flex;\n  align-items: center;\n`);\n\nexport const docName = styled('div', `\n  flex: 0 1 auto;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`);\n\nexport const docPinIcon = styled(icon, `\n  flex: none;\n  margin-left: 4px;\n  --icon-color: ${theme.accentIcon};\n`);\n\nexport const docPublicIcon = styled(icon, `\n  flex: none;\n  margin-left: auto;\n  --icon-color: ${theme.accentIcon};\n`);\n\nexport const docEditorInput = styled(transientInput, `\n  flex: 1 0 50%;\n  min-width: 0px;\n  margin: 0 16px;\n  color: initial;\n  font-size: inherit;\n  line-height: initial;\n`);\n\nexport const docRowUpdatedAt = styled('div', `\n  flex: 1 1 50%;\n  color: ${theme.lightText};\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  font-weight: normal;\n`);\n\nexport const docMenuTrigger = styled('div', `\n  flex: none;\n  margin: 0 4px 0 auto;\n  height: 24px;\n  width: 24px;\n  padding: 4px;\n  line-height: 0px;\n  border-radius: 3px;\n  cursor: default;\n  --icon-color: ${theme.docMenuDocOptionsFg};\n  .${docRowLink.className}:hover > & {\n    --icon-color: ${theme.docMenuDocOptionsHoverFg};\n  }\n  &:hover, &.weasel-popup-open {\n    background-color: ${theme.docMenuDocOptionsHoverBg};\n    --icon-color: ${theme.docMenuDocOptionsHoverFg};\n  }\n`);\n\nexport const moveDocModalBody = styled('div', `\n  display: flex;\n  flex-direction: column;\n  border-bottom: 1px solid ${theme.modalBorderDark};\n  margin: 0 -64px;\n  height: 200px;\n`);\n\nexport const moveDocListItem = styled('div', `\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  height: 32px;\n  padding: 12px 64px;\n  cursor: pointer;\n  font-size: ${vars.mediumFontSize};\n\n  &-selected {\n    background-color: ${theme.moveDocsSelectedBg};\n    color: ${theme.moveDocsSelectedFg};\n  }\n  &-disabled {\n    color: ${theme.moveDocsDisabledFg};\n    cursor: default;\n  }\n`);\n\nexport const moveDocListText = styled('div', `\n  display: flex;\n  flex: 1 1 0;\n  flex-direction: column;\n  justify-content: center;\n`);\n\nexport const moveDocListHintText = styled(moveDocListText, `\n  text-align: right;\n`);\n\nexport const spinner = styled('div', `\n  display: flex;\n  align-items: center;\n  height: 80px;\n  margin: auto;\n  margin-top: 80px;\n`);\n\nexport const prefSelectors = styled('div', `\n  float: right;\n  display: flex;\n  align-items: center;\n`);\n\nexport const sortSelector = styled('div', `\n  margin-right: 24px;\n\n  /* negate the styles of a select that normally looks like a button */\n  border: none;\n  display: inline-flex;\n  height: unset;\n  line-height: unset;\n  align-items: center;\n  border-radius: ${vars.controlBorderRadius};\n  color: ${theme.controlFg};\n  --icon-color: ${theme.controlFg};\n  background-color: unset;\n\n  &:focus, &:hover {\n    outline: none;\n    box-shadow: none;\n    background-color: ${theme.hover};\n  }\n  @media ${mediaSmall} {\n    & {\n      margin-right: 0;\n    }\n  }\n`);\n\nexport const upgradeButton = styled('div', `\n  margin-left: 32px;\n\n  @media ${mediaSmall} {\n    & {\n      margin-left: 8px;\n    }\n  }\n`);\n\nexport const upgradeCard = styled('div', `\n  margin-left: 64px;\n`);\n","import {Placement} from '@popperjs/core';\nimport {placements} from '@popperjs/core/lib/enums';\nimport {DocComm} from 'app/client/components/DocComm';\nimport {makeT} from 'app/client/lib/localization';\nimport {sameDocumentUrlState} from 'app/client/models/gristUrlState';\nimport {cssButtons, cssLinkBtn, cssLinkIcon} from 'app/client/ui/ExampleCard';\nimport {IOnBoardingMsg, startOnBoarding} from 'app/client/ui/OnBoardingPopups';\nimport {isNarrowScreen} from 'app/client/ui2018/cssVars';\nimport {IconList, IconName} from 'app/client/ui2018/IconList';\nimport {DocData} from 'app/common/DocData';\nimport {dom} from 'grainjs';\nimport sortBy = require('lodash/sortBy');\n\nconst t = makeT('DocTour');\n\nexport async function startDocTour(docData: DocData, docComm: DocComm, onFinishCB: () => void) {\n  const docTour: IOnBoardingMsg[] = await makeDocTour(docData, docComm) || invalidDocTour;\n  exposeDocTour(docTour);\n  startOnBoarding(docTour, onFinishCB);\n}\n\nconst invalidDocTour: IOnBoardingMsg[] = [{\n  title: t(\"No valid document tour\"),\n  body: t(\"Cannot construct a document tour from the data in this document. \\\nEnsure there is a table named GristDocTour with columns Title, Body, Placement, and Location.\"),\n  selector: 'document',\n  showHasModal: true,\n}];\n\nasync function makeDocTour(docData: DocData, docComm: DocComm): Promise<IOnBoardingMsg[] | null> {\n  const tableId = \"GristDocTour\";\n  if (!docData.getTable(tableId)) {\n    return null;\n  }\n  // Make sure any formulas in GristDocTour table have had time to evaluate. For example, for a\n  // first time open of a new document copy, any use of SELF_HYPERLINK will be stale since the URL\n  // of the document has changed.\n  await docComm.waitForInitialization();\n  await docData.fetchTable(tableId);\n  const tableData = docData.getTable(tableId)!;\n\n  const result = sortBy(tableData.getRowIds(), tableData.getRowPropFunc('manualSort') as any).map(rowId => {\n    function getValue(colId: string): string {\n      return String(tableData.getValue(rowId, colId) || \"\");\n    }\n    const title = getValue(\"Title\");\n    let body: HTMLElement | string = getValue(\"Body\");\n    const linkText = getValue(\"Link_Text\");\n    const linkUrl = getValue(\"Link_URL\");\n    const linkIcon = getValue(\"Link_Icon\") as IconName;\n    const locationValue = getValue(\"Location\");\n    let placement = getValue(\"Placement\");\n\n    if (!(title || body)) {\n      return null;\n    }\n\n    const urlState = sameDocumentUrlState(locationValue);\n    if (isNarrowScreen() || !placements.includes(placement as Placement)) {\n      placement = \"auto\";\n    }\n\n    let validLinkUrl = true;\n    try {\n      new URL(linkUrl);\n    } catch {\n      validLinkUrl = false;\n    }\n\n    if (validLinkUrl && linkText) {\n      body = dom(\n        'div',\n        dom('p', body),\n        dom('p',\n          cssButtons(cssLinkBtn(\n            IconList.includes(linkIcon) ? cssLinkIcon(linkIcon) : null,\n            linkText,\n            {href: linkUrl, target: '_blank'},\n          ))\n        ),\n      );\n    }\n\n    return {\n      title,\n      body,\n      placement,\n      urlState,\n      selector: '.active_cursor',\n      // Center the popup if the user doesn't provide a link to a cell\n      showHasModal: !urlState?.hash\n    };\n  }).filter(x => x !== null) as IOnBoardingMsg[];\n  if (!result.length) {\n    return null;\n  }\n  return result;\n}\n\n// for easy testing\nfunction exposeDocTour(docTour: IOnBoardingMsg[]) {\n  (window as any)._gristDocTour = () =>\n    docTour.map(msg => ({\n      ...msg,\n      body: typeof msg.body === \"string\" ? msg.body\n        : (msg.body as HTMLElement)?.outerHTML\n          .replace(/_grain\\d+_/g, \"_grainXXX_\"),\n      urlState: msg.urlState?.hash\n    }));\n}\n","import {GristDoc} from 'app/client/components/GristDoc';\nimport {logTelemetryEvent} from 'app/client/lib/telemetry';\nimport {getWelcomeHomeUrl, urlState} from 'app/client/models/gristUrlState';\nimport {renderer} from 'app/client/ui/DocTutorialRenderer';\nimport {cssPopupBody, FLOATING_POPUP_TOOLTIP_KEY, FloatingPopup} from 'app/client/ui/FloatingPopup';\nimport {sanitizeHTML} from 'app/client/ui/sanitizeHTML';\nimport {hoverTooltip, setHoverTooltip} from 'app/client/ui/tooltips';\nimport {basicButton, primaryButton} from 'app/client/ui2018/buttons';\nimport {mediaXSmall, theme, vars} from 'app/client/ui2018/cssVars';\nimport {icon} from 'app/client/ui2018/icons';\nimport {loadingSpinner} from 'app/client/ui2018/loaders';\nimport {confirmModal, modal} from 'app/client/ui2018/modals';\nimport {parseUrlId} from 'app/common/gristUrls';\nimport {dom, makeTestId, Observable, styled} from 'grainjs';\nimport {marked} from 'marked';\nimport debounce = require('lodash/debounce');\nimport range = require('lodash/range');\nimport sortBy = require('lodash/sortBy');\n\ninterface DocTutorialSlide {\n  slideContent: string;\n  boxContent?: string;\n  slideTitle?: string;\n  imageUrls: string[];\n}\n\nconst testId = makeTestId('test-doc-tutorial-');\n\nexport class DocTutorial extends FloatingPopup {\n  private _appModel = this._gristDoc.docPageModel.appModel;\n  private _currentDoc = this._gristDoc.docPageModel.currentDoc.get();\n  private _currentFork = this._currentDoc?.forks?.[0];\n  private _docComm = this._gristDoc.docComm;\n  private _docData = this._gristDoc.docData;\n  private _docId = this._gristDoc.docId();\n  private _slides: Observable<DocTutorialSlide[] | null> = Observable.create(this, null);\n  private _currentSlideIndex = Observable.create(this, this._currentFork?.options?.tutorial?.lastSlideIndex ?? 0);\n\n\n  private _saveCurrentSlidePositionDebounced = debounce(this._saveCurrentSlidePosition, 1000, {\n    // Save new position immediately if at least 1 second has passed since the last change.\n    leading: true,\n    // Otherwise, wait for the new position to settle for 1 second before saving it.\n    trailing: true\n  });\n\n  constructor(private _gristDoc: GristDoc) {\n    super({\n      minimizable: true,\n      stopClickPropagationOnMove: true,\n    });\n  }\n\n  public async start() {\n    this.showPopup();\n    await this._loadSlides();\n\n    const tableData = this._docData.getTable('GristDocTutorial');\n    if (tableData) {\n      this.autoDispose(tableData.tableActionEmitter.addListener(() => this._reloadSlides()));\n    }\n  }\n\n  protected _buildTitle() {\n    return dom('span', dom.text(this._gristDoc.docPageModel.currentDocTitle), testId('popup-header'));\n  }\n\n  protected _buildContent() {\n    return [\n        dom.domComputed(use => {\n        const slides = use(this._slides);\n        const slideIndex = use(this._currentSlideIndex);\n        const slide = slides?.[slideIndex];\n        return cssPopupBody(\n          !slide ? cssSpinner(loadingSpinner()) : [\n            dom('div', elem => {\n              elem.innerHTML = slide.slideContent;\n            }),\n            !slide.boxContent ? null : cssTryItOutBox(\n              dom('div', elem => { elem.innerHTML = slide.boxContent!; }),\n            ),\n            dom.on('click', (ev) => {\n              if((ev.target as HTMLElement).tagName !== 'IMG') {\n                return;\n              }\n\n              this._openLightbox((ev.target as HTMLImageElement).src);\n            }),\n            this._initializeImages(),\n          ],\n          testId('popup-body'),\n        );\n      }),\n      cssPopupFooter(\n        dom.domComputed(use => {\n          const slides = use(this._slides);\n          if (!slides) { return null; }\n\n          const slideIndex = use(this._currentSlideIndex);\n          const numSlides = slides.length;\n          const isFirstSlide = slideIndex === 0;\n          const isLastSlide = slideIndex === numSlides - 1;\n          return [\n              cssFooterButtonsLeft(\n              cssPopupFooterButton(icon('Undo'),\n                hoverTooltip('Restart Tutorial', {key: FLOATING_POPUP_TOOLTIP_KEY}),\n                dom.on('click', () => this._restartTutorial()),\n                testId('popup-restart'),\n              ),\n            ),\n            cssProgressBar(\n              range(slides.length).map((i) => cssProgressBarDot(\n                hoverTooltip(slides[i].slideTitle, {\n                  closeOnClick: false,\n                  key: FLOATING_POPUP_TOOLTIP_KEY,\n                }),\n                cssProgressBarDot.cls('-current', i === slideIndex),\n                i === slideIndex ? null : dom.on('click', () => this._changeSlide(i)),\n                testId(`popup-slide-${i + 1}`),\n              )),\n            ),\n            cssFooterButtonsRight(\n              basicButton('Previous',\n                dom.on('click', async () => {\n                  await this._previousSlide();\n                }),\n                {style: `visibility: ${isFirstSlide ? 'hidden' : 'visible'}`},\n                testId('popup-previous'),\n              ),\n              primaryButton(isLastSlide ? 'Finish': 'Next',\n                isLastSlide\n                  ? dom.on('click', async () => await this._finishTutorial())\n                  : dom.on('click', async () => await this._nextSlide()),\n                testId('popup-next'),\n              ),\n            ),\n          ];\n        }),\n        testId('popup-footer'),\n      ),\n    ];\n  }\n\n  protected _buildArgs() {\n    return [\n      dom.cls('doc-tutorial-popup'),\n      testId('popup'),\n      // Pre-fetch images from all slides and store them in a hidden div.\n      dom.maybe(this._slides, slides =>\n        dom('div',\n          {style: 'display: none;'},\n          dom.forEach(slides, slide => {\n            if (slide.imageUrls.length === 0) { return null; }\n            return dom('div', slide.imageUrls.map(src => dom('img', {src})));\n          }),\n        ),\n      ),\n    ];\n  }\n\n  private async _loadSlides() {\n    const tableId = 'GristDocTutorial';\n    if (!this._docData.getTable(tableId)) {\n      throw new Error('DocTutorial failed to find table GristDocTutorial');\n    }\n\n    await this._docComm.waitForInitialization();\n    if (this.isDisposed()) { return; }\n\n    await this._docData.fetchTable(tableId);\n    if (this.isDisposed()) { return; }\n\n    const tableData = this._docData.getTable(tableId)!;\n    const slides = (await Promise.all(\n      sortBy(tableData.getRowIds(), tableData.getRowPropFunc('manualSort') as any)\n      .map(async rowId => {\n        let slideTitle: string | undefined;\n        const imageUrls: string[] = [];\n\n        const getValue = (colId: string): string | undefined => {\n          const value = tableData.getValue(rowId, colId);\n          return value ? String(value) : undefined;\n        };\n\n        const walkTokens = (token: marked.Token) => {\n          if (token.type === 'image') {\n            imageUrls.push(token.href);\n          }\n\n          if (!slideTitle && token.type === 'heading' && token.depth === 1) {\n            slideTitle = token.text;\n          }\n        };\n\n        let slideContent = getValue('slide_content');\n        if (!slideContent) { return null; }\n        slideContent = sanitizeHTML(await marked.parse(slideContent, {\n          async: true, renderer, walkTokens\n        }));\n\n        let boxContent = getValue('box_content');\n        if (boxContent) {\n          boxContent = sanitizeHTML(await marked.parse(boxContent, {\n            async: true, renderer, walkTokens\n          }));\n        }\n        return {\n          slideContent,\n          boxContent,\n          slideTitle,\n          imageUrls,\n        };\n      })\n    )).filter(slide => slide !== null) as DocTutorialSlide[];\n    if (this.isDisposed()) { return; }\n\n    if (slides.length === 0) {\n      throw new Error('DocTutorial failed to find slides in table GristDocTutorial');\n    }\n\n    this._slides.set(slides);\n  }\n\n  private async _reloadSlides() {\n    await this._loadSlides();\n    const slides = this._slides.get();\n    if (!slides) { return; }\n\n    if (this._currentSlideIndex.get() > slides.length - 1) {\n      this._currentSlideIndex.set(slides.length - 1);\n    }\n  }\n\n  private async _saveCurrentSlidePosition() {\n    const currentOptions = this._currentDoc?.options ?? {};\n    const currentSlideIndex = this._currentSlideIndex.get();\n    const numSlides = this._slides.get()?.length;\n    await this._appModel.api.updateDoc(this._docId, {\n      options: {\n        ...currentOptions,\n        tutorial: {\n          lastSlideIndex: currentSlideIndex,\n        }\n      }\n    });\n\n    let percentComplete: number | undefined = undefined;\n    if (numSlides !== undefined && numSlides > 0) {\n      percentComplete = Math.floor(((currentSlideIndex + 1) / numSlides) * 100);\n    }\n    logTelemetryEvent('tutorialProgressChanged', {\n      full: {\n        tutorialForkIdDigest: this._currentFork?.id,\n        tutorialTrunkIdDigest: this._currentFork?.trunkId,\n        lastSlideIndex: currentSlideIndex,\n        numSlides,\n        percentComplete,\n      },\n    });\n  }\n\n  private async _changeSlide(slideIndex: number) {\n    this._currentSlideIndex.set(slideIndex);\n    await this._saveCurrentSlidePositionDebounced();\n  }\n\n  private async _previousSlide() {\n    await this._changeSlide(this._currentSlideIndex.get() - 1);\n  }\n\n  private async _nextSlide() {\n    await this._changeSlide(this._currentSlideIndex.get() + 1);\n  }\n\n  private async _finishTutorial() {\n    this._saveCurrentSlidePositionDebounced.cancel();\n    await this._saveCurrentSlidePosition();\n    const lastVisitedOrg = this._appModel.lastVisitedOrgDomain.get();\n    if (lastVisitedOrg) {\n      await urlState().pushUrl({org: lastVisitedOrg});\n    } else {\n      window.location.assign(getWelcomeHomeUrl());\n    }\n  }\n\n  private async _restartTutorial() {\n    const doRestart = async () => {\n      const urlId = this._currentDoc!.id;\n      const {trunkId} = parseUrlId(urlId);\n      const docApi = this._appModel.api.getDocAPI(urlId);\n      await docApi.replace({sourceDocId: trunkId, resetTutorialMetadata: true});\n    };\n\n    confirmModal(\n      'Do you want to restart the tutorial? All progress will be lost.',\n      'Restart',\n      doRestart,\n      {\n        modalOptions: {\n          backerDomArgs: [\n            // Stack modal above the tutorial popup.\n            dom.style('z-index', vars.tutorialModalZIndex.toString()),\n          ],\n        },\n      }\n    );\n  }\n\n  private _initializeImages() {\n    return (element: HTMLElement) => {\n      setTimeout(() => {\n        const imgs = element.querySelectorAll('img');\n        for (const img of imgs) {\n          // Re-assigning src to itself is a neat way to restart a GIF.\n          // eslint-disable-next-line no-self-assign\n          img.src = img.src;\n\n          setHoverTooltip(img, 'Click to expand', {\n            key: FLOATING_POPUP_TOOLTIP_KEY,\n            modifiers: {\n              flip: {\n                boundariesElement: 'scrollParent',\n              },\n            },\n            placement: 'bottom',\n          });\n        }\n      }, 0);\n    };\n  }\n\n  private _openLightbox(src: string) {\n    modal((ctl) => {\n      this.onDispose(ctl.close);\n      return [\n        cssFullScreenModal.cls(''),\n        cssModalCloseButton('CrossBig',\n          dom.on('click', () => ctl.close()),\n          testId('lightbox-close'),\n        ),\n        cssModalContent(cssModalImage({src}, testId('lightbox-image'))),\n        dom.on('click', (ev, elem) => void (ev.target === elem ? ctl.close() : null)),\n        testId('lightbox'),\n      ];\n    }, {\n      backerDomArgs: [\n        // Stack modal above the tutorial popup.\n        dom.style('z-index', vars.tutorialModalZIndex.toString()),\n      ],\n    });\n  }\n}\n\n\nconst cssPopupFooter = styled('div', `\n  display: flex;\n  column-gap: 24px;\n  align-items: center;\n  justify-content: space-between;\n  flex-shrink: 0;\n  padding: 24px 16px 24px 16px;\n  border-top: 1px solid ${theme.tutorialsPopupBorder};\n`);\n\nconst cssTryItOutBox = styled('div', `\n  margin-top: 16px;\n  padding: 24px;\n  border-radius: 4px;\n  background-color: ${theme.tutorialsPopupBoxBg};\n`);\n\n\n\nconst cssPopupFooterButton = styled('div', `\n  --icon-color: ${theme.controlSecondaryFg};\n  padding: 4px;\n  border-radius: 4px;\n  cursor: pointer;\n\n  &:hover {\n    background-color: ${theme.hover};\n  }\n`);\n\nconst cssProgressBar = styled('div', `\n  display: flex;\n  gap: 8px;\n  flex-grow: 1;\n  flex-wrap: wrap;\n`);\n\nconst cssProgressBarDot = styled('div', `\n  width: 10px;\n  height: 10px;\n  border-radius: 5px;\n  align-self: center;\n  cursor: pointer;\n  background-color: ${theme.progressBarBg};\n\n  &-current {\n    cursor: default;\n    background-color: ${theme.progressBarFg};\n  }\n`);\n\nconst cssFooterButtonsLeft = styled('div', `\n  flex-shrink: 0;\n`);\n\nconst cssFooterButtonsRight = styled('div', `\n  display: flex;\n  justify-content: flex-end;\n  column-gap: 8px;\n  flex-shrink: 0;\n  min-width: 140px;\n\n  @media ${mediaXSmall} {\n    & {\n      flex-direction: column;\n      row-gap: 8px;\n      column-gap: 0px;\n      min-width: 0px;\n    }\n  }\n`);\n\nconst cssFullScreenModal = styled('div', `\n  display: flex;\n  flex-direction: column;\n  row-gap: 8px;\n  background-color: initial;\n  width: 100%;\n  height: 100%;\n  border: none;\n  border-radius: 0px;\n  box-shadow: none;\n  padding: 0px;\n`);\n\nconst cssModalCloseButton = styled(icon, `\n  align-self: flex-end;\n  flex-shrink: 0;\n  height: 24px;\n  width: 24px;\n  cursor: pointer;\n  --icon-color: ${theme.modalBackdropCloseButtonFg};\n  &:hover {\n    --icon-color: ${theme.modalBackdropCloseButtonHoverFg};\n  }\n`);\n\nconst cssModalContent = styled('div', `\n  align-self: center;\n  min-height: 0;\n  margin-top: auto;\n  margin-bottom: auto;\n`);\n\nconst cssModalImage = styled('img', `\n  height: 100%;\n  max-width: min(100%, 1200px);\n`);\n\nconst cssSpinner = styled('div', `\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n`);\n","import {marked} from 'marked';\n\nexport const renderer = new marked.Renderer();\n\nrenderer.image = (href: string | null, title: string | null, _text: string) => {\n  let classes = 'doc-tutorial-popup-thumbnail';\n  const hash = href?.split('#')?.[1];\n  if (hash) {\n    const extraClass = `doc-tutorial-popup-thumbnail-${hash}`;\n    classes += ` ${extraClass}`;\n  }\n  return `<div class=\"${classes}\">\n  <img src=\"${href}\" title=\"${title ?? ''}\" />\n  <div class=\"doc-tutorial-popup-thumbnail-icon-wrapper\">\n    <div class=\"doc-tutorial-popup-thumbnail-icon\"></div>\n  </div>\n</div>`;\n};\n\nrenderer.link = (href: string | null, _title: string | null, text: string) => {\n  return `<a href=\"${href}\" target=\"_blank\">${text}</a>`;\n};\n","/**\n * This module export a component for editing some document settings consisting of the timezone,\n * (new settings to be added here ...).\n */\nimport {GristDoc} from 'app/client/components/GristDoc';\nimport {ACIndexImpl} from 'app/client/lib/ACIndex';\nimport {ACSelectItem, buildACSelect} from 'app/client/lib/ACSelect';\nimport {copyToClipboard} from 'app/client/lib/clipboardUtils';\nimport {makeT} from 'app/client/lib/localization';\nimport {reportError} from 'app/client/models/AppModel';\nimport {urlState} from 'app/client/models/gristUrlState';\nimport {KoSaveableObservable} from 'app/client/models/modelUtil';\nimport {docListHeader} from 'app/client/ui/DocMenuCss';\nimport {showTransientTooltip} from 'app/client/ui/tooltips';\nimport {primaryButtonLink} from 'app/client/ui2018/buttons';\nimport {mediaSmall, testId, theme, vars} from 'app/client/ui2018/cssVars';\nimport {select} from 'app/client/ui2018/menus';\nimport {confirmModal} from 'app/client/ui2018/modals';\nimport {buildCurrencyPicker} from 'app/client/widgets/CurrencyPicker';\nimport {buildTZAutocomplete} from 'app/client/widgets/TZAutocomplete';\nimport {EngineCode} from 'app/common/DocumentSettings';\nimport {GristLoadConfig} from 'app/common/gristUrls';\nimport {propertyCompare} from 'app/common/gutil';\nimport {getCurrency, locales} from 'app/common/Locales';\nimport {Computed, Disposable, dom, fromKo, IDisposableOwner, styled} from 'grainjs';\nimport * as moment from 'moment-timezone';\n\nconst t = makeT('DocumentSettings');\n\nexport class DocSettingsPage extends Disposable {\n  private _docInfo = this._gristDoc.docInfo;\n\n  private _timezone = this._docInfo.timezone;\n  private _locale: KoSaveableObservable<string> = this._docInfo.documentSettingsJson.prop('locale');\n  private _currency: KoSaveableObservable<string|undefined> = this._docInfo.documentSettingsJson.prop('currency');\n  private _engine: Computed<EngineCode|undefined> = Computed.create(this, (\n    use => use(this._docInfo.documentSettingsJson.prop('engine'))\n  ))\n    .onWrite(val => this._setEngine(val));\n\n  constructor(private _gristDoc: GristDoc) {\n    super();\n  }\n\n  public buildDom() {\n    const canChangeEngine = getSupportedEngineChoices().length > 0;\n    const docPageModel = this._gristDoc.docPageModel;\n\n    return cssContainer(\n      cssHeader(t('Document Settings')),\n      cssDataRow(t(\"Time Zone:\")),\n      cssDataRow(\n        dom.create(buildTZAutocomplete, moment, fromKo(this._timezone), (val) => this._timezone.saveOnly(val))\n      ),\n      cssDataRow(t(\"Locale:\")),\n      cssDataRow(dom.create(buildLocaleSelect, this._locale)),\n      cssDataRow(t(\"Currency:\")),\n      cssDataRow(dom.domComputed(fromKo(this._locale), (l) =>\n        dom.create(buildCurrencyPicker, fromKo(this._currency), (val) => this._currency.saveOnly(val),\n          {defaultCurrencyLabel: t(\"Local currency ({{currency}})\", {currency: getCurrency(l)})})\n      )),\n      canChangeEngine ? cssDataRow([\n        // Small easter egg: you can click on the skull-and-crossbones to\n        // force a reload of the document.\n        cssDataRow(t(\"Engine (experimental {{span}} change at own risk):\", {span:\n          dom('span', '☠',\n            dom.style('cursor', 'pointer'),\n            dom.on('click', async () => {\n              await docPageModel.appModel.api.getDocAPI(docPageModel.currentDocId.get()!).forceReload();\n              document.location.reload();\n            }))\n          })),\n        select(this._engine, getSupportedEngineChoices()),\n      ]) : null,\n      cssHeader(t('API')),\n      cssDataRow(t(\"This document's ID (for API use):\")),\n      cssDataRow(cssHoverWrapper(\n        dom('tt', docPageModel.currentDocId.get()),\n        dom.on('click', async (e, d) => {\n          e.stopImmediatePropagation();\n          e.preventDefault();\n          showTransientTooltip(d, t(\"Document ID copied to clipboard\"), {\n            key: 'copy-document-id'\n          });\n          await copyToClipboard(docPageModel.currentDocId.get()!);\n        }),\n      )),\n      cssHeader(t('Webhooks'), cssBeta('Beta')),\n      cssDataRow(primaryButtonLink(t('Manage Webhooks'), urlState().setLinkUrl({docPage: 'webhook'}))),\n    );\n  }\n\n  private async _setEngine(val: EngineCode|undefined) {\n    confirmModal(t('Save and Reload'), t('Ok'), () => this._doSetEngine(val));\n  }\n\n  private async _doSetEngine(val: EngineCode|undefined) {\n    const docPageModel = this._gristDoc.docPageModel;\n    if (this._engine.get() !== val) {\n      await this._docInfo.documentSettingsJson.prop('engine').saveOnly(val);\n      await docPageModel.appModel.api.getDocAPI(docPageModel.currentDocId.get()!).forceReload();\n    }\n  }\n}\n\ntype LocaleItem = ACSelectItem & {locale?: string};\n\nfunction buildLocaleSelect(\n  owner: IDisposableOwner,\n  locale: KoSaveableObservable<string>,\n) {\n  const localeList: LocaleItem[] = locales.map(l => ({\n    value: l.name, // Use name as a value, we will translate the name into the locale on save\n    label: l.name,\n    locale: l.code,\n    cleanText: l.name.trim().toLowerCase(),\n  })).sort(propertyCompare(\"label\"));\n  const acIndex = new ACIndexImpl<LocaleItem>(localeList, 200, true);\n  // AC select will show the value (in this case locale) not a label when something is selected.\n  // To show the label - create another observable that will be in sync with the value, but\n  // will contain text.\n  const textObs = Computed.create(owner, use => {\n    const localeCode = use(locale);\n    const localeName = locales.find(l => l.code === localeCode)?.name || localeCode;\n    return localeName;\n  });\n  return buildACSelect(owner,\n    {\n      acIndex, valueObs: textObs,\n      save(_value, item: LocaleItem | undefined) {\n        if (!item) { throw new Error(\"Invalid locale\"); }\n        locale.saveOnly(item.locale!).catch(reportError);\n      },\n    },\n    testId(\"locale-autocomplete\")\n  );\n}\n\nconst cssHeader = styled(docListHeader, `\n  margin-bottom: 0;\n  &:not(:first-of-type) {\n    margin-top: 40px;\n  }\n`);\n\nconst cssContainer = styled('div', `\n  overflow-y: auto;\n  position: relative;\n  height: 100%;\n  padding: 32px 64px 24px 64px;\n  @media ${mediaSmall} {\n    & {\n      padding: 32px 24px 24px 24px;\n    }\n  }\n`);\n\nconst cssHoverWrapper = styled('div', `\n  display: inline-block;\n  cursor: default;\n  color: ${theme.lightText};\n  transition: background 0.05s;\n  &:hover {\n    background: ${theme.lightHover};\n  }\n`);\n\n// This matches the style used in showProfileModal in app/client/ui/AccountWidget.\nconst cssDataRow = styled('div', `\n  margin: 16px 0px;\n  font-size: ${vars.largeFontSize};\n  color: ${theme.text};\n  width: 360px;\n`);\n\nconst cssBeta = styled('sup', `\n  text-transform: uppercase;\n  color: ${theme.text};\n  font-size: ${vars.smallFontSize};\n  margin-left: 8px;\n`);\n\n// Check which engines can be selected in the UI, if any.\nexport function getSupportedEngineChoices(): EngineCode[] {\n  const gristConfig: GristLoadConfig = (window as any).gristConfig || {};\n  return gristConfig.supportEngines || [];\n}\n","import {makeT} from 'app/client/lib/localization';\nimport {GristDoc} from 'app/client/components/GristDoc';\nimport {cssInput} from 'app/client/ui/cssInput';\nimport {cssField} from 'app/client/ui/MakeCopyMenu';\nimport {labeledSquareCheckbox} from 'app/client/ui2018/checkbox';\nimport {colors} from 'app/client/ui2018/cssVars';\nimport {icon} from 'app/client/ui2018/icons';\nimport {cssLink} from 'app/client/ui2018/links';\nimport {saveModal} from 'app/client/ui2018/modals';\nimport {commonUrls} from 'app/common/gristUrls';\nimport {Computed, Disposable, dom, input, makeTestId, Observable, styled} from 'grainjs';\n\nconst t = makeT('DuplicateTable');\n\nconst testId = makeTestId('test-duplicate-table-');\n\n/**\n * Response returned by a DuplicateTable user action.\n */\nexport interface DuplicateTableResponse {\n  /** Row id of the new table. */\n  id: number;\n  /** Table id of the new table. */\n  table_id: string;\n  /** Row id of the new raw view section. */\n  raw_section_id: number;\n}\n\nexport interface DuplicateTableOptions {\n  onSuccess?(response: DuplicateTableResponse): void;\n}\n\n/**\n * Shows a modal with options for duplicating the table `tableId`.\n */\nexport function duplicateTable(\n  gristDoc: GristDoc,\n  tableId: string,\n  {onSuccess}: DuplicateTableOptions = {}\n) {\n  saveModal((_ctl, owner) => {\n    const duplicateTableModal = DuplicateTableModal.create(owner, gristDoc, tableId);\n    return {\n      title: 'Duplicate Table',\n      body: duplicateTableModal.buildDom(),\n      saveFunc: async () =>  {\n        const response = await duplicateTableModal.save();\n        onSuccess?.(response);\n      },\n      saveDisabled: duplicateTableModal.saveDisabled,\n      width: 'normal',\n    };\n  });\n}\n\nclass DuplicateTableModal extends Disposable {\n  private _newTableName = Observable.create<string>(this, '');\n  private _includeData = Observable.create<boolean>(this, false);\n  private _saveDisabled = Computed.create(this, this._newTableName, (_use, name) => !name.trim());\n\n  constructor(private _gristDoc: GristDoc, private _tableId: string) {\n    super();\n  }\n\n  public get saveDisabled() { return this._saveDisabled; }\n\n  public save() {\n    return this._duplicateTable();\n  }\n\n  public buildDom() {\n    return [\n      cssField(\n        input(\n          this._newTableName,\n          {onInput: true},\n          {placeholder: t(\"Name for new table\")},\n          (elem) => { setTimeout(() => { elem.focus(); }, 20); },\n          dom.on('focus', (_ev, elem) => { elem.select(); }),\n          dom.cls(cssInput.className),\n          testId('name'),\n        ),\n      ),\n      cssWarning(\n        cssWarningIcon('Warning'),\n        dom('div', t(\"Instead of duplicating tables, it's usually better to segment data using linked views. {{link}}\",\n          {link: cssLink({href: commonUrls.helpLinkingWidgets, target: '_blank'}, 'Read More.')}\n        )),\n      ),\n      cssField(\n        cssCheckbox(\n          this._includeData,\n          t(\"Copy all data in addition to the table structure.\"),\n          testId('copy-all-data'),\n        ),\n      ),\n      dom.maybe(this._includeData, () => cssWarning(\n        cssWarningIcon('Warning'),\n        dom('div', t(\"Only the document default access rules will apply to the copy.\")),\n        testId('acl-warning'),\n      )),\n    ];\n  }\n\n  private _duplicateTable() {\n    const {docData} = this._gristDoc;\n    const [newTableName, includeData] = [this._newTableName.get(), this._includeData.get()];\n    return docData.sendAction(['DuplicateTable', this._tableId, newTableName, includeData]);\n  }\n}\n\nconst cssCheckbox = styled(labeledSquareCheckbox, `\n  margin-top: 8px;\n`);\n\nconst cssWarning = styled('div', `\n  display: flex;\n  column-gap: 8px;\n`);\n\nconst cssWarningIcon = styled(icon, `\n  --icon-color: ${colors.orange};\n  flex-shrink: 0;\n`);\n","import {IExampleInfo} from 'app/client/ui/ExampleInfo';\nimport {prepareForTransition, TransitionWatcher} from 'app/client/ui/transitions';\nimport {mediaXSmall, testId, theme, vars} from 'app/client/ui2018/cssVars';\nimport {icon} from 'app/client/ui2018/icons';\nimport {cssLink} from 'app/client/ui2018/links';\nimport {dom, styled} from 'grainjs';\nimport {AutomaticHelpToolInfo} from \"app/client/ui/Tools\";\n\nlet prevCardClose: (() => void)|null = null;\n\n// Open a popup with a card introducing this example, if the user hasn't dismissed it in the past.\nexport function showExampleCard(\n  example: IExampleInfo, toolInfo: AutomaticHelpToolInfo\n) {\n  const {elem: btnElem, markAsSeen, reopen} = toolInfo;\n\n  // Close the example card.\n  function close() {\n    prevCardClose = null;\n    collapseAndRemoveCard(cardElem, btnElem.getBoundingClientRect());\n    markAsSeen();\n  }\n\n  const card = example.welcomeCard;\n  if (!card) { return null; }\n  const cardElem = cssCard(\n    cssImage({src: example.imgUrl}),\n    cssBody(\n      cssTitle(card.title),\n      cssInfo(card.text),\n      cssButtons(\n        cssLinkBtn(cssLinkIcon('Page'), card.tutorialName,\n          {href: example.tutorialUrl, target: '_blank'},\n        ),\n        // TODO: Add a link to the overview video (as popup or to a support page that shows the\n        // video). Also include a 'Video' icon.\n        // cssLinkBtn(cssLinkIcon('Video'), 'Grist Video Tour'),\n      )\n    ),\n    cssCloseButton(cssBigIcon('CrossBig'),\n      dom.on('click', close),\n      testId('example-card-close'),\n    ),\n    testId('example-card'),\n  );\n  document.body.appendChild(cardElem);\n\n  // When reopening, open the card smoothly, for a nicer-looking effect.\n  if (reopen) {\n    expandCard(cardElem, btnElem.getBoundingClientRect());\n  }\n\n  prevCardClose?.();\n  prevCardClose = () => disposeCard(cardElem);\n}\n\nfunction disposeCard(cardElem: HTMLElement) {\n  dom.domDispose(cardElem);\n  cardElem.remove();\n}\n\n// When closing the card, collapse it visually into the button that can open it again, to hint to\n// the user where to find that button. Remove the card after the animation.\nfunction collapseAndRemoveCard(card: HTMLElement, collapsedRect: DOMRect) {\n  const watcher = new TransitionWatcher(card);\n  watcher.onDispose(() => disposeCard(card));\n  collapseCard(card, collapsedRect);\n}\n\n// Implements the collapsing animation by simply setting a scale transform with a suitable origin.\nfunction collapseCard(card: HTMLElement, collapsedRect: DOMRect) {\n  const rect = card.getBoundingClientRect();\n  const originX = (collapsedRect.left + collapsedRect.width / 2) - rect.left;\n  const originY = (collapsedRect.top + collapsedRect.height / 2) - rect.top;\n  Object.assign(card.style, {\n    transform: `scale(${collapsedRect.width / rect.width}, ${collapsedRect.height / rect.height})`,\n    transformOrigin: `${originX}px ${originY}px`,\n    opacity: '0',\n  });\n}\n\n// To expand the card visually, we reverse the process by collapsing it first with transitions\n// disabled, then resetting properties to their defaults with transitions enabled again.\nfunction expandCard(card: HTMLElement, collapsedRect: DOMRect) {\n  prepareForTransition(card, () => collapseCard(card, collapsedRect));\n  Object.assign(card.style, {\n    transform: '',\n    opacity: '',\n    visibility: 'visible',\n  });\n}\n\n\nconst cssCard = styled('div', `\n  position: absolute;\n  left: 24px;\n  bottom: 24px;\n  margin-right: 24px;\n  max-width: 624px;\n  padding: 32px 56px 32px 32px;\n  background-color: ${theme.popupBg};\n  box-shadow: 0 2px 18px 0 ${theme.popupInnerShadow}, 0 0 1px 0 ${theme.popupOuterShadow};\n  display: flex;\n  overflow: hidden;\n  transition-property: opacity, transform;\n  transition-duration: 0.5s;\n  transition-timing-func: ease-in;\n  --title-font-size: ${vars.headerControlFontSize};\n\n  @media ${mediaXSmall} {\n    & {\n      flex-direction: column;\n      padding: 32px;\n      --title-font-size: 18px;\n    }\n  }\n`);\n\nconst cssImage = styled('img', `\n  flex: none;\n  width: 180px;\n  height: 140px;\n  margin: 0 16px 0 -8px;\n  @media ${mediaXSmall} {\n    & {\n      margin: auto;\n    }\n  }\n`);\n\nconst cssBody = styled('div', `\n  color: ${theme.text};\n  min-width: 0px;\n`);\n\nconst cssTitle = styled('div', `\n  color: ${theme.text};\n  font-size: var(--title-font-size);\n  font-weight: ${vars.headerControlTextWeight};\n  margin-bottom: 16px;\n`);\n\nconst cssInfo = styled('div', `\n  margin: 16px 0 24px 0;\n  line-height: 1.6;\n`);\n\nexport const cssButtons = styled('div', `\n  display: flex;\n`);\n\nexport const cssLinkBtn = styled(cssLink, `\n  &:not(:last-child) {\n    margin-right: 32px;\n  }\n`);\n\nexport const cssLinkIcon = styled(icon, `\n  margin-right: 8px;\n  margin-top: -2px;\n`);\n\nexport const cssCloseButton = styled('div', `\n  position: absolute;\n  top: 8px;\n  right: 8px;\n  padding: 4px;\n  border-radius: 4px;\n  cursor: pointer;\n  --icon-color: ${theme.popupCloseButtonFg};\n\n  &:hover {\n    background-color: ${theme.hover};\n  }\n`);\n\nexport const cssBigIcon = styled(icon, `\n  padding: 12px;\n`);\n","import {allCommands} from 'app/client/components/commands';\nimport {makeT} from 'app/client/lib/localization';\nimport {IRowContextMenu} from 'app/client/ui/RowContextMenu';\nimport {menuDivider, menuItemCmd} from 'app/client/ui2018/menus';\nimport {dom} from 'grainjs';\n\nconst t = makeT('FieldContextMenu');\n\nexport interface IFieldContextMenu {\n  disableModify: boolean;\n  isReadonly: boolean;\n}\n\nexport function FieldContextMenu(_rowOptions: IRowContextMenu, fieldOptions: IFieldContextMenu) {\n  const {disableModify, isReadonly} = fieldOptions;\n  const disableForReadonlyColumn = dom.cls('disabled', disableModify || isReadonly);\n  return [\n    menuItemCmd(allCommands.contextMenuCut, t('Cut'), disableForReadonlyColumn),\n    menuItemCmd(allCommands.contextMenuCopy, t('Copy')),\n    menuItemCmd(allCommands.contextMenuPaste, t('Paste'), disableForReadonlyColumn),\n    menuDivider(),\n    menuItemCmd(allCommands.clearCardFields, t('Clear field'), disableForReadonlyColumn),\n    menuItemCmd(allCommands.hideCardFields, t('Hide field')),\n    menuDivider(),\n    menuItemCmd(allCommands.copyLink, t('Copy anchor link')),\n  ];\n}\n","import {makeT} from 'app/client/lib/localization';\nimport { allCommands } from 'app/client/components/commands';\nimport { ViewFieldRec } from 'app/client/models/entities/ViewFieldRec';\nimport { testId, theme } from 'app/client/ui2018/cssVars';\nimport { icon } from 'app/client/ui2018/icons';\nimport { menuDivider, menuItem, menuItemCmd } from 'app/client/ui2018/menus';\nimport { Sort } from 'app/common/SortSpec';\nimport { dom, DomElementArg, styled } from 'grainjs';\nimport isEqual = require('lodash/isEqual');\n\nconst t = makeT('GridViewMenus');\n\ninterface IView {\n  addNewColumn: () => void;\n  showColumn: (colId: number, atIndex: number) => void;\n}\n\ninterface IViewSection {\n  viewFields: any;\n  hiddenColumns: any;\n}\n\n/**\n * Creates a menu to add a new column. Should be used only when there are hidden columns to display,\n * otherwise there is no need for this menu.\n */\nexport function ColumnAddMenu(gridView: IView, viewSection: IViewSection) {\n  return [\n    menuItem(() => gridView.addNewColumn(), t(\"Add Column\")),\n    menuDivider(),\n    ...viewSection.hiddenColumns().map((col: any) => menuItem(\n      () => {\n        gridView.showColumn(col.id(), viewSection.viewFields().peekLength);\n        // .then(() => gridView.scrollPaneRight());\n      }, t(\"Show column {{- label}}\", {label: col.label()})))\n  ];\n}\nexport interface IMultiColumnContextMenu {\n  // For multiple selection, true/false means the value applies to all columns, 'mixed' means it's\n  // true for some columns, but not all.\n  numColumns: number;\n  numFrozen: number;\n  disableModify: boolean|'mixed';  // If the columns are read-only. Mixed for multiple columns where some are read-only.\n  isReadonly: boolean;\n  isRaw: boolean;\n  isFiltered: boolean;            // If this view shows a proper subset of all rows in the table.\n  isFormula: boolean|'mixed';\n  columnIndices: number[];\n  totalColumnCount: number;\n  disableFrozenMenu: boolean;\n}\n\ninterface IColumnContextMenu extends IMultiColumnContextMenu {\n  filterOpenFunc: () => void;\n  sortSpec: Sort.SortSpec;\n  colId: number;\n}\n\nexport function calcFieldsCondition(fields: ViewFieldRec[], condition: (f: ViewFieldRec) => boolean): boolean|\"mixed\" {\n  return fields.every(condition) ? true : (fields.some(condition) ? \"mixed\" : false);\n}\n\nexport function ColumnContextMenu(options: IColumnContextMenu) {\n  const { disableModify, filterOpenFunc, colId, sortSpec, isReadonly } = options;\n\n  const disableForReadonlyColumn = dom.cls('disabled', Boolean(disableModify) || isReadonly);\n\n  const addToSortLabel = getAddToSortLabel(sortSpec, colId);\n\n  return [\n    menuItemCmd(allCommands.fieldTabOpen, t(\"Column Options\")),\n    menuItem(filterOpenFunc, t(\"Filter Data\")),\n    menuDivider({style: 'margin-bottom: 0;'}),\n    cssRowMenuItem(\n      customMenuItem(\n        allCommands.sortAsc.run,\n        dom('span', t(\"Sort\"), {style: 'flex: 1  0 auto; margin-right: 8px;'},\n            testId('sort-label')),\n        icon('Sort', dom.style('transform', 'scaley(-1)')),\n        'A-Z',\n        dom.style('flex', ''),\n        cssCustomMenuItem.cls('-selected', Sort.containsOnly(sortSpec, colId, Sort.ASC)),\n        testId('sort-asc'),\n      ),\n      customMenuItem(\n        allCommands.sortDesc.run,\n        icon('Sort'),\n        'Z-A',\n        cssCustomMenuItem.cls('-selected', Sort.containsOnly(sortSpec, colId, Sort.DESC)),\n        testId('sort-dsc'),\n      ),\n      testId('sort'),\n    ),\n    addToSortLabel ? [\n      cssRowMenuItem(\n        customMenuItem(\n          allCommands.addSortAsc.run,\n          cssRowMenuLabel(addToSortLabel, testId('add-to-sort-label')),\n          icon('Sort', dom.style('transform', 'scaley(-1)')),\n          'A-Z',\n          cssCustomMenuItem.cls('-selected', Sort.contains(sortSpec, colId, Sort.ASC)),\n          testId('add-to-sort-asc'),\n        ),\n        customMenuItem(\n          allCommands.addSortDesc.run,\n          icon('Sort'),\n          'Z-A',\n          cssCustomMenuItem.cls('-selected', Sort.contains(sortSpec, colId, Sort.DESC)),\n          testId('add-to-sort-dsc'),\n        ),\n        testId('add-to-sort'),\n      ),\n    ] : null,\n    menuDivider({style: 'margin-bottom: 0; margin-top: 0;'}),\n    menuItem(allCommands.sortFilterTabOpen.run, t(\"More sort options ...\"), testId('more-sort-options')),\n    menuDivider({style: 'margin-top: 0;'}),\n    menuItemCmd(allCommands.renameField, t(\"Rename column\"), disableForReadonlyColumn),\n    freezeMenuItemCmd(options),\n    menuDivider(),\n    MultiColumnMenu((options.disableFrozenMenu = true, options)),\n    testId('column-menu'),\n  ];\n}\n\n/**\n * Note about available options. There is a difference between clearing values (writing empty\n * string, which makes cells blank, including Numeric cells) and converting a column to an empty\n * column (i.e. column with empty formula; in this case a Numeric column becomes all 0s today).\n *\n * We offer both options if data columns are selected. If only formulas, only the second option\n * makes sense.\n */\nexport function MultiColumnMenu(options: IMultiColumnContextMenu) {\n  const disableForReadonlyColumn = dom.cls('disabled', Boolean(options.disableModify) || options.isReadonly);\n  const disableForReadonlyView = dom.cls('disabled', options.isReadonly);\n  const num: number = options.numColumns;\n  const nameClearColumns = options.isFiltered ?\n    t('Reset {{count}} entire columns', {count: num}) :\n    t('Reset {{count}} columns', {count: num});\n  const nameDeleteColumns = t('Delete {{count}} columns', {count: num});\n  const nameHideColumns = t('Hide {{count}} columns', {count: num});\n  const frozenMenu = options.disableFrozenMenu ? null : freezeMenuItemCmd(options);\n  return [\n    frozenMenu ? [frozenMenu, menuDivider()]: null,\n    // Offered only when selection includes formula columns, and converts only those.\n    (options.isFormula ?\n      menuItemCmd(allCommands.convertFormulasToData, t(\"Convert formula to data\"),\n        disableForReadonlyColumn) : null),\n\n    // With data columns selected, offer an additional option to clear out selected cells.\n    (options.isFormula !== true ?\n      menuItemCmd(allCommands.clearValues, t(\"Clear values\"), disableForReadonlyColumn) : null),\n\n    (!options.isRaw ? menuItemCmd(allCommands.hideFields, nameHideColumns, disableForReadonlyView) : null),\n    menuItemCmd(allCommands.clearColumns, nameClearColumns, disableForReadonlyColumn),\n    menuItemCmd(allCommands.deleteFields, nameDeleteColumns, disableForReadonlyColumn),\n\n    menuDivider(),\n    menuItemCmd(allCommands.insertFieldBefore, t(\"Insert column to the left\"), disableForReadonlyView),\n    menuItemCmd(allCommands.insertFieldAfter, t(\"Insert column to the right\"), disableForReadonlyView)\n  ];\n}\n\nexport function freezeAction(options: IMultiColumnContextMenu): { text: string; numFrozen: number; } | null {\n /**\n   * When user clicks last column - don't offer freezing\n   * When user clicks on a normal column - offer him to freeze all the columns to the\n   * left (inclusive).\n   * When user clicks on a frozen column - offer him to unfreeze all the columns to the\n   * right (inclusive)\n   * When user clicks on a set of columns then:\n   * - If the set of columns contains the last columns that are frozen - offer unfreezing only those columns\n   * - If the set of columns is right after the frozen columns or spans across - offer freezing only those columns\n   *\n   * All of the above are a single command - toggle freeze\n   */\n\n  const length = options.numColumns;\n\n  // make some assertions - number of columns selected should always be > 0\n  if (length === 0) { return null; }\n\n  const indices = options.columnIndices;\n  const firstColumnIndex = indices[0];\n  const lastColumnIndex = indices[indices.length - 1];\n  const numFrozen = options.numFrozen;\n\n  // if set has last column in it - don't offer freezing\n  if (lastColumnIndex == options.totalColumnCount - 1) {\n    return null;\n  }\n\n  const isNormalColumn = length === 1 && (firstColumnIndex + 1) > numFrozen;\n  const isFrozenColumn = length === 1 && (firstColumnIndex+ 1) <= numFrozen;\n  const isSet = length > 1;\n  const isLastFrozenSet = isSet && lastColumnIndex + 1 === numFrozen;\n  const isFirstNormalSet = isSet && firstColumnIndex === numFrozen;\n  const isSpanSet = isSet && firstColumnIndex <= numFrozen && lastColumnIndex >= numFrozen;\n\n  let text = '';\n\n  if (!isSet) {\n    if (isNormalColumn) {\n      // text to show depends on what user selected and how far are we from\n      // last frozen column\n\n      // if user clicked the first column or a column just after frozen set\n      if (firstColumnIndex === 0 || firstColumnIndex === numFrozen) {\n        text = t('Freeze {{count}} columns', {count: 1});\n      } else {\n        // else user clicked any other column that is farther, offer to freeze\n        // proper number of column\n        const properNumber = firstColumnIndex - numFrozen + 1;\n        text = numFrozen ?\n          t('Freeze {{count}} more columns', {count: properNumber}) :\n          t('Freeze {{count}} columns', {count: properNumber});\n      }\n      return {\n        text,\n        numFrozen : firstColumnIndex + 1\n      };\n    } else if (isFrozenColumn) {\n      // when user clicked last column in frozen set - offer to unfreeze this column\n      if (firstColumnIndex + 1 === numFrozen) {\n        text = t('Unfreeze {{count}} columns', {count: 1});\n      } else {\n        // else user clicked column that is not the last in a frozen set\n        // offer to unfreeze proper number of columns\n        const properNumber = numFrozen - firstColumnIndex;\n        text = properNumber === numFrozen ?\n          t('Unfreeze all columns') :\n          t('Unfreeze {{count}} columns', {count: properNumber});\n      }\n      return {\n        text,\n        numFrozen : indices[0]\n      };\n    } else {\n      return null;\n    }\n  } else {\n    if (isLastFrozenSet) {\n      text = t('Unfreeze {{count}} columns', {count: length});\n      return {\n        text,\n        numFrozen : numFrozen - length\n      };\n    } else if (isFirstNormalSet) {\n      text = t('Freeze {{count}} columns', {count: length});\n      return {\n        text,\n        numFrozen : numFrozen + length\n      };\n    } else if (isSpanSet) {\n      const toFreeze = lastColumnIndex + 1 - numFrozen;\n      text = t('Freeze {{count}} more columns', {count: toFreeze});\n      return {\n        text,\n        numFrozen : numFrozen + toFreeze\n      };\n    }  else {\n      return null;\n    }\n  }\n}\n\nfunction freezeMenuItemCmd(options: IMultiColumnContextMenu) {\n  // calculate action available for this options\n  const toggle = freezeAction(options);\n  // if we can't offer freezing - don't create a menu at all\n  // this shouldn't happen - as current design offers some action on every column\n  if (!toggle) { return null; }\n  // create menu item if we have something to offer\n  return menuItemCmd(allCommands.toggleFreeze, toggle.text);\n}\n\n// Returns 'Add to sort' is there are columns in the sort spec but colId is not part of it. Returns\n// undefined if colId is the only column in the spec. Otherwise returns `Sorted (#N)` where #N is\n// the position (1 based) of colId in the spec.\nfunction getAddToSortLabel(sortSpec: Sort.SortSpec, colId: number): string|undefined {\n  const columnsInSpec = sortSpec.map((n) =>Sort.getColRef(n));\n  if (sortSpec.length !== 0 && !isEqual(columnsInSpec, [colId])) {\n    const index = columnsInSpec.indexOf(colId);\n    if (index > -1) {\n      return t(\"Sorted (#{{count}})\", {count: index + 1});\n    } else {\n      return t(\"Add to sort\");\n    }\n  }\n}\n\nconst cssRowMenuItem = styled((...args: DomElementArg[]) => dom('li', {tabindex: '-1'}, ...args), `\n  display: flex;\n  outline: none;\n`);\n\nconst cssRowMenuLabel = styled('div', `\n  margin-right: 8px;\n  flex: 1 0 auto;\n`);\n\nconst cssCustomMenuItem = styled('div', `\n  padding: 8px 8px;\n  display: flex;\n  &:not(:hover) {\n    background-color: ${theme.menuBg};\n    color: ${theme.menuItemFg};\n    --icon-color: ${theme.menuItemFg};\n  }\n  &:last-of-type {\n    padding-right: 24px;\n    flex: 0 0 auto;\n  }\n  &:first-of-type {\n    padding-left: 24px;\n    flex: 1 0 auto;\n  }\n  &-selected, &-selected:not(:hover) {\n    background-color: ${theme.menuItemSelectedBg};\n    color: ${theme.menuItemSelectedFg};\n    --icon-color: ${theme.menuItemSelectedFg};\n  }\n`);\n\nfunction customMenuItem(action: () => void, ...args: DomElementArg[]) {\n  const element: HTMLElement = cssCustomMenuItem(\n    ...args,\n    dom.on('click', () => action()),\n  );\n  return element;\n}\n","import { theme } from \"app/client/ui2018/cssVars\";\nimport { icon } from \"app/client/ui2018/icons\";\nimport { dom, DomArg, IDisposableOwner, styled } from \"grainjs\";\n\n/**\n * Creates a toggle button - little square button with a dropdown icon inside, used\n * by a context menu for a row inside a grid, a card inside a cardlist and column name.\n */\nexport function menuToggle(obs: IDisposableOwner, ...args: DomArg[]) {\n  const contextMenu = cssMenuToggle(\n    icon('Dropdown', dom.cls('menu_toggle_icon')),\n    ...args\n  );\n  return contextMenu;\n}\n\nconst cssMenuToggle = styled('div.menu_toggle', `\n  background: ${theme.menuToggleBg};\n  cursor: pointer;\n  --icon-color: ${theme.menuToggleFg};\n  border: 1px solid ${theme.menuToggleBorder};\n  border-radius: 4px;\n  &:hover  {\n    --icon-color: ${theme.menuToggleHoverFg};\n    border-color: ${theme.menuToggleHoverFg};\n  }\n  &:active  {\n    --icon-color: ${theme.menuToggleActiveFg};\n    border-color: ${theme.menuToggleActiveFg};\n  }\n  & > .menu_toggle_icon {\n    display: block; /* don't create a line */\n  }\n`);\n","/**\n * Utility to generate a series of onboarding popups. It is used to give users a short description\n * of some elements of the UI. The first step is to create the list of messages following the\n * `IOnBoardingMsg` interface. Then you have to attach each message to its corresponding element of\n * the UI using the `attachOnBoardingMsg' dom method:\n *\n *  Usage:\n *\n *    // create the list of message\n *    const messages = [{id: 'add-new-btn', placement: 'right', buildDom: () => ... },\n *                      {id: 'share-btn', buildDom: () => ... ];\n *\n *\n *    // attach each message to the corresponding element\n *    dom('div', 'Add New', ..., dom.cls('tour-add-new-btn'));\n *\n *    // start\n *    startOnBoarding(message, onFinishCB);\n *\n * Note:\n * - this module does UI only, saving which user has already seen the popups has to be handled by\n *   the caller. Pass an `onFinishCB` to handle when a user dimiss the popups.\n */\n\nimport { Disposable, dom, DomElementArg, Holder, makeTestId, styled, svg } from \"grainjs\";\nimport { createPopper, Placement } from '@popperjs/core';\nimport { FocusLayer } from 'app/client/lib/FocusLayer';\nimport {makeT} from 'app/client/lib/localization';\nimport * as Mousetrap from 'app/client/lib/Mousetrap';\nimport { bigBasicButton, bigPrimaryButton } from \"app/client/ui2018/buttons\";\nimport { theme, vars } from \"app/client/ui2018/cssVars\";\nimport range = require(\"lodash/range\");\nimport {IGristUrlState} from \"app/common/gristUrls\";\nimport {urlState} from \"app/client/models/gristUrlState\";\nimport {delay} from \"app/common/delay\";\nimport {reportError} from \"app/client/models/errors\";\nimport {cssBigIcon, cssCloseButton} from \"./ExampleCard\";\n\nconst t = makeT('OnBoardingPopups');\n\nconst testId = makeTestId('test-onboarding-');\n\n// Describes an onboarding popup. Each popup is uniquely identified by its id.\nexport interface IOnBoardingMsg {\n\n  // A CSS selector pointing to the reference element\n  selector: string,\n\n  // Title\n  title: DomElementArg,\n\n  // Body\n  body?: DomElementArg,\n\n  // If true show the message as a modal centered on the screen.\n  showHasModal?: boolean,\n\n  // The popper placement.\n  placement?: Placement,\n\n  // Adjusts the popup offset so that it is positioned relative to the content of the reference\n  // element. This is useful when the reference element has padding and no border (ie: such as\n  // icons). In which case, and when set to true, it will fill the gap between popups and the UI\n  // part it's pointing at. If `cropPadding` is falsy otherwise, the popup might look a bit distant.\n  cropPadding?: boolean,\n\n  // The popper offset.\n  offset?: [number, number],\n\n  // Skip the message\n  skip?: boolean;\n\n  // If present, will be passed to urlState().pushUrl() to navigate to the location defined by that state\n  urlState?: IGristUrlState;\n}\n\n// There should only be one tour at a time. Use a holder to dispose the previous tour when\n// starting a new one.\nconst tourSingleton = Holder.create<OnBoardingPopupsCtl>(null);\n\nexport function startOnBoarding(messages: IOnBoardingMsg[], onFinishCB: () => void) {\n  const ctl = OnBoardingPopupsCtl.create(tourSingleton, messages, onFinishCB);\n  ctl.start().catch(reportError);\n}\n\n// Returns whether some tour is currently active.\nexport function isTourActive(): boolean {\n  return !tourSingleton.isEmpty();\n}\n\nclass OnBoardingError extends Error {\n  public name = 'OnBoardingError';\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * Current index in the list of messages.\n * This allows closing the tour and reopening where you left off.\n * Since it's a single global value, mixing unrelated tours\n * (e.g. the generic welcome tour and a specific document tour)\n * in a single page load won't work well.\n */\nlet ctlIndex = 0;\n\nclass OnBoardingPopupsCtl extends Disposable {\n  private _openPopupCtl: {close: () => void}|undefined;\n  private _overlay: HTMLElement;\n  private _arrowEl = buildArrow();\n\n  constructor(private _messages: IOnBoardingMsg[], private _onFinishCB: () => void) {\n    super();\n    if (this._messages.length === 0) {\n      throw new OnBoardingError('messages should not be an empty list');\n    }\n\n    // In case we're reopening after deleting some rows of GristDocTour,\n    // ensure ctlIndex is still within bounds\n    ctlIndex = Math.min(ctlIndex, this._messages.length - 1);\n\n    this.onDispose(() => {\n      this._openPopupCtl?.close();\n    });\n  }\n\n  public async start() {\n    this._showOverlay();\n    await this._move(0);\n    Mousetrap.setPaused(true);\n    this.onDispose(() => {\n      Mousetrap.setPaused(false);\n    });\n  }\n\n  private _finish() {\n    this._onFinishCB();\n    this.dispose();\n  }\n\n  private async _move(movement: number, maybeClose = false) {\n    const newIndex = ctlIndex + movement;\n    const entry = this._messages[newIndex];\n    if (!entry) {\n      if (maybeClose) {\n        // User finished the tour, close and restart from the beginning if they reopen\n        ctlIndex = 0;\n        this._finish();\n      }\n      return;  // gone out of bounds, probably by keyboard shortcut\n    }\n    ctlIndex = newIndex;\n    if (entry.skip) {\n      // movement = 0 when starting a tour, make sure we don't get stuck in a loop\n      await this._move(movement || +1);\n      return;\n    }\n\n    // close opened popup if any\n    this._openPopupCtl?.close();\n\n    if (entry.urlState) {\n      await urlState().pushUrl(entry.urlState);\n      await delay(100);  // make sure cursor is in correct place\n    }\n\n    if (entry.showHasModal) {\n      this._showHasModal();\n    } else {\n      await this._showHasPopup(movement);\n    }\n  }\n\n  private async _showHasPopup(movement: number) {\n    const content = this._buildPopupContent();\n    const entry = this._messages[ctlIndex];\n    const elem = document.querySelector<HTMLElement>(entry.selector);\n    const {placement} = entry;\n\n    // The element the popup refers to is not present. To the user we show nothing and simply skip\n    // it to the next.\n    if (!elem) {\n      console.warn(`On boarding tour: element ${entry.selector} not found!`);\n      // movement = 0 when starting a tour, make sure we don't get stuck in a loop\n      return this._move(movement || +1);\n    }\n\n    // Cleanup\n    function close() {\n      popper.destroy();\n      dom.domDispose(content);\n      content.remove();\n    }\n\n    this._openPopupCtl = {close};\n    document.body.appendChild(content);\n    this._addFocusLayer(content);\n\n    // Create a popper for positioning the popup content relative to the reference element\n    const adjacentPadding = entry.cropPadding ? this._getAdjacentPadding(elem, placement) : 0;\n    const popper = createPopper(elem, content, {\n      placement,\n      modifiers: [{\n        name: 'arrow',\n        options: {\n          element: this._arrowEl,\n        },\n      }, {\n        name: 'offset',\n        options: {\n          offset: [0, 12 - adjacentPadding],\n        }\n      }],\n    });\n  }\n\n  private _addFocusLayer(container: HTMLElement) {\n    dom.autoDisposeElem(container, new FocusLayer({\n      defaultFocusElem: container,\n      allowFocus: (elem) => (elem !== document.body)\n    }));\n  }\n\n  // Get the padding length for the side that will be next to the popup.\n  private _getAdjacentPadding(elem: HTMLElement, placement?: Placement) {\n    if (placement) {\n      let padding = '';\n      if (placement.includes('bottom')) {\n        padding = getComputedStyle(elem).paddingBottom;\n      }\n      else if (placement.includes('top')) {\n        padding = getComputedStyle(elem).paddingTop;\n      }\n      else if (placement.includes('left')) {\n        padding = getComputedStyle(elem).paddingLeft;\n      }\n      else if (placement.includes('right')) {\n        padding = getComputedStyle(elem).paddingRight;\n      }\n      // Note: getComputedStyle return value in pixel, hence no need to handle other unit. See here\n      // for reference:\n      // https://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle#notes.\n      if (padding && padding.endsWith('px')) {\n        return Number(padding.slice(0, padding.length - 2));\n      }\n    }\n    return 0;\n  }\n\n  private _showHasModal() {\n    const content = this._buildPopupContent();\n    dom.update(this._overlay, content);\n    this._addFocusLayer(content);\n\n    function close() {\n      content.remove();\n      dom.domDispose(content);\n    }\n\n    this._openPopupCtl = {close};\n  }\n\n  private _buildPopupContent() {\n    return Container(\n      {tabindex: '-1'},\n      this._arrowEl,\n      ContentWrapper(\n        cssCloseButton(cssBigIcon('CrossBig'),\n          dom.on('click', () => this._finish()),\n          testId('close'),\n        ),\n        cssTitle(this._messages[ctlIndex].title),\n        cssBody(this._messages[ctlIndex].body),\n        this._buildFooter(),\n        testId('popup'),\n      ),\n      dom.onKeyDown({\n        Escape:     () => this._finish(),\n        ArrowLeft:  () => this._move(-1),\n        ArrowRight: () => this._move(+1),\n        Enter:      () => this._move(+1, true),\n      }),\n    );\n  }\n\n  private _buildFooter() {\n    const nSteps = this._messages.length;\n    const isLastStep = ctlIndex === nSteps - 1;\n    const isFirstStep = ctlIndex === 0;\n    return Footer(\n      ProgressBar(\n        range(nSteps).map((i) => Dot(Dot.cls('-done', i > ctlIndex))),\n      ),\n      Buttons(\n        bigBasicButton(\n          'Previous', testId('previous'),\n          dom.on('click', () => this._move(-1)),\n          dom.prop('disabled', isFirstStep),\n          {style: `margin-right: 8px; visibility: ${isFirstStep ? 'hidden' : 'visible'}`},\n        ),\n        bigPrimaryButton(\n          isLastStep ? t(\"Finish\") : t(\"Next\"), testId('next'),\n          dom.on('click', () => this._move(+1, true)),\n        ),\n      )\n    );\n  }\n\n  private _showOverlay() {\n    document.body.appendChild(this._overlay = Overlay());\n    this.onDispose(() => {\n      document.body.removeChild(this._overlay);\n      dom.domDispose(this._overlay);\n    });\n  }\n}\n\nfunction buildArrow() {\n  return ArrowContainer(\n    svg('svg', { style: 'width: 13px; height: 34px;' },\n        svg('path', {'d': 'M 2 19 h 13 v 18 Z'}))\n  );\n}\n\nconst Container = styled('div', `\n  align-self: center;\n  border: 2px solid ${theme.accentBorder};\n  border-radius: 3px;\n  z-index: ${vars.onboardingPopupZIndex};\n  max-width: 490px;\n  position: relative;\n  background-color: ${theme.popupBg};\n  box-shadow: 0 2px 18px 0 ${theme.popupInnerShadow}, 0 0 1px 0 ${theme.popupOuterShadow};\n  outline: unset;\n`);\n\nfunction sideSelectorChunk(side: 'top'|'bottom'|'left'|'right') {\n  return `.${Container.className}[data-popper-placement^=${side}]`;\n}\n\nconst ArrowContainer = styled('div', `\n  position: absolute;\n\n  & path {\n    stroke: ${theme.accentBorder};\n    stroke-width: 2px;\n    fill: ${theme.popupBg};\n  }\n\n  ${sideSelectorChunk('top')} > & {\n    bottom: -26px;\n  }\n\n  ${sideSelectorChunk('bottom')} > & {\n    top: -23px;\n  }\n\n  ${sideSelectorChunk('right')} > & {\n    left: -12px;\n  }\n\n  ${sideSelectorChunk('left')} > & {\n    right: -12px;\n  }\n\n  ${sideSelectorChunk('top')} svg {\n    transform: rotate(-90deg);\n  }\n\n  ${sideSelectorChunk('bottom')} svg {\n    transform: rotate(90deg);\n  }\n\n  ${sideSelectorChunk('left')} svg {\n    transform: scalex(-1);\n  }\n`);\n\nconst ContentWrapper = styled('div', `\n  position: relative;\n  padding: 32px;\n  background-color: ${theme.popupBg};\n`);\n\nconst Footer = styled('div', `\n  display: flex;\n  flex-direction: row;\n  margin-top: 32px;\n  justify-content: space-between;\n  align-items: center;\n`);\n\nconst ProgressBar = styled('div', `\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  row-gap: 12px;\n`);\n\nconst Buttons = styled('div', `\n  display: flex;\n  flex-directions: row;\n`);\n\nconst Dot = styled('div', `\n  width: 6px;\n  height: 6px;\n  border-radius: 3px;\n  margin-right: 12px;\n  align-self: center;\n  background-color: ${theme.progressBarFg};\n  &-done {\n    background-color: ${theme.progressBarBg};\n  }\n`);\n\nconst Overlay = styled('div', `\n  position: fixed;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  z-index: ${vars.onboardingBackdropZIndex};\n  overflow-y: auto;\n`);\n\nconst cssTitle = styled('div', `\n  font-size: ${vars.xxxlargeFontSize};\n  font-weight: ${vars.headerControlTextWeight};\n  color: ${theme.text};\n  margin: 0 0 16px 0;\n  line-height: 32px;\n`);\n\nconst cssBody = styled('div', `\n  color: ${theme.text};\n`);\n","import { theme, vars } from 'app/client/ui2018/cssVars';\nimport {textarea} from 'app/client/ui/inputs';\nimport {cssTextInput} from 'app/client/ui2018/editableLabel';\nimport {IInputOptions, input, Observable, styled} from 'grainjs';\n\n\nexport const cssRenamePopup = styled('div', `\n  display: flex;\n  flex-direction: column;\n  min-width: 280px;\n  padding: 16px;\n  background-color: ${theme.popupBg};\n  border-radius: 2px;\n  outline: none;\n`);\n\nexport const cssLabel = styled('label', `\n  color: ${theme.text};\n  font-size: ${vars.xsmallFontSize};\n  font-weight: ${vars.bigControlTextWeight};\n  text-transform: uppercase;\n  margin: 0 0 8px 0;\n  &:not(:first-child) {\n    margin-top: 16px;\n  }\n`);\n\nconst cssInputWithIcon = styled('div', `\n  position: relative;\n  display: flex;\n  flex-direction: column;\n`);\n\nexport const cssInput = styled((\n  obs: Observable<string>,\n  opts: IInputOptions,\n  ...args) => input(obs, opts, cssTextInput.cls(''), ...args), `\n  text-overflow: ellipsis;\n  color: ${theme.inputFg};\n  background-color: transparent;\n  &:disabled {\n    color: ${theme.inputDisabledFg};\n    background-color: ${theme.inputDisabledBg};\n    pointer-events: none;\n  }\n  &::placeholder {\n    color: ${theme.inputPlaceholderFg};\n  }\n  .${cssInputWithIcon.className} > &:disabled {\n    padding-right: 28px;\n  }\n`);\n\nexport const cssTextArea = styled(textarea, `\n  color: ${theme.inputFg};\n  background-color: ${theme.mainPanelBg};\n  border: 1px solid ${theme.inputBorder};\n  width: 100%;\n  padding: 3px 6px;\n  outline: none;\n  max-width: 100%;\n  min-width: calc(280px - 16px*2);\n  max-height: 500px;\n  min-height: calc(3em * 1.5);\n  resize: none;\n  border-radius: 3px;\n  &::placeholder {\n    color: ${theme.inputPlaceholderFg};\n  }\n\n  &[readonly] {\n    background-color: ${theme.inputDisabledBg};\n    color: ${theme.inputDisabledFg};\n  }\n`);\n","import { allCommands } from 'app/client/components/commands';\nimport { makeT } from 'app/client/lib/localization';\nimport { menuDivider, menuItemCmd } from 'app/client/ui2018/menus';\nimport { dom } from 'grainjs';\n\nconst t = makeT('RowContextMenu');\n\nexport interface IRowContextMenu {\n  disableInsert: boolean;\n  disableDelete: boolean;\n  isViewSorted: boolean;\n  numRows: number;\n}\n\nexport function RowContextMenu({ disableInsert, disableDelete, isViewSorted, numRows }: IRowContextMenu) {\n  const result: Element[] = [];\n  if (isViewSorted) {\n    // When the view is sorted, any newly added records get shifts instantly at the top or\n    // bottom. It could be very confusing for users who might expect the record to stay above or\n    // below the active row. Thus in this case we show a single `insert row` command.\n    result.push(\n      menuItemCmd(allCommands.insertRecordAfter, t(\"Insert row\"),\n        dom.cls('disabled', disableInsert)),\n    );\n  } else {\n    result.push(\n      menuItemCmd(allCommands.insertRecordBefore, t(\"Insert row above\"),\n        dom.cls('disabled', disableInsert)),\n      menuItemCmd(allCommands.insertRecordAfter, t(\"Insert row below\"),\n        dom.cls('disabled', disableInsert)),\n    );\n  }\n  result.push(\n    menuItemCmd(allCommands.duplicateRows, t('Duplicate rows', { count: numRows }),\n      dom.cls('disabled', disableInsert || numRows === 0)),\n  );\n  result.push(\n    menuDivider(),\n    // TODO: should show `Delete ${num} rows` when multiple are selected\n    menuItemCmd(allCommands.deleteRecords, t(\"Delete\"),\n      dom.cls('disabled', disableDelete)),\n  );\n  result.push(\n    menuDivider(),\n    menuItemCmd(allCommands.copyLink, t(\"Copy anchor link\")));\n  return result;\n}\n","import {colors, theme, vars} from 'app/client/ui2018/cssVars';\nimport {icon} from 'app/client/ui2018/icons';\nimport {input, styled} from 'grainjs';\nimport {cssMenuItem} from 'popweasel';\n\n// Styled elements used for rendering a user, e.g. in the UserManager, Billing, etc.\n// There is a general structure, but enough small variation that there is no helper at this point.\n//\n//   cssMemberListItem(\n//     cssMemberImage(\n//       createUserImage(getFullUser(member), 'large')\n//     ),\n//     cssMemberText(\n//       cssMemberPrimary(NAME),\n//       cssMemberSecondary(EMAIL),\n//       cssMemberType(DESCRIPTION),\n//     )\n//   )\n\nexport const cssMemberListItem = styled('div', `\n  display: flex;\n  width: 460px;\n  min-height: 64px;\n  margin: 0 auto;\n  padding: 12px 0;\n`);\n\nexport const cssMemberImage = styled('div', `\n  width: 40px;\n  height: 40px;\n  margin: 0 4px;\n  border-radius: 20px;\n  background-color: ${colors.lightGreen};\n  background-size: cover;\n\n  .${cssMemberListItem.className}-removed & {\n    opacity: 0.4;\n  }\n`);\n\nexport const cssMemberText = styled('div', `\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  margin: 2px 12px;\n  flex: 1 1 0;\n  min-width: 0px;\n  font-size: ${vars.mediumFontSize};\n\n  .${cssMemberListItem.className}-removed & {\n    opacity: 0.4;\n  }\n`);\n\nexport const cssMemberPrimary = styled('span', `\n  font-weight: bold;\n  color: ${theme.text};\n  padding: 2px 0;\n\n  .${cssMenuItem.className}-sel & {\n    color: ${theme.menuItemSelectedFg};\n  }\n`);\n\nexport const cssMemberSecondary = styled('span', `\n  color: ${theme.lightText};\n  /* the following just undo annoying bootstrap styles that apply to all labels */\n  margin: 0px;\n  font-weight: normal;\n  padding: 2px 0;\n  white-space: nowrap;\n\n  .${cssMenuItem.className}-sel & {\n    color: ${theme.menuItemSelectedFg};\n  }\n`);\n\nexport const cssMemberType = styled('span', `\n  color: ${theme.lightText};\n  /* the following just undo annoying bootstrap styles that apply to all labels */\n  margin: 0px;\n  font-weight: normal;\n  padding: 2px 0;\n  white-space: nowrap;\n\n  .${cssMenuItem.className}-sel & {\n    color: ${theme.menuItemSelectedFg};\n  }\n`);\n\nexport const cssMemberTypeProblem = styled('span', `\n  color: ${theme.errorText};\n  /* the following just undo annoying bootstrap styles that apply to all labels */\n  margin: 0px;\n  font-weight: normal;\n  padding: 2px 0;\n  white-space: nowrap;\n\n  .${cssMenuItem.className}-sel & {\n    color: ${theme.menuItemSelectedFg};\n  }\n`);\n\nexport const cssMemberBtn = styled('div', `\n  width: 16px;\n  height: 16px;\n  cursor: pointer;\n\n  &-disabled {\n    opacity: 0.3;\n    cursor: default;\n  }\n`);\n\nexport const cssRemoveIcon = styled(icon, `\n  background-color: ${theme.lightText};\n  margin: 12px 0;\n`);\n\nexport const cssEmailInputContainer = styled('div', `\n  position: relative;\n  display: flex;\n  height: 42px;\n  padding: 0 3px;\n  margin: 16px 63px;\n  border: 1px solid ${theme.inputBorder};\n  border-radius: 3px;\n  font-size: ${vars.mediumFontSize};\n  outline: none;\n\n  &-green {\n    border: 1px solid ${theme.inputValid};\n  }\n`);\n\nexport const cssEmailInput = styled(input, `\n  color: ${theme.inputFg};\n  background-color: ${theme.inputBg};\n  flex: 1 1 0;\n  font-size: ${vars.mediumFontSize};\n  font-family: ${vars.fontFamily};\n  outline: none;\n  border: none;\n\n  &::placeholder {\n    color: ${theme.inputPlaceholderFg};\n  }\n`);\n\nexport const cssMailIcon = styled(icon, `\n  margin: 12px 8px 12px 13px;\n  background-color: ${theme.lightText};\n`);\n","import {makeT} from 'app/client/lib/localization';\nimport {allCommands} from 'app/client/components/commands';\nimport {ViewSectionRec} from 'app/client/models/DocModel';\nimport {urlState} from 'app/client/models/gristUrlState';\nimport {testId} from 'app/client/ui2018/cssVars';\nimport {menuDivider, menuItemCmd, menuItemLink} from 'app/client/ui2018/menus';\nimport {GristDoc} from 'app/client/components/GristDoc';\nimport {dom, UseCB} from 'grainjs';\n\nconst t = makeT('ViewLayoutMenu');\n\n/**\n * Returns a list of menu items for a view section.\n */\nexport function makeViewLayoutMenu(viewSection: ViewSectionRec, isReadonly: boolean) {\n  const viewInstance = viewSection.viewInstance.peek()!;\n  const gristDoc = viewInstance.gristDoc;\n\n  // get current row index from cursor\n  const cursorRow = viewInstance.cursor.rowIndex.peek();\n  // get row id from current data\n  // rowId can be string - it is wrongly typed in cursor and in viewData\n  const rowId = (cursorRow !== null ? viewInstance.viewData.getRowId(cursorRow) : null) as string|null|number;\n  const isAddRow = rowId === 'new';\n\n  const contextMenu = [\n    menuItemCmd(allCommands.deleteRecords,\n      t(\"Delete record\"),\n      testId('section-delete-card'),\n      dom.cls('disabled', isReadonly || isAddRow)),\n    menuItemCmd(allCommands.copyLink,\n      t(\"Copy anchor link\"),\n      testId('section-card-link'),\n    ),\n    menuDivider(),\n  ];\n\n  const viewRec = viewSection.view();\n  const isSinglePage = urlState().state.get().params?.style === 'singlePage';\n\n  const sectionId = viewSection.table.peek().rawViewSectionRef.peek();\n  const anchorUrlState = viewInstance.getAnchorLinkForSection(sectionId);\n  anchorUrlState.hash!.popup = true;\n  const rawUrl = urlState().makeUrl(anchorUrlState);\n\n  // Count number of rendered sections on the viewLayout. Note that the layout might be detached or cleaned\n  // when we have an external section in the popup.\n  const expandedSectionCount = () => gristDoc.viewLayout?.layout.getAllLeafIds().length ?? 0 > 1;\n\n  const dontRemoveSection = () =>\n    !viewRec.getRowId() || viewRec.viewSections().peekLength <= 1 || isReadonly || expandedSectionCount() === 1;\n\n  const dontCollapseSection = () =>\n    dontRemoveSection() ||\n    (gristDoc.externalSectionId.get() === viewSection.getRowId()) ||\n    (gristDoc.maximizedSectionId.get() === viewSection.getRowId());\n\n  const showRawData = (use: UseCB) => {\n    return !use(viewSection.isRaw)// Don't show raw data if we're already in raw data.\n        && !isSinglePage // Don't show raw data in single page mode.\n           ;\n  };\n\n  return [\n    dom.maybe((use) => ['single'].includes(use(viewSection.parentKey)), () => contextMenu),\n    dom.maybe(showRawData,\n      () => menuItemLink(\n        { href: rawUrl}, t(\"Show raw data\"), testId('show-raw-data'),\n        dom.on('click', (ev) => {\n          // Replace the current URL so that the back button works as expected (it navigates back from\n          // the current page).\n          ev.stopImmediatePropagation();\n          ev.preventDefault();\n          urlState().pushUrl(anchorUrlState, { replace: true }).catch(reportError);\n        })\n      )\n    ),\n    menuItemCmd(allCommands.printSection, t(\"Print widget\"), testId('print-section')),\n    menuItemLink({ href: gristDoc.getCsvLink(), target: '_blank', download: ''},\n      t(\"Download as CSV\"), testId('download-section')),\n    menuItemLink({ href: gristDoc.getXlsxActiveViewLink(), target: '_blank', download: ''},\n      t(\"Download as XLSX\"), testId('download-section')),\n    dom.maybe((use) => ['detail', 'single'].includes(use(viewSection.parentKey)), () =>\n      menuItemCmd(allCommands.editLayout, t(\"Edit Card Layout\"),\n        dom.cls('disabled', isReadonly))),\n\n    dom.maybe(!isSinglePage, () => [\n      menuDivider(),\n      menuItemCmd(allCommands.viewTabOpen, t(\"Widget options\"), testId('widget-options')),\n      menuItemCmd(allCommands.sortFilterTabOpen, t(\"Advanced Sort & Filter\")),\n      menuItemCmd(allCommands.dataSelectionTabOpen, t(\"Data selection\")),\n    ]),\n\n    menuDivider(),\n    dom.maybe((use) => use(viewSection.parentKey) === 'custom' && use(viewSection.hasCustomOptions), () =>\n      menuItemCmd(allCommands.openWidgetConfiguration, t(\"Open configuration\"),\n        testId('section-open-configuration')),\n    ),\n    menuItemCmd(allCommands.collapseSection, t(\"Collapse widget\"),\n      dom.cls('disabled', dontCollapseSection()),\n      testId('section-collapse')),\n    menuItemCmd(allCommands.deleteSection, t(\"Delete widget\"),\n      dom.cls('disabled', dontRemoveSection()),\n      testId('section-delete')),\n  ];\n}\n\n\n/**\n * Returns a list of menu items for a view section.\n */\nexport function makeCollapsedLayoutMenu(viewSection: ViewSectionRec, gristDoc: GristDoc) {\n  const isReadonly = gristDoc.isReadonly.get();\n  const isSinglePage = urlState().state.get().params?.style === 'singlePage';\n  const sectionId = viewSection.table.peek().rawViewSectionRef.peek();\n  const anchorUrlState = { hash: { sectionId, popup: true } };\n  const rawUrl = urlState().makeUrl(anchorUrlState);\n  return [\n    dom.maybe((use) => !use(viewSection.isRaw) && !isSinglePage && !use(gristDoc.maximizedSectionId),\n      () => menuItemLink(\n        { href: rawUrl}, t(\"Show raw data\"), testId('show-raw-data'),\n        dom.on('click', (ev) => {\n          // Replace the current URL so that the back button works as expected (it navigates back from\n          // the current page).\n          ev.stopImmediatePropagation();\n          ev.preventDefault();\n          urlState().pushUrl(anchorUrlState, { replace: true }).catch(reportError);\n        })\n      )\n    ),\n    menuDivider(),\n    menuItemCmd(allCommands.expandSection, t(\"Add to page\"),\n      dom.cls('disabled', isReadonly),\n      testId('section-expand')),\n    menuItemCmd(allCommands.deleteCollapsedSection, t(\"Delete widget\"),\n      dom.cls('disabled', isReadonly),\n      testId('section-delete')),\n  ];\n}\n","import {GristDoc} from 'app/client/components/GristDoc';\nimport {allCommands} from 'app/client/components/commands';\nimport {makeT} from 'app/client/lib/localization';\nimport {reportError} from 'app/client/models/AppModel';\nimport {DocModel, ViewSectionRec} from 'app/client/models/DocModel';\nimport {FilterConfig} from 'app/client/ui/FilterConfig';\nimport {cssLabel, cssSaveButtonsRow} from 'app/client/ui/RightPanelStyles';\nimport {hoverTooltip} from 'app/client/ui/tooltips';\nimport {SortConfig} from 'app/client/ui/SortConfig';\nimport {makeViewLayoutMenu} from 'app/client/ui/ViewLayoutMenu';\nimport {basicButton, primaryButton} from 'app/client/ui2018/buttons';\nimport {isNarrowScreenObs, theme, vars} from 'app/client/ui2018/cssVars';\nimport {icon} from 'app/client/ui2018/icons';\nimport {menu} from 'app/client/ui2018/menus';\nimport {Computed, dom, IDisposableOwner, makeTestId, styled} from 'grainjs';\nimport {defaultMenuOptions} from 'popweasel';\n\nconst testId = makeTestId('test-section-menu-');\nconst t = makeT('ViewSectionMenu');\n\n// Handler for [Save] button.\nasync function doSave(docModel: DocModel, viewSection: ViewSectionRec): Promise<void> {\n  await docModel.docData.bundleActions(t(\"Update Sort&Filter settings\"), () => Promise.all([\n    viewSection.activeSortJson.save(),      // Save sort\n    viewSection.saveFilters(),              // Save filter\n    viewSection.activeCustomOptions.save(), // Save widget options\n  ]));\n}\n\n// Handler for [Revert] button.\nfunction doRevert(viewSection: ViewSectionRec) {\n  viewSection.activeSortJson.revert();      // Revert sort\n  viewSection.revertFilters();              // Revert filter\n  viewSection.activeCustomOptions.revert(); // Revert widget options\n}\n\n// [Filter Icon] - Filter toggle and all the components in the menu.\nexport function viewSectionMenu(\n  owner: IDisposableOwner,\n  gristDoc: GristDoc,\n  viewSection: ViewSectionRec,\n) {\n  const {docModel, isReadonly} = gristDoc;\n\n  // If there is any filter (should [Filter Icon] background be filled).\n  const anyFilter = Computed.create(owner, (use) =>  Boolean(use(viewSection.activeFilters).length));\n\n  // Should we show [Save] [Revert] buttons.\n  const displaySaveObs: Computed<boolean> = Computed.create(owner, (use) => (\n    use(viewSection.filterSpecChanged)\n      || !use(viewSection.activeSortJson.isSaved)\n      || !use(viewSection.activeCustomOptions.isSaved)\n  ));\n\n  const save = () => { doSave(docModel, viewSection).catch(reportError); };\n  const revert = () => doRevert(viewSection);\n\n  // If this section is the only one in the view (or view temporary has no sections at all).\n  const singleVisible = Computed.create(owner, (use) => {\n    const view = use(viewSection.view);\n    const sections = use(use(view.viewSections).getObservable());\n    const expanded = sections.filter(s => use(s.isCollapsed) === false).length;\n    return expanded === 1 || !expanded; // single, or no sections at all (temporary).\n  });\n\n  // Should we show expand icon.\n  const showExpandIcon = Computed.create(owner, (use) => {\n    return !use(isNarrowScreenObs()) // not on narrow screens\n         && use(gristDoc.maximizedSectionId) !== use(viewSection.id) // not in when we are maximized\n         && use(gristDoc.externalSectionId) !== use(viewSection.id) // not in when we are external\n         && !use(viewSection.isRaw) // not in raw mode\n         && !use(singleVisible) // not in single section\n         ;\n  });\n\n  return [\n    cssFilterMenuWrapper(\n      cssFilterMenuWrapper.cls('-unsaved', displaySaveObs),\n      testId('wrapper'),\n      cssMenu(\n        testId('sortAndFilter'),\n        // [Filter icon]\n        cssFilterIconWrapper(\n          testId('filter-icon'),\n          // Fill background when there are some filters. Ignore sort options.\n          cssFilterIconWrapper.cls('-any', anyFilter),\n          cssFilterIcon('Filter'),\n          hoverTooltip('Sort and filter', {key: 'sortFilterBtnTooltip'}),\n        ),\n      ),\n      // [Save] [Revert] buttons when there are unsaved options.\n      dom.maybe(displaySaveObs, () => cssSectionSaveButtonsWrapper(\n        cssSaveTextButton(\n          t(\"Save\"),\n          cssSaveTextButton.cls('-accent'),\n          dom.on('click', save),\n          hoverTooltip('Save sort & filter settings', {key: 'sortFilterBtnTooltip'}),\n          testId('small-btn-save'),\n          dom.hide(isReadonly),\n        ),\n        cssRevertIconButton(\n          cssRevertIcon('Revert', cssRevertIcon.cls('-normal')),\n          dom.on('click', revert),\n          hoverTooltip('Revert sort & filter settings', {key: 'sortFilterBtnTooltip'}),\n          testId('small-btn-revert'),\n        ),\n      )),\n      menu(ctl => [\n        // Sort section.\n        makeSortPanel(viewSection, gristDoc),\n        // Filter section.\n        makeFilterPanel(viewSection),\n        // Widget options\n        dom.maybe(use => use(viewSection.parentKey) === 'custom', () =>\n          makeCustomOptions(viewSection)\n        ),\n        // [Save] [Revert] buttons\n        dom.domComputed(displaySaveObs, displaySave => [\n          displaySave ? cssSaveButtonsRow(\n            cssSaveButton(t(\"Save\"), testId('btn-save'),\n                          dom.on('click', () => { ctl.close(); save(); }),\n                          dom.boolAttr('disabled', isReadonly)),\n            basicButton(t(\"Revert\"), testId('btn-revert'),\n                        dom.on('click', () => { ctl.close(); revert(); }))\n          ) : null,\n        ]),\n        // Updates to active sort or filters can cause menu contents to grow, while\n        // leaving the position of the popup unchanged. This can sometimes lead to\n        // the menu growing beyond the boundaries of the viewport. To mitigate this,\n        // we subscribe to changes to the sort/filters and manually update the popup's\n        // position, which will re-position the popup if necessary so that it's fully\n        // visible.\n        dom.autoDispose(viewSection.activeFilters.addListener(() => ctl.update())),\n        dom.autoDispose(viewSection.activeSortJson.subscribe(() => ctl.update())),\n      ], {...defaultMenuOptions, placement: 'bottom-end', trigger: [\n        // Toggle the menu whenever the filter icon button is clicked.\n        (el, ctl) => dom.onMatchElem(el, '.test-section-menu-sortAndFilter', 'click', () => {\n          ctl.toggle();\n        }),\n        // Close the menu whenever the save or revert button is clicked.\n        (el, ctl) => dom.onMatchElem(el, '.test-section-menu-small-btn-save', 'click', () => {\n          ctl.close();\n        }),\n        (el, ctl) => dom.onMatchElem(el, '.test-section-menu-small-btn-revert', 'click', () => {\n          ctl.close();\n        }),\n      ]}),\n    ),\n    cssMenu(\n      testId('viewLayout'),\n      cssDotsIconWrapper(cssIcon('Dots')),\n      menu(_ctl => makeViewLayoutMenu(viewSection, isReadonly.get()), {\n        ...defaultMenuOptions,\n        placement: 'bottom-end',\n      })\n    ),\n    dom.maybe(showExpandIcon, () =>\n      cssExpandIconWrapper(\n        cssSmallIcon('Grow'),\n        testId('expandSection'),\n        dom.on('click', () =>  allCommands.maximizeActiveSection.run()),\n        hoverTooltip('Expand section', {key: 'expandSection'}),\n      ),\n    )\n  ];\n}\n\nfunction makeSortPanel(section: ViewSectionRec, gristDoc: GristDoc) {\n  return [\n    cssLabel(t(\"SORT\"), testId('heading-sort')),\n    dom.create(SortConfig, section, gristDoc, {\n      // Attach content to triggerElem's parent, which is needed to prevent view\n      // section menu to close when clicking an item in the advanced sort menu.\n      menuOptions: {attach: null},\n    }),\n  ];\n}\n\nfunction makeFilterPanel(section: ViewSectionRec) {\n  return [\n    cssLabel(t(\"FILTER\"), testId('heading-filter')),\n    dom.create(FilterConfig, section, {\n      // Attach content to triggerElem's parent, which is needed to prevent view\n      // section menu to close when clicking an item of the add filter menu.\n      menuOptions: {attach: null},\n    }),\n  ];\n}\n\n// Custom Options\n// (empty)|(customized)|(modified) [Remove Icon]\nfunction makeCustomOptions(section: ViewSectionRec) {\n  const color = Computed.create(null, use => use(section.activeCustomOptions.isSaved) ? \"-normal\" : \"-accent\");\n  const text = Computed.create(null, use => {\n    if (use(section.activeCustomOptions)) {\n      return use(section.activeCustomOptions.isSaved) ? t(\"(customized)\") : t(\"(modified)\");\n    } else {\n      return t(\"(empty)\");\n    }\n  });\n  return [\n    cssMenuInfoHeader(t(\"Custom options\"), testId('heading-widget-options')),\n    cssMenuText(\n      dom.autoDispose(text),\n      dom.autoDispose(color),\n      dom.text(text),\n      cssMenuText.cls(color),\n      cssSpacer(),\n      dom.maybe(use => Boolean(use(section.activeCustomOptions)), () =>\n        cssMenuIconWrapper(\n          cssIcon('Remove', testId('btn-remove-options'), dom.on('click', () =>\n            section.activeCustomOptions(null)\n          ))\n        ),\n      ),\n      testId(\"custom-options\")\n    )\n  ];\n}\n\nconst clsOldUI = styled('div', ``);\n\n\nexport const cssMenu = styled('div', `\n  display: flex;\n  cursor: pointer;\n  border-radius: 3px;\n  &.${clsOldUI.className} {\n    margin-top: 0px;\n    border-radius: 0px;\n  }\n  &:hover, &.weasel-popup-open {\n    background-color: ${theme.hover};\n  }\n`);\n\nconst cssIconWrapper = styled('div', `\n  padding: 3px;\n  border-radius: 3px;\n  cursor: pointer;\n  user-select: none;\n`);\n\nconst cssMenuIconWrapper = styled(cssIconWrapper, `\n  display: flex;\n  margin: -3px 0;\n  width: 22px;\n  height: 22px;\n\n  &:hover, &.weasel-popup-open {\n    background-color: ${theme.hover};\n  }\n  &-changed {\n    background-color: ${theme.accentIcon};\n  }\n  &-changed:hover, &-changed:hover.weasel-popup-open {\n    background-color: ${theme.controlHoverFg};\n  }\n`);\n\nconst cssFilterMenuWrapper = styled('div', `\n  display: flex;\n  border-radius: 3px;\n  align-items: center;\n  &-unsaved {\n    border: 1px solid ${theme.accentBorder};\n  }\n  & .${cssMenu.className} {\n    border: none;\n  }\n`);\n\nconst cssIcon = styled(icon, `\n  flex: none;\n  cursor: pointer;\n  background-color: ${theme.lightText};\n\n  .${cssMenuIconWrapper.className}-changed & {\n    background-color: ${theme.controlPrimaryFg};\n  }\n\n  .${clsOldUI.className} & {\n    background-color: ${theme.controlPrimaryFg};\n  }\n\n  &-accent {\n    background-color: ${theme.accentIcon};\n  }\n`);\n\nexport const cssDotsIconWrapper = styled(cssIconWrapper, `\n  border-radius: 0px 2px 2px 0px;\n  display: flex;\n  .${clsOldUI.className} & {\n    border-radius: 0px;\n  }\n`);\n\nconst cssExpandIconWrapper = styled('div', `\n  display: flex;\n  border-radius: 3px;\n  align-items: center;\n  padding: 4px;\n  cursor: pointer;\n  &:hover, &.weasel-popup-open {\n    background-color: ${theme.hover};\n  }\n`);\n\nconst cssSmallIcon = styled(cssIcon, `\n  height: 13px;\n  width: 13px;\n`);\n\nconst cssFilterIconWrapper = styled(cssIconWrapper, `\n  border-radius: 2px 0px 0px 2px;\n  display: flex;\n  &-any {\n    border-radius: 2px;\n    background-color: ${theme.controlSecondaryFg};\n  }\n  .${cssFilterMenuWrapper.className}-unsaved & {\n    background-color: ${theme.controlPrimaryBg};\n  }\n`);\n\nconst cssFilterIcon = styled(cssIcon, `\n  .${cssFilterIconWrapper.className}-any & {\n    background-color: ${theme.controlPrimaryFg};\n  }\n  .${cssFilterMenuWrapper.className}-unsaved & {\n    background-color: ${theme.controlPrimaryFg};\n  }\n`);\n\nconst cssMenuInfoHeader = styled('div', `\n  color: ${theme.menuSubheaderFg};\n  font-weight: ${vars.bigControlTextWeight};\n  padding: 8px 24px 8px 24px;\n  cursor: default;\n`);\n\nconst cssMenuText = styled('div', `\n  display: flex;\n  align-items: center;\n  padding: 0px 24px 8px 24px;\n  cursor: default;\n  white-space: nowrap;\n  &-accent {\n    color: ${theme.accentText};\n  }\n  &-normal {\n    color: ${theme.lightText};\n  }\n`);\n\nconst cssSaveButton = styled(primaryButton, `\n  margin-right: 8px;\n`);\n\nconst cssSaveTextButton = styled('div', `\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n  font-size: ${vars.mediumFontSize};\n  padding: 0px 5px;\n  border-right: 1px solid ${theme.accentBorder};\n\n  &-accent {\n    color: ${theme.accentText};\n  }\n`);\n\nconst cssRevertIconButton = styled('div', `\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n`);\n\nconst cssRevertIcon = styled(icon, `\n  --icon-color: ${theme.accentIcon};\n  margin: 0 5px 0 5px;\n`);\n\nconst cssSectionSaveButtonsWrapper = styled('div', `\n  padding: 0 1px 0 1px;\n  display: flex;\n  justify-content: space-between;\n  align-self: normal;\n`);\n\nconst cssSpacer = styled('div', `\n  margin: 0 auto;\n`);\n","import {GristDoc} from 'app/client/components/GristDoc';\nimport {ViewSectionHelper} from 'app/client/components/ViewLayout';\nimport {makeT} from 'app/client/lib/localization';\nimport {reportMessage, reportSuccess} from 'app/client/models/errors';\nimport {IEdit, IExternalTable, VirtualTable} from 'app/client/models/VirtualTable';\nimport {docListHeader} from 'app/client/ui/DocMenuCss';\nimport {bigPrimaryButton} from 'app/client/ui2018/buttons';\nimport {mediaSmall, testId} from 'app/client/ui2018/cssVars';\nimport {ApiError} from 'app/common/ApiError';\nimport {DisposableWithEvents} from 'app/common/DisposableWithEvents';\nimport {\n  DocAction,\n  getColIdsFromDocAction,\n  getColValues,\n  isDataAction,\n  TableDataAction,\n  UserAction\n} from 'app/common/DocActions';\nimport {WebhookSummary} from 'app/common/Triggers';\nimport {DocAPI} from 'app/common/UserAPI';\nimport {GristObjCode, RowRecord} from 'app/plugin/GristData';\nimport {dom, styled} from 'grainjs';\nimport {observableArray, ObservableArray} from \"knockout\";\nimport omit = require('lodash/omit');\nimport pick = require('lodash/pick');\nimport range = require('lodash/range');\nimport without = require('lodash/without');\n\nconst t = makeT('WebhookPage');\n\n/**\n * A list of columns for a virtual table about webhooks.\n * The ids need to be strings.\n */\nconst WEBHOOK_COLUMNS = [\n  {\n    id: 'vt_webhook_fc1',\n    colId: 'tableId',\n    type: 'Choice',\n    label: 'Table',\n    // widgetOptions are configured later, since the choices depend\n    // on the user tables in the document.\n  },\n  {\n    id: 'vt_webhook_fc2',\n    colId: 'url',\n    type: 'Text',\n    label: 'URL',\n  },\n  {\n    id: 'vt_webhook_fc3',\n    colId: 'eventTypes',\n    type: 'ChoiceList',\n    label: 'Event Types',\n    widgetOptions: JSON.stringify({\n      widget: 'TextBox',\n      alignment: 'left',\n      choices: ['add', 'update'],\n      choiceOptions: {},\n    }),\n  },\n  {\n    id: 'vt_webhook_fc4',\n    colId: 'enabled',\n    type: 'Bool',\n    label: 'Enabled',\n    widgetOptions: JSON.stringify({\n      widget: 'Switch',\n    }),\n  },\n  {\n    id: 'vt_webhook_fc5',\n    colId: 'isReadyColumn',\n    type: 'Text',\n    label: 'Ready Column',\n  },\n  {\n    id: 'vt_webhook_fc6',\n    colId: 'webhookId',\n    type: 'Text',\n    label: 'Webhook Id',\n  },\n  {\n    id: 'vt_webhook_fc7',\n    colId: 'name',\n    type: 'Text',\n    label: 'Name',\n  },\n  {\n    id: 'vt_webhook_fc8',\n    colId: 'memo',\n    type: 'Text',\n    label: 'Memo',\n  },\n  {\n    id: 'vt_webhook_fc9',\n    colId: 'status',\n    type: 'Text',\n    label: 'Status',\n  },\n] as const;\n\n/**\n * Layout of fields in a view, with a specific ordering.\n */\nconst WEBHOOK_VIEW_FIELDS: Array<(typeof WEBHOOK_COLUMNS)[number]['colId']> = [\n  'name', 'memo',\n  'eventTypes', 'url',\n  'tableId', 'isReadyColumn',\n  'webhookId', 'enabled',\n  'status'\n];\n\n/**\n *\n * Change webhooks based on a virtual table.\n *\n * TODO: error handling is not rock-solid. If a set of actions are\n * applied all together, and one fails, then state between UI and\n * back-end may end up being inconsistent. One option would be just to\n * resync in the case of an error. In practice, the way the virtual\n * table is used in a card list, it would be hard to tickle this case\n * right now, so I'm not going to worry about it.\n *\n */\nclass WebhookExternalTable implements IExternalTable {\n  public name = 'GristHidden_WebhookTable';\n  public initialActions = _prepareWebhookInitialActions(this.name);\n  public saveableFields = [\n    'tableId', 'url', 'eventTypes', 'enabled', 'name', 'memo', 'isReadyColumn',\n  ];\n  public webhooks: ObservableArray<WebhookSummary> =  observableArray<WebhookSummary>([]);\n\n  public constructor(private _docApi: DocAPI) {\n  }\n\n  public async fetchAll(): Promise<TableDataAction> {\n    const webhooks = (await this._docApi.getWebhooks()).webhooks;\n    this._initalizeWebhookList(webhooks);\n    const indices = range(webhooks.length);\n    return ['TableData', this.name, indices.map(i => i + 1),\n      getColValues(indices.map(rowId => _mapWebhookValues(webhooks[rowId])))];\n  }\n\n  public async beforeEdit(editor: IEdit) {\n    const results = editor.actions;\n    for (const r of results) {\n      for (const d of r.stored) {\n        if (!isDataAction(d)) {\n          continue;\n        }\n        const colIds = new Set(getColIdsFromDocAction(d) || []);\n        if (colIds.has('webhookId') || colIds.has('status')) {\n          throw new Error(`Sorry, not all fields can be edited.`);\n        }\n      }\n    }\n    const delta = editor.delta;\n    for (const recId of delta.removeRows) {\n      const rec = editor.getRecord(recId);\n      if (!rec) {\n        continue;\n      }\n      await this._removeWebhook(rec);\n      reportMessage(`Removed webhook.`);\n    }\n    const updates = new Set(delta.updateRows);\n    const t2 = editor;\n    for (const recId of updates) {\n      const rec = t2.getRecordNew(recId);\n      if (rec?.webhookId) {\n        await this._updateWebhook(String(rec?.webhookId), rec);\n      }\n    }\n  }\n\n  public async afterEdit(editor: IEdit) {\n    const {delta} = editor;\n    const updates = new Set(delta.updateRows);\n    const addsAndUpdates = new Set([...delta.addRows, ...delta.updateRows]);\n    for (const recId of addsAndUpdates) {\n      const rec = editor.getRecord(recId);\n      if (!rec) {\n        continue;\n      }\n      const notes: string[] = [];\n      const values: Record<string, any> = {};\n      if (!rec.webhookId) {\n        try {\n          const webhookId = await this._addWebhook(rec);\n          values.webhookId = webhookId;\n          notes.push(\"Added\");\n        } catch (e) {\n          notes.push(\"Incomplete\" + ' | ' + this._getErrorString(e).replace(/^Error: /, '').replace('\\n', ' | '));\n        }\n      } else {\n        notes.push(\"Updated\");\n      }\n      if (!values.status) {\n        values.status = notes.join('\\n');\n      }\n      if (!updates.has(recId)) {\n        // 'enabled' needs an initial value, otherwise it is unsettable\n        values.enabled = false;\n      }\n      await editor.patch([\n        ['UpdateRecord', this.name, recId, values],\n      ]);\n    }\n  }\n\n  public async sync(editor: IEdit): Promise<void> {\n    // Map from external webhookId to local arbitrary rowId.\n    const rowMap = new Map(editor.getRowIds().map(rowId => [editor.getRecord(rowId)!.webhookId, rowId]));\n    // Provisional list of rows to remove (we'll be trimming this down\n    // as we go).\n    const toRemove = new Set(editor.getRowIds());\n    // Synchronization is done by applying a collected list of actions.\n    const actions: UserAction[] = [];\n\n    // Prepare to add or update webhook listings stored locally. Uses\n    // brute force, on the assumption that there won't be many\n    // webhooks, or that \"updating\" something that hasn't actually\n    // changed is not disruptive.\n    const webhooks = (await this._docApi.getWebhooks()).webhooks;\n    this._initalizeWebhookList(webhooks);\n    for (const webhook of webhooks) {\n      const values = _mapWebhookValues(webhook);\n      const rowId = rowMap.get(webhook.id);\n      if (rowId) {\n        toRemove.delete(rowId);\n        actions.push(\n          ['UpdateRecord', this.name, rowId, values]\n        );\n      } else {\n        actions.push(\n          ['AddRecord', this.name, null, values]\n        );\n      }\n    }\n\n    // Prepare to remove webhook rows that no longer correspond to something that\n    // exists externally.\n    for (const rowId of toRemove) {\n      if (editor.getRecord(rowId)?.webhookId) {\n        actions.push(['RemoveRecord', this.name, rowId]);\n      }\n    }\n\n    // Apply the changes.\n    await editor.patch(actions);\n  }\n\n  public async afterAnySchemaChange(editor: IEdit) {\n    // Configure the table picker, since the set of tables may have changed.\n    // TODO: should do something about the ready column picker. Right now,\n    // Grist doesn't have a good way to handle contingent choices.\n    const choices = editor.gristDoc.docModel.visibleTables.all().map(tableRec => tableRec.tableId());\n    editor.gristDoc.docData.receiveAction([\n      'UpdateRecord', '_grist_Tables_column', 'vt_webhook_fc1' as any, {\n        widgetOptions: JSON.stringify({\n          widget: 'TextBox',\n          alignment: 'left',\n          choices,\n        })\n      }]);\n  }\n\n  private _initalizeWebhookList(webhooks: WebhookSummary[]){\n\n    this.webhooks.removeAll();\n    this.webhooks.push(...webhooks);\n  }\n\n  private _getErrorString(e: ApiError): string {\n    return e.details?.userError || e.message;\n  }\n\n  private async _addWebhook(rec: RowRecord) {\n    const fields = this._prepareFields(rec);\n    // Leave enabled at default, meaning it will enable on successful\n    // creation. It seems likely we'd get support requests asking why\n    // webhooks are not working otherwise.\n    const {webhookId} = await this._docApi.addWebhook(omit(fields, 'enabled'));\n    return webhookId;\n  }\n\n  private async _updateWebhook(id: string, rec: RowRecord) {\n    const fields = this._prepareFields(rec);\n    if (Object.keys(fields).length) {\n      await this._docApi.updateWebhook({id, fields});\n    }\n  }\n\n  private async _removeWebhook(rec: RowRecord) {\n    if (rec.webhookId) {\n      await this._docApi.removeWebhook(String(rec.webhookId), String(rec.tableId));\n    }\n  }\n\n  /**\n   * Perform some transformations for sending fields to api:\n   *   - (1) removes all non saveble props and\n   *   - (2) removes the leading 'L' from eventTypes.\n   */\n  private _prepareFields(fields: any) {\n    fields = pick(fields, ...this.saveableFields);\n    if (fields.eventTypes) {\n      fields.eventTypes = without(fields.eventTypes, 'L');\n    }\n    return fields;\n  }\n}\n\n/**\n * Visualize webhooks. There's a button to clear the queue, and\n * a card list of webhooks.\n */\nexport class WebhookPage extends DisposableWithEvents {\n\n  public docApi = this.gristDoc.docPageModel.appModel.api.getDocAPI(this.gristDoc.docId());\n  public sharedTable: VirtualTable;\n  private _webhookExternalTable: WebhookExternalTable;\n\n\n  constructor(public gristDoc: GristDoc) {\n    super();\n    //this._webhooks = observableArray<WebhookSummary>();\n    this._webhookExternalTable = new WebhookExternalTable(this.docApi);\n    const table = new VirtualTable(this, gristDoc, this._webhookExternalTable);\n    this.listenTo(gristDoc, 'webhooks', async () => {\n      await table.lazySync();\n\n    });\n  }\n\n\n\n  public buildDom() {\n    const viewSectionModel = this.gristDoc.docModel.viewSections.getRowModel('vt_webhook_fs1' as any);\n    ViewSectionHelper.create(this, this.gristDoc, viewSectionModel);\n    return cssContainer(\n      cssHeader(t('Webhook Settings')),\n      cssControlRow(\n        bigPrimaryButton(t(\"Clear Queue\"),\n          dom.on('click', () => this.reset()),\n          testId('webhook-reset'),\n        )\n      ),\n      // active_section here is a bit of a hack, to allow tests to run\n      // more easily.\n      dom('div.active_section.view_data_pane_container.flexvbox', viewSectionModel.viewInstance()!.viewPane),\n    );\n  }\n\n  public async reset() {\n    await this.docApi.flushWebhooks();\n    reportSuccess('Cleared webhook queue.');\n  }\n\n  public async resetSelected(id: string) {\n    await this.docApi.flushWebhook(id);\n    reportSuccess(`Cleared webhook ${id} queue.`);\n  }\n}\n\nconst cssHeader = styled(docListHeader, `\n  margin-bottom: 0;\n  &:not(:first-of-type) {\n    margin-top: 40px;\n  }\n`);\n\nconst cssControlRow = styled('div', `\n  flex: none;\n  margin-bottom: 16px;\n  margin-top: 16px;\n  display: flex;\n  gap: 16px;\n`);\n\nconst cssContainer = styled('div', `\n  overflow-y: auto;\n  position: relative;\n  height: 100%;\n  padding: 32px 64px 24px 64px;\n\n  display: flex;\n  flex-direction: column;\n  @media ${mediaSmall} {\n    & {\n      padding: 32px 24px 24px 24px;\n    }\n  }\n`);\n\n\n/**\n * Actions needed to create the virtual table about webhooks, and a\n * view for it. There are some \"any\" casts to place string ids where\n * numbers are expected.\n */\nfunction _prepareWebhookInitialActions(tableId: string): DocAction[] {\n  return [[\n    // Add the virtual table.\n    'AddTable', tableId,\n    WEBHOOK_COLUMNS.map(col => ({\n      isFormula: true,\n      type: 'Any',\n      formula: '',\n      id: col.colId\n    }))\n  ], [\n    // Add an entry for the virtual table.\n    'AddRecord', '_grist_Tables', 'vt_webhook_ft1' as any, {tableId, primaryViewId: 0},\n  ], [\n    // Add entries for the columns of the virtual table.\n    'BulkAddRecord', '_grist_Tables_column',\n    WEBHOOK_COLUMNS.map(col => col.id) as any, getColValues(WEBHOOK_COLUMNS.map(rec =>\n      Object.assign({\n        isFormula: false,\n        formula: '',\n        widgetOptions: '',\n        parentId: 'vt_webhook_ft1' as any,\n      }, omit(rec, ['id']) as any))),\n  ], [\n    // Add a view section.\n    'AddRecord', '_grist_Views_section', 'vt_webhook_fs1' as any,\n    {tableRef: 'vt_webhook_ft1', parentKey: 'detail', title: '', borderWidth: 1, defaultWidth: 100, theme: 'blocks'}\n  ], [\n    // List the fields shown in the view section.\n    'BulkAddRecord', '_grist_Views_section_field', WEBHOOK_VIEW_FIELDS.map((_, i) => `vt_webhook_ff${i + 1}`) as any, {\n      colRef: WEBHOOK_VIEW_FIELDS.map(colId => WEBHOOK_COLUMNS.find(r => r.colId === colId)!.id),\n      parentId: WEBHOOK_VIEW_FIELDS.map(() => 'vt_webhook_fs1'),\n      parentPos: WEBHOOK_VIEW_FIELDS.map((_, i) => i),\n    }\n  ]];\n}\n\n/**\n * Map a webhook summary to a webhook table raw record.  The main\n * difference is that `eventTypes` is tweaked to be in a cell format,\n * and `status` is converted to a string.\n */\nfunction _mapWebhookValues(webhookSummary: WebhookSummary): Partial<WebhookSchemaType> {\n  const fields = webhookSummary.fields;\n  const {eventTypes} = fields;\n  return {\n    ...fields,\n    webhookId: webhookSummary.id,\n    status: JSON.stringify(webhookSummary.usage),\n    eventTypes: [GristObjCode.List, ...eventTypes],\n  };\n}\n\ntype WebhookSchemaType = {\n  [prop in keyof WebhookSummary['fields']]: WebhookSummary['fields'][prop]\n} & {\n  eventTypes: [GristObjCode, ...unknown[]];\n  status: string;\n  webhookId: string;\n}\n","import { makeT } from 'app/client/lib/localization';\nimport * as commands from 'app/client/components/commands';\nimport { urlState } from 'app/client/models/gristUrlState';\nimport { IOnBoardingMsg, startOnBoarding } from \"app/client/ui/OnBoardingPopups\";\nimport { ShortcutKey, ShortcutKeyContent } from 'app/client/ui/ShortcutKey';\nimport { theme } from 'app/client/ui2018/cssVars';\nimport { icon } from \"app/client/ui2018/icons\";\nimport { cssLink } from \"app/client/ui2018/links\";\nimport { dom, styled } from \"grainjs\";\n\nconst t = makeT('WelcomeTour');\n\nexport const WelcomeTour: IOnBoardingMsg[] = [\n  {\n    title: t('Editing Data'),\n    body: () => [\n      dom('p',\n        t('Double-click or hit {{enter}} on a cell to edit it. ', {\n          enter: ShortcutKey(ShortcutKeyContent(t('Enter'))),\n        }),\n        t('Start with {{equal}} to enter a formula.', {\n          equal: ShortcutKey(ShortcutKeyContent('=')),\n        })),\n    ],\n    selector: '.field_clip',\n    placement: 'bottom',\n  },\n  {\n    selector: '.tour-creator-panel',\n    title: t('Configuring your document'),\n    body: () => [\n      dom('p',\n          t('Toggle the {{creatorPanel}} to format columns, ', {creatorPanel: dom('em', t('creator panel'))}),\n          t('convert to card view, select data, and more.')\n         )\n    ],\n    placement: 'left',\n    cropPadding: true,\n  },\n  {\n    selector: '.tour-type-selector',\n    title: t('Customizing columns'),\n    body: () => [\n      dom('p',\n          t('Set formatting options, formulas, or column types, such as dates, choices, or attachments. ')),\n      dom('p',\n          t('Make it relational! Use the {{ref}} type to link tables. ', {\n            ref: ShortcutKey(t('Reference')),\n          })),\n    ],\n    placement: 'right',\n  },\n  {\n    selector: '.tour-add-new',\n    title: t('Building up'),\n    body: () => [\n      dom('p', t('Use {{addNew}} to add widgets, pages, or import more data. ', {\n        addNew: ShortcutKey(t('Add New')),\n      })),\n    ],\n    placement: 'right',\n  },\n  {\n    selector: '.tour-share-icon',\n    title: t('Sharing'),\n    body: () => [\n      dom('p', t('Use the Share button ({{share}}) to share the document or export data.',\n      {share: TopBarButtonIcon(t('Share'))}))\n    ],\n    placement: 'bottom',\n    cropPadding: true,\n  },\n  {\n    selector: '.tour-help-center',\n    title: t('Flying higher'),\n    body: () => [\n      dom('p', t('Use {{helpCenter}} for documentation or questions.',\n      {helpCenter: ShortcutKey(GreyIcon('Help'), t('Help Center'))}))\n    ],\n    placement: 'right',\n  },\n  {\n    selector: '.tour-welcome',\n    title: t('Welcome to Grist!'),\n    body: () => [\n      dom('p', t(\"Browse our {{templateLibrary}} to discover what's possible and get inspired.\",\n        {\n          templateLibrary: cssLink({ target: '_blank', href: urlState().makeUrl({ homePage: \"templates\" }) },\n            t('template library'), cssInlineIcon('FieldLink'))\n        }\n      )),\n    ],\n    showHasModal: true,\n  }\n\n];\n\nexport function startWelcomeTour(onFinishCB: () => void) {\n  commands.allCommands.fieldTabOpen.run();\n  startOnBoarding(WelcomeTour, onFinishCB);\n}\n\nconst TopBarButtonIcon = styled(icon, `\n  --icon-color: ${theme.topBarButtonPrimaryFg};\n`);\n\nconst GreyIcon = styled(icon, `\n  --icon-color: ${theme.shortcutKeySecondaryFg};\n  margin-right: 8px;\n`);\n\nconst cssInlineIcon = styled(icon, `\n  margin: -3px 8px 0 4px;\n`);\n","import * as commands from 'app/client/components/commands';\nimport {makeT} from 'app/client/lib/localization';\nimport { FocusLayer } from 'app/client/lib/FocusLayer';\nimport {ViewSectionRec} from 'app/client/models/entities/ViewSectionRec';\nimport {basicButton, cssButton, primaryButton} from 'app/client/ui2018/buttons';\nimport { theme } from 'app/client/ui2018/cssVars';\nimport {menuCssClass} from 'app/client/ui2018/menus';\nimport {ModalControl} from 'app/client/ui2018/modals';\nimport { Computed, dom, DomElementArg, makeTestId, Observable, styled } from 'grainjs';\nimport {IOpenController, setPopupToCreateDom} from 'popweasel';\nimport { descriptionInfoTooltip } from './tooltips';\nimport { autoGrow } from './forms';\nimport { cssInput, cssLabel, cssRenamePopup, cssTextArea } from 'app/client/ui/RenamePopupStyles';\n\nconst testId = makeTestId('test-widget-title-');\nconst t = makeT('WidgetTitle');\n\ninterface WidgetTitleOptions {\n  tableNameHidden?: boolean,\n  widgetNameHidden?: boolean,\n}\n\nexport function buildWidgetTitle(vs: ViewSectionRec, options: WidgetTitleOptions, ...args: DomElementArg[]) {\n  const title = Computed.create(null, use => use(vs.titleDef));\n  const description = Computed.create(null, use => use(vs.description));\n  return buildRenameWidget(vs, title, description, options, dom.autoDispose(title), ...args);\n}\n\nexport function buildTableName(vs: ViewSectionRec, ...args: DomElementArg[]) {\n  const title = Computed.create(null, use => use(use(vs.table).tableNameDef));\n  const description = Computed.create(null, use => use(vs.description));\n  return buildRenameWidget(vs, title, description, { widgetNameHidden: true }, dom.autoDispose(title), ...args);\n}\n\nexport function buildRenameWidget(\n  vs: ViewSectionRec,\n  title: Observable<string>,\n  description: Observable<string>,\n  options: WidgetTitleOptions,\n  ...args: DomElementArg[]) {\n  return cssTitleContainer(\n    cssTitle(\n      testId('text'),\n      dom.text(title),\n      // In case titleDef is all blank space, make it visible on hover.\n      cssTitle.cls(\"-empty\", use => !use(title)?.trim()),\n      elem => {\n        setPopupToCreateDom(elem, ctl => buildWidgetRenamePopup(ctl, vs, options), {\n          placement: 'bottom-start',\n          trigger: ['click'],\n          attach: 'body',\n          boundaries: 'viewport',\n        });\n      },\n      dom.on('click', (ev) => { ev.stopPropagation(); ev.preventDefault(); }),\n    ),\n    dom.maybe(description, () => [\n      descriptionInfoTooltip(description.get(), \"widget\")\n    ]),\n    ...args\n  );\n}\n\nfunction buildWidgetRenamePopup(ctrl: IOpenController, vs: ViewSectionRec, options: WidgetTitleOptions) {\n  const tableRec = vs.table.peek();\n  // If the table is a summary table.\n  const isSummary = Boolean(tableRec.summarySourceTable.peek());\n  // Table name, for summary table it contains also a grouping description, but it is not editable.\n  // Example: Table1 or Table1 [by B, C]\n  const tableName = [tableRec.tableNameDef.peek(), tableRec.groupDesc.peek()]\n                    .filter(p => Boolean(p?.trim())).join(' ');\n  // User input for table name.\n  const inputTableName = Observable.create(ctrl, tableName);\n  // User input for widget title.\n  const inputWidgetTitle = Observable.create(ctrl, vs.title.peek() ?? '');\n  // Placeholder for widget title:\n  // - when widget title is empty shows a default widget title (what would be shown when title is empty)\n  // - when widget title is set, shows just a text to override it.\n  const inputWidgetPlaceholder = !vs.title.peek() ? t(\"Override widget title\") : vs.defaultWidgetTitle.peek();\n\n  // User input for widget description\n  const inputWidgetDesc = Observable.create(ctrl, vs.description.peek() ?? '');\n\n  const disableSave = Computed.create(ctrl, (use) => {\n    const newTableName = use(inputTableName)?.trim() ?? '';\n    const newWidgetTitle = use(inputWidgetTitle)?.trim() ?? '';\n    const newWidgetDesc = use(inputWidgetDesc)?.trim() ?? '';\n    // Can't save when table name is empty or there wasn't any change.\n    return !newTableName || (\n      newTableName === tableName\n      && newWidgetTitle === use(vs.title)\n      && newWidgetDesc === use(vs.description)\n    );\n  });\n\n  const modalCtl = ModalControl.create(ctrl, () => ctrl.close());\n\n  const saveTableName = async () => {\n    // For summary table ignore - though we could rename primary table.\n    if (isSummary) { return; }\n    // Can't save an empty name - there are actually no good reasons why we can't have empty table name,\n    // unfortunately there are some use cases that really on the empty name:\n    // - For ACL we sometimes may check if tableId is empty (and sometimes if table name).\n    // - Pages with empty name are not visible by default (and pages are renamed with a table - if their name match).\n    if (!inputTableName.get().trim()) { return; }\n    // If value was changed.\n    if (inputTableName.get() !== tableRec.tableNameDef.peek()) {\n      await tableRec.tableNameDef.saveOnly(inputTableName.get());\n    }\n  };\n\n  const saveWidgetTitle = async () => {\n    const newTitle = inputWidgetTitle.get()?.trim() ?? '';\n    // If value was changed.\n    if (newTitle !== vs.title.peek()) {\n      await vs.title.saveOnly(newTitle);\n    }\n  };\n\n  const saveWidgetDesc = async () => {\n    const newWidgetDesc = inputWidgetDesc.get().trim() ?? '';\n    // If value was changed.\n    if (newWidgetDesc !== vs.description.peek()) {\n      await vs.description.saveOnly(newWidgetDesc);\n    }\n  };\n\n  const save = () => Promise.all([\n    saveTableName(),\n    saveWidgetTitle(),\n    saveWidgetDesc()\n  ]);\n\n  function initialFocus() {\n    const isRawView = !widgetInput;\n    const isWidgetTitleEmpty = !vs.title.peek();\n    function focus(inputEl?: HTMLInputElement) {\n      inputEl?.focus();\n      inputEl?.select();\n    }\n    if (isSummary) {\n      focus(widgetInput);\n    } else if (isRawView) {\n      focus(tableInput);\n    } else if (isWidgetTitleEmpty) {\n      focus(tableInput);\n    } else {\n      focus(widgetInput);\n    }\n  }\n\n  // When the popup is closing we will save everything, unless the user has pressed the cancel button.\n  let cancelled = false;\n\n  // Function to close the popup with saving.\n  const close = () => ctrl.close();\n\n  // Function to close the popup without saving.\n  const cancel = () => { cancelled = true; close(); };\n\n  // Function that is called when popup is closed.\n  const onClose = () => {\n    if (!cancelled) {\n      save().catch(reportError);\n    }\n  };\n\n  // User interface for the popup.\n  const myCommands = {\n    // Escape key: just close the popup.\n    cancel,\n    // Enter key: save and close the popup, unless the description input is focused.\n    // There is also a variant for Ctrl+Enter which will always save.\n    accept: () => {\n      // Enters are ignored in the description input (unless ctrl is pressed)\n      if (document.activeElement === descInput) { return true; }\n      close();\n    },\n    // ArrowUp\n    cursorUp: () => {\n      // moves focus to the widget title input if it is already at the top of widget description\n      if (document.activeElement === descInput && descInput?.selectionStart === 0) {\n        widgetInput?.focus();\n        widgetInput?.select();\n      } else if (document.activeElement === widgetInput) {\n        tableInput?.focus();\n        tableInput?.select();\n      } else {\n        return true;\n      }\n    },\n    // ArrowDown\n    cursorDown: () => {\n      if (document.activeElement === tableInput) {\n        widgetInput?.focus();\n        widgetInput?.select();\n      } else if (document.activeElement === widgetInput) {\n        descInput?.focus();\n        descInput?.select();\n      } else {\n        return true;\n      }\n    }\n  };\n\n  // Create this group and attach it to the popup and all inputs.\n  const commandGroup = commands.createGroup({ ...myCommands }, ctrl, true);\n\n  let tableInput: HTMLInputElement|undefined;\n  let widgetInput: HTMLInputElement|undefined;\n  let descInput: HTMLTextAreaElement | undefined;\n  return cssRenamePopup(\n    // Create a FocusLayer to keep focus in this popup while it's active, and prevent keyboard\n    // shortcuts from being seen by the view underneath.\n    elem => { FocusLayer.create(ctrl, { defaultFocusElem: elem, pauseMousetrap: false }); },\n    dom.onDispose(onClose),\n    dom.autoDispose(commandGroup),\n    testId('popup'),\n    dom.cls(menuCssClass),\n    dom.maybe(!options.tableNameHidden, () => [\n      cssLabel(t(\"DATA TABLE NAME\")),\n      // Update tableName on key stroke - this will show the default widget name as we type.\n      // above this modal.\n      tableInput = cssInput(\n        inputTableName,\n        updateOnKey,\n        {disabled: isSummary, placeholder: t(\"Provide a table name\")},\n        testId('table-name-input'),\n        commandGroup.attach(),\n      ),\n    ]),\n    dom.maybe(!options.widgetNameHidden, () => [\n      cssLabel(t(\"WIDGET TITLE\")),\n      widgetInput = cssInput(inputWidgetTitle, updateOnKey, {placeholder: inputWidgetPlaceholder},\n        testId('section-name-input'),\n        commandGroup.attach(),\n      ),\n    ]),\n    cssLabel(t(\"WIDGET DESCRIPTION\")),\n    descInput = cssTextArea(inputWidgetDesc, updateOnKey,\n      testId('section-description-input'),\n      commandGroup.attach(),\n      autoGrow(inputWidgetDesc),\n    ),\n    cssButtons(\n      primaryButton(t(\"Save\"),\n        dom.on('click', close),\n        dom.boolAttr('disabled', use => use(disableSave) || use(modalCtl.workInProgress)),\n        testId('save'),\n      ),\n      basicButton(t(\"Cancel\"),\n        testId('cancel'),\n        dom.on('click', cancel)\n      ),\n    ),\n    dom.onKeyDown({\n      Enter$: e => {\n        if (e.ctrlKey || e.metaKey) {\n          close();\n          return false;\n        }\n      }\n    }),\n    elem => { setTimeout(initialFocus, 0); },\n  );\n}\n\nconst updateOnKey = {onInput: true};\n\n// Leave class for tests.\nconst cssTitleContainer = styled('div', `\n  flex: 1 1 0px;\n  min-width: 0px;\n  display: flex;\n  .info_toggle_icon {\n    width: 13px;\n    height: 13px;\n  }\n`);\n\nconst cssTitle = styled('div', `\n  cursor: pointer;\n  overflow: hidden;\n  border-radius: 3px;\n  margin: -4px;\n  padding: 4px;\n  text-overflow: ellipsis;\n  align-self: start;\n  &:hover {\n    background-color: ${theme.hover};\n  }\n  &-empty {\n    min-width: 48px;\n    min-height: 23px;\n  }\n`);\n\nconst cssButtons = styled('div', `\n  display: flex;\n  margin-top: 16px;\n  & > .${cssButton.className}:not(:first-child) {\n    margin-left: 8px;\n  }\n`);\n","import {get as getBrowserGlobals} from 'app/client/lib/browserGlobals';\nimport {waitObs} from 'app/common/gutil';\nimport {Disposable, dom, DomElementArg} from 'grainjs';\nimport ko from 'knockout';\n\nexport interface Player {\n  playVideo(): void;\n  pauseVideo(): void;\n  stopVideo(): void;\n  mute(): void;\n  unMute(): void;\n  setVolume(volume: number): void;\n  getCurrentTime(): number;\n}\n\nexport interface PlayerOptions {\n  height?: string;\n  width?: string;\n  origin?: string;\n  playerVars?: PlayerVars;\n  onPlayerReady?(player: Player): void\n  onPlayerStateChange?(player: Player, event: PlayerStateChangeEvent): void;\n}\n\nexport interface PlayerVars {\n  controls?: 0 | 1;\n  disablekb?: 0 | 1;\n  fs?: 0 | 1;\n  iv_load_policy?: 1 | 3;\n  modestbranding?: 0 | 1;\n}\n\nexport interface PlayerStateChangeEvent {\n  data: PlayerState;\n}\n\nexport enum PlayerState {\n  Unstarted = -1,\n  Ended = 0,\n  Playing = 1,\n  Paused = 2,\n  Buffering = 3,\n  VideoCued = 5,\n}\n\nconst G = getBrowserGlobals('document', 'window');\n\n/**\n * Wrapper component for the YouTube IFrame Player API.\n *\n * Fetches the JavaScript code for the API if needed, and creates an iframe that\n * points to a YouTube video with the specified id.\n *\n * For more documentation, see https://developers.google.com/youtube/iframe_api_reference.\n */\nexport class YouTubePlayer extends Disposable {\n  private _domArgs: DomElementArg[];\n  private _isLoading: ko.Observable<boolean> = ko.observable(true);\n  private _playerId = `youtube-player-${this._videoId}`;\n  private _player: Player;\n\n  constructor(\n    private _videoId: string,\n    private _options: PlayerOptions,\n    ...domArgs: DomElementArg[]\n  ) {\n    super();\n\n    this._domArgs = domArgs;\n\n    if (!G.window.YT) {\n      const tag = document.createElement('script');\n\n      tag.src = 'https://www.youtube.com/iframe_api';\n      const firstScriptTag = document.getElementsByTagName('script')[0];\n      firstScriptTag?.parentNode?.insertBefore(tag, firstScriptTag);\n\n      G.window.onYouTubeIframeAPIReady = () => this._handleYouTubeIframeAPIReady();\n    } else {\n      setTimeout(() => this._handleYouTubeIframeAPIReady(), 0);\n    }\n  }\n\n  public isLoading() {\n    return this._isLoading();\n  }\n\n  public isLoaded() {\n    return waitObs(this._isLoading, (val) => !val);\n  }\n\n  public play() {\n    this._player.playVideo();\n  }\n\n  public setVolume(volume: number) {\n    this._player.setVolume(volume);\n  }\n\n  public getCurrentTime(): number {\n    return this._player.getCurrentTime();\n  }\n\n  public buildDom() {\n    return dom('div', {id: this._playerId}, ...this._domArgs);\n  }\n\n  private _handleYouTubeIframeAPIReady() {\n    const {onPlayerReady, onPlayerStateChange, playerVars, ...otherOptions} = this._options;\n    this._player = new G.window.YT.Player(this._playerId, {\n      videoId: this._videoId,\n      playerVars,\n      events: {\n        onReady: () => {\n          this._isLoading(false);\n          onPlayerReady?.(this._player);\n        },\n        onStateChange: (event: PlayerStateChangeEvent) =>\n          onPlayerStateChange?.(this._player, event),\n      },\n      ...otherOptions,\n    });\n  }\n}\n","/**\n * This module implements context menu to be shown on contextmenu event (most commonly associated\n * with right+click, but could varies slightly depending on platform, ie: mac support ctrl+click as\n * well).\n *\n * To prevent the default context menu to show everywhere else (including on the top of your custom\n * context menu) dont forget to prevent it by including below line at the root of the dom:\n *   `dom.on('contextmenu', ev => ev.preventDefault())`\n */\nimport { Disposable, dom, DomArg, DomContents, Holder } from \"grainjs\";\nimport { cssMenuElem, registerMenuOpen } from 'app/client/ui2018/menus';\nimport { IOpenController, Menu } from 'popweasel';\n\nexport type IContextMenuContentFunc = (ctx: ContextMenuController) => DomContents;\n\nclass ContextMenuController extends Disposable implements IOpenController {\n  private _content: HTMLElement;\n  constructor(private _event: MouseEvent, contentFunc: IContextMenuContentFunc) {\n    super();\n\n    setTimeout(() => this._updatePosition(), 0);\n\n    // Create content and add to the dom but keep hidden until menu gets positioned\n    const menu = Menu.create(null, this, [contentFunc(this)], {\n      menuCssClass: cssMenuElem.className + ' grist-floating-menu'\n    });\n    const content = this._content = menu.content;\n    content.style.visibility = 'hidden';\n    document.body.appendChild(content);\n\n    // Prevents arrow to move the cursor while menu is open.\n    dom.onKeyElem(content, 'keydown', {\n      ArrowLeft: (ev) => ev.stopPropagation(),\n      ArrowRight: (ev) => ev.stopPropagation()\n      // UP and DOWN are already handle by the menu to navigate the menu)\n    });\n\n    // On click anywhere on the page (outside popup content), close it.\n    const onClick = (evt: MouseEvent) => {\n      const target: Node|null = evt.target as Node;\n      if (target && !content.contains(target)) {\n        this.close();\n      }\n    };\n    this.autoDispose(dom.onElem(document, 'contextmenu', onClick, {useCapture: true}));\n    this.autoDispose(dom.onElem(document, 'click', onClick, {useCapture: true}));\n\n    // Cleanup involves removing the element.\n    this.onDispose(() => {\n      dom.domDispose(content);\n      content.remove();\n    });\n\n    registerMenuOpen(this);\n  }\n\n  public close() {\n    this.dispose();\n  }\n  public setOpenClass() {}\n\n  // IOpenController expects a trigger elem but context menu has no trigger. Let's return body for\n  // now. As of time of writing the trigger elem is only used by popweasel when certain options are\n  // enabled, ie: strectToSelector, parentSelectoToMark.\n  // TODO: make a PR on popweasel to support using Menu with no trigger element.\n  public getTriggerElem() { return document.body; }\n  public update() {}\n\n  private _updatePosition() {\n    const content = this._content;\n    const ev = this._event;\n    const rect = content.getBoundingClientRect();\n    // position menu on the right of the cursor if it can fit, on the left otherwise\n    content.style.left = ((ev.pageX + rect.width < window.innerWidth) ? ev.pageX : ev.pageX - rect.width) + 'px';\n    // position menu below the cursor if it can fit, otherwise fit at the bottom of the screen\n    content.style.bottom = Math.max(window.innerHeight - (ev.pageY + rect.height), 0) + 'px';\n    // show content\n    content.style.visibility = '';\n  }\n}\n\n/**\n * Show a context menu on contextmenu.\n */\nexport function contextMenu(contentFunc: IContextMenuContentFunc): DomArg {\n  return (elem) => {\n    const holder = Holder.create(null);\n    dom.autoDisposeElem(elem, holder);\n    dom.onElem(elem, 'contextmenu', (ev) => {\n      ev.preventDefault();\n      ev.stopPropagation();\n      ContextMenuController.create(holder, ev, contentFunc);\n    });\n  };\n}\n","/**\n * This is a temporary <input> element. The intended usage is to create is when needed (e.g. when\n * some \"rename\" option is chosen), and provide methods to save and to close.\n *\n * It calls save() on Enter and on blur, which should return a Promise. On successful save, and on\n * Escape, it calls close(), which should destroy the <input>.\n */\n\nimport {reportError} from 'app/client/models/AppModel';\nimport {theme} from 'app/client/ui2018/cssVars';\nimport {dom, DomArg, styled} from 'grainjs';\n\nexport interface ITransientInputOptions {\n  initialValue: string;\n  save(value: string): Promise<void>|any;\n  close(): void;\n}\n\nexport function transientInput({initialValue, save, close}: ITransientInputOptions,\n                               ...args: Array<DomArg<HTMLInputElement>>) {\n  let lastSave: string = initialValue;\n\n  async function onSave(explicitSave: boolean) {\n    try {\n      if (explicitSave || input.value !== lastSave) {\n        lastSave = input.value;\n        await save(input.value);\n      }\n      close();\n    } catch (err) {\n      reportError(err);\n      delayedFocus();\n    }\n  }\n\n  function delayedFocus() {\n    setTimeout(() => { input.focus(); input.select(); }, 10);\n  }\n\n  const input = cssInput({type: 'text', placeholder: 'Enter name'},\n    dom.prop('value', initialValue),\n    dom.on('blur', () => onSave(false)),\n    dom.onKeyDown({\n      Enter: () => onSave(true),\n      Escape: () => close(),\n    }),\n    ...args,\n  );\n  delayedFocus();\n  return input;\n}\n\nconst cssInput = styled('input', `\n  background-color: transparent;\n  color: ${theme.inputFg};\n\n  &::placeholder {\n    color: ${theme.inputPlaceholderFg};\n  }\n`);\n","export type IconName = \"ChartArea\" |\n  \"ChartBar\" |\n  \"ChartDonut\" |\n  \"ChartKaplan\" |\n  \"ChartLine\" |\n  \"ChartPie\" |\n  \"TypeCard\" |\n  \"TypeCardList\" |\n  \"TypeCell\" |\n  \"TypeChart\" |\n  \"TypeCustom\" |\n  \"TypeDetails\" |\n  \"TypeTable\" |\n  \"FieldAny\" |\n  \"FieldAttachment\" |\n  \"FieldCheckbox\" |\n  \"FieldChoice\" |\n  \"FieldColumn\" |\n  \"FieldDate\" |\n  \"FieldDateTime\" |\n  \"FieldFunction\" |\n  \"FieldFunctionEqual\" |\n  \"FieldInteger\" |\n  \"FieldLink\" |\n  \"FieldNumeric\" |\n  \"FieldReference\" |\n  \"FieldSpinner\" |\n  \"FieldSwitcher\" |\n  \"FieldTable\" |\n  \"FieldText\" |\n  \"FieldTextbox\" |\n  \"FieldToggle\" |\n  \"LoginStreamline\" |\n  \"LoginUnify\" |\n  \"LoginVisualize\" |\n  \"GoogleLogo\" |\n  \"GristLogo\" |\n  \"ThumbPreview\" |\n  \"AddUser\" |\n  \"ArrowLeft\" |\n  \"ArrowRight\" |\n  \"ArrowRightOutlined\" |\n  \"BarcodeQR\" |\n  \"BarcodeQR2\" |\n  \"Board\" |\n  \"Bookmark\" |\n  \"CenterAlign\" |\n  \"Chat\" |\n  \"Code\" |\n  \"Collapse\" |\n  \"Convert\" |\n  \"Copy\" |\n  \"CrossBig\" |\n  \"CrossSmall\" |\n  \"Database\" |\n  \"Dots\" |\n  \"Download\" |\n  \"DragDrop\" |\n  \"Dropdown\" |\n  \"DropdownUp\" |\n  \"Empty\" |\n  \"Exclamation\" |\n  \"Expand\" |\n  \"EyeHide\" |\n  \"EyeShow\" |\n  \"Feedback\" |\n  \"Filter\" |\n  \"FilterSimple\" |\n  \"Fireworks\" |\n  \"Flag\" |\n  \"Folder\" |\n  \"FontBold\" |\n  \"FontItalic\" |\n  \"FontStrikethrough\" |\n  \"FontUnderline\" |\n  \"FunctionResult\" |\n  \"GreenArrow\" |\n  \"Grow\" |\n  \"Heart\" |\n  \"Help\" |\n  \"Home\" |\n  \"Idea\" |\n  \"Import\" |\n  \"ImportArrow\" |\n  \"Info\" |\n  \"LeftAlign\" |\n  \"Lighting\" |\n  \"Lock\" |\n  \"Log\" |\n  \"Mail\" |\n  \"Maximize\" |\n  \"Memo\" |\n  \"Message\" |\n  \"Minimize\" |\n  \"Minus\" |\n  \"MobileChat\" |\n  \"MobileChat2\" |\n  \"NewNotification\" |\n  \"Notification\" |\n  \"Offline\" |\n  \"Page\" |\n  \"PanelLeft\" |\n  \"PanelRight\" |\n  \"Pencil\" |\n  \"PinBig\" |\n  \"PinSmall\" |\n  \"PinTilted\" |\n  \"Pivot\" |\n  \"PivotLight\" |\n  \"Plus\" |\n  \"Popup\" |\n  \"Public\" |\n  \"PublicColor\" |\n  \"PublicFilled\" |\n  \"Redo\" |\n  \"Remove\" |\n  \"RemoveBig\" |\n  \"Repl\" |\n  \"ResizePanel\" |\n  \"Revert\" |\n  \"RightAlign\" |\n  \"Robot\" |\n  \"Script\" |\n  \"Search\" |\n  \"Settings\" |\n  \"Share\" |\n  \"Sort\" |\n  \"Sparks\" |\n  \"Tick\" |\n  \"TickSolid\" |\n  \"Undo\" |\n  \"Validation\" |\n  \"Video\" |\n  \"Warning\" |\n  \"Widget\" |\n  \"Wrap\" |\n  \"Zoom\" |\n  \"UseChart\" |\n  \"UseEducate\" |\n  \"UseFinance\" |\n  \"UseHr\" |\n  \"UseMedia\" |\n  \"UseMonitor\" |\n  \"UseOther\" |\n  \"UseProduct\" |\n  \"UseSales\" |\n  \"UseScience\";\n\nexport const IconList: IconName[] = [\"ChartArea\",\n  \"ChartBar\",\n  \"ChartDonut\",\n  \"ChartKaplan\",\n  \"ChartLine\",\n  \"ChartPie\",\n  \"TypeCard\",\n  \"TypeCardList\",\n  \"TypeCell\",\n  \"TypeChart\",\n  \"TypeCustom\",\n  \"TypeDetails\",\n  \"TypeTable\",\n  \"FieldAny\",\n  \"FieldAttachment\",\n  \"FieldCheckbox\",\n  \"FieldChoice\",\n  \"FieldColumn\",\n  \"FieldDate\",\n  \"FieldDateTime\",\n  \"FieldFunction\",\n  \"FieldFunctionEqual\",\n  \"FieldInteger\",\n  \"FieldLink\",\n  \"FieldNumeric\",\n  \"FieldReference\",\n  \"FieldSpinner\",\n  \"FieldSwitcher\",\n  \"FieldTable\",\n  \"FieldText\",\n  \"FieldTextbox\",\n  \"FieldToggle\",\n  \"LoginStreamline\",\n  \"LoginUnify\",\n  \"LoginVisualize\",\n  \"GoogleLogo\",\n  \"GristLogo\",\n  \"ThumbPreview\",\n  \"AddUser\",\n  \"ArrowLeft\",\n  \"ArrowRight\",\n  \"ArrowRightOutlined\",\n  \"BarcodeQR\",\n  \"BarcodeQR2\",\n  \"Board\",\n  \"Bookmark\",\n  \"CenterAlign\",\n  \"Chat\",\n  \"Code\",\n  \"Collapse\",\n  \"Convert\",\n  \"Copy\",\n  \"CrossBig\",\n  \"CrossSmall\",\n  \"Database\",\n  \"Dots\",\n  \"Download\",\n  \"DragDrop\",\n  \"Dropdown\",\n  \"DropdownUp\",\n  \"Empty\",\n  \"Exclamation\",\n  \"Expand\",\n  \"EyeHide\",\n  \"EyeShow\",\n  \"Feedback\",\n  \"Filter\",\n  \"FilterSimple\",\n  \"Fireworks\",\n  \"Flag\",\n  \"Folder\",\n  \"FontBold\",\n  \"FontItalic\",\n  \"FontStrikethrough\",\n  \"FontUnderline\",\n  \"FunctionResult\",\n  \"GreenArrow\",\n  \"Grow\",\n  \"Heart\",\n  \"Help\",\n  \"Home\",\n  \"Idea\",\n  \"Import\",\n  \"ImportArrow\",\n  \"Info\",\n  \"LeftAlign\",\n  \"Lighting\",\n  \"Lock\",\n  \"Log\",\n  \"Mail\",\n  \"Maximize\",\n  \"Memo\",\n  \"Message\",\n  \"Minimize\",\n  \"Minus\",\n  \"MobileChat\",\n  \"MobileChat2\",\n  \"NewNotification\",\n  \"Notification\",\n  \"Offline\",\n  \"Page\",\n  \"PanelLeft\",\n  \"PanelRight\",\n  \"Pencil\",\n  \"PinBig\",\n  \"PinSmall\",\n  \"PinTilted\",\n  \"Pivot\",\n  \"PivotLight\",\n  \"Plus\",\n  \"Popup\",\n  \"Public\",\n  \"PublicColor\",\n  \"PublicFilled\",\n  \"Redo\",\n  \"Remove\",\n  \"RemoveBig\",\n  \"Repl\",\n  \"ResizePanel\",\n  \"Revert\",\n  \"RightAlign\",\n  \"Robot\",\n  \"Script\",\n  \"Search\",\n  \"Settings\",\n  \"Share\",\n  \"Sort\",\n  \"Sparks\",\n  \"Tick\",\n  \"TickSolid\",\n  \"Undo\",\n  \"Validation\",\n  \"Video\",\n  \"Warning\",\n  \"Widget\",\n  \"Wrap\",\n  \"Zoom\",\n  \"UseChart\",\n  \"UseEducate\",\n  \"UseFinance\",\n  \"UseHr\",\n  \"UseMedia\",\n  \"UseMonitor\",\n  \"UseOther\",\n  \"UseProduct\",\n  \"UseSales\",\n  \"UseScience\"];\n","/**\n * Internal and DB representation of permission bits. These may be set to on, off, or omitted.\n *\n * In DB, permission sets are represented as strings of the form '[+<bits>][-<bits>]' where <bits>\n * is a string of C,R,U,D,S characters, each appearing at most once; or the special values 'all'\n * or 'none'. Note that empty string is also valid, and corresponds to the PermissionSet {}.\n */\n// tslint:disable:no-namespace\n\nimport fromPairs = require('lodash/fromPairs');\nimport mapValues = require('lodash/mapValues');\n\n\n// A PermissionValue is the result of evaluating rules. It provides a definitive answer.\nexport type PermissionValue = \"allow\" | \"deny\";\n\n// A MixedPermissionValue is the result of evaluating rules without a record. If some rules\n// require a record, and some records may be allowed and some denied, the result is \"mixed\".\nexport type MixedPermissionValue = PermissionValue | \"mixed\";\n\n// Similar to MixedPermissionValue, but if permission for a table depend on columns and NOT on\n// rows, the result is \"mixedColumns\" rather than \"mixed\", which allows some optimizations.\nexport type TablePermissionValue = MixedPermissionValue | \"mixedColumns\";\n\n// PartialPermissionValue is only used transiently while evaluating rules without a record.\nexport type PartialPermissionValue = PermissionValue | \"allowSome\" | \"denySome\" | \"mixed\" | \"\";\n\n/**\n * Internal representation of a set of permission bits.\n */\nexport interface PermissionSet<T = PermissionValue> {\n  read: T;\n  create: T;\n  update: T;\n  delete: T;\n  schemaEdit: T;\n}\n\n// Some shorter type aliases.\nexport type PartialPermissionSet = PermissionSet<PartialPermissionValue>;\nexport type MixedPermissionSet = PermissionSet<MixedPermissionValue>;\nexport type TablePermissionSet = PermissionSet<TablePermissionValue>;\n\nconst PERMISSION_BITS: {[letter: string]: keyof PermissionSet} = {\n  R: 'read',\n  C: 'create',\n  U: 'update',\n  D: 'delete',\n  S: 'schemaEdit',\n};\n\nconst ALL_PERMISSION_BITS = \"CRUDS\";\n\nexport const ALL_PERMISSION_PROPS: Array<keyof PermissionSet> =\n  Array.from(ALL_PERMISSION_BITS, ch => PERMISSION_BITS[ch]);\n\nconst ALIASES: {[key: string]: string} = {\n  all: '+CRUDS',\n  none: '-CRUDS',\n};\nconst REVERSE_ALIASES = fromPairs(Object.entries(ALIASES).map(([alias, value]) => [value, alias]));\n\n// Comes in useful for initializing unset PermissionSets.\nexport function emptyPermissionSet(): PartialPermissionSet {\n  return {read: \"\", create: \"\", update: \"\", delete: \"\", schemaEdit: \"\"};\n}\n\n/**\n * Convert a short string representation to internal.\n */\nexport function parsePermissions(permissionsText: string): PartialPermissionSet {\n  if (ALIASES.hasOwnProperty(permissionsText)) {\n    permissionsText = ALIASES[permissionsText];\n  }\n  const pset: PartialPermissionSet = emptyPermissionSet();\n  let value: PartialPermissionValue = \"\";\n  for (const ch of permissionsText) {\n    if (ch === '+') {\n      value = \"allow\";\n    } else if (ch === '-') {\n      value = \"deny\";\n    } else if (!PERMISSION_BITS.hasOwnProperty(ch) || value === \"\") {\n      throw new Error(`Invalid permissions specification ${JSON.stringify(permissionsText)}`);\n    } else {\n      const prop = PERMISSION_BITS[ch];\n      pset[prop] = value;\n    }\n  }\n  return pset;\n}\n\n/**\n * Convert an internal representation of permission bits to a short string. Note that there should\n * be no values other then \"allow\" and \"deny\", since anything else will NOT be included.\n */\nexport function permissionSetToText(permissionSet: Partial<PartialPermissionSet>): string {\n  let add = \"\";\n  let remove = \"\";\n  for (const ch of ALL_PERMISSION_BITS) {\n    const prop: keyof PermissionSet = PERMISSION_BITS[ch];\n    const value = permissionSet[prop];\n    if (value === \"allow\") {\n      add += ch;\n    } else if (value === \"deny\") {\n      remove += ch;\n    }\n  }\n  const perm = (add ? \"+\" + add : \"\") + (remove ? \"-\" + remove : \"\");\n  return REVERSE_ALIASES[perm] || perm;\n}\n\n\n/**\n * Replace allow/deny with allowSome/denySome to indicate dependence on rows.\n */\nexport function makePartialPermissions(pset: PartialPermissionSet): PartialPermissionSet {\n  return mapValues(pset, val => (val === \"allow\" ? \"allowSome\" : (val === \"deny\" ? \"denySome\" : val)));\n}\n\n/**\n * Combine PartialPermissions. Earlier rules win. Note that allowAll|denyAll|mixed are final\n * results (further permissions can't change them), but allowSome|denySome may be changed by\n * further rules into either allowAll|denyAll or mixed.\n *\n * Note that this logic satisfies associative property: (a + b) + c == a + (b + c).\n */\nfunction combinePartialPermission(a: PartialPermissionValue, b: PartialPermissionValue): PartialPermissionValue {\n  if (!a) { return b; }\n  if (!b) { return a; }\n  // If the first is uncertain, the second may keep it unchanged, or make certain, or finalize as mixed.\n  if (a === 'allowSome') { return (b === 'allowSome' || b === 'allow') ? b : 'mixed'; }\n  if (a === 'denySome') { return (b === 'denySome' || b === 'deny') ? b : 'mixed'; }\n  // If the first is certain, it's not affected by the second.\n  return a;\n}\n\n/**\n * Combine PartialPermissionSets.\n */\nexport function mergePartialPermissions(a: PartialPermissionSet, b: PartialPermissionSet): PartialPermissionSet {\n  return mergePermissions([a, b], ([_a, _b]) => combinePartialPermission(_a, _b));\n}\n\n/**\n * Merge a list of PermissionSets by combining individual bits.\n */\nexport function mergePermissions<T, U>(psets: Array<PermissionSet<T>>, combine: (bits: T[]) => U\n): PermissionSet<U> {\n  const result: Partial<PermissionSet<U>> = {};\n  for (const prop of ALL_PERMISSION_PROPS) {\n    result[prop] = combine(psets.map(p => p[prop]));\n  }\n  return result as PermissionSet<U>;\n}\n\n/**\n * Convert a PartialPermissionSet to MixedPermissionSet by replacing any remaining uncertain bits\n * with 'denyAll'. When rules are properly combined it should never be needed because the\n * hard-coded fallback rules should finalize all bits.\n */\nexport function toMixed(pset: PartialPermissionSet): MixedPermissionSet {\n  return mergePermissions([pset], ([bit]) => (bit === 'allow' || bit === 'mixed' ? bit : 'deny'));\n}\n\n/**\n * Check if PermissionSet may only add permissions, only remove permissions, or may do either.\n * A rule that neither adds nor removes permissions is treated as mixed.\n */\nexport function summarizePermissionSet(pset: PartialPermissionSet): MixedPermissionValue {\n  let sign = '';\n  for (const key of Object.keys(pset) as Array<keyof PartialPermissionSet>) {\n    const pWithSome = pset[key];\n    // \"Some\" postfix is not significant for summarization.\n    const p = pWithSome === 'allowSome' ? 'allow' : (pWithSome === 'denySome' ? 'deny' : pWithSome);\n    if (!p || p === sign) { continue; }\n    if (!sign) {\n      sign = p;\n      continue;\n    }\n    sign = 'mixed';\n  }\n  return (sign === 'allow' || sign === 'deny') ? sign : 'mixed';\n}\n\n/**\n * Summarize whether a set of permissions are all 'allow', all 'deny', or other ('mixed').\n */\nexport function summarizePermissions(perms: MixedPermissionValue[]): MixedPermissionValue {\n  if (perms.length === 0) { return 'mixed'; }\n  const perm = perms[0];\n  return perms.some(p => p !== perm) ? 'mixed' : perm;\n}\n\n\nfunction isEmpty(permissions: PartialPermissionSet): boolean {\n  return Object.values(permissions).every(v => v === \"\");\n}\n\n\n/**\n * Divide up a PartialPermissionSet into two: one containing only the 'schemaEdit' permission bit,\n * and the other containing everything else. Empty parts will be returned as undefined, except\n * when both are empty, in which case nonSchemaEdit will be returned as an empty permission set.\n */\nexport function splitSchemaEditPermissionSet(permissions: PartialPermissionSet):\n    {schemaEdit?: PartialPermissionSet, nonSchemaEdit?: PartialPermissionSet} {\n\n  const schemaEdit = {...emptyPermissionSet(), schemaEdit: permissions.schemaEdit};\n  const nonSchemaEdit: PartialPermissionSet = {...permissions, schemaEdit: \"\"};\n  return {\n    schemaEdit: !isEmpty(schemaEdit) ? schemaEdit : undefined,\n    nonSchemaEdit: !isEmpty(nonSchemaEdit) || isEmpty(schemaEdit) ? nonSchemaEdit : undefined,\n  };\n}\n","import {parsePermissions, permissionSetToText, splitSchemaEditPermissionSet} from 'app/common/ACLPermissions';\nimport {AclRuleProblem} from 'app/common/ActiveDocAPI';\nimport {DocData} from 'app/common/DocData';\nimport {AclMatchFunc, ParsedAclFormula, RulePart, RuleSet, UserAttributeRule} from 'app/common/GranularAccessClause';\nimport {getSetMapValue, isNonNullish} from 'app/common/gutil';\nimport {MetaRowRecord} from 'app/common/TableData';\nimport {decodeObject} from 'app/plugin/objtypes';\nimport sortBy = require('lodash/sortBy');\n\nexport type ILogger = Pick<Console, 'log'|'debug'|'info'|'warn'|'error'>;\n\nconst defaultMatchFunc: AclMatchFunc = () => true;\n\nexport const SPECIAL_RULES_TABLE_ID = '*SPECIAL';\n\n// This is the hard-coded default RuleSet that's added to any user-created default rule.\nconst DEFAULT_RULE_SET: RuleSet = {\n  tableId: '*',\n  colIds: '*',\n  body: [{\n    aclFormula: \"user.Access in [EDITOR, OWNER]\",\n    matchFunc:  (input) => ['editors', 'owners'].includes(String(input.user.Access)),\n    permissions: parsePermissions('all'),\n    permissionsText: 'all',\n  }, {\n    aclFormula: \"user.Access in [VIEWER]\",\n    matchFunc:  (input) => ['viewers'].includes(String(input.user.Access)),\n    permissions: parsePermissions('+R-CUDS'),\n    permissionsText: '+R',\n  }, {\n    aclFormula: \"\",\n    matchFunc: defaultMatchFunc,\n    permissions: parsePermissions('none'),\n    permissionsText: 'none',\n  }],\n};\n\n// Check if the given resource is the special \"SchemaEdit\" resource, which only exists as a\n// frontend representation.\nexport function isSchemaEditResource(resource: {tableId: string, colIds: string}): boolean {\n  return resource.tableId === SPECIAL_RULES_TABLE_ID && resource.colIds === 'SchemaEdit';\n}\n\nconst SPECIAL_RULE_SETS: Record<string, RuleSet> = {\n  SchemaEdit: {\n    tableId: SPECIAL_RULES_TABLE_ID,\n    colIds: ['SchemaEdit'],\n    body: [{\n      aclFormula: \"user.Access in [EDITOR, OWNER]\",\n      matchFunc:  (input) => ['editors', 'owners'].includes(String(input.user.Access)),\n      permissions: parsePermissions('+S'),\n      permissionsText: '+S',\n    }, {\n      aclFormula: \"\",\n      matchFunc: defaultMatchFunc,\n      permissions: parsePermissions('-S'),\n      permissionsText: '-S',\n    }],\n  },\n  AccessRules: {\n    tableId: SPECIAL_RULES_TABLE_ID,\n    colIds: ['AccessRules'],\n    body: [{\n      aclFormula: \"user.Access in [OWNER]\",\n      matchFunc:  (input) => ['owners'].includes(String(input.user.Access)),\n      permissions: parsePermissions('+R'),\n      permissionsText: '+R',\n    }, {\n      aclFormula: \"\",\n      matchFunc: defaultMatchFunc,\n      permissions: parsePermissions('-R'),\n      permissionsText: '-R',\n    }],\n  },\n  FullCopies: {\n    tableId: SPECIAL_RULES_TABLE_ID,\n    colIds: ['FullCopies'],\n    body: [{\n      aclFormula: \"user.Access in [OWNER]\",\n      matchFunc:  (input) => ['owners'].includes(String(input.user.Access)),\n      permissions: parsePermissions('+R'),\n      permissionsText: '+R',\n    }, {\n      aclFormula: \"\",\n      matchFunc: defaultMatchFunc,\n      permissions: parsePermissions('-R'),\n      permissionsText: '-R',\n    }],\n  },\n  SeedRule: {\n    tableId: SPECIAL_RULES_TABLE_ID,\n    colIds: ['SeedRule'],\n    body: [],\n  }\n};\n\n// If the user-created rules become dysfunctional, we can swap in this emergency set.\n// It grants full access to owners, and no access to anyone else.\nconst EMERGENCY_RULE_SET: RuleSet = {\n  tableId: '*',\n  colIds: '*',\n  body: [{\n    aclFormula: \"user.Access in [OWNER]\",\n    matchFunc:  (input) => ['owners'].includes(String(input.user.Access)),\n    permissions: parsePermissions('all'),\n    permissionsText: 'all',\n  }, {\n    aclFormula: \"\",\n    matchFunc: defaultMatchFunc,\n    permissions: parsePermissions('none'),\n    permissionsText: 'none',\n  }],\n};\n\nexport class ACLRuleCollection {\n  // Store error if one occurs while reading rules.  Rules are replaced with emergency rules\n  // in this case.\n  public ruleError: Error|undefined;\n\n  // In the absence of rules, some checks are skipped. For now this is important to maintain all\n  // existing behavior. TODO should make sure checking access against default rules is equivalent\n  // and efficient.\n  private _haveRules = false;\n\n  // Map of tableId to list of column RuleSets (those with colIds other than '*')\n  // Includes also SPECIAL_RULES_TABLE_ID.\n  private _columnRuleSets = new Map<string, RuleSet[]>();\n\n  // Maps 'tableId:colId' to one of the RuleSets in the list _columnRuleSets.get(tableId).\n  private _tableColumnMap = new Map<string, RuleSet>();\n\n  // Rules for SPECIAL_RULES_TABLE_ID \"columns\".\n  private _specialRuleSets = new Map<string, RuleSet>();\n\n  // Map of tableId to the single default RuleSet for the table (colIds of '*')\n  private _tableRuleSets = new Map<string, RuleSet>();\n\n  // The default RuleSet (tableId '*', colIds '*')\n  private _defaultRuleSet: RuleSet = DEFAULT_RULE_SET;\n\n  // List of all tableIds mentioned in rules.\n  private _tableIds: string[] = [];\n\n  // Maps name to the corresponding UserAttributeRule.\n  private _userAttributeRules = new Map<string, UserAttributeRule>();\n\n  // Whether there are ANY user-defined rules.\n  public haveRules(): boolean {\n    return this._haveRules;\n  }\n\n  // Return the RuleSet for \"tableId:colId\", or undefined if there isn't one for this column.\n  public getColumnRuleSet(tableId: string, colId: string): RuleSet|undefined {\n    if (tableId === SPECIAL_RULES_TABLE_ID) { return this._specialRuleSets.get(colId); }\n    return this._tableColumnMap.get(`${tableId}:${colId}`);\n  }\n\n  // Return all RuleSets for \"tableId:<any colId>\", not including \"tableId:*\".\n  public getAllColumnRuleSets(tableId: string): RuleSet[] {\n    return this._columnRuleSets.get(tableId) || [];\n  }\n\n  // Return the RuleSet for \"tableId:*\".\n  public getTableDefaultRuleSet(tableId: string): RuleSet|undefined {\n    return this._tableRuleSets.get(tableId);\n  }\n\n  // Return the RuleSet for \"*:*\".\n  public getDocDefaultRuleSet(): RuleSet {\n    return this._defaultRuleSet;\n  }\n\n  // Return the list of all tableId mentions in ACL rules.\n  public getAllTableIds(): string[] {\n    return this._tableIds;\n  }\n\n  // Returns a Map of user attribute name to the corresponding UserAttributeRule.\n  public getUserAttributeRules(): Map<string, UserAttributeRule> {\n    return this._userAttributeRules;\n  }\n\n  /**\n   * Update granular access from DocData.\n   */\n  public async update(docData: DocData, options: ReadAclOptions) {\n    const {ruleSets, userAttributes} = this._safeReadAclRules(docData, options);\n\n    // Build a map of user characteristics rules.\n    const userAttributeMap = new Map<string, UserAttributeRule>();\n    for (const userAttr of userAttributes) {\n      userAttributeMap.set(userAttr.name, userAttr);\n    }\n\n    // Build maps of ACL rules.\n    const colRuleSets = new Map<string, RuleSet[]>();\n    const tableColMap = new Map<string, RuleSet>();\n    const tableRuleSets = new Map<string, RuleSet>();\n    const tableIds = new Set<string>();\n    let defaultRuleSet: RuleSet = DEFAULT_RULE_SET;\n\n    // Collect special rules, combining them with corresponding defaults.\n    const specialRuleSets = new Map<string, RuleSet>(Object.entries(SPECIAL_RULE_SETS));\n    for (const ruleSet of ruleSets) {\n      if (ruleSet.tableId === SPECIAL_RULES_TABLE_ID) {\n        const specialType = String(ruleSet.colIds);\n        const specialDefault = specialRuleSets.get(specialType);\n        if (!specialDefault) {\n          // Log that we are seeing an invalid rule, but don't fail.\n          // (Historically, older versions of the Grist app will attempt to\n          // open newer documents).\n          options.log.error(`Invalid rule for ${ruleSet.tableId}:${ruleSet.colIds}`);\n        } else {\n          specialRuleSets.set(specialType, {...ruleSet, body: [...ruleSet.body, ...specialDefault.body]});\n        }\n      } else if (options.pullOutSchemaEdit && ruleSet.tableId === '*' && ruleSet.colIds === '*') {\n        // If pullOutSchemaEdit is requested, we move out rules with SchemaEdit permissions from\n        // the default resource into the ficticious \"*SPECIAL:SchemaEdit\" resource. This is used\n        // in the frontend only, to present those rules in a separate section.\n        const schemaParts = ruleSet.body.map(part => splitSchemaEditRulePart(part).schemaEdit).filter(isNonNullish);\n\n        if (schemaParts.length > 0) {\n          const specialType = 'SchemaEdit';\n          const specialDefault = specialRuleSets.get(specialType)!;\n          specialRuleSets.set(specialType, {\n            tableId: SPECIAL_RULES_TABLE_ID,\n            colIds: ['SchemaEdit'],\n            body: [...schemaParts, ...specialDefault.body]\n          });\n        }\n      }\n    }\n\n    // Insert the special rule sets into colRuleSets.\n    for (const ruleSet of specialRuleSets.values()) {\n      getSetMapValue(colRuleSets, SPECIAL_RULES_TABLE_ID, () => []).push(ruleSet);\n    }\n\n    this._haveRules = (ruleSets.length > 0);\n    for (const ruleSet of ruleSets) {\n      if (ruleSet.tableId === '*') {\n        if (ruleSet.colIds === '*') {\n          // If pullOutSchemaEdit is requested, skip the SchemaEdit rules for the default resource;\n          // those got pulled out earlier into the fictitious \"*SPECIAL:SchemaEdit\" resource.\n          const body = options.pullOutSchemaEdit ?\n            ruleSet.body.map(part => splitSchemaEditRulePart(part).nonSchemaEdit).filter(isNonNullish) :\n            ruleSet.body;\n\n          defaultRuleSet = {\n            ...ruleSet,\n            body: [...body, ...DEFAULT_RULE_SET.body],\n          };\n        } else {\n          // tableId of '*' cannot list particular columns.\n          throw new Error(`Invalid rule for tableId ${ruleSet.tableId}, colIds ${ruleSet.colIds}`);\n        }\n      } else if (ruleSet.tableId === SPECIAL_RULES_TABLE_ID) {\n        // Skip, since we handled these separately earlier.\n      } else if (ruleSet.colIds === '*') {\n        tableIds.add(ruleSet.tableId);\n        if (tableRuleSets.has(ruleSet.tableId)) {\n          throw new Error(`Invalid duplicate default rule for ${ruleSet.tableId}`);\n        }\n        tableRuleSets.set(ruleSet.tableId, ruleSet);\n      } else {\n        tableIds.add(ruleSet.tableId);\n        getSetMapValue(colRuleSets, ruleSet.tableId, () => []).push(ruleSet);\n        for (const colId of ruleSet.colIds) {\n          tableColMap.set(`${ruleSet.tableId}:${colId}`, ruleSet);\n        }\n      }\n    }\n\n    // Update GranularAccess state.\n    this._columnRuleSets = colRuleSets;\n    this._tableColumnMap = tableColMap;\n    this._tableRuleSets = tableRuleSets;\n    this._defaultRuleSet = defaultRuleSet;\n    this._tableIds = [...tableIds];\n    this._userAttributeRules = userAttributeMap;\n    this._specialRuleSets = specialRuleSets;\n  }\n\n  /**\n   * Check that all references to table and column IDs in ACL rules are valid.\n   */\n  public checkDocEntities(docData: DocData) {\n    const problems = this.findRuleProblems(docData);\n    if (problems.length === 0) { return; }\n    throw new Error(problems[0].comment);\n  }\n\n  /**\n   * Enumerate rule problems caused by table and column IDs that are not valid.\n   * Problems include:\n   *   - Rules for a table that does not exist\n   *   - Rules for columns that include a column that does not exist\n   *   - User attributes links to a column that does not exist\n   */\n  public findRuleProblems(docData: DocData): AclRuleProblem[] {\n    const problems: AclRuleProblem[] = [];\n    const tablesTable = docData.getMetaTable('_grist_Tables');\n    const columnsTable = docData.getMetaTable('_grist_Tables_column');\n\n    // Collect valid tableIds and check rules against those.\n    const validTableIds = new Set(tablesTable.getColValues('tableId'));\n    const invalidTables = this.getAllTableIds().filter(t => !validTableIds.has(t));\n    if (invalidTables.length > 0) {\n      problems.push({\n        tables: {\n          tableIds: invalidTables,\n        },\n        comment: `Invalid tables in rules: ${invalidTables.join(', ')}`,\n      });\n    }\n\n    // Collect valid columns, grouped by tableRef (rowId of table record).\n    const validColumns = new Map<number, Set<string>>();   // Map from tableRef to set of colIds.\n    const colTableRefs = columnsTable.getColValues('parentId');\n    for (const [i, colId] of columnsTable.getColValues('colId').entries()) {\n      getSetMapValue(validColumns, colTableRefs[i], () => new Set()).add(colId);\n    }\n\n    // For each valid table, check that any explicitly mentioned columns are valid.\n    for (const tableId of this.getAllTableIds()) {\n      if (!validTableIds.has(tableId)) { continue; }\n      const tableRef = tablesTable.findRow('tableId', tableId);\n      const validTableCols = validColumns.get(tableRef);\n      for (const ruleSet of this.getAllColumnRuleSets(tableId)) {\n        if (Array.isArray(ruleSet.colIds)) {\n          const invalidColIds = ruleSet.colIds.filter(c => !validTableCols?.has(c));\n          if (invalidColIds.length > 0) {\n            problems.push({\n              columns: {\n                tableId,\n                colIds: invalidColIds,\n              },\n              comment: `Invalid columns in rules for table ${tableId}: ${invalidColIds.join(', ')}`,\n            });\n          }\n        }\n      }\n    }\n\n    // Check for valid tableId/lookupColId combinations in UserAttribute rules.\n    const invalidUAColumns: string[] = [];\n    const names: string[] = [];\n    for (const rule of this.getUserAttributeRules().values()) {\n      const tableRef = tablesTable.findRow('tableId', rule.tableId);\n      const colRef = columnsTable.findMatchingRowId({parentId: tableRef, colId: rule.lookupColId});\n      if (!colRef) {\n        invalidUAColumns.push(`${rule.tableId}.${rule.lookupColId}`);\n        names.push(rule.name);\n      }\n    }\n    if (invalidUAColumns.length > 0) {\n      problems.push({\n        userAttributes: {\n          invalidUAColumns,\n          names,\n        },\n        comment: `Invalid columns in User Attribute rules: ${invalidUAColumns.join(', ')}`,\n      });\n    }\n    return problems;\n  }\n\n  private _safeReadAclRules(docData: DocData, options: ReadAclOptions): ReadAclResults {\n    try {\n      this.ruleError = undefined;\n      return readAclRules(docData, options);\n    } catch (e) {\n      this.ruleError = e;  // Report the error indirectly.\n      return {ruleSets: [EMERGENCY_RULE_SET], userAttributes: []};\n    }\n  }\n}\n\nexport interface ReadAclOptions {\n  log: ILogger;     // For logging warnings during rule processing.\n  compile?: (parsed: ParsedAclFormula) => AclMatchFunc;\n  // If true, call addHelperCols to add helper columns of restricted columns to rule sets.\n  // Used in the server for extra filtering, but not in the client, because:\n  // 1. They would show in the UI\n  // 2. They would be saved back after editing, causing them to accumulate\n  includeHelperCols?: boolean;\n\n  // If true, rules with 'schemaEdit' permission are moved out of the '*:*' resource into a\n  // fictitious '*SPECIAL:SchemaEdit' resource. This is used only on the client, to present\n  // schemaEdit as a separate checkbox. Such rules are saved back to the '*:*' resource.\n  pullOutSchemaEdit?: boolean;\n}\n\nexport interface ReadAclResults {\n  ruleSets: RuleSet[];\n  userAttributes: UserAttributeRule[];\n}\n\n/**\n * For each column in colIds, return the colIds of any hidden helper columns it has,\n * i.e. display columns of references, and conditional formatting rule columns.\n */\nfunction getHelperCols(docData: DocData, tableId: string, colIds: string[], log: ILogger): string[] {\n  const tablesTable = docData.getMetaTable('_grist_Tables');\n  const columnsTable = docData.getMetaTable('_grist_Tables_column');\n  const fieldsTable = docData.getMetaTable('_grist_Views_section_field');\n\n  const tableRef = tablesTable.findRow('tableId', tableId);\n  if (!tableRef) {\n    return [];\n  }\n\n  const result: string[] = [];\n  for (const colId of colIds) {\n    const [column] = columnsTable.filterRecords({parentId: tableRef, colId});\n    if (!column) {\n      continue;\n    }\n\n    function addColsFromRefs(colRefs: unknown) {\n      if (!Array.isArray(colRefs)) {\n        return;\n      }\n      for (const colRef of colRefs) {\n        if (typeof colRef !== 'number') {\n          continue;\n        }\n        const extraCol = columnsTable.getRecord(colRef);\n        if (!extraCol) {\n          continue;\n        }\n        if (extraCol.colId.startsWith(\"gristHelper_\") && extraCol.parentId === tableRef) {\n          result.push(extraCol.colId);\n        } else {\n          log.error(`Invalid helper column ${extraCol.colId} of ${tableId}:${colId}`);\n        }\n      }\n    }\n\n    function addColsFromMetaRecord(rec: MetaRowRecord<'_grist_Tables_column' | '_grist_Views_section_field'>) {\n      addColsFromRefs([rec.displayCol]);\n      addColsFromRefs(decodeObject(rec.rules));\n    }\n\n    addColsFromMetaRecord(column);\n    for (const field of fieldsTable.filterRecords({colRef: column.id})) {\n      addColsFromMetaRecord(field);\n    }\n  }\n  return result;\n}\n\n\n/**\n * Parse all ACL rules in the document from DocData into a list of RuleSets and of\n * UserAttributeRules. This is used by both client-side code and server-side.\n */\nfunction readAclRules(docData: DocData, {log, compile, includeHelperCols}: ReadAclOptions): ReadAclResults {\n  const resourcesTable = docData.getMetaTable('_grist_ACLResources');\n  const rulesTable = docData.getMetaTable('_grist_ACLRules');\n\n  const ruleSets: RuleSet[] = [];\n  const userAttributes: UserAttributeRule[] = [];\n\n  // Group rules by resource first, ordering by rulePos. Each group will become a RuleSet.\n  const rulesByResource = new Map<number, Array<MetaRowRecord<'_grist_ACLRules'>>>();\n  for (const ruleRecord of sortBy(rulesTable.getRecords(), 'rulePos')) {\n    getSetMapValue(rulesByResource, ruleRecord.resource, () => []).push(ruleRecord);\n  }\n\n  for (const [resourceId, rules] of rulesByResource.entries()) {\n    const resourceRec = resourcesTable.getRecord(resourceId);\n    if (!resourceRec) {\n      throw new Error(`ACLRule ${rules[0].id} refers to an invalid ACLResource ${resourceId}`);\n      continue;\n    }\n    if (!resourceRec.tableId || !resourceRec.colIds) {\n      // This should only be the case for the old-style default rule/resource, which we\n      // intentionally ignore and skip.\n      continue;\n    }\n    const tableId = resourceRec.tableId;\n    const colIds = resourceRec.colIds === '*' ? '*' : resourceRec.colIds.split(',');\n\n    if (includeHelperCols && Array.isArray(colIds)) {\n      colIds.push(...getHelperCols(docData, tableId, colIds, log));\n    }\n\n    const body: RulePart[] = [];\n    for (const rule of rules) {\n      if (rule.userAttributes) {\n        if (tableId !== '*' || colIds !== '*') {\n          throw new Error(`ACLRule ${rule.id} invalid; user attributes must be on the default resource`);\n        }\n        const parsed = JSON.parse(String(rule.userAttributes));\n        // TODO: could perhaps use ts-interface-checker here.\n        if (!(parsed && typeof parsed === 'object' &&\n          [parsed.name, parsed.tableId, parsed.lookupColId, parsed.charId]\n          .every(p => p && typeof p === 'string'))) {\n          throw new Error(`User attribute rule ${rule.id} is invalid`);\n        }\n        parsed.origRecord = rule;\n        userAttributes.push(parsed as UserAttributeRule);\n      } else if (body.length > 0 && !body[body.length - 1].aclFormula) {\n        throw new Error(`ACLRule ${rule.id} invalid because listed after default rule`);\n      } else if (rule.aclFormula && !rule.aclFormulaParsed) {\n        throw new Error(`ACLRule ${rule.id} invalid because missing its parsed formula`);\n      } else {\n        const aclFormulaParsed = rule.aclFormula && JSON.parse(String(rule.aclFormulaParsed));\n        body.push({\n          origRecord: rule,\n          aclFormula: String(rule.aclFormula),\n          matchFunc: rule.aclFormula ? compile?.(aclFormulaParsed) : defaultMatchFunc,\n          memo: rule.memo,\n          permissions: parsePermissions(String(rule.permissionsText)),\n          permissionsText: String(rule.permissionsText),\n        });\n      }\n    }\n    const ruleSet: RuleSet = {tableId, colIds, body};\n    ruleSets.push(ruleSet);\n  }\n  return {ruleSets, userAttributes};\n}\n\n\n/**\n * In the UI, we present SchemaEdit rules in a separate section, even though in reality they live\n * as schemaEdit permission bits among the rules for the default resource. This function splits a\n * RulePart into two: one containing the schemaEdit permission bit, and the other containing the\n * other bits. If either part is empty, it will be returned as undefined, but if both are empty,\n * nonSchemaEdit will be included as a rule with empty permission bits.\n *\n * It's possible for both parts to be non-empty (for rules created before the updated UI), in\n * which case the schemaEdit one will have a fake origRecord, to cause it to be saved as a new\n * record when saving.\n */\nfunction splitSchemaEditRulePart(rulePart: RulePart): {schemaEdit?: RulePart, nonSchemaEdit?: RulePart} {\n  const p = splitSchemaEditPermissionSet(rulePart.permissions);\n  let schemaEdit: RulePart|undefined;\n  let nonSchemaEdit: RulePart|undefined;\n  if (p.schemaEdit) {\n    schemaEdit = {...rulePart,\n      permissions: p.schemaEdit,\n      permissionsText: permissionSetToText(p.schemaEdit),\n    };\n  }\n  if (p.nonSchemaEdit) {\n    nonSchemaEdit = {...rulePart,\n      permissions: p.nonSchemaEdit,\n      permissionsText: permissionSetToText(p.nonSchemaEdit),\n    };\n  }\n  if (schemaEdit && nonSchemaEdit) {\n    schemaEdit.origRecord = {id: -1} as MetaRowRecord<'_grist_ACLRules'>;\n  }\n  return {schemaEdit, nonSchemaEdit};\n}\n","/**\n * Basic definitions of types needed for ActionBundles.\n * See also EncActionBundle for how these are packaged for encryption.\n */\n\nimport {ApplyUAOptions} from 'app/common/ActiveDocAPI';\nimport {DocAction, UserAction} from 'app/common/DocActions';\nimport {RowCounts} from 'app/common/DocUsage';\n\n// Metadata about the action.\nexport interface ActionInfo {\n  time: number;       // Milliseconds since epoch.\n  user: string;\n  inst: string;\n  desc?: string;\n  otherId: number;\n  linkId: number;\n}\n\n// Envelope contains information about recipients. In EncActionBundle, it's augmented with\n// information about the symmetric key that encrypts this envelope's contents.\nexport interface Envelope {\n  recipients: string[];       // sorted array of recipient instanceIds\n}\n\n// EnvContent packages arbitrary content with the index of the envelope to which it belongs.\nexport type EnvContent<Content> = [number, Content];\n\n// ActionBundle contains actions arranged into envelopes, i.e. split up by sets of recipients.\n// Note that different Envelopes contain different sets of recipients (which may overlap however).\n// ActionBundle is what gets encrypted/decrypted and then sent between hub and instance.\nexport interface ActionBundle {\n  actionNum: number;\n  actionHash: string|null;        // a checksum of bundle, (not including actionHash and other parts).\n  parentActionHash: string|null;  // a checksum of the parent action bundle, if there is one.\n  envelopes: Envelope[];\n  info: EnvContent<ActionInfo>;           // Should be in the envelope addressed to all peers.\n  stored: Array<EnvContent<DocAction>>;\n  calc: Array<EnvContent<DocAction>>;\n}\n\nexport function getEnvContent<Content>(items: Array<EnvContent<Content>>): Content[] {\n  return items.map((item) => item[1]);\n}\n\n// ======================================================================\n// Types for ActionBundles used locally inside an instance.\n\n// Local action received from the browser, that is not yet applied. It is usually one UserAction,\n// but when multiple actions are sent by the browser in one call, they will form one bundle.\nexport interface UserActionBundle {\n  info: ActionInfo;\n  userActions: UserAction[];\n  options?: ApplyUAOptions;\n}\n\n// ActionBundle as received from the sandbox. It does not have some action metadata, but does have\n// undo information and a retValue for each input UserAction. Note that it is satisfied by the\n// ActionBundle structure defined in sandbox/grist/action_obj.py.\nexport interface SandboxActionBundle {\n  envelopes: Envelope[];\n  stored: Array<EnvContent<DocAction>>;\n  direct: Array<EnvContent<boolean>>;\n  calc: Array<EnvContent<DocAction>>;\n  undo: Array<EnvContent<DocAction>>;   // Inverse actions for all 'stored' actions.\n  retValues: any[];                     // Contains retValue for each of userActions.\n  rowCount: RowCounts;\n  // Mapping of keys (hashes of request args) to all unique requests made in a round of calculation\n  requests?: Record<string, SandboxRequest>;\n}\n\n// Represents a unique call to the Python REQUEST function\nexport interface SandboxRequest {\n  url: string;\n  method: string;\n  body?: string;\n  params: Record<string, string> | null;\n  headers: Record<string, string> | null;\n  deps: unknown;  // pass back to the sandbox unchanged in the response\n}\n\n// Local action that's been applied. It now has an actionNum, and includes doc actions packaged\n// into envelopes, as well as undo, and userActions, which allow rebasing.\nexport interface LocalActionBundle extends ActionBundle {\n  userActions: UserAction[];\n\n  // Inverse actions for all 'stored' actions. These aren't shared and not split by envelope.\n  // Applying 'undo' is governed by EDIT rather than READ permissions, so we always apply all undo\n  // actions. (It is the result of applying 'undo' that may be addressed to different recipients).\n  undo: DocAction[];\n}\n","import mapValues = require('lodash/mapValues');\nimport {BulkColValues, ColInfo, ColInfoWithId, ColValues, DocAction} from \"./DocActions\";\n\n// TODO this replaces modelUtil's ActionDispatcher and bulkActionExpand. Those should be removed.\n\n/**\n * Helper class which provides a `dispatchAction` method that dispatches DocActions received from\n * the server to methods `this.on{ActionType}`, e.g. `this.onUpdateRecord`.\n *\n * Implementation methods `on*` are called with the action as the first argument, and with\n * the action arguments as additional method arguments, for convenience.\n *\n * Methods for bulk actions may be implemented directly, or will iterate through each record in\n * the action, and call the single-record methods for each one.\n */\nexport abstract class ActionDispatcher {\n  public dispatchAction(action: DocAction): void {\n    // In node 6 testing, this switch is 5+ times faster than looking up \"on\"+action[0].\n    const a: any[] = action;\n    switch (action[0]) {\n      case \"AddRecord\":        return this.onAddRecord       (action, a[1], a[2], a[3]);\n      case \"UpdateRecord\":     return this.onUpdateRecord    (action, a[1], a[2], a[3]);\n      case \"RemoveRecord\":     return this.onRemoveRecord    (action, a[1], a[2]);\n      case \"BulkAddRecord\":    return this.onBulkAddRecord   (action, a[1], a[2], a[3]);\n      case \"BulkUpdateRecord\": return this.onBulkUpdateRecord(action, a[1], a[2], a[3]);\n      case \"BulkRemoveRecord\": return this.onBulkRemoveRecord(action, a[1], a[2]);\n      case \"ReplaceTableData\": return this.onReplaceTableData(action, a[1], a[2], a[3]);\n      case \"AddColumn\":        return this.onAddColumn       (action, a[1], a[2], a[3]);\n      case \"RemoveColumn\":     return this.onRemoveColumn    (action, a[1], a[2]);\n      case \"RenameColumn\":     return this.onRenameColumn    (action, a[1], a[2], a[3]);\n      case \"ModifyColumn\":     return this.onModifyColumn    (action, a[1], a[2], a[3]);\n      case \"AddTable\":         return this.onAddTable        (action, a[1], a[2]);\n      case \"RemoveTable\":      return this.onRemoveTable     (action, a[1]);\n      case \"RenameTable\":      return this.onRenameTable     (action, a[1], a[2]);\n      default: throw new Error(`Received unknown action ${action[0]}`);\n    }\n  }\n\n  protected abstract onAddRecord(action: DocAction, tableId: string, rowId: number, colValues: ColValues): void;\n  protected abstract onUpdateRecord(action: DocAction, tableId: string, rowId: number, colValues: ColValues): void;\n  protected abstract onRemoveRecord(action: DocAction, tableId: string, rowId: number): void;\n\n  // If not overridden, these will make multiple calls to single-record action methods.\n  protected onBulkAddRecord(action: DocAction, tableId: string, rowIds: number[], colValues: BulkColValues): void {\n    for (let i = 0; i < rowIds.length; i++) {\n      this.onAddRecord(action, tableId, rowIds[i], mapValues(colValues, (values) => values[i]));\n    }\n  }\n  protected onBulkUpdateRecord(action: DocAction, tableId: string, rowIds: number[], colValues: BulkColValues): void {\n    for (let i = 0; i < rowIds.length; i++) {\n      this.onUpdateRecord(action, tableId, rowIds[i], mapValues(colValues, (values) => values[i]));\n    }\n  }\n  protected onBulkRemoveRecord(action: DocAction, tableId: string, rowIds: number[]) {\n    for (const r of rowIds) {\n      this.onRemoveRecord(action, tableId, r);\n    }\n  }\n\n  protected abstract onReplaceTableData(\n    action: DocAction, tableId: string, rowIds: number[], colValues: BulkColValues): void;\n\n  protected abstract onAddColumn(action: DocAction, tableId: string, colId: string, colInfo: ColInfo): void;\n  protected abstract onRemoveColumn(action: DocAction, tableId: string, colId: string): void;\n  protected abstract onRenameColumn(action: DocAction, tableId: string, oldColId: string, newColId: string): void;\n  protected abstract onModifyColumn(action: DocAction, tableId: string, colId: string, colInfo: ColInfo): void;\n\n  protected abstract onAddTable(action: DocAction, tableId: string, columns: ColInfoWithId[]): void;\n  protected abstract onRemoveTable(action: DocAction, tableId: string): void;\n  protected abstract onRenameTable(action: DocAction, oldTableId: string, newTableId: string): void;\n}\n","import {getEnvContent, LocalActionBundle} from 'app/common/ActionBundle';\nimport {ActionSummary, ColumnDelta, createEmptyActionSummary,\n        createEmptyTableDelta, defunctTableName, LabelDelta, TableDelta} from 'app/common/ActionSummary';\nimport {DocAction} from 'app/common/DocActions';\nimport * as Action from 'app/common/DocActions';\nimport {arrayExtend} from 'app/common/gutil';\nimport {CellDelta} from 'app/common/TabularDiff';\nimport fromPairs = require('lodash/fromPairs');\nimport keyBy = require('lodash/keyBy');\nimport sortBy = require('lodash/sortBy');\nimport toPairs = require('lodash/toPairs');\nimport values = require('lodash/values');\n\n/**\n * The default maximum number of rows in a single bulk change that will be recorded\n * individually.  Bulk changes that touch more than this number of rows\n * will be summarized only by the number of rows touched.\n */\nconst MAXIMUM_INLINE_ROWS = 10;\n\n/**\n * Options when producing an action summary.\n */\nexport interface ActionSummaryOptions {\n  maximumInlineRows?: number;       // Overrides the maximum number of rows in a\n                                    // single bulk change that will be recorded individually.\n  alwaysPreserveColIds?: string[];  // If set, all cells in these columns are preserved\n                                    // regardless of maximumInlineRows setting.\n}\n\nclass ActionSummarizer {\n\n  constructor(private _options?: ActionSummaryOptions) {}\n\n  /** add information about an action based on the forward direction */\n  public addForwardAction(summary: ActionSummary, act: DocAction) {\n    const tableId = act[1];\n    if (Action.isAddTable(act)) {\n      summary.tableRenames.push([null, tableId]);\n      for (const info of act[2]) {\n        this._forTable(summary, tableId).columnRenames.push([null, info.id]);\n      }\n    } else if (Action.isRenameTable(act)) {\n      this._addRename(summary.tableRenames, [tableId, act[2]]);\n    } else if (Action.isRenameColumn(act)) {\n      this._addRename(this._forTable(summary, tableId).columnRenames, [act[2], act[3]]);\n    } else if (Action.isAddColumn(act)) {\n      this._forTable(summary, tableId).columnRenames.push([null, act[2]]);\n    } else if (Action.isRemoveColumn(act)) {\n      this._forTable(summary, tableId).columnRenames.push([act[2], null]);\n    } else if (Action.isAddRecord(act)) {\n      const td = this._forTable(summary, tableId);\n      td.addRows.push(act[2]);\n      this._addRow(td, act[2], act[3], 1);\n    } else if (Action.isUpdateRecord(act)) {\n      const td = this._forTable(summary, tableId);\n      td.updateRows.push(act[2]);\n      this._addRow(td, act[2], act[3], 1);\n    } else if (Action.isBulkAddRecord(act)) {\n      const td = this._forTable(summary, tableId);\n      arrayExtend(td.addRows, act[2]);\n      this._addRows(tableId, td, act[2], act[3], 1);\n    } else if (Action.isBulkUpdateRecord(act)) {\n      const td = this._forTable(summary, tableId);\n      arrayExtend(td.updateRows, act[2]);\n      this._addRows(tableId, td, act[2], act[3], 1);\n    } else if (Action.isReplaceTableData(act)) {\n      const td = this._forTable(summary, tableId);\n      arrayExtend(td.addRows, act[2]);\n      this._addRows(tableId, td, act[2], act[3], 1);\n    }\n  }\n\n  /** add information about an action based on undo information */\n  public addReverseAction(summary: ActionSummary, act: DocAction) {\n    const tableId = act[1];\n    if (Action.isAddTable(act)) { // undoing, so this is a table removal\n      summary.tableRenames.push([tableId, null]);\n      for (const info of act[2]) {\n        this._forTable(summary, tableId).columnRenames.push([info.id, null]);\n      }\n    } else if (Action.isAddRecord(act)) { // undoing, so this is a record removal\n      const td = this._forTable(summary, tableId);\n      td.removeRows.push(act[2]);\n      this._addRow(td, act[2], act[3], 0);\n    } else if (Action.isUpdateRecord(act)) { // undoing, so this is reversal of a record update\n      const td = this._forTable(summary, tableId);\n      this._addRow(td, act[2], act[3], 0);\n    } else if (Action.isBulkAddRecord(act)) { // undoing, this may be reversing a table delete\n      const td = this._forTable(summary, tableId);\n      arrayExtend(td.removeRows, act[2]);\n      this._addRows(tableId, td, act[2], act[3], 0);\n    } else if (Action.isBulkUpdateRecord(act)) { // undoing, so this is reversal of a bulk record update\n      const td = this._forTable(summary, tableId);\n      arrayExtend(td.updateRows, act[2]);\n      this._addRows(tableId, td, act[2], act[3], 0);\n    } else if (Action.isRenameTable(act)) { // undoing - sometimes renames only in undo info\n      this._addRename(summary.tableRenames, [act[2], tableId]);\n    } else if (Action.isRenameColumn(act)) { // undoing - sometimes renames only in undo info\n      this._addRename(this._forTable(summary, tableId).columnRenames, [act[3], act[2]]);\n    } else if (Action.isReplaceTableData(act)) { // undoing\n      const td = this._forTable(summary, tableId);\n      arrayExtend(td.removeRows, act[2]);\n      this._addRows(tableId, td, act[2], act[3], 0);\n    }\n  }\n\n  /** helper function to access summary changes for a specific table by name */\n  private _forTable(summary: ActionSummary, tableId: string): TableDelta {\n    return summary.tableDeltas[tableId] || (summary.tableDeltas[tableId] = createEmptyTableDelta());\n  }\n\n  /** helper function to access summary changes for a specific cell by rowId and colId */\n  private _forCell(td: TableDelta, rowId: number, colId: string): CellDelta {\n    const cd = td.columnDeltas[colId] || (td.columnDeltas[colId] = {});\n    return cd[rowId] || (cd[rowId] = [null, null]);\n  }\n\n  /**\n   * helper function to store detailed cell changes for a single row.\n   * Direction parameter is 0 if values are prior values of cells, 1 if values are new values.\n   */\n  private _addRow(td: TableDelta, rowId: number, colValues: Action.ColValues,\n                direction: 0|1) {\n    for (const [colId, colChanges] of toPairs(colValues)) {\n      const cell = this._forCell(td, rowId, colId);\n      cell[direction] = [colChanges];\n    }\n  }\n\n  /** helper function to store detailed cell changes for a set of rows */\n  private _addRows(tableId: string, td: TableDelta, rowIds: number[],\n                 colValues: Action.BulkColValues, direction: 0|1) {\n    const maximumInlineRows = this._options?.maximumInlineRows || MAXIMUM_INLINE_ROWS;\n    const limitRows: boolean = rowIds.length > maximumInlineRows && !tableId.startsWith(\"_grist_\");\n    let selectedRows: Array<[number, number]> = [];\n    if (limitRows) {\n      // if many rows, just take some from start and one from end as examples\n      selectedRows = [...rowIds.slice(0, maximumInlineRows - 1).entries()];\n      selectedRows.push([rowIds.length - 1, rowIds[rowIds.length - 1]]);\n    }\n\n    const alwaysPreserveColIds = new Set(this._options?.alwaysPreserveColIds || []);\n    for (const [colId, colChanges] of toPairs(colValues)) {\n      const addCellToSummary = (rowId: number, idx: number) => {\n        const cell = this._forCell(td, rowId, colId);\n        cell[direction] = [colChanges[idx]];\n      };\n      if (!limitRows || alwaysPreserveColIds.has(colId)) {\n        rowIds.forEach(addCellToSummary);\n      } else {\n        selectedRows.forEach(([idx, rowId]) => addCellToSummary(rowId, idx));\n      }\n    }\n  }\n\n  /** add a rename to a list, avoiding duplicates */\n  private _addRename(renames: LabelDelta[], rename: LabelDelta) {\n    if (renames.find(r => r[0] === rename[0] && r[1] === rename[1])) { return; }\n    renames.push(rename);\n  }\n}\n\n/**\n * Summarize the tabular changes that a LocalActionBundle results in, in a form\n * that will be suitable for composition.\n */\nexport function summarizeAction(body: LocalActionBundle, options?: ActionSummaryOptions): ActionSummary {\n  return summarizeStoredAndUndo(getEnvContent(body.stored), body.undo, options);\n}\n\nexport function summarizeStoredAndUndo(stored: DocAction[], undo: DocAction[],\n                                       options?: ActionSummaryOptions): ActionSummary {\n  const summarizer = new ActionSummarizer(options);\n  const summary = createEmptyActionSummary();\n  for (const act of stored) {\n    summarizer.addForwardAction(summary, act);\n  }\n  for (const act of Array.from(undo).reverse()) {\n    summarizer.addReverseAction(summary, act);\n  }\n  // Name tables consistently, by their ultimate name, now we know it.\n  for (const renames of summary.tableRenames) {\n    const pre = renames[0];\n    let post = renames[1];\n    if (pre === null) { continue; }\n    if (post === null) { post = defunctTableName(pre); }\n    if (summary.tableDeltas[pre]) {\n      summary.tableDeltas[post] = summary.tableDeltas[pre];\n      delete summary.tableDeltas[pre];\n    }\n  }\n  for (const td of values(summary.tableDeltas)) {\n    // Name columns consistently, by their ultimate name, now we know it.\n    for (const renames of td.columnRenames) {\n      const pre = renames[0];\n      let post = renames[1];\n      if (pre === null) { continue; }\n      if (post === null) { post = defunctTableName(pre); }\n      if (td.columnDeltas[pre]) {\n        td.columnDeltas[post] = td.columnDeltas[pre];\n        delete td.columnDeltas[pre];\n      }\n    }\n    // remove any duplicates that crept in\n    td.addRows = Array.from(new Set(td.addRows));\n    td.updateRows = Array.from(new Set(td.updateRows));\n    td.removeRows = Array.from(new Set(td.removeRows));\n  }\n  return summary;\n}\n\n/**\n * Once we can produce an ActionSummary for each LocalActionBundle, it is useful to be able\n * to compose them.  Take the case of an ActionSummary pair, part 1 and part 2.  NameMerge\n * is an internal structure to help merging table/column name changes across two parts.\n */\ninterface NameMerge {\n  dead1: Set<string>;  /** anything of this name in part 1 should be removed from merge */\n  dead2: Set<string>;  /** anything of this name in part 2 should be removed from merge */\n  rename1: Map<string, string>;  /** replace these names in part 1 */\n  rename2: Map<string, string>;  /** replace these names in part 2 */\n  merge: LabelDelta[]; /** a merged list of adds/removes/renames for the result */\n}\n\n/**\n * Looks at a pair of name change lists (could be tables or columns) and figures out what\n * changes would need to be made to a data structure keyed on those names in order to key\n * it consistently on final names.\n */\nfunction planNameMerge(names1: LabelDelta[], names2: LabelDelta[]): NameMerge {\n  const result: NameMerge = {\n    dead1: new Set(),\n    dead2: new Set(),\n    rename1: new Map<string, string>(),\n    rename2: new Map<string, string>(),\n    merge: new Array<LabelDelta>(),\n  };\n  const names1ByFinalName: {[name: string]: LabelDelta} = keyBy(names1, p => p[1]!);\n  const names2ByInitialName: {[name: string]: LabelDelta} = keyBy(names2, p => p[0]!);\n  for (const [before1, after1] of names1) {\n    if (!after1) {\n      if (!before1) { throw new Error(\"invalid name change found\"); }\n      // Table/column was deleted in part 1.\n      result.dead1.add(before1);\n      result.merge.push([before1, null]);\n      continue;\n    }\n    // At this point, we know the table/column existed at end of part 1.\n    const pair2 = names2ByInitialName[after1];\n    if (!pair2) {\n      // Table/column's name was stable in part 2, so only change was in part 1.\n      result.merge.push([before1, after1]);\n      continue;\n    }\n    const after2 = pair2[1];\n    if (!after2) {\n      // Table/column was deleted in part 2.\n      result.dead2.add(after1);\n      if (before1) {\n        // Table/column existed prior to part 1, so we need to expose its history.\n        result.dead1.add(before1);\n        result.merge.push([before1, null]);\n      } else {\n        // Table/column did not exist prior to part 1, so we erase it from history.\n        result.dead1.add(after1);\n        result.dead2.add(defunctTableName(after1));\n      }\n      continue;\n    }\n    // It we made it this far, our table/column exists after part 2.  Any information\n    // keyed to its name in part 1 will need to be rekeyed to its final name.\n    result.rename1.set(after1, after2);\n    result.merge.push([before1, after2]);\n  }\n  // Look through part 2 for any changes not already covered.\n  for (const [before2, after2] of names2) {\n    if (!before2 && !after2) { throw new Error(\"invalid name change found\"); }\n    if (before2 && names1ByFinalName[before2]) { continue; }  // Already handled\n    result.merge.push([before2, after2]);\n    // If table/column is renamed in part 2, and name was stable in part 1,\n    // rekey any information about it in part 1.\n    if (before2 && after2) { result.rename1.set(before2, after2); }\n  }\n  // For neatness, sort the merge order. Not essential.\n  result.merge = sortBy(result.merge, ([a, b]) => [a || \"\", b || \"\"]);\n  return result;\n}\n\n/**\n * Re-key nested data to match name changes / removals.  Needs to be done a little carefully\n * since it is perfectly possible for names to be swapped or shuffled.\n *\n * Entries may be TableDeltas in the case of table renames or ColumnDeltas for column renames.\n *\n * @param entries: a dictionary of nested data - TableDeltas for tables, ColumnDeltas for columns.\n * @param dead: a set of keys to remove from the dictionary.\n * @param rename: changes of names to apply to the dictionary.\n */\nfunction renameAndDelete<T>(entries: {[name: string]: T}, dead: Set<string>,\n                            rename: Map<string, string>) {\n  // Remove all entries marked as dead.\n  for (const key of dead) { delete entries[key]; }\n  // Move all entries that are going to be renamed out to a cache temporarily.\n  const cache: {[name: string]: any} = {};\n  for (const key of rename.keys()) {\n    if (entries[key]) {\n      cache[key] = entries[key];\n      delete entries[key];\n    }\n  }\n  // Move all renamed entries back in with their new names.\n  for (const [key, val] of rename.entries()) { if (cache[key]) { entries[val] = cache[key]; } }\n}\n\n/**\n * Apply planned name changes to a pair of entries, and return a merged entry incorporating\n * their composition.\n *\n * @param names: the planned name changes as calculated by planNameMerge()\n * @param entries1: the first dictionary of nested data keyed on the names\n * @param entries2: test second dictionary of nested data keyed on the names\n * @param mergeEntry: a function to apply any further corrections needed to the entries\n *\n */\nfunction mergeNames<T>(names: NameMerge,\n                       entries1: {[name: string]: T},\n                       entries2: {[name: string]: T},\n                       mergeEntry: (e1: T, e2: T) => T): {[name: string]: T} {\n  // Update the keys of the entries1 and entries2 dictionaries to be consistent.\n  renameAndDelete(entries1, names.dead1, names.rename1);\n  renameAndDelete(entries2, names.dead2, names.rename2);\n\n  // Prepare the composition of the two dictionaries.\n  const entries = entries2;                   // Start with the second dictionary.\n  for (const key of Object.keys(entries1)) {  // Add material from the first.\n    const e1 = entries1[key];\n    if (!entries[key]) { entries[key] = e1;  continue; }  // No overlap - just add and move on.\n    entries[key] = mergeEntry(e1, entries[key]);          // Recursive merge if overlap.\n  }\n  return entries;\n}\n\n/**\n * Track whether a specific row was added, removed or updated.\n */\ninterface RowChange {\n  added: boolean;\n  removed: boolean;\n  updated: boolean;\n}\n\n/** RowChange for each row in a table */\nexport interface RowChanges {\n  [rowId: number]: RowChange;\n}\n\n\n/**\n * This is used when we hit a cell that we know has changed but don't know its\n * value due to it being part of a bulk input.  This produces a cell that\n * represents the unknowns.\n */\nfunction bulkCellFor(rc: RowChange|undefined): CellDelta|undefined {\n  if (!rc) { return undefined; }\n  const result: CellDelta = [null, null];\n  if (rc.removed || rc.updated) { result[0] = '?'; }\n  if (rc.added || rc.updated) { result[1] = '?'; }\n  return result;\n}\n\n/**\n * Merge changes that apply to a particular column.\n *\n * @param present1: affected rows in part 1\n * @param present2: affected rows in part 2\n * @param e1: cached cell values for the column in part 1\n * @param e2: cached cell values for the column in part 2\n */\nfunction mergeColumn(present1: RowChanges, present2: RowChanges,\n                     e1: ColumnDelta, e2: ColumnDelta): ColumnDelta {\n  for (const key of (Object.keys(present1) as unknown as number[])) {\n    let v1 = e1[key];\n    let v2 = e2[key];\n    if (!v1 && !v2) { continue; }\n    v1 = v1 || bulkCellFor(present1[key]);\n    v2 = v2 || bulkCellFor(present2[key]);\n    if (!v2)    { e2[key] = e1[key]; continue; }\n    if (!v1[1]) { continue; }  // Deleted row.\n    e2[key] = [v1[0], v2[1]];  // Change is from initial value in e1 to final value in e2.\n  }\n  return e2;\n}\n\n\n/** Put list of numbers in ascending order, with duplicates removed. */\nfunction uniqueAndSorted(lst: number[]) {\n  return [...new Set(lst)].sort((a, b) => a - b);\n}\n\n/** For each row changed, figure out whether it was added/removed/updated */\n/** TODO: need for this method suggests maybe a better core representation for this info */\nfunction getRowChanges(e: TableDelta): RowChanges {\n  const all = new Set([...e.addRows, ...e.removeRows, ...e.updateRows]);\n  const added = new Set(e.addRows);\n  const removed = new Set(e.removeRows);\n  const updated = new Set(e.updateRows);\n  return fromPairs([...all].map(x => {\n    return [x, {added: added.has(x),\n                removed: removed.has(x),\n                updated: updated.has(x)}] as [number, RowChange];\n  }));\n}\n\n/**\n * Merge changes that apply to a particular table.  For updating addRows and removeRows, care is\n * needed, since it is fine to remove and add the same rowId within a single summary -- this is just\n * rowId reuse.  It needs to be tracked so we know lifetime of rows though.\n */\nfunction mergeTable(e1: TableDelta,  e2: TableDelta): TableDelta {\n  // First, sort out any changes to names of columns.\n  const names = planNameMerge(e1.columnRenames, e2.columnRenames);\n  mergeNames(names, e1.columnDeltas, e2.columnDeltas,\n             mergeColumn.bind(null,\n                              getRowChanges(e1),\n                              getRowChanges(e2)));\n  e2.columnRenames = names.merge;\n  // All the columnar data is now merged.  What remains is to merge the summary lists of rowIds\n  // that we maintain.\n  const addRows1 = new Set(e1.addRows);       // Non-transient rows we have clearly added.\n  const removeRows2 = new Set(e2.removeRows); // Non-transient rows we have clearly removed.\n  const transients = e1.addRows.filter(x => removeRows2.has(x));\n  e2.addRows = uniqueAndSorted([...e2.addRows, ...e1.addRows.filter(x => !removeRows2.has(x))]);\n  e2.removeRows = uniqueAndSorted([...e2.removeRows.filter(x => !addRows1.has(x)), ...e1.removeRows]);\n  e2.updateRows = uniqueAndSorted([...e1.updateRows.filter(x => !removeRows2.has(x)),\n                                   ...e2.updateRows.filter(x => !addRows1.has(x))]);\n  // Remove all traces of transients (rows that were created and destroyed) from history.\n  for (const cols of values(e2.columnDeltas)) {\n    for (const key of transients) { delete cols[key]; }\n  }\n  return e2;\n}\n\n/** Finally, merge a pair of summaries. */\nexport function concatenateSummaryPair(sum1: ActionSummary, sum2: ActionSummary): ActionSummary {\n  const names = planNameMerge(sum1.tableRenames, sum2.tableRenames);\n  const rowChanges = mergeNames(names, sum1.tableDeltas, sum2.tableDeltas, mergeTable);\n  const sum: ActionSummary = {\n    tableRenames: names.merge,\n    tableDeltas: rowChanges\n  };\n  return sum;\n}\n\n/** Generalize to merging a list of summaries. */\nexport function concatenateSummaries(sums: ActionSummary[]): ActionSummary {\n  if (sums.length === 0) { return createEmptyActionSummary(); }\n  let result = sums[0];\n  for (let i = 1; i < sums.length; i++) {\n    result = concatenateSummaryPair(result, sums[i]);\n  }\n  return result;\n}\n","import {ActionGroup} from 'app/common/ActionGroup';\nimport {BulkAddRecord, CellValue, TableDataAction, UserAction} from 'app/common/DocActions';\nimport {FormulaProperties} from 'app/common/GranularAccessClause';\nimport {FetchUrlOptions, UploadResult} from 'app/common/uploads';\nimport {DocStateComparison, PermissionData, UserAccessData} from 'app/common/UserAPI';\nimport {ParseOptions} from 'app/plugin/FileParserAPI';\nimport {AccessTokenOptions, AccessTokenResult, UIRowId} from 'app/plugin/GristAPI';\nimport {IMessage} from 'grain-rpc';\n\nexport interface ApplyUAOptions {\n  desc?: string;      // Overrides the description of the action.\n  otherId?: number;   // For undo/redo; the actionNum of the original action to which it applies.\n  linkId?: number;    // For bundled actions, actionNum of the previous action in the bundle.\n  parseStrings?: boolean;  // If true, parses string values in some actions based on the column\n}\n\nexport interface ApplyUAExtendedOptions extends ApplyUAOptions {\n  bestEffort?: boolean; // If set, action may be applied in part if it cannot be applied completely.\n  fromOwnHistory?: boolean; // If set, action is confirmed to be a redo/undo taken from history, from\n                            // an action marked as being by the current user.\n  oldestSource?: number;  // If set, gives the timestamp of the oldest source the undo/redo\n                          // action was built from, expressed as number of milliseconds\n                          // elapsed since January 1, 1970 00:00:00 UTC\n  attachment?: boolean;   // If set, allow actions on attachments.\n}\n\nexport interface ApplyUAResult {\n  actionNum: number;      // number of the action that got recorded.\n  retValues: any[];       // array of return values, one for each of the passed-in user actions.\n  isModification: boolean; // true if document was modified.\n}\n\nexport interface DataSourceTransformed {\n  // Identifies the upload, which may include multiple files.\n  uploadId: number;\n\n  // For each file in the upload, the transform rules for that file.\n  transforms: TransformRuleMap[];\n}\n\nexport interface TransformRuleMap {\n  [origTableName: string]: TransformRule;\n}\n\n// Special values for import destinations; null means \"new table\", \"\" means skip table.\n// Both special options exposed as consts.\nexport const NEW_TABLE = null;\nexport const SKIP_TABLE = \"\";\nexport type DestId = string | typeof NEW_TABLE | typeof SKIP_TABLE;\n\n/**\n * How to import data into an existing table or a new one.\n */\nexport interface TransformRule {\n  /**\n   * The destination table for the transformed data. If null, the data is imported into a new table.\n   */\n  destTableId: DestId;\n  /**\n   * The list of columns to update (existing or new columns).\n   */\n  destCols: TransformColumn[];\n  /**\n   * The list of columns to read from the source table (just the headers name).\n   */\n  sourceCols: string[];\n}\n\n/**\n * Existing or new column to update. It is created based on the temporary table that was imported.\n */\nexport interface TransformColumn {\n  /**\n   * Label of the column to update. For new table it is the same name as the source column.\n   */\n  label: string;\n  /**\n   * Column id to update (null for a new table).\n   */\n  colId: string|null;\n  /**\n   * Type of the column (important for new columns).\n   */\n  type: string;\n  /**\n   * Formula to apply to the target column.\n   */\n  formula: string;\n  /**\n   * Widget options when we need to create a column (copied from the source).\n   */\n  widgetOptions: string;\n}\n\nexport interface ImportResult {\n  options: ParseOptions;\n  tables: ImportTableResult[];\n}\n\nexport interface ImportTableResult {\n  hiddenTableId: string;\n  uploadFileIndex: number;      // Index into upload.files array, for the file responsible for this table.\n  origTableName: string;\n  transformSectionRef: number;\n  destTableId: string|null;\n}\n\nexport interface ImportOptions {\n  parseOptions?: ParseOptions;         // Options for parsing the source file.\n  mergeOptionMaps?: MergeOptionsMap[]; // Options for merging fields, indexed by uploadFileIndex.\n}\n\nexport interface MergeOptionsMap {\n  // Map of original GristTable name of imported table to its merge options, if any.\n  [origTableName: string]: MergeOptions|undefined;\n}\n\nexport interface MergeOptions {\n  mergeCols: string[];          // Columns to use as merge keys for incremental imports.\n  mergeStrategy: MergeStrategy; // Determines how matched records should be merged between 2 tables.\n}\n\nexport interface MergeStrategy {\n  type: 'replace-with-nonblank-source' | 'replace-all-fields' | 'replace-blank-fields-only';\n}\n\n/**\n * Represents a query for Grist data. The tableId is required. An empty set of filters indicates\n * the full table. Examples:\n *    {tableId: \"Projects\", filters: {}}\n *    {tableId: \"Employees\", filters: {Status: [\"Active\"], Dept: [\"Sales\", \"HR\"]}}\n */\ninterface BaseQuery {\n  tableId: string;\n  filters: QueryFilters;\n}\n\n/**\n * Query that can only be used on the client side.\n * Allows filtering with more complex operations.\n */\nexport interface ClientQuery extends BaseQuery {\n  operations: {\n    [colId: string]: QueryOperation;\n  };\n}\n\nexport type FilterColValues = Pick<ClientQuery, \"filters\" | \"operations\">;\n\n/**\n * Query intended to be sent to a server.\n */\nexport interface ServerQuery extends BaseQuery {\n  // Queries to server for onDemand tables will set a limit to avoid bringing down the browser.\n  limit?: number;\n}\n\n/**\n * Type of the filters option to queries.\n */\nexport interface QueryFilters {\n  // TODO: check if \"any\" can be replaced with \"CellValue\".\n  [colId: string]: any[];\n}\n\n// - in: value should be contained in filters array\n// - intersects: value should be a list with some overlap with filters array\n// - empty: value should be falsy (e.g. null) or an empty list, filters is ignored\nexport type QueryOperation = \"in\" | \"intersects\" | \"empty\";\n\n/**\n * Results of fetching a table. Includes the table data you would\n * expect. May now also include attachment metadata referred to in the table\n * data. Attachment data is expressed as a BulkAddRecord, since it is\n * not a complete table, just selected rows. Attachment data is\n * currently included in fetches when (1) granular access control is\n * in effect, and (2) the user is neither an owner nor someone with\n * read access to the entire document, and (3) there is an attachment\n * column in the fetched table. This is exactly what the standard\n * Grist client needs, but in future it might be desirable to give\n * more control over this behavior.\n */\nexport interface TableFetchResult {\n  tableData: TableDataAction;\n  attachments?: BulkAddRecord;\n}\n\n/**\n * Response from useQuerySet(). A query returns data AND creates a subscription to receive\n * DocActions that affect this data. The querySubId field identifies this subscription, and must\n * be used in a disposeQuerySet() call to unsubscribe.\n */\nexport interface QueryResult extends TableFetchResult {\n  querySubId: number;     // ID of the subscription, to use with disposeQuerySet.\n}\n\n/**\n * Result of a fork operation, with newly minted ids.\n * For a document with docId XXXXX and urlId UUUUU, the fork will have a\n * docId of XXXXX~FORKID[~USERID] and a urlId of UUUUU~FORKID[~USERID].\n */\nexport interface ForkResult {\n  forkId: string;\n  docId: string;\n  urlId: string;\n}\n\n/**\n * An extension of PermissionData to cover not just users with whom a document is shared,\n * but also users mentioned in the document (in user attribute tables), and suggested\n * example users. This is for use in the \"View As\" feature of the access rules page.\n */\nexport interface PermissionDataWithExtraUsers extends PermissionData {\n  attributeTableUsers: UserAccessData[];\n  exampleUsers: UserAccessData[];\n}\n\n/**\n * Basic metadata about a table returned by `getAclResources()`.\n */\nexport interface AclTableDescription {\n  title: string;  // Raw data widget title\n  colIds: string[];  // IDs of all columns in table\n  groupByColLabels: string[] | null;  // Labels of groupby columns for summary tables, or null.\n}\n\nexport interface AclResources {\n  tables: {[tableId: string]: AclTableDescription};\n  problems: AclRuleProblem[];\n}\n\nexport interface AclRuleProblem {\n  tables?: {\n    tableIds: string[],\n  };\n  columns?: {\n    tableId: string,\n    colIds: string[],\n  };\n  userAttributes?: {\n    invalidUAColumns: string[],\n    names: string[],\n  }\n  comment: string;\n}\n\nexport function getTableTitle(table: AclTableDescription): string {\n  let {title} = table;\n  if (table.groupByColLabels) {\n    title += ' ' + summaryGroupByDescription(table.groupByColLabels);\n  }\n  return title;\n}\n\nexport function summaryGroupByDescription(groupByColumnLabels: string[]): string {\n  return `[${groupByColumnLabels.length ? 'by ' + groupByColumnLabels.join(\", \") : \"Totals\"}]`;\n}\n\n//// Types for autocomplete suggestions\n\n// Suggestion may be a string, or a tuple [funcname, argSpec, isGrist], where:\n//  - funcname (e.g. \"DATEADD\") will be auto-completed with \"(\", AND linked to Grist\n//    documentation.\n//  - argSpec (e.g. \"(start_date, days=0, ...)\") is to be shown as autocomplete caption.\n//  - isGrist is no longer used\ntype ISuggestion = string | [string, string, boolean];\n\n// Suggestion paired with an optional example value to show on the right\nexport type ISuggestionWithValue = [ISuggestion, string | null];\n\nexport interface ActiveDocAPI {\n  /**\n   * Closes a document, and unsubscribes from its userAction events.\n   */\n  closeDoc(): Promise<void>;\n\n  /**\n   * Fetches a particular table from the data engine to return to the client.\n   */\n  fetchTable(tableId: string): Promise<TableFetchResult>;\n\n  /**\n   * Fetches the generated Python code for this document. (TODO rename this misnomer.)\n   */\n  fetchTableSchema(): Promise<string>;\n\n  /**\n   * Makes a query (documented elsewhere) and subscribes to it, so that the client receives\n   * docActions that affect this query's results. The subscription remains functional even when\n   * tables or columns get renamed.\n   */\n  useQuerySet(query: ServerQuery): Promise<QueryResult>;\n\n  /**\n   * Removes the subscription to a Query, identified by QueryResult.querySubId, so that the\n   * client stops receiving docActions relevant only to that query.\n   */\n  disposeQuerySet(querySubId: number): Promise<void>;\n\n  /**\n   * Applies an array of user actions to the document.\n   */\n  applyUserActions(actions: UserAction[], options?: ApplyUAOptions): Promise<ApplyUAResult>;\n\n  /**\n   * A variant of applyUserActions where actions are passed in by ids (actionNum, actionHash)\n   * rather than by value.\n   */\n  applyUserActionsById(actionNums: number[], actionHashes: string[],\n                       undo: boolean, options?: ApplyUAOptions): Promise<ApplyUAResult>;\n\n  /**\n   * Imports files, removes previously created temporary hidden tables and creates the new ones.\n   */\n  importFiles(dataSource: DataSourceTransformed,\n              parseOptions: ParseOptions, prevTableIds: string[]): Promise<ImportResult>;\n\n  /**\n   * Finishes import files, creates the new tables, and cleans up temporary hidden tables and uploads.\n   */\n  finishImportFiles(dataSource: DataSourceTransformed, prevTableIds: string[],\n                    options: ImportOptions): Promise<ImportResult>;\n\n  /**\n   * Cancels import files, cleans up temporary hidden tables and uploads.\n   */\n  cancelImportFiles(uploadId: number, prevTableIds: string[]): Promise<void>;\n\n  /**\n   * Returns a diff of changes that will be applied to the destination table from `transformRule`\n   * if the data from `hiddenTableId` is imported with the specified `mergeOptions`.\n   */\n   generateImportDiff(hiddenTableId: string, transformRule: TransformRule,\n                      mergeOptions: MergeOptions): Promise<DocStateComparison>;\n\n  /**\n   * Saves attachments from a given upload and creates an entry for them in the database. It\n   * returns the list of rowIds for the rows created in the _grist_Attachments table.\n   */\n  addAttachments(uploadId: number): Promise<number[]>;\n\n  /**\n   * Returns up to n columns in the document, or a specific table, which contain the given values.\n   * Columns are returned ordered from best to worst based on an estimate for number of matches.\n   */\n  findColFromValues(values: any[], n: number, optTableId?: string): Promise<number[]>;\n\n  /**\n   * Returns cell value with an error message (traceback) for one invalid formula cell.\n   */\n  getFormulaError(tableId: string, colId: string, rowId: number): Promise<CellValue>;\n\n  /**\n   * Fetch content at a url.\n   */\n  fetchURL(url: string, options?: FetchUrlOptions): Promise<UploadResult>;\n\n  /**\n   * Find and return a list of auto-complete suggestions that start with `txt`, when editing a\n   * formula in table `tableId` and column `columnId`.\n   */\n  autocomplete(txt: string, tableId: string, columnId: string, rowId: UIRowId): Promise<ISuggestionWithValue[]>;\n\n  /**\n   * Removes the current instance from the doc.\n   */\n  removeInstanceFromDoc(): Promise<void>;\n\n  /**\n   * Get recent actions in ActionGroup format with summaries included.\n   */\n  getActionSummaries(): Promise<ActionGroup[]>;\n\n  /**\n   *  Initiates user actions bandling for undo.\n   */\n  startBundleUserActions(): Promise<void>;\n\n  /**\n   *  Stopes user actions bandling for undo.\n   */\n  stopBundleUserActions(): Promise<void>;\n\n  /**\n   * Forward a grain-rpc message to a given plugin.\n   */\n  forwardPluginRpc(pluginId: string, msg: IMessage): Promise<any>;\n\n  /**\n   * Reload documents plugins.\n   */\n  reloadPlugins(): Promise<void>;\n\n  /**\n   * Immediately close the document and data engine, to be reloaded from scratch, and cause all\n   * browser clients to reopen it.\n   */\n  reloadDoc(): Promise<void>;\n\n  /**\n   * Prepare a fork of the document, and return the id(s) of the fork.\n   */\n  fork(): Promise<ForkResult>;\n\n  /**\n   * Check if an ACL formula is valid. If not, will throw an error with an explanation.\n   */\n  checkAclFormula(text: string): Promise<FormulaProperties>;\n\n  /**\n   * Get a token for out-of-band access to the document.\n   */\n  getAccessToken(options: AccessTokenOptions): Promise<AccessTokenResult>;\n\n  /**\n   * Returns the full set of tableIds, with the list of colIds for each table. This is intended\n   * for editing ACLs. It is only available to users who can edit ACLs, and lists all resources\n   * regardless of rules that may block access to them.\n   */\n  getAclResources(): Promise<AclResources>;\n\n  /**\n   * Wait for document to finish initializing.\n   */\n  waitForInitialization(): Promise<void>;\n\n  /**\n   * Get users that are worth proposing to \"View As\" for access control purposes.\n   */\n  getUsersForViewAs(): Promise<PermissionDataWithExtraUsers>;\n}\n","import { BulkColValues, ColValues, DocAction, isSchemaAction,\n         TableDataAction, UserAction } from 'app/common/DocActions';\n\nconst ACTION_TYPES = new Set([\n  'AddRecord', 'BulkAddRecord', 'UpdateRecord', 'BulkUpdateRecord',\n  'RemoveRecord', 'BulkRemoveRecord'\n]);\n\n/**\n * The result of processing a UserAction.\n */\nexport interface ProcessedAction {\n  stored: DocAction[];\n  undo: DocAction[];\n  retValues: any;\n}\n\n/**\n * A minimal interface for interpreting UserActions in the context of\n * some current state. We need to know the next free rowId for each\n * table, and also the current state of cells. This interface was\n * abstracted from the initial implementation of on-demand tables.\n */\nexport interface AlternateStorage {\n  getNextRowId(tableId: string): Promise<number>;\n  fetchActionData(tableId: string, rowIds: number[],\n                  colIds?: string[]): Promise<TableDataAction>;\n}\n\n/**\n * Handle converting UserActions to DocActions for tables stored\n * in some way that is not handled by the regular data engine.\n */\nexport class AlternateActions {\n\n  constructor(private _storage: AlternateStorage) {}\n\n  /**\n   * This may be overridden to allow mixing two different storage mechanisms.\n   * The implementation of on-demand tables does this.\n   */\n  public usesAlternateStorage(tableId: string): boolean {\n    return true;\n  }\n\n  /**\n   * Convert a UserAction into stored and undo DocActions as well as return values.\n   */\n  public processUserAction(action: UserAction): Promise<ProcessedAction> {\n    const a = action.map(item => item as any);\n    switch (a[0]) {\n      case \"ApplyUndoActions\": return this._doApplyUndoActions(a[1]);\n      case \"AddRecord\":        return this._doAddRecord       (a[1], a[2], a[3]);\n      case \"BulkAddRecord\":    return this._doBulkAddRecord   (a[1], a[2], a[3]);\n      case \"UpdateRecord\":     return this._doUpdateRecord    (a[1], a[2], a[3]);\n      case \"BulkUpdateRecord\": return this._doBulkUpdateRecord(a[1], a[2], a[3]);\n      case \"RemoveRecord\":     return this._doRemoveRecord    (a[1], a[2]);\n      case \"BulkRemoveRecord\": return this._doBulkRemoveRecord(a[1], a[2]);\n      default: throw new Error(`Received unknown action ${action[0]}`);\n    }\n  }\n\n  /**\n   * Splits an array of UserActions into two separate arrays of normal and onDemand actions.\n   */\n  public splitByStorage(actions: UserAction[]): [UserAction[], UserAction[]] {\n    const normal: UserAction[] = [];\n    const onDemand: UserAction[] = [];\n    actions.forEach(a => {\n      // Check that the actionType can be applied without the sandbox and also that the action\n      // is on a data table.\n      const isOnDemandAction = ACTION_TYPES.has(a[0] as string);\n      const isDataTableAction = typeof a[1] === 'string' && !a[1].startsWith('_grist_');\n      if (a[0] === 'ApplyUndoActions') {\n        // Split actions inside the undo action array.\n        const [undoNormal, undoOnDemand] = this.splitByStorage(a[1] as UserAction[]);\n        if (undoNormal.length > 0) {\n          normal.push(['ApplyUndoActions', undoNormal]);\n        }\n        if (undoOnDemand.length > 0) {\n          onDemand.push(['ApplyUndoActions', undoOnDemand]);\n        }\n      } else if (isDataTableAction && isOnDemandAction && this.usesAlternateStorage(a[1] as string)) {\n        // Check whether the tableId belongs to an onDemand table.\n        onDemand.push(a);\n      } else {\n        normal.push(a);\n      }\n    });\n    return [normal, onDemand];\n  }\n\n  /**\n   * Check if an action represents a schema change on an onDemand table.\n   */\n  public isSchemaAction(docAction: DocAction): boolean {\n   return isSchemaAction(docAction) && this.usesAlternateStorage(docAction[1]);\n  }\n\n  private async _doApplyUndoActions(actions: DocAction[]) {\n    const undo: DocAction[] = [];\n    for (const a of actions) {\n      const converted = await this.processUserAction(a);\n      undo.concat(converted.undo);\n    }\n    return {\n      stored: actions,\n      undo,\n      retValues: null\n    };\n  }\n\n  private async _doAddRecord(\n    tableId: string,\n    rowId: number|null,\n    colValues: ColValues\n  ): Promise<ProcessedAction> {\n    if (rowId === null) {\n      rowId = await this._storage.getNextRowId(tableId);\n    }\n    // Set the manualSort to be the same as the rowId. This forces new rows to always be added\n    // at the end of the table.\n    colValues.manualSort = rowId;\n    return {\n      stored: [['AddRecord', tableId, rowId, colValues]],\n      undo: [['RemoveRecord', tableId, rowId]],\n      retValues: rowId\n    };\n  }\n\n  private async _doBulkAddRecord(\n    tableId: string,\n    rowIds: Array<number|null>,\n    colValues: BulkColValues\n  ): Promise<ProcessedAction> {\n\n    // When unset, we will set the rowId values to count up from the greatest\n    // values already in the table.\n    if (rowIds[0] === null) {\n      const nextRowId = await this._storage.getNextRowId(tableId);\n      for (let i = 0; i < rowIds.length; i++) {\n        rowIds[i] = nextRowId + i;\n      }\n    }\n    // Set the manualSort values to be the same as the rowIds. This forces new rows to always be\n    // added at the end of the table.\n    colValues.manualSort = rowIds;\n    return {\n      stored: [['BulkAddRecord', tableId, rowIds as number[], colValues]],\n      undo: [['BulkRemoveRecord', tableId, rowIds as number[]]],\n      retValues: rowIds\n    };\n  }\n\n  private async _doUpdateRecord(\n    tableId: string,\n    rowId: number,\n    colValues: ColValues\n  ): Promise<ProcessedAction> {\n    const [, , oldRowIds, oldColValues] =\n      await this._storage.fetchActionData(tableId, [rowId], Object.keys(colValues));\n    return {\n      stored: [['UpdateRecord', tableId, rowId, colValues]],\n      undo: [['BulkUpdateRecord', tableId, oldRowIds, oldColValues]],\n      retValues: null\n    };\n  }\n\n  private async _doBulkUpdateRecord(\n    tableId: string,\n    rowIds: number[],\n    colValues: BulkColValues\n  ): Promise<ProcessedAction> {\n    const [, , oldRowIds, oldColValues] =\n      await this._storage.fetchActionData(tableId, rowIds, Object.keys(colValues));\n    return {\n      stored: [['BulkUpdateRecord', tableId, rowIds, colValues]],\n      undo: [['BulkUpdateRecord', tableId, oldRowIds, oldColValues]],\n      retValues: null\n    };\n  }\n\n  private async _doRemoveRecord(tableId: string, rowId: number): Promise<ProcessedAction> {\n    const [, , oldRowIds, oldColValues] = await this._storage.fetchActionData(tableId, [rowId]);\n    return {\n      stored: [['RemoveRecord', tableId, rowId]],\n      undo: [['BulkAddRecord', tableId, oldRowIds, oldColValues]],\n      retValues: null\n    };\n  }\n\n  private async _doBulkRemoveRecord(tableId: string, rowIds: number[]): Promise<ProcessedAction> {\n    const [, , oldRowIds, oldColValues] = await this._storage.fetchActionData(tableId, rowIds);\n    return {\n      stored: [['BulkRemoveRecord', tableId, rowIds]],\n      undo: [['BulkAddRecord', tableId, oldRowIds, oldColValues]],\n      retValues: null\n    };\n  }\n}\n","/**\n * This mirrors action definitions from sandbox/grist/actions.py\n */\n\n// Some definitions have moved to be part of plugin API.\nimport { BulkColValues, CellValue, RowRecord } from 'app/plugin/GristData';\nexport type { BulkColValues, CellValue, RowRecord };\n\n// Part of a special CellValue used for comparisons, embedding several versions of a CellValue.\nexport interface AllCellVersions {\n  parent: CellValue;\n  remote: CellValue;\n  local: CellValue;\n}\nexport type CellVersions = Partial<AllCellVersions>;\n\nexport type AddRecord = ['AddRecord', string, number, ColValues];\nexport type BulkAddRecord = ['BulkAddRecord', string, number[], BulkColValues];\nexport type RemoveRecord = ['RemoveRecord', string, number];\nexport type BulkRemoveRecord = ['BulkRemoveRecord', string, number[]];\nexport type UpdateRecord = ['UpdateRecord', string, number, ColValues];\nexport type BulkUpdateRecord = ['BulkUpdateRecord', string, number[], BulkColValues];\n\nexport type ReplaceTableData = ['ReplaceTableData', string, number[], BulkColValues];\n\n// This is the format in which data comes when we fetch a table from the sandbox.\nexport type TableDataAction = ['TableData', string, number[], BulkColValues];\n\nexport type AddColumn = ['AddColumn', string, string, ColInfo];\nexport type RemoveColumn = ['RemoveColumn', string, string];\nexport type RenameColumn = ['RenameColumn', string, string, string];\nexport type ModifyColumn = ['ModifyColumn', string, string, Partial<ColInfo>];\n\nexport type AddTable = ['AddTable', string, ColInfoWithId[]];\nexport type RemoveTable = ['RemoveTable', string];\nexport type RenameTable = ['RenameTable', string, string];\n\nexport type DocAction = (\n  AddRecord |\n  BulkAddRecord |\n  RemoveRecord |\n  BulkRemoveRecord |\n  UpdateRecord |\n  BulkUpdateRecord |\n  ReplaceTableData |\n  TableDataAction |\n  AddColumn |\n  RemoveColumn |\n  RenameColumn |\n  ModifyColumn |\n  AddTable |\n  RemoveTable |\n  RenameTable\n);\n\n// type guards for convenience - see:\n//   https://www.typescriptlang.org/docs/handbook/advanced-types.html#user-defined-type-guards\nexport function isAddRecord(act: DocAction): act is AddRecord { return act[0] === 'AddRecord'; }\nexport function isBulkAddRecord(act: DocAction): act is BulkAddRecord { return act[0] === 'BulkAddRecord'; }\nexport function isRemoveRecord(act: DocAction): act is RemoveRecord { return act[0] === 'RemoveRecord'; }\nexport function isBulkRemoveRecord(act: DocAction): act is BulkRemoveRecord { return act[0] === 'BulkRemoveRecord'; }\nexport function isUpdateRecord(act: DocAction): act is UpdateRecord { return act[0] === 'UpdateRecord'; }\nexport function isBulkUpdateRecord(act: DocAction): act is BulkUpdateRecord { return act[0] === 'BulkUpdateRecord'; }\n\nexport function isReplaceTableData(act: DocAction): act is ReplaceTableData { return act[0] === 'ReplaceTableData'; }\n\nexport function isAddColumn(act: DocAction): act is AddColumn { return act[0] === 'AddColumn'; }\nexport function isRemoveColumn(act: DocAction): act is RemoveColumn { return act[0] === 'RemoveColumn'; }\nexport function isRenameColumn(act: DocAction): act is RenameColumn { return act[0] === 'RenameColumn'; }\nexport function isModifyColumn(act: DocAction): act is ModifyColumn { return act[0] === 'ModifyColumn'; }\n\nexport function isAddTable(act: DocAction): act is AddTable { return act[0] === 'AddTable'; }\nexport function isRemoveTable(act: DocAction): act is RemoveTable { return act[0] === 'RemoveTable'; }\nexport function isRenameTable(act: DocAction): act is RenameTable { return act[0] === 'RenameTable'; }\n\n\nconst SCHEMA_ACTIONS = new Set(['AddTable', 'RemoveTable', 'RenameTable', 'AddColumn',\n  'RemoveColumn', 'RenameColumn', 'ModifyColumn']);\n\nconst DATA_ACTIONS = new Set(['AddRecord', 'RemoveRecord', 'UpdateRecord', 'BulkAddRecord',\n  'BulkRemoveRecord', 'BulkUpdateRecord', 'ReplaceTableData', 'TableData']);\n\n/**\n * Determines whether a given action is a schema action or not.\n */\nexport function isSchemaAction(action: DocAction):\n    action is AddTable | RemoveTable | RenameTable | AddColumn | RemoveColumn | RenameColumn | ModifyColumn {\n  return SCHEMA_ACTIONS.has(action[0]);\n}\n\nexport function isDataAction(action: DocAction|UserAction):\n    action is AddRecord | RemoveRecord | UpdateRecord |\n              BulkAddRecord | BulkRemoveRecord | BulkUpdateRecord |\n              ReplaceTableData | TableDataAction {\n  return DATA_ACTIONS.has(String(action[0]));\n}\n\n/**\n * Returns the tableId from the action.\n */\nexport function getTableId(action: DocAction): string {\n  return action[1];   // It happens to always be in the same position in the action tuple.\n}\n\nexport interface TableDataActionSet {\n  [tableId: string]: TableDataAction;\n}\n\n// Helper types used in the definitions above.\n\nexport interface ColValues { [colId: string]: CellValue; }\nexport interface ColInfoMap { [colId: string]: ColInfo; }\n\nexport interface ColInfo {\n  type: string;\n  isFormula: boolean;\n  formula: string;\n}\n\nexport interface ColInfoWithId extends ColInfo {\n  id: string;\n}\n\n// Multiple records in column-oriented format, i.e. same as BulkColValues but with a mandatory\n// 'id' column. This is preferred over TableDataAction in external APIs.\nexport interface TableColValues {\n  id: number[];\n  [colId: string]: CellValue[];\n}\n\n// Multiple records in record-oriented format\nexport interface TableRecordValues {\n  records: TableRecordValue[];\n}\n\nexport interface TableRecordValue {\n  id: number | string;\n  fields: {\n    [colId: string]: CellValue\n  };\n}\n\n// Both UserActions and DocActions are represented as [ActionName, ...actionArgs].\n// TODO I think it's better to represent DocAction as a Buffer containing the marshalled action.\n\nexport type UserAction = Array<string|number|object|boolean|null|undefined>;\n\n// Actions that trigger formula calculations in the data engine\nexport const CALCULATING_USER_ACTIONS = new Set(['Calculate', 'UpdateCurrentTime', 'RespondToRequests']);\n\nexport function getNumRows(action: DocAction): number {\n  return !isDataAction(action) ? 0\n    : Array.isArray(action[2]) ? action[2].length\n    : 1;\n}\n\n// Convert from TableColValues (used by DocStorage and external APIs) to TableDataAction (used\n// mainly by the sandbox).\nexport function toTableDataAction(tableId: string, colValues: TableColValues): TableDataAction {\n  const colData = {...colValues};   // Make a copy to avoid changing passed-in arguments.\n  const rowIds: number[] = colData.id;\n  delete (colData as BulkColValues).id;\n  return ['TableData', tableId, rowIds, colData];\n}\n\n// Convert from TableDataAction (used mainly by the sandbox) to TableColValues (used by DocStorage\n// and external APIs).\n// Also accepts a TableDataAction nested as a tableData member of a larger structure,\n// for convenience in dealing with the result of fetches.\nexport function fromTableDataAction(tableData: TableDataAction|{tableData: TableDataAction}): TableColValues {\n  const data = ('tableData' in tableData) ? tableData.tableData : tableData;\n  const rowIds: number[] = data[2];\n  const colValues: BulkColValues = data[3];\n  return {id: rowIds, ...colValues};\n}\n\n/**\n * Convert a list of rows into an object with columns of values, used for\n * BulkAddRecord/BulkUpdateRecord actions.\n */\nexport function getColValues(records: Partial<RowRecord>[]): BulkColValues {\n  const colIdSet = new Set<string>();\n  for (const r of records) {\n    for (const c of Object.keys(r)) {\n      if (c !== 'id') {\n        colIdSet.add(c);\n      }\n    }\n  }\n  const result: BulkColValues = {};\n  for (const colId of colIdSet) {\n    result[colId] = records.map(r => r[colId]!);\n  }\n  return result;\n}\n\n/**\n * Extract the col ids mentioned in a record-related DocAction as a list\n * (even if the action is not a bulk action). Returns undefined if no col ids\n * mentioned.\n */\nexport function getColIdsFromDocAction(docActions: RemoveRecord | BulkRemoveRecord | AddRecord |\n  BulkAddRecord | UpdateRecord | BulkUpdateRecord | ReplaceTableData |\n  TableDataAction): string[] | undefined {\n  if (docActions[3]) { return Object.keys(docActions[3]); }\n  return undefined;\n}\n\n/**\n * Extract column values for a particular column as CellValue[] from a\n * record-related DocAction. Undefined if absent.\n */\nexport function getColValuesFromDocAction(docAction: RemoveRecord | BulkRemoveRecord | AddRecord |\n  BulkAddRecord | UpdateRecord | BulkUpdateRecord | ReplaceTableData |\n  TableDataAction, colId: string): CellValue[]|undefined {\n  const colValues = docAction[3];\n  if (!colValues) { return undefined; }\n  const cellValues = colValues[colId];\n  if (!cellValues) { return undefined; }\n  if (Array.isArray(docAction[2])) {\n    return cellValues as CellValue[];\n  } else {\n    return [cellValues as CellValue];\n  }\n}\n","/**\n * DocData maintains all underlying data for a Grist document, knows how to load it,\n * subscribes to actions which change it, and forwards those actions to individual tables.\n * It also provides the interface to apply actions to data.\n */\nimport {DocumentSettings} from 'app/common/DocumentSettings';\nimport {safeJsonParse} from 'app/common/gutil';\nimport {schema, SchemaTypes} from 'app/common/schema';\nimport fromPairs = require('lodash/fromPairs');\nimport groupBy = require('lodash/groupBy');\nimport {ActionDispatcher} from './ActionDispatcher';\nimport {TableFetchResult} from './ActiveDocAPI';\nimport {\n  BulkColValues, ColInfo, ColInfoWithId, ColValues, DocAction,\n  RowRecord, TableDataAction\n} from './DocActions';\nimport {ColTypeMap, MetaRowRecord, MetaTableData, TableData} from './TableData';\n\ntype FetchTableFunc = (tableId: string) => Promise<TableFetchResult>;\n\nexport class DocData extends ActionDispatcher {\n  private _tables: Map<string, TableData> = new Map();\n\n  private _fetchTableFunc: (tableId: string) => Promise<TableDataAction>;\n\n  /**\n   * If metaTableData is not supplied, then any tables needed should be loaded manually,\n   * using syncTable(). All column types will be set to Any, which will affect default\n   * values.\n   */\n  constructor(fetchTableFunc: FetchTableFunc, metaTableData: {[tableId: string]: TableDataAction} | null) {\n    super();\n    // Wrap fetchTableFunc slightly to handle any extra attachment data that\n    // may come along for the ride.\n    this._fetchTableFunc = async (tableId: string) => {\n      const {tableData, attachments} = await fetchTableFunc(tableId);\n      if (attachments) {\n        // Back-end doesn't keep track of which attachments we already have,\n        // so there may be duplicates of rows we already have - but happily\n        // BulkAddRecord overwrites duplicates now.\n        this.receiveAction(attachments);\n      }\n      return tableData;\n    };\n    if (metaTableData === null) { return; }\n    // Create all meta tables, and populate data we already have.\n    for (const tableId in schema) {\n      if (schema.hasOwnProperty(tableId)) {\n        const colTypes: ColTypeMap = (schema as any)[tableId];\n        this._tables.set(tableId, this.createTableData(tableId, metaTableData[tableId], colTypes));\n      }\n    }\n\n    // Build a map from tableRef to [columnRecords]\n    const colsByTable = groupBy(this._tables.get('_grist_Tables_column')!.getRecords(), 'parentId');\n    for (const t of this._tables.get('_grist_Tables')!.getRecords()) {\n      const tableId = t.tableId as string;\n      const colRecords: RowRecord[] = colsByTable[t.id] || [];\n      const colTypes = fromPairs(colRecords.map(c => [c.colId, c.type]));\n      this._tables.set(tableId, this.createTableData(tableId, null, colTypes));\n    }\n  }\n\n  /**\n   * Creates a new TableData object. A derived class may override to return an object derived from TableData.\n   */\n  public createTableData(tableId: string, tableData: TableDataAction|null, colTypes: ColTypeMap): TableData {\n    return new (tableId in schema ? MetaTableData : TableData)(tableId, tableData, colTypes);\n  }\n\n  /**\n   * Returns the TableData object for the requested table.\n   */\n  public getTable(tableId: string): TableData|undefined {\n    return this._tables.get(tableId);\n  }\n\n  public async requireTable(tableId: string): Promise<TableData> {\n    await this.fetchTable(tableId);\n    const td = this._tables.get(tableId);\n    if (!td) {\n      throw new Error(`could not fetch table: ${tableId}`);\n    }\n    return td;\n  }\n\n  /**\n   * Like getTable, but the result knows about the types of its records\n   */\n  public getMetaTable<TableId extends keyof SchemaTypes>(tableId: TableId): MetaTableData<TableId> {\n    return this.getTable(tableId) as any;\n  }\n\n  /**\n   * Returns an unsorted list of all tableIds in this doc, including both metadata and user tables.\n   */\n  public getTables(): ReadonlyMap<string, TableData> {\n    return this._tables;\n  }\n\n  /**\n   * Fetches the data for tableId if needed, and returns a promise that is fulfilled when the data\n   * is loaded.\n   */\n  public fetchTable(tableId: string, force?: boolean): Promise<void> {\n    const table = this._tables.get(tableId);\n    if (!table) { throw new Error(`DocData.fetchTable: unknown table ${tableId}`); }\n    return (!table.isLoaded || force) ? table.fetchData(this._fetchTableFunc) : Promise.resolve();\n  }\n\n  /**\n   * Fetches the data for tableId unconditionally, and without knowledge of its metadata.\n   * Columns will be assumed to have type 'Any'.\n   */\n  public async syncTable(tableId: string): Promise<void> {\n    const tableData = await this._fetchTableFunc(tableId);\n    const colTypes = fromPairs(Object.keys(tableData[3]).map(c => [c, 'Any']));\n    colTypes.id = 'Any';\n    this._tables.set(tableId, this.createTableData(tableId, tableData, colTypes));\n  }\n\n  /**\n   * Handles an action received from the server, by forwarding it to the appropriate TableData\n   * object.\n   */\n  public receiveAction(action: DocAction): void {\n    // Look up TableData before processing the action in case we rename or remove it.\n    const tableId: string = action[1];\n    const table = this._tables.get(tableId);\n\n    this.dispatchAction(action);\n\n    // Forward all actions to per-table TableData objects.\n    if (table) {\n      table.receiveAction(action);\n    }\n  }\n\n  public docInfo(): MetaRowRecord<'_grist_DocInfo'> {\n    const docInfoTable = this.getMetaTable('_grist_DocInfo');\n    return docInfoTable.getRecord(1)!;\n  }\n\n  public docSettings(): DocumentSettings {\n    return safeJsonParse(this.docInfo().documentSettings, {});\n  }\n\n  // ---- The following methods implement ActionDispatcher interface ----\n\n  protected onAddTable(action: DocAction, tableId: string, columns: ColInfoWithId[]): void {\n    const colTypes = fromPairs(columns.map(c => [c.id, c.type]));\n    this._tables.set(tableId, this.createTableData(tableId, null, colTypes));\n  }\n\n  protected onRemoveTable(action: DocAction, tableId: string): void {\n    this._tables.delete(tableId);\n  }\n\n  protected onRenameTable(action: DocAction, oldTableId: string, newTableId: string): void {\n    const table = this._tables.get(oldTableId);\n    if (table) {\n      this._tables.set(newTableId, table);\n      this._tables.delete(oldTableId);\n    }\n  }\n\n  // tslint:disable:no-empty\n  protected onAddRecord(action: DocAction, tableId: string, rowId: number, colValues: ColValues): void {}\n  protected onUpdateRecord(action: DocAction, tableId: string, rowId: number, colValues: ColValues): void {}\n  protected onRemoveRecord(action: DocAction, tableId: string, rowId: number): void {}\n\n  protected onBulkAddRecord(action: DocAction, tableId: string, rowIds: number[], colValues: BulkColValues): void {}\n  protected onBulkUpdateRecord(action: DocAction, tableId: string, rowIds: number[], colValues: BulkColValues): void {}\n  protected onBulkRemoveRecord(action: DocAction, tableId: string, rowIds: number[]) {}\n\n  protected onReplaceTableData(action: DocAction, tableId: string, rowIds: number[], colValues: BulkColValues): void {}\n\n  protected onAddColumn(action: DocAction, tableId: string, colId: string, colInfo: ColInfo): void {}\n  protected onRemoveColumn(action: DocAction, tableId: string, colId: string): void {}\n  protected onRenameColumn(action: DocAction, tableId: string, oldColId: string, newColId: string): void {}\n  protected onModifyColumn(action: DocAction, tableId: string, colId: string, colInfo: ColInfo): void {}\n}\n","import { AlternateActions, AlternateStorage, ProcessedAction} from 'app/common/AlternateActions';\nimport { DocAction, UserAction } from 'app/common/DocActions';\nimport { DocData } from 'app/common/DocData';\nimport max from 'lodash/max';\n\n/**\n * An implementation of an in-memory storage that can handle UserActions,\n * generating DocActions and retValues that work as for regular storage.\n * It shares an implementation with on-demand tables.\n */\nexport class DocDataCache implements AlternateStorage {\n  public docData: DocData;\n  private _altActions: AlternateActions;\n  constructor(actions?: DocAction[]) {\n    this.docData = new DocData(\n      async (tableId) => {\n        throw new Error(`no ${tableId}`);\n      },\n      null,\n    );\n    this._altActions = new AlternateActions(this);\n    for (const action of actions || []) {\n      this.docData.receiveAction(action);\n    }\n  }\n\n  public async sendTableActions(actions: UserAction[]): Promise<ProcessedAction[]> {\n    const results: ProcessedAction[] = [];\n    for (const userAction of actions) {\n      const processedAction = await this._altActions.processUserAction(userAction);\n      results.push(processedAction);\n      for (const storedAction of processedAction.stored) {\n        this.docData.receiveAction(storedAction);\n      }\n    }\n    return results;\n  }\n\n  public async fetchActionData(tableId: string, rowIds: number[], colIds?: string[]) {\n    const table = await this.docData.requireTable(tableId);\n    return table.getTableDataAction(\n      rowIds,\n      colIds,\n    );\n  }\n\n  public async getNextRowId(tableId: string): Promise<number> {\n    const table = await this.docData.requireTable(tableId);\n    return (max(table.getRowIds()) || 0) + 1;\n  }\n}\n","export interface DocumentUsage {\n  rowCount?: RowCounts;\n  dataSizeBytes?: number;\n  attachmentsSizeBytes?: number;\n}\n\nexport interface RowCounts {\n  total: number;\n  [tableRef: number]: number;\n}\n\nexport type DataLimitStatus = 'approachingLimit' | 'gracePeriod' | 'deleteOnly' | null;\n\ntype DocUsageOrPending = {\n  [Metric in keyof Required<DocumentUsage>]: Required<DocumentUsage>[Metric] | 'pending'\n}\n\nexport interface DocUsageSummary extends DocUsageOrPending {\n  dataLimitStatus: DataLimitStatus;\n}\n\n// Count of non-removed documents in an org, grouped by data limit status.\nexport type OrgUsageSummary = Record<NonNullable<DataLimitStatus>, number>;\n\ntype FilteredDocUsage = {\n  [Metric in keyof DocUsageOrPending]: DocUsageOrPending[Metric] | 'hidden'\n}\n\nexport interface FilteredDocUsageSummary extends FilteredDocUsage {\n  dataLimitStatus: DataLimitStatus;\n}\n\n// Ratio of usage at which we start telling users that they're approaching limits.\nexport const APPROACHING_LIMIT_RATIO = 0.9;\n\n/**\n * Computes a ratio of `usage` to `limit`, if possible. Returns 0 if `usage` or `limit`\n * is invalid or undefined.\n */\nexport function getUsageRatio(usage: number | undefined, limit: number | undefined): number {\n  if (!isEnforceableLimit(limit) || usage === undefined || usage < 0) {\n    // Treat undefined or invalid values as having 0 usage.\n    return 0;\n  }\n\n  return usage / limit;\n}\n\n/**\n * Returns an empty org usage summary with values initialized to 0.\n */\n export function createEmptyOrgUsageSummary(): OrgUsageSummary {\n  return {\n    approachingLimit: 0,\n    gracePeriod: 0,\n    deleteOnly: 0,\n  };\n}\n\n/**\n * Returns true if `limit` is defined and is a valid, positive number.\n */\nfunction isEnforceableLimit(limit: number | undefined): limit is number {\n  return limit !== undefined && limit > 0;\n}\n","import {PartialPermissionSet} from 'app/common/ACLPermissions';\nimport {CellValue, RowRecord} from 'app/common/DocActions';\nimport {MetaRowRecord} from 'app/common/TableData';\nimport {Role} from './roles';\n\nexport interface RuleSet {\n  tableId: '*' | string;\n  colIds: '*' | string[];\n  // The default permissions for this resource, if set, are represented by a RulePart with\n  // aclFormula of \"\", which must be the last element of body.\n  body: RulePart[];\n}\n\nexport interface RulePart {\n  origRecord?: MetaRowRecord<'_grist_ACLRules'>;  // Original record used to create this RulePart.\n  aclFormula: string;\n  permissions: PartialPermissionSet;\n  permissionsText: string;        // The text version of PermissionSet, as stored.\n\n  // Compiled version of aclFormula.\n  matchFunc?: AclMatchFunc;\n\n  // Optional memo, currently extracted from comment in formula.\n  memo?: string;\n}\n\n// Light wrapper for reading records or user attributes.\nexport interface InfoView {\n  get(key: string): CellValue;\n  toJSON(): {[key: string]: any};\n}\n\n// As InfoView, but also supporting writing.\nexport interface InfoEditor {\n  get(key: string): CellValue;\n  set(key: string, val: CellValue): this;\n  toJSON(): {[key: string]: any};\n}\n\n// Represents user info, which may include properties which are themselves RowRecords.\nexport interface UserInfo {\n  Name: string | null;\n  Email: string | null;\n  Access: Role | null;\n  Origin: string | null;\n  LinkKey: Record<string, string | undefined>;\n  UserID: number | null;\n  UserRef: string | null;\n  SessionID: string | null;\n  [attributes: string]: unknown;\n  toJSON(): {[key: string]: any};\n}\n\n/**\n * Input into the AclMatchFunc. Compiled formulas evaluate AclMatchInput to produce a boolean.\n */\nexport interface AclMatchInput {\n  user: UserInfo;\n  rec?: InfoView;\n  newRec?: InfoView;\n  docId?: string;\n}\n\n/**\n * The actual boolean function that can evaluate a request. The result of compiling ParsedAclFormula.\n */\nexport type AclMatchFunc = (input: AclMatchInput) => boolean;\n\n/**\n * Representation of a parsed ACL formula.\n */\ntype PrimitiveCellValue = number|string|boolean|null;\nexport type ParsedAclFormula = [string, ...(ParsedAclFormula|PrimitiveCellValue)[]];\n\n/**\n * Observations about a formula.\n */\nexport interface FormulaProperties {\n  hasRecOrNewRec?: boolean;\n  usedColIds?: string[];\n}\n\nexport interface UserAttributeRule {\n  origRecord?: RowRecord;         // Original record used to create this UserAttributeRule.\n  name: string;       // Should be unique among UserAttributeRules.\n  tableId: string;    // Table in which to look up an existing attribute.\n  lookupColId: string;  // Column in tableId in which to do the lookup.\n  charId: string;     // Attribute to look up, possibly a path. E.g. 'Email' or 'office.city'.\n}\n\n/**\n * Check some key facts about the formula.\n */\nexport function getFormulaProperties(formula: ParsedAclFormula) {\n  const result: FormulaProperties = {};\n  if (usesRec(formula)) { result.hasRecOrNewRec = true; }\n  const colIds = new Set<string>();\n  collectRecColIds(formula, colIds);\n  result.usedColIds = Array.from(colIds);\n  return result;\n}\n\n/**\n * Check whether a formula mentions `rec` or `newRec`.\n */\nexport function usesRec(formula: ParsedAclFormula): boolean {\n  if (!Array.isArray(formula)) { throw new Error('expected a list'); }\n  if (isRecOrNewRec(formula)) {\n    return true;\n  }\n  return formula.some(el => {\n    if (!Array.isArray(el)) { return false; }\n    return usesRec(el);\n  });\n}\n\nfunction isRecOrNewRec(formula: ParsedAclFormula|PrimitiveCellValue): boolean {\n  return Array.isArray(formula) &&\n    formula[0] === 'Name' &&\n    (formula[1] === 'rec' || formula[1] === 'newRec');\n}\n\nfunction collectRecColIds(formula: ParsedAclFormula, colIds: Set<string>): void {\n  if (!Array.isArray(formula)) { throw new Error('expected a list'); }\n  if (formula[0] === 'Attr' && isRecOrNewRec(formula[1])) {\n    const colId = formula[2];\n    colIds.add(String(colId));\n    return;\n  }\n  formula.forEach(el => Array.isArray(el) && collectRecColIds(el, colIds));\n}\n","/**\n * TableData maintains a single table's data.\n */\nimport {ActionDispatcher} from 'app/common/ActionDispatcher';\nimport {BulkAddRecord, BulkColValues, CellValue, ColInfo, ColInfoWithId, ColValues, DocAction,\n        isSchemaAction, ReplaceTableData, RowRecord, TableDataAction} from 'app/common/DocActions';\nimport {getDefaultForType} from 'app/common/gristTypes';\nimport {arrayRemove, arraySplice, getDistinctValues} from 'app/common/gutil';\nimport {SchemaTypes} from 'app/common/schema';\nimport {UIRowId} from 'app/plugin/GristAPI';\nimport isEqual = require('lodash/isEqual');\nimport fromPairs = require('lodash/fromPairs');\n\nexport interface ColTypeMap { [colId: string]: string; }\n\n\n\ntype UIRowFunc<T> = (rowId: UIRowId) => T;\n\ninterface ColData {\n  colId: string;\n  type: string;\n  defl: any;\n  values: CellValue[];\n}\n\nexport interface SingleCell {\n  tableId: string;\n  colId: string;\n  rowId: number;\n}\n\n/**\n * An interface for a table with rows that may be skipped.\n */\nexport interface SkippableRows {\n  // If there may be skippable rows, return a function to test rowIds for keeping.\n  getKeepFunc(): undefined | UIRowFunc<boolean>;\n  // Get a special row id which represents a skipped sequence of rows.\n  getSkipRowId(): number;\n}\n\n/**\n * TableData class to maintain a single table's data.\n *\n * In the browser's memory, table data needs a representation that's reasonably compact. We\n * represent it as column-wise arrays. (An early hope was to allow use of TypedArrays, but since\n * types can be mixed, those are not used.)\n */\nexport class TableData extends ActionDispatcher implements SkippableRows {\n  private _tableId: string;\n  private _isLoaded: boolean = false;\n  private _fetchPromise?: Promise<void>;\n\n  // Storage of the underlying data. Each column is an array, all of the same length. Includes\n  // 'id' column, containing a reference to _rowIdCol.\n  private _columns: Map<string, ColData> = new Map();\n\n  // Array of all ColData objects, omitting 'id'.\n  private _colArray: ColData[] = [];\n\n  // The `id` column is direct reference to the 'id' column, and contains row ids.\n  private _rowIdCol: number[] = [];\n\n  // Maps row id to index in the arrays in _columns. I.e. it's the inverse of _rowIdCol.\n  private _rowMap: Map<number, number> = new Map();\n\n  constructor(tableId: string, tableData: TableDataAction|null, colTypes: ColTypeMap) {\n    super();\n    this._tableId = tableId;\n\n    // Initialize all columns to empty arrays, while nothing is yet loaded.\n    for (const colId in colTypes) {\n      if (colTypes.hasOwnProperty(colId)) {\n        const type = colTypes[colId];\n        const defl = getDefaultForType(type);\n        const colData: ColData = { colId, type, defl, values: [] };\n        this._columns.set(colId, colData);\n        this._colArray.push(colData);\n      }\n    }\n    this._columns.set('id', {colId: 'id', type: 'Id', defl: 0, values: this._rowIdCol});\n\n    if (tableData) {\n      this.loadData(tableData);\n    }\n    // TODO: We should probably unload big sets of data when no longer needed. This can be left for\n    // when we support loading only parts of a table.\n  }\n\n  /**\n   * Fetch data (as long as a fetch is not in progress), and load it in memory when done.\n   * Returns a promise that's resolved when data finishes loading, and isLoaded becomes true.\n   */\n  public fetchData(fetchFunc: (tableId: string) => Promise<TableDataAction>): Promise<void> {\n    if (!this._fetchPromise) {\n      this._fetchPromise = fetchFunc(this._tableId).then(data => {\n        this._fetchPromise = undefined;\n        this.loadData(data);\n      });\n    }\n    return this._fetchPromise;\n  }\n\n  /**\n   * Populates the data for this table. Returns the array of old rowIds that were loaded before.\n   */\n  public loadData(tableData: TableDataAction|ReplaceTableData): number[] {\n    const rowIds: number[] = tableData[2];\n    const colValues: BulkColValues = tableData[3];\n    const oldRowIds: number[] = this._rowIdCol.slice(0);\n\n    reassignArray(this._rowIdCol, rowIds);\n    for (const colData of this._colArray) {\n      const values = colData.colId === 'id' ? rowIds : colValues[colData.colId];\n      // If colId is missing from tableData, use an array of default values. Note that reusing\n      // default value like this is only OK because all default values we use are primitive.\n      reassignArray(colData.values, values || this._rowIdCol.map(() => colData.defl));\n    }\n\n    this._rowMap.clear();\n    for (let i = 0; i < rowIds.length; i++) {\n      this._rowMap.set(rowIds[i], i);\n    }\n\n    this._isLoaded = true;\n    return oldRowIds;\n  }\n\n  // Used by QuerySet to load new rows for onDemand tables.\n  public loadPartial(data: TableDataAction): void {\n    // Add the new rows, reusing BulkAddData code.\n    const rowIds: number[] = data[2];\n    this.onBulkAddRecord(data, data[1], rowIds, data[3]);\n\n    // Mark the table as loaded.\n    this._isLoaded = true;\n  }\n\n  // Used by QuerySet to remove unused rows for onDemand tables when a QuerySet is disposed.\n  public unloadPartial(rowIds: number[]): void {\n    // Remove the unneeded rows, reusing BulkRemoveRecord code.\n    this.onBulkRemoveRecord(['BulkRemoveRecord', this.tableId, rowIds], this.tableId, rowIds);\n  }\n\n  /**\n   * Read-only tableId.\n   */\n  public get tableId(): string { return this._tableId; }\n\n  /**\n   * Boolean flag for whether the data for this table is already loaded.\n   */\n  public get isLoaded(): boolean { return this._isLoaded; }\n\n  /**\n   * The number of records loaded in this table.\n   */\n  public numRecords(): number { return this._rowIdCol.length; }\n\n  /**\n   * Returns the specified value from this table.\n   */\n  public getValue(rowId: UIRowId, colId: string): CellValue|undefined {\n    const colData = this._columns.get(colId);\n    const index = this._rowMap.get(rowId as number);    // rowId of 'new' will not be found.\n    return colData && index !== undefined ? colData.values[index] : undefined;\n  }\n\n  public hasRowId(rowId: number): boolean {\n    return this._rowMap.has(rowId);\n  }\n\n  /**\n   * Returns the index of the given rowId, if it exists, in the same unstable order that's\n   * returned by getRowIds() and getColValues().\n   */\n  public getRowIdIndex(rowId: UIRowId): number|undefined {\n    return this._rowMap.get(rowId as number);\n  }\n\n  /**\n   * Given a column name, returns a function that takes a rowId and returns the value for that\n   * column of that row. The returned function is faster than getValue() calls.\n   */\n  public getRowPropFunc(colId: string): UIRowFunc<CellValue|undefined> {\n    const colData = this._columns.get(colId);\n    if (!colData) { return () => undefined; }\n    const values = colData.values;\n    const rowMap = this._rowMap;\n    return (rowId: UIRowId) => values[rowMap.get(rowId as number)!];\n  }\n\n  // By default, no rows are skippable, all are kept.\n  public getKeepFunc(): undefined | UIRowFunc<boolean> {\n    return undefined;\n  }\n\n  // By default, no special row id for skip rows is needed.\n  public getSkipRowId(): number {\n    throw new Error('no skip row id defined');\n  }\n\n  /**\n   * Returns the list of all rowIds in this table, in unspecified and unstable order. Equivalent\n   * to getColValues('id').\n   */\n  public getRowIds(): ReadonlyArray<number> {\n    return this._rowIdCol;\n  }\n\n  /**\n   * Sort and returns the list of all rowIds in this table.\n   */\n  public getSortedRowIds(): number[] {\n    return this._rowIdCol.slice(0).sort((a, b) => a - b);\n  }\n\n  /**\n   * Returns true if cells may contain multiple versions (e.g. in diffs).\n   */\n  public mayHaveVersions() {\n    return false;\n  }\n\n  /**\n   * Returns the list of colIds in this table, including 'id'.\n   */\n  public getColIds(): string[] {\n    return Array.from(this._columns.keys());\n  }\n\n  /**\n   * Returns an unsorted list of all values in the given column. With no intervening actions,\n   * all arrays returned by getColValues() and getRowIds() are parallel to each other, i.e. the\n   * values at the same index correspond to the same record.\n   */\n  public getColValues(colId: string): ReadonlyArray<CellValue>|undefined {\n    const colData = this._columns.get(colId);\n    return colData ? colData.values : undefined;\n  }\n\n  /**\n   * Returns a limited-sized set of distinct values from a column. If count is given, limits how many\n   * distinct values are returned.\n   */\n  public getDistinctValues(colId: string, count: number = Infinity): Set<CellValue>|undefined {\n    const valColumn = this.getColValues(colId);\n    if (!valColumn) { return undefined; }\n    return getDistinctValues(valColumn, count);\n  }\n\n  /**\n   * Return data in TableDataAction form ['TableData', tableId, [...rowIds], {...}]\n   * Optionally takes a list of row ids to return data from. If a row id is\n   * not actually present in the table, a row of nulls will be returned for it.\n   */\n  public getTableDataAction(desiredRowIds?: number[],\n                            colIds?: string[]): TableDataAction {\n    colIds = colIds || this.getColIds();\n    const colIdSet = new Set<string>(colIds);\n    const rowIds = desiredRowIds || this.getRowIds();\n    let bulkColValues: {[colId: string]: CellValue[]};\n    const colArray = this._colArray.filter(({colId}) => colIdSet.has(colId));\n    if (desiredRowIds) {\n      const len = rowIds.length;\n      bulkColValues = {};\n      for (const colId of colIds) { bulkColValues[colId] = Array(len); }\n      for (let i = 0; i < len; i++) {\n        const index = this._rowMap.get(rowIds[i]);\n        for (const {colId, values} of colArray) {\n          const value = (index === undefined) ? null : values[index];\n          bulkColValues[colId][i] = value;\n        }\n      }\n    } else {\n      bulkColValues = fromPairs(\n        colIds\n          .filter(colId => colId !== 'id')\n          .map(colId => [colId, this.getColValues(colId)! as CellValue[]]));\n    }\n    return ['TableData',\n            this.tableId,\n            rowIds as number[],\n            bulkColValues];\n  }\n\n  public getBulkAddRecord(desiredRowIds?: number[]): BulkAddRecord {\n    const tableData = this.getTableDataAction(desiredRowIds?.sort((a, b) => a - b));\n    return [\n      'BulkAddRecord', tableData[1], tableData[2], tableData[3],\n    ];\n  }\n\n  /**\n   * Returns the given columns type, if the column exists, or undefined otherwise.\n   */\n  public getColType(colId: string): string|undefined {\n    const colData = this._columns.get(colId);\n    return colData ? colData.type : undefined;\n  }\n\n  /**\n   * Builds and returns a record object for the given rowId.\n   */\n  public getRecord(rowId: number): undefined | RowRecord {\n    const index = this._rowMap.get(rowId);\n    if (index === undefined) { return undefined; }\n    const ret: RowRecord = { id: this._rowIdCol[index] };\n    for (const colData of this._colArray) {\n      ret[colData.colId] = colData.values[index];\n    }\n    return ret;\n  }\n\n  /**\n   * Builds and returns the list of all records on this table, in unspecified and unstable order.\n   */\n  public getRecords(): RowRecord[] {\n    const records: RowRecord[] = this._rowIdCol.map((id) => ({ id }));\n    for (const {colId, values} of this._colArray) {\n      for (let i = 0; i < records.length; i++) {\n        records[i][colId] = values[i];\n      }\n    }\n    return records;\n  }\n\n  public filterRowIds(properties: {[key: string]: any}): number[] {\n    return this._filterRowIndices(properties).map(i => this._rowIdCol[i]);\n  }\n\n  /**\n   * Builds and returns the list of records in this table that match the given properties object.\n   * Properties may include 'id' and any table columns. Returned records are not sorted.\n   */\n  public filterRecords(properties: {[key: string]: any}): RowRecord[] {\n    const rowIndices: number[] = this._filterRowIndices(properties);\n\n    // Convert the array of indices to an array of RowRecords.\n    const records: RowRecord[] = rowIndices.map(i => ({id: this._rowIdCol[i]}));\n    for (const {colId, values} of this._colArray) {\n      for (let i = 0; i < records.length; i++) {\n        records[i][colId] = values[rowIndices[i]];\n      }\n    }\n    return records;\n  }\n\n  /**\n   * Returns the rowId in the table where colValue is found in the column with the given colId.\n   */\n  public findRow(colId: string, colValue: any): number {\n    const colData = this._columns.get(colId);\n    if (!colData) {\n      return 0;\n    }\n    const index = colData.values.indexOf(colValue);\n    return index < 0 ? 0 : this._rowIdCol[index];\n  }\n\n  /**\n   * Returns the first rowId matching the given filters, or 0 if no match. If there are multiple\n   * matches, it is unspecified which will be returned.\n   */\n  public findMatchingRowId(properties: {[key: string]: CellValue | undefined}): number {\n    const props = Object.keys(properties).map(p => ({col: this._columns.get(p)!, value: properties[p]}));\n    if (!props.every((p) => p.col)) {\n      return 0;\n    }\n    return this._rowIdCol.find((id, i) =>\n      props.every((p) => isEqual(p.col.values[i], p.value))\n    ) || 0;\n  }\n\n  /**\n   * Applies a DocAction received from the server; returns true, or false if it was skipped.\n   */\n  public receiveAction(action: DocAction): boolean {\n    if (this._isLoaded || isSchemaAction(action)) {\n      this.dispatchAction(action);\n      return true;\n    }\n    return false;\n  }\n\n  // ---- The following methods implement ActionDispatcher interface ----\n\n  protected onAddRecord(action: DocAction, tableId: string, rowId: number, colValues: ColValues): void {\n    if (this._rowMap.get(rowId) !== undefined) {\n      // If adding a record that already exists, act like an update.\n      // We rely on this behavior for distributing attachment\n      // metadata.\n      this.onUpdateRecord(action, tableId, rowId, colValues);\n      return;\n    }\n    const index: number = this._rowIdCol.length;\n    this._rowMap.set(rowId, index);\n    this._rowIdCol[index] = rowId;\n    for (const {colId, defl, values} of this._colArray) {\n      values[index] = colValues.hasOwnProperty(colId) ? colValues[colId] : defl;\n    }\n  }\n\n  protected onBulkAddRecord(action: DocAction, tableId: string, rowIds: number[], colValues: BulkColValues): void {\n    let destIndex: number = this._rowIdCol.length;\n    for (let i = 0; i < rowIds.length; i++) {\n      const srcIndex = this._rowMap.get(rowIds[i]);\n      if (srcIndex !== undefined) {\n        // If adding a record that already exists, act like an update.\n        // We rely on this behavior for distributing attachment\n        // metadata.\n        for (const colId in colValues) {\n          if (colValues.hasOwnProperty(colId)) {\n            const colData = this._columns.get(colId);\n            if (colData) {\n              colData.values[srcIndex] = colValues[colId][i];\n            }\n          }\n        }\n      } else {\n        this._rowMap.set(rowIds[i], destIndex);\n        this._rowIdCol[destIndex] = rowIds[i];\n        for (const {colId, defl, values} of this._colArray) {\n          values[destIndex] = colValues.hasOwnProperty(colId) ? colValues[colId][i] : defl;\n        }\n        destIndex++;\n      }\n    }\n  }\n\n  protected onRemoveRecord(action: DocAction, tableId: string, rowId: number): void {\n    // Note that in this implementation, delete + undo will reorder the storage and the ordering\n    // of rows returned getRowIds() and similar methods.\n    const index = this._rowMap.get(rowId);\n    if (index !== undefined) {\n      const last: number = this._rowIdCol.length - 1;\n      // We keep the column-wise arrays dense by moving the last element into the freed-up spot.\n      for (const {values} of this._columns.values()) {    // This adjusts _rowIdCol too.\n        values[index] = values[last];\n        values.pop();\n      }\n      this._rowMap.set(this._rowIdCol[index], index);\n      this._rowMap.delete(rowId);\n    }\n  }\n\n  protected onUpdateRecord(action: DocAction, tableId: string, rowId: number, colValues: ColValues): void {\n    const index = this._rowMap.get(rowId);\n    if (index !== undefined) {\n      for (const colId in colValues) {\n        if (colValues.hasOwnProperty(colId)) {\n          const colData = this._columns.get(colId);\n          if (colData) {\n            colData.values[index] = colValues[colId];\n          }\n        }\n      }\n    }\n  }\n\n  protected onBulkUpdateRecord(action: DocAction, tableId: string, rowIds: number[], colValues: BulkColValues): void {\n    for (let i = 0; i < rowIds.length; i++) {\n      const index = this._rowMap.get(rowIds[i]);\n      if (index !== undefined) {\n        for (const colId in colValues) {\n          if (colValues.hasOwnProperty(colId)) {\n            const colData = this._columns.get(colId);\n            if (colData) {\n              colData.values[index] = colValues[colId][i];\n            }\n          }\n        }\n      }\n    }\n  }\n\n  protected onReplaceTableData(action: DocAction, tableId: string, rowIds: number[], colValues: BulkColValues): void {\n    this.loadData(action as ReplaceTableData);\n  }\n\n  protected onAddColumn(action: DocAction, tableId: string, colId: string, colInfo: ColInfo): void {\n    if (this._columns.has(colId)) { return; }\n    const type = colInfo.type;\n    const defl = getDefaultForType(type);\n    const colData: ColData = { colId, type, defl, values: this._rowIdCol.map(() => defl) };\n    this._columns.set(colId, colData);\n    this._colArray.push(colData);\n  }\n\n  protected onRemoveColumn(action: DocAction, tableId: string, colId: string): void {\n    const colData = this._columns.get(colId);\n    if (!colData) { return; }\n    this._columns.delete(colId);\n    arrayRemove(this._colArray, colData);\n  }\n\n  protected onRenameColumn(action: DocAction, tableId: string, oldColId: string, newColId: string): void {\n    const colData = this._columns.get(oldColId);\n    if (colData) {\n      colData.colId = newColId;\n      this._columns.set(newColId, colData);\n      this._columns.delete(oldColId);\n    }\n  }\n\n  protected onModifyColumn(action: DocAction, tableId: string, oldColId: string, colInfo: ColInfo): void {\n    const colData = this._columns.get(oldColId);\n    if (colData && colInfo.hasOwnProperty('type')) {\n      colData.type = colInfo.type;\n      colData.defl = getDefaultForType(colInfo.type);\n    }\n  }\n\n  protected onRenameTable(action: DocAction, oldTableId: string, newTableId: string): void {\n    this._tableId = newTableId;\n  }\n\n  protected onAddTable(action: DocAction, tableId: string, columns: ColInfoWithId[]): void {\n    // A table processing its own addition is a noop\n  }\n\n  protected onRemoveTable(action: DocAction, tableId: string): void {\n    // Stop dispatching actions if we've been deleted. We might also want to clean up in the future.\n    this._isLoaded = false;\n  }\n\n  private _filterRowIndices(properties: {[key: string]: any}): number[] {\n    const rowIndices: number[] = [];\n    // Array of {col: arrayOfColValues, value: valueToMatch}\n    const props = Object.keys(properties).map(p => ({col: this._columns.get(p)!, value: properties[p]}));\n    this._rowIdCol.forEach((id, i) => {\n      // Collect the indices of the matching rows.\n      if (props.every((p) => isEqual(p.col.values[i], p.value))) {\n        rowIndices.push(i);\n      }\n    });\n    return rowIndices;\n  }\n}\n\n// A type safe record of a meta table with types as defined in schema.ts\n// '&' is used because declaring the id field and the index signature in one block gives a syntax error.\n// The second part is basically equivalent to SchemaTypes[TableId]\n// but TS sees that as incompatible with RowRecord and doesn't allow simple overrides in MetaTableData.\nexport type MetaRowRecord<TableId extends keyof SchemaTypes> =\n  { id: number } &\n  { [ColId in keyof SchemaTypes[TableId]]: SchemaTypes[TableId][ColId] & CellValue };\n\ntype MetaColId<TableId extends keyof SchemaTypes> = keyof MetaRowRecord<TableId> & string;\n\n/**\n * Behaves the same as TableData, but uses SchemaTypes for type safety of its columns.\n */\nexport class MetaTableData<TableId extends keyof SchemaTypes> extends TableData {\n  constructor(tableId: TableId, tableData: TableDataAction | null, colTypes: ColTypeMap) {\n    super(tableId, tableData, colTypes);\n  }\n\n  public getValue<ColId extends MetaColId<TableId>>(rowId: number, colId: ColId):\n    MetaRowRecord<TableId>[ColId] | undefined {\n    return super.getValue(rowId, colId) as any;\n  }\n\n  public getRecords(): Array<MetaRowRecord<TableId>> {\n    return super.getRecords() as any;\n  }\n\n  public getRecord(rowId: number): MetaRowRecord<TableId> | undefined {\n    return super.getRecord(rowId) as any;\n  }\n\n  public filterRecords(properties: Partial<MetaRowRecord<TableId>>): Array<MetaRowRecord<TableId>> {\n    return super.filterRecords(properties) as any;\n  }\n\n  public findMatchingRowId(properties: Partial<MetaRowRecord<TableId>>): number {\n    return super.findMatchingRowId(properties);\n  }\n\n  public getRowPropFunc<ColId extends MetaColId<TableId>>(\n    colId: ColId\n  ): UIRowFunc<MetaRowRecord<TableId>[ColId]> {\n    return super.getRowPropFunc(colId as any) as any;\n  }\n\n  public getColValues<ColId extends MetaColId<TableId>>(\n    colId: ColId\n  ): ReadonlyArray<MetaRowRecord<TableId>[ColId]> {\n    return super.getColValues(colId) as any;\n  }\n\n  public findRow<ColId extends MetaColId<TableId>>(\n    colId: ColId, colValue: MetaRowRecord<TableId>[ColId]\n  ): number {\n    return super.findRow(colId, colValue);\n  }\n}\n\nfunction reassignArray<T>(targetArray: T[], sourceArray: T[]): void {\n  targetArray.length = 0;\n  arraySplice(targetArray, 0, sourceArray);\n}\n","/*** THIS FILE IS AUTO-GENERATED BY core/sandbox/gen_js_schema.py ***/\n\nimport { GristObjCode } from \"app/plugin/GristData\";\n\n// tslint:disable:object-literal-key-quotes\n\nexport const SCHEMA_VERSION = 39;\n\nexport const schema = {\n\n  \"_grist_DocInfo\": {\n    docId               : \"Text\",\n    peers               : \"Text\",\n    basketId            : \"Text\",\n    schemaVersion       : \"Int\",\n    timezone            : \"Text\",\n    documentSettings    : \"Text\",\n  },\n\n  \"_grist_Tables\": {\n    tableId             : \"Text\",\n    primaryViewId       : \"Ref:_grist_Views\",\n    summarySourceTable  : \"Ref:_grist_Tables\",\n    onDemand            : \"Bool\",\n    rawViewSectionRef   : \"Ref:_grist_Views_section\",\n  },\n\n  \"_grist_Tables_column\": {\n    parentId            : \"Ref:_grist_Tables\",\n    parentPos           : \"PositionNumber\",\n    colId               : \"Text\",\n    type                : \"Text\",\n    widgetOptions       : \"Text\",\n    isFormula           : \"Bool\",\n    formula             : \"Text\",\n    label               : \"Text\",\n    description         : \"Text\",\n    untieColIdFromLabel : \"Bool\",\n    summarySourceCol    : \"Ref:_grist_Tables_column\",\n    displayCol          : \"Ref:_grist_Tables_column\",\n    visibleCol          : \"Ref:_grist_Tables_column\",\n    rules               : \"RefList:_grist_Tables_column\",\n    recalcWhen          : \"Int\",\n    recalcDeps          : \"RefList:_grist_Tables_column\",\n  },\n\n  \"_grist_Imports\": {\n    tableRef            : \"Ref:_grist_Tables\",\n    origFileName        : \"Text\",\n    parseFormula        : \"Text\",\n    delimiter           : \"Text\",\n    doublequote         : \"Bool\",\n    escapechar          : \"Text\",\n    quotechar           : \"Text\",\n    skipinitialspace    : \"Bool\",\n    encoding            : \"Text\",\n    hasHeaders          : \"Bool\",\n  },\n\n  \"_grist_External_database\": {\n    host                : \"Text\",\n    port                : \"Int\",\n    username            : \"Text\",\n    dialect             : \"Text\",\n    database            : \"Text\",\n    storage             : \"Text\",\n  },\n\n  \"_grist_External_table\": {\n    tableRef            : \"Ref:_grist_Tables\",\n    databaseRef         : \"Ref:_grist_External_database\",\n    tableName           : \"Text\",\n  },\n\n  \"_grist_TableViews\": {\n    tableRef            : \"Ref:_grist_Tables\",\n    viewRef             : \"Ref:_grist_Views\",\n  },\n\n  \"_grist_TabItems\": {\n    tableRef            : \"Ref:_grist_Tables\",\n    viewRef             : \"Ref:_grist_Views\",\n  },\n\n  \"_grist_TabBar\": {\n    viewRef             : \"Ref:_grist_Views\",\n    tabPos              : \"PositionNumber\",\n  },\n\n  \"_grist_Pages\": {\n    viewRef             : \"Ref:_grist_Views\",\n    indentation         : \"Int\",\n    pagePos             : \"PositionNumber\",\n  },\n\n  \"_grist_Views\": {\n    name                : \"Text\",\n    type                : \"Text\",\n    layoutSpec          : \"Text\",\n  },\n\n  \"_grist_Views_section\": {\n    tableRef            : \"Ref:_grist_Tables\",\n    parentId            : \"Ref:_grist_Views\",\n    parentKey           : \"Text\",\n    title               : \"Text\",\n    description         : \"Text\",\n    defaultWidth        : \"Int\",\n    borderWidth         : \"Int\",\n    theme               : \"Text\",\n    options             : \"Text\",\n    chartType           : \"Text\",\n    layoutSpec          : \"Text\",\n    filterSpec          : \"Text\",\n    sortColRefs         : \"Text\",\n    linkSrcSectionRef   : \"Ref:_grist_Views_section\",\n    linkSrcColRef       : \"Ref:_grist_Tables_column\",\n    linkTargetColRef    : \"Ref:_grist_Tables_column\",\n    embedId             : \"Text\",\n    rules               : \"RefList:_grist_Tables_column\",\n  },\n\n  \"_grist_Views_section_field\": {\n    parentId            : \"Ref:_grist_Views_section\",\n    parentPos           : \"PositionNumber\",\n    colRef              : \"Ref:_grist_Tables_column\",\n    width               : \"Int\",\n    widgetOptions       : \"Text\",\n    displayCol          : \"Ref:_grist_Tables_column\",\n    visibleCol          : \"Ref:_grist_Tables_column\",\n    filter              : \"Text\",\n    rules               : \"RefList:_grist_Tables_column\",\n  },\n\n  \"_grist_Validations\": {\n    formula             : \"Text\",\n    name                : \"Text\",\n    tableRef            : \"Int\",\n  },\n\n  \"_grist_REPL_Hist\": {\n    code                : \"Text\",\n    outputText          : \"Text\",\n    errorText           : \"Text\",\n  },\n\n  \"_grist_Attachments\": {\n    fileIdent           : \"Text\",\n    fileName            : \"Text\",\n    fileType            : \"Text\",\n    fileSize            : \"Int\",\n    fileExt             : \"Text\",\n    imageHeight         : \"Int\",\n    imageWidth          : \"Int\",\n    timeDeleted         : \"DateTime\",\n    timeUploaded        : \"DateTime\",\n  },\n\n  \"_grist_Triggers\": {\n    tableRef            : \"Ref:_grist_Tables\",\n    eventTypes          : \"ChoiceList\",\n    isReadyColRef       : \"Ref:_grist_Tables_column\",\n    actions             : \"Text\",\n    label               : \"Text\",\n    memo                : \"Text\",\n    enabled             : \"Bool\",\n  },\n\n  \"_grist_ACLRules\": {\n    resource            : \"Ref:_grist_ACLResources\",\n    permissions         : \"Int\",\n    principals          : \"Text\",\n    aclFormula          : \"Text\",\n    aclColumn           : \"Ref:_grist_Tables_column\",\n    aclFormulaParsed    : \"Text\",\n    permissionsText     : \"Text\",\n    rulePos             : \"PositionNumber\",\n    userAttributes      : \"Text\",\n    memo                : \"Text\",\n  },\n\n  \"_grist_ACLResources\": {\n    tableId             : \"Text\",\n    colIds              : \"Text\",\n  },\n\n  \"_grist_ACLPrincipals\": {\n    type                : \"Text\",\n    userEmail           : \"Text\",\n    userName            : \"Text\",\n    groupName           : \"Text\",\n    instanceId          : \"Text\",\n  },\n\n  \"_grist_ACLMemberships\": {\n    parent              : \"Ref:_grist_ACLPrincipals\",\n    child               : \"Ref:_grist_ACLPrincipals\",\n  },\n\n  \"_grist_Filters\": {\n    viewSectionRef      : \"Ref:_grist_Views_section\",\n    colRef              : \"Ref:_grist_Tables_column\",\n    filter              : \"Text\",\n    pinned              : \"Bool\",\n  },\n\n  \"_grist_Cells\": {\n    tableRef            : \"Ref:_grist_Tables\",\n    colRef              : \"Ref:_grist_Tables_column\",\n    rowId               : \"Int\",\n    root                : \"Bool\",\n    parentId            : \"Ref:_grist_Cells\",\n    type                : \"Int\",\n    content             : \"Text\",\n    userRef             : \"Text\",\n  },\n\n};\n\nexport interface SchemaTypes {\n\n  \"_grist_DocInfo\": {\n    docId: string;\n    peers: string;\n    basketId: string;\n    schemaVersion: number;\n    timezone: string;\n    documentSettings: string;\n  };\n\n  \"_grist_Tables\": {\n    tableId: string;\n    primaryViewId: number;\n    summarySourceTable: number;\n    onDemand: boolean;\n    rawViewSectionRef: number;\n  };\n\n  \"_grist_Tables_column\": {\n    parentId: number;\n    parentPos: number;\n    colId: string;\n    type: string;\n    widgetOptions: string;\n    isFormula: boolean;\n    formula: string;\n    label: string;\n    description: string;\n    untieColIdFromLabel: boolean;\n    summarySourceCol: number;\n    displayCol: number;\n    visibleCol: number;\n    rules: [GristObjCode.List, ...number[]]|null;\n    recalcWhen: number;\n    recalcDeps: [GristObjCode.List, ...number[]]|null;\n  };\n\n  \"_grist_Imports\": {\n    tableRef: number;\n    origFileName: string;\n    parseFormula: string;\n    delimiter: string;\n    doublequote: boolean;\n    escapechar: string;\n    quotechar: string;\n    skipinitialspace: boolean;\n    encoding: string;\n    hasHeaders: boolean;\n  };\n\n  \"_grist_External_database\": {\n    host: string;\n    port: number;\n    username: string;\n    dialect: string;\n    database: string;\n    storage: string;\n  };\n\n  \"_grist_External_table\": {\n    tableRef: number;\n    databaseRef: number;\n    tableName: string;\n  };\n\n  \"_grist_TableViews\": {\n    tableRef: number;\n    viewRef: number;\n  };\n\n  \"_grist_TabItems\": {\n    tableRef: number;\n    viewRef: number;\n  };\n\n  \"_grist_TabBar\": {\n    viewRef: number;\n    tabPos: number;\n  };\n\n  \"_grist_Pages\": {\n    viewRef: number;\n    indentation: number;\n    pagePos: number;\n  };\n\n  \"_grist_Views\": {\n    name: string;\n    type: string;\n    layoutSpec: string;\n  };\n\n  \"_grist_Views_section\": {\n    tableRef: number;\n    parentId: number;\n    parentKey: string;\n    title: string;\n    description: string;\n    defaultWidth: number;\n    borderWidth: number;\n    theme: string;\n    options: string;\n    chartType: string;\n    layoutSpec: string;\n    filterSpec: string;\n    sortColRefs: string;\n    linkSrcSectionRef: number;\n    linkSrcColRef: number;\n    linkTargetColRef: number;\n    embedId: string;\n    rules: [GristObjCode.List, ...number[]]|null;\n  };\n\n  \"_grist_Views_section_field\": {\n    parentId: number;\n    parentPos: number;\n    colRef: number;\n    width: number;\n    widgetOptions: string;\n    displayCol: number;\n    visibleCol: number;\n    filter: string;\n    rules: [GristObjCode.List, ...number[]]|null;\n  };\n\n  \"_grist_Validations\": {\n    formula: string;\n    name: string;\n    tableRef: number;\n  };\n\n  \"_grist_REPL_Hist\": {\n    code: string;\n    outputText: string;\n    errorText: string;\n  };\n\n  \"_grist_Attachments\": {\n    fileIdent: string;\n    fileName: string;\n    fileType: string;\n    fileSize: number;\n    fileExt: string;\n    imageHeight: number;\n    imageWidth: number;\n    timeDeleted: number;\n    timeUploaded: number;\n  };\n\n  \"_grist_Triggers\": {\n    tableRef: number;\n    eventTypes: [GristObjCode.List, ...string[]]|null;\n    isReadyColRef: number;\n    actions: string;\n    label: string;\n    memo: string;\n    enabled: boolean;\n  };\n\n  \"_grist_ACLRules\": {\n    resource: number;\n    permissions: number;\n    principals: string;\n    aclFormula: string;\n    aclColumn: number;\n    aclFormulaParsed: string;\n    permissionsText: string;\n    rulePos: number;\n    userAttributes: string;\n    memo: string;\n  };\n\n  \"_grist_ACLResources\": {\n    tableId: string;\n    colIds: string;\n  };\n\n  \"_grist_ACLPrincipals\": {\n    type: string;\n    userEmail: string;\n    userName: string;\n    groupName: string;\n    instanceId: string;\n  };\n\n  \"_grist_ACLMemberships\": {\n    parent: number;\n    child: number;\n  };\n\n  \"_grist_Filters\": {\n    viewSectionRef: number;\n    colRef: number;\n    filter: string;\n    pinned: boolean;\n  };\n\n  \"_grist_Cells\": {\n    tableRef: number;\n    colRef: number;\n    rowId: number;\n    root: boolean;\n    parentId: number;\n    type: number;\n    content: string;\n    userRef: string;\n  };\n\n}\n","/**\n * Clipboard component manages the copy/cut/paste events by capturing these events from the browser,\n * managing their state, and exposing an API to other components to get/set the data.\n *\n * Because of a lack of standardization of ClipboardEvents between browsers, the way Clipboard\n * captures the events is by creating a hidden textarea element that's always focused with some text\n * selected. Here is a good write-up of this:\n * https://www.lucidchart.com/techblog/2014/12/02/definitive-guide-copying-pasting-javascript/\n *\n * When ClipboardEvent is detected, Clipboard captures the event and calls the corresponding\n * copy/cut/paste/input command actions, which will get called on the appropriate component.\n *\n * Usage:\n *    Components need to register copy/cut/paste actions with command.js:\n *      .copy() should return @pasteObj (defined below).\n *      .paste(plainText, [cutSelection]) should take a plainText value and an optional cutSelection\n *      parameter which will specify the selection that should be cleared as part of paste.\n *      .input(char) should take a single input character and will be called when the user types a\n *      visible character (useful if component wants to interpret typing into a cell, for example).\n */\n\n/**\n * Paste object that should be returned by implementation of `copy`.\n *\n * @typedef pasteObj {{\n *    docName: string,\n *    tableId: string,\n *    data:    object,\n *    selection: object\n * }}\n */\n\n\n\n/* global window, document */\n\nvar {getHumanKey, isMac} = require('app/client/components/commands');\nvar {copyToClipboard, readDataFromClipboard} = require('app/client/lib/clipboardUtils');\nvar {FocusLayer} = require('app/client/lib/FocusLayer');\nvar {makeT} = require('app/client/lib/localization');\n\nvar {tsvDecode} = require('app/common/tsvFormat');\nvar {ShortcutKey, ShortcutKeyContent} = require('app/client/ui/ShortcutKey');\nvar {confirmModal} = require('app/client/ui2018/modals');\nvar {styled} = require('grainjs');\n\nvar commands = require('./commands');\nvar dom = require('../lib/dom');\nvar Base = require('./Base');\nvar tableUtil = require('../lib/tableUtil');\n\nconst t = makeT('Clipboard');\n\nfunction Clipboard(app) {\n  Base.call(this, null);\n  this._app = app;\n  this.copypasteField = this.autoDispose(dom('textarea.copypaste.mousetrap', ''));\n  this.timeoutId = null;\n\n  this.onEvent(this.copypasteField, 'input', function(elem, event) {\n    var value = elem.value;\n    elem.value = '';\n    commands.allCommands.input.run(value);\n    return false;\n  });\n  this.onEvent(this.copypasteField, 'copy',  this._onCopy);\n  this.onEvent(this.copypasteField, 'cut',   this._onCut);\n  this.onEvent(this.copypasteField, 'paste', this._onPaste);\n\n  document.body.appendChild(this.copypasteField);\n\n  FocusLayer.create(this, {\n    defaultFocusElem: this.copypasteField,\n    allowFocus: allowFocus,\n    onDefaultFocus: () => {\n      this.copypasteField.value = ' ';\n      this.copypasteField.select();\n      this._app.trigger('clipboard_focus');\n    },\n    onDefaultBlur: () => {\n      this._app.trigger('clipboard_blur');\n    },\n  });\n\n  // Expose the grabber as a global to allow upload from tests to explicitly restore focus\n  window.gristClipboardGrabFocus = () => FocusLayer.grabFocus();\n\n  // Some bugs may prevent Clipboard from re-grabbing focus. To limit the impact of such bugs on\n  // the user, recover from a bad state in mousedown events. (At the moment of this comment, all\n  // such known bugs are fixed.)\n  this.onEvent(window, 'mousedown', (ev) => {\n    if (!document.activeElement || document.activeElement === document.body) {\n      FocusLayer.grabFocus();\n    }\n  });\n\n  // In the event of a cut a callback is provided by the viewsection that is the target of the cut.\n  // When called it returns the additional removal action needed for a cut.\n  this._cutCallback = null;\n  // The plaintext content of the cut callback. Used to verify that we are pasting the results\n  // of the cut, rather than new data from outside.\n  this._cutData = null;\n\n  this.autoDispose(commands.createGroup(Clipboard.commands, this, true));\n}\nBase.setBaseFor(Clipboard);\n\nClipboard.commands = {\n  contextMenuCopy: function() { this._doContextMenuCopy(); },\n  contextMenuCut: function() { this._doContextMenuCut(); },\n  contextMenuPaste: function() { this._doContextMenuPaste(); },\n};\n\n/**\n * Internal helper fired on `copy` events. If a callback was registered from a component, calls the\n * callback to get selection data and puts it on the clipboard.\n */\nClipboard.prototype._onCopy = function(elem, event) {\n  event.preventDefault();\n\n  let pasteObj = commands.allCommands.copy.run();\n\n  this._setCBdata(pasteObj, event.originalEvent.clipboardData);\n};\n\nClipboard.prototype._doContextMenuCopy = function() {\n  let pasteObj = commands.allCommands.copy.run();\n\n  this._copyToClipboard(pasteObj, 'copy');\n};\n\nClipboard.prototype._onCut = function(elem, event) {\n  event.preventDefault();\n\n  let pasteObj = commands.allCommands.cut.run();\n\n  this._setCBdata(pasteObj, event.originalEvent.clipboardData);\n};\n\nClipboard.prototype._doContextMenuCut = function() {\n  let pasteObj = commands.allCommands.cut.run();\n\n  this._copyToClipboard(pasteObj, 'cut');\n};\n\nClipboard.prototype._setCBdata = function(pasteObj, clipboardData) {\n  if (!pasteObj) { return; }\n\n  const plainText = tableUtil.makePasteText(pasteObj.data, pasteObj.selection);\n  clipboardData.setData('text/plain', plainText);\n  const htmlText = tableUtil.makePasteHtml(pasteObj.data, pasteObj.selection);\n  clipboardData.setData('text/html', htmlText);\n\n  this._setCutCallback(pasteObj, plainText);\n};\n\nClipboard.prototype._copyToClipboard = async function(pasteObj, action) {\n  if (!pasteObj) { return; }\n\n  const plainText = tableUtil.makePasteText(pasteObj.data, pasteObj.selection);\n  let data;\n  if (typeof ClipboardItem === 'function') {\n    const htmlText = tableUtil.makePasteHtml(pasteObj.data, pasteObj.selection);\n    // eslint-disable-next-line no-undef\n    data = new ClipboardItem({\n      // eslint-disable-next-line no-undef\n      'text/plain': new Blob([plainText], {type: 'text/plain'}),\n      // eslint-disable-next-line no-undef\n      'text/html': new Blob([htmlText], {type: 'text/html'}),\n    });\n  } else {\n    data = plainText;\n  }\n\n  try {\n    await copyToClipboard(data);\n  } catch {\n    showUnavailableMenuCommandModal(action);\n    return;\n  }\n\n  this._setCutCallback(pasteObj, plainText);\n};\n\n/**\n * Sets the cut callback from the `pasteObj` if one exists. Otherwise clears the\n * cut callback.\n *\n * The callback is called on paste, and only if the pasted data matches the `cutData`\n * that was cut from within Grist. The callback handles removal of the data that was\n * cut.\n */\nClipboard.prototype._setCutCallback = function(pasteObj, cutData) {\n  if (pasteObj.cutCallback) {\n    this._cutCallback = pasteObj.cutCallback;\n    this._cutData = cutData;\n  } else {\n    this._cutCallback = null;\n    this._cutData = null;\n  }\n};\n\n/**\n * Internal helper fired on `paste` events. If a callback was registered from a component, calls the\n * callback with data from the clipboard.\n */\nClipboard.prototype._onPaste = function(elem, event) {\n  event.preventDefault();\n  const cb = event.originalEvent.clipboardData;\n  const plainText = cb.getData('text/plain');\n  const htmlText = cb.getData('text/html');\n  const pasteData = getPasteData(plainText, htmlText);\n  this._doPaste(pasteData, plainText);\n};\n\nvar FOCUS_TARGET_TAGS = {\n  'INPUT': true,\n  'TEXTAREA': true,\n  'SELECT': true,\n  'IFRAME': true,\n};\n\nClipboard.prototype._doContextMenuPaste = async function() {\n  let clipboardItem;\n  try {\n    clipboardItem = (await readDataFromClipboard())?.[0];\n  } catch {\n    showUnavailableMenuCommandModal('paste');\n    return;\n  }\n  const plainText = await getTextFromClipboardItem(clipboardItem, 'text/plain');\n  const htmlText = await getTextFromClipboardItem(clipboardItem, 'text/html');\n  const pasteData = getPasteData(plainText, htmlText);\n  this._doPaste(pasteData, plainText);\n};\n\nClipboard.prototype._doPaste = function(pasteData, plainText) {\n  console.log(this._cutData, plainText, this._cutCallback);\n  if (this._cutData === plainText) {\n    if (this._cutCallback) {\n      // Cuts should only be possible on the first paste after a cut and only if the data being\n      // pasted matches the data that was cut.\n      commands.allCommands.paste.run(pasteData, this._cutCallback);\n    }\n  } else {\n    this._cutData = null;\n    commands.allCommands.paste.run(pasteData, null);\n  }\n  // The cut callback should only be usable once so it needs to be cleared after every paste.\n  this._cutCallback = null;\n}\n\n/**\n * Returns data formatted as a 2D array of strings, suitable for pasting within Grist.\n *\n * Grist stores both text/html and text/plain when copying data. When pasting back, we first\n * check if text/html exists (should exist for Grist and other spreadsheet software), and fall\n * back to text/plain otherwise.\n */\nfunction getPasteData(plainText, htmlText) {\n  try {\n    return tableUtil.parsePasteHtml(htmlText);\n  } catch (e) {\n    if (plainText === '' || plainText.charCodeAt(0) === 0xFEFF) {\n      return [['']];\n    } else {\n      return tsvDecode(plainText.replace(/\\r\\n?/g, \"\\n\").trimEnd());\n    }\n  }\n}\n\n/**\n * Returns clipboard data of the given `type` from `clipboardItem` as text.\n *\n * Returns an empty string if `clipboardItem` is nullish or no data exists\n * for the given `type`.\n */\nasync function getTextFromClipboardItem(clipboardItem, type) {\n  if (!clipboardItem) { return ''; }\n\n  try {\n    return (await clipboardItem.getType(type)).text();\n  } catch {\n    // No clipboard data exists for the MIME type.\n    return '';\n  }\n}\n\n/**\n * Helper to determine if the currently active element deserves to keep its own focus, and capture\n * copy-paste events. Besides inputs and textareas, any element can be marked to be a valid\n * copy-paste target by adding 'clipboard_focus' class to it.\n */\nfunction allowFocus(elem) {\n  return elem && (FOCUS_TARGET_TAGS.hasOwnProperty(elem.tagName) ||\n    elem.hasAttribute(\"tabindex\") ||\n    elem.classList.contains('clipboard_focus'));\n}\n\nClipboard.allowFocus = allowFocus;\n\nfunction showUnavailableMenuCommandModal(action) {\n  let keys;\n  switch (action) {\n    case 'cut': {\n      keys = 'Mod+X'\n      break;\n    }\n    case 'copy': {\n      keys = 'Mod+C'\n      break;\n    }\n    case 'paste': {\n      keys = 'Mod+V'\n      break;\n    }\n    default: {\n      throw new Error(`Clipboard: unrecognized action ${action}`);\n    }\n  }\n\n  confirmModal(\n    t(\"Unavailable Command\"),\n    t(\"Got it\"),\n    () => {},\n    {\n      explanation: cssModalContent(\n        t(\n          'The {{action}} menu command is not available in this browser. You can still {{action}}' +\n          ' by using the keyboard shortcut {{shortcut}}.',\n          {\n            action,\n            shortcut: ShortcutKey(ShortcutKeyContent(getHumanKey(keys, isMac))),\n          }\n        ),\n      ),\n      hideCancel: true,\n    },\n  );\n}\n\nmodule.exports = Clipboard;\n\nconst cssModalContent = styled('div', `\n  line-height: 18px;\n`);\n","const _             = require('underscore');\nconst ko            = require('knockout');\n\nconst dom           = require('app/client/lib/dom');\nconst kd            = require('app/client/lib/koDom');\nconst koDomScrolly  = require('app/client/lib/koDomScrolly');\nconst {renderAllRows} = require('app/client/components/Printing');\nconst {isNarrowScreen} = require('app/client/ui2018/cssVars');\n\nrequire('app/client/lib/koUtil'); // Needed for subscribeInit.\n\nconst Base          = require('./Base');\nconst BaseView      = require('./BaseView');\nconst selector      = require('./CellSelector');\nconst {CopySelection} = require('./CopySelection');\nconst RecordLayout  = require('./RecordLayout');\nconst commands      = require('./commands');\nconst tableUtil     = require('../lib/tableUtil');\nconst {FieldContextMenu} = require('../ui/FieldContextMenu');\nconst {RowContextMenu} = require('../ui/RowContextMenu');\nconst {parsePasteForView} = require(\"./BaseView2\");\nconst {descriptionInfoTooltip} = require(\"../ui/tooltips\");\n\n\n/**\n * DetailView component implements a list of record layouts.\n */\nfunction DetailView(gristDoc, viewSectionModel) {\n  BaseView.call(this, gristDoc, viewSectionModel, { 'addNewRow': true });\n\n  this.cellSelector = selector.CellSelector.create(this, this);\n\n  this.viewFields = gristDoc.docModel.viewFields;\n  this._isSingle = (this.viewSection.parentKey.peek() === 'single');\n\n  //--------------------------------------------------\n  // Create and attach the DOM for the view.\n  this.recordLayout = this.autoDispose(RecordLayout.create({\n    viewSection: this.viewSection,\n    buildFieldDom: this.buildFieldDom.bind(this),\n    buildRowContextMenu : this.buildRowContextMenu.bind(this),\n    buildFieldContextMenu : this.buildFieldContextMenu.bind(this),\n    resizeCallback: () => {\n      if (!this._isSingle) {\n        this.scrolly().updateSize();\n        // Keep the cursor in view if the scrolly height resets.\n        // TODO: Ideally the original position should be kept in scroll view.\n        this.scrolly().scrollRowIntoView(this.cursor.rowIndex.peek());\n      }\n    }\n  }));\n\n  this.scrolly = this.autoDispose(ko.computed(() => {\n    if (!this.recordLayout.isEditingLayout() && !this._isSingle) {\n      return koDomScrolly.getInstance(this.viewData);\n    }\n  }));\n\n  // Reset scrolly heights when record theme changes, since it affects heights.\n  this.autoDispose(this.viewSection.themeDef.subscribe(() => {\n    var scrolly = this.scrolly();\n    if (scrolly) {\n      setTimeout(function() { scrolly.resetHeights(); }, 0);\n    }\n  }));\n\n  this.layoutBoxIdx = ko.observable(0);\n\n  //--------------------------------------------------\n  if (this._isSingle) {\n    this.detailRecord = this.autoDispose(this.tableModel.createFloatingRowModel());\n    this._updateFloatingRow();\n    this.autoDispose(this.cursor.rowIndex.subscribe(this._updateFloatingRow, this));\n    this.autoDispose(this.viewData.subscribe(this._updateFloatingRow, this));\n  } else {\n    this.detailRecord = null;\n  }\n\n  //--------------------------------------------------\n  // Construct DOM\n  this.scrollPane = null;\n  this.viewPane = this.autoDispose(this.buildDom());\n\n  //--------------------------------------------------\n  // Set up DOM event handling.\n  this._twoLastFieldIdsSelected = [null, null];\n\n  // Clicking on a detail field selects that field.\n  this.onEvent(this.viewPane, 'mousedown', '.g_record_detail_el', function(elem, event) {\n    this.viewSection.hasFocus(true);\n    var rowModel = this.recordLayout.getContainingRow(elem, this.viewPane);\n    var field = this.recordLayout.getContainingField(elem, this.viewPane);\n    commands.allCommands.setCursor.run(rowModel, field);\n    this._twoLastFieldIdsSelected.unshift(field.id());\n    this._twoLastFieldIdsSelected.pop();\n  });\n\n  // Double-clicking on a field also starts editing the field.\n  this.onEvent(this.viewPane, 'dblclick', '.g_record_detail_el', function(elem, event) {\n    this.activateEditorAtCursor();\n  });\n\n  // We authorize single click only on the value to avoid conflict with tooltip\n  this.onEvent(this.viewPane, 'click', '.g_record_detail_value', function(elem, event) {\n    var field = this.recordLayout.getContainingField(elem, this.viewPane);\n    if (\n      this._twoLastFieldIdsSelected[0] === this._twoLastFieldIdsSelected[1]\n      && !isNarrowScreen()\n      && this._canSingleClick(field)\n    ) {\n      this.activateEditorAtCursor();\n    }\n  });\n\n  //--------------------------------------------------\n  // Instantiate CommandGroups for the different modes.\n  this.autoDispose(commands.createGroup(DetailView.generalCommands, this, this.viewSection.hasFocus));\n  this.autoDispose(commands.createGroup(DetailView.fieldCommands, this, this.viewSection.hasFocus));\n  const hasSelection = this.autoDispose(ko.pureComputed(() =>\n    !this.cellSelector.isCurrentSelectType('') || this.copySelection()));\n  this.autoDispose(commands.createGroup(DetailView.selectionCommands, this, hasSelection));\n}\nBase.setBaseFor(DetailView);\n_.extend(DetailView.prototype, BaseView.prototype);\n\n\nDetailView.prototype.onTableLoaded = function() {\n  BaseView.prototype.onTableLoaded.call(this);\n  this._updateFloatingRow();\n\n  const scrolly = this.scrolly();\n  if (scrolly) {\n    scrolly.scrollToSavedPos(this.viewSection.lastScrollPos);\n  }\n};\n\nDetailView.prototype._updateFloatingRow = function() {\n  if (this.detailRecord) {\n    this.viewData.setFloatingRowModel(this.detailRecord, this.cursor.rowIndex.peek());\n  }\n};\n\n/**\n * DetailView commands.\n */\nDetailView.generalCommands = {\n  cursorUp: function() { this.cursor.fieldIndex(this.cursor.fieldIndex() - 1); },\n  cursorDown: function() { this.cursor.fieldIndex(this.cursor.fieldIndex() + 1); },\n  pageUp: function() { this.cursor.rowIndex(this.cursor.rowIndex() - 1); },\n  pageDown: function() { this.cursor.rowIndex(this.cursor.rowIndex() + 1); },\n  copy: function() { return this.copy(this.getSelection()); },\n  cut: function() { return this.cut(this.getSelection()); },\n  paste: function(pasteObj, cutCallback) {\n    return this.gristDoc.docData.bundleActions(null, () => this.paste(pasteObj, cutCallback));\n  },\n\n  editLayout: function() {\n    if (this.scrolly()) {\n      this.scrolly().scrollRowIntoView(this.cursor.rowIndex());\n    }\n    this.recordLayout.editLayout(this.cursor.rowIndex());\n  },\n};\n\nDetailView.fieldCommands = {\n  clearCardFields: function() { this._clearCardFields(); },\n  hideCardFields: function() { this._hideCardFields(); },\n};\n\nDetailView.selectionCommands = {\n  clearCopySelection: function() { this._clearCopySelection(); },\n  cancel: function() { this._clearSelection(); }\n};\n\n//----------------------------------------------------------------------\n\n\nDetailView.prototype.selectedRows = function() {\n  if (!this._isAddRow()) {\n    return [this.viewData.getRowId(this.cursor.rowIndex())];\n  }\n  return [];\n};\n\nDetailView.prototype.deleteRows = async function(rowIds) {\n const index = this.cursor.rowIndex();\n  try {\n    await BaseView.prototype.deleteRows.call(this, rowIds);\n  } finally {\n    this.cursor.rowIndex(index);\n  }\n};\n\n/**\n * Pastes the provided data at the current cursor.\n *\n * @param {Array} data - Array of arrays of data to be pasted. Each array represents a row.\n * i.e.  [[\"1-1\", \"1-2\", \"1-3\"],\n *        [\"2-1\", \"2-2\", \"2-3\"]]\n * @param {Function} cutCallback - If provided returns the record removal action needed\n *  for a cut.\n */\nDetailView.prototype.paste = async function(data, cutCallback) {\n  let pasteData = data[0][0];\n  let field = this.viewSection.viewFields().at(this.cursor.fieldIndex());\n  let isCompletePaste = (data.length === 1 && data[0].length === 1);\n\n  const richData = await parsePasteForView([[pasteData]], [field], this.gristDoc);\n  if (_.isEmpty(richData)) {\n    return;\n  }\n\n  // Array containing the paste action to which the cut action will be added if it exists.\n  const rowId = this.viewData.getRowId(this.cursor.rowIndex());\n  const action = (rowId === 'new') ? ['BulkAddRecord', [null], richData] :\n    ['BulkUpdateRecord', [rowId], richData];\n  const cursorPos = this.cursor.getCursorPos();\n\n  return this.sendPasteActions(isCompletePaste ? cutCallback : null,\n    this.prepTableActions([action]))\n    .then(results => {\n      // If a row was added, get its rowId from the action results.\n      const addRowId = (action[0] === 'BulkAddRecord' ? results[0][0] : null);\n      // Restore the cursor to the right rowId, even if it jumped.\n      this.cursor.setCursorPos({rowId: cursorPos.rowId === 'new' ? addRowId : cursorPos.rowId});\n      commands.allCommands.clearCopySelection.run();\n    });\n};\n\n/**\n * Returns a selection of the selected rows and cols.  In the case of DetailView this will just\n * be one row and one column as multiple cell selection is not supported.\n *\n * @returns {Object} CopySelection\n */\nDetailView.prototype.getSelection = function() {\n  return new CopySelection(\n    this.tableModel.tableData,\n    [this.viewData.getRowId(this.cursor.rowIndex())],\n    [this.viewSection.viewFields().at(this.cursor.fieldIndex())],\n    {}\n  );\n};\n\nDetailView.prototype.buildRowContextMenu = function(row) {\n  const rowOptions = this._getRowContextMenuOptions(row);\n  return RowContextMenu(rowOptions);\n}\n\nDetailView.prototype.buildFieldContextMenu = function(row) {\n  const rowOptions = this._getRowContextMenuOptions(row);\n  const fieldOptions = this._getFieldContextMenuOptions();\n  return FieldContextMenu(rowOptions, fieldOptions);\n}\n\n/**\n * Builds the DOM for the given field of the given row.\n * @param {MetaRowModel|String} field: Model for the field to render. For a new field being added,\n *    this may instead be an object with {isNewField:true, colRef, label, value}.\n * @param {DataRowModel} row: The record of data from which to render the given field.\n */\nDetailView.prototype.buildFieldDom = function(field, row) {\n  var self = this;\n  if (field.isNewField) {\n    return dom('div.g_record_detail_el.flexitem',\n      kd.cssClass(function() { return 'detail_theme_field_' + self.viewSection.themeDef(); }),\n      dom('div.g_record_detail_label_container',\n        dom('div.g_record_detail_label', kd.text(field.label)),\n        kd.scope(field.description, desc => desc ? descriptionInfoTooltip(desc, \"colmun\") : null)\n      ),\n      dom('div.g_record_detail_value'),\n    );\n  }\n\n  var isCellSelected = ko.pureComputed(function() {\n    return this.cursor.fieldIndex() === (field && field._index()) &&\n      this.cursor.rowIndex() === (row && row._index());\n  }, this);\n  var isCellActive = ko.pureComputed(function() {\n    return this.viewSection.hasFocus() && isCellSelected();\n  }, this);\n\n  // Whether the cell is part of an active copy-paste operation.\n  var isCopyActive = ko.computed(function() {\n    return self.copySelection() &&\n      self.copySelection().isCellSelected(row.getRowId(), field.colId());\n  });\n\n  this.autoDispose(isCellSelected.subscribe(yesNo => {\n    if (yesNo) {\n      var layoutBox = dom.findAncestor(fieldDom, '.layout_hbox');\n      this.layoutBoxIdx(_.indexOf(layoutBox.parentElement.childNodes, layoutBox));\n    }\n  }));\n  var fieldBuilder = this.fieldBuilders.at(field._index());\n  var fieldDom = dom('div.g_record_detail_el.flexitem',\n    dom.autoDispose(isCellSelected),\n    dom.autoDispose(isCellActive),\n    kd.cssClass(function() { return 'detail_theme_field_' + self.viewSection.themeDef(); }),\n    dom('div.g_record_detail_label_container',\n      dom('div.g_record_detail_label', kd.text(field.displayLabel)),\n      kd.scope(field.description, desc => desc ? descriptionInfoTooltip(desc, \"column\") : null)\n    ),\n    dom('div.g_record_detail_value',\n      kd.toggleClass('scissors', isCopyActive),\n      kd.toggleClass('record-add', row._isAddRow),\n      dom.autoDispose(isCopyActive),\n      fieldBuilder.buildDomWithCursor(row, isCellActive, isCellSelected)\n    )\n  );\n  return fieldDom;\n};\n\nDetailView.prototype.buildDom = function() {\n  return dom('div.flexvbox.flexitem',\n    // Add .detailview_single when showing a single card or while editing layout.\n    kd.toggleClass('detailview_single',\n      () => this._isSingle || this.recordLayout.isEditingLayout()),\n    // Add a marker class that editor is active - used for hiding context menu toggle.\n    kd.toggleClass('detailview_layout_editor', this.recordLayout.isEditingLayout),\n    kd.maybe(this.recordLayout.isEditingLayout, () => {\n      const rowId = this.viewData.getRowId(this.recordLayout.editIndex.peek());\n      const record = this.getRenderedRowModel(rowId);\n      return dom(\n        this.recordLayout.buildLayoutDom(record, true),\n        kd.cssClass(() => 'detail_theme_record_' + this.viewSection.themeDef()),\n        kd.cssClass('detailview_record_' + this.viewSection.parentKey.peek()),\n      );\n    }),\n    kd.maybe(() => !this.recordLayout.isEditingLayout(), () => {\n      if (!this._isSingle) {\n        return this.scrollPane = dom('div.detailview_scroll_pane.flexitem',\n          kd.scrollChildIntoView(this.cursor.rowIndex),\n          dom.onDispose(() => {\n            // Save the previous scroll values to the section.\n            if (this.scrolly()) {\n              this.viewSection.lastScrollPos = this.scrolly().getScrollPos();\n            }\n          }),\n          koDomScrolly.scrolly(this.viewData, {fitToWidth: true},\n            row => this.makeRecord(row)),\n\n          kd.maybe(this._isPrinting, () =>\n            renderAllRows(this.tableModel, this.sortedRows.getKoArray().peek(), row =>\n              this.makeRecord(row))\n          ),\n        );\n      } else {\n        return dom(\n          this.makeRecord(this.detailRecord),\n          kd.domData('itemModel', this.detailRecord),\n          kd.hide(() => this.cursor.rowIndex() === null)\n        );\n      }\n    }),\n  );\n};\n\n/** @inheritdoc */\nDetailView.prototype.buildTitleControls = function() {\n  // Hide controls if this is a card list section, or if the section has a scroll cursor link, since\n  // the controls can be confusing in this case.\n  // Note that the controls should still be visible with a filter link.\n  const showControls = ko.computed(() => {\n    if (!this._isSingle || this.recordLayout.layoutEditor()) { return false; }\n    const linkingState = this.viewSection.linkingState();\n    return !(linkingState && Boolean(linkingState.cursorPos));\n  });\n  return dom('div',\n    dom.autoDispose(showControls),\n\n    kd.toggleClass('record-layout-editor', this.recordLayout.layoutEditor),\n    kd.maybe(this.recordLayout.layoutEditor, (editor) => editor.buildEditorDom()),\n\n    kd.maybe(showControls, () => dom('div.grist-single-record__menu.flexhbox.flexnone',\n      dom('div.grist-single-record__menu__count.flexitem',\n        // Total should not include the add record row\n        kd.text(() => this._isAddRow() ? 'Add record' :\n          `${this.cursor.rowIndex() + 1} of ${this.getLastDataRowIndex() + 1}`)\n      ),\n      dom('div.btn-group.btn-group-xs',\n        dom('div.btn.btn-default.detail-left',\n          dom('span.glyphicon.glyphicon-chevron-left'),\n          dom.on('click', () => { this.cursor.rowIndex(this.cursor.rowIndex() - 1); }),\n          kd.toggleClass('disabled', () => this.cursor.rowIndex() === 0)\n        ),\n        dom('div.btn.btn-default.detail-right',\n          dom('span.glyphicon.glyphicon-chevron-right'),\n          dom.on('click', () => { this.cursor.rowIndex(this.cursor.rowIndex() + 1); }),\n          kd.toggleClass('disabled', () => this.cursor.rowIndex() >= this.viewData.all().length - 1)\n        )\n      ),\n      dom('div.btn-group.btn-group-xs.detail-add-grp',\n        dom('div.btn.btn-default.detail-add-btn',\n          dom('span.glyphicon.glyphicon-plus'),\n          dom.on('click', () => {\n            let addRowIndex = this.viewData.getRowIndex('new');\n            this.cursor.rowIndex(addRowIndex);\n          }),\n          kd.toggleClass('disabled', () => this.viewData.getRowId(this.cursor.rowIndex()) === 'new')\n        )\n      )\n    ))\n  );\n};\n\n\n/** @inheritdoc */\nDetailView.prototype.onResize = function() {\n  var scrolly = this.scrolly();\n  if (scrolly) {\n    scrolly.scheduleUpdateSize();\n  }\n};\n\n/** @inheritdoc */\nDetailView.prototype.onRowResize = function(rowModels) {\n  var scrolly = this.scrolly();\n  if (scrolly) {\n    scrolly.resetItemHeights(rowModels);\n  }\n};\n\nDetailView.prototype.makeRecord = function(record) {\n  return dom(\n    this.recordLayout.buildLayoutDom(record),\n    kd.cssClass(() => 'detail_theme_record_' + this.viewSection.themeDef()),\n    this.comparison ? kd.cssClass(() => {\n      const rowType = this.extraRows.getRowType(record.id());\n      return rowType && `diff-${rowType}` || '';\n    }) : null,\n    kd.toggleClass('active', () => (this.cursor.rowIndex() === record._index() && this.viewSection.hasFocus())),\n    kd.toggleClass('selected', () => (this.cursor.rowIndex() === record._index()  && !this.viewSection.hasFocus())),\n    // 'detailview_record_single' or 'detailview_record_detail' doesn't need to be an observable,\n    // since a change to parentKey would cause a separate call to makeRecord.\n    kd.cssClass('detailview_record_' + this.viewSection.parentKey.peek())\n  );\n};\n\n/**\n * Extends BaseView getRenderedRowModel. Called to obtain the rowModel for the given rowId.\n * Returns the rowModel if it is rendered in the current view type, otherwise returns null.\n */\nDetailView.prototype.getRenderedRowModel = function(rowId) {\n  if (this.detailRecord) {\n    return this.detailRecord.getRowId() === rowId ? this.detailRecord : null;\n  } else {\n    return this.viewData.getRowModel(rowId);\n  }\n};\n\n/**\n * Returns a boolean indicating whether the given index is the index of the add row.\n * Index defaults to the current index of the cursor.\n */\nDetailView.prototype._isAddRow = function(index = this.cursor.rowIndex()) {\n  return this.viewData.getRowId(index) === 'new';\n};\n\nDetailView.prototype.scrollToCursor = function(sync = true) {\n  if (!this.scrollPane) { return Promise.resolve(); }\n  return kd.doScrollChildIntoView(this.scrollPane, this.cursor.rowIndex(), sync);\n}\n\nDetailView.prototype._duplicateRows = async function() {\n  const addRowIds = await BaseView.prototype._duplicateRows.call(this);\n  this.setCursorPos({rowId: addRowIds[0]})\n}\n\nDetailView.prototype._canSingleClick = function(field) {\n  // we can't simple click if :\n  // - the field is a formula\n  // - the field is toggle (switch or checkbox)\n  if (\n    field.column().isRealFormula() || field.column().hasTriggerFormula()\n    || (\n      field.column().pureType() === \"Bool\"\n      && [\"Switch\", \"CheckBox\"].includes(field.column().visibleColFormatter().widgetOpts.widget)\n    )\n  ) {\n    return false;\n  }\n  return true;\n};\n\nDetailView.prototype._clearCardFields = function() {\n  const {isFormula} = this._getFieldContextMenuOptions();\n  if (isFormula === true) {\n    this.activateEditorAtCursor({init: ''});\n  } else {\n    const clearAction = tableUtil.makeDeleteAction(this.getSelection());\n    if (clearAction) {\n      this.gristDoc.docData.sendAction(clearAction);\n    }\n  }\n};\n\nDetailView.prototype._hideCardFields = function() {\n  const selection = this.getSelection();\n  const actions = selection.fields.map(field => ['RemoveRecord', field.id()]);\n  return this.gristDoc.docModel.viewFields.sendTableActions(\n    actions,\n    `Hide fields ${actions.map(a => a[1]).join(', ')} ` +\n      `from ${this.tableModel.tableData.tableId}.`\n  );\n}\n\nDetailView.prototype._clearSelection = function() {\n  this.copySelection(null);\n  this.cellSelector.setToCursor();\n};\n\nDetailView.prototype._clearCopySelection = function() {\n  this.copySelection(null);\n};\n\nDetailView.prototype._getRowContextMenuOptions = function(row) {\n  return {\n    disableInsert: Boolean(\n      this.gristDoc.isReadonly.get() ||\n      this.viewSection.disableAddRemoveRows() ||\n      this.tableModel.tableMetaRow.onDemand()\n    ),\n    disableDelete: Boolean(\n      this.gristDoc.isReadonly.get() ||\n      this.viewSection.disableAddRemoveRows() ||\n      row._isAddRow()\n    ),\n    isViewSorted: this.viewSection.activeSortSpec.peek().length > 0,\n    numRows: this.getSelection().rowIds.length,\n  };\n}\n\nDetailView.prototype._getFieldContextMenuOptions = function() {\n  const selection = this.getSelection();\n  return {\n    disableModify: Boolean(selection.fields[0]?.disableModify.peek()),\n    isReadonly: this.gristDoc.isReadonly.get() || this.isPreview,\n    isFormula: Boolean(selection.fields[0]?.column.peek().isRealFormula.peek()),\n  };\n}\n\nmodule.exports = DetailView;\n","var dispose = require('../lib/dispose');\nvar dom = require('../lib/dom');\nvar ValidationPanel = require('./ValidationPanel');\n\n/**\n * Document level configuration settings.\n * @param {Object}    options.gristDoc   A reference to the GristDoc object\n * @param {Function}  docName            A knockout observable containing a String\n */\nfunction DocConfigTab(options, docName) {\n  this.gristDoc = options.gristDoc;\n\n  // Panel to configure validation rules.\n  this.validationPanel = this.autoDispose(ValidationPanel.create({gristDoc: this.gristDoc}));\n\n  this.autoDispose(\n    this.gristDoc.addOptionsTab(\n      'Validate Data',\n      dom('span.glyphicon.glyphicon-check'),\n      this.buildValidationsConfigDomObj(),\n      { 'shortLabel': 'Valid' }\n    )\n  );\n}\ndispose.makeDisposable(DocConfigTab);\n\nDocConfigTab.prototype.buildValidationsConfigDomObj = function() {\n  return [{\n    'buildDom': this.validationPanel.buildDom.bind(this.validationPanel),\n    'keywords': ['document', 'validations', 'rules', 'validate']\n  }];\n};\n\nmodule.exports = DocConfigTab;\n","/* globals $, window */\n\nconst _         = require('underscore');\nconst ko        = require('knockout');\nconst debounce = require('lodash/debounce');\n\nconst gutil             = require('app/common/gutil');\nconst BinaryIndexedTree = require('app/common/BinaryIndexedTree');\nconst {Sort} = require('app/common/SortSpec');\n\nconst dom           = require('../lib/dom');\nconst kd            = require('../lib/koDom');\nconst kf            = require('../lib/koForm');\nconst koDomScrolly  = require('../lib/koDomScrolly');\nconst tableUtil     = require('../lib/tableUtil');\nconst {addToSort, sortBy}   = require('../lib/sortUtil');\n\nconst commands      = require('./commands');\nconst viewCommon    = require('./viewCommon');\nconst Base          = require('./Base');\nconst BaseView      = require('./BaseView');\nconst selector      = require('./CellSelector');\nconst {CopySelection} = require('./CopySelection');\nconst {SelectionSummary} = require('./SelectionSummary');\nconst koUtil      = require('app/client/lib/koUtil');\nconst convert       = require('color-convert');\n\nconst {renderAllRows} = require('app/client/components/Printing');\nconst {reportWarning} = require('app/client/models/errors');\nconst {reportUndo} = require('app/client/components/modals');\n\nconst {onDblClickMatchElem} = require('app/client/lib/dblclick');\n\n// Grist UI Components\nconst {dom: grainjsDom, Holder, Computed} = require('grainjs');\nconst {closeRegisteredMenu, menu} = require('../ui2018/menus');\nconst {calcFieldsCondition} = require('../ui/GridViewMenus');\nconst {ColumnAddMenu, ColumnContextMenu, MultiColumnMenu, freezeAction} = require('../ui/GridViewMenus');\nconst {RowContextMenu} = require('../ui/RowContextMenu');\n\nconst {setPopupToCreateDom} = require('popweasel');\nconst {CellContextMenu} = require('app/client/ui/CellContextMenu');\nconst {testId, isNarrowScreen} = require('app/client/ui2018/cssVars');\nconst {contextMenu} = require('app/client/ui/contextMenu');\nconst {mouseDragMatchElem} = require('app/client/ui/mouseDrag');\nconst {menuToggle} = require('app/client/ui/MenuToggle');\nconst {descriptionInfoTooltip, showTooltip} = require('app/client/ui/tooltips');\nconst {parsePasteForView} = require(\"./BaseView2\");\nconst {NEW_FILTER_JSON} = require('app/client/models/ColumnFilter');\nconst {CombinedStyle} = require(\"app/client/models/Styles\");\nconst {buildRenameColumn} = require('app/client/ui/ColumnTitle');\nconst {makeT} = require('app/client/lib/localization');\n\nconst t = makeT('GridView');\n\n// A threshold for interpreting a motionless click as a click rather than a drag.\n// Anything longer than this time (in milliseconds) should be interpreted as a drag\n// even if there is no movement.\n// This is relevant for distinguishing clicking an already-selected column in order\n// to rename it, and starting to drag that column and then deciding to leave it where\n// it was.\nconst SHORT_CLICK_IN_MS = 500;\n\n// size of the plus width ()\nconst PLUS_WIDTH = 40;\n// size of the row number field (we assume 4rem)\nconst ROW_NUMBER_WIDTH = 52;\n\n/**\n * GridView component implements the view of a grid of cells.\n */\nfunction GridView(gristDoc, viewSectionModel, isPreview = false) {\n  BaseView.call(this, gristDoc, viewSectionModel, { isPreview, 'addNewRow': true });\n\n  this.viewSection = viewSectionModel;\n\n  //--------------------------------------------------\n  // Observables local to this view\n\n  // Some observables/variables used for select and drag/drop\n  this.dragX = ko.observable(0); // x coord of mouse during drag mouse down\n  this.dragY = ko.observable(0); // ^ for y coord\n  this.rowShadowAdjust = 0; // pixel dist from mouse click y-coord and the clicked row's top offset\n  this.colShadowAdjust = 0; // ^ for x-coord and clicked col's left offset\n  this.scrollLeft = ko.observable(0);\n  this.isScrolledLeft = this.autoDispose(ko.computed(() => this.scrollLeft() > 0));\n  this.scrollTop = ko.observable(0);\n  this.isScrolledTop = this.autoDispose(ko.computed(() => this.scrollTop() > 0));\n\n  this.cellSelector = selector.CellSelector.create(this, this);\n\n  if (!isPreview) {\n    // Disable summaries in import previews, for now.\n    this.selectionSummary = SelectionSummary.create(this,\n      this.cellSelector, this.tableModel.tableData, this.sortedRows, this.viewSection.viewFields);\n  }\n\n  this.colMenuTargets = {}; // Reference from column ref to its menu target dom\n\n  this.selectedColumns = this.autoDispose(ko.pureComputed(() => {\n    const result = this.viewSection.viewFields().all().filter((field, index) => {\n      // During column removal or restoring (with undo), some columns fields\n      // might be disposed.\n      if (field.isDisposed() || field.column().isDisposed()) { return false; }\n      return this.cellSelector.containsCol(index);\n    });\n    return result;\n  }));\n\n  // Cache of column right offsets, used to determine the col select range\n  this.colRightOffsets = this.autoDispose(ko.computed(() => {\n    let fields = this.viewSection.viewFields();\n    let tree = new BinaryIndexedTree();\n    tree.fillFromValues(fields.all().map(field => field.widthDef()));\n    return tree;\n  }));\n\n  // Create observable holding current rowIndex that the view should be scrolled to.\n  // We will always notify, because we want to scroll to the row even when only the\n  // column is changed (in situation when the row is not visible).\n  this.visibleRowIndex = ko.observable(this.cursor.rowIndex()).extend({notify: 'always'});\n  // Create grain's Computed with current cursor position (we need it to examine position\n  // before the change and after).\n  this.currentPosition = Computed.create(this, (use) => ({\n    rowIndex : use(this.cursor.rowIndex),\n    fieldIndex : use(this.cursor.fieldIndex)\n  }));\n  // Add listener, and check if the cursor is indeed changed, if so, update the row\n  // and scroll it into view (using kd.scrollChildIntoView in buildDom function).\n  this.autoDispose(this.currentPosition.addListener((cur, prev) => {\n    if (cur.rowIndex !== prev.rowIndex || cur.fieldIndex !== prev.fieldIndex) {\n      this.visibleRowIndex(cur.rowIndex);\n    }\n  }));\n\n  this.autoDispose(this.cursor.fieldIndex.subscribe(idx => {\n    // If there are some frozen columns.\n    if (this.numFrozen.peek() && idx < this.numFrozen.peek()) { return; }\n\n    const offset = this.colRightOffsets.peek().getSumTo(idx);\n\n    const rowNumsWidth = this._cornerDom.clientWidth;\n    const viewWidth = this.scrollPane.clientWidth - rowNumsWidth;\n    const fieldWidth = this.colRightOffsets.peek().getValue(idx) + 1; // +1px border\n\n    // Left and right pixel edge of 'viewport', starting from edge of row nums.\n    const frozenWidth = this.frozenWidth.peek();\n    const leftEdge = this.scrollPane.scrollLeft + frozenWidth;\n    const rightEdge = leftEdge + (viewWidth - frozenWidth);\n\n    //If cell doesn't fit onscreen, scroll to fit\n    const scrollShift = offset - gutil.clamp(offset, leftEdge, rightEdge - fieldWidth);\n    this.scrollPane.scrollLeft = this.scrollPane.scrollLeft + scrollShift;\n  }));\n\n  this.isPreview = isPreview;\n\n  // Some observables for the scroll markers that show that the view is cut off on a side.\n  this.scrollShadow = {\n    left: this.isScrolledLeft,\n    top: this.isScrolledTop\n  };\n\n  //--------------------------------------------------\n  // Set up row and column context menus.\n  this.ctxMenuHolder = Holder.create(this);\n\n  //--------------------------------------------------\n  // Set frozen columns variables\n\n  // keep track of the width for this component\n  this.width = ko.observable(0);\n  // helper for clarity\n  this.numFrozen = this.viewSection.numFrozen;\n  // calculate total width of all frozen columns\n  this.frozenWidth = this.autoDispose(ko.pureComputed(() => this.colRightOffsets().getSumTo(this.numFrozen())));\n  // show frozenLine when have some frozen columns and not scrolled left\n  this.frozenLine = this.autoDispose(ko.pureComputed(() => this.numFrozen() && !this.isScrolledLeft()));\n  // even if some columns are frozen, we still want to move them left\n  // when screen is too narrow - here we will calculate how much space\n  // is needed to move all the frozen columns left in order to show some\n  // unfrozen columns to user (by default we will try to show at least one not\n  // frozen column and a plus button)\n  this.frozenOffset = this.autoDispose(ko.computed(() => {\n    // get the last field\n    const fields = this.viewSection.viewFields().all();\n    const lastField = fields[fields.length-1];\n    // get the last field width (or zero - grid can have zero columns)\n    const revealWidth = lastField ? lastField.widthDef() : 0;\n    // calculate the offset: start from zero, then move all left to hide frozen columns,\n    // then to right to fill whole width, then to left to reveal last column and plus button\n    const initialOffset = -this.frozenWidth() - ROW_NUMBER_WIDTH + this.width() - revealWidth - PLUS_WIDTH;\n    // Final check - we actually don't want to have\n    // the split (between frozen and normal columns) be moved left too far,\n    // it should stop at the middle of the available grid space (whole width - row number width).\n    // This can happen when last column is too wide, and we are not able to show it in a full width.\n    // To calculate the middle point: hide all frozen columns (by moving them maximum to the left)\n    // and then move them to right by half width of the section.\n    const middleOffset = -this.frozenWidth() - ROW_NUMBER_WIDTH + this.width() / 2;\n    // final offset is the bigger number of those two (offsets are negative - so take\n    // the number that is closer to 0)\n    const offset = Math.floor(Math.max(initialOffset, middleOffset));\n    // offset must be negative (we are moving columns left), if we ended up moving\n    // frozen columns to the right, don't move them at all\n    return offset > 0 ? 0 : Math.abs(offset);\n  }));\n  // observable for left scroll - but return left only when columns are frozen\n  // this will be used to move frozen border alongside with the scrollpane\n  this.frozenScrollOffset = this.autoDispose(ko.computed(() => this.numFrozen() ? this.scrollLeft() : 0));\n  // observable that will indicate if shadow is needed on top of frozen columns\n  this.frozenShadow = this.autoDispose(ko.computed(() => {\n    return this.numFrozen() && this.frozenOffset() && this.isScrolledLeft();\n  }));\n  // calculate column right offsets\n  this.frozenPositions = this.autoDispose(this.viewSection.viewFields().map(function(field){\n    return ko.pureComputed(() => this.colRightOffsets().getSumTo(field._index()));\n  }, this));\n  // calculate frozen state for all columns\n  this.frozenMap = this.autoDispose(this.viewSection.viewFields().map(function(field){\n    return ko.pureComputed(() => field._index() < this.numFrozen());\n  }, this));\n\n  // Holds column index that is hovered, works only in full-edit formula mode.\n  this.hoverColumn = ko.observable(-1);\n\n  // Checks if there is active formula editor for a column in this table.\n  this.editingFormula = ko.pureComputed(() => {\n    const isEditing = this.gristDoc.docModel.editingFormula();\n    if (!isEditing) { return false; }\n    return this.viewSection.viewFields().all().some(field => field.editingFormula());\n  });\n\n  // Debounced method to change current hover column, this is needed\n  // as mouse when moved from field to field will switch the hover-column\n  // observable from current index to -1 and then immediately back to current index.\n  // With debounced version, call to set -1 that is followed by call to set back to the field index\n  // will be discarded.\n  this.changeHover = debounce((index) => {\n    if (this.isDisposed()) { return; }\n    if (this.editingFormula()) {\n      this.hoverColumn(index);\n    }\n  }, 0);\n\n  //--------------------------------------------------\n  // Create and attach the DOM for the view.\n\n  this.isColSelected = this.autoDispose(this.viewSection.viewFields().map(function(field) {\n    return this._createColSelectedObs(field);\n  }, this));\n  this.header = null;\n  this._cornerDom = null;\n  // dom for adding new column - used by freeze calculation\n  this._modField = null;\n  this.scrollPane = null;\n  this.viewPane = this.autoDispose(this.buildDom());\n  this.attachSelectorHandlers();\n  this.scrolly = koDomScrolly.getInstance(this.viewData);\n\n  //--------------------------------------------------\n  // Set up DOM event handling.\n  onDblClickMatchElem(this.scrollPane, '.field:not(.column_name)', () => this.activateEditorAtCursor());\n  if (!this.isPreview) {\n    grainjsDom.onMatchElem(this.scrollPane, '.field:not(.column_name)', 'contextmenu', (ev, elem) => this.onCellContextMenu(ev, elem), {useCapture: true});\n  }\n  this.onEvent(this.scrollPane, 'scroll', this.onScroll);\n\n  //--------------------------------------------------\n  // Command group implementing all grid level commands (except cancel)\n  this.autoDispose(commands.createGroup(GridView.gridCommands, this, this.viewSection.hasFocus));\n  // Cancel command is registered conditionally, only when there is an active\n  // cell selection. This command is also used by Raw Data Views, to close the Grid popup.\n  const hasSelection = this.autoDispose(ko.pureComputed(() =>\n    !this.cellSelector.isCurrentSelectType('') || this.copySelection()));\n  this.autoDispose(commands.createGroup(GridView.selectionCommands, this, hasSelection));\n\n  // Timer to allow short, otherwise non-actionable clicks on column names to trigger renaming.\n  this._colClickTime = 0;  // Units: milliseconds.\n}\nBase.setBaseFor(GridView);\n_.extend(GridView.prototype, BaseView.prototype);\n\n\n\n// ======================================================================================\n// GRID-LEVEL COMMANDS\n\n// Moved out of all commands to support Raw Data Views (which use this command to close\n// the Grid popup).\nGridView.selectionCommands = {\n  clearCopySelection: function() { this._clearCopySelection(); },\n  cancel: function() { this.clearSelection(); }\n}\n\nGridView.gridCommands = {\n  cursorUp: function() {\n    // This conditional exists so that when users have the cursor in the top row but are not\n    // scrolled to the top i.e. in the case of a tall row, pressing up again will scroll the\n    // pane to the top.\n    if (this.cursor.rowIndex() === 0) {\n      this.scrollPane.scrollTop = 0;\n    }\n    this.cursor.rowIndex(this.cursor.rowIndex() - 1);\n  },\n  shiftDown: function() {\n    this._shiftSelect(1, this.cellSelector.row.end, selector.COL, this.getLastDataRowIndex());\n  },\n  shiftUp: function() {\n    this._shiftSelect(-1, this.cellSelector.row.end, selector.COL, this.getLastDataRowIndex());\n  },\n  shiftRight: function() {\n    this._shiftSelect(1, this.cellSelector.col.end, selector.ROW,\n                      this.viewSection.viewFields().peekLength - 1);\n  },\n  shiftLeft: function() {\n    this._shiftSelect(-1, this.cellSelector.col.end, selector.ROW,\n                      this.viewSection.viewFields().peekLength - 1);\n  },\n  ctrlShiftDown: function () {\n    this._shiftSelectUntilContent(selector.COL, 1, this.cellSelector.row.end, this.getLastDataRowIndex());\n  },\n  ctrlShiftUp: function () {\n    this._shiftSelectUntilContent(selector.COL, -1, this.cellSelector.row.end, this.getLastDataRowIndex());\n  },\n  ctrlShiftRight: function () {\n    this._shiftSelectUntilContent(selector.ROW, 1, this.cellSelector.col.end,\n      this.viewSection.viewFields().peekLength - 1);\n  },\n  ctrlShiftLeft: function () {\n    this._shiftSelectUntilContent(selector.ROW, -1, this.cellSelector.col.end,\n      this.viewSection.viewFields().peekLength - 1);\n  },\n  fillSelectionDown: function() { this.fillSelectionDown(); },\n  selectAll: function() { this.selectAll(); },\n\n  fieldEditSave: function() { this.cursor.rowIndex(this.cursor.rowIndex() + 1); },\n  // Re-define editField after fieldEditSave to make it take precedence for the Enter key.\n  editField: function() { closeRegisteredMenu(); this.scrollToCursor(true); this.activateEditorAtCursor(); },\n\n  insertFieldBefore: function() { this.insertColumn(this.cursor.fieldIndex()); },\n  insertFieldAfter: function() { this.insertColumn(this.cursor.fieldIndex() + 1); },\n  renameField: function() { this.renameColumn(this.cursor.fieldIndex()); },\n  hideFields: function() { this.hideFields(this.getSelection()); },\n  deleteFields: function() {\n    const selection = this.getSelection();\n    const count = selection.colIds.length;\n    this.deleteColumns(selection).then((result) => {\n      if (result !== false) {\n        reportUndo(this.gristDoc, `You deleted ${count} column${count > 1 ? 's' : ''}.`);\n      }\n    });\n  },\n  clearValues: function() { this.clearValues(this.getSelection()); },\n  clearColumns: function() { this._clearColumns(this.getSelection()); },\n  convertFormulasToData: function() { this._convertFormulasToData(this.getSelection()); },\n  copy: function() { return this.copy(this.getSelection()); },\n  cut: function() { return this.cut(this.getSelection()); },\n  paste: async function(pasteObj, cutCallback) {\n    await this.gristDoc.docData.bundleActions(null, () => this.paste(pasteObj, cutCallback));\n    await this.scrollToCursor(false);\n  },\n  sortAsc: function() {\n    sortBy(this.viewSection.activeSortSpec, this.currentColumn().getRowId(), Sort.ASC);\n  },\n  sortDesc: function() {\n    sortBy(this.viewSection.activeSortSpec, this.currentColumn().getRowId(), Sort.DESC);\n  },\n  addSortAsc: function() {\n    addToSort(this.viewSection.activeSortSpec, this.currentColumn().getRowId(), Sort.ASC);\n  },\n  addSortDesc: function() {\n    addToSort(this.viewSection.activeSortSpec, this.currentColumn().getRowId(), Sort.DESC);\n  },\n  toggleFreeze: function() {\n    // get column selection\n    const selection = this.getSelection();\n    // convert it menu option\n    const options = this._getColumnMenuOptions(selection);\n    // generate action that is available for freeze toggle\n    const action = freezeAction(options);\n    // if no action, do nothing\n    if (!action) { return; }\n    // if grist document is in readonly - simply change the value\n    // without saving\n    if (this.gristDoc.isReadonly.get()) {\n      this.viewSection.rawNumFrozen(action.numFrozen);\n      return;\n    }\n    this.viewSection.rawNumFrozen.setAndSave(action.numFrozen);\n  }\n};\n\nGridView.prototype.onTableLoaded = function() {\n  BaseView.prototype.onTableLoaded.call(this);\n  this.onScroll();\n\n  // Initialize scroll position.\n  this.scrollPane.scrollLeft = this.viewSection.lastScrollPos.scrollLeft;\n  this.scrolly.scrollToSavedPos(this.viewSection.lastScrollPos);\n};\n\n/**\n * Update the bounds of the cell selector's selected range for Shift+Direction keyboard shortcuts.\n * @param {integer} step - amount to increase/decrease the select bound\n * @param {Observable} selectObs - observable to change\n * @exemptType {Selector type string} - selector type to noop on\n     IE: Shift + Up/Down should noop if columns are selected. And vice versa for rows.\n * @param {integer} maxVal - maximum value allowed for the selectObs\n **/\nGridView.prototype._shiftSelect = function(step, selectObs, exemptType, maxVal) {\n  console.assert(exemptType === selector.ROW || exemptType === selector.COL);\n  if (this.cellSelector.isCurrentSelectType(exemptType)) return;\n  if (this.cellSelector.isCurrentSelectType(selector.NONE)) {\n    this.cellSelector.currentSelectType(selector.CELL);\n  }\n  var newVal = gutil.clamp(selectObs() + step, 0, maxVal);\n  selectObs(newVal);\n};\n\nGridView.prototype._shiftSelectUntilContent = function(type, direction, selectObs, maxVal) {\n  const selection = {\n    colStart: this.cellSelector.col.start(),\n    colEnd: this.cellSelector.col.end(),\n    rowStart: this.cellSelector.row.start(),\n    rowEnd: this.cellSelector.row.end(),\n  };\n\n  const steps = this._stepsToContent(type, direction, selection, maxVal);\n  if (steps > 0) { this._shiftSelect(direction * steps, selectObs, type, maxVal); }\n}\n\nGridView.prototype._stepsToContent = function (type, direction, selection, maxVal) {\n  const {colEnd: colEnd, rowEnd: rowEnd} = selection;\n  let selectionData;\n\n  const cursorCol = this.cursor.fieldIndex();\n  const cursorRow = this.cursor.rowIndex();\n\n  if (type === selector.ROW && direction > 0) {\n    if (colEnd + 1 > maxVal) { return 0; }\n\n    selectionData = this._selectionData({colStart: colEnd, colEnd: maxVal, rowStart: cursorRow, rowEnd: cursorRow});\n  } else if (type === selector.ROW && direction < 0) {\n    if (colEnd - 1 < 0) { return 0; }\n\n    selectionData = this._selectionData({colStart: 0, colEnd, rowStart: cursorRow, rowEnd: cursorRow});\n  } else if (type === selector.COL && direction > 0) {\n    if (rowEnd + 1 > maxVal) { return 0; }\n\n    selectionData = this._selectionData({colStart: cursorCol, colEnd: cursorCol, rowStart: rowEnd, rowEnd: maxVal});\n  } else if (type === selector.COL && direction < 0) {\n    if (rowEnd - 1 > maxVal) { return 0; }\n\n    selectionData = this._selectionData({colStart: cursorCol, colEnd: cursorCol, rowStart: 0, rowEnd});\n  }\n\n  const {fields, rowIndices} = selectionData;\n  if (type === selector.ROW && direction < 0) {\n    // When moving selection left, we step through fields in reverse order.\n    fields.reverse();\n  }\n  if (type === selector.COL && direction < 0) {\n    // When moving selection up, we step through rows in reverse order.\n    rowIndices.reverse();\n  }\n\n  const colValuesByIndex = {};\n  for (const field of fields) {\n    const displayColId = field.displayColModel.peek().colId.peek();\n    colValuesByIndex[field._index()] = this.tableModel.tableData.getColValues(displayColId);\n  }\n\n  let steps = 0;\n\n  if (type === selector.ROW) {\n    const rowIndex = rowIndices[0];\n    const isLastColEmpty = this._isCellValueEmpty(colValuesByIndex[colEnd][rowIndex]);\n    const isNextColEmpty = this._isCellValueEmpty(colValuesByIndex[colEnd + direction][rowIndex]);\n    const shouldStopOnEmptyValue = !isLastColEmpty && !isNextColEmpty;\n    for (let i = 1; i < fields.length; i++) {\n      const hasEmptyValues = this._isCellValueEmpty(colValuesByIndex[fields[i]._index()][rowIndex]);\n      if (hasEmptyValues && shouldStopOnEmptyValue) {\n        return steps;\n      } else if (!hasEmptyValues && !shouldStopOnEmptyValue) {\n        return steps + 1;\n      }\n\n      steps += 1;\n    }\n  } else {\n    const colValues = colValuesByIndex[fields[0]._index()];\n    const isLastRowEmpty = this._isCellValueEmpty(colValues[rowIndices[0]]);\n    const isNextRowEmpty = this._isCellValueEmpty(colValues[rowIndices[1]]);\n    const shouldStopOnEmptyValue = !isLastRowEmpty && !isNextRowEmpty;\n    for (let i = 1; i < rowIndices.length; i++) {\n      const hasEmptyValues = this._isCellValueEmpty(colValues[rowIndices[i]]);\n      if (hasEmptyValues && shouldStopOnEmptyValue) {\n        return steps;\n      } else if (!hasEmptyValues && !shouldStopOnEmptyValue) {\n        return steps + 1;\n      }\n\n      steps += 1;\n    }\n  }\n\n  return steps;\n}\n\nGridView.prototype._selectionData = function({colStart, colEnd, rowStart, rowEnd}) {\n  const fields = [];\n  for (let i = colStart; i <= colEnd; i++) {\n    const field = this.viewSection.viewFields().at(i);\n    if (!field) { continue; }\n\n    fields.push(field);\n  }\n\n  const rowIndices = [];\n  for (let i = rowStart; i <= rowEnd; i++) {\n    const rowId = this.viewData.getRowId(i);\n    if (!rowId) { continue; }\n\n    rowIndices.push(this.tableModel.tableData.getRowIdIndex(rowId));\n  }\n\n  return {fields, rowIndices};\n}\n\nGridView.prototype._isCellValueEmpty = function(value) {\n  return value === null || value === undefined || value === '' || value === 'false';\n}\n\n/**\n * Pastes the provided data at the current cursor.\n *\n * TODO: Handle the edge case where more columns are pasted than available.\n *\n * @param {Array} data - Array of arrays of data to be pasted. Each array represents a row.\n * i.e.  [[\"1-1\", \"1-2\", \"1-3\"],\n *        [\"2-1\", \"2-2\", \"2-3\"]]\n * @param {Function} cutCallback - If provided returns the record removal action needed for\n *  a cut.\n */\nGridView.prototype.paste = async function(data, cutCallback) {\n  // TODO: If pasting into columns by which this view is sorted, rows may jump. It is still better\n  // to allow it, but we should \"freeze\" the affected rows to prevent them from jumping, until the\n  // user re-applies the sort manually. (This is a particularly bad experience when rows get\n  // dispersed by the sorting after paste.) We do attempt to keep the cursor in the same row as\n  // before even if it jumped. Note when addressing it: currently selected rows should be treated\n  // as frozen (and get marked as unsorted if necessary) for any update even if the update comes\n  // from a different peer.\n\n  // convert row-wise data to column-wise so that it better resembles a user action\n  let pasteData = _.unzip(data);\n  let pasteHeight = pasteData[0].length;\n  let pasteWidth = pasteData.length;\n  // figure out the size of the paste area\n  let outputHeight = Math.max(gutil.roundDownToMultiple(this.cellSelector.rowCount(), pasteHeight), pasteHeight);\n  let outputWidth = Math.max(gutil.roundDownToMultiple(this.cellSelector.colCount(), pasteWidth), pasteWidth);\n  // get the row ids that cover the paste\n  let topIndex = this.cellSelector.rowLower();\n  let updateRowIndices = _.range(topIndex, topIndex + outputHeight);\n  let updateRowIds = updateRowIndices.map(r => this.viewData.getRowId(r));\n  // get the col ids that cover the paste\n  let leftIndex = this.cellSelector.colLower();\n  let updateColIndices = _.range(leftIndex, leftIndex + outputWidth);\n\n  pasteData = gutil.growMatrix(pasteData, updateColIndices.length, updateRowIds.length);\n\n  let fields = this.viewSection.viewFields().peek();\n  let pasteFields = updateColIndices.map(i => fields[i] || null);\n\n  const richData = await parsePasteForView(pasteData, pasteFields, this.gristDoc);\n  let actions = this._createBulkActionsFromPaste(updateRowIds, richData);\n\n  if (actions.length > 0) {\n    let cursorPos = this.cursor.getCursorPos();\n    return this.sendPasteActions(cutCallback, actions)\n    .then(results => {\n      // If rows were added, get their rowIds from the action results.\n      let addRowIds = (actions[0][0] === 'BulkAddRecord' ? results[0] : []);\n      console.assert(addRowIds.length <= updateRowIds.length,\n        `Unexpected number of added rows: ${addRowIds.length} of ${updateRowIds.length}`);\n      let newRowIds = updateRowIds.slice(0, updateRowIds.length - addRowIds.length)\n        .concat(addRowIds);\n\n      // Restore the cursor to the right rowId, even if it jumped.\n      this.cursor.setCursorPos({rowId: cursorPos.rowId === 'new' ? addRowIds[0] : cursorPos.rowId});\n\n      // Restore the selection if it would select the correct rows.\n      let topRowIndex = this.viewData.getRowIndex(newRowIds[0]);\n      if (newRowIds.every((r, i) => r === this.viewData.getRowId(topRowIndex + i))) {\n        this.cellSelector.selectArea(topRowIndex, leftIndex,\n          topRowIndex + outputHeight - 1, leftIndex + outputWidth - 1);\n      }\n\n      commands.allCommands.clearCopySelection.run();\n    });\n  }\n};\n\n/**\n * Given a matrix of values, and an array of colIds and rowId targets, this function returns\n * an array of user actions needed to update the targets to the values in the matrix\n * @param {Array} rowIds - An array of numbers, 'new' or null corresponding to the row ids will\n * be updated or added. Numerical (proper) rowIds must come before special ones.\n * @param {Object<string, Array<string>} bulkUpdate - Object from colId to array of column values.\n */\nGridView.prototype._createBulkActionsFromPaste = function(rowIds, bulkUpdate) {\n  if (_.isEmpty(bulkUpdate)) {\n    return [];\n  }\n\n  let addRows = rowIds.filter(rowId => rowId === null || rowId === 'new').length;\n  let updateRows = rowIds.length - addRows;\n\n  let actions = [];\n  if (addRows > 0) {\n    actions.push(['BulkAddRecord', gutil.arrayRepeat(addRows, null),\n      _.mapObject(bulkUpdate, values => values.slice(-addRows))\n    ]);\n  }\n  if (updateRows > 0) {\n    actions.push(['BulkUpdateRecord', rowIds.slice(0, updateRows),\n      _.mapObject(bulkUpdate, values => values.slice(0, updateRows))\n    ]);\n  }\n  return this.prepTableActions(actions);\n};\n\n/**\n * Fills currently selected grid with the contents of the top row in that selection.\n */\nGridView.prototype.fillSelectionDown = function() {\n  var rowLower = this.cellSelector.rowLower();\n  var rowIds = _.times(this.cellSelector.rowCount(), i => this.viewData.getRowId(rowLower + i));\n\n  if (rowIds.length <= 1) {\n    return;\n  }\n\n  var colLower = this.cellSelector.colLower();\n  var fields = this.viewSection.viewFields().peek();\n  var colIds = _.times(this.cellSelector.colCount(), i => {\n    if (!fields[colLower + i].column().isFormula()) {\n      return fields[colLower + i].colId();\n    }\n  }).filter(colId => colId);\n\n  var colInfo = _.object(colIds, colIds.map(colId => {\n     var val = this.tableModel.tableData.getValue(rowIds[0], colId);\n     return rowIds.map(() => val);\n  }));\n\n  this.tableModel.sendTableAction([\"BulkUpdateRecord\", rowIds, colInfo]);\n};\n\n\n\n\n/**\n * Returns a CopySelection of the selected rows and cols\n * @returns {Object} CopySelection\n */\nGridView.prototype.getSelection = function() {\n  let rowIds = [], fields = [], rowStyle = {}, colStyle = {};\n  let colStart = this.cellSelector.colLower();\n  let colEnd = this.cellSelector.colUpper();\n  let rowStart = this.cellSelector.rowLower();\n  let rowEnd = this.cellSelector.rowUpper();\n\n  // If there is no selection, just copy/paste the cursor cell\n  if (this.cellSelector.isCurrentSelectType(selector.NONE)) {\n    rowStart = rowEnd = this.cursor.rowIndex();\n    colStart = colEnd = this.cursor.fieldIndex();\n  }\n\n  // Get all the cols if rows are selected, and viceversa\n  if (this.cellSelector.isCurrentSelectType(selector.ROW)) {\n    colStart = 0;\n    colEnd = this.viewSection.viewFields().peekLength - 1;\n  } else if(this.cellSelector.isCurrentSelectType(selector.COL)) {\n    rowStart = 0;\n    rowEnd = this.getLastDataRowIndex();\n  }\n\n  // Start or end will be null if no fields are visible.\n  if (colStart !== null && colEnd !== null) {\n    for(var i = colStart; i <= colEnd; i++) {\n      let field = this.viewSection.viewFields().at(i);\n      fields.push(field);\n      colStyle[field.colId()] = this._getColStyle(i);\n    }\n  }\n\n  var rowId;\n  for(var j = rowStart; j <= rowEnd; j++) {\n    rowId = this.viewData.getRowId(j);\n    rowIds.push(rowId);\n    rowStyle[rowId] = this._getRowStyle(j);\n  }\n  return new CopySelection(this.tableModel.tableData, rowIds, fields, {\n    rowStyle: rowStyle,\n    colStyle: colStyle\n  });\n};\n\n/**\n * Deselects the currently selected cells.\n */\nGridView.prototype.clearSelection = function() {\n  this.copySelection(null); // Unset the selection observable\n  this.cellSelector.setToCursor();\n};\n\n/**\n * Given a selection object, sets all cells referred to by the selection to the empty string. If\n * only formula columns are selected, only open the formula editor to the empty formula.\n * @param {CopySelection} selection\n */\nGridView.prototype.clearValues = function(selection) {\n  const options = this._getColumnMenuOptions(selection);\n  if (options.isFormula === true) {\n    this.activateEditorAtCursor({ init: ''});\n  } else {\n    let clearAction = tableUtil.makeDeleteAction(selection);\n    if (clearAction) {\n      this.gristDoc.docData.sendAction(clearAction);\n    }\n  }\n};\n\nGridView.prototype._clearColumns = function(selection) {\n  const fields = selection.fields;\n  return this.gristDoc.clearColumns(fields.map(f => f.colRef.peek()));\n};\n\nGridView.prototype._convertFormulasToData = function(selection) {\n  // Convert all isFormula columns to data, including empty columns. This is sometimes useful\n  // (e.g. since a truly empty column undergoes a conversion on first data entry, which may be\n  // prevented by ACL rules).\n  const fields = selection.fields.filter(f => f.column.peek().isFormula.peek());\n  if (!fields.length) { return null; }\n  return this.gristDoc.convertIsFormula(fields.map(f => f.colRef.peek()), {toFormula: false});\n};\n\nGridView.prototype.selectAll = function() {\n  this.cellSelector.selectArea(0, 0, this.getLastDataRowIndex(),\n    this.viewSection.viewFields().peekLength - 1);\n};\n\n\n// End of actions\n\n\n\n// ======================================================================================\n// GRIDVIEW PRIMITIVES (for manipulating grid, rows/cols, selections)\n\n\n/**\n * Assigns the cursor.rowIndex and cursor.fieldIndex observable to the correct row/column/cell\n * depending on the supplied dom element.\n * @param {DOM element} elem - extract the col/row index from the element\n * @param {Selector.ROW/COL/CELL} elemType - denotes whether the clicked element was\n *                                           a row header, col header or cell\n */\nGridView.prototype.assignCursor = function(elem, elemType) {\n  // Change focus before running command so that the correct viewsection's cursor is moved.\n  this.viewSection.hasFocus(true);\n\n  try {\n    let row = this.domToRowModel(elem, elemType);\n    let col = this.domToColModel(elem, elemType);\n    commands.allCommands.setCursor.run(row, col);\n  } catch(e) {\n    console.error(e);\n    console.error(\"GridView.assignCursor expects a row/col header, or cell as an input.\");\n  }\n\n  /* CellSelector already updates the selection whenever rowIndex/fieldIndex is changed, but\n   * since those observables don't currently notify subscribers when an unchanged value is\n   * written, there are cases where the selection doesn't get updated. For example, when doing\n   * a click and drag to select cells and then clicking the \"selected\" cell that's outlined in\n   * green, the row/column numbers remain highlighted as if they are still selected, while\n   * GridView indicates the cells are not selected. This causes bugs that range from the\n   * aformentioned visual discrepancy to incorrect copy/paste behavior due to out-of-date\n   * selection ranges.\n   *\n   * We address this by calling setToCursor here unconditionally, but another possible approach\n   * might be to extend rowIndex/fieldIndex to always notify their subscribers. Always notifying\n   * currently introduces some bugs, and we'd also need to check that it doesn't cause too\n   * much unnecessary UI recomputation elsewhere, so in the interest of time we use the first\n   * approach. */\n  this.cellSelector.setToCursor(elemType);\n};\n\n/**\n * Schedules cursor assignment to happen at end of tick. Calling `preventAssignCursor()` before\n * prevents assignment to happen. This was added to prevent cursor assignment on a `context click`\n * on a cell that is already selected.\n */\nGridView.prototype.scheduleAssignCursor = function(elem, elemType) {\n  this._assignCursorTimeoutId = setTimeout(() => {\n    this.assignCursor(elem, elemType);\n    this._assignCursorTimeoutId = null;\n  }, 0);\n}\n\n/**\n * See `scheduleAssignCursor()` for doc.\n */\nGridView.prototype.preventAssignCursor = function() {\n  clearTimeout(this._assignCursorTimeoutId);\n  this._assignCursorTimeoutId = null;\n}\n\nGridView.prototype.selectedRows = function() {\n  const selection = this.getSelection();\n  return _.without(selection.rowIds, 'new');\n};\n\nGridView.prototype.deleteRows = async function(rowIds) {\n  const saved = this.cursor.getCursorPos();\n  this.cursor.setLive(false);\n  try {\n    await BaseView.prototype.deleteRows.call(this, rowIds);\n  } finally {\n    this.cursor.setCursorPos(saved);\n    this.cursor.setLive(true);\n    this.clearSelection();\n  }\n};\n\nGridView.prototype.addNewColumn = function() {\n  this.insertColumn(this.viewSection.viewFields().peekLength)\n .then(() => this.scrollPaneRight());\n};\n\nGridView.prototype.insertColumn = async function(index) {\n  const pos = tableUtil.fieldInsertPositions(this.viewSection.viewFields(), index)[0];\n  var action = ['AddColumn', null, {\"_position\": pos}];\n  await this.gristDoc.docData.bundleActions('Insert column', async () => {\n    const colInfo = await this.tableModel.sendTableAction(action);\n    if (!this.viewSection.isRaw.peek()){\n      const fieldInfo = {\n        colRef: colInfo.colRef,\n        parentPos: pos,\n        parentId: this.viewSection.id.peek()\n      };\n      await this.gristDoc.docModel.viewFields.sendTableAction(['AddRecord', null, fieldInfo]);\n    }\n  });\n  this.selectColumn(index);\n  this.currentEditingColumnIndex(index);\n};\n\nGridView.prototype.renameColumn = function(index) {\n  this.currentEditingColumnIndex(index);\n};\n\nGridView.prototype.scrollPaneRight = function() {\n  this.scrollPane.scrollLeft = this.scrollPane.scrollWidth;\n};\n\nGridView.prototype.selectColumn = function(colIndex) {\n  this.cursor.fieldIndex(colIndex);\n  this.cellSelector.currentSelectType(selector.COL);\n};\n\nGridView.prototype.showColumn = function(colId, index) {\n  let fieldPos = tableUtil.fieldInsertPositions(this.viewSection.viewFields(), index, 1)[0];\n  let colInfo = {\n    parentId: this.viewSection.id(),\n    colRef: colId,\n    parentPos: fieldPos\n  };\n  return this.gristDoc.docModel.viewFields.sendTableAction(['AddRecord', null, colInfo])\n  .then(() => this.selectColumn(index))\n  .then(() => this.scrollPaneRight());\n};\n\n// TODO: Replace alerts with custom notifications\nGridView.prototype.deleteColumns = function(selection) {\n  var fields = selection.fields;\n  if (fields.length === this.viewSection.viewFields().peekLength) {\n    reportWarning(\"You can't delete all the columns on the grid.\", {\n      key: 'delete-all-columns',\n    });\n    return Promise.resolve(false);\n  }\n  let actions = fields.filter(col => !col.disableModify()).map(col => ['RemoveColumn', col.colId()]);\n  if (actions.length > 0) {\n    return this.tableModel.sendTableActions(actions, `Removed columns ${actions.map(a => a[1]).join(', ')} ` +\n      `from ${this.tableModel.tableData.tableId}.`).then(() => this.clearSelection());\n  }\n  return Promise.resolve(false);\n};\n\nGridView.prototype.hideFields = function(selection) {\n  var actions = selection.fields.map(field => ['RemoveRecord', field.id()]);\n  return this.gristDoc.docModel.viewFields.sendTableActions(actions, `Hide columns ${actions.map(a => a[1]).join(', ')} ` +\n  `from ${this.tableModel.tableData.tableId}.`);\n};\n\nGridView.prototype.moveColumns = function(oldIndices, newIndex) {\n  if (oldIndices.length === 0) return;\n  if (oldIndices[0] === newIndex || oldIndices[0] + 1 === newIndex) return;\n\n  var newPositions = tableUtil.fieldInsertPositions(this.viewSection.viewFields(), newIndex,\n                                                    oldIndices.length);\n  var vsfRowIds = oldIndices.map(function(i) {\n    return this.viewSection.viewFields().at(i).id();\n  }, this);\n  var colInfo = { 'parentPos': newPositions };\n  var vsfAction = ['BulkUpdateRecord', vsfRowIds, colInfo];\n  var viewFieldsTable =  this.gristDoc.docModel.viewFields;\n  var numCols = oldIndices.length;\n  const newPos = newIndex < this.cellSelector.colLower() ? newIndex : newIndex - numCols;\n  viewFieldsTable.sendTableAction(vsfAction).then(() => {\n    this.cursor.fieldIndex(newPos);\n    this.cellSelector.currentSelectType(selector.COL);\n    this.cellSelector.col.start(newPos);\n    this.cellSelector.col.end(newPos + numCols - 1);\n  });\n};\n\nGridView.prototype.moveRows = function(oldIndices, newIndex) {\n  if (oldIndices.length === 0) return;\n  if (oldIndices[0] === newIndex || oldIndices[0] + 1 === newIndex) return;\n\n  var newPositions = this._getRowInsertPos(newIndex, oldIndices.length);\n  var rowIds = oldIndices.map(function(i) {\n    return this.viewData.getRowId(i);\n  }, this);\n  var colInfo = { 'manualSort': newPositions };\n  var action = ['BulkUpdateRecord', rowIds, colInfo];\n  var numRows = oldIndices.length;\n  const newPos = newIndex < this.cellSelector.rowLower() ? newIndex : newIndex - numRows;\n  this.tableModel.sendTableAction(action).then(() => {\n    this.cursor.rowIndex(newPos);\n    this.cellSelector.currentSelectType(selector.ROW);\n    this.cellSelector.row.start(newPos);\n    this.cellSelector.row.end(newPos + numRows - 1);\n  });\n};\n\n\n// ======================================================================================\n// MISC HELPERS\n\n\n/**\n *  Returns the row index of the row whose top offset is closest to and\n *  no greater than given y-position.\n *  param{yCoord}: The mouse y-position (including any scroll top amount).\n *  Assumes that scrolly.rowOffsetTree is up to date.\n *  See the given examples in GridView.getMousePosCol.\n **/\nGridView.prototype.getMousePosRow = function (yCoord) {\n  var headerOffset = this.header.getBoundingClientRect().bottom;\n  return this.scrolly.rowOffsetTree.getIndex(yCoord - headerOffset);\n};\n\n/**\n *  Returns the row index of the row whose top offset is closest to and\n *  no greater than given y-position excluding addRows.\n *  param{yCoord}: The mouse y-position on the screen.\n **/\nGridView.prototype.currentMouseRow = function(yCoord) {\n  return Math.min(this.getMousePosRow(this.scrollTop() + yCoord), this.getLastDataRowIndex());\n};\n\n/**\n *  Returns the column index of the column whose left position is closest to and\n *  no greater than given x-position.\n *  param{xCoord}: The mouse x-position (absolute position on a page).\n *  Grid scroll offset and frozen columns are taken into account.\n *  Assumes that this.colRightOffsets is up to date\n *  In the following examples, let * denote the current mouse position.\n *      * |0____|1____|2____|3____|       Returns 0\n *        |0__*_|1____|2____|3____|       Returns 0\n *        |0____|1__*_|2____|3____|       Returns 1\n *        |0____|1____|2__*_|3____|       Returns 2\n *        |0____|1____|2____|3__*_|       Returns 3\n *        |0____|1____|2____|3____| *     Returns 4\n *\n * For frozen columns and a scrolled view:\n *      * |0____|1____|..5|6____|         Returns 0\n *        |0__*_|1____|..5|6____|         Returns 0\n *        |0____|1__*_|..5|6____|         Returns 1\n *        |0____|1____|*.5|6____|         Returns 5\n *        |0____|1____|..5|6__*_|         Returns 6\n *        |0____|1____|..5|6____| *       Returns 6\n **/\nGridView.prototype.getMousePosCol = function (mouseX) {\n  const scrollLeft = this.scrollLeft();\n  // Offset to left edge of gridView viewports\n  const headerOffset = this._cornerDom.getBoundingClientRect().right;\n  // Convert mouse x to grid x (not including scroll yet).\n  // GridX now has x position as if the grid pane is covering\n  // the whole screen, it still can be scrolled, so 0px is not equal to A column yet.\n  const gridX = mouseX - headerOffset;\n  // Total width of frozen columns (if zero, no frozen column set)\n  const frozenWidth = this.frozenWidth.peek();\n  // Frozen columns can be scrolled also, but not more then frozenOffset.\n  const frozenScroll = Math.min(this.frozenOffset.peek(), scrollLeft);\n  // If gridX is in frozen section or outside. Frozen section can be scrolled also\n  // on narrow screens so take this into account.\n  const inFrozen = this.numFrozen.peek() && gridX <= (frozenWidth - frozenScroll);\n  // If grid x (mouse converted to grid pane coordinates) is in frozen area\n  // we need to use frozenScroll value (how much frozen area is scrolled),\n  // but if it is outside we want to take the scroll offset into account.\n  // Here we wil calculate where exactly is mouse (over which column),\n  // to do that, we will pretend that nothing is scrolled - so we need\n  // to move gridX a little to the right, either by grid offset (how much whole grid\n  // is scrolled to the left) or a frozen set offset (how much frozen columns\n  // are scrolled to the left).\n  const scrollX = gridX + (inFrozen ? frozenScroll : scrollLeft);\n  return this.colRightOffsets.peek().getIndex(scrollX);\n};\n\n// Used for styling the paste data the same way the col/row is styled in the GridView.\nGridView.prototype._getRowStyle = function(rowIndex) {\n  return { 'height': this.scrolly.rowOffsetTree.getValue(rowIndex) + 'px' };\n};\n\nGridView.prototype._getColStyle = function(colIndex) {\n  return { 'width' : this.viewSection.viewFields().at(colIndex).widthPx() };\n};\n\n// TODO: for now lets just assume you are clicking on a .field, .row, or .column\nGridView.prototype.domToRowModel = function(elem, elemType) {\n  switch (elemType) {\n    case selector.COL:\n      return undefined;\n    case selector.ROW: // row > row num: row has record model\n      return ko.utils.domData.get(elem.parentNode, 'itemModel');\n    case selector.NONE:\n    case selector.CELL: // cell: row > .record > .field, row holds row model\n      return ko.utils.domData.get(elem.parentNode.parentNode, 'itemModel');\n    default:\n      throw Error(\"Unknown elemType in domToRowModel:\" + elemType);\n  }\n};\n\nGridView.prototype.domToColModel = function(elem, elemType) {\n  switch (elemType) {\n    case selector.ROW:\n      return undefined;\n    case selector.NONE:\n    case selector.CELL: // cell: .field has col model\n    case selector.COL:  // col:  .column_name I think\n      return ko.utils.domData.get(elem, 'itemModel');\n    default:\n      throw Error(\"Unknown elemType in domToRowModel\");\n  }\n};\n\n// ======================================================================================\n// DOM STUFF\n\n/**\n * Recalculate various positioning variables.\n */\n//TODO : is this necessary? make passive. Also this could be removed soon I think\nGridView.prototype.onScroll = function() {\n  var pane = this.scrollPane;\n  this.scrollLeft(pane.scrollLeft);\n  this.scrollTop(pane.scrollTop);\n  this.width(pane.clientWidth);\n};\n\n\nGridView.prototype.buildDom = function() {\n  var self = this;\n  var data = this.viewData;\n  var v = this.viewSection;\n  var editIndex = this.currentEditingColumnIndex;\n\n  //each row has toggle classes on these props, so grab them once to save on lookups\n  let vHorizontalGridlines = v.optionsObj.prop('horizontalGridlines');\n  let vVerticalGridlines   = v.optionsObj.prop('verticalGridlines');\n  let vZebraStripes        = v.optionsObj.prop('zebraStripes');\n\n  var renameCommands = {\n    nextField: function() {\n      if (editIndex() === v.viewFields().peekLength - 1) {\n        // Turn off editing if we're on the last field.\n        editIndex(-1);\n      } else {\n        editIndex(editIndex() + 1);\n        self.selectColumn(editIndex.peek());\n      }\n    },\n    prevField: function() {\n      editIndex(editIndex() - 1);\n      self.selectColumn(editIndex.peek());\n    }\n  };\n\n  return dom(\n    'div.gridview_data_pane.flexvbox',\n    // offset for frozen columns - how much move them to the left\n    kd.style('--frozen-offset', this.frozenOffset),\n    // total width of frozen columns\n    kd.style('--frozen-width', this.frozenWidth),\n    // Corner, bars and shadows\n    // Corner and shadows (so it's fixed to the grid viewport)\n    self._cornerDom = dom(\n      'div.gridview_data_corner_overlay',\n      dom.on('click', () => this.selectAll()),\n    ),\n    dom('div.scroll_shadow_top', kd.show(this.scrollShadow.top)),\n    dom('div.scroll_shadow_left',\n      kd.show(this.scrollShadow.left),\n      // pass current scroll position\n      kd.style('--frozen-scroll-offset', this.frozenScrollOffset)),\n    dom('div.frozen_line', kd.show(this.frozenLine)),\n    dom('div.gridview_header_backdrop_left'), //these hide behind the actual headers to keep them from flashing\n    dom('div.gridview_header_backdrop_top'),\n    // When there are frozen columns, right border for number row will not be visible (as actually there is no border,\n    // it comes from the first cell in the grid) making a gap between row-number and actual column. So when we scroll\n    // the content of the scrolled columns will be visible to the user (as there is blank space there).\n    // This line fills the gap. NOTE that we are using number here instead of a boolean.\n    dom('div.gridview_left_border', kd.show(this.numFrozen),\n      kd.style(\"left\", ROW_NUMBER_WIDTH + 'px')\n    ),\n    // left shadow that will be visible on top of frozen columns\n    dom('div.scroll_shadow_frozen', kd.show(this.frozenShadow)),\n    // When cursor leaves the GridView, remove hover immediately (without debounce).\n    // This guards mouse leaving gridView from the top, as leaving from bottom or left, right, is\n    // guarded on the row level.\n    dom.on(\"mouseleave\", () => !this.isDisposed() && this.hoverColumn(-1)),\n    // Drag indicators\n    self.colLine = dom(\n      'div.col_indicator_line',\n      kd.show(function() { return self.cellSelector.isCurrentDragType(selector.COL); }),\n      kd.style('left', self.cellSelector.col.linePos)\n    ),\n    self.colShadow = dom(\n      'div.column_shadow',\n      kd.show(function() { return self.cellSelector.isCurrentDragType(selector.COL); }),\n      kd.style('left', function() { return (self.dragX() - self.colShadowAdjust) + 'px'; })\n    ),\n    self.rowLine = dom(\n      'div.row_indicator_line',\n      kd.show(function() { return self.cellSelector.isCurrentDragType(selector.ROW); }),\n      kd.style('top', self.cellSelector.row.linePos)\n    ),\n    self.rowShadow = dom(\n      'div.row_shadow',\n      kd.show(function() { return self.cellSelector.isCurrentDragType(selector.ROW); }),\n      kd.style('top', function() { return (self.dragY() - self.rowShadowAdjust) + 'px'; })\n    ),\n\n    self.scrollPane =\n    dom('div.grid_view_data.gridview_data_scroll.show_scrollbar',\n      kd.scrollChildIntoView(self.visibleRowIndex),\n      dom.onDispose(() => {\n        // Save the previous scroll values to the section.\n        self.viewSection.lastScrollPos = _.extend({\n          scrollLeft: self.scrollPane.scrollLeft\n        }, self.scrolly.getScrollPos());\n      }),\n\n      // COL HEADER BOX\n      dom('div.gridview_stick-top.flexhbox',   // Sticks to top, flexbox makes child enclose its contents\n        dom('div.gridview_corner_spacer'),\n\n        self.header = dom('div.gridview_data_header.flexhbox', // main header, flexbox floats contents onto a line\n\n          dom('div.column_names.record',\n            kd.style('minWidth', '100%'),\n            kd.style('borderLeftWidth', v.borderWidthPx),\n            kd.foreach(v.viewFields(), field => {\n              const isEditingLabel = koUtil.withKoUtils(ko.pureComputed({\n                read: () => {\n                  const goodIndex = () => editIndex() === field._index();\n                  const isReadonly = () => this.gristDoc.isReadonlyKo() || self.isPreview;\n                  const isSummary = () => Boolean(field.column().disableEditData());\n                  return goodIndex() && !isReadonly() && !isSummary();\n                },\n                write: val => {\n                  if (val) {\n                    // Turn on editing.\n                    editIndex(field._index());\n                  } else {\n                    // Turn off editing only if it wasn't changed to another field (e.g. by tabbing).\n                    const isCurrent = editIndex.peek() === field._index.peek();\n                    if (isCurrent) {\n                      editIndex(-1);\n                    }\n                  }\n                }\n              }).extend({ rateLimit: 0 })).onlyNotifyUnequal();\n\n              let filterTriggerCtl;\n              const isTooltip = ko.pureComputed(() =>\n                self.editingFormula() &&\n                ko.unwrap(self.hoverColumn) === field._index()\n              );\n\n              const headerTextColor = ko.computed(() => field.headerTextColor() || '');\n              const headerFillColor = ko.computed(() => field.headerFillColor() || '');\n              const headerFontBold = ko.computed(() => field.headerFontBold());\n              const headerFontItalic = ko.computed(() => field.headerFontItalic());\n              const headerFontUnderline = ko.computed(() => field.headerFontUnderline());\n              const headerFontStrikethrough = ko.computed(() => field.headerFontStrikethrough());\n\n              return dom(\n                'div.column_name.field',\n                dom.autoDispose(headerTextColor),\n                dom.autoDispose(headerFillColor),\n                dom.autoDispose(headerFontBold),\n                dom.autoDispose(headerFontItalic),\n                dom.autoDispose(headerFontUnderline),\n                dom.autoDispose(headerFontStrikethrough),\n                kd.style('--grist-header-color', headerTextColor),\n                kd.style('--grist-header-background-color', headerFillColor),\n                kd.toggleClass('font-bold', headerFontBold),\n                kd.toggleClass('font-italic', headerFontItalic),\n                kd.toggleClass('font-underline', headerFontUnderline),\n                kd.toggleClass('font-strikethrough', headerFontStrikethrough),\n                kd.style('--frozen-position', () => ko.unwrap(this.frozenPositions.at(field._index()))),\n                kd.toggleClass(\"frozen\", () => ko.unwrap(this.frozenMap.at(field._index()))),\n                dom.autoDispose(isEditingLabel),\n                dom.autoDispose(isTooltip),\n                dom.testId(\"GridView_columnLabel\"),\n                (el) => {\n                  const tooltip = new HoverColumnTooltip(el);\n                  return [\n                     dom.autoDispose(tooltip),\n                     dom.autoDispose(isTooltip.subscribe((show) => {\n                      if (show) {\n                        tooltip.show(t(`Click to insert`) + ` $${field.origCol.peek().colId.peek()}`);\n                      } else {\n                        tooltip.hide();\n                      }\n                    })),\n                  ]\n                },\n                kd.style('width', field.widthPx),\n                kd.style('borderRightWidth', v.borderWidthPx),\n                viewCommon.makeResizable(field.width, {shouldSave: !this.gristDoc.isReadonly.get()}),\n                kd.toggleClass('selected', () => ko.unwrap(this.isColSelected.at(field._index()))),\n                dom.on('contextmenu', ev => {\n                  // This is a little hack to position the menu the same way as with a click\n                  ev.preventDefault();\n                  const btn = ev.currentTarget.querySelector('.g-column-menu-btn');\n                  if (btn) { btn.click(); }\n                }),\n                dom('div.g-column-label',\n                  kd.scope(field.description, desc => desc ? descriptionInfoTooltip(desc, \"column\") : null),\n                  dom.on('mousedown', ev => isEditingLabel() ? ev.stopPropagation() : true),\n                  // We are using editableLabel here, but we don't use it for editing.\n                  kf.editableLabel(self.isPreview ? field.label : field.displayLabel, ko.observable(false)),\n                  kd.scope(field.description, desc => desc ? dom('div.g-column-label-spacer') : null),\n                  buildRenameColumn({\n                    field,\n                    isEditing: isEditingLabel,\n                    optCommands: renameCommands\n                  }),\n                ),\n                self._showTooltipOnHover(field, isTooltip),\n                self.isPreview ? null : menuToggle(null,\n                  kd.cssClass('g-column-main-menu'),\n                  kd.cssClass('g-column-menu-btn'),\n                  // Prevent mousedown on the dropdown triangle from initiating column drag.\n                  dom.on('mousedown', () => false),\n                  // Select the column if it's not part of a multiselect.\n                  dom.on('click', (ev) => this.maybeSelectColumn(ev.currentTarget.parentNode, field)),\n                  (elem) => {\n                    filterTriggerCtl = setPopupToCreateDom(\n                      elem,\n                      ctl => this._columnFilterMenu(ctl, field, {showAllFiltersButton: true}),\n                      {\n                        attach: 'body',\n                        placement: 'bottom-start',\n                        boundaries: 'viewport',\n                        trigger: [],\n                      }\n                    );\n                  },\n                  menu(ctl => this.columnContextMenu(ctl, this.getSelection(), field, filterTriggerCtl)),\n                  testId('column-menu-trigger'),\n                ),\n                dom('div.selection'),\n              );\n            }),\n            this.isPreview ? null : kd.maybe(() => !this.gristDoc.isReadonlyKo(), () => (\n              this._modField = dom('div.column_name.mod-add-column.field',\n                '+',\n                kd.style(\"width\", PLUS_WIDTH + 'px'),\n                dom.on('click', ev => {\n                  // If there are no hidden columns, clicking the plus just adds a new column.\n                  // If there are hidden columns, display a dropdown menu.\n                  if (this.viewSection.hiddenColumns().length === 0) {\n                    ev.stopImmediatePropagation(); // Don't open the menu defined below\n                    this.addNewColumn();\n                  }\n                }),\n                menu((ctl => ColumnAddMenu(this, this.viewSection)))\n              )\n            ))\n          )\n        ) //end hbox\n      ), // END COL HEADER BOX\n\n      koDomScrolly.scrolly(data, { paddingBottom: 80, paddingRight: 28 }, renderRow),\n\n      kd.maybe(this._isPrinting, () =>\n        renderAllRows(this.tableModel, this.sortedRows.getKoArray().peek(), renderRow)\n      ),\n    ) // end scrollpane\n  );// END MAIN VIEW BOX\n\n  function renderRow(row) {\n    // TODO. There are several ways to implement a cursor; similar concerns may arise\n    // when implementing selection and cell editor.\n    // (1) Class on 'div.field.field_clip'. Fewest elements, seems possibly best for\n    //     performance. Problem is: it's impossible to get cursor exactly right with a\n    //     one-sided border. Attaching a cursor as additional element inside the cell\n    //     truncates the cursor to the cell's inside because of 'overflow: hidden'.\n    // (2) 'div.field' with 'div.field_clip' inside, on which a class is toggled. This\n    //     works well. The only concern is whether this slows down rendering. Would be\n    //     good to measure and compare rendering speed.\n    //     Related: perhaps the fastest rendering would be for a table.\n    // (3) Separate element attached to the row, absolutely positioned at left\n    //     position and width of the selected cell. This works too. Requires\n    //     maintaining a list of leftOffsets (or measuring the cell's), and feels less\n    //     clean and more complicated than (2).\n\n    // IsRowActive and isCellActive are a significant optimization. IsRowActive is called\n    // for all rows when cursor.rowIndex changes, but the value only changes for two of the\n    // rows. IsCellActive is only subscribed to columns for the active row. This way, when\n    // the cursor moves, there are (rows+2*columns) calls rather than rows*columns.\n    var isRowActive = ko.computed(() => row._index() === self.cursor.rowIndex());\n\n    const computedFlags = ko.pureComputed(() => {\n      return self.viewSection.rulesColsIds().map(colRef => {\n        if (row.cells[colRef]) { return row.cells[colRef]() || false; }\n        return false;\n      });\n    });\n\n    const computedRule = koUtil.withKoUtils(ko.pureComputed(() => {\n      if (row._isAddRow() || !row.id()) { return null; }\n      const flags = computedFlags();\n      if (flags.length === 0) { return null; }\n      const styles = self.viewSection.rulesStyles() || [];\n      return { style : new CombinedStyle(styles, flags) };\n    }, this).extend({deferred: true}));\n\n    const fillColor = buildStyleOption(self, computedRule, 'fillColor');\n    const zebraColor = ko.pureComputed(() => calcZebra(fillColor()));\n    const textColor = buildStyleOption(self, computedRule, 'textColor');\n    const fontBold = buildStyleOption(self, computedRule, 'fontBold');\n    const fontItalic = buildStyleOption(self, computedRule, 'fontItalic');\n    const fontUnderline = buildStyleOption(self, computedRule, 'fontUnderline');\n    const fontStrikethrough = buildStyleOption(self, computedRule, 'fontStrikethrough');\n\n    return dom('div.gridview_row',\n      dom.autoDispose(isRowActive),\n      dom.autoDispose(computedFlags),\n      dom.autoDispose(computedRule),\n      dom.autoDispose(textColor),\n      dom.autoDispose(fillColor),\n      dom.autoDispose(zebraColor),\n      dom.autoDispose(fontBold),\n      dom.autoDispose(fontItalic),\n      dom.autoDispose(fontUnderline),\n      dom.autoDispose(fontStrikethrough),\n\n      kd.toggleClass('link_selector_row', () => self.isLinkSource() && isRowActive()),\n\n      // rowid dom\n      dom('div.gridview_data_row_num',\n        kd.style(\"width\", ROW_NUMBER_WIDTH + 'px'),\n        dom('div.gridview_data_row_info',\n          kd.toggleClass('linked_dst', () => {\n            const myRowId = row.id();\n            const linkedRowId = self.linkedRowId();\n            // Must ensure that linkedRowId is not null to avoid drawing on rows whose\n            // row ids are null.\n            return linkedRowId && linkedRowId === myRowId;\n          })\n        ),\n        kd.text(function() { return row._index() + 1; }),\n\n        kd.scope(row._validationFailures, function(failures) {\n          if (!row._isAddRow() && failures.length > 0) {\n            return dom('div.validation_error_number', failures.length,\n              kd.attr('title', function() {\n                return \"Validation failed: \" +\n                  failures.map(function(val) { return val.name(); }).join(\", \");\n              })\n            );\n          }\n        }),\n        dom.on('contextmenu', ev => {\n          // This is a little hack to position the menu the same way as with a click,\n          // the same hack as on a column menu.\n          ev.preventDefault();\n          ev.currentTarget.querySelector('.menu_toggle').click();\n        }),\n        self.isPreview ? null : menuToggle(null,\n          dom.on('click', ev => self.maybeSelectRow(ev.currentTarget.parentNode, row.getRowId())),\n          menu((ctx) => {\n            ctx.autoDispose(isRowActive.subscribe(() => ctx.close()));\n            return self.rowContextMenu();\n          }, { trigger: ['click'] }),\n          // Prevent mousedown on the dropdown triangle from initiating row drag.\n          dom.on('mousedown', () => false),\n          testId('row-menu-trigger'),\n        ),\n        kd.toggleClass('selected', () =>\n          !row._isAddRow() && self.cellSelector.isRowSelected(row._index())),\n      ),\n      dom('div.record',\n        kd.toggleClass('record-add', row._isAddRow),\n        kd.style('borderLeftWidth', v.borderWidthPx),\n        kd.style('borderBottomWidth', v.borderWidthPx),\n        kd.toggleClass('font-bold', fontBold),\n        kd.toggleClass('font-underline', fontUnderline),\n        kd.toggleClass('font-italic', fontItalic),\n        kd.toggleClass('font-strikethrough', fontStrikethrough),\n        kd.style('--grist-row-rule-background-color', fillColor),\n        kd.style('--grist-row-rule-background-color-zebra', zebraColor),\n        kd.style('--grist-row-color', textColor),\n        //These are grabbed from v.optionsObj at start of GridView buildDom\n        kd.toggleClass('record-hlines', vHorizontalGridlines),\n        kd.toggleClass('record-vlines', vVerticalGridlines),\n        kd.toggleClass('record-zebra', vZebraStripes),\n        // even by 1-indexed rownum, so +1 (makes more sense for user-facing display stuff)\n        kd.toggleClass('record-even', () => (row._index()+1) % 2 === 0 ),\n        dom.on(\"mouseleave\", (ev) => {\n          // Leave only when leaving record row.\n          if (!ev.relatedTarget || !ev.relatedTarget.classList.contains(\"record\")){\n            self.changeHover(-1);\n          }\n        }),\n        self.isPreview ? null : contextMenu((ctx) => {\n          // We need to close the menu when the row is removed, but the dom of the row is not\n          // disposed when the record is removed (this is probably due to how scrolly work). Hence,\n          // we need to subscribe to `isRowActive` to close the menu.\n          ctx.autoDispose(isRowActive.subscribe(() => ctx.close()));\n          return self.cellContextMenu();\n        }),\n        self.comparison ? kd.cssClass(() => {\n          const rowType = self.extraRows.getRowType(row.id());\n          return rowType && `diff-${rowType}` || '';\n        }) : null,\n\n        kd.foreach(v.viewFields(), function(field) {\n          // Whether the cell has a cursor (possibly in an inactive view section).\n          var isCellSelected = ko.computed(() =>\n            isRowActive() && field._index() === self.cursor.fieldIndex());\n\n          // Whether the cell is active: has the cursor in the active section.\n          var isCellActive = ko.computed(() => isCellSelected() && v.hasFocus());\n\n          // Whether the cell is part of an active copy-paste operation.\n          var isCopyActive = ko.computed(function() {\n            return self.copySelection() &&\n              self.copySelection().isCellSelected(row.id(), field.colId());\n          });\n          var fieldBuilder = self.fieldBuilders.at(field._index());\n          var isSelected = ko.computed(() => {\n            return !row._isAddRow() &&\n              !self.cellSelector.isCurrentSelectType(selector.NONE) &&\n              ko.unwrap(self.isColSelected.at(field._index())) &&\n              self.cellSelector.isRowSelected(row._index());\n          });\n\n          var isTooltip = ko.pureComputed(() =>\n            self.editingFormula() &&\n            ko.unwrap(self.hoverColumn) === field._index()\n          );\n\n          return dom(\n            'div.field',\n            kd.style('--frozen-position', () => ko.unwrap(self.frozenPositions.at(field._index()))),\n            kd.toggleClass(\"frozen\", () => ko.unwrap(self.frozenMap.at(field._index()))),\n            kd.toggleClass('scissors', isCopyActive),\n            dom.autoDispose(isCopyActive),\n            dom.autoDispose(isCellSelected),\n            dom.autoDispose(isCellActive),\n            dom.autoDispose(isSelected),\n            self._showTooltipOnHover(field, isTooltip),\n            kd.style('width', field.widthPx),\n            //TODO: Ensure that fields in a row resize when\n            //a cell in that row becomes larger\n            kd.style('borderRightWidth', v.borderWidthPx),\n\n            kd.toggleClass('selected', isSelected),\n            fieldBuilder.buildDomWithCursor(row, isCellActive, isCellSelected),\n            dom('div.selection'),\n          );\n        })\n      )\n    );\n  }\n};\n\n/** @inheritdoc */\nGridView.prototype.onResize = function() {\n  const activeFieldBuilder = this.activeFieldBuilder();\n  let height = null;\n  if (isNarrowScreen()) {\n    height = window.outerHeight;\n  }\n  if (activeFieldBuilder && activeFieldBuilder.isEditorActive()) {\n    // When the editor is active, the common case for a resize is if the virtual keyboard is being\n    // shown on mobile device. In that case, we need to scroll active cell into view, and need to\n    // do it synchronously, to allow repositioning the editor to it in response to the same event.\n    this.scrolly.updateSize(height);\n    this.scrolly.scrollRowIntoView(this.cursor.rowIndex.peek());\n  } else {\n    this.scrolly.scheduleUpdateSize(height);\n  }\n  this.width(this.scrollPane.clientWidth)\n};\n\n/** @inheritdoc */\nGridView.prototype.onRowResize = function(rowModels) {\n  this.scrolly.resetItemHeights(rowModels);\n};\n\nGridView.prototype.onLinkFilterChange = function(rowId) {\n  BaseView.prototype.onLinkFilterChange.call(this, rowId);\n  this.clearSelection();\n};\n\nGridView.prototype.onCellContextMenu = function(ev, elem) {\n  let row = this.domToRowModel(elem, selector.CELL);\n  let col = this.domToColModel(elem, selector.CELL);\n\n  if (this.cellSelector.containsCell(row._index(), col._index())) {\n    // contextmenu event could be preceded by a mousedown event (ie: when ctrl+click on\n    // mac) which triggers a cursor assignment that we need to prevent.\n    this.preventAssignCursor();\n  } else {\n    this.assignCursor(elem, selector.NONE);\n  }\n}\n\n// ======================================================================================\n// SELECTOR STUFF\n\n/**\n * Returns a pure computed boolean that determines whether the given column is selected.\n * @param {view field object} col - the column to create an observable for\n **/\nGridView.prototype._createColSelectedObs = function(col) {\n  return ko.pureComputed(function() {\n    return this.cellSelector.isCurrentSelectType(selector.ROW) ||\n           gutil.between(col._index(), this.cellSelector.col.start(),\n                         this.cellSelector.col.end());\n  }, this);\n};\n\n// Callbacks for mouse events for the selector object\n\nGridView.prototype.cellMouseDown = function(elem, event) {\n  let col = this.domToColModel(elem, selector.CELL);\n  if (this.hoverColumn() === col._index()) {\n    return this._tooltipMouseDown(elem, selector.CELL);\n  }\n\n  if (event.shiftKey) {\n    // Change focus before running command so that the correct viewsection's cursor is moved.\n    this.viewSection.hasFocus(true);\n    let row = this.domToRowModel(elem, selector.CELL);\n    this.cellSelector.selectArea(this.cursor.rowIndex(), this.cursor.fieldIndex(),\n                                 row._index(), col._index());\n  } else {\n    this.assignCursor(elem, selector.NONE);\n  }\n};\n\nGridView.prototype.colMouseDown = function(elem, event) {\n  let col = this.domToColModel(elem, selector.COL);\n  if (this.hoverColumn() === col._index()) {\n    return this._tooltipMouseDown(elem, selector.COL);\n  }\n\n  this._colClickTime = Date.now();\n  this.assignCursor(elem, selector.COL);\n  // Clicking the column header selects all rows except the add row.\n  this.cellSelector.row.end(this.getLastDataRowIndex());\n};\n\nGridView.prototype._tooltipMouseDown = function(elem, elemType) {\n  let row = this.domToRowModel(elem, elemType);\n  let col = this.domToColModel(elem, elemType);\n  // FormulaEditor.ts overrides this command to insert the column id of the clicked column.\n  commands.allCommands.setCursor.run(row, col);\n};\n\nGridView.prototype.rowMouseDown = function(elem, event) {\n  if (event.shiftKey) {\n    this.cellSelector.currentSelectType(selector.ROW);\n    this.cellSelector.row.end(this.currentMouseRow(event.pageY));\n  } else {\n    this.assignCursor(elem, selector.ROW);\n  }\n};\n\nGridView.prototype.rowMouseMove = function(event) {\n  this.cellSelector.row.end(this.currentMouseRow(event.pageY));\n};\n\nGridView.prototype.colMouseMove = function(event) {\n  if (this.editingFormula()) { return; }\n\n  var currentCol = Math.min(this.getMousePosCol(event.pageX),\n                            this.viewSection.viewFields().peekLength - 1);\n  this.cellSelector.col.end(currentCol);\n};\n\nGridView.prototype.cellMouseMove = function(event) {\n  if (this.editingFormula()) { return; }\n\n  this.colMouseMove(event);\n  this.rowMouseMove(event);\n  // Maintain single cells cannot be selected invariant\n  if (this.cellSelector.onlyCellSelected(this.cursor.rowIndex(), this.cursor.fieldIndex())) {\n    this.cellSelector.currentSelectType(selector.NONE);\n  } else {\n    this.cellSelector.currentSelectType(selector.CELL);\n  }\n};\n\nGridView.prototype.createSelector = function() {\n  this.cellSelector = new selector.CellSelector(this);\n};\n\n// buildDom needs some of the row/col/cell selector observables to exist beforehand\n// but we can't attach any of the mouse handlers in the Selector class until the\n// dom elements exist so we attach the selector handlers separately from instantiation\nGridView.prototype.attachSelectorHandlers = function () {\n  const ignoreEvent = (event, elem) => (\n    event.button !== 0 ||\n    event.target.classList.contains('ui-resizable-handle') ||\n    // This is a bit of a hack to prevent dragging when there's an open column menu\n    // TODO: disable dragging when there is an open cell context menu as well\n    !this.ctxMenuHolder.isEmpty()\n  );\n\n  this.autoDispose(mouseDragMatchElem(this.viewPane, '.gridview_data_row_num', (event, elem) => {\n    if (!ignoreEvent(event, elem)) {\n      if (!this.cellSelector.isSelected(elem, selector.ROW)) {\n        this.rowMouseDown(elem, event);\n        return {\n          onMove: (ev) => this.rowMouseMove(ev),\n          onStop: (ev) => {},\n        };\n      } else if (!this.viewSection.disableDragRows()) {\n        this.styleRowDragElements(elem, event);\n        return {\n          onMove: (ev) => this.dragRows(ev),\n          onStop: (ev) => this.dropRows(),\n        };\n      }\n    }\n  }));\n\n  // Trigger on column headings but not on the add column button\n  this.autoDispose(mouseDragMatchElem(this.viewPane, '.column_name.field:not(.mod-add-column)', (event, elem) => {\n    if (!ignoreEvent(event, elem)) {\n      if (!this.cellSelector.isSelected(elem, selector.COL)) {\n        this.colMouseDown(elem, event);\n        return {\n          onMove: (ev) => this.colMouseMove(ev),\n          onStop: (ev) => {},\n        };\n      } else {\n        this.styleColDragElements(elem, event);\n        return {\n          onMove: (ev) => this.dragCols(ev),\n          onStop: (ev) => this.dropCols(),\n        };\n      }\n    }\n  }));\n\n  this.autoDispose(mouseDragMatchElem(this.scrollPane, '.field:not(.column_name)', (event, elem) => {\n    if (!ignoreEvent(event, elem)) {\n      // TODO: should always enable\n      if (!this.cellSelector.isSelected(elem, selector.CELL)) {\n        this.cellMouseDown(elem, event);\n        return {\n          onMove: (ev) => this.cellMouseMove(ev),\n          onStop: (ev) => {},\n        }\n      } else { // TODO: if true above, this will never come into play.\n        this.scheduleAssignCursor(elem, selector.NONE);\n        return {\n          onMove: (ev) => {},\n          onStop: (ev) => { this.cellSelector.currentDragType(selector.NONE); },\n        };\n      }\n    }\n  }));\n}\n\n// End of Selector stuff\n\n// ============================================================================\n// DRAGGING LOGIC\n\nGridView.prototype.styleRowDragElements = function(elem, event) {\n  var rowStart = this.cellSelector.rowLower();\n  var rowEnd = this.cellSelector.rowUpper();\n  var shadowHeight = this.scrolly.rowOffsetTree.getCumulativeValueRange(rowStart, rowEnd+1);\n  var shadowTop = (this.header.getBoundingClientRect().height +\n                   this.scrolly.rowOffsetTree.getSumTo(rowStart) - this.scrollTop());\n\n  this.rowLine.style.top = shadowTop + 'px';\n  this.rowShadow.style.top = shadowTop + 'px';\n  this.rowShadow.style.height = shadowHeight + 'px';\n  this.rowShadowAdjust = event.pageY - shadowTop;\n  this.cellSelector.currentDragType(selector.ROW);\n  this.cellSelector.row.dropIndex(this.cellSelector.rowLower());\n};\n\nGridView.prototype.styleColDragElements = function(elem, event) {\n  this._colClickTime = Date.now();\n  var colStart = this.cellSelector.colLower();\n  var colEnd = this.cellSelector.colUpper();\n  var shadowWidth = this.colRightOffsets.peek().getCumulativeValueRange(colStart, colEnd+1);\n  var viewDataNumsWidth = $('.gridview_corner_spacer').width();\n  var shadowLeft = (viewDataNumsWidth + this.colRightOffsets.peek().getSumTo(colStart) - this.scrollLeft());\n\n  this.colLine.style.left = shadowLeft + 'px';\n  this.colShadow.style.left = shadowLeft + 'px';\n  this.colShadow.style.width = shadowWidth + 'px';\n  this.colShadowAdjust = event.pageX - shadowLeft;\n  this.cellSelector.currentDragType(selector.COL);\n  this.cellSelector.col.dropIndex(this.cellSelector.colLower());\n};\n\n/**\n * GridView.dragRows/dragCols update the row/col shadow and row/col indicator line on mousemove events.\n * Rules for determining where the indicator line should show while dragging cols/rows:\n * 0) The indicator line should not appear after the special add-row.\n * 1) If the mouse position is within the selected range -> the indicator line should show\n *    at the left offset of the start of the select range\n * 2) If the mouse position comes after the select range -> increment the computed dropIndex by 1\n * 3) If the last col/row is in the select range, the indicator line should be clamped to the start of the\n *    select range.\n **/\nGridView.prototype.dragRows = function(event) {\n  var dropIndex = Math.min(this.getMousePosRow(event.pageY + this.scrollTop()),\n                           this.getLastDataRowIndex());\n  if (this.cellSelector.containsRow(dropIndex)) {\n    dropIndex = this.cellSelector.rowLower();\n  } else if (dropIndex > this.cellSelector.rowUpper()) {\n    dropIndex += 1;\n  }\n  if (this.cellSelector.rowUpper() === this.viewData.peekLength - 1) {\n    dropIndex = Math.min(dropIndex, this.cellSelector.rowLower());\n  }\n\n  var linePos = this.scrolly.rowOffsetTree.getSumTo(dropIndex) +\n               this.header.getBoundingClientRect().height - this.scrollTop();\n  this.cellSelector.row.linePos(linePos + 'px');\n  this.cellSelector.row.dropIndex(dropIndex);\n  this.dragY(event.pageY);\n};\n\nGridView.prototype.dragCols = function(event) {\n  let dropIndex = Math.min(this.getMousePosCol(event.pageX),\n                           this.viewSection.viewFields().peekLength - 1);\n  if (this.cellSelector.containsCol(dropIndex)) {\n    dropIndex = this.cellSelector.colLower();\n  } else if (dropIndex > this.cellSelector.colUpper()) {\n    dropIndex += 1;\n  }\n  if (this.cellSelector.colUpper() === this.viewSection.viewFields().peekLength - 1) {\n    dropIndex = Math.min(dropIndex, this.cellSelector.colLower());\n  }\n\n  const viewDataNumsWidth = $('.gridview_corner_spacer').width();\n  let linePos = viewDataNumsWidth + this.colRightOffsets.peek().getSumTo(dropIndex);\n  // If there are frozen columns and dropIndex (column index) is inside the frozen set.\n  const frozenCount = this.numFrozen();\n  const inFrozen = frozenCount > 0 && dropIndex < frozenCount;\n  const scrollLeft = this.scrollLeft();\n  // Move line left by the number of pixels the frozen set is scrolled.\n  if (inFrozen) {\n    linePos -= Math.min(this.frozenOffset.peek(), scrollLeft);\n  } else {\n    // Else move left by the whole amount.\n    linePos -= scrollLeft;\n  }\n  this.cellSelector.col.linePos(linePos + 'px');\n  this.cellSelector.col.dropIndex(dropIndex);\n  this.dragX(event.pageX);\n};\n\nGridView.prototype.dropRows = function() {\n  var oldIndices = _.range(this.cellSelector.rowLower(), this.cellSelector.rowUpper() + 1);\n  this.moveRows(oldIndices, this.cellSelector.row.dropIndex());\n  this.cellSelector.currentDragType(selector.NONE);\n};\n\nGridView.prototype.dropCols = function() {\n  var oldIndices = _.range(this.cellSelector.colLower(), this.cellSelector.colUpper() + 1);\n  const idx = this.cellSelector.col.dropIndex();\n  this.moveColumns(oldIndices, idx);\n  // If this was a short click on a single already-selected column that results in no\n  // column movement, propose renaming the column.\n  if (Date.now() - this._colClickTime < SHORT_CLICK_IN_MS && oldIndices.length === 1 &&\n      idx === oldIndices[0]) {\n    commands.allCommands.renameField.run();\n  }\n  this._colClickTime = 0;\n  this.cellSelector.currentDragType(selector.NONE);\n};\n\n// End of Dragging logic\n\n\n// ===========================================================================\n// CONTEXT MENUS\n\nGridView.prototype.columnContextMenu = function(ctl, copySelection, field, filterTriggerCtl) {\n  const selectedColIds = copySelection.colIds;\n  this.ctxMenuHolder.autoDispose(ctl);\n  const options = this._getColumnMenuOptions(copySelection);\n\n  if (selectedColIds.length > 1 && selectedColIds.includes(field.column().colId())) {\n    return MultiColumnMenu(options);\n  } else {\n    return ColumnContextMenu({\n      filterOpenFunc: () => filterTriggerCtl.open(),\n      sortSpec: this.gristDoc.viewModel.activeSection.peek().activeSortSpec.peek(),\n      colId: field.column.peek().id.peek(),\n      ...options,\n    });\n  }\n};\n\nGridView.prototype._getColumnMenuOptions = function(copySelection) {\n  return {\n    columnIndices: copySelection.fields.map(f => f._index()),\n    totalColumnCount : this.viewSection.viewFields.peek().peekLength,\n    numColumns: copySelection.fields.length,\n    numFrozen: this.viewSection.numFrozen.peek(),\n    disableModify: calcFieldsCondition(copySelection.fields, f => f.disableModify.peek()),\n    isReadonly: this.gristDoc.isReadonly.get() || this.isPreview,\n    isRaw: this.viewSection.isRaw(),\n    isFiltered: this.isFiltered(),\n    isFormula: calcFieldsCondition(copySelection.fields, f => f.column.peek().isRealFormula.peek()),\n  };\n}\n\nGridView.prototype._columnFilterMenu = function(ctl, field, options) {\n  this.ctxMenuHolder.autoDispose(ctl);\n  const filterInfo = this.viewSection.filters()\n    .find(({fieldOrColumn}) => fieldOrColumn.origCol().origColRef() === field.column().origColRef());\n  if (!filterInfo.isFiltered.peek()) {\n    // This is a new filter - initialize its spec and pin it.\n    this.viewSection.setFilter(filterInfo.fieldOrColumn.origCol().origColRef(), {\n      filter: NEW_FILTER_JSON,\n      pinned: true,\n    });\n  }\n  return this.createFilterMenu(ctl, filterInfo, options);\n};\n\nGridView.prototype.maybeSelectColumn = function (elem, field) {\n  // Change focus before running command so that the correct viewsection's cursor is moved.\n  this.viewSection.hasFocus(true);\n  const selectedColIds = this.getSelection().colIds;\n  if (selectedColIds.length > 1 && selectedColIds.includes(field.column().colId())) {\n    return; // No need to select the column because it's included in the multi-selection\n  }\n  this.assignCursor(elem, selector.COL);\n};\n\nGridView.prototype.maybeSelectRow = function(elem, rowId) {\n  // Change focus before running command so that the correct viewsection's cursor is moved.\n  this.viewSection.hasFocus(true);\n  // If the clicked row was not already in the selection, move the selection to the row.\n  if (!this.getSelection().rowIds.includes(rowId)) {\n    this.assignCursor(elem, selector.ROW);\n  }\n};\n\nGridView.prototype.rowContextMenu = function() {\n  return RowContextMenu(this._getRowContextMenuOptions());\n};\n\nGridView.prototype._getRowContextMenuOptions = function() {\n  return {\n    disableInsert: Boolean(this.gristDoc.isReadonly.get() || this.viewSection.disableAddRemoveRows() || this.tableModel.tableMetaRow.onDemand()),\n    disableDelete: Boolean(this.gristDoc.isReadonly.get() || this.viewSection.disableAddRemoveRows() || this.getSelection().onlyAddRowSelected()),\n    isViewSorted: this.viewSection.activeSortSpec.peek().length > 0,\n    numRows: this.getSelection().rowIds.length,\n  };\n};\n\nGridView.prototype.cellContextMenu = function() {\n  return CellContextMenu(\n    this._getRowContextMenuOptions(),\n    this._getColumnMenuOptions(this.getSelection())\n  );\n};\n\n// End Context Menus\n\nGridView.prototype.scrollToCursor = function(sync = true) {\n  return kd.doScrollChildIntoView(this.scrollPane, this.cursor.rowIndex(), sync);\n}\n\nGridView.prototype._duplicateRows = async function() {\n  const addRowIds = await BaseView.prototype._duplicateRows.call(this);\n  // Highlight duplicated rows if the grid is not sorted (or the sort doesn't affect rowIndex).\n  const topRowIndex = this.viewData.getRowIndex(addRowIds[0]);\n  // Set row on the first record added.\n  this.setCursorPos({rowId: addRowIds[0]});\n  // Highlight inserted area (if we inserted rows in correct order)\n  if (addRowIds.every((r, i) => r === this.viewData.getRowId(topRowIndex + i))) {\n    this.cellSelector.selectArea(topRowIndex, 0,\n      topRowIndex + addRowIds.length - 1, this.viewSection.viewFields().peekLength - 1);\n  }\n}\n\nGridView.prototype._clearCopySelection = function() {\n  this.copySelection(null);\n};\n\nGridView.prototype._showTooltipOnHover = function(field, isShowingTooltip) {\n  return [\n    kd.toggleClass(\"hover-column\", isShowingTooltip),\n    dom.on('mouseenter', () => {\n      this.changeHover(field._index());\n    }),\n    dom.on('mousedown', (ev) => {\n      if (isShowingTooltip()) {\n        ev.preventDefault();\n      }\n    }),\n  ];\n};\n\nfunction buildStyleOption(owner, computedRule, optionName) {\n  return ko.computed(() => {\n    if (owner.isDisposed()) { return null; }\n    const rule = computedRule();\n    if (!rule || !rule.style) { return ''; }\n    return rule.style[optionName] || '';\n  });\n}\n\n// Helper to show tooltip over column selection in the full edit mode.\nclass HoverColumnTooltip {\n  constructor(el) {\n    this.el = el;\n  }\n  show(text) {\n    this.hide();\n    this.tooltip = showTooltip(this.el, () => dom(\"span\", text, testId(\"column-formula-tooltip\")))\n  }\n  hide() {\n    if (this.tooltip ) {\n      this.tooltip.close();\n      this.tooltip = null;\n    }\n  }\n  dispose() {\n    this.hide();\n  }\n}\n\n// Simple function that calculates good color for zebra stripes.\nfunction calcZebra(hex) {\n  if (!hex || hex.length !== 7) { return hex; }\n  // HSL: [HUE, SATURATION, LIGHTNESS]\n  const hsl = convert.hex.hsl(hex.substr(1));\n  // For bright color, we will make it darker. Value was picked by hand, to\n  // produce #f8f8f8f out of #ffffff.\n  if (hsl[2] > 50) { hsl[2] -= 2.6; }\n  // For darker color, we will make it brighter. Value was picked by hand to look\n  // good for the darkest colors in our palette.\n  else if (hsl[2] > 1) { hsl[2] += 11; }\n  // For very dark colors\n  else { hsl[2] += 16; }\n  return `#${convert.hsl.hex(hsl)}`;\n}\n\nmodule.exports = GridView;\n","/**\n * Module for displaying a record of user data in a two-dimentional editable layout.\n */\n\n\n// TODO:\n// 1. Consider a way to upgrade a file to add layoutSpec column to the ViewSections meta table.\n//    Plan: add docInfo schemaVersion field.\n//          when opening a file, let the sandbox check the version and check if loaded metadata matches the schema.\n//          sandbox should return doc-version, current-version, and match status.\n//          if current-version != doc_version [AND mismatch] (this is optional, let's think if we\n//              want that), then\n//            Sandbox creates new temp document\n//            Replays action log into it.\n//            Renames it over the old document. [Would be nice to ask the user first]\n//            Reopen document\n// 1. [LATER] Create RecordLayout file with APIs to support more efficient big list of laid-out\n//    records (so that a single RecordLayout can maintain many Layout instances).\n// 2. [LATER] Allow dragging in boxes from the view config.\n// 3. [LATER] Allow creating new field and inserting at the bottom.\n// 4. [LATER] Allow selecting existing field from context menu and inserting.\n// 5. [LATER] Add interface to Layout to tab forward and back, left, right, up, down, and use that in\n//    detail view.\n// 6. [LATER] Implement saving and loading of widths in the layout spec.\n\nvar _ = require('underscore');\nvar ko = require('knockout');\nvar Promise = require('bluebird');\n\nvar gutil = require('app/common/gutil');\nvar dispose = require('../lib/dispose');\nvar dom = require('../lib/dom');\nvar {Delay} = require('../lib/Delay');\nvar kd = require('../lib/koDom');\nvar {makeT} = require('../lib/localization');\nvar Layout = require('./Layout');\nvar RecordLayoutEditor = require('./RecordLayoutEditor');\nvar commands = require('./commands');\nvar {menuToggle} = require('app/client/ui/MenuToggle');\nvar {menu} = require('../ui2018/menus');\nvar {testId} = require('app/client/ui2018/cssVars');\nvar {contextMenu} = require('app/client/ui/contextMenu');\n\nconst t = makeT('RecordLayout');\n\n/**\n * Construct a RecordLayout.\n * @param {MetaRowModel} options.viewSection: The model for the viewSection represented.\n * @param {Function} options.buildFieldDom: Function called with (viewField) that should\n *    return the DOM for that field.\n * @param {Function} options.resizeCallback: Optional function called with no arguments when\n *    the RecordLayout is modified in a way that may require resizing.\n */\nfunction RecordLayout(options) {\n  this.viewSection = options.viewSection;\n  this.buildFieldDom = options.buildFieldDom;\n  this.buildRowContextMenu = options.buildRowContextMenu;\n  this.buildFieldContextMenu = options.buildFieldContextMenu;\n  this.isEditingLayout = ko.observable(false);\n  this.editIndex = ko.observable(0);\n  this.layoutEditor = ko.observable(null);    // RecordLayoutEditor when one is active.\n\n  if (options.resizeCallback) {\n    this._resizeCallback = options.resizeCallback;\n    this._delayedResize = this.autoDispose(Delay.create());\n  }\n\n  // Observable object that will be rebuilt whenever the list of viewFields changes.\n  this.fieldsById = this.autoDispose(ko.computed(function() {\n    return _.indexBy(this.viewSection.viewFields().all(),\n      function(field) { return field.getRowId(); });\n  }, this));\n\n  // Update the stored layoutSpecObj with any missing fields that are present in viewFields.\n  this.layoutSpec = this.autoDispose(ko.computed(function() {\n    if (this.viewSection.isDisposed()) { return null; }\n    return RecordLayout.updateLayoutSpecWithFields(\n      this.viewSection.layoutSpecObj(), this.viewSection.viewFields().all());\n  }, this).extend({rateLimit: 0})); // layoutSpecObj and viewFields should be updated together.\n  this.autoDispose(this.layoutSpec.subscribe(() => this.resizeCallback()));\n\n  // TODO: We may want a context menu for each record, but the previous implementation wasn't\n  // working, and was creating a separate context menu for each row, which is very expensive. A\n  // better approach is to create a single context menu for the view section, as GridView does.\n}\ndispose.makeDisposable(RecordLayout);\n\n\nRecordLayout.prototype.resizeCallback = function() {\n  // Note that while editing layout, scrolly is hidden, and resizeCallback is unhelpful. We rely\n  // on explicit resizing when isEditLayout is reset.\n  if (!this.isDisposed() && this._delayedResize && !this.isEditingLayout.peek()) {\n    this._delayedResize.schedule(0, this._resizeCallback);\n  }\n};\n\nRecordLayout.prototype.getField = function(fieldRowId) {\n  // If fieldRowId is a string which includes \":\", then it's actually \"colRef:label:value\"\n  // placeholder that we use when adding a new field. If so, return a special object with the fields\n  // available. Note that virtual tables also produces string fieldRowId but they have no \":\".\n  if (typeof fieldRowId === 'string' && fieldRowId.includes(':')) {\n    var parts = gutil.maxsplit(fieldRowId, \":\", 2);\n    return {\n      isNewField: true,        // To make it easy to distinguish from a ViewField MetaRowModel\n      colRef: parseInt(parts[0], 10),\n      label: parts[1],\n      value: parts[2]\n    };\n  }\n  return this.fieldsById()[fieldRowId];\n};\n\n\n/**\n * Sets the layout to being edited.\n */\nRecordLayout.prototype.editLayout = function(rowIndex) {\n  this.editIndex(rowIndex);\n  this.isEditingLayout(true);\n};\n\n/**\n * Ends layout editing, without updating the layout on the server.\n */\nRecordLayout.prototype.onEditLayoutCancel = function(layoutSpec) {\n  this.isEditingLayout(false);\n  // Call resizeCallback here, since it's possible that theme was also changed (and auto-saved)\n  // even though the layout itself was reverted.\n  this.resizeCallback();\n};\n\n/**\n * Ends layout editing, and saves the given layoutSpec to the server.\n */\nRecordLayout.prototype.onEditLayoutSave = async function(layoutSpec) {\n  try {\n    await this.saveLayoutSpec(layoutSpec);\n  } finally {\n    this.isEditingLayout(false);\n    this.resizeCallback();\n  }\n};\n\n/**\n * If there is no layout saved, we can create a default layout just from the list of fields for\n * this view section. By default we just arrange them into a list of rows, two fields per row.\n */\nRecordLayout.updateLayoutSpecWithFields = function(spec, viewFields) {\n  // We use tmpLayout as a way to manipulate the layout before we get a final spec from it.\n  var tmpLayout = Layout.Layout.create(spec, function(leafId) { return dom('div'); });\n\n  var specFieldIds = tmpLayout.getAllLeafIds();\n  var viewFieldIds = viewFields.map(function(f) { return f.getRowId(); });\n\n  // For any stale fields (no longer among viewFields), remove them from tmpLayout.\n  _.difference(specFieldIds, viewFieldIds).forEach(function(leafId) {\n    tmpLayout.getLeafBox(leafId).dispose();\n  });\n\n  // For all fields that should be in the spec but aren't, add them to tmpLayout. We maintain a\n  // two-column layout, so add a new row, or a second box to the last row if it's a leaf.\n  _.difference(viewFieldIds, specFieldIds).forEach(function(leafId) {\n    var newBox = tmpLayout.buildLayoutBox({ leaf: leafId });\n    var rows = tmpLayout.rootBox().childBoxes.peek();\n    if (rows.length >= 1 && _.last(rows).isLeaf()) {\n      // Add a new child to the last row.\n      _.last(rows).addChild(newBox, true);\n    } else {\n      // Add a new row.\n      tmpLayout.rootBox().addChild(newBox, true);\n    }\n  });\n\n  spec = tmpLayout.getLayoutSpec();\n  tmpLayout.dispose();\n  return spec;\n};\n\n/**\n * Saves the layout spec as build by the user. This is quite involved, because it may need to\n * remove fields as well as create fields and possibly new columns. And it needs the results of\n * these operations to update the spec before saving it.\n */\nRecordLayout.prototype.saveLayoutSpec = async function(layoutSpec) {\n  // The layout hasn't actually changed. Skip the rest to avoid creating no-op actions (the\n  // resulting no-op undo would be particularly confusing).\n  if (JSON.stringify(layoutSpec) === this.viewSection.layoutSpec.peek()) {\n    return;\n  }\n\n  const docModel = this.viewSection._table.docModel;\n  const docData = docModel.docData;\n  const tableId = this.viewSection.table().tableId();\n  const getField = fieldRef => this.getField(fieldRef);\n  const addColAction = [\"AddColumn\", null, {}];\n\n  // Build a set of fieldRefs (i.e. rowIds) that are currently stored. Also build a map of colRef\n  // to fieldRef, so that we can restore a field that got removed and re-added (as a colRef).\n  var origRefs = [];\n  var colRefToFieldRef = new Map();\n  this.viewSection.viewFields().all().forEach(f => {\n    origRefs.push(f.getRowId());\n    colRefToFieldRef.set(f.colRef(), f.getRowId());\n  });\n\n  // Initialize leaf index counter and num cols to be added counter.\n  var nextPos = 0;\n  var addColNum = 0;\n\n  // Initialize arrays to keep track of existing field refs and their updated positions.\n  var existingRefs = [];\n  var existingPositions = [];\n\n  // Initialize arrays to keep track of added fields for existing but hidden columns.\n  var hiddenColRefs = [];\n  var hiddenCallbacks = [];\n  var hiddenPositions = [];\n\n  // Initialize arrays to keep track of newly added columns.\n  var addedCallbacks = [];\n  var addedPositions = [];\n\n  // Recursively process all layoutBoxes in the spec. Sets up bookkeeping arrays for\n  // existing fields and added fields for new/hidden cols from which the action bundle will\n  // be created.\n  function processBox(spec) {\n    // \"empty\" is a temporary placeholder used by LayoutEditor, and not a valid leaf.\n    if (spec.leaf && spec.leaf !== \"empty\") {\n      let pos = nextPos++;\n      let field = getField(spec.leaf);\n      let updateLeaf = ref => { spec.leaf = ref; };\n      if (!field.isNewField) {\n        // Existing field.\n        existingRefs.push(field.getRowId());\n        existingPositions.push(pos);\n      } else if (colRefToFieldRef.has(field.colRef)) {\n        // Existing field that got removed and re-added.\n        let fieldRef = colRefToFieldRef.get(field.colRef);\n        existingRefs.push(fieldRef);\n        existingPositions.push(pos);\n        updateLeaf(fieldRef);\n      } else if (Number.isNaN(field.colRef)) {\n        // We need to add a new column AND field.\n        addColNum++;\n        addedCallbacks.push(updateLeaf);\n        addedPositions.push(pos);\n      } else {\n        // We need to add a field for an existing column.\n        hiddenColRefs.push(field.colRef);\n        hiddenCallbacks.push(updateLeaf);\n        hiddenPositions.push(pos);\n      }\n    }\n    if (spec.children) {\n      spec.children.map(processBox);\n    }\n  }\n  processBox(layoutSpec);\n\n  // Combine data for item which require both new columns and new fields and only new fields,\n  // with items which require new columns first.\n  let callbacks = addedCallbacks.concat(hiddenCallbacks);\n  let positions = addedPositions.concat(hiddenPositions);\n\n  // Use separate copies of addColAction, since sendTableActions modified each in-place.\n  let addActions = gutil.arrayRepeat(addColNum, 0).map(() => addColAction.slice());\n\n  await docData.bundleActions(t(\"Updating record layout.\"), () => {\n    return Promise.try(() => {\n      return addColNum > 0 ? docModel.dataTables[tableId].sendTableActions(addActions) : [];\n    })\n    .then(results => {\n      let colRefs = results.map(r => r.colRef).concat(hiddenColRefs);\n      const addFieldNum = colRefs.length;\n      // Add fields for newly added columns and previously hidden columns.\n      return addFieldNum > 0 ?\n        docModel.viewFields.sendTableAction([\"BulkAddRecord\", gutil.arrayRepeat(addFieldNum, null), {\n          parentId: gutil.arrayRepeat(addFieldNum, this.viewSection.getRowId()),\n          colRef: colRefs,\n          parentPos: positions\n        }]) : [];\n    })\n    .each((fieldRef, i) => {\n      // Call the stored callback for each fieldRef, which each set the correct layoutSpec leaf\n      // to the newly obtained fieldRef.\n      callbacks[i](fieldRef);\n    })\n    .then(addedRefs => {\n      let actions = [];\n\n      // Records present before that were not present after editing must be removed.\n      let finishedRefs = new Set(existingRefs.concat(addedRefs));\n      let removed = origRefs.filter(fieldRef => !finishedRefs.has(fieldRef));\n      if (removed.length > 0) {\n        actions.push([\"BulkRemoveRecord\", \"_grist_Views_section_field\", removed]);\n      }\n\n      // Positions must be updated for fields which were not added/removed.\n      if (existingRefs.length > 0) {\n        actions.push([\"BulkUpdateRecord\", \"_grist_Views_section_field\", existingRefs, {\n          \"parentPos\": existingPositions\n        }]);\n      }\n\n      // And update the layoutSpecObj itself.\n      actions.push([\"UpdateRecord\", \"_grist_Views_section\", this.viewSection.getRowId(), {\n        \"layoutSpec\": JSON.stringify(layoutSpec)\n      }]);\n\n      return docData.sendActions(actions);\n    })\n  });\n};\n\n/**\n * Builds the Layout dom for a single record.\n */\nRecordLayout.prototype.buildLayoutDom = function(row, optCreateEditor) {\n  const createEditor = Boolean(optCreateEditor && !this.layoutEditor.peek());\n\n  const layout = Layout.Layout.create(this.layoutSpec(), (fieldRowId) =>\n    dom('div.g_record_layout_leaf.flexhbox.flexauto',\n      this.buildFieldDom(this.getField(fieldRowId), row),\n      (createEditor ?\n        kd.maybe(this.layoutEditor, editor => editor.buildLeafDom()) :\n        null\n      )\n    )\n  );\n\n  const sub = this.layoutSpec.subscribe((spec) => { layout.buildLayout(spec, createEditor); });\n\n  if (createEditor) {\n    this.layoutEditor(RecordLayoutEditor.create(this, layout));\n  }\n\n  return dom('div.g_record_detail.flexauto',\n    dom.autoDispose(layout),\n    dom.autoDispose(sub),\n    createEditor ? dom.onDispose(() => {\n      this.layoutEditor.peek().dispose();\n      this.layoutEditor(null);\n    }) : null,\n    // enables field context menu anywhere on the card\n    contextMenu(() => this.buildFieldContextMenu(row)),\n    dom('div.detail_row_num',\n      kd.text(() => (row._index() + 1)),\n      dom.on('contextmenu', ev => {\n        // This is a little hack to position the menu the same way as with a click,\n        // the same hack as on a column menu.\n        ev.preventDefault();\n        // prevent 2nd context menu to show up\n        ev.stopPropagation();\n        ev.currentTarget.querySelector('.menu_toggle').click();\n      }),\n      menuToggle(null,\n        dom.on('click', () => {\n          this.viewSection.hasFocus(true);\n          commands.allCommands.setCursor.run(row);\n        }),\n        menu(() => this.buildRowContextMenu(row)),\n        testId('card-menu-trigger')\n      )\n    ),\n    dom('div.g_record_detail_inner', layout.rootElem)\n  );\n};\n\n/**\n * Returns the viewField row model for the field that the given DOM element belongs to.\n */\nRecordLayout.prototype.getContainingField = function(elem, optContainer) {\n  return this.getField(Layout.Layout.getContainingBox(elem, optContainer).leafId());\n};\n\n/**\n * Returns the RowModel for the record that the given DOM element belongs to.\n */\nRecordLayout.prototype.getContainingRow = function(elem, optContainer) {\n  var itemElem = dom.findAncestor(elem, optContainer, '.g_record_detail');\n  return ko.utils.domData.get(itemElem, 'itemModel');\n};\n\nmodule.exports = RecordLayout;\n","var _ = require('underscore');\nvar BackboneEvents = require('backbone').Events;\n\nvar dispose = require('app/client/lib/dispose');\nvar {makeT} = require('app/client/lib/localization');\nvar commands = require('./commands');\nvar LayoutEditor = require('./LayoutEditor');\n\nconst t = makeT('RecordLayoutEditor');\nconst {basicButton, cssButton, primaryButton} = require('app/client/ui2018/buttons');\nconst {icon} = require('app/client/ui2018/icons');\nconst {menu, menuDivider, menuItem} = require('app/client/ui2018/menus');\nconst {testId} = require('app/client/ui2018/cssVars');\nconst {dom, Observable, styled} = require('grainjs');\n\n//----------------------------------------------------------------------\n\n/**\n * An extension of LayoutEditor which includes commands and the option for a callback function.\n *\n * Used by RecordLayout.js\n *\n * @param {layoutSpec} observable - An observable evaluating to the original layoutSpec of the layout.\n * @param {optResizeCallback} Function - An optional function to be called after every resize during\n *  layout editing.\n */\nfunction RecordLayoutEditor(recordLayout, layout, optResizeCallback) {\n  this.recordLayout = recordLayout;\n  this.layout = layout;\n  this.layoutEditor = this.autoDispose(LayoutEditor.LayoutEditor.create(layout));\n  this._hiddenColumns = this.autoDispose(Observable.create(null, this.getHiddenColumns()));\n\n  this.listenTo(layout, 'layoutChanged', function() {\n    this._hiddenColumns.set(this.getHiddenColumns());\n  });\n\n  if (optResizeCallback) {\n    this.listenTo(layout, 'layoutChanged', optResizeCallback);\n    this.listenTo(layout, 'layoutResized', optResizeCallback);\n  }\n\n  // Command group implementing the commands available while editing the layout.\n  this.autoDispose(commands.createGroup(RecordLayoutEditor.editLayoutCommands, this, true));\n}\ndispose.makeDisposable(RecordLayoutEditor);\n_.extend(RecordLayoutEditor.prototype, BackboneEvents);\n\n\n/**\n * Commands active while editing the record layout.\n */\nRecordLayoutEditor.editLayoutCommands = {\n  accept: function() {\n    this.recordLayout.onEditLayoutSave(this.layout.getLayoutSpec());\n  },\n  cancel: function() {\n    this.layout.buildLayout(this.recordLayout.layoutSpec());\n    this.recordLayout.onEditLayoutCancel();\n  },\n};\n\n/**\n * Returns the list of columns that are not included in the current layout.\n */\nRecordLayoutEditor.prototype.getHiddenColumns = function() {\n  var included = new Set(this.layout.getAllLeafIds().map(function(leafId) {\n    var f = this.recordLayout.getField(leafId);\n    return f.isNewField ? f.colRef : f.colRef.peek();\n  }, this));\n  return this.recordLayout.viewSection.table().columns().all().filter(function(col) {\n    return !included.has(col.getRowId()) && !col.isHiddenCol();\n  });\n};\n\nRecordLayoutEditor.prototype._addField = function(leafId) {\n  var newBox = this.layout.buildLayoutBox({ leaf: leafId });\n  var rows = this.layout.rootBox().childBoxes.peek();\n  if (rows.length >= 1 && _.last(rows).isLeaf()) {\n    // Add a new child to the last row.\n    _.last(rows).addChild(newBox, true);\n  } else {\n    // Add a new row.\n    this.layout.rootBox().addChild(newBox, true);\n  }\n};\n\nRecordLayoutEditor.prototype.buildEditorDom = function() {\n  const addNewField = () => { this._addField(':New_Field:'); };\n  const showField = (col) => {\n    // Use setTimeout, since showing a field synchronously removes it from the list, which would\n    // prevent the menu from closing if we don't let the event to run its course.\n    setTimeout(() => this._addField(col.getRowId() + ':' + col.label()), 0);\n  };\n\n  return cssControls(\n    basicButton(t('Add Field'), cssCollapseIcon('Collapse'),\n      menu((ctl) => [\n        menuItem(() => addNewField(), t('Create New Field')),\n        dom.maybe((use) => use(this._hiddenColumns).length > 0,\n          () => menuDivider()),\n        dom.forEach(this._hiddenColumns, (col) =>\n          menuItem(() => showField(col), t(\"Show field {{- label}}\", {label:col.label()}))\n        ),\n        testId('edit-layout-add-menu'),\n      ]),\n    ),\n\n    dom('div.flexauto', {style: 'margin-left: 8px'}),\n    this.buildFinishButtons(),\n    testId('edit-layout-controls'),\n  );\n};\n\nRecordLayoutEditor.prototype.buildFinishButtons = function() {\n  return [\n    primaryButton(t('Save Layout'),\n      dom.on('click', () => commands.allCommands.accept.run()),\n    ),\n    basicButton(t('Cancel'),\n      dom.on('click', () => commands.allCommands.cancel.run()),\n      {style: 'margin-left: 8px'},\n    ),\n  ];\n}\n\nRecordLayoutEditor.prototype.buildLeafDom = function() {\n  return dom('div.layout_grabbable.g_record_layout_editing',\n    dom('div.g_record_delete_field.glyphicon.glyphicon-eye-close',\n      dom.on('mousedown', (ev) => ev.stopPropagation()),\n      dom.on('click', (ev, elem) => {\n        ev.preventDefault();\n        ev.stopPropagation();\n        const box = this.layoutEditor.getBoxFromElement(elem);\n        this.layoutEditor.removeContainingBox(box);\n      })\n    )\n  );\n};\n\nconst cssControls = styled('div', `\n  display: flex;\n  align-items: flex-start;\n\n  & > .${cssButton.className} {\n    white-space: nowrap;\n    overflow: hidden;\n  }\n`);\n\nconst cssCollapseIcon = styled(icon, `\n  margin: -3px -2px -2px 2px;\n`);\n\nmodule.exports = RecordLayoutEditor;\n","/* global $ */\nvar ko = require('knockout');\nvar dispose = require('../lib/dispose');\nvar dom = require('../lib/dom');\nvar kd = require('../lib/koDom');\nvar kf = require('../lib/koForm');\nvar AceEditor = require('./AceEditor');\nvar {makeT} = require('app/client/lib/localization');\n\nconst t = makeT('ValidationPanel');\n\n/**\n * Document level configuration settings.\n * @param {Object}    options.gristDoc   A reference to the GristDoc object\n * @param {Function}  docName            A knockout observable containing a String\n */\nfunction ValidationPanel(options) {\n  this.gristDoc = options.gristDoc;\n\n  this.validationsTable = this.gristDoc.docModel.validations;\n  this.validations = this.autoDispose(this.validationsTable.createAllRowsModel('id'));\n\n  this.docTables = this.autoDispose(\n    this.gristDoc.docModel.tables.createAllRowsModel('tableId'));\n\n  this.tableChoices = this.autoDispose(this.docTables.map(function(table) {\n    return { label: table.tableId, value: table.id() };\n  }));\n}\ndispose.makeDisposable(ValidationPanel);\n\n\nValidationPanel.prototype.onAddRule = function() {\n  this.validationsTable.sendTableAction([\"AddRecord\", null, {\n    tableRef: this.docTables.at(0).id(),\n    name: t(\"Rule {{length}}\", {length: this.validations.peekLength + 1}),\n    formula: \"\"\n  }])\n  .then(function() {\n    $('.validation_formula').last().find(\"input\").focus();\n  });\n};\n\nValidationPanel.prototype.onDeleteRule = function(rowId) {\n  this.validationsTable.sendTableAction([\"RemoveRecord\", rowId]);\n};\n\nValidationPanel.prototype.buildDom = function() {\n  return [\n    kf.row(\n      1, kf.label('Validations'),\n      1, kf.buttonGroup(\n        kf.button(this.onAddRule.bind(this), 'Add Rule', dom.testId(\"Validation_addRule\"))\n      )\n    ),\n    dom('div',\n      dom.testId(\"Validation_rules\"),\n      kd.foreach(this.validations, validation => {\n        var editor = AceEditor.create({ observable: validation.formula });\n        var editorUpToDate = ko.observable(true);\n        return dom('div.validation',\n          dom.autoDispose(editor),\n          dom('div.validation_title.flexhbox',\n            dom('div.validation_name', kf.editableLabel(validation.name)),\n            dom('div.flexitem'),\n            dom('div.validation_trash.glyphicon.glyphicon-remove',\n              dom.on('click', this.onDeleteRule.bind(this, validation.id()))\n            )\n          ),\n          kf.row(\n            1, dom('div.glyphicon.glyphicon-tag.config_icon'),\n            8, kf.label('Table'),\n            9, kf.select(validation.tableRef, this.tableChoices)\n          ),\n          dom('div.kf_elem.validation_formula', editor.buildDom(aceObj => {\n            editor.attachSaveCommand();\n            aceObj.on('change', () => {\n              // Monitor whether the value mismatch is reflected by editorDiff\n              if ((editor.getValue() === validation.formula()) !== editorUpToDate()) {\n                editorUpToDate(!editorUpToDate());\n              }\n            });\n            aceObj.removeAllListeners('blur');\n          })),\n          kf.row(\n            2, '',\n            1, kf.buttonGroup(\n              kf.button(() => editor.writeObservable(),\n                'Apply', { title: t(\"Update formula (Shift+Enter)\")},\n                kd.toggleClass('disabled', editorUpToDate)\n              )\n            )\n          )\n        );\n      })\n    )\n  ];\n};\n\nmodule.exports = ValidationPanel;\n","/* global $ */\n\nvar koDom = require('../lib/koDom');\n\n/**\n * This adds `.isFlex` option to JQuery's $.ui.resizable to make it work better with flexbox.\n * Specifically, when resizing to the left, JQuery adjusts both `width` and `left` properties. If\n * the element is part of a flexbox, it's wrong to adjust `left`. This widget adds `.isFlex`\n * option: when set to true, the `left` (also `top`) adjustments get ignored.\n */\nvar _respectSize = $.ui.resizable.prototype._respectSize;\n$.ui.resizable.prototype._respectSize = function() {\n  var data = _respectSize.apply(this, arguments);\n  if (this.options.isFlex) {\n    console.log(\"Ignoring left, top\");\n    data.left = data.top = undefined;\n  }\n  return data;\n};\n\n/**\n * When used as an argument to dom() function, makes the containing element resizable, with the\n * size written into the given observable. If the observable has a .save() method, it's called\n * by default when the resize is complete (to save the new size to the server).\n * @param {Object} options.enabled: An observable, a constant, or a function for a computed\n *      observable. The value is treated as a boolean, and determined whether resizable\n *      functionality is enabled.\n * @param {String} options.handles: Same as for jqueryui's `resizable`, e.g. 'e' to resize right\n *      edge (east), 'w' to resize left edge (west).\n * @param {Function} options.stop: Additional callback to call when resizing stops.\n * @param {Boolean} options.isFlex: If true, will avoid changing 'left' when resizing the left edge.\n * @param {Number} options.minWidth: The minimum width the element can be resized to.\n *      Defaults to 10 (JQuery default).\n * @param {Boolean} options.shouldSave: Whether .save() on `widthObservable` should be called.\n *      Defaults to true.\n */\nfunction makeResizable(widthObservable, options) {\n  options = options || {};\n  function onEvent(e, ui) {\n    widthObservable(ui.size.width);\n    if (e.type === 'resizestop') {\n      if (options.stop) {\n        options.stop(e, ui);\n      }\n      if (widthObservable.save && options.shouldSave !== false) {\n        widthObservable.save();\n      }\n    }\n  }\n\n  return function(elem) {\n    $(elem).resizable({\n      handles: options.handles || 'e',\n      resize: onEvent,\n      stop: onEvent,\n      isFlex: options.isFlex,\n      minWidth: options.minWidth || 10\n    });\n\n    if (options.hasOwnProperty('enabled')) {\n      koDom.setBinding(elem, options.enabled, function(elem, value) {\n        if (value) {\n          $(elem).resizable('enable');\n        } else {\n          $(elem).resizable('disable').removeClass('ui-state-disabled');\n        }\n      });\n    }\n  };\n}\nexports.makeResizable = makeResizable;\n","/**\n * Scrolly is a class that allows scrolling a very long list of rows by rendering only those\n * that are visible. Note that the elements rendered by scrolly should have box-sizing set to\n * border-box.\n */\n\n\n\nvar _ = require('underscore');\nvar ko = require('knockout');\nvar assert = require('assert');\nvar gutil = require('app/common/gutil');\nvar BinaryIndexedTree = require('app/common/BinaryIndexedTree');\nvar {Delay} = require('./Delay');\nvar dispose = require('./dispose');\nvar kd = require('./koDom');\nvar dom = require('./dom');\n\n/**\n * Use the browser globals in a way that allows replacing them with mocks in tests.\n */\nvar G = require('./browserGlobals').get('window', '$');\n\n/**\n * Scrolly may contain multiple panes scrolling in parallel (e.g. for row numbers). The UI for\n * each pane consists of two nested pieces: a scrollDiv and a blockDiv. The scrollDiv is very tall\n * and mostly empty; the blockDiv contains the actual rendered rows, and is absolutely positioned\n * inside its scrollDiv.\n */\nfunction ScrollyPane(scrolly, paneIndex, container, options, itemCreateFunc) {\n  this.scrolly = scrolly;\n  this.paneIndex = paneIndex;\n  this.container = container;\n  this.itemCreateFunc = itemCreateFunc;\n  this.preparedRows = [];\n\n  _.extend(this.scrolly.options, options);\n\n  this.container.appendChild(\n    this.scrollDiv = dom(\n      'div.scrolly_outer',\n      kd.style('height', this.scrolly.totalHeightPx),\n      this.blockDiv = dom(\n        'div',\n        kd.style('position', 'absolute'),\n        kd.style('top', this.scrolly.blockTopPx),\n        kd.style('width', options.fitToWidth ? '100%' : ''),\n        kd.style('padding-right', options.paddingRight + 'px')\n      )\n    )\n  );\n\n  ko.utils.domNodeDisposal.addDisposeCallback(container, () => {\n    this.scrolly.destroyPane(this);\n    // Delete all members, to break cycles.\n    for (var k in this) {\n      delete this[k];\n    }\n  });\n\n  G.$(this.container).on('scroll', () => this.scrolly.onScroll(this) );\n}\n\n/**\n * Prepares the DOM for rows in scrolly's [begin, end) range, reusing currently active rows as\n * much as possible. New rows are saved in this.preparedRows, and also added to the end of\n * blockDiv so that they may be measured.\n */\nScrollyPane.prototype.prepareNewRows = function() {\n  var i, item, row,\n    begin = this.scrolly.begin,\n    count = this.scrolly.end - begin,\n    array = this.scrolly.data.peek(),\n    prevItemModels = this.scrolly.activeItemModels,\n    prevRows = this.preparedRows;\n\n  if (prevRows.length > 0) {\n    // Skip this check if there are no rows, maybe we just added this pane.\n    assert.equal(prevRows.length, prevItemModels.length,\n             \"Rows and models not in sync: \" + prevRows.length + \"!=\" + prevItemModels.length);\n  }\n\n  this.preparedRows = [];\n\n  // Reuse any reusable old rows. They must be tied to an active model.\n  for (i = 0; i < prevRows.length; i++) {\n    row = prevRows[i];\n    item = prevItemModels[i];\n    if (item._index() === null) {\n      ko.removeNode(row);\n    } else {\n      var relIndex = item._index() - begin;\n      assert(relIndex >= 0 && relIndex < count, \"prepareNewRows saw out-of-range model\");\n      this.preparedRows[relIndex] = row;\n    }\n  }\n\n  // Create any missing rows.\n  for (i = 0; i < count; i++) {\n    if (!this.preparedRows[i]) {\n      item = array[begin + i];\n      assert(item, \"ScrollyPane item missing at index \" + (begin + i));\n      item._rowHeightPx(\"\");    // Mark this row as in need of measuring.\n      row = this.itemCreateFunc(item);\n      kd.style('height', item._rowHeightPx)(row);\n      ko.utils.domData.set(row, \"itemModel\", item);\n      this.preparedRows[i] = row;\n      // The row may not end up at the end of blockDiv, but we need to add it to the document in\n      // order to measure it. We'll move it to the right place in arrangePreparedRows().\n      this.blockDiv.appendChild(row);\n    }\n  }\n};\n\n/**\n * Returns the measured height of the given prepared row.\n */\nScrollyPane.prototype.measurePreparedRow = function(rowIndex) {\n  var row = this.preparedRows[rowIndex];\n  var rect = row.getBoundingClientRect();\n  return rect.bottom - rect.top;\n};\n\n/**\n * Update the DOM with the prepared rows in the correct order.\n */\nScrollyPane.prototype.arrangePreparedRows = function() {\n  // Note that everything that was in blockDiv previously is now either gone or is in\n  // preparedRows. So placing all preparedRows into blockDiv automatically removes them from their\n  // old positions.\n  //\n  // For a slight speedup in rendering, we try to avoid removing and reinserting rows\n  // unnecessarily, as that slows down subsequent rendering. We could try harder, by finding the\n  // longest common subsequence, but that's quite a bit harder.\n  for (var i = 0; i < this.preparedRows.length; i++) {\n    var row = this.preparedRows[i];\n    var current = this.blockDiv.childNodes[i];\n    if (row !== current) {\n      this.blockDiv.insertBefore(row, current);\n    }\n  }\n};\n\n//----------------------------------------------------------------------\n\n/**\n * The Scrolly class is used internally to manage the state of the scrolly. It keeps track of the\n * data items being rendered, of the heights of all rows (including cumulative heights, in a\n * BinaryIndexedTree), and various other counts and positions.\n *\n * The actual DOM elements are managed by ScrollyPane class. There may be more than one instance,\n * if there are multiple panes scrolling together (e.g. for row numbers).\n */\nfunction Scrolly(dataModel) {\n  // In the constructor we only initialize the parts shared by all ScrollyPanes.\n  this.data = dataModel;\n  this.numRows = 0;\n  this.options = {\n    paddingBottom: 0\n  };\n\n  this.panes = [];\n\n  // The items currently rendered. Same as this.data._itemModels, but we manage it manually\n  // to maintain the invariant that rendered DOM elements match this.activeItemModels.\n  this.activeItemModels = [];\n\n  // Data structure to store row heights and cumulative offsets of all rows.\n  this.rowHeights = [];\n  this.rowOffsetTree = new BinaryIndexedTree();\n  // TODO: Reconsider row height for rendering layouts / other tall elements in a scrolly.\n  this.minRowHeight = 23;   // In pixels. Rows will be forced to be at least this tall.\n\n  this.numBuffered = 1;     // How many rows to render outside the visible area.\n  this.numRendered = 1;     // Total rows to render.\n\n  this.begin = 0;       // Index of the first rendered row\n  this.end = 0;         // Index of the row after the last rendered one\n\n  this.scrollTop = 0;   // The scrollTop position of all panes.\n  this.shownHeight = 0; // The clientHeight of all panes.\n  this.blockBottom = 0; // Bottom of the rendered block, i.e. rowOffsetTree.getSumTo(this.end)\n\n  // Top in px of the rendered block; rowOffsetTree.getSumTo(this.begin)\n  this.blockTop = ko.observable(0);\n  this.blockTopPx = ko.computed(function() { return this.blockTop() + 'px'; }, this);\n\n  // The height of the scrolly_outer div\n  this.totalHeight = ko.observable(0);\n  this.totalHeightPx = ko.computed(function() { return this.totalHeight() + 'px'; }, this);\n\n  // Subscribe to data changes, and initialize with the current data.\n  this.subscription = this.autoDispose(\n    this.data.subscribe(this.onDataSplice, this, 'spliceChange'));\n\n  // The delayedUpdateSize helper is used by scheduleUpdateSize.\n  this.delayedUpdateSize = this.autoDispose(Delay.create());\n\n  // Initialize with the current data.\n  var array = this.data.all();\n  this.onDataSplice({ array: array, start: 0, added: array.length, deleted: [] });\n\n  //T198: Scrolly should have its own handler to remove, so that when removing handlers it does not\n  //remove other's handler.\n  let onResize = () => {\n    this.scheduleUpdateSize();\n  };\n\n  G.$(G.window).on('resize.scrolly', onResize);\n\n  this.autoDisposeCallback(() => G.$(G.window).off('resize.scrolly', onResize));\n\n}\nexports.Scrolly = Scrolly;\n\ndispose.makeDisposable(Scrolly);\n\n\nScrolly.prototype.debug = function() {\n  console.log(\"Scrolly: numRows \" + this.numRows + \"; panes \" + this.panes.length +\n              \"; numRendered \" + this.numRendered + \" [\" + this.begin + \", \" + this.end + \")\" +\n              \"; block at \" + this.blockTop() + \" of \" + this.totalHeight() +\n              \"; scrolled to \" + this.scrollTop + \"; shownHeight \" + this.shownHeight);\n  console.assert(this.numRows, this.data.peekLength,\n               \"Wrong numRows; data is \" + this.data.peekLength);\n  console.assert(this.numRows, this.rowHeights.length,\n               \"Wrong rowHeights size \" + this.rowHeights.length);\n  console.assert(this.numRows, this.rowOffsetTree.size(),\n               \"Wrong rowOffsetTree size \" + this.rowOffsetTree.size());\n  var count = Math.min(this.numRendered, this.numRows);\n  console.assert(this.end - this.begin, count,\n               \"Wrong range size \" + (this.end - this.begin));\n  console.assert(this.activeItemModels.length, count,\n               \"Wrong activeItemModels.size \" + this.activeItemModels.length);\n\n  var expectedHeight = this.blockBottom - this.blockTop();\n  if (count > 0) {\n    for (var p = 0; p < this.panes.length; p++) {\n      var topRow = this.panes[p].preparedRows[0].getBoundingClientRect();\n      var bottomRow = _.last(this.panes[p].preparedRows).getBoundingClientRect();\n      var blockHeight = bottomRow.bottom - topRow.top;\n      if (blockHeight !== expectedHeight) {\n        console.warn(\"Scrolly render pane #%d %dpx bigger from expected (%dpx per row). Ensure items have no margins\",\n          p, blockHeight - expectedHeight, (blockHeight - expectedHeight) / count);\n      }\n    }\n  }\n};\n\n/**\n * Helper that returns the Scrolly object currently associate with the given LazyArrayModel. It\n * feels a bit wrong that the model knows about its user, but a LazyArrayModel generally only\n * supports a single user (e.g. a single Scrolly), so it makes sense.\n */\nfunction getInstance(dataModel) {\n  if (!dataModel._scrollyObj) {\n    dataModel._scrollyObj = Scrolly.create(dataModel);\n    dataModel._scrollyObj.autoDisposeCallback(() => delete dataModel._scrollyObj);\n  }\n  return dataModel._scrollyObj;\n}\nexports.getInstance = getInstance;\n\n/**\n * Adds a new pane that scrolls as part of this Scrolly object. This call itself does no\n * rendering of the pane.\n */\nScrolly.prototype.addPane = function(containerElem, options, itemCreateFunc) {\n  var pane = new ScrollyPane(this, this.panes.length, containerElem, options, itemCreateFunc);\n  this.panes.push(pane);\n  this.scheduleUpdateSize();\n};\n\n/**\n * Tells Scrolly to call updateSize after things have had a chance to render.\n */\nScrolly.prototype.scheduleUpdateSize = function(overrideHeight) {\n  if (!this.isDisposed() && !this.delayedUpdateSize.isPending()) {\n    this.delayedUpdateSize.schedule(0, this.updateSize.bind(this, overrideHeight), this);\n  }\n};\n\n/**\n * Measures the size of the panes and adjusts Scrolly parameters for how many rows to render.\n * This should be called as soon as all Scrolly panes have been attached to the Document, and any\n * time their outer size changes.\n * Pass in an overrideHeight to use instead of the current height of the panes.\n */\nScrolly.prototype.updateSize = function(overrideHeight) {\n  this.resetHeights();\n  this.shownHeight = Math.max(0, Math.max.apply(null, this.panes.map(function(pane) {\n    return pane.container.clientHeight;\n  })));\n\n  // Update counts of rows that are shown.\n  var numVisible = Math.max(1, Math.ceil((overrideHeight ?? this.shownHeight) / this.minRowHeight));\n  this.numBuffered = 5;\n  this.numRendered = numVisible + 2 * this.numBuffered;\n\n  // Re-render everything.\n  this._updateRange();\n  this.render();\n  this.syncScrollPosition();\n};\n\n/**\n * Called whenever any pane got scrolled. It syncs up all panes to the same scrollTop.\n */\nScrolly.prototype.onScroll = function(pane) {\n  this.scrollTo(pane.container.scrollTop);\n};\n\n/**\n * Actively scroll all panes to the given scrollTop position, adjusting what is rendered as\n * necessary.\n */\nScrolly.prototype.scrollTo = function(top) {\n  if (top === this.scrollTop) {\n    return;\n  }\n\n  this.scrollTop = top;\n  this.syncScrollPosition();\n\n  if (this.blockTop() <= top && this.blockBottom >= top + this.shownHeight) {\n    // Nothing needs to be re-rendered.\n    //console.log(\"scrollTo(%s): all elements already shown\", top);\n    return;\n  }\n\n  // If we are scrolled to the bottom, restore our bottom position at the end. This happens\n  // in particular when reloading a page scrolled to the bottom. This is in no way general; it's\n  // just particularly easy to come across.\n  var atEnd = (top + this.shownHeight >= this.panes[0].container.scrollHeight);\n\n  this._updateRange();\n  // Do the magic.\n  this.render();\n\n  // If we were scrolled to the bottom, stay that way.\n  if (atEnd) {\n    this.scrollTop = this.panes[0].container.scrollHeight - this.shownHeight;\n  }\n\n  // Sometimes render() affects scrollTop of some panes; restore it to what we want by always\n  // calling syncScrollPosition() once more after render.\n  this.syncScrollPosition();\n};\n\n/**\n * Called when the underlying data array changes.\n */\nScrolly.prototype.onDataSplice = function(splice) {\n  // We may need to adjust which rows are shown, but render does all the work of figuring out what\n  // changed and needs re-rendering.\n  this.numRows = this.data.peekLength;\n\n  // Update rowHeights: reproduce the splice, inserting minRowHeights for the new rows.\n  this.rowHeights.splice(splice.start, splice.deleted.length);\n  gutil.arraySplice(this.rowHeights, splice.start,\n    gutil.arrayRepeat(splice.added, this.minRowHeight));\n\n  // And rebuild the rowOffsetTree.\n  this.rowOffsetTree.fillFromValues(this.rowHeights);\n  this.totalHeight(this.rowOffsetTree.getTotal() + this.options.paddingBottom);\n\n  this._updateRange();\n\n  this.scheduleUpdateSize();\n};\n\n/**\n * Set all panes to the common scroll position.\n */\nScrolly.prototype.syncScrollPosition = function() {\n  // Note that setting scrollTop triggers more scroll events, but those get ignored in onScroll\n  // because top === this.scrollTop.\n  var top = this.scrollTop;\n  for (var p = 0; p < this.panes.length; p++) {\n    // Reading .scrollTop may cause a synchronous reflow, so may be worse than setting it.\n    this.panes[p].container.scrollTop = top;\n  }\n};\n\n/**\n * Creates a new item model. There is one for each rendered row. This uses the lazyArray to create\n * the model, but adds a _rowHeightPx observable, used for controlling the row height.\n */\nScrolly.prototype.createItemModel = function() {\n  var item = this.data.makeItemModel();\n  item._rowHeightPx = ko.observable(\"\");\n  return item;\n};\n\n/**\n * Render rows in [begin, end) range, reusing any currently rendered rows as much as possible.\n */\nScrolly.prototype.render = function() {\n  //var startTime = Date.now();\n  // console.log(\"Scrolly render (top \" + this.scrollTop + \"): [\" + this.begin + \", \" +\n  //            this.end + \") = \" + (this.end - this.begin) + \" rows\");\n\n  // Invariant: all panes contain DOM elements parallel to this.activeItemModels.\n  // At the end, this.activeItemModels and DOM in panes represent the range [begin, end).\n  var i, p, item, index, delta,\n    count = this.end - this.begin,\n    array = this.data.peek(),\n    freeList = [];\n\n  assert(this.end <= array.length, \"Scrolly render() exceeds data length of \" + array.length);\n\n  // If scrolling up, we may adjust heights of rows, pushing down the row at scrollTop.\n  // If that happens, we will adjust scrollTop correspondingly.\n  var rowAtScrollTop = this.rowOffsetTree.getIndex(this.scrollTop);\n  var sumToScrollTop = this.rowOffsetTree.getSumTo(rowAtScrollTop);\n\n  // Place out-of-range itemModels into a free list.\n  for (i = 0; i < this.activeItemModels.length; i++) {\n    item = this.activeItemModels[i];\n    index = item._index();\n    if (index === null || index < this.begin || index >= this.end) {\n      freeList.push(item);\n    }\n  }\n\n  // Go through the models we need, and fill any missing ones.\n  for (i = 0, index = this.begin; i < count; i++, index++) {\n    if (!array[index]) {\n      // Use the freeList if possible, or create a new model otherwise.\n      item = freeList.shift() || this.createItemModel();\n      this.data.setItemModel(item, index);\n      // Unset the explicit height so that we can measure what it would naturally be.\n      item._rowHeightPx(\"\");\n    }\n  }\n\n  // Unset anything else in the free list.\n  for (i = 0; i < freeList.length; i++) {\n    this.data.unsetItemModel(freeList[i]);\n  }\n\n  // Prepare DOM in all panes. This ensures that there is a DOM element for each active item.\n  // If prepareNewRows creates new DOM, it will unset _rowHeightPx, to mark it for measuring.\n  for (p = 0; p < this.panes.length; p++) {\n    this.panes[p].prepareNewRows();\n  }\n\n  // Measure the rows, and use the max across panes to update the stored heights.\n  // Note: this involves a reflow.\n  for (i = 0, index = this.begin; i < count; i++, index++) {\n    item = array[index];\n    if (item._rowHeightPx.peek() === \"\") {\n      var height = this.minRowHeight;\n      for (p = 0; p < this.panes.length; p++) {\n        height = Math.max(height, this.panes[p].measurePreparedRow(i));\n      }\n      height = Math.round(height);\n\n      delta = height - this.rowHeights[index];\n      if (delta !== 0) {\n        this.rowHeights[index] = height;\n        this.rowOffsetTree.addValue(index, delta);\n      }\n    }\n  }\n\n  // Set back the explicit heights of the rows. This is separate from the loop above to make sure\n  // we don't trigger additional reflows while measuring rows.\n  for (i = 0, index = this.begin; i < count; i++, index++) {\n    item = array[index];\n    item._rowHeightPx(this.rowHeights[index] + 'px');\n  }\n\n  // Render the new rows in the new order in each pane.\n  for (p = 0; p < this.panes.length; p++) {\n    this.panes[p].arrangePreparedRows();\n  }\n\n  // Save the current activeItemModels.\n  this.activeItemModels = array.slice(this.begin, this.end);\n  // console.log(\"activeItemModels now \" + this.activeItemModels.length);\n  // console.log(\"rows in panes now are \" + this.panes.map(\n  //             function(p) { return p.blockDiv.childNodes.length; }).join(\", \"));\n\n  // Update heights and positions of the scrolling pane parts.\n  this.totalHeight(this.rowOffsetTree.getTotal() + this.options.paddingBottom);\n  this.blockTop(this.rowOffsetTree.getSumTo(this.begin));\n  this.blockBottom = this.rowOffsetTree.getSumTo(this.end);\n\n  // Adjust scrollTop if previously-shown top moved because of newly-rendered rows above.\n  delta = this.rowOffsetTree.getSumTo(rowAtScrollTop) - sumToScrollTop;\n  if (delta !== 0) {\n    //console.log(\"Adjusting scroll position by \" + delta);\n    this.scrollTop += delta;\n    this.syncScrollPosition();\n  }\n\n  // this.debug();\n\n  // Report after timeout, to include the browser rendering time.\n  //var midTime = Date.now();\n  //setTimeout(function() {\n  //  var endTime = Date.now();\n  //  console.log(\"Scrolly render took \" + (midTime - startTime) + \" + \" +\n  //              (endTime - midTime) + \" = \" + (endTime - startTime) + \" ms\");\n  //}, 0);\n};\n\n\n/**\n * Re-measure the given array of rows. Re-measures all rows if no array is given.\n */\nScrolly.prototype.resetHeights = function(optRowIndexList) {\n  var array = this.data.peek();\n  if (optRowIndexList) {\n    for (var i = 0; i < optRowIndexList.length; i++) {\n      var index = optRowIndexList[i];\n      var item = array[index];\n      if (item) {\n        item._rowHeightPx(\"\");\n      }\n    }\n  } else {\n    this.activeItemModels.forEach(function(item) {\n      item._rowHeightPx(\"\");\n    });\n  }\n  this.render();\n};\n\n/**\n * Re-measure the given array of items.\n * @param {Array[ItemModel]} items: The affected models (as returned by this.createItemModel).\n */\nScrolly.prototype.resetItemHeights = function(items) {\n  if (!this.isDisposed()) {\n    items.forEach(item => item._rowHeightPx(\"\"));\n    this.render();\n  }\n};\n\n/**\n * Scrolls to the position in pixels returned by calcPosition() function. The argument is a\n * function because after the initial re-render, some rows may get re-measured and require\n * an adjustment to the pixel position. So calcPosition() actually gets called twice.\n */\nScrolly.prototype.scrollToPosition = function(calcPosition) {\n  var scrollTop = calcPosition();\n  this.scrollTo(scrollTop);\n\n  // Repeat in case rows got re-measured during rendering and ended up being below the fold.\n  // We only may need to scroll a bit further, we should never have to re-render.\n  scrollTop = calcPosition();\n  if (scrollTop !== this.scrollTop) {\n    this.scrollTop = scrollTop;\n    this.syncScrollPosition();\n  }\n};\n\n/**\n * Scrolls the given row into view.\n */\nScrolly.prototype.scrollRowIntoView = function(rowIndex) {\n  this.scrollToPosition(() => {\n    var top = this.rowOffsetTree.getSumTo(rowIndex);\n    var bottom = top + this.rowHeights[rowIndex];\n    // 43 = 23px to adjust for header, + 20px space\n    return gutil.clamp(this.scrollTop, bottom - this.shownHeight + 43, top - 10);\n  });\n};\n\n/**\n * Takes a scroll position object, as stored in the section model, and scrolls to the saved\n * position.\n * @param {Integer} scrollPos.rowIndex: The index of the row to be scrolled to.\n * @param {Integer} scrollPos.offset: The pixel distance of the scroll from the top of the row.\n */\nScrolly.prototype.scrollToSavedPos = function(scrollPos) {\n  this.scrollToPosition(() => this.rowOffsetTree.getSumTo(scrollPos.rowIndex) + scrollPos.offset);\n};\n\n\n/**\n * Returns an object with the index of the first visible row in the view pane, and the\n * scroll offset from the top of that row.\n * Useful for recording the current state of the scrolly for later re-initialization.\n *\n * NOTE: There is a compelling case to scroll to the cursor after scrolling to the previous\n * scroll position in either the case where rows are added/rearranged/removed, or simply in\n * all cases. While this would likely prevent confusion in case changes push the cursor out\n * of view, the case that the user scrolled away from the cursor intentionally should also be\n * considered.\n */\nScrolly.prototype.getScrollPos = function() {\n  var rowIndex = this.rowOffsetTree.getIndex(this.scrollTop);\n  return {\n    rowIndex: rowIndex,\n    offset: this.scrollTop - this.rowOffsetTree.getSumTo(rowIndex)\n  };\n};\n\n/**\n * Destroys a scrolly pane.\n */\nScrolly.prototype.destroyPane = function(pane) {\n  // When the last pane is removed, destroy the scrolly.\n  gutil.arrayRemove(this.panes, pane);\n  if (this.panes.length === 0) {\n    this.dispose();\n  }\n};\n\n/**\n * Updates indexes of rows to render.\n */\nScrolly.prototype._updateRange = function() {\n  // If we are scrolled from the top, start at the first visible row with some buffer.\n  const begin = this.rowOffsetTree.getIndex(this.scrollTop) - this.numBuffered;\n  this.begin = gutil.clamp(begin, 0, this.numRows - this.numRendered);\n  this.end = gutil.clamp(this.begin + this.numRendered, 0, this.numRows);\n}\n\n//----------------------------------------------------------------------\n\n/**\n * Creates a virtual scrolling interface attached to a LazyArray. Multiple scrolly() calls used\n * with the same `data` array will create parallel scrolling panes (e.g. row numbers and data\n * scrolling together).\n *\n * The DOM for items is created using `itemCreateFunc`. As the user scrolls\n * around, the item models are assigned to different items, and the DOM is moved around the page,\n * to minimize rendering. This is intended to be used with koModel.mappedLazyArray.\n *\n * @param {LazyModelArray} data A LazyModelArray instance.\n * @param {Object} options - Supported options include:\n *    paddingBottom {number} - Number of pixels to add to bottom of scrolly\n *    paddingRight {number} - Number of pixels to add to right of scrolly\n *    fitToWidth {bool} - Whether the scrolly holds a list of layouts\n * @param {Function} itemCreateFunc A function called as `itemCreateFunc(item)` for a number of\n *    item models (which can get assigned to different items in `data`). Must return a single\n *    Node (not a DocumentFragment or null).\n */\nfunction scrolly(data, options, itemCreateFunc) {\n  assert.equal(typeof itemCreateFunc, 'function');\n  options = options || {};\n  return function(elem) {\n    var scrollyObj = getInstance(data);\n    scrollyObj.addPane(elem, options, itemCreateFunc);\n    ko.utils.domData.set(elem, \"scrolly\", scrollyObj);\n  };\n}\nexports.scrolly = scrolly;\n","var _ = require('underscore');\nvar ko = require('knockout');\nvar dispose = require('../lib/dispose');\nvar BaseRowModel = require('./BaseRowModel');\nvar modelUtil = require('./modelUtil');\nvar BackboneEvents = require('backbone').Events;\n\n/**\n * MetaRowModel is a RowModel for built-in (Meta) tables. It takes a list of field names, and an\n * additional constructor called with (docModel, tableModel) arguments (and `this` context), which\n * can add arbitrary additional properties to this RowModel.\n */\nfunction MetaRowModel(tableModel, fieldNames, rowConstructor, rowId) {\n  var colNames = ['id'].concat(fieldNames);\n  BaseRowModel.call(this, tableModel, colNames);\n  this._rowId = rowId;\n\n  // MetaTableModel#_createRowModelItem creates lightweight objects that all reference the same MetaRowModel but are slightly different.\n  // We don't derive from BackboneEvents directly so that the lightweight objects created share the same Events object even though they are distinct.\n  this.events = this.autoDisposeWith('stopListening', BackboneEvents);\n\n  // Changes to true when this row gets deleted. This also likely means that this model is about\n  // to get disposed, except for a floating row model.\n  this._isDeleted = ko.observable(false);\n\n  // Populate all fields. Note that MetaRowModels are never get reassigned after construction.\n  this._fields.forEach(function(colName) {\n    this._assignColumn(colName);\n  }, this);\n\n  // Customize the MetaRowModel with a custom additional constructor.\n  if (rowConstructor) {\n    rowConstructor.call(this, tableModel.docModel, tableModel);\n  }\n}\ndispose.makeDisposable(MetaRowModel);\n_.extend(MetaRowModel.prototype, BaseRowModel.prototype);\n\nMetaRowModel.prototype._assignColumn = function(colName) {\n  if (this.hasOwnProperty(colName)) {\n    this[colName].assign(this._table.tableData.getValue(this._rowId, colName));\n  }\n};\n\n//----------------------------------------------------------------------\n\n/**\n * MetaRowModel.Floater is an object designed to look like a MetaRowModel. It contains observables\n * that mirror some particular MetaRowModel. The MetaRowModel currently being mirrored is the one\n * corresponding to the value of `rowIdObs`.\n *\n * Mirrored fields are computed observables that support reading, writing, and saving.\n */\nMetaRowModel.Floater = function(tableModel, rowIdObs) {\n  this._table = tableModel;\n  this.rowIdObs = rowIdObs;\n  // Note that ._index isn't supported because it doesn't make sense for a floating row model.\n\n  this._underlyingRowModel = this.autoDispose(ko.computed(function() {\n    return tableModel.getRowModel(rowIdObs());\n  }));\n\n  _.each(this._underlyingRowModel(), function(propValue, propName) {\n    if (ko.isObservable(propValue)) {\n      // Forward read/write calls to the observable on the currently-active underlying model.\n      this[propName] = this.autoDispose(ko.pureComputed({\n        owner: this,\n        read: function() { return this._underlyingRowModel()[propName](); },\n        write: function(val) { this._underlyingRowModel()[propName](val); }\n      }));\n\n      // If the underlying observable supports saving, forward save calls too.\n      if (propValue.saveOnly) {\n          modelUtil.addSaveInterface(this[propName], (value =>\n            this._underlyingRowModel()[propName].saveOnly(value)));\n      }\n    }\n  }, this);\n};\ndispose.makeDisposable(MetaRowModel.Floater);\n\n\nmodule.exports = MetaRowModel;\n","/**\n * MetaTableModel maintains the model for a built-in table, with MetaRowModels. It provides\n * access to individual row models, as well as to collections of rows in that table.\n */\n\n\nvar _ = require('underscore');\nvar ko = require('knockout');\nvar dispose = require('../lib/dispose');\nvar MetaRowModel = require('./MetaRowModel');\nvar TableModel = require('./TableModel');\nvar rowset = require('./rowset');\nvar assert = require('assert');\nvar gutil = require('app/common/gutil');\n\n/**\n * MetaTableModel maintains observables for one table's rows. It accepts a list of fields to\n * include into each RowModel, and an additional constructor to call when constructing RowModels.\n * It exposes all rows, as well as groups of rows, as observable collections.\n */\nfunction MetaTableModel(docModel, tableData, fields, rowConstructor) {\n  TableModel.call(this, docModel, tableData);\n\n  this._fields = fields;\n  this._rowConstructor = rowConstructor;\n\n  // Start out with empty list of row models. It's populated in loadData().\n  this.rowModels = [];\n\n  // It is possible for a new rowModel to be deleted and replaced with a new one for the same\n  // rowId. To allow a computed() to depend on the row version, we keep a permanent observable\n  // \"version\" associated with each rowId, which is incremented any time a rowId is replaced.\n  this._rowModelVersions = [];\n\n  // Whenever rowNotify is triggered, also send the action to all row RowModels that we maintain.\n  this.listenTo(this, 'rowNotify', function(rows, action) {\n    assert(rows !== rowset.ALL, \"Unexpected schema action on a metadata table\");\n    for (let r of rows) {\n      if (this.rowModels[r]) {\n        this.rowModels[r].dispatchAction(action);\n      }\n    }\n  });\n}\ndispose.makeDisposable(MetaTableModel);\n_.extend(MetaTableModel.prototype, TableModel.prototype);\n\n/**\n * This is called from DocModel as soon as all the MetaTableModel objects have been created.\n */\nMetaTableModel.prototype.loadData = function() {\n  // Whereas user-defined tables may not be initially loaded, MetaTableModels should only exist\n  // for built-in tables, which *should* already be loaded (and should never be reloaded).\n  assert(this.tableData.isLoaded, \"MetaTableModel: tableData not yet loaded\");\n\n  // Create and populate the array mapping rowIds to RowModels.\n  this.getAllRows().forEach(function(rowId) {\n    this._createRowModel(rowId);\n  }, this);\n};\n\n/**\n * Returns an existing or a blank row. Used for `recordRef` descriptor in DocModel.\n *\n * A computed() that uses getRowModel() may not realize if a rowId gets deleted and later re-used\n * for another row. If optDependOnVersion is set, then a dependency on the row version gets\n * created automatically. It is only relevant when the computed is pure and may not get updated\n * when the row is deleted; in that case lacking such dependency may cause subtle rare bugs.\n */\nMetaTableModel.prototype.getRowModel = function(rowId, optDependOnVersion) {\n  const rowIdModel = this.rowModels[rowId];\n  const r = rowIdModel || this.getEmptyRowModel();\n  if (optDependOnVersion) {\n    // Versions are never deleted, so even if the rowModel is deleted, we still have its version\n    // in this list.\n    const version = this._rowModelVersions[rowId];\n    if (version) {\n      // Subscribe to updates for rowModel at rowId.\n      version();\n    } else {\n      // It shouldn't happen, but maybe it would be better to add an empty version observable at rowId.\n      // If it happens, it means we tried to get non existing row (row that wasn't created previously).\n    }\n  }\n  return r;\n};\n\n/**\n * Returns the RowModel to use for invalid rows.\n */\nMetaTableModel.prototype.getEmptyRowModel = function() {\n  return this._createRowModel(0);\n};\n\n/**\n * Private helper to create a MetaRowModel for the given rowId. For public use, there are\n * getRowModel(rowId) and createFloatingRowModel(rowIdObs).\n */\nMetaTableModel.prototype._createRowModel = function(rowId) {\n  if (!this.rowModels[rowId]) {\n    // When creating a new row, we create new MetaRowModels which use observables. If\n    // _createRowModel is called from within the evaluation of a computed(), we do NOT want that\n    // computed to subscribe to observables used by individual MetaRowModels.\n    ko.ignoreDependencies(() => {\n      this.rowModels[rowId] = MetaRowModel.create(this, this._fields, this._rowConstructor, rowId);\n\n      // Whenever a rowModel is created, increment its version number.\n      let inc = this._rowModelVersions[rowId] || (this._rowModelVersions[rowId] = ko.observable(0));\n      inc(inc.peek() + 1);\n    });\n  }\n  return this.rowModels[rowId];\n};\n\n\n/**\n * Returns a MetaRowModel-like object tied to an observable rowId. When the observable changes,\n * the fields of the returned model start reflecting the values for the new rowId. See also\n * MetaRowModel.Floater docs.\n *\n * There should be very few such floating rows. If you ever want a set, you should be using\n * createAllRowsModel() or createRowGroupModel().\n *\n * @param {ko.observable} rowIdObs: observable that evaluates to a rowId.\n */\nMetaTableModel.prototype.createFloatingRowModel = function(rowIdObs) {\n  return MetaRowModel.Floater.create(this, rowIdObs);\n};\n\n/**\n * Override TableModel's _process_RemoveRecord to also remove our reference to this row model.\n */\nMetaTableModel.prototype._process_RemoveRecord = function(action, tableId, rowId) {\n  TableModel.prototype._process_RemoveRecord.apply(this, arguments);\n  this._deleteRowModel(rowId);\n};\n\n/**\n * Clean up the RowModel for a row when it's deleted by an action from the server.\n */\nMetaTableModel.prototype._deleteRowModel = function(rowId) {\n  this.rowModels[rowId]._isDeleted(true);\n  this.rowModels[rowId].dispose();\n  delete this.rowModels[rowId];\n};\n\n/**\n * We have to remember to override Bulk versions too.\n */\nMetaTableModel.prototype._process_BulkRemoveRecord = function(action, tableId, rowIds) {\n  TableModel.prototype._process_BulkRemoveRecord.apply(this, arguments);\n  rowIds.forEach(rowId => this._deleteRowModel(rowId));\n};\n\n/**\n * Override TableModel's _process_AddRecord to also add a row model for the given rowId.\n */\nMetaTableModel.prototype._process_AddRecord = function(action, tableId, rowId, columnValues) {\n  this._createRowModel(rowId);\n  TableModel.prototype._process_AddRecord.apply(this, arguments);\n};\n\n/**\n * We have to remember to override Bulk versions too.\n */\nMetaTableModel.prototype._process_BulkAddRecord = function(action, tableId, rowIds, columns) {\n  rowIds.forEach(rowId => this._createRowModel(rowId));\n  TableModel.prototype._process_BulkAddRecord.apply(this, arguments);\n};\n\n/**\n * Override TableModel's applySchemaAction to assert that there are NO metadata schema changes.\n */\nMetaTableModel.prototype.applySchemaAction = function(action) {\n  throw new Error(\"No schema actions should apply to metadata\");\n};\n\n/**\n * Returns a new observable array (koArray) of MetaRowModels for all the rows in this table,\n * sorted by the given column. It is the caller's responsibility to dispose this array.\n * @param {string} sortColId: Column ID by which to sort.\n */\nMetaTableModel.prototype.createAllRowsModel = function(sortColId) {\n  return this._createRowSetModel(this, sortColId);\n};\n\n/**\n * Returns a new observable array (koArray) of MetaRowModels matching the given `groupValue`.\n * It is the caller's responsibility to dispose this array.\n * @param {String|Number} groupValue - The group value to match.\n * @param {String} options.groupBy  - RowModel field by which to group.\n * @param {String} options.sortBy   - RowModel field by which to sort.\n */\nMetaTableModel.prototype.createRowGroupModel = function(groupValue, options) {\n  var grouping = this.getRowGrouping(options.groupBy);\n  return this._createRowSetModel(grouping.getGroup(groupValue), options.sortBy);\n};\n\n/**\n * Helper that returns a new observable koArray of MetaRowModels subscribed to the given\n * rowSource, and sorted by the given column. It is the caller's responsibility to dispose it.\n */\nMetaTableModel.prototype._createRowSetModel = function(rowSource, sortColId) {\n  var getter = this.tableData.getRowPropFunc(sortColId);\n  var sortedRowSet = rowset.SortedRowSet.create(null, function(r1, r2) {\n    return gutil.nativeCompare(getter(r1), getter(r2));\n  });\n  sortedRowSet.subscribeTo(rowSource);\n\n  // When the returned value is disposed, dispose the underlying SortedRowSet too.\n  var ret = this._createRowModelArray(sortedRowSet.getKoArray());\n  ret.autoDispose(sortedRowSet);\n  return ret;\n};\n\n/**\n * Helper which takes an observable array (koArray) of rowIds, and returns a new koArray of\n * objects having those RowModels as prototypes, and with an additional `_index` observable to\n * contain their index in the array. The index is kept correct as the array changes.\n *\n * TODO: this needs a unittest.\n */\nMetaTableModel.prototype._createRowModelArray = function(rowIdArray) {\n  var ret = rowIdArray.map(this._createRowModelItem, this);\n  ret.subscribe(function(splice) {\n    var arr = splice.array, i;\n    for (i = 0; i < splice.deleted.length; i++) {\n      splice.deleted[i]._index(null);\n    }\n    var delta = splice.added - splice.deleted.length;\n    if (delta !== 0) {\n      for (i = splice.start + splice.added; i < arr.length; i++) {\n        arr[i]._index(i);\n      }\n    }\n  }, null, 'spliceChange');\n  return ret;\n};\n\n/**\n * Creates and returns a RowModel with its own `_index` observable.\n */\nMetaTableModel.prototype._createRowModelItem = function(rowId, index) {\n  var rowModel = this._createRowModel(rowId);\n  assert.ok(rowModel, \"MetaTableModel._createRowModelItem called for invalid rowId \" + rowId);\n  var ret = Object.create(rowModel);    // New object, with rowModel as its prototype.\n  ret._index = ko.observable(index);    // New _index observable overrides the existing one.\n  return ret;\n};\n\nmodule.exports = MetaTableModel;\n","/**\n * Implements a binary indexed tree, aka Fenwick tree. See\n * http://en.wikipedia.org/wiki/Fenwick_tree\n */\nfunction BinaryIndexedTree(optSize) {\n  this.tree = [];\n  if (optSize > 0) {\n    this.tree.length = optSize;\n    for (var i = 0; i < optSize; i++) {\n      this.tree[i] = 0;\n    }\n    // The last valid index rounded down to the nearest power of 2.\n    this.mask = mostSignificantOne(this.tree.length - 1);\n  }\n}\n\n/**\n * Returns a number that contains only the least significant one in `num`.\n * @param {Number} num - Positive integer.\n * @returns {Number} The least significant one in `num`, e.g. for 10110, returns 00010.\n */\nfunction leastSignificantOne(num) {\n  return num & (-num);\n}\nBinaryIndexedTree.leastSignificantOne = leastSignificantOne;\n\n\n/**\n * Strips the least significant one from `num`.\n * @param {Number} num - Positive integer.\n * @returns {Number} `num` with the least significant one removed, e.g. for 10110, returns 10100.\n */\nfunction stripLeastSignificantOne(num) {\n  return num & (num - 1);\n}\nBinaryIndexedTree.stripLeastSignificantOne = stripLeastSignificantOne;\n\n\nfunction mostSignificantOne(num) {\n  if (num === 0) {\n    return 0;\n  }\n  var msb = 1;\n  while ((num >>>= 1)) {\n    msb <<= 1;\n  }\n  return msb;\n}\nBinaryIndexedTree.mostSignificantOne = mostSignificantOne;\n\n/**\n * Converts in-place an array of cumulative values to the original values.\n * @param {Array<number>} values - Array of cumulative values, or partial sums.\n * @returns {Array<number>} - same `values` array, with elements replaced by deltas.\n *      E.g. [1,3,6,10] is converted to [1,2,3,4].\n */\nfunction cumulToValues(values) {\n  for (var i = values.length - 1; i >= 1; i--) {\n    values[i] -= values[i - 1];\n  }\n  return values;\n}\nBinaryIndexedTree.cumulToValues = cumulToValues;\n\n\n/**\n * Converts in-place an array of values to cumulative values, or partial sums.\n * @param {Array<number>} values - Array of numerical values.\n * @returns {Array<number>} - same `values` array, with elements replaced by partial sums.\n *      E.g. [1,2,3,4] is converted to [1,3,6,10].\n */\nfunction valuesToCumul(values) {\n  for (var i = 1; i < values.length; i++) {\n    values[i] += values[i - 1];\n  }\n  return values;\n}\nBinaryIndexedTree.valuesToCumul = valuesToCumul;\n\n\n/**\n * @returns {Number} length of the tree.\n */\nBinaryIndexedTree.prototype.size = function() {\n  return this.tree.length;\n};\n\n\n/**\n * Converts the BinaryIndexedTree to a cumulative array.\n * Takes time linear in the size of the array.\n * @returns {Array<number>} - array with each element a partial sum.\n */\nBinaryIndexedTree.prototype.toCumulativeArray = function() {\n  var cumulValues = [this.tree[0]];\n  var len = cumulValues.length = this.tree.length;\n  for (var i = 1; i < len; i++) {\n    cumulValues[i] = this.tree[i] + cumulValues[stripLeastSignificantOne(i)];\n  }\n  return cumulValues;\n};\n\n\n/**\n * Converts the BinaryIndexedTree to an array of individual values.\n * Takes time linear in the size of the array.\n * @returns {Array<number>} - array with each element containing the value that was inserted.\n */\nBinaryIndexedTree.prototype.toValueArray = function() {\n  return cumulToValues(this.toCumulativeArray());\n};\n\n\n/**\n * Creates a tree from an array of cumulative values.\n * Takes time linear in the size of the array.\n * @param {Array<number>} - array with each element a partial sum.\n */\nBinaryIndexedTree.prototype.fillFromCumulative = function(cumulValues) {\n  var len = this.tree.length = cumulValues.length;\n  if (len > 0) {\n    this.tree[0] = cumulValues[0];\n    for (var i = 1; i < len; i++) {\n      this.tree[i] = cumulValues[i] - cumulValues[stripLeastSignificantOne(i)];\n    }\n    // The last valid index rounded down to the nearest power of 2.\n    this.mask = mostSignificantOne(this.tree.length - 1);\n  } else {\n    this.mask = 0;\n  }\n};\n\n\n/**\n * Creates a tree from an array of individual values.\n * Takes time linear in the size of the array.\n * @param {Array<number>} - array with each element containing the value to insert.\n */\nBinaryIndexedTree.prototype.fillFromValues = function(values) {\n  this.fillFromCumulative(valuesToCumul(values.slice()));\n};\n\n\n/**\n * Reads the cumulative value at the given index. Takes time O(log(index)).\n * @param {Number} index - index in the array.\n * @returns {Number} - cumulative values up to and including `index`.\n */\nBinaryIndexedTree.prototype.getCumulativeValue = function(index) {\n  var sum = this.tree[0];\n  while (index > 0) {\n    sum += this.tree[index];\n    index = stripLeastSignificantOne(index);\n  }\n  return sum;\n};\n\n/**\n * Reads the cumulative value from start(inclusive) to end(exclusive). Takes time O(log(end)).\n * @param {Number} start - start index\n * @param {Number} end - end index\n * @returns {Number} - cumulative values between start(inclusive) and end(exclusive)\n */\nBinaryIndexedTree.prototype.getCumulativeValueRange = function(start, end) {\n  return this.getSumTo(end) - this.getSumTo(start);\n};\n\n/**\n * Returns the sum of values up to the given index. Takes time O(log(index)).\n * @param {Number} index - index in the array.\n * @returns {Number} - cumulative values up to but not including `index`.\n */\nBinaryIndexedTree.prototype.getSumTo = function(index) {\n  return (index > 0 ? this.getCumulativeValue(index - 1) : 0);\n};\n\n\n/**\n * Returns the total of all values in the tree. Takes time O(log(N)).\n * @returns {Number} - sum of all values.\n */\nBinaryIndexedTree.prototype.getTotal = function() {\n  return this.getCumulativeValue(this.tree.length - 1);\n};\n\n\n/**\n * Reads a single value at the given index. Takes time O(log(index)).\n * @param {Number} index - index in the array.\n * @returns {Number} - the value that was inserted at `index`.\n */\nBinaryIndexedTree.prototype.getValue = function(index) {\n  var value = this.tree[index];\n  if (index > 0) {\n    var parent = stripLeastSignificantOne(index);\n    index--;\n    while (index !== parent) {\n      value -= this.tree[index];\n      index = stripLeastSignificantOne(index);\n    }\n  }\n  return value;\n};\n\n\n/**\n * Updates a value at an index. Takes time O(log(table size)).\n * @param {Number} index - index in the array.\n * @param {Number} delta - value to add to the previous value at `index`.\n */\nBinaryIndexedTree.prototype.addValue = function(index, delta) {\n  if (index === 0) {\n    this.tree[0] += delta;\n  } else {\n    while (index < this.tree.length) {\n      this.tree[index] += delta;\n      index += leastSignificantOne(index);\n    }\n  }\n};\n\n\n/**\n * Sets a value at an index. Takes time O(log(table size)).\n * @param {Number} index - index in the array.\n * @param {Number} value - new value to set at `index`.\n */\nBinaryIndexedTree.prototype.setValue = function(index, value) {\n  this.addValue(index, value - this.getValue(index));\n};\n\n\n/**\n * Given a cumulative value, finds the first element whose inclusion reaches the value.\n * E.g. for values [1,2,3,4] (cumulative [1,3,6,10]), getIndex(3) = 1, getIndex(3.1) = 2.\n * @param {Number} cumulValue - cumulative value to exceed.\n * @returns {Number} index - the first index such that getCumulativeValue(index) >= cumulValue.\n *    If cumulValue is too large, return one more than the highest valid index.\n */\nBinaryIndexedTree.prototype.getIndex = function(cumulValue) {\n  if (this.tree.length === 0 || this.tree[0] >= cumulValue) {\n    return 0;\n  }\n  var index = 0;\n  var mask = this.mask;\n  var sum = this.tree[0];\n  while (mask !== 0) {\n    var testIndex = index + mask;\n    if (testIndex < this.tree.length && sum + this.tree[testIndex] < cumulValue) {\n      index = testIndex;\n      sum += this.tree[index];\n    }\n    mask >>>= 1;\n  }\n  return index + 1;\n};\n\nmodule.exports = BinaryIndexedTree;\n"],"names":[],"sourceRoot":""}