{"version":3,"file":"app_client_ui_AccountPage_ts.bundle.js","mappings":"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","sources":["./app/client/ui/AccountPage.ts?","./app/client/ui/AccountPageCss.ts?","./app/client/ui/ApiKey.ts?","./app/client/ui/ThemeConfig.ts?","./app/client/ui/transientInput.ts?","./stubs/app/client/ui/ChangePasswordDialog.ts?","./stubs/app/client/ui/MFAConfig.ts?"],"sourcesContent":["import {AppModel, reportError} from 'app/client/models/AppModel';\nimport {urlState} from 'app/client/models/gristUrlState';\nimport * as css from 'app/client/ui/AccountPageCss';\nimport {ApiKey} from 'app/client/ui/ApiKey';\nimport {AppHeader} from 'app/client/ui/AppHeader';\nimport {buildChangePasswordDialog} from 'app/client/ui/ChangePasswordDialog';\nimport {leftPanelBasic} from 'app/client/ui/LeftPanelCommon';\nimport {MFAConfig} from 'app/client/ui/MFAConfig';\nimport {pagePanels} from 'app/client/ui/PagePanels';\nimport {ThemeConfig} from 'app/client/ui/ThemeConfig';\nimport {createTopBarHome} from 'app/client/ui/TopBar';\nimport {transientInput} from 'app/client/ui/transientInput';\nimport {cssBreadcrumbs, separator} from 'app/client/ui2018/breadcrumbs';\nimport {labeledSquareCheckbox} from 'app/client/ui2018/checkbox';\nimport {cssLink} from 'app/client/ui2018/links';\nimport {select} from 'app/client/ui2018/menus';\nimport {getGristConfig} from 'app/common/urlUtils';\nimport {FullUser} from 'app/common/UserAPI';\nimport {detectCurrentLang, makeT} from 'app/client/lib/localization';\nimport {translateLocale} from 'app/client/ui/LanguageMenu';\nimport {Computed, Disposable, dom, domComputed, makeTestId, Observable, styled} from 'grainjs';\n\nconst testId = makeTestId('test-account-page-');\nconst t = makeT('AccountPage');\n\n/**\n * Creates the account page where a user can manage their profile settings.\n */\nexport class AccountPage extends Disposable {\n  private _apiKey = Observable.create<string>(this, '');\n  private _userObs = Observable.create<FullUser|null>(this, null);\n  private _isEditingName = Observable.create(this, false);\n  private _nameEdit = Observable.create<string>(this, '');\n  private _isNameValid = Computed.create(this, this._nameEdit, (_use, val) => checkName(val));\n  private _allowGoogleLogin = Computed.create(this, (use) => use(this._userObs)?.allowGoogleLogin ?? false)\n    .onWrite((val) => this._updateAllowGooglelogin(val));\n\n  constructor(private _appModel: AppModel) {\n    super();\n    this._fetchAll().catch(reportError);\n  }\n\n  public buildDom() {\n    const panelOpen = Observable.create(this, false);\n    return pagePanels({\n      leftPanel: {\n        panelWidth: Observable.create(this, 240),\n        panelOpen,\n        hideOpener: true,\n        header: dom.create(AppHeader, this._appModel),\n        content: leftPanelBasic(this._appModel, panelOpen),\n      },\n      headerMain: this._buildHeaderMain(),\n      contentMain: this._buildContentMain(),\n      testId,\n    });\n  }\n\n  private _buildContentMain() {\n    const {enableCustomCss} = getGristConfig();\n    const supportedLngs = getGristConfig().supportedLngs ?? ['en'];\n    const languageOptions = supportedLngs\n      .map((lng) => ({value: lng, label: translateLocale(lng)!}))\n      .sort((a, b) => a.value.localeCompare(b.value));\n\n    const userLocale = Computed.create(this, use => {\n      const selected = detectCurrentLang();\n      if (!supportedLngs.includes(selected)) { return 'en'; }\n      return selected;\n    });\n    userLocale.onWrite(async value => {\n      await this._appModel.api.updateUserLocale(value || null);\n      // Reload the page to apply the new locale.\n      window.location.reload();\n    });\n\n    return domComputed(this._userObs, (user) => user && (\n      css.container(css.accountPage(\n        css.header(t(\"Account settings\")),\n        css.dataRow(\n          css.inlineSubHeader(t(\"Email\")),\n          css.email(user.email),\n        ),\n        css.dataRow(\n          css.inlineSubHeader(t(\"Name\")),\n          domComputed(this._isEditingName, (isEditing) => (\n            isEditing ? [\n              transientInput(\n                {\n                  initialValue: user.name,\n                  save: (val) => this._isNameValid.get() && this._updateUserName(val),\n                  close: () => { this._isEditingName.set(false); this._nameEdit.set(''); },\n                },\n                {size: '5'}, // Lower size so that input can shrink below ~152px.\n                dom.on('input', (_ev, el) => this._nameEdit.set(el.value)),\n                css.flexGrow.cls(''),\n              ),\n              css.textBtn(\n                css.icon('Settings'), t(\"Save\"),\n                // No need to save on 'click'. The transient input already does it on close.\n              ),\n            ] : [\n              css.name(user.name),\n              css.textBtn(\n                css.icon('Settings'), t(\"Edit\"),\n                dom.on('click', () => this._isEditingName.set(true)),\n              ),\n            ]\n          )),\n          testId('username'),\n        ),\n        // show warning for invalid name but not for the empty string\n        dom.maybe(use => use(this._nameEdit) && !use(this._isNameValid), this._buildNameWarningsDom.bind(this)),\n        css.header(t(\"Password & Security\")),\n        css.dataRow(\n          css.inlineSubHeader(t(\"Login Method\")),\n          css.loginMethod(user.loginMethod),\n          user.loginMethod === 'Email + Password' ? css.textBtn(t(\"Change Password\"),\n            dom.on('click', () => this._showChangePasswordDialog()),\n          ) : null,\n          testId('login-method'),\n        ),\n        user.loginMethod !== 'Email + Password' ? null : dom.frag(\n          css.dataRow(\n            labeledSquareCheckbox(\n              this._allowGoogleLogin,\n              t(\"Allow signing in to this account with Google\"),\n              testId('allow-google-login-checkbox'),\n            ),\n            testId('allow-google-login'),\n          ),\n          css.subHeader(t(\"Two-factor authentication\")),\n          css.description(\n            t(\"Two-factor authentication is an extra layer of security for your Grist account \\\ndesigned to ensure that you're the only person who can access your account, even if someone knows your password.\")\n          ),\n          dom.create(MFAConfig, user),\n        ),\n        css.header(t(\"Theme\")),\n        // Custom CSS is incompatible with custom themes.\n        enableCustomCss ? null : dom.create(ThemeConfig, this._appModel),\n        css.subHeader(t(\"Language\")),\n        css.dataRow({ style: 'width: 300px'},\n          select(userLocale, languageOptions, {\n            renderOptionArgs: () => {\n              return dom.cls(cssFirstUpper.className);\n            }\n          }),\n          testId('language'),\n        ),\n        css.header(t(\"API\")),\n        css.dataRow(css.inlineSubHeader(t(\"API Key\")), css.content(\n          dom.create(ApiKey, {\n            apiKey: this._apiKey,\n            onCreate: () => this._createApiKey(),\n            onDelete: () => this._deleteApiKey(),\n            anonymous: false,\n            inputArgs: [{size: '5'}], // Lower size so that input can shrink below ~152px.\n          })\n        )),\n      ),\n      testId('body'),\n    )));\n  }\n\n  private _buildHeaderMain() {\n    return dom.frag(\n      cssBreadcrumbs({style: 'margin-left: 16px;'},\n        cssLink(\n          urlState().setLinkUrl({}),\n          'Home',\n          testId('home'),\n        ),\n        separator(' / '),\n        dom('span', 'Account'),\n      ),\n      createTopBarHome(this._appModel),\n    );\n  }\n\n  private async _fetchApiKey() {\n    this._apiKey.set(await this._appModel.api.fetchApiKey());\n  }\n\n  private async _createApiKey() {\n    this._apiKey.set(await this._appModel.api.createApiKey());\n  }\n\n  private async _deleteApiKey() {\n    await this._appModel.api.deleteApiKey();\n    this._apiKey.set('');\n  }\n\n  private async _fetchUserProfile() {\n    this._userObs.set(await this._appModel.api.getUserProfile());\n  }\n\n  private async _fetchAll() {\n    await Promise.all([\n      this._fetchApiKey(),\n      this._fetchUserProfile(),\n    ]);\n  }\n\n  private async _updateUserName(val: string) {\n    const user = this._userObs.get();\n    if (user && val && val === user.name) { return; }\n\n    await this._appModel.api.updateUserName(val);\n    await this._fetchAll();\n  }\n\n  private async _updateAllowGooglelogin(allowGoogleLogin: boolean) {\n    await this._appModel.api.updateAllowGoogleLogin(allowGoogleLogin);\n    await this._fetchUserProfile();\n  }\n\n  private _showChangePasswordDialog() {\n    return buildChangePasswordDialog();\n  }\n\n  /**\n  * Builds dom to show marning messages to the user.\n  */\n  private _buildNameWarningsDom() {\n    return cssWarnings(\n      t(\"Names only allow letters, numbers and certain special characters\"),\n      testId('username-warning'),\n    );\n  }\n}\n\n/**\n * We allow alphanumeric characters and certain common whitelisted characters (except at the start),\n * plus everything non-ASCII (for non-English alphabets, which we want to allow but it's hard to be\n * more precise about what exactly to allow).\n */\n// eslint-disable-next-line no-control-regex\nconst VALID_NAME_REGEXP = /^(\\w|[^\\u0000-\\u007F])(\\w|[- ./'\"()]|[^\\u0000-\\u007F])*$/;\n\n/**\n * Test name against various rules to check if it is a valid username.\n */\nexport function checkName(name: string): boolean {\n  return VALID_NAME_REGEXP.test(name);\n}\n\n\n\nconst cssWarnings = styled(css.warning, `\n  margin: -8px 0 0 110px;\n`);\n\nconst cssFirstUpper = styled('div', `\n  & > div::first-letter {\n    text-transform: capitalize;\n  }\n`);\n","import {theme, vars} from 'app/client/ui2018/cssVars';\nimport {icon as gristIcon} from 'app/client/ui2018/icons';\nimport {styled} from 'grainjs';\n\nexport const container = styled('div', `\n  display: flex;\n  justify-content: center;\n  overflow: auto;\n`);\n\nexport const accountPage = styled('div', `\n  max-width: 600px;\n  margin-top: auto;\n  margin-bottom: auto;\n  padding: 16px;\n`);\n\nexport const content = styled('div', `\n  flex: 1 1 300px;\n`);\n\nexport const textBtn = styled('button', `\n  font-size: ${vars.mediumFontSize};\n  color: ${theme.controlFg};\n  cursor: pointer;\n  margin-left: 16px;\n  background-color: transparent;\n  border: none;\n  padding: 0;\n  text-align: left;\n  min-width: 110px;\n\n  &:hover {\n    color: ${theme.controlHoverFg};\n  }\n`);\n\nexport const icon = styled(gristIcon, `\n  background-color: ${theme.controlFg};\n  margin: 0 4px 2px 0;\n\n  .${textBtn.className}:hover > & {\n    background-color: ${theme.controlHoverFg};\n  }\n`);\n\nexport const description = styled('div', `\n  color: ${theme.lightText};\n  font-size: 13px;\n`);\n\nexport const flexGrow = styled('div', `\n  flex-grow: 1;\n`);\n\nexport const name = styled(flexGrow, `\n  color: ${theme.text};\n  word-break: break-word;\n`);\n\nexport const email = styled('div', `\n  color: ${theme.text};\n  word-break: break-word;\n`);\n\nexport const loginMethod = styled(flexGrow, `\n  color: ${theme.text};\n  word-break: break-word;\n`);\n\nexport const warning = styled('div', `\n  color: ${theme.errorText};\n`);\n\nexport const header = styled('div', `\n  height: 32px;\n  line-height: 32px;\n  margin: 28px 0 16px 0;\n  color: ${theme.text};\n  font-size: ${vars.xxxlargeFontSize};\n  font-weight: ${vars.headerControlTextWeight};\n`);\n\nexport const subHeader = styled('div', `\n  color: ${theme.text};\n  padding: 8px 0;\n  vertical-align: top;\n  font-weight: bold;\n  display: block;\n`);\n\nexport const inlineSubHeader = styled(subHeader, `\n  display: inline-block;\n  min-width: 110px;\n`);\n\nexport const dataRow = styled('div', `\n  margin: 8px 0px;\n  display: flex;\n  align-items: baseline;\n  gap: 2px;\n`);\n\nexport const betaTag = styled('span', `\n  text-transform: uppercase;\n  vertical-align: super;\n  font-size: ${vars.xsmallFontSize};\n  color: ${theme.accentText};\n`);\n","import { makeT } from 'app/client/lib/localization';\nimport { basicButton, textButton } from 'app/client/ui2018/buttons';\nimport { theme, vars } from 'app/client/ui2018/cssVars';\nimport { icon } from 'app/client/ui2018/icons';\nimport { confirmModal } from 'app/client/ui2018/modals';\nimport { Disposable, dom, IDomArgs, makeTestId, Observable, observable, styled } from 'grainjs';\n\nconst t = makeT('ApiKey');\n\ninterface IWidgetOptions {\n  apiKey: Observable<string>;\n  onDelete: () => Promise<void>;\n  onCreate: () => Promise<void>;\n  anonymous?: boolean; // Configure appearance and available options for anonymous use.\n                       // When anonymous, no modifications are permitted to profile information.\n                       // TODO: add browser test for this option.\n  inputArgs?: IDomArgs<HTMLInputElement>;\n}\n\nconst testId = makeTestId('test-apikey-');\n\n/**\n * ApiKey component shows an api key with controls to change it. Expects `options.apiKey` the api\n * key and shows it if value is truthy along with a 'Delete' button that triggers the\n * `options.onDelete` callback. When `options.apiKey` is falsy, hides it and show a 'Create' button\n * that triggers the `options.onCreate` callback. It is the responsibility of the caller to update\n * the `options.apiKey` to its new value.\n */\nexport class ApiKey extends Disposable {\n  private _apiKey: Observable<string>;\n  private _onDeleteCB: () => Promise<void>;\n  private _onCreateCB: () => Promise<void>;\n  private _anonymous: boolean;\n  private _inputArgs: IDomArgs<HTMLInputElement>;\n  private _loading = observable(false);\n  private _isHidden: Observable<boolean> = Observable.create(this, true);\n\n  constructor(options: IWidgetOptions) {\n    super();\n    this._apiKey = options.apiKey;\n    this._onDeleteCB = options.onDelete;\n    this._onCreateCB = options.onCreate;\n    this._anonymous = Boolean(options.anonymous);\n    this._inputArgs = options.inputArgs ?? [];\n  }\n\n  public buildDom() {\n    return dom('div', testId('container'), dom.style('position', 'relative'),\n      dom.maybe(this._apiKey, (apiKey) => dom('div',\n        cssRow(\n          cssInput(\n            {\n              readonly: true,\n              value: this._apiKey.get(),\n            },\n            dom.attr('type', (use) => use(this._isHidden) ? 'password' : 'text'),\n            testId('key'),\n            {title: t(\"Click to show\")},\n            dom.on('click', (_ev, el) => {\n              this._isHidden.set(false);\n              setTimeout(() => el.select(), 0);\n            }),\n            dom.on('blur', (ev) => {\n              // Hide the key when it is no longer selected.\n              if (ev.target !== document.activeElement) { this._isHidden.set(true); }\n            }),\n            this._inputArgs\n          ),\n          cssTextBtn(\n            cssTextBtnIcon('Remove'), t(\"Remove\"),\n            dom.on('click', () => this._showRemoveKeyModal()),\n            testId('delete'),\n            dom.boolAttr('disabled', (use) => use(this._loading) || this._anonymous)\n          ),\n        ),\n        description(this._getDescription(), testId('description')),\n      )),\n      dom.maybe((use) => !(use(this._apiKey) || this._anonymous), () => [\n        basicButton(t(\"Create\"), dom.on('click', () => this._onCreate()), testId('create'),\n          dom.boolAttr('disabled', this._loading)),\n        description(t(\"By generating an API key, you will be able to \\\nmake API calls for your own account.\"), testId('description')),\n      ]),\n    );\n  }\n\n  // Switch the `_loading` flag to `true` and later, once promise resolves, switch it back to\n  // `false`.\n  private async _switchLoadingFlag(promise: Promise<any>) {\n    this._loading.set(true);\n    try {\n      await promise;\n    } finally {\n      this._loading.set(false);\n    }\n  }\n\n  private _onDelete(): Promise<void> {\n    return this._switchLoadingFlag(this._onDeleteCB());\n  }\n\n  private _onCreate(): Promise<void> {\n    return this._switchLoadingFlag(this._onCreateCB());\n  }\n\n  private _getDescription(): string {\n    return t(\n      !this._anonymous ?\n        'This API key can be used to access your account via the API. Don’t share your API key with anyone.' :\n        'This API key can be used to access this account anonymously via the API.'\n    );\n  }\n\n  private _showRemoveKeyModal(): void {\n    confirmModal(\n      t(\"Remove API Key\"), t(\"Remove\"),\n      () => this._onDelete(),\n      {\n        explanation: t(\n          \"You're about to delete an API key. This will cause all future requests \\\nusing this API key to be rejected. Do you still want to delete?\"\n        ),\n      }\n    );\n  }\n}\n\nconst description = styled('div', `\n  margin-top: 8px;\n  color: ${theme.lightText};\n  font-size: ${vars.mediumFontSize};\n`);\n\nconst cssInput = styled('input', `\n  background-color: transparent;\n  color: ${theme.inputFg};\n  border: 1px solid ${theme.inputBorder};\n  padding: 4px;\n  border-radius: 3px;\n  outline: none;\n  flex: 1 0 0;\n`);\n\nconst cssRow = styled('div', `\n  display: flex;\n`);\n\nconst cssTextBtn = styled(textButton, `\n  text-align: left;\n  width: 90px;\n  margin-left: 16px;\n`);\n\nconst cssTextBtnIcon = styled(icon, `\n  margin: 0 4px 2px 0;\n`);\n","import {makeT} from 'app/client/lib/localization';\nimport {AppModel} from 'app/client/models/AppModel';\nimport * as css from 'app/client/ui/AccountPageCss';\nimport {labeledSquareCheckbox} from 'app/client/ui2018/checkbox';\nimport {select} from 'app/client/ui2018/menus';\nimport {ThemeAppearance} from 'app/common/ThemePrefs';\nimport {Computed, Disposable, dom, makeTestId, styled} from 'grainjs';\n\nconst testId = makeTestId('test-theme-config-');\nconst t = makeT('ThemeConfig');\n\nexport class ThemeConfig extends Disposable {\n  private _themePrefs = this._appModel.themePrefs;\n\n  private _appearance = Computed.create(this, this._themePrefs, (_use, prefs) => {\n    return prefs.appearance;\n  }).onWrite((value) => this._updateAppearance(value));\n\n  private _syncWithOS = Computed.create(this, this._themePrefs, (_use, prefs) => {\n    return prefs.syncWithOS;\n  }).onWrite((value) => this._updateSyncWithOS(value));\n\n  constructor(private _appModel: AppModel) {\n    super();\n  }\n\n  public buildDom() {\n    return dom('div',\n      css.subHeader(t(\"Appearance \"), css.betaTag('Beta')),\n      css.dataRow(\n        cssAppearanceSelect(\n          select(\n            this._appearance,\n            [\n              {value: 'light', label: 'Light'},\n              {value: 'dark', label: 'Dark'},\n            ],\n          ),\n          testId('appearance'),\n        ),\n      ),\n      css.dataRow(\n        labeledSquareCheckbox(\n          this._syncWithOS,\n          t(\"Switch appearance automatically to match system\"),\n          testId('sync-with-os'),\n        ),\n      ),\n      testId('container'),\n    );\n  }\n\n  private _updateAppearance(appearance: ThemeAppearance) {\n    this._themePrefs.set({...this._themePrefs.get(), appearance});\n  }\n\n  private _updateSyncWithOS(syncWithOS: boolean) {\n    this._themePrefs.set({...this._themePrefs.get(), syncWithOS});\n  }\n}\n\nconst cssAppearanceSelect = styled('div', `\n  width: 120px;\n`);\n","/**\n * This is a temporary <input> element. The intended usage is to create is when needed (e.g. when\n * some \"rename\" option is chosen), and provide methods to save and to close.\n *\n * It calls save() on Enter and on blur, which should return a Promise. On successful save, and on\n * Escape, it calls close(), which should destroy the <input>.\n */\n\nimport {reportError} from 'app/client/models/AppModel';\nimport {theme} from 'app/client/ui2018/cssVars';\nimport {dom, DomArg, styled} from 'grainjs';\n\nexport interface ITransientInputOptions {\n  initialValue: string;\n  save(value: string): Promise<void>|any;\n  close(): void;\n}\n\nexport function transientInput({initialValue, save, close}: ITransientInputOptions,\n                               ...args: Array<DomArg<HTMLInputElement>>) {\n  let lastSave: string = initialValue;\n\n  async function onSave(explicitSave: boolean) {\n    try {\n      if (explicitSave || input.value !== lastSave) {\n        lastSave = input.value;\n        await save(input.value);\n      }\n      close();\n    } catch (err) {\n      reportError(err);\n      delayedFocus();\n    }\n  }\n\n  function delayedFocus() {\n    setTimeout(() => { input.focus(); input.select(); }, 10);\n  }\n\n  const input = cssInput({type: 'text', placeholder: 'Enter name'},\n    dom.prop('value', initialValue),\n    dom.on('blur', () => onSave(false)),\n    dom.onKeyDown({\n      Enter: () => onSave(true),\n      Escape: () => close(),\n    }),\n    ...args,\n  );\n  delayedFocus();\n  return input;\n}\n\nconst cssInput = styled('input', `\n  background-color: transparent;\n  color: ${theme.inputFg};\n\n  &::placeholder {\n    color: ${theme.inputPlaceholderFg};\n  }\n`);\n","export function buildChangePasswordDialog() {\n  return null;\n}\n","import {FullUser} from 'app/common/UserAPI';\nimport {Disposable} from 'grainjs';\n\nexport class MFAConfig extends Disposable {\n  constructor(_user: FullUser) { super(); }\n\n  public buildDom() { return null; }\n}\n"],"names":[],"sourceRoot":""}