{"version":3,"file":"262.bundle.js","mappings":"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,gBACA,qBACA,eACA,YACA,eACA,iBACA,eACA,gBACA,aACA,YACA,eACA,cACA,kBACA,aACA,iBACA,aACA,YACA,eACA,UACA,YACA,aACA,qBACA,YACA,aACA,QACA,WACA,cACA,OACA,OACA,WACA,UACA,OACA,WACA,aACA,WACA,OACA,WACA,WACA,WACA,aACA,QACA,cACA,SACA,UACA,UACA,WACA,SACA,eACA,YACA,OACA,SACA,WACA,aACA,oBACA,gBACA,iBACA,aACA,OACA,QACA,OACA,OACA,OACA,SACA,cACA,OACA,YACA,WACA,OACA,MACA,OACA,WACA,OACA,UACA,WACA,QACA,aACA,cACA,kBACA,eACA,UACA,OACA,YACA,aACA,SACA,SACA,WACA,YACA,QACA,aACA,OACA,QACA,SACA,cACA,eACA,OACA,SACA,YACA,OACA,cACA,SACA,aACA,QACA,SACA,SACA,WACA,QACA,OACA,SACA,OACA,YACA,OACA,aACA,QACA,UACA,SACA,OACA,OACA,WACA,aACA,aACA,QACA,WACA,aACA,WACA,aACA,WACA,c,8RC3RF,MAAO,GAAS,EAAQ,OAElB,IAAI,IAAAjiF,OAAM,WAETgF,eAAek9E,GAAax5E,EAAkBrE,EAAkBq6E,GACrE,MAAMyD,QAaRn9E,eAA2B0D,EAAkBrE,GAC3C,MAAMiN,EAAU,eAChB,IAAK5I,EAAQmZ,SAASvQ,GACpB,OAAO,WAKHjN,EAAQ08B,8BACRr4B,EAAQ2I,WAAWC,GACzB,MAAMtF,EAAYtD,EAAQmZ,SAASvQ,GAE7BpL,EAAS,GAAO8F,EAAUi3D,YAAaj3D,EAAUY,eAAe,eAAsBjL,KAAIoL,IAC9F,WAAkB1E,GAChB,OAAO+H,OAAOpE,EAAU+G,SAAShG,EAAO1E,IAAU,GACpD,CACA,MAAMmhB,EAAQzW,EAAS,SACvB,IAAIsW,EAA6BtW,EAAS,QAC1C,MAAMwzC,EAAWxzC,EAAS,aACpBqvE,EAAUrvE,EAAS,YACnBsvE,EAAWtvE,EAAS,aACpBuvE,EAAgBvvE,EAAS,YAC/B,IAAI4T,EAAY5T,EAAS,aAEzB,IA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","sources":["./app/client/aclui/ACLUsers.ts?","./app/client/components/BaseView2.ts?","./app/client/components/CellSelector.ts?","./app/client/components/CopySelection.ts?","./app/client/components/WidgetFrame.ts?","./app/client/components/CustomView.ts?","./app/client/aclui/ACLSelect.ts?","./app/client/aclui/ACLColumnList.ts?","./app/client/aclui/ACLFormulaEditor.ts?","./app/client/aclui/ACLMemoEditor.ts?","./app/client/aclui/PermissionsWidget.ts?","./app/client/aclui/AccessRules.ts?","./app/client/components/ActionLog.ts?","./app/client/components/CodeEditorPanel.ts?","./app/client/components/CursorMonitor.ts?","./app/client/components/DocComm.ts?","./app/client/components/CellPosition.ts?","./app/client/components/Drafts.ts?","./app/client/components/EditorMonitor.ts?","./app/client/components/ParseOptions.ts?","./app/client/components/Importer.ts?","./app/client/ui/DuplicateTable.ts?","./app/client/ui/WidgetTitle.ts?","./app/client/components/DataTables.ts?","./app/client/components/DocumentUsage.ts?","./app/client/ui/ViewLayoutMenu.ts?","./app/client/ui/ViewSectionMenu.ts?","./app/client/components/buildViewSectionDom.ts?","./app/client/lib/Signal.ts?","./app/client/components/LayoutTray.ts?","./app/client/components/ViewLayout.ts?","./app/client/components/RawDataPage.ts?","./app/client/components/UndoStack.ts?","./app/client/lib/DocPluginManager.ts?","./app/client/models/ColumnCache.ts?","./app/client/models/ColumnACIndexes.ts?","./app/client/models/TableData.ts?","./app/client/models/DocData.ts?","./app/client/models/entities/ACLRuleRec.ts?","./app/client/models/entities/ColumnRec.ts?","./app/client/models/entities/DocInfoRec.ts?","./app/client/models/entities/FilterRec.ts?","./app/client/models/entities/PageRec.ts?","./app/client/models/entities/TabBarRec.ts?","./app/client/models/entities/TableRec.ts?","./app/client/models/entities/ValidationRec.ts?","./app/client/models/RuleOwner.ts?","./app/client/models/ViewFieldConfig.ts?","./app/client/models/entities/ViewFieldRec.ts?","./app/client/models/entities/ViewRec.ts?","./app/client/components/LinkingState.ts?","./app/client/models/entities/ViewSectionRec.ts?","./app/client/models/entities/CellRec.ts?","./app/client/models/DocModel.ts?","./app/client/ui/DocHistory.ts?","./app/client/ui/OnBoardingPopups.ts?","./app/client/ui2018/IconList.ts?","./app/client/ui/DocTour.ts?","./app/client/ui/DocTutorialRenderer.ts?","./app/client/ui/DocTutorial.ts?","./app/client/ui/DocumentSettings.ts?","./app/common/DocDataCache.ts?","./app/client/models/VirtualTable.ts?","./app/client/ui/WebhookPage.ts?","./app/client/ui/WelcomeTour.ts?","./app/client/components/GristDoc.ts?","./app/client/components/Layout.ts?","./app/client/components/LayoutEditor.ts?","./app/client/components/PluginScreen.ts?","./app/client/components/Printing.ts?","./app/client/components/SelectionSummary.ts?","./app/client/lib/ImportSourceElement.ts?","./app/client/lib/dblclick.ts?","./app/client/lib/guessTimezone.ts?","./app/client/lib/HomePluginManager.ts?","./app/client/models/HomeModel.ts?","./app/client/models/WorkspaceInfo.ts?","./app/client/ui/CellContextMenu.ts?","./app/client/ui/ColumnTitle.ts?","./app/client/ui/DocMenuCss.ts?","./app/client/ui/ExampleCard.ts?","./app/client/ui/FieldContextMenu.ts?","./app/client/ui/GridViewMenus.ts?","./app/client/ui/MenuToggle.ts?","./app/client/ui/RenamePopupStyles.ts?","./app/client/ui/RowContextMenu.ts?","./app/client/ui/UserItem.ts?","./app/client/ui/YouTubePlayer.ts?","./app/client/ui/contextMenu.ts?","./app/client/ui/transientInput.ts?","./app/common/ACLPermissions.ts?","./app/common/ACLRuleCollection.ts?","./app/common/ActionBundle.ts?","./app/common/ActionDispatcher.ts?","./app/common/ActionSummarizer.ts?","./app/common/ActiveDocAPI.ts?","./app/common/AlternateActions.ts?","./app/common/DocActions.ts?","./app/common/DocData.ts?","./app/common/DocUsage.ts?","./app/common/GranularAccessClause.ts?","./app/common/TableData.ts?","./app/common/schema.ts?","./app/client/components/Clipboard.js?","./app/client/components/DetailView.js?","./app/client/components/DocConfigTab.js?","./app/client/components/GridView.js?","./app/client/components/RecordLayout.js?","./app/client/components/RecordLayoutEditor.js?","./app/client/components/ValidationPanel.js?","./app/client/components/viewCommon.js?","./app/client/lib/koDomScrolly.js?","./app/client/models/MetaRowModel.js?","./app/client/models/MetaTableModel.js?","./app/common/BinaryIndexedTree.js?"],"sourcesContent":["import {DocPageModel} from 'app/client/models/DocPageModel';\nimport {urlState} from 'app/client/models/gristUrlState';\nimport {createUserImage} from 'app/client/ui/UserImage';\nimport {cssMemberImage, cssMemberListItem, cssMemberPrimary,\n        cssMemberSecondary, cssMemberText} from 'app/client/ui/UserItem';\nimport {testId, theme, vars} from 'app/client/ui2018/cssVars';\nimport {PermissionDataWithExtraUsers} from 'app/common/ActiveDocAPI';\nimport {menu, menuCssClass, menuItemLink} from 'app/client/ui2018/menus';\nimport {IGristUrlState, userOverrideParams} from 'app/common/gristUrls';\nimport {FullUser} from 'app/common/LoginSessionAPI';\nimport {ANONYMOUS_USER_EMAIL, EVERYONE_EMAIL} from 'app/common/UserAPI';\nimport {getRealAccess, UserAccessData} from 'app/common/UserAPI';\nimport {Disposable, dom, Observable, styled} from 'grainjs';\nimport {cssMenu, cssMenuWrap, defaultMenuOptions, IMenuOptions, IPopupOptions, setPopupToCreateDom} from 'popweasel';\nimport {getUserRoleText} from 'app/common/UserAPI';\nimport {makeT} from 'app/client/lib/localization';\nimport {waitGrainObs} from 'app/common/gutil';\nimport noop from 'lodash/noop';\n\nconst t = makeT(\"ViewAsDropdown\");\n\nfunction isSpecialEmail(email: string) {\n  return email === ANONYMOUS_USER_EMAIL || email === EVERYONE_EMAIL;\n}\n\nexport class ACLUsersPopup extends Disposable {\n  public readonly isInitialized = Observable.create(this, false);\n  public readonly allUsers = Observable.create<UserAccessData[]>(this, []);\n  private _shareUsers: UserAccessData[] = [];           // Users doc is shared with.\n  private _attributeTableUsers: UserAccessData[] = [];  // Users mentioned in attribute tables.\n  private _exampleUsers: UserAccessData[] = [];         // Example users.\n  private _currentUser: FullUser|null = null;\n\n  constructor(public pageModel: DocPageModel,\n              public fetch: () => Promise<PermissionDataWithExtraUsers|null> = () => this._fetchData()) {\n    super();\n  }\n\n  public async load() {\n    const permissionData = await this.fetch();\n    if (this.isDisposed()) { return; }\n    this.init(permissionData);\n  }\n\n  public getUsers() {\n    const users = [...this._shareUsers, ...this._attributeTableUsers];\n    if (this._showExampleUsers()) { users.push(...this._exampleUsers); }\n    return users;\n  }\n\n  public init(permissionData: PermissionDataWithExtraUsers|null) {\n    const pageModel = this.pageModel;\n    this._currentUser = pageModel.userOverride.get()?.user || pageModel.appModel.currentValidUser;\n\n    if (permissionData) {\n      this._shareUsers = permissionData.users.map(user => ({\n        ...user,\n        access: getRealAccess(user, permissionData),\n      }))\n        .filter(user => user.access && !isSpecialEmail(user.email))\n        .filter(user => this._currentUser?.id !== user.id);\n      this._attributeTableUsers = permissionData.attributeTableUsers;\n      this._exampleUsers = permissionData.exampleUsers;\n      this.allUsers.set(this.getUsers());\n      this.isInitialized.set(true);\n    }\n  }\n\n  // Optionnally have document page reverts to the default page upon activation of the view as mode\n  // by setting `options.resetDocPage` to true.\n  public attachPopup(elem: Element, options: IPopupOptions & {resetDocPage?: boolean}) {\n    setPopupToCreateDom(elem, (ctl) => {\n      const buildRow =\n        (user: UserAccessData) => this._buildUserRow(user, options);\n      const buildExampleUserRow =\n        (user: UserAccessData) => this._buildUserRow(user, {isExampleUser: true, ...options});\n      return cssMenuWrap(cssMenu(\n        dom.cls(menuCssClass),\n        cssUsers.cls(''),\n        cssHeader(t('View As'), dom.show(this._shareUsers.length > 0)),\n        dom.forEach(this._shareUsers, buildRow),\n        (this._attributeTableUsers.length > 0) ? cssHeader(t(\"Users from table\")) : null,\n        dom.forEach(this._attributeTableUsers, buildExampleUserRow),\n        // Include example users only if there are not many \"real\" users.\n        // It might be better to have an expandable section with these users, collapsed\n        // by default, but that's beyond my UI ken.\n        this._showExampleUsers() ? [\n          (this._exampleUsers.length > 0) ? cssHeader(t(\"Example Users\")) : null,\n          dom.forEach(this._exampleUsers, buildExampleUserRow)\n        ] : null,\n        (el) => { setTimeout(() => el.focus(), 0); },\n        dom.onKeyDown({Escape: () => ctl.close()}),\n      ));\n    }, {...defaultMenuOptions, ...options});\n  }\n\n  // See 'attachPopup' for more info on the 'resetDocPage' option.\n  public menu(options: IMenuOptions) {\n    return menu(() => {\n      this.load().catch(noop);\n      return [\n        cssMenuHeader('view as'),\n        dom.forEach(this.allUsers, user => menuItemLink(\n          `${user.name || user.email} (${getUserRoleText(user)})`,\n          testId('acl-user-access'),\n          this._viewAs(user),\n        )),\n      ];\n    }, options);\n  }\n\n  private async _fetchData() {\n    const doc = this.pageModel.currentDoc.get();\n    const gristDoc = await waitGrainObs(this.pageModel.gristDoc);\n    return doc && gristDoc.docComm.getUsersForViewAs();\n  }\n\n  private _showExampleUsers() {\n    return this._shareUsers.length + this._attributeTableUsers.length < 5;\n  }\n\n  private _buildUserRow(user: UserAccessData, opt: {isExampleUser?: boolean, resetDocPage?: boolean} = {}) {\n    return dom('a',\n      {class: cssMemberListItem.className + ' ' + cssUserItem.className},\n      cssMemberImage(\n        createUserImage(opt.isExampleUser ? 'exampleUser' : user, 'large')\n      ),\n      cssMemberText(\n        cssMemberPrimary(user.name || dom('span', user.email),\n          cssRole('(', getUserRoleText(user), ')', testId('acl-user-access')),\n        ),\n        user.name ? cssMemberSecondary(user.email) : null\n      ),\n      this._viewAs(user, opt.resetDocPage),\n      testId('acl-user-item'),\n    );\n  }\n\n  private _viewAs(user: UserAccessData, resetDocPage: boolean = false) {\n    const extraState: IGristUrlState = {};\n    if (resetDocPage) { extraState.docPage = undefined; }\n    if (this.pageModel?.isPrefork.get() &&\n        this.pageModel?.currentDoc.get()?.access !== 'owners') {\n      // \"View As\" is restricted to document owners on the back-end. Non-owners can be\n      // permitted to pretend to be owners of a pre-forked document, but if they want\n      // to do \"View As\", that would be layering pretence over pretense. Better to just\n      // go ahead and create the fork, so the user becomes a genuine owner, so the\n      // back-end doesn't have to become too metaphysical (and maybe hard to review).\n      return dom.on('click', async () => {\n        const forkResult = await this.pageModel?.gristDoc.get()?.docComm.fork();\n        if (!forkResult) { throw new Error('Failed to create fork'); }\n        window.location.assign(urlState().makeUrl(userOverrideParams(user.email,\n                                                                     {...extraState, doc: forkResult.urlId})));\n      });\n    } else {\n      // When forking isn't needed, we return a direct link to be maximally transparent\n      // about where button will go.\n      return urlState().setHref(userOverrideParams(user.email, extraState));\n    }\n  }\n}\n\nconst cssUsers = styled('div', `\n  max-width: unset;\n`);\n\nconst cssUserItem = styled(cssMemberListItem, `\n  width: auto;\n  padding: 8px 16px;\n  align-items: center;\n  &:hover {\n    background-color: ${theme.lightHover};\n  }\n  &, &:hover, &:focus {\n    text-decoration: none;\n  }\n`);\n\nconst cssRole = styled('span', `\n  margin: 0 8px;\n  font-weight: normal;\n`);\n\nconst cssHeader = styled('div', `\n  margin: 11px 24px 14px 24px;\n  font-weight: 700;\n  text-transform: uppercase;\n  font-size: ${vars.xsmallFontSize};\n  color: ${theme.darkText};\n`);\n\nconst cssMenuHeader = styled('div', `\n  margin: 8px 24px;\n  margin-bottom: 4px;\n  font-weight: 700;\n  text-transform: uppercase;\n  font-size: ${vars.xsmallFontSize};\n  color: ${theme.darkText};\n`);\n","/**\n * This file contains logic moved from BaseView.js and ported to TS.\n */\n\nimport {GristDoc} from 'app/client/components/GristDoc';\nimport {getDocIdHash, RichPasteObject} from 'app/client/lib/tableUtil';\nimport {ViewFieldRec} from 'app/client/models/entities/ViewFieldRec';\nimport {UserAction} from 'app/common/DocActions';\nimport {isFullReferencingType} from 'app/common/gristTypes';\nimport {SchemaTypes} from 'app/common/schema';\nimport {BulkColValues} from 'app/plugin/GristData';\nimport omit = require('lodash/omit');\n\n/**\n * Given a 2-d paste column-oriented paste data and target cols, transform the data to omit\n * fields that shouldn't be pasted over and extract rich paste data if available.\n * When pasting into empty columns, also update them with options from the source column.\n * `data` is a column-oriented 2-d array of either\n *    plain strings or rich paste data returned by `tableUtil.parsePasteHtml`.\n * `fields` are the target fields being pasted into.\n */\nexport async function parsePasteForView(\n  data: Array<string | RichPasteObject>[], fields: ViewFieldRec[], gristDoc: GristDoc\n): Promise<BulkColValues> {\n  const result: BulkColValues = {};\n  const actions: UserAction[] = [];\n  const thisDocIdHash = getDocIdHash();\n\n  data.forEach((col, idx) => {\n    const field = fields[idx];\n    const colRec = field?.column();\n    if (!colRec || colRec.isRealFormula() || colRec.disableEditData()) {\n      return;\n    }\n\n    const parser = field.createValueParser() || (x => x);\n    let typeMatches = false;\n    if (col[0] && typeof col[0] === \"object\") {\n      const {colType, docIdHash, colRef} = col[0];\n      const targetType = colRec.type();\n      const docIdMatches = docIdHash === thisDocIdHash;\n      typeMatches = docIdMatches || !isFullReferencingType(colType || \"\");\n\n      if (targetType !== \"Any\") {\n        typeMatches = typeMatches && colType === targetType;\n      } else if (docIdMatches && colRef) {\n        // Try copying source column type and options into empty columns\n        const sourceColRec = gristDoc.docModel.columns.getRowModel(colRef);\n        const sourceType = sourceColRec.type();\n        // Check that the source column still exists, has a type other than Text, and the type hasn't changed.\n        // For Text columns, we don't copy over column info so that type guessing can still happen.\n        if (sourceColRec.getRowId() && sourceType !== \"Text\" && sourceType === colType) {\n          const colInfo: Partial<SchemaTypes[\"_grist_Tables_column\"]> = {\n            type: sourceType,\n            visibleCol: sourceColRec.visibleCol(),\n            // Conditional formatting rules are not copied right now, that's a bit more complicated\n            // and copying the formula may or may not be desirable.\n            widgetOptions: JSON.stringify(omit(sourceColRec.widgetOptionsJson(), \"rulesOptions\")),\n          };\n          actions.push(\n            [\"UpdateRecord\", \"_grist_Tables_column\", colRec.getRowId(), colInfo],\n            [\"MaybeCopyDisplayFormula\", colRef, colRec.getRowId()],\n          );\n        }\n      }\n    }\n\n    result[colRec.colId()] = col.map(v => {\n      if (v) {\n        if (typeof v === \"string\") {\n          return parser(v);\n        }\n        if (typeMatches && v.hasOwnProperty('rawValue')) {\n          return v.rawValue;\n        }\n        if (v.hasOwnProperty('displayValue')) {\n          return parser(v.displayValue);\n        }\n      }\n      return v;\n    });\n  });\n\n  if (actions.length) {\n    await gristDoc.docData.sendActions(actions);\n  }\n\n  return result;\n}\n","import ko from 'knockout';\nimport type BaseView from 'app/client/components/BaseView';\nimport type {DataRowModel} from 'app/client/models/DataRowModel';\nimport {between} from 'app/common/gutil';\nimport {Disposable} from 'grainjs';\n\nexport const ROW = 'row';\nexport const COL = 'col';\nexport const CELL = 'cell';\nexport const NONE = '';\n\nexport type ElemType = 'row' | 'col' | 'cell' | '';\n\ninterface GridView extends BaseView {\n  domToRowModel(elem: Element, elemType: ElemType): DataRowModel;\n  domToColModel(elem: Element, elemType: ElemType): DataRowModel;\n}\n\nexport class CellSelector extends Disposable {\n  // row or col.start denotes the anchor/initial index of the select range.\n  // start is not necessarily smaller than end.\n  // IE: clicking on col 10 and dragging until the mouse is on col 5 will yield: start = 10, end = 5\n  public row = {\n    start: ko.observable(0),\n    end: ko.observable(0),\n    linePos: ko.observable('0px'),    // Used by GridView for dragging rows\n    dropIndex: ko.observable(-1),     // Used by GridView for dragging rows\n  };\n  public col =  {\n    start: ko.observable(0),\n    end: ko.observable(0),\n    linePos: ko.observable('0px'),    // Used by GridView for dragging columns\n    dropIndex: ko.observable(-1),     // Used by GridView for dragging columns\n  };\n  public currentSelectType = ko.observable<ElemType>(NONE);\n  public currentDragType = ko.observable<ElemType>(NONE);\n\n  constructor(public readonly view: GridView) {\n    super();\n    this.autoDispose(this.view.cursor.rowIndex.subscribe(() => this.setToCursor()));\n    this.autoDispose(this.view.cursor.fieldIndex.subscribe(() => this.setToCursor()));\n    this.setToCursor();\n  }\n\n  public setToCursor(elemType: ElemType = NONE) {\n    // Must check that the view contains cursor.rowIndex/cursor.fieldIndex\n    // in case it has changed.\n    if (this.view.cursor.rowIndex) {\n      this.row.start(this.view.cursor.rowIndex()!);\n      this.row.end(this.view.cursor.rowIndex()!);\n    }\n    if (this.view.cursor.fieldIndex) {\n      this.col.start(this.view.cursor.fieldIndex());\n      this.col.end(this.view.cursor.fieldIndex());\n    }\n    this.currentSelectType(elemType);\n  }\n\n  public containsCell(rowIndex: number, colIndex: number): boolean {\n    return this.containsCol(colIndex) && this.containsRow(rowIndex);\n  }\n\n  public containsRow(rowIndex: number): boolean {\n    return between(rowIndex, this.row.start(), this.row.end());\n  }\n\n  public containsCol(colIndex: number): boolean {\n    return between(colIndex, this.col.start(), this.col.end());\n  }\n\n  public isSelected(elem: Element, handlerName: ElemType) {\n    if (handlerName !== this.currentSelectType()) {\n      return false;\n    }\n\n    // TODO: this only works with view: GridView.\n    // But it seems like we only ever use selectors with gridview anyway\n    const row = this.view.domToRowModel(elem, handlerName);\n    const col = this.view.domToColModel(elem, handlerName);\n    switch (handlerName) {\n      case ROW:\n        return this.containsRow(row._index()!);\n      case COL:\n        return this.containsCol(col._index()!);\n      case CELL:\n        return this.containsCell(row._index()!, col._index()!);\n      default:\n        console.error('Given element is not a row, cell or column');\n        return false;\n    }\n  }\n\n  public isRowSelected(rowIndex: number): boolean {\n    return this.isCurrentSelectType(COL) || this.containsRow(rowIndex);\n  }\n\n  public isColSelected(colIndex: number): boolean {\n    return this.isCurrentSelectType(ROW) || this.containsCol(colIndex);\n  }\n\n  public isCellSelected(rowIndex: number, colIndex: number): boolean {\n    return this.isColSelected(colIndex) && this.isRowSelected(rowIndex);\n  }\n\n  public onlyCellSelected(rowIndex: number, colIndex: number): boolean {\n    return (this.row.start() === rowIndex && this.row.end() === rowIndex) &&\n      (this.col.start() === colIndex && this.col.end() === colIndex);\n  }\n\n  public isCurrentSelectType(elemType: ElemType): boolean {\n    return this._isCurrentType(this.currentSelectType(), elemType);\n  }\n\n  public isCurrentDragType(elemType: ElemType): boolean {\n    return this._isCurrentType(this.currentDragType(), elemType);\n  }\n\n  public colLower(): number {\n    return Math.min(this.col.start(), this.col.end());\n  }\n\n  public colUpper(): number {\n    return Math.max(this.col.start(), this.col.end());\n  }\n\n  public rowLower(): number {\n    return Math.min(this.row.start(), this.row.end());\n  }\n\n  public rowUpper(): number {\n    return Math.max(this.row.start(), this.row.end());\n  }\n\n  public colCount(): number {\n    return this.colUpper() - this.colLower() + 1;\n  }\n\n  public rowCount(): number {\n    return this.rowUpper() - this.rowLower() + 1;\n  }\n\n  public selectArea(rowStartIdx: number, colStartIdx: number, rowEndIdx: number, colEndIdx: number): void {\n    this.row.start(rowStartIdx);\n    this.col.start(colStartIdx);\n    this.row.end(rowEndIdx);\n    this.col.end(colEndIdx);\n    // Only select the area if it's not a single cell\n    if (this.colCount() > 1 || this.rowCount() > 1) {\n      this.currentSelectType(CELL);\n    }\n  }\n\n  private _isCurrentType(currentType: ElemType, elemType: ElemType): boolean {\n    console.assert([ROW, COL, CELL, NONE].indexOf(elemType) !== -1);\n    return currentType === elemType;\n  }\n}\n","import type {ViewFieldRec} from 'app/client/models/entities/ViewFieldRec';\nimport type {CellValue} from 'app/common/DocActions';\nimport type {TableData, UIRowId} from 'app/common/TableData';\n\n/**\n * The CopySelection class is an abstraction for a subset of currently selected cells.\n * @param {Array} rowIds - row ids of the rows selected\n * @param {Array} fields - MetaRowModels of the selected view fields\n * @param {Object} options.rowStyle - an object that maps rowId to an object containing\n * style options. i.e. { 1: { height: 20px } }\n * @param {Object} options.colStyle - an object that maps colId to an object containing\n * style options.\n */\nexport class CopySelection {\n  public readonly colIds = this.fields.map(f => f.colId());\n  public readonly colRefs = this.fields.map(f => f.colRef());\n  public readonly displayColIds = this.fields.map(f => f.displayColModel().colId());\n  public readonly rowStyle: {[r: number]: object}|undefined;\n  public readonly colStyle: {[c: string]: object}|undefined;\n\n  public readonly columns: Array<{\n    colId: string,\n    fmtGetter: (rowId: UIRowId) => string,\n    rawGetter: (rowId: UIRowId) => CellValue|undefined,\n  }>;\n\n  constructor(tableData: TableData, public readonly rowIds: UIRowId[], public readonly fields: ViewFieldRec[],\n              options: {\n                rowStyle?: {[r: number]: object},\n                colStyle?: {[c: string]: object},\n              }\n  ) {\n    this.rowStyle = options.rowStyle;\n    this.colStyle = options.colStyle;\n    this.columns = fields.map((f, i) => {\n      const formatter = f.formatter();\n      const _fmtGetter = tableData.getRowPropFunc(this.displayColIds[i])!;\n      const _rawGetter = tableData.getRowPropFunc(this.colIds[i])!;\n\n      return {\n        colId: this.colIds[i],\n        fmtGetter: rowId => formatter.formatAny(_fmtGetter(rowId)),\n        rawGetter: rowId => _rawGetter(rowId)\n      };\n    });\n  }\n\n  public isCellSelected(rowId: UIRowId, colId: string): boolean {\n    return this.rowIds.includes(rowId) && this.colIds.includes(colId);\n  }\n\n  public onlyAddRowSelected(): boolean {\n    return this.rowIds.length === 1 && this.rowIds[0] === \"new\";\n  }\n}\n","import BaseView from 'app/client/components/BaseView';\nimport {GristDoc} from 'app/client/components/GristDoc';\nimport {hooks} from 'app/client/Hooks';\nimport {get as getBrowserGlobals} from 'app/client/lib/browserGlobals';\nimport {ColumnRec, ViewSectionRec} from 'app/client/models/DocModel';\nimport {AccessLevel, isSatisfied} from 'app/common/CustomWidget';\nimport {DisposableWithEvents} from 'app/common/DisposableWithEvents';\nimport {BulkColValues, fromTableDataAction, RowRecord} from 'app/common/DocActions';\nimport {extractInfoFromColType, reencodeAsAny} from 'app/common/gristTypes';\nimport {AccessTokenOptions, CustomSectionAPI, GristDocAPI, GristView,\n        InteractionOptionsRequest, WidgetAPI, WidgetColumnMap} from 'app/plugin/grist-plugin-api';\nimport {MsgType, Rpc} from 'grain-rpc';\nimport {Computed, Disposable, dom, Observable} from 'grainjs';\nimport noop = require('lodash/noop');\nimport debounce = require('lodash/debounce');\nimport isEqual = require('lodash/isEqual');\nimport flatMap = require('lodash/flatMap');\n\n/**\n * This file contains a WidgetFrame and all its components.\n *\n * WidgetFrame embeds an external Custom Widget (external webpage) in an iframe. It is used on a CustomView,\n * to display widget content, and on the configuration screen to display widget's configuration screen.\n *\n * Beside exposing widget content, it also exposes some of the API's that Grist offers via grist-rpc.\n * API are defined in the core/app/plugin/grist-plugin-api.ts.\n */\n\nconst G = getBrowserGlobals('window');\n\n/**\n * Options for WidgetFrame\n */\nexport interface WidgetFrameOptions {\n  /**\n   * Url of external page. Iframe is rebuild each time the URL changes.\n   */\n  url: string;\n  /**\n   * Assigned access level. Iframe is rebuild each time access level is changed.\n   */\n  access: AccessLevel;\n  /**\n   * If document is in readonly mode.\n   */\n  readonly: boolean;\n  /**\n   * Optional callback to configure exposed API.\n   */\n  configure?: (frame: WidgetFrame) => void;\n  /**\n   * Optional handler to modify the iframe.\n   */\n  onElem?: (iframe: HTMLIFrameElement) => void;\n}\n\n/**\n * Iframe that embeds Custom Widget page and exposes Grist API.\n */\nexport class WidgetFrame extends DisposableWithEvents {\n  // A grist-rpc object, encapsulated to prevent direct access.\n  private _rpc: Rpc;\n  // Created iframe element, used to receive and post messages via Rpc\n  private _iframe: HTMLIFrameElement | null;\n\n  constructor(private _options: WidgetFrameOptions) {\n    super();\n    _options.access = _options.access || AccessLevel.none;\n    // Build RPC object and connect it to iframe.\n    this._rpc = new Rpc({});\n\n    // queue until iframe's content emit ready() message\n    this._rpc.queueOutgoingUntilReadyMessage();\n\n    // Register outgoing message handler.\n    this._rpc.setSendMessage(msg => this._iframe?.contentWindow!.postMessage(msg, '*'));\n\n    // Register incoming message handler.\n    const listener = this._onMessage.bind(this);\n    // 'message' is an event's name used by Rpc in window to iframe communication.\n    G.window.addEventListener('message', listener);\n    this.onDispose(() => {\n      // Stop listening for events from the iframe.\n      G.window.removeEventListener('message', listener);\n      // Stop sending messages to the iframe.\n      this._rpc.setSendMessage(noop);\n    });\n\n    // Call custom configuration handler.\n    _options.configure?.(this);\n  }\n\n  /**\n   * Attach an EventSource with desired access level.\n   */\n  public useEvents(source: IEventSource, access: AccessChecker) {\n    // Wrap event handler with access check.\n    const handler = async (data: any) => {\n      if (access.check(this._options.access)) {\n        await this._rpc.postMessage(data);\n      }\n    };\n    this.listenTo(source, 'event', handler);\n    // Give EventSource a chance to attach to WidgetFrame events.\n    source.attach(this);\n  }\n\n  /**\n   * Exposes API for Custom Widget.\n   * TODO: add ts-interface support. Currently all APIs are written in typescript,\n   * so those checks are not that needed.\n   */\n  public exposeAPI(name: string, api: any, access: AccessChecker) {\n    this._rpc.registerImpl(name, wrapObject(api, access, this._options.access));\n    this.onDispose(() => this._rpc.unregisterImpl(name));\n  }\n\n  /**\n   * Expose a method for Custom Widget.\n   */\n  public exposeMethod(name: string, handler: (...args: any[]) => any, access: AccessChecker) {\n    this._rpc.registerFunc(name, (...args: any[]) => {\n      if (access.check(this._options.access, 'invoke')) {\n        return handler(...args);\n      } else {\n        throwError(this._options.access);\n      }\n    });\n  }\n\n  /**\n   * Make configure call to the widget. Widget should open some configuration screen or ignore it.\n   */\n  public editOptions() {\n    return this.callRemote('editOptions');\n  }\n\n  /**\n   * Call remote function that is exposed by the widget.\n   */\n  public callRemote(name: string, ...args: any[]) {\n    return this._rpc.callRemoteFunc(name, ...args);\n  }\n\n  public buildDom() {\n    // Append access level to query string.\n    const urlWithAccess = (url: string) => {\n      if (!url) {\n        return url;\n      }\n      const urlObj = new URL(url);\n      urlObj.searchParams.append('access', this._options.access);\n      urlObj.searchParams.append('readonly', String(this._options.readonly));\n      return urlObj.href;\n    };\n    const fullUrl = urlWithAccess(this._options.url);\n    const onElem = this._options.onElem ?? ((el: HTMLIFrameElement) => el);\n    return onElem(\n      (this._iframe = dom('iframe', dom.cls('clipboard_focus'), dom.cls('custom_view'), {\n        src: fullUrl,\n        ...hooks.iframeAttributes,\n      }))\n    );\n  }\n\n  private _onMessage(event: MessageEvent) {\n    if (this._iframe && event.source === this._iframe.contentWindow && !this.isDisposed()) {\n      // Previously, we forwarded messages targeted at \"grist\" to the back-end.\n      // Now, we process them immediately in the context of the client for access\n      // control purposes.  To do that, any message that comes in with mdest of\n      // \"grist\" will have that destination wiped, and we provide a local\n      // implementation of the interface.\n      // It feels like it should be possible to deal with the mdest more cleanly,\n      // with a rpc.registerForwarder('grist', { ... }), but it seems somehow hard\n      // to call a locally registered interface of an rpc object?\n      if (event.data.mdest === 'grist') {\n        event.data.mdest = '';\n      }\n      if (event.data.mtype === MsgType.Ready) {\n        this.trigger('ready', this);\n      }\n      this._rpc.receiveMessage(event.data);\n    }\n  }\n}\n\nconst throwError = (access: AccessLevel) => {\n  throw new Error('Access not granted. Current access level ' + access);\n};\n\n/**\n * Wraps an object to check access level before it is called.\n * TODO: grain-rpc exposes callWrapper which could be used for this purpose,\n * but currently it doesn't have access to the incoming message.\n */\nfunction wrapObject<T extends object>(impl: T, accessChecker: AccessChecker, access: AccessLevel): T {\n  return new Proxy(impl, {\n    // This proxies all the calls to methods on the API.\n    get(target: any, methodName: string) {\n      return function () {\n        if (methodName === 'then') {\n          // Making a proxy for then invocation is not a good idea.\n          return undefined;\n        }\n        if (accessChecker.check(access, methodName)) {\n          return target[methodName](...arguments);\n        } else {\n          throwError(access);\n        }\n      };\n    },\n  });\n}\n\n/**\n * Interface for custom access rules.\n */\nexport interface AccessChecker {\n  /**\n   * Checks if the incoming call can be served on current access level.\n   * @param access Current access level\n   * @param method Method called on the interface, can use * or undefined to match all methods.\n   */\n  check(access: AccessLevel, method?: string): boolean;\n}\n\n/**\n * Checks if current access level is enough.\n */\nexport class MinimumLevel implements AccessChecker {\n  constructor(private _minimum: AccessLevel) {}\n  public check(access: AccessLevel): boolean {\n    return isSatisfied(access, this._minimum);\n  }\n}\n\ntype MethodMatcher<T> = keyof T | '*';\n/**\n * Helper object that allows assigning access level to a particular method in the interface.\n *\n * Example:\n *\n * 1. Expose two methods, all other will be denied (even in full access mode)\n * new ApiGranularAccess<GristDocAPI>()\n *  .require(\"read_table\", \"method1\") // for method1 we need at least read_table\n *  .require(\"none\", \"method2\") // for method2 no access level is needed\n *\n * 2. Expose two methods, all other will require full access (effectively the same as ex. 1)\n * new ApiGranularAccess<GristDocAPI>()\n *  .require(\"read_table\", \"method1\") // for method1 we need at least read_table\n *  .require(\"none\", \"method2\") // for method2 no access level is needed\n *  .require(\"full\", \"*\") // for any other, require full\n *\n * 3. Expose all methods on read_table access, but one can have none\n * new ApiGranularAccess<GristDocAPI>()\n *  .require(\"none\", \"method2\") // for method2 we are ok with none access\n *  .require(\"read_table\", \"*\") // for any other, require read_table\n */\nexport class MethodAccess<T> implements AccessChecker {\n  private _accessMap: Map<MethodMatcher<T>, AccessLevel> = new Map();\n  constructor() {}\n  public require(level: AccessLevel, method: MethodMatcher<T> = '*') {\n    this._accessMap.set(method, level);\n    return this;\n  }\n  public check(access: AccessLevel, method?: string): boolean {\n    if (!method) {\n      throw new Error('Method name is required for MethodAccess check');\n    }\n    // Check if the iface was registered.\n    if (this._accessMap.has(method as MethodMatcher<T>)) {\n      // If it was, check that minimum access level is granted.\n      const minimum = this._accessMap.get(method as MethodMatcher<T>)!;\n      return isSatisfied(access, minimum);\n    } else if (this._accessMap.has('*')) {\n      // If there is a default rule, check if it permits the access.\n      const minimum = this._accessMap.get('*')!;\n      return isSatisfied(access, minimum);\n    } else {\n      // By default, don't allow anything on this interface.\n      return false;\n    }\n  }\n}\n\n/***********************\n * Exposed APIs for Custom Widgets.\n *\n * Currently we expose 3 APIs\n * - GristDocAPI - full access to document.\n * - ViewAPI - access to current table.\n * - WidgetAPI - access to widget configuration.\n ***********************/\n\n/**\n * GristDocApi implemented over active GristDoc.\n */\nexport class GristDocAPIImpl implements GristDocAPI {\n  public static readonly defaultAccess = new MethodAccess<GristDocAPI>()\n    .require(AccessLevel.read_table, 'getDocName')\n    .require(AccessLevel.full); // for any other, require full Access.\n\n  constructor(private _doc: GristDoc) {}\n\n  public async getDocName() {\n    return this._doc.docId();\n  }\n\n  public async listTables(): Promise<string[]> {\n    // Could perhaps read tableIds from this.gristDoc.docModel.visibleTableIds.all()?\n    const {tableData} = await this._doc.docComm.fetchTable('_grist_Tables');\n    // Tables the user doesn't have access to are just blanked out.\n    return tableData[3].tableId.filter(tableId => tableId !== '') as string[];\n  }\n\n  public async fetchTable(tableId: string) {\n    return fromTableDataAction(await this._doc.docComm.fetchTable(tableId));\n  }\n\n  public async applyUserActions(actions: any[][], options?: any) {\n    return this._doc.docComm.applyUserActions(actions, {desc: undefined, ...options});\n  }\n\n  // Get a token for out-of-band access to the document.\n  // Currently will require the custom widget to have full access to the\n  // document.\n  // It would be great to support this with read_table rights. This could be\n  // possible to do by adding a tableId setting to AccessTokenOptions,\n  // encoding that limitation in the access token, and ensuring the back-end\n  // respects it. But the current motivating use for adding access tokens is\n  // showing attachments, and they aren't currently something that logically\n  // lives within a specific table.\n  public async getAccessToken(options: AccessTokenOptions) {\n    return this._doc.docComm.getAccessToken({\n      readOnly: options.readOnly,\n    });\n  }\n}\n\n/**\n * GristViewAPI implemented over BaseView.\n */\nexport class GristViewImpl implements GristView {\n  constructor(private _baseView: BaseView) {}\n\n  public async fetchSelectedTable(): Promise<any> {\n    // If widget has a custom columns mapping, we will ignore hidden columns section.\n    // Hidden/Visible columns will eventually reflect what is available, but this operation\n    // is not instant - and widget can receive rows with fields that are not in the mapping.\n    const columns: ColumnRec[] = this._visibleColumns();\n    const rowIds = this._baseView.sortedRows.getKoArray().peek().filter(id => id != 'new');\n    const data: BulkColValues = {};\n    for (const column of columns) {\n      // Use the colId of the displayCol, which may be different in case of Reference columns.\n      const colId: string = column.displayColModel.peek().colId.peek();\n      const getter = this._baseView.tableModel.tableData.getRowPropFunc(colId)!;\n      const typeInfo = extractInfoFromColType(column.type.peek());\n      data[column.colId.peek()] = rowIds.map(r => reencodeAsAny(getter(r)!, typeInfo));\n    }\n    data.id = rowIds;\n    return data;\n  }\n\n  public async fetchSelectedRecord(rowId: number): Promise<any> {\n    // Prepare an object containing the fields available to the view\n    // for the specified row.  A RECORD()-generated rendering would be\n    // more useful. but the data engine needs to know what information\n    // the custom view depends on, so we shouldn't volunteer any untracked\n    // information here.\n    const columns: ColumnRec[] = this._visibleColumns();\n    const data: RowRecord = {id: rowId};\n    for (const column of columns) {\n      const colId: string = column.displayColModel.peek().colId.peek();\n      const typeInfo = extractInfoFromColType(column.type.peek());\n      data[column.colId.peek()] = reencodeAsAny(\n        this._baseView.tableModel.tableData.getValue(rowId, colId)!,\n        typeInfo\n      );\n    }\n    return data;\n  }\n\n  public async allowSelectBy(): Promise<void> {\n    this._baseView.viewSection.allowSelectBy.set(true);\n  }\n\n  public async setSelectedRows(rowIds: number[]): Promise<void> {\n    this._baseView.viewSection.selectedRows.set(rowIds);\n  }\n\n  private _visibleColumns() {\n    const columns: ColumnRec[] = this._baseView.viewSection.columns.peek();\n    const hiddenCols = this._baseView.viewSection.hiddenColumns.peek().map(c => c.id.peek());\n    const mappings = this._baseView.viewSection.mappedColumns.peek();\n    const mappedColumns = new Set(flatMap(Object.values(mappings || {})));\n    const notHidden = (col: ColumnRec) => !hiddenCols.includes(col.id.peek());\n    const mapped = (col: ColumnRec) => mappings && mappedColumns.has(col.colId.peek());\n    // If columns are mapped, return only those that are mapped.\n    // Otherwise return all not hidden columns;\n    return mappings ? columns.filter(mapped) : columns.filter(notHidden);\n  }\n}\n\n/**\n * WidgetAPI implemented over active section.\n */\nexport class WidgetAPIImpl implements WidgetAPI {\n  constructor(private _section: ViewSectionRec) {}\n\n  /**\n   * Stores options in viewSection.customDef.widgetDef json field.\n   * This way whenever widget is changed, options are removed and not shared\n   * between widgets by design.\n   */\n  public async setOptions(options: object): Promise<void> {\n    if (options === null || options === undefined || typeof options !== 'object') {\n      throw new Error('options must be a valid JSON object');\n    }\n    this._section.activeCustomOptions(options);\n  }\n\n  public async getOptions(): Promise<Record<string, unknown> | null> {\n    return this._section.activeCustomOptions.peek() ?? null;\n  }\n\n  public async clearOptions(): Promise<void> {\n    this._section.activeCustomOptions(null);\n  }\n\n  public async setOption(key: string, value: any): Promise<void> {\n    const options = {...this._section.activeCustomOptions.peek()};\n    options[key] = value;\n    this._section.activeCustomOptions(options);\n  }\n\n  public getOption(key: string): Promise<unknown> {\n    const options = this._section.activeCustomOptions.peek();\n    return options?.[key];\n  }\n}\n\n/************************\n * Events that are sent to the CustomWidget.\n *\n * Currently:\n * - onRecord, implemented by RecordNotifier, sends a message each time active row is changed.\n * - onRecords, implemented by TableNotifier, sends a message each time table is changed\n * - onOptions, implemented by ConfigNotifier, sends a message each time configuration is changed\n *\n * All of those events are also sent when CustomWidget sends its ready message.\n ************************/\n\n/**\n * EventSource should trigger event called \"event\" that will be send to the Custom Widget.\n */\nexport interface IEventSource extends DisposableWithEvents {\n  /**\n   * Called by WidgetFrame, allowing EventSource to attach to its ready event.\n   */\n  attach(frame: WidgetFrame): void;\n}\n\nexport class BaseEventSource extends DisposableWithEvents implements IEventSource {\n  // Attaches to WidgetFrame ready event.\n  public attach(frame: WidgetFrame): void {\n    this.listenTo(frame, 'ready', this._ready.bind(this));\n  }\n  protected _ready() {\n    // To override if needed to react on the ready event.\n  }\n  protected _notify(data: any) {\n    if (this.isDisposed()) {\n      return;\n    }\n    this.trigger('event', data);\n  }\n}\n\n/**\n * Notifies about cursor position change. Exposed in the API as a onRecord handler.\n */\nexport class RecordNotifier extends BaseEventSource {\n  private _debounced: () => void; // debounced call to let the view know linked cursor changed.\n  constructor(private _baseView: BaseView) {\n    super();\n    this._debounced = debounce(() => this._update(), 0);\n    this.autoDispose(_baseView.cursor.rowIndex.subscribe(this._debounced));\n  }\n\n  private _update() {\n    if (this.isDisposed()) {\n      return;\n    }\n    const state = {\n      tableId: this._baseView.viewSection.table().tableId(),\n      rowId: this._baseView.cursor.getCursorPos().rowId || undefined,\n      dataChange: false,\n    };\n    this._notify(state);\n  }\n}\n\n/**\n * Notifies about options position change. Exposed in the API as a onOptions handler.\n */\nexport class ConfigNotifier extends BaseEventSource {\n  private _currentConfig: Computed<any | null>;\n  private _debounced: () => void; // debounced call to let the view know linked cursor changed.\n  constructor(private _section: ViewSectionRec, private _accessLevel: AccessLevel) {\n    super();\n    this._currentConfig = Computed.create(this, use => {\n      const options = use(this._section.activeCustomOptions);\n      return options;\n    });\n    this._debounced = debounce(() => this._update(), 0);\n    const subscribe = (obs: Observable<any>) => {\n      this.autoDispose(\n        obs.addListener((cur, prev) => {\n          if (isEqual(prev, cur)) {\n            return;\n          }\n          this._debounced();\n        })\n      );\n    };\n    subscribe(this._currentConfig);\n  }\n\n  protected _ready() {\n    // On ready, send initial configuration.\n    this._debounced();\n  }\n\n  private _update() {\n    if (this.isDisposed()) {\n      return;\n    }\n    this._notify({\n      options: this._currentConfig.get(),\n      settings: {\n        accessLevel: this._accessLevel,\n      },\n    });\n  }\n}\n\n/**\n * Notifies about cursor table data or structure change.\n * Exposed in the API as a onRecords handler.\n * This Notifier sends an initial event when subscribed\n */\nexport class TableNotifier extends BaseEventSource {\n  private _debounced: () => void;\n  private _updateMapping = true;\n  constructor(private _baseView: BaseView) {\n    super();\n    this._debounced = debounce(() => this._update(), 0);\n    this.autoDispose(_baseView.viewSection.viewFields().subscribe(this._debounced.bind(this)));\n    this.listenTo(_baseView.sortedRows, 'rowNotify', this._debounced.bind(this));\n    this.autoDispose(_baseView.sortedRows.getKoArray().subscribe(this._debounced.bind(this)));\n    this.autoDispose(_baseView.viewSection.mappedColumns\n      .subscribe(() => {\n        this._updateMapping = true;\n        this._debounced();\n      })\n    );\n  }\n\n  protected _ready() {\n    // On ready, send initial table information.\n    this._debounced();\n  }\n\n  private _update() {\n    if (this.isDisposed()) {\n      return;\n    }\n    const state = {\n      tableId: this._baseView.viewSection.table().tableId(),\n      rowId: this._baseView.cursor.getCursorPos().rowId || undefined,\n      dataChange: true,\n      mappingsChange: this._updateMapping\n    };\n    this._updateMapping = false;\n    this._notify(state);\n  }\n}\n\nexport class CustomSectionAPIImpl extends Disposable implements CustomSectionAPI {\n  constructor(\n    private _section: ViewSectionRec,\n    private _currentAccess: AccessLevel,\n    private _promptCallback: (access: AccessLevel) => void\n  ) {\n    super();\n  }\n\n  public async mappings(): Promise<WidgetColumnMap|null> {\n    return this._section.mappedColumns.peek();\n  }\n\n  /**\n   * Method called as part of ready message. Allows widget to request for particular features or inform about\n   * capabilities.\n   */\n  public async configure(settings: InteractionOptionsRequest): Promise<void> {\n    if (settings.hasCustomOptions !== undefined) {\n      this._section.hasCustomOptions(settings.hasCustomOptions);\n    }\n    if (settings.requiredAccess && settings.requiredAccess !== this._currentAccess) {\n      this._promptCallback(settings.requiredAccess as AccessLevel);\n    }\n    if (settings.columns !== undefined) {\n      this._section.columnsToMap(settings.columns);\n    } else {\n      this._section.columnsToMap(null);\n    }\n  }\n}\n","import BaseView from 'app/client/components/BaseView';\nimport {Cursor} from 'app/client/components/Cursor';\nimport * as commands from 'app/client/components/commands';\nimport {GristDoc} from 'app/client/components/GristDoc';\nimport {ConfigNotifier, CustomSectionAPIImpl, GristDocAPIImpl, GristViewImpl,\n        MinimumLevel, RecordNotifier, TableNotifier, WidgetAPIImpl,\n        WidgetFrame} from 'app/client/components/WidgetFrame';\nimport {CustomSectionElement, ViewProcess} from 'app/client/lib/CustomSectionElement';\nimport {Disposable} from 'app/client/lib/dispose';\nimport dom from 'app/client/lib/dom';\nimport * as kd from 'app/client/lib/koDom';\nimport DataTableModel from 'app/client/models/DataTableModel';\nimport {ViewSectionRec} from 'app/client/models/DocModel';\nimport {CustomViewSectionDef} from 'app/client/models/entities/ViewSectionRec';\nimport {UserError} from 'app/client/models/errors';\nimport {SortedRowSet} from 'app/client/models/rowset';\nimport {PluginInstance} from 'app/common/PluginInstance';\nimport {AccessLevel} from 'app/common/CustomWidget';\nimport {closeRegisteredMenu} from 'app/client/ui2018/menus';\nimport {getGristConfig} from 'app/common/urlUtils';\nimport {Events as BackboneEvents} from 'backbone';\nimport {dom as grains} from 'grainjs';\nimport * as ko from 'knockout';\nimport defaults = require('lodash/defaults');\n\n/**\n * CustomView components displays arbitrary html. There are two modes available, in the \"url\" mode\n * the content is hosted by a third-party (for instance a github page), as opposed to the \"plugin\"\n * mode where the contents is provided by a plugin. In both cases the content is rendered safely\n * within an iframe (or webview if running electron). Configuration of the component is done within\n * the view config tab in the side pane. In \"plugin\" mode, shows notification if either the plugin\n * of the section could not be found.\n */\nexport class CustomView extends Disposable {\n\n  private static _commands = {\n    async openWidgetConfiguration(this: CustomView) {\n      if (!this.isDisposed() && !this._frame?.isDisposed()) {\n        try {\n          await this._frame.editOptions();\n        } catch(err) {\n          if (err.message === \"Unknown interface\") {\n            throw new UserError(\"Custom widget doesn't expose configuration screen.\");\n          } else {\n            throw err;\n          }\n        }\n      }\n    },\n  };\n  /**\n   * The HTMLElement embedding the content.\n   */\n  public viewPane: HTMLElement;\n\n  // viewSection, sortedRows, tableModel, gristDoc, and cursor are inherited from BaseView\n  protected viewSection: ViewSectionRec;\n  protected sortedRows: SortedRowSet;\n  protected tableModel: DataTableModel;\n  protected gristDoc: GristDoc;\n  protected cursor: Cursor;\n\n  private _customDef: CustomViewSectionDef;\n\n  // state of the component\n  private _foundPlugin: ko.Observable<boolean>;\n  private _foundSection: ko.Observable<boolean>;\n  // Note the invariant: this._customSection != undefined if this._foundSection() == true\n  private _customSection: ViewProcess|undefined;\n  private _pluginInstance: PluginInstance|undefined;\n\n  private _frame: WidgetFrame;  // plugin frame (holding external page)\n  private _emptyWidgetPage: string;\n\n  public create(gristDoc: GristDoc, viewSectionModel: ViewSectionRec) {\n    BaseView.call(this as any, gristDoc, viewSectionModel, { 'addNewRow': true });\n\n    this._customDef =  this.viewSection.customDef;\n\n    this._emptyWidgetPage = new URL(\"custom-widget.html\", getGristConfig().homeUrl!).href;\n\n    this.autoDisposeCallback(() => {\n      if (this._customSection) {\n        this._customSection.dispose();\n      }\n    });\n    this._foundPlugin = ko.observable(false);\n    this._foundSection = ko.observable(false);\n    // Ensure that selecting another section in same plugin update the view.\n    this._foundSection.extend({notify: 'always'});\n\n    this.autoDispose(this._customDef.pluginId.subscribe(this._updatePluginInstance, this));\n    this.autoDispose(this._customDef.sectionId.subscribe(this._updateCustomSection, this));\n    this.autoDispose(commands.createGroup(CustomView._commands, this, this.viewSection.hasFocus));\n\n    this.viewPane = this.autoDispose(this._buildDom());\n    this._updatePluginInstance();\n  }\n\n  public async triggerPrint() {\n    if (!this.isDisposed() && this._frame) {\n      return await this._frame.callRemote('print');\n    }\n  }\n\n  /**\n   * Find a plugin instance that matches the plugin id, update the `found` observables, then tries to\n   * find a matching section.\n   */\n  private _updatePluginInstance() {\n\n    const pluginId = this._customDef.pluginId();\n    this._pluginInstance = this.gristDoc.docPluginManager.pluginsList.find(p => p.definition.id === pluginId);\n\n    if (this._pluginInstance) {\n      this._foundPlugin(true);\n    } else {\n      this._foundPlugin(false);\n      this._foundSection(false);\n    }\n    this._updateCustomSection();\n  }\n\n  /**\n   * If a plugin was found, find a custom section matching the section id and update the `found`\n   * observables.\n   */\n  private _updateCustomSection() {\n\n    if (!this._pluginInstance) { return; }\n\n    const sectionId = this._customDef.sectionId();\n    this._customSection = CustomSectionElement.find(this._pluginInstance, sectionId);\n\n    if (this._customSection) {\n      const el = this._customSection.element;\n      el.classList.add(\"flexitem\");\n      this._foundSection(true);\n    } else {\n      this._foundSection(false);\n    }\n  }\n\n  private _buildDom() {\n    const {mode, url, access} = this._customDef;\n    const showPlugin = ko.pureComputed(() => this._customDef.mode() === \"plugin\");\n\n    // When both plugin and section are not found, let's show only plugin notification.\n    const showPluginNotification = ko.pureComputed(() => showPlugin() && !this._foundPlugin());\n    const showSectionNotification = ko.pureComputed(() => showPlugin() && this._foundPlugin() && !this._foundSection());\n    const showPluginContent = ko.pureComputed(() => showPlugin() && this._foundSection())\n        // For the view to update when switching from one section to another one, the computed\n        // observable must always notify.\n        .extend({notify: 'always'});\n    return dom('div.flexauto.flexvbox.custom_view_container',\n      dom.autoDispose(showPlugin),\n      dom.autoDispose(showPluginNotification),\n      dom.autoDispose(showSectionNotification),\n      dom.autoDispose(showPluginContent),\n      // todo: should display content in webview when running electron\n      kd.scope(() => [mode(), url(), access()], ([_mode, _url, _access]: string[]) =>\n        _mode === \"url\" ? this._buildIFrame(_url, (_access || AccessLevel.none) as AccessLevel) : null),\n      kd.maybe(showPluginNotification, () => buildNotification('Plugin ',\n        dom('strong', kd.text(this._customDef.pluginId)), ' was not found',\n        dom.testId('customView_notification_plugin')\n      )),\n      kd.maybe(showSectionNotification, () => buildNotification('Section ',\n        dom('strong', kd.text(this._customDef.sectionId)), ' was not found in plugin ',\n        dom('strong', kd.text(this._customDef.pluginId)),\n        dom.testId('customView_notification_section')\n      )),\n      // When showPluginContent() is true then _foundSection() is also and _customSection is not\n      // undefined (invariant).\n      kd.maybe(showPluginContent, () => this._customSection!.element)\n    );\n  }\n\n  private _promptAccess(access: AccessLevel) {\n    if (this.gristDoc.isReadonly.get()) {\n      return;\n    }\n    this.viewSection.desiredAccessLevel(access);\n  }\n\n  private _buildIFrame(baseUrl: string, access: AccessLevel) {\n    return grains.create(WidgetFrame, {\n      url: baseUrl || this._emptyWidgetPage,\n      access,\n      readonly: this.gristDoc.isReadonly.get(),\n      configure: (frame) => {\n        this._frame = frame;\n        // Need to cast myself to a BaseView\n        const view = this as unknown as BaseView;\n        frame.exposeAPI(\n          \"GristDocAPI\",\n          new GristDocAPIImpl(this.gristDoc),\n          GristDocAPIImpl.defaultAccess);\n        frame.exposeAPI(\n          \"GristView\",\n          new GristViewImpl(view), new MinimumLevel(AccessLevel.read_table));\n        frame.exposeAPI(\n          \"CustomSectionAPI\",\n          new CustomSectionAPIImpl(\n            this.viewSection,\n            access,\n            this._promptAccess.bind(this)),\n          new MinimumLevel(AccessLevel.none));\n        frame.useEvents(RecordNotifier.create(frame, view), new MinimumLevel(AccessLevel.read_table));\n        frame.useEvents(TableNotifier.create(frame, view), new MinimumLevel(AccessLevel.read_table));\n        frame.exposeAPI(\n          \"WidgetAPI\",\n          new WidgetAPIImpl(this.viewSection),\n          new MinimumLevel(AccessLevel.none)); // none access is enough\n        frame.useEvents(\n          ConfigNotifier.create(frame, this.viewSection, access),\n          new MinimumLevel(AccessLevel.none)); // none access is enough\n      },\n      onElem: (iframe) => onFrameFocus(iframe, () => {\n        if (this.isDisposed()) { return; }\n        if (!this.viewSection.isDisposed() && !this.viewSection.hasFocus()) {\n          this.viewSection.hasFocus(true);\n        }\n        // allow menus to close if any\n        closeRegisteredMenu();\n      })\n    });\n\n  }\n}\n\n// Getting an ES6 class to work with old-style multiple base classes takes a little hacking. Credits: ./ChartView.ts\ndefaults(CustomView.prototype, BaseView.prototype);\nObject.assign(CustomView.prototype, BackboneEvents);\n\n\n// helper to build the notification's frame.\nfunction buildNotification(...args: any[]) {\n  return dom('div.custom_view_notification.bg-warning', dom('p', ...args));\n}\n\n/**\n * There is no way to detect if the frame was clicked. This causes a bug, when\n * there are 2 custom widgets on a page then user can't switch focus from 1 section\n * to another. The only solution is too pool and test if the iframe is an active element\n * in the dom.\n * (See https://stackoverflow.com/questions/2381336/detect-click-into-iframe-using-javascript).\n *\n * For a single iframe, it will gain focus through a hack in ViewLayout.ts.\n */\nfunction onFrameFocus(frame: HTMLIFrameElement, handler: () => void) {\n  let timer: NodeJS.Timeout|null = null;\n  // Flag that will prevent mouseenter event to be fired\n  // after dom is disposed. This shouldn't happen.\n  let disposed = false;\n  // Stops pooling.\n  function stop() {\n    if (timer) {\n      clearInterval(timer);\n      timer = null;\n    }\n  }\n  return grains.update(frame,\n    grains.on(\"mouseenter\", () => {\n      // Make sure we weren't dispose (should not happen)\n      if (disposed) { return; }\n      // If frame already has focus, do nothing.\n      // NOTE: Frame will always be an active element from our perspective,\n      // even if the focus is somewhere inside the iframe.\n      if (document.activeElement === frame) { return; }\n      // Start pooling for frame focus.\n      timer = setInterval(() => {\n        if (document.activeElement === frame) {\n          try {\n            handler();\n          } finally {\n            // Stop checking, we will start again after next mouseenter.\n            stop();\n          }\n        }\n      }, 70); // 70 is enough to make it look like a click.\n    }),\n    grains.on(\"mouseleave\", stop),\n    grains.onDispose(() => {\n      stop();\n      disposed = true;\n    })\n  );\n}\n","import {colors} from 'app/client/ui2018/cssVars';\nimport {icon} from 'app/client/ui2018/icons';\nimport {IOption, select} from 'app/client/ui2018/menus';\nimport {MaybeObsArray, Observable, styled} from 'grainjs';\nimport * as weasel from 'popweasel';\n\n/**\n * A styled version of select() from ui2018/menus, for use in the AccessRules page.\n */\nexport function aclSelect<T>(obs: Observable<T>, optionArray: MaybeObsArray<IOption<T>>,\n                             options: weasel.ISelectUserOptions = {}) {\n  return cssSelect(obs, optionArray, {buttonArrow: cssSelectArrow('Collapse'), ...options});\n}\n\nexport const cssSelect = styled(select, `\n  height: 28px;\n  width: 100%;\n  border: 1px solid transparent;\n  cursor: pointer;\n\n  &:hover, &:focus, &.weasel-popup-open, &-active {\n    border: 1px solid ${colors.darkGrey};\n    box-shadow: none;\n  }\n`);\n\nconst cssSelectCls = cssSelect.className;\n\nconst cssSelectArrow = styled(icon, `\n  margin: 0 2px;\n  pointer-events: none;\n  display: none;\n\n  .${cssSelectCls}:hover &, .${cssSelectCls}:focus &, .weasel-popup-open &, .${cssSelectCls}-active & {\n    display: flex;\n  }\n`);\n","/**\n * Implements a widget for showing and editing a list of colIds. It offers a select dropdown to\n * add a new column, and allows removing already-added columns.\n */\nimport {aclSelect, cssSelect} from 'app/client/aclui/ACLSelect';\nimport {testId, theme} from 'app/client/ui2018/cssVars';\nimport {icon} from 'app/client/ui2018/icons';\nimport {Computed, dom, Observable, styled} from 'grainjs';\n\nexport function aclColumnList(colIds: Observable<string[]>, validColIds: string[]) {\n  // Define some helpers functions.\n  function removeColId(colId: string) {\n    colIds.set(colIds.get().filter(c => (c !== colId)));\n  }\n  function addColId(colId: string) {\n    colIds.set([...colIds.get(), colId]);\n    selectBox.focus();\n  }\n  function onFocus(ev: FocusEvent) {\n    editing.set(true);\n    // Focus the select box, except when focus just moved from it, e.g. after Shift-Tab.\n    if (ev.relatedTarget !== selectBox) {\n      selectBox.focus();\n    }\n  }\n  function onBlur() {\n    if (!selectBox.matches('.weasel-popup-open') && colIds.get().length > 0) {\n      editing.set(false);\n    }\n  }\n\n  // The observable for the selected element is a Computed, with a callback for being set, which\n  // adds the selected colId to the list.\n  const newColId = Computed.create(null, (use) => '')\n    .onWrite((value) => { setTimeout(() => addColId(value), 0); });\n\n  // We don't allow adding the same column twice, so for the select dropdown build a list of\n  // unused colIds.\n  const unusedColIds = Computed.create(null, colIds, (use, _colIds) => {\n    const used = new Set(_colIds);\n    return validColIds.filter(c => !used.has(c));\n  });\n\n  // The \"editing\" observable determines which of two states is active: to show or to edit.\n  const editing = Observable.create(null, !colIds.get().length);\n\n  let selectBox: HTMLElement;\n  return cssColListWidget({tabIndex: '0'},\n    dom.autoDispose(unusedColIds),\n    cssColListWidget.cls('-editing', editing),\n    dom.on('focus', onFocus),\n    dom.forEach(colIds, colId =>\n      cssColItem(\n        cssColId(colId),\n        cssColItemIcon(icon('CrossSmall'),\n          dom.on('click', () => removeColId(colId)),\n          testId('acl-col-remove'),\n        ),\n        testId('acl-column'),\n      )\n    ),\n    cssNewColItem(\n      dom.update(\n        selectBox = aclSelect(newColId, unusedColIds, {defaultLabel: '[Add Column]'}),\n        cssSelect.cls('-active'),\n        dom.on('blur', onBlur),\n        dom.onKeyDown({Escape: onBlur}),\n        // If starting out in edit mode, focus the select box.\n        (editing.get() ? (elem) => { setTimeout(() => elem.focus(), 0); } : null)\n      ),\n    )\n  );\n}\n\n\nconst cssColListWidget = styled('div', `\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  position: relative;\n  outline: none;\n  margin: 6px 8px;\n  cursor: pointer;\n  border-radius: 4px;\n\n  border: 1px solid transparent;\n  &:not(&-editing):hover {\n    border: 1px solid ${theme.accessRulesColumnListBorder};\n  }\n`);\n\nconst cssColItem = styled('div', `\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  border-radius: 3px;\n  padding-left: 6px;\n  padding-right: 2px;\n  color: ${theme.accessRulesColumnItemFg};\n\n  .${cssColListWidget.className}-editing & {\n    background-color: ${theme.accessRulesColumnItemBg};\n  }\n`);\n\nconst cssColId = styled('div', `\n  flex: auto;\n  height: 24px;\n  line-height: 24px;\n  min-width: 0;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`);\n\nconst cssNewColItem = styled('div', `\n  margin-top: 2px;\n  display: none;\n  .${cssColListWidget.className}-editing & {\n    display: flex;\n  }\n`);\n\nconst cssColItemIcon = styled('div', `\n  flex: none;\n  height: 16px;\n  width: 16px;\n  border-radius: 16px;\n  display: none;\n  cursor: default;\n  --icon-color: ${theme.accessRulesColumnItemIconFg};\n  &:hover {\n    background-color: ${theme.accessRulesColumnItemIconHoverBg};\n    --icon-color: ${theme.accessRulesColumnItemIconHoverFg};\n  }\n  .${cssColListWidget.className}-editing & {\n    display: flex;\n  }\n`);\n","import ace, {Ace} from 'ace-builds';\nimport {setupAceEditorCompletions} from 'app/client/components/AceEditorCompletions';\nimport {theme} from 'app/client/ui2018/cssVars';\nimport {Theme} from 'app/common/ThemePrefs';\nimport {getGristConfig} from 'app/common/urlUtils';\nimport {Computed, dom, DomArg, Listener, Observable, styled} from 'grainjs';\nimport debounce from 'lodash/debounce';\n\nexport interface ACLFormulaOptions {\n  gristTheme: Computed<Theme>;\n  initialValue: string;\n  readOnly: boolean;\n  placeholder: DomArg;\n  setValue: (value: string) => void;\n  getSuggestions: (prefix: string) => string[];\n  customiseEditor?: (editor: Ace.Editor) => void;\n}\n\nexport function aclFormulaEditor(options: ACLFormulaOptions) {\n  // Create an element and an editor within it.\n  const editorElem = dom('div');\n  const editor: Ace.Editor = ace.edit(editorElem);\n\n  // Set various editor options.\n  function setAceTheme(gristTheme: Theme) {\n    const {enableCustomCss} = getGristConfig();\n    const gristAppearance = gristTheme.appearance;\n    const aceTheme = gristAppearance === 'dark' && !enableCustomCss ? 'dracula' : 'chrome';\n    editor.setTheme(`ace/theme/${aceTheme}`);\n  }\n  setAceTheme(options.gristTheme.get());\n  let themeListener: Listener | undefined;\n  if (!getGristConfig().enableCustomCss) {\n    themeListener = options.gristTheme.addListener((gristTheme) => {\n      setAceTheme(gristTheme);\n    });\n  }\n  // ACE editor resizes automatically when maxLines is set.\n  editor.setOptions({enableLiveAutocompletion: true, maxLines: 10});\n  editor.renderer.setShowGutter(false);       // Default line numbers to hidden\n  editor.renderer.setPadding(5);\n  editor.renderer.setScrollMargin(4, 4, 0, 0);\n  (editor as any).$blockScrolling = Infinity;\n  editor.setReadOnly(options.readOnly);\n  editor.setFontSize('12');\n  editor.setHighlightActiveLine(false);\n\n  const session = editor.getSession();\n  session.setMode('ace/mode/python');\n  session.setTabSize(2);\n  session.setUseWrapMode(false);\n\n  // Implement placeholder text since the version of ACE we use doesn't support one.\n  const showPlaceholder = Observable.create(null, !options.initialValue.length);\n  editor.renderer.scroller.appendChild(\n    cssAcePlaceholder(dom.show(showPlaceholder), options.placeholder)\n  );\n  editor.on(\"change\", () => showPlaceholder.set(!editor.getValue().length));\n\n  async function getSuggestions(prefix: string): Promise<Array<[string, null]>> {\n    return [\n      // The few Python keywords and constants we support.\n      'and', 'or', 'not', 'in', 'is', 'True', 'False', 'None',\n      // Some grist-specific constants:\n      'OWNER', 'EDITOR', 'VIEWER',\n      // The common variables.\n      'user', 'rec', 'newRec',\n      // Other completions that depend on doc schema or other rules.\n      ...options.getSuggestions(prefix),\n    ].map(suggestion => [suggestion, null]);  // null means no example value\n  }\n  setupAceEditorCompletions(editor, {getSuggestions});\n\n  // Save on blur.\n  editor.on(\"blur\", () => options.setValue(editor.getValue()));\n\n  // Save changes every 1 second\n  const save = debounce(() => options.setValue(editor.getValue()), 1000);\n  editor.on(\"change\", save);\n\n  // Blur (and save) on Enter key.\n  editor.commands.addCommand({\n    name: 'onEnter',\n    bindKey: {win: 'Enter', mac: 'Enter'},\n    exec: () => editor.blur(),\n  });\n  // Disable Tab/Shift+Tab commands to restore their regular behavior.\n  (editor.commands as any).removeCommands(['indent', 'outdent']);\n\n  // Set the editor's initial value.\n  editor.setValue(options.initialValue);\n\n  if (options.customiseEditor) {\n    options.customiseEditor(editor);\n  }\n\n  return cssConditionInputAce(\n    dom.autoDispose(themeListener ?? null),\n    cssConditionInputAce.cls('-disabled', options.readOnly),\n    // ACE editor calls preventDefault on clicks into the scrollbar area, which prevents focus\n    // being set when the click happens to be into there. To ensure we can focus on such clicks\n    // anyway, listen to the mousedown event in the capture phase.\n    dom.on('mousedown', () => { editor.focus(); }, {useCapture: true}),\n    dom.onDispose(() => editor.destroy()),\n    dom.onDispose(() => save.cancel()),\n    editorElem,\n  );\n}\n\nconst cssConditionInputAce = styled('div', `\n  width: 100%;\n  min-height: 28px;\n  padding: 1px;\n  border-radius: 3px;\n  border: 1px solid transparent;\n  cursor: pointer;\n\n  &:hover {\n    border: 1px solid ${theme.accessRulesFormulaEditorBorderHover};\n  }\n  &:not(&-disabled):focus-within {\n    box-shadow: inset 0 0 0 1px ${theme.accessRulesFormulaEditorFocus};\n    border-color: ${theme.accessRulesFormulaEditorFocus};\n  }\n  &:not(:focus-within) .ace_scroller, &-disabled .ace_scroller {\n    cursor: unset;\n  }\n  &-disabled, &-disabled:hover {\n    background-color: ${theme.accessRulesFormulaEditorBgDisabled};\n    box-shadow: unset;\n    border-color: transparent;\n  }\n  & .ace-chrome, & .ace-dracula {\n    background-color: ${theme.accessRulesFormulaEditorBg};\n  }\n  &-disabled .ace-chrome, &-disabled .ace-dracula {\n    background-color: ${theme.accessRulesFormulaEditorBgDisabled};\n  }\n  & .ace_marker-layer, & .ace_cursor-layer {\n    display: none;\n  }\n  &:not(&-disabled) .ace_focus .ace_marker-layer, &:not(&-disabled) .ace_focus .ace_cursor-layer {\n    display: block;\n  }\n`);\n\nconst cssAcePlaceholder = styled('div', `\n  padding: 4px 5px;\n  opacity: 0.5;\n`);\n","import {theme} from 'app/client/ui2018/cssVars';\nimport {dom, DomElementArg, Observable, styled} from 'grainjs';\n\nexport function aclMemoEditor(obs: Observable<string>, ...args: DomElementArg[]): HTMLInputElement {\n  return cssMemoInput(\n    dom.prop('value', obs),\n    dom.on('input', (_e, elem) => obs.set(elem.value)),\n    ...args,\n  );\n}\n\nconst cssMemoInput = styled('input', `\n  width: 100%;\n  min-height: 28px;\n  padding: 4px 5px;\n  border-radius: 3px;\n  border: 1px solid transparent;\n  cursor: pointer;\n  color: ${theme.accentText};\n  background-color: ${theme.inputBg};\n  caret-color : ${theme.inputFg};\n  font: 12px 'Monaco', 'Menlo', 'Ubuntu Mono', 'Consolas', 'source-code-pro', monospace;\n  overflow: hidden;\n  text-overflow: ellipsis;\n\n  &:hover {\n    border: 1px solid ${theme.inputBorder};\n  }\n  &:not(&-disabled):focus-within {\n    outline: none !important;\n    cursor: text;\n    box-shadow: inset 0 0 0 1px ${theme.accentBorder};\n    border-color: ${theme.accentBorder};\n  }\n`);\n","/**\n * Implements a widget showing 3-state boxes for permissions\n * (for Allow / Deny / Pass-Through).\n */\nimport {colors, testId} from 'app/client/ui2018/cssVars';\nimport {cssIconButton, icon} from 'app/client/ui2018/icons';\nimport {menu, menuIcon, menuItem} from 'app/client/ui2018/menus';\nimport {PartialPermissionSet, PartialPermissionValue} from 'app/common/ACLPermissions';\nimport {ALL_PERMISSION_PROPS, emptyPermissionSet} from 'app/common/ACLPermissions';\nimport {capitalize} from 'app/common/gutil';\nimport {dom, DomElementArg, Observable, styled} from 'grainjs';\nimport isEqual = require('lodash/isEqual');\nimport {makeT} from 'app/client/lib/localization';\n\n// One of the strings 'read', 'update', etc.\nexport type PermissionKey = keyof PartialPermissionSet;\n\n// Canonical order of permission bits when rendered in a permissionsWidget.\nconst PERMISSION_BIT_ORDER = 'RUCDS';\n\nconst t = makeT('PermissionsWidget');\n\n/**\n * Renders a box for each of availableBits, and a dropdown with a description and some shortcuts.\n */\nexport function permissionsWidget(\n  availableBits: PermissionKey[],\n  pset: Observable<PartialPermissionSet>,\n  options: {disabled: boolean, sanityCheck?: (p: PartialPermissionSet) => void},\n  ...args: DomElementArg[]\n) {\n  availableBits = sortBits(availableBits);\n  // These are the permission sets available to set via the dropdown.\n  const empty: PartialPermissionSet = emptyPermissionSet();\n  const allowAll: PartialPermissionSet = makePermissionSet(availableBits, () => 'allow');\n  const denyAll: PartialPermissionSet = makePermissionSet(availableBits, () => 'deny');\n  const readOnly: PartialPermissionSet = makePermissionSet(availableBits, (b) => b === 'read' ? 'allow' : 'deny');\n  const setPermissions = (p: PartialPermissionSet) => {\n    options.sanityCheck?.(p);\n    pset.set(p);\n  };\n\n  return cssPermissions(\n    dom.forEach(availableBits, (bit) => {\n      return cssBit(\n        bit.slice(0, 1).toUpperCase(),              // Show the first letter of the property (e.g. \"R\" for \"read\")\n        cssBit.cls((use) => '-' + use(pset)[bit]),  // -allow, -deny class suffixes.\n        dom.attr('title', (use) => capitalize(`${use(pset)[bit]} ${bit}`.trim())),    // Explanation on hover\n        dom.cls('disabled', options.disabled),\n        // Cycle the bit's value on click, unless disabled.\n        (options.disabled ? null :\n          dom.on('click', () => setPermissions({...pset.get(), [bit]: next(pset.get()[bit])}))\n        )\n      );\n    }),\n    cssIconButton(icon('Dropdown'), testId('permissions-dropdown'), menu(() => {\n      // Show a disabled \"Custom\" menu item if the permission set isn't a recognized one, for\n      // information purposes.\n      const isCustom = [allowAll, denyAll, readOnly, empty].every(ps => !isEqual(ps, pset.get()));\n      return [\n        (isCustom ?\n          cssMenuItem(() => null, dom.cls('disabled'), menuIcon('Tick'),\n            cssMenuItemContent(\n              'Custom',\n              cssMenuItemDetails(dom.text((use) => psetDescription(use(pset))))\n            ),\n          ) :\n          null\n        ),\n        // If the set matches any recognized pattern, mark that item with a tick (checkmark).\n        cssMenuItem(() => setPermissions(allowAll), tick(isEqual(pset.get(), allowAll)), t(\"Allow All\"),\n          dom.cls('disabled', options.disabled)\n        ),\n        cssMenuItem(() => setPermissions(denyAll), tick(isEqual(pset.get(), denyAll)), t(\"Deny All\"),\n          dom.cls('disabled', options.disabled)\n        ),\n        cssMenuItem(() => setPermissions(readOnly), tick(isEqual(pset.get(), readOnly)), t(\"Read Only\"),\n          dom.cls('disabled', options.disabled)\n        ),\n        cssMenuItem(() => setPermissions(empty),\n          // For the empty permission set, it seems clearer to describe it as \"No Effect\", but to\n          // all it \"Clear\" when offering to the user as the action.\n          isEqual(pset.get(), empty) ? [tick(true), 'No Effect'] : [tick(false), 'Clear'],\n          dom.cls('disabled', options.disabled),\n        ),\n      ];\n    })),\n    ...args\n  );\n}\n\nfunction next(pvalue: PartialPermissionValue): PartialPermissionValue {\n  switch (pvalue) {\n    case 'allow': return '';\n    case 'deny': return 'allow';\n  }\n  return 'deny';\n}\n\n// Helper to build up permission sets.\nfunction makePermissionSet(bits: PermissionKey[], makeValue: (bit: PermissionKey) => PartialPermissionValue) {\n  const pset = emptyPermissionSet();\n  for (const bit of bits) {\n    pset[bit] = makeValue(bit);\n  }\n  return pset;\n}\n\n// Helper for a tick (checkmark) icon, replacing it with an equivalent space when not shown.\nfunction tick(show: boolean) {\n  return show ? menuIcon('Tick') : cssMenuIconSpace();\n}\n\n// Human-readable summary of the permission set. E.g. \"Allow Read. Deny Update, Create.\".\nfunction psetDescription(permissionSet: PartialPermissionSet): string {\n  const allow: string[] = [];\n  const deny: string[] = [];\n  for (const prop of ALL_PERMISSION_PROPS) {\n    const value = permissionSet[prop];\n    if (value === \"allow\") {\n      allow.push(capitalize(prop));\n    } else if (value === \"deny\") {\n      deny.push(capitalize(prop));\n    }\n  }\n  const parts: string[] = [];\n  if (allow.length) { parts.push(`Allow ${allow.join(\", \")}.`); }\n  if (deny.length) { parts.push(`Deny ${deny.join(\", \")}.`); }\n  return parts.join(' ');\n}\n\n/**\n * Sort the bits in a standard way for viewing, since they could be in any order\n * in the underlying rule store. And in fact ACLPermissions.permissionSetToText\n * uses an order (CRUDS) that is different from how things have been historically\n * rendered in the UI (RUCDS).\n */\nfunction sortBits(bits: PermissionKey[]) {\n  return bits.sort((a, b) => {\n    const aIndex = PERMISSION_BIT_ORDER.indexOf(a.slice(0, 1).toUpperCase());\n    const bIndex = PERMISSION_BIT_ORDER.indexOf(b.slice(0, 1).toUpperCase());\n    return aIndex - bIndex;\n  });\n}\n\nconst cssPermissions = styled('div', `\n  display: flex;\n  gap: 4px;\n`);\n\nconst cssBit = styled('div', `\n  flex: none;\n  height: 24px;\n  width: 24px;\n  border-radius: 2px;\n  font-size: 13px;\n  font-weight: 500;\n  border: 1px dashed ${colors.darkGrey};\n  color: ${colors.darkGrey};\n  cursor: pointer;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  &-allow {\n    background-color: ${colors.lightGreen};\n    border: 1px solid ${colors.lightGreen};\n    color: white;\n  }\n  &-deny {\n    background-image: linear-gradient(-45deg, ${colors.error} 14px, white 15px 16px, ${colors.error} 16px);\n    border: 1px solid ${colors.error};\n    color: white;\n  }\n  &.disabled {\n    opacity: 0.5;\n  }\n`);\n\nconst cssMenuIconSpace = styled('div', `\n  width: 24px;\n`);\n\n// Don't make disabled item too hard to see here.\nconst cssMenuItem = styled(menuItem, `\n  align-items: start;\n  &.disabled {\n    opacity: unset;\n  }\n`);\n\nconst cssMenuItemContent = styled('div', `\n  display: flex;\n  flex-direction: column;\n`);\n\nconst cssMenuItemDetails = styled('div', `\n  font-size: 12px;\n`);\n","/**\n * UI for managing granular ACLs.\n */\nimport {aclColumnList} from 'app/client/aclui/ACLColumnList';\nimport {aclFormulaEditor} from 'app/client/aclui/ACLFormulaEditor';\nimport {aclMemoEditor} from 'app/client/aclui/ACLMemoEditor';\nimport {aclSelect} from 'app/client/aclui/ACLSelect';\nimport {ACLUsersPopup} from 'app/client/aclui/ACLUsers';\nimport {PermissionKey, permissionsWidget} from 'app/client/aclui/PermissionsWidget';\nimport {GristDoc} from 'app/client/components/GristDoc';\nimport {reportError, UserError} from 'app/client/models/errors';\nimport {TableData} from 'app/client/models/TableData';\nimport {shadowScroll} from 'app/client/ui/shadowScroll';\nimport {bigBasicButton, bigPrimaryButton} from 'app/client/ui2018/buttons';\nimport {squareCheckbox} from 'app/client/ui2018/checkbox';\nimport {testId, theme} from 'app/client/ui2018/cssVars';\nimport {textInput} from 'app/client/ui2018/editableLabel';\nimport {cssIconButton, icon} from 'app/client/ui2018/icons';\nimport {menu, menuItemAsync} from 'app/client/ui2018/menus';\nimport {\n  emptyPermissionSet,\n  MixedPermissionValue,\n  parsePermissions,\n  PartialPermissionSet,\n  permissionSetToText,\n  summarizePermissions,\n  summarizePermissionSet\n} from 'app/common/ACLPermissions';\nimport {ACLRuleCollection, isSchemaEditResource, SPECIAL_RULES_TABLE_ID} from 'app/common/ACLRuleCollection';\nimport {AclRuleProblem, AclTableDescription, getTableTitle} from 'app/common/ActiveDocAPI';\nimport {BulkColValues, getColValues, RowRecord, UserAction} from 'app/common/DocActions';\nimport {\n  FormulaProperties,\n  getFormulaProperties,\n  RulePart,\n  RuleSet,\n  UserAttributeRule\n} from 'app/common/GranularAccessClause';\nimport {isHiddenCol} from 'app/common/gristTypes';\nimport {isNonNullish, unwrap} from 'app/common/gutil';\nimport {SchemaTypes} from 'app/common/schema';\nimport {MetaRowRecord} from 'app/common/TableData';\nimport {\n  BaseObservable,\n  Computed,\n  Disposable,\n  dom,\n  DomContents,\n  DomElementArg,\n  IDisposableOwner,\n  MutableObsArray,\n  obsArray,\n  Observable,\n  styled\n} from 'grainjs';\nimport {makeT} from 'app/client/lib/localization';\nimport isEqual = require('lodash/isEqual');\n\nconst t = makeT('AccessRules');\n\n// tslint:disable:max-classes-per-file no-console\n\n// Types for the rows in the ACL tables we use.\ntype ResourceRec = SchemaTypes[\"_grist_ACLResources\"] & {id?: number};\ntype RuleRec = Partial<SchemaTypes[\"_grist_ACLRules\"]> & {id?: number, resourceRec?: ResourceRec};\n\ntype UseCB = <T>(obs: BaseObservable<T>) => T;\n\n// Status of rules, which determines whether the \"Save\" button is enabled. The order of the values\n// matters, as we take the max of all the parts to determine the ultimate status.\nenum RuleStatus {\n  Unchanged,\n  ChangedValid,\n  Invalid,\n  CheckPending,\n}\n\n// UserAttribute autocomplete choices. RuleIndex is used to filter for only those user\n// attributes made available by the previous rules.\ninterface IAttrOption {\n  ruleIndex: number;\n  value: string;\n}\n\n/**\n * Top-most container managing state and dom-building for the ACL rule UI.\n */\nexport class AccessRules extends Disposable {\n  // Whether anything has changed, i.e. whether to show a \"Save\" button.\n  private _ruleStatus: Computed<RuleStatus>;\n\n  // Parsed rules obtained from DocData during last call to update(). Used for _ruleStatus.\n  private _ruleCollection = new ACLRuleCollection();\n\n  // Array of all per-table rules.\n  private _tableRules = this.autoDispose(obsArray<TableRules>());\n\n  // The default rule set for the document (for \"*:*\").\n  private _docDefaultRuleSet = Observable.create<DefaultObsRuleSet|null>(this, null);\n\n  // Special document-level rules, for resources of the form (\"*SPECIAL:<RuleType>\").\n  // These rules are shown in different places - currently most are shown as a separate\n  // section, and one is folded into the default rule section (for SeedRule).\n  private _specialRulesWithDefault = Observable.create<SpecialRules|null>(this, null);\n  private _specialRulesSeparate = Observable.create<SpecialRules|null>(this, null);\n\n  // Array of all UserAttribute rules.\n  private _userAttrRules = this.autoDispose(obsArray<ObsUserAttributeRule>());\n\n  // Array of all user-attribute choices created by UserAttribute rules. Used for lookup items in\n  // rules, and for ACLFormula completions.\n  private _userAttrChoices: Computed<IAttrOption[]>;\n\n  // Whether the save button should be enabled.\n  private _savingEnabled: Computed<boolean>;\n\n  // Error or warning message to show next to Save/Reset buttons if non-empty.\n  private _errorMessage = Observable.create(this, '');\n\n  // Details of rule problems, for offering solutions to the user.\n  private _ruleProblems = this.autoDispose(obsArray<AclRuleProblem>());\n\n  // Map of tableId to basic metadata for all tables in the document.\n  private _aclResources = new Map<string, AclTableDescription>();\n\n  private _aclUsersPopup = ACLUsersPopup.create(this, this.gristDoc.docPageModel);\n\n  constructor(public gristDoc: GristDoc) {\n    super();\n    this._ruleStatus = Computed.create(this, (use) => {\n      const defRuleSet = use(this._docDefaultRuleSet);\n      const tableRules = use(this._tableRules);\n      const specialRulesWithDefault = use(this._specialRulesWithDefault);\n      const specialRulesSeparate = use(this._specialRulesSeparate);\n      const userAttr = use(this._userAttrRules);\n      return Math.max(\n        defRuleSet ? use(defRuleSet.ruleStatus) : RuleStatus.Unchanged,\n        // If any tables/userAttrs were changed or added, they will be considered changed. If\n        // there were only removals, then length will be reduced.\n        getChangedStatus(tableRules.length < this._ruleCollection.getAllTableIds().length),\n        getChangedStatus(userAttr.length < this._ruleCollection.getUserAttributeRules().size),\n        ...tableRules.map(tr => use(tr.ruleStatus)),\n        ...userAttr.map(u => use(u.ruleStatus)),\n        specialRulesWithDefault ? use(specialRulesWithDefault.ruleStatus) : RuleStatus.Unchanged,\n        specialRulesSeparate ? use(specialRulesSeparate.ruleStatus) : RuleStatus.Unchanged,\n      );\n    });\n\n    this._savingEnabled = Computed.create(this, this._ruleStatus, (use, s) =>\n      (s === RuleStatus.ChangedValid));\n\n    this._userAttrChoices = Computed.create(this, this._userAttrRules, (use, rules) => {\n      const result: IAttrOption[] = [\n        {ruleIndex: -1, value: 'user.Access'},\n        {ruleIndex: -1, value: 'user.Email'},\n        {ruleIndex: -1, value: 'user.UserID'},\n        {ruleIndex: -1, value: 'user.Name'},\n        {ruleIndex: -1, value: 'user.LinkKey.'},\n        {ruleIndex: -1, value: 'user.Origin'},\n        {ruleIndex: -1, value: 'user.SessionID'},\n        {ruleIndex: -1, value: 'user.IsLoggedIn'},\n        {ruleIndex: -1, value: 'user.UserRef'},\n      ];\n      for (const [i, rule] of rules.entries()) {\n        const tableId = use(rule.tableId);\n        const name = use(rule.name);\n        for (const colId of this.getValidColIds(tableId) || []) {\n          result.push({ruleIndex: i, value: `user.${name}.${colId}`});\n        }\n      }\n      return result;\n    });\n\n    // The UI in this module isn't really dynamic (that would be tricky while allowing unsaved\n    // changes). Instead, react deliberately if rules change. Note that table/column renames would\n    // trigger changes to rules, so we don't need to listen for those separately.\n    for (const tableId of ['_grist_ACLResources', '_grist_ACLRules']) {\n      const tableData = this.gristDoc.docData.getTable(tableId)!;\n      this.autoDispose(tableData.tableActionEmitter.addListener(this._onChange, this));\n    }\n    this.autoDispose(this.gristDoc.docPageModel.currentDoc.addListener(this._updateDocAccessData, this));\n\n    this.update().catch((e) => this._errorMessage.set(e.message));\n  }\n\n  public get allTableIds() { return Array.from(this._aclResources.keys()).sort(); }\n  public get userAttrRules() { return this._userAttrRules; }\n  public get userAttrChoices() { return this._userAttrChoices; }\n\n  public getTableTitle(tableId: string) {\n    const table = this._aclResources.get(tableId);\n    if (!table) { return `#Invalid (${tableId})`; }\n    return getTableTitle(table);\n  }\n\n  /**\n   * Replace internal state from the rules in DocData.\n   */\n  public async update() {\n    if (this.isDisposed()) { return; }\n    this._errorMessage.set('');\n    const rules = this._ruleCollection;\n\n    const [ , , aclResources] = await Promise.all([\n      rules.update(this.gristDoc.docData, {log: console, pullOutSchemaEdit: true}),\n      this._updateDocAccessData(),\n      this.gristDoc.docComm.getAclResources(),\n    ]);\n    this._aclResources = new Map(Object.entries(aclResources.tables));\n    this._ruleProblems.set(aclResources.problems);\n    if (this.isDisposed()) { return; }\n\n    this._tableRules.set(\n      rules.getAllTableIds()\n      .filter(tableId => (tableId !== SPECIAL_RULES_TABLE_ID))\n      .map(tableId => TableRules.create(this._tableRules,\n          tableId, this, rules.getAllColumnRuleSets(tableId), rules.getTableDefaultRuleSet(tableId)))\n    );\n\n    const withDefaultRules = ['SeedRule'];\n    const separateRules = ['SchemaEdit', 'FullCopies', 'AccessRules'];\n\n    SpecialRules.create(\n      this._specialRulesWithDefault, SPECIAL_RULES_TABLE_ID, this,\n      filterRuleSets(withDefaultRules, rules.getAllColumnRuleSets(SPECIAL_RULES_TABLE_ID)),\n      filterRuleSet(withDefaultRules, rules.getTableDefaultRuleSet(SPECIAL_RULES_TABLE_ID)));\n    SpecialRules.create(\n      this._specialRulesSeparate, SPECIAL_RULES_TABLE_ID, this,\n      filterRuleSets(separateRules, rules.getAllColumnRuleSets(SPECIAL_RULES_TABLE_ID)),\n      filterRuleSet(separateRules, rules.getTableDefaultRuleSet(SPECIAL_RULES_TABLE_ID)));\n    DefaultObsRuleSet.create(this._docDefaultRuleSet, this, null, undefined, rules.getDocDefaultRuleSet());\n    this._userAttrRules.set(\n      Array.from(rules.getUserAttributeRules().values(), userAttr =>\n        ObsUserAttributeRule.create(this._userAttrRules, this, userAttr))\n    );\n  }\n\n  /**\n   * Collect the internal state into records and sync them to the document.\n   */\n  public async save(): Promise<void> {\n    if (!this._savingEnabled.get()) { return; }\n\n    // Note that if anything has changed, we apply changes relative to the current state of the\n    // ACL tables (they may have changed by other users). So our changes will win.\n\n    const docData = this.gristDoc.docData;\n    const resourcesTable = docData.getMetaTable('_grist_ACLResources');\n    const rulesTable = docData.getMetaTable('_grist_ACLRules');\n\n    // Add/remove resources to have just the ones we need.\n    const newResources: MetaRowRecord<'_grist_ACLResources'>[] = flatten(\n      [{tableId: '*', colIds: '*'}],\n      this._specialRulesWithDefault.get()?.getResources() || [],\n      this._specialRulesSeparate.get()?.getResources() || [],\n      ...this._tableRules.get().map(tr => tr.getResources())\n    )\n    // Skip the fake \"*SPECIAL:SchemaEdit\" resource (frontend-specific); these rules are saved to the default resource.\n    .filter(resource => !isSchemaEditResource(resource))\n    .map(r => ({id: -1, ...r}));\n\n    // Prepare userActions and a mapping of serializedResource to rowIds.\n    const resourceSync = syncRecords(resourcesTable, newResources, serializeResource);\n\n    const defaultResourceRowId = resourceSync.rowIdMap.get(serializeResource({id: -1, tableId: '*', colIds: '*'}));\n    if (!defaultResourceRowId) {\n      throw new Error('Default resource missing in resource map');\n    }\n\n    // For syncing rules, we'll go by rowId that we store with each RulePart and with the RuleSet.\n    const newRules: RowRecord[] = [];\n    for (const rule of this.getRules()) {\n      // We use id of 0 internally to mark built-in rules. Skip those.\n      if (rule.id === 0) {\n        continue;\n      }\n\n      // Look up the rowId for the resource.\n      let resourceRowId: number|undefined;\n      // Assign the rules for the fake \"*SPECIAL:SchemaEdit\" resource to the default resource where they belong.\n      if (isSchemaEditResource(rule.resourceRec!)) {\n        resourceRowId = defaultResourceRowId;\n      } else {\n        const resourceKey = serializeResource(rule.resourceRec as RowRecord);\n        resourceRowId = resourceSync.rowIdMap.get(resourceKey);\n        if (!resourceRowId) {\n          throw new Error(`Resource missing in resource map: ${resourceKey}`);\n        }\n      }\n      newRules.push({\n        id: rule.id || -1,\n        resource: resourceRowId,\n        aclFormula: rule.aclFormula!,\n        permissionsText: rule.permissionsText!,\n        rulePos: rule.rulePos || null,\n        memo: rule.memo ?? '',\n      });\n    }\n\n    // UserAttribute rules are listed in the same rulesTable.\n    for (const userAttr of this._userAttrRules.get()) {\n      const rule = userAttr.getRule();\n      newRules.push({\n        id: rule.id || -1,\n        resource: defaultResourceRowId,\n        rulePos: rule.rulePos || null,\n        userAttributes: rule.userAttributes,\n      });\n    }\n\n    // We need to fill in rulePos values. We'll add them in the order the rules are listed (since\n    // this.getRules() returns them in a suitable order), keeping rulePos unchanged when possible.\n    let lastGoodRulePos = 0;\n    let lastGoodIndex = -1;\n    for (let i = 0; i < newRules.length; i++) {\n      const pos = newRules[i].rulePos as number;\n      if (pos && pos > lastGoodRulePos) {\n        const step = (pos - lastGoodRulePos) / (i - lastGoodIndex);\n        for (let k = lastGoodIndex + 1; k < i; k++) {\n          newRules[k].rulePos = lastGoodRulePos + step * (k - lastGoodIndex);\n        }\n        lastGoodRulePos = pos;\n        lastGoodIndex = i;\n      }\n    }\n    // Fill in the rulePos values for the remaining rules.\n    for (let k = lastGoodIndex + 1; k < newRules.length; k++) {\n      newRules[k].rulePos = ++lastGoodRulePos;\n    }\n    // Prepare the UserActions for syncing the Rules table.\n    const rulesSync = syncRecords(rulesTable, newRules);\n\n    // Finally collect and apply all the actions together.\n    try {\n      await docData.sendActions([...resourceSync.userActions, ...rulesSync.userActions]);\n    } catch (e) {\n      // Report the error, but go on to update the rules. The user may lose their entries, but\n      // will see what's in the document. To preserve entries and show what's wrong, we try to\n      // catch errors earlier.\n      reportError(e);\n    }\n\n    // Re-populate the state from DocData once the records are synced.\n    await this.update();\n  }\n\n  public buildDom() {\n    return cssOuter(\n      dom('div', this.gristDoc.behavioralPromptsManager.attachTip('accessRules', {\n        hideArrow: true,\n      })),\n      cssAddTableRow(\n        bigBasicButton({disabled: true}, dom.hide(this._savingEnabled),\n          dom.text((use) => {\n            const s = use(this._ruleStatus);\n            return s === RuleStatus.CheckPending ? t(\"Checking...\") :\n              s === RuleStatus.Unchanged ? t(\"Saved\") : t(\"Invalid\");\n          }),\n          testId('rules-non-save')\n        ),\n        bigPrimaryButton(t(\"Save\"), dom.show(this._savingEnabled),\n          dom.on('click', () => this.save()),\n          testId('rules-save'),\n        ),\n        bigBasicButton(t(\"Reset\"), dom.show(use => use(this._ruleStatus) !== RuleStatus.Unchanged),\n          dom.on('click', () => this.update()),\n          testId('rules-revert'),\n        ),\n\n        bigBasicButton(t(\"Add Table Rules\"), cssDropdownIcon('Dropdown'), {style: 'margin-left: auto'},\n          menu(() =>\n            this.allTableIds.map((tableId) =>\n              // Add the table on a timeout, to avoid disabling the clicked menu item\n              // synchronously, which prevents the menu from closing on click.\n              menuItemAsync(() => this._addTableRules(tableId),\n                this.getTableTitle(tableId),\n                dom.cls('disabled', (use) => use(this._tableRules).some(tr => tr.tableId === tableId)),\n              )\n            ),\n          ),\n        ),\n        bigBasicButton(t('Add User Attributes'), dom.on('click', () => this._addUserAttributes())),\n        bigBasicButton(t('View As'), cssDropdownIcon('Dropdown'),\n          elem => this._aclUsersPopup.attachPopup(elem, {placement: 'bottom-end', resetDocPage: true}),\n          dom.style('visibility', use => use(this._aclUsersPopup.isInitialized) ? '' : 'hidden')),\n      ),\n      cssConditionError({style: 'margin-left: 16px'},\n        dom.text(this._errorMessage),\n        testId('access-rules-error')\n      ),\n\n      dom.maybe(use => {\n        const ruleProblems = use(this._ruleProblems);\n        return ruleProblems.length > 0 ? ruleProblems : null;\n      }, ruleProblems =>\n        cssSection(\n          cssRuleProblems(\n            this.buildRuleProblemsDom(ruleProblems)))),\n      shadowScroll(\n        dom.maybe(use => use(this._userAttrRules).length, () =>\n          cssSection(\n            cssSectionHeading(t(\"User Attributes\")),\n            cssTableRounded(\n              cssTableHeaderRow(\n                cssCell1(cssCell.cls('-rborder'), cssCell.cls('-center'), cssColHeaderCell('Name')),\n                cssCell4(\n                  cssColumnGroup(\n                    cssCell1(cssColHeaderCell(t(\"Attribute to Look Up\"))),\n                    cssCell1(cssColHeaderCell(t(\"Lookup Table\"))),\n                    cssCell1(cssColHeaderCell(t(\"Lookup Column\"))),\n                    cssCellIcon(),\n                  ),\n                ),\n              ),\n              dom.forEach(this._userAttrRules, (userAttr) => userAttr.buildUserAttrDom()),\n            ),\n          ),\n        ),\n        dom.forEach(this._tableRules, (tableRules) => tableRules.buildDom()),\n        cssSection(\n          cssSectionHeading(t(\"Default Rules\"), testId('rule-table-header')),\n          dom.maybe(this._specialRulesWithDefault, tableRules => cssSeedRule(\n            tableRules.buildCheckBoxes())),\n          cssTableRounded(\n            cssTableHeaderRow(\n              cssCell1(cssCell.cls('-rborder'), cssCell.cls('-center'), cssColHeaderCell('Columns')),\n              cssCell4(\n                cssColumnGroup(\n                  cssCellIcon(),\n                  cssCell2(cssColHeaderCell(t('Condition'))),\n                  cssCell1(cssColHeaderCell(t('Permissions'))),\n                  cssCellIconWithMargins(),\n                  cssCellIcon(),\n                )\n              )\n            ),\n            dom.maybe(this._docDefaultRuleSet, ruleSet => ruleSet.buildRuleSetDom()),\n          ),\n          testId('rule-table'),\n        ),\n        dom.maybe(this._specialRulesSeparate, tableRules => tableRules.buildDom()),\n      ),\n    );\n  }\n\n  public buildRuleProblemsDom(ruleProblems: AclRuleProblem[]) {\n    const buttons: Array<HTMLAnchorElement | HTMLButtonElement> = [];\n    for (const problem of ruleProblems) {\n      // Is the problem a missing table?\n      if (problem.tables) {\n        this._addButtonsForMissingTables(buttons, problem.tables.tableIds);\n      }\n      // Is the problem a missing column?\n      if (problem.columns) {\n        this._addButtonsForMissingColumns(buttons, problem.columns.tableId, problem.columns.colIds);\n      }\n      // Is the problem a misconfigured user attribute?\n      if (problem.userAttributes) {\n        const names = problem.userAttributes.names;\n        this._addButtonsForMisconfiguredUserAttributes(buttons, names);\n      }\n    }\n    return buttons.map(button => dom('span', button));\n  }\n\n  /**\n   * Get a list of all rule records, for saving.\n   */\n  public getRules(): RuleRec[] {\n    return flatten(\n      ...this._tableRules.get().map(tr => tr.getRules()),\n      this._specialRulesWithDefault.get()?.getRules() || [],\n      this._specialRulesSeparate.get()?.getRules() || [],\n      this._docDefaultRuleSet.get()?.getRules('*') || []\n    );\n  }\n\n  public removeTableRules(tableRules: TableRules) {\n    removeItem(this._tableRules, tableRules);\n  }\n\n  public removeUserAttributes(userAttr: ObsUserAttributeRule) {\n    removeItem(this._userAttrRules, userAttr);\n  }\n\n  public async checkAclFormula(text: string): Promise<FormulaProperties> {\n    if (text) {\n      return this.gristDoc.docComm.checkAclFormula(text);\n    }\n    return {};\n  }\n\n  // Check if the given tableId, and optionally a list of colIds, are present in this document.\n  // Returns '' if valid, or an error string if not. Exempt colIds will not trigger an error.\n  public checkTableColumns(tableId: string, colIds?: string[], exemptColIds?: string[]): string {\n    if (!tableId || tableId === SPECIAL_RULES_TABLE_ID) { return ''; }\n    const tableColIds = this._aclResources.get(tableId)?.colIds;\n    if (!tableColIds) { return `Invalid table: ${tableId}`; }\n    if (colIds) {\n      const validColIds = new Set([...tableColIds, ...exemptColIds || []]);\n      const invalidColIds = colIds.filter(c => !validColIds.has(c));\n      if (invalidColIds.length === 0) { return ''; }\n      return `Invalid columns in table ${tableId}: ${invalidColIds.join(', ')}`;\n    }\n    return '';\n  }\n\n  // Returns a list of valid colIds for the given table, or undefined if the table isn't valid.\n  public getValidColIds(tableId: string): string[]|undefined {\n    return this._aclResources.get(tableId)?.colIds.filter(id => !isHiddenCol(id)).sort();\n  }\n\n  // Get rules to use for seeding any new set of table/column rules, e.g. to give owners\n  // broad rights over the table/column contents.\n  public getSeedRules(): ObsRulePart[] {\n    return this._specialRulesWithDefault.get()?.getCustomRules('SeedRule') || [];\n  }\n\n  private _addTableRules(tableId: string) {\n    if (this._tableRules.get().some(tr => tr.tableId === tableId)) {\n      throw new Error(`Trying to add TableRules for existing table ${tableId}`);\n    }\n    const defRuleSet: RuleSet = {tableId, colIds: '*', body: []};\n    const tableRules = TableRules.create(this._tableRules, tableId, this, undefined, defRuleSet);\n    this._tableRules.push(tableRules);\n    tableRules.addDefaultRules(this.getSeedRules());\n  }\n\n  private _addUserAttributes() {\n    this._userAttrRules.push(ObsUserAttributeRule.create(this._userAttrRules, this, undefined, {focus: true}));\n  }\n\n  private _onChange() {\n    if (this._ruleStatus.get() === RuleStatus.Unchanged) {\n      // If no changes, it's safe to just reload the rules from docData.\n      this.update().catch((e) => this._errorMessage.set(e.message));\n    } else {\n      this._errorMessage.set(\n        'Access rules have changed. Click Reset to revert your changes and refresh the rules.'\n      );\n    }\n  }\n\n  private async _updateDocAccessData() {\n    await this._aclUsersPopup.load();\n  }\n\n  private _addButtonsForMissingTables(buttons: Array<HTMLAnchorElement | HTMLButtonElement>, tableIds: string[]) {\n    for (const tableId of tableIds) {\n      // We don't know what the table's name was, just its tableId.\n      // Hopefully, the user will understand.\n      const title = t('Remove {{- tableId }} rules', { tableId });\n      const button = bigBasicButton(title, cssRemoveIcon('Remove'), dom.on('click', async () => {\n        await Promise.all(this._tableRules.get()\n          .filter(rules => rules.tableId === tableId)\n          .map(rules => rules.remove()));\n        button.style.display = 'none';\n      }));\n      buttons.push(button);\n    }\n  }\n\n  private _addButtonsForMissingColumns(buttons: Array<HTMLAnchorElement | HTMLButtonElement>,\n                                       tableId: string, colIds: string[]) {\n    const removeColRules = (rules: TableRules, colId: string) => {\n      for (const rule of rules.columnRuleSets.get()) {\n        const ruleColIds = new Set(rule.getColIdList());\n        if (!ruleColIds.has(colId)) { continue; }\n        if (ruleColIds.size === 1) {\n          rule.remove();\n        } else {\n          rule.removeColId(colId);\n        }\n      }\n    };\n    for (const colId of colIds) {\n      // TODO: we could translate tableId to table name in this case.\n      const title = t('Remove column {{- colId }} from {{- tableId }} rules', { tableId, colId });\n      const button = bigBasicButton(title, cssRemoveIcon('Remove'), dom.on('click', async () => {\n        await Promise.all(this._tableRules.get()\n          .filter(rules => rules.tableId === tableId)\n          .map(rules => removeColRules(rules, colId)));\n        button.style.display = 'none';\n      }));\n      buttons.push(button);\n    }\n  }\n\n  private _addButtonsForMisconfiguredUserAttributes(\n    buttons: Array<HTMLAnchorElement | HTMLButtonElement>,\n    names: string[]\n  ) {\n    for (const name of names) {\n      const title = t('Remove {{- name }} user attribute', {name});\n      const button = bigBasicButton(title, cssRemoveIcon('Remove'), dom.on('click', async () => {\n        await Promise.all(this._userAttrRules.get()\n          .filter(rule => rule.name.get() === name)\n          .map(rule => rule.remove()));\n        button.style.display = 'none';\n      }));\n      buttons.push(button);\n    }\n  }\n}\n\n// Represents all rules for a table.\nclass TableRules extends Disposable {\n  // Whether any table rules changed, and if they are valid.\n  public ruleStatus: Computed<RuleStatus>;\n\n  // The column-specific rule sets.\n  protected _columnRuleSets = this.autoDispose(obsArray<ColumnObsRuleSet>());\n\n  // Whether there are any column-specific rule sets.\n  private _haveColumnRules = Computed.create(this, this._columnRuleSets, (use, cols) => cols.length > 0);\n\n  // The default rule set (for columns '*'), if one is set.\n  private _defaultRuleSet = Observable.create<DefaultObsRuleSet|null>(this, null);\n\n  constructor(public readonly tableId: string, public _accessRules: AccessRules,\n              private _colRuleSets?: RuleSet[], private _defRuleSet?: RuleSet) {\n    super();\n    this._columnRuleSets.set(this._colRuleSets?.map(rs =>\n      this._createColumnObsRuleSet(this._columnRuleSets, this._accessRules, this, rs,\n        rs.colIds === '*' ? [] : rs.colIds)) || []);\n\n    if (!this._colRuleSets) {\n      // Must be a newly-created TableRules object. Just create a default RuleSet (for tableId:*)\n      DefaultObsRuleSet.create(this._defaultRuleSet, this._accessRules, this, this._haveColumnRules);\n    } else if (this._defRuleSet) {\n      DefaultObsRuleSet.create(this._defaultRuleSet, this._accessRules, this, this._haveColumnRules,\n        this._defRuleSet);\n   }\n\n    this.ruleStatus = Computed.create(this, (use) => {\n      const columnRuleSets = use(this._columnRuleSets);\n      const d = use(this._defaultRuleSet);\n      return Math.max(\n        getChangedStatus(\n          !this._colRuleSets ||                               // This TableRules object must be newly-added\n          Boolean(d) !== Boolean(this._defRuleSet) ||         // Default rule set got added or removed\n          columnRuleSets.length < this._colRuleSets.length    // There was a removal\n        ),\n        d ? use(d.ruleStatus) : RuleStatus.Unchanged,         // Default rule set got changed.\n        ...columnRuleSets.map(rs => use(rs.ruleStatus)));     // Column rule set was added or changed.\n    });\n  }\n\n  /**\n   * Get all custom rules for the specific column. Used to gather the current\n   * setting of a special rule. Returns an empty list for unknown columns.\n   */\n  public getCustomRules(colId: string): ObsRulePart[] {\n    for (const ruleSet of this._columnRuleSets.get()) {\n      if (ruleSet.getColIds() === colId) {\n        return ruleSet.getCustomRules();\n      }\n    }\n    return [];\n  }\n\n  /**\n   * Add the provided rules, copying their formula, permissions, and memo.\n   */\n  public addDefaultRules(rules: ObsRulePart[]) {\n    const ruleSet = this._defaultRuleSet.get();\n    ruleSet?.addRuleParts(rules, {foldEveryoneRule: true});\n  }\n\n  public remove() {\n    this._accessRules.removeTableRules(this);\n  }\n\n  public get columnRuleSets() {\n    return this._columnRuleSets;\n  }\n\n  public buildDom() {\n    return cssSection(\n      cssSectionHeading(\n        dom('span', t(\"Rules for table \"), cssTableName(this._accessRules.getTableTitle(this.tableId))),\n        cssIconButton(icon('Dots'), {style: 'margin-left: auto'},\n          menu(() => [\n            menuItemAsync(() => this._addColumnRuleSet(), t(\"Add Column Rule\")),\n            menuItemAsync(() => this._addDefaultRuleSet(), t(\"Add Default Rule\"),\n              dom.cls('disabled', use => Boolean(use(this._defaultRuleSet)))),\n            menuItemAsync(() => this._accessRules.removeTableRules(this), t(\"Delete Table Rules\")),\n          ]),\n          testId('rule-table-menu-btn'),\n        ),\n        testId('rule-table-header'),\n      ),\n      cssTableRounded(\n        cssTableHeaderRow(\n          cssCell1(cssCell.cls('-rborder'), cssCell.cls('-center'), cssColHeaderCell('Columns')),\n          cssCell4(\n            cssColumnGroup(\n              cssCellIcon(),\n              cssCell2(cssColHeaderCell(t('Condition'))),\n              cssCell1(cssColHeaderCell(t('Permissions'))),\n              cssCellIconWithMargins(),\n              cssCellIcon(),\n            )\n          ),\n        ),\n        this.buildColumnRuleSets(),\n      ),\n      this.buildErrors(),\n      testId('rule-table'),\n    );\n  }\n\n  public buildColumnRuleSets() {\n    return [\n      dom.forEach(this._columnRuleSets, ruleSet => ruleSet.buildRuleSetDom()),\n      dom.maybe(this._defaultRuleSet, ruleSet => ruleSet.buildRuleSetDom()),\n    ];\n  }\n\n  public buildErrors() {\n    return dom.forEach(this._columnRuleSets, c => cssConditionError(dom.text(c.formulaError)));\n  }\n\n  /**\n   * Return the resources (tableId:colIds entities), for saving, checking along the way that they\n   * are valid.\n   */\n  public getResources(): ResourceRec[] {\n    // Check that the colIds are valid.\n    const seen = {\n      allow: new Set<string>(),   // columns mentioned in rules that only have 'allow's.\n      deny: new Set<string>(),    // columns mentioned in rules that only have 'deny's.\n      mixed: new Set<string>()    // columns mentioned in any rules.\n    };\n    for (const ruleSet of this._columnRuleSets.get()) {\n      const sign = ruleSet.summarizePermissions();\n      const counterSign = sign === 'mixed' ? 'mixed' : (sign === 'allow' ? 'deny' : 'allow');\n      const colIds = ruleSet.getColIdList();\n      if (colIds.length === 0) {\n        throw new UserError(`No columns listed in a column rule for table ${this.tableId}`);\n      }\n      for (const colId of colIds) {\n        if (seen[counterSign].has(colId)) {\n          // There may be an order dependency between rules.  We've done a little analysis, to\n          // allow the useful pattern of forbidding all access to columns, and then adding back\n          // access to different sets for different teams/conditions (or allowing all access\n          // by default, and then forbidding different sets).  But if there's a mix of\n          // allows and denies, then we throw up our hands.\n          // TODO: could analyze more deeply.  An easy step would be to analyze per permission bit.\n          // Could also allow order dependency and provide a way to control the order.\n          // TODO: could be worth also flagging multiple rulesets with the same columns as\n          // undesirable.\n          throw new UserError(`Column ${colId} appears in multiple rules for table ${this.tableId}` +\n                              ` that might be order-dependent. Try splitting rules up differently?`);\n        }\n        if (sign === 'mixed') {\n          seen.allow.add(colId);\n          seen.deny.add(colId);\n          seen.mixed.add(colId);\n        } else {\n          seen[sign].add(colId);\n          seen.mixed.add(colId);\n        }\n      }\n    }\n\n    return [\n      ...this._columnRuleSets.get().map(rs => ({tableId: this.tableId, colIds: rs.getColIds()})),\n      {tableId: this.tableId, colIds: '*'},\n    ];\n  }\n\n  /**\n   * Get rules for this table, for saving.\n   */\n  public getRules(): RuleRec[] {\n    return flatten(\n      ...this._columnRuleSets.get().map(rs => rs.getRules(this.tableId)),\n      this._defaultRuleSet.get()?.getRules(this.tableId) || [],\n    );\n  }\n\n  public removeRuleSet(ruleSet: ObsRuleSet) {\n    if (ruleSet === this._defaultRuleSet.get()) {\n      this._defaultRuleSet.set(null);\n    } else {\n      removeItem(this._columnRuleSets, ruleSet);\n    }\n    if (!this._defaultRuleSet.get() && this._columnRuleSets.get().length === 0) {\n      this._accessRules.removeTableRules(this);\n    }\n  }\n\n  protected _createColumnObsRuleSet(\n    owner: IDisposableOwner, accessRules: AccessRules, tableRules: TableRules,\n    ruleSet: RuleSet|undefined, initialColIds: string[],\n  ): ColumnObsRuleSet {\n    return ColumnObsRuleSet.create(owner, accessRules, tableRules, ruleSet, initialColIds);\n  }\n\n  private _addColumnRuleSet() {\n    const ruleSet = ColumnObsRuleSet.create(this._columnRuleSets, this._accessRules, this, undefined, []);\n    this._columnRuleSets.push(ruleSet);\n    ruleSet.addRuleParts(this._accessRules.getSeedRules(), {foldEveryoneRule: true});\n  }\n\n  private _addDefaultRuleSet() {\n    if (!this._defaultRuleSet.get()) {\n      DefaultObsRuleSet.create(this._defaultRuleSet, this._accessRules, this, this._haveColumnRules);\n      this.addDefaultRules(this._accessRules.getSeedRules());\n    }\n  }\n}\n\nclass SpecialRules extends TableRules {\n  public buildDom() {\n    return cssSection(\n      cssSectionHeading(t('Special Rules'), testId('rule-table-header')),\n      this.buildCheckBoxes(),\n      testId('rule-table'),\n    );\n  }\n\n  // Build dom with checkboxes, without a section wrapping it.\n  // Used for folding a special rule into another section.\n  public buildCheckBoxes() {\n    return [\n      this.buildColumnRuleSets(),\n      this.buildErrors(),\n    ];\n  }\n\n  public getResources(): ResourceRec[] {\n    return this._columnRuleSets.get()\n      .filter(rs => !rs.hasOnlyBuiltInRules())\n      .map(rs => ({tableId: this.tableId, colIds: rs.getColIds()}));\n  }\n\n  protected _createColumnObsRuleSet(\n    owner: IDisposableOwner, accessRules: AccessRules, tableRules: TableRules,\n    ruleSet: RuleSet|undefined, initialColIds: string[],\n  ): ColumnObsRuleSet {\n    if (isEqual(ruleSet?.colIds, ['SchemaEdit'])) {\n      // The special rule for \"schemaEdit\" permissions.\n      return SpecialSchemaObsRuleSet.create(owner, accessRules, tableRules, ruleSet, initialColIds);\n    } else {\n      return SpecialObsRuleSet.create(owner, accessRules, tableRules, ruleSet, initialColIds);\n    }\n  }\n}\n\n// Represents one RuleSet, for a combination of columns in one table, or the default RuleSet for\n// all remaining columns in a table.\nabstract class ObsRuleSet extends Disposable {\n  // Whether rules changed, and if they are valid. Never unchanged if this._ruleSet is undefined.\n  public ruleStatus: Computed<RuleStatus>;\n\n  // List of individual rule parts for this entity. The default permissions may be included as the\n  // last rule part, with an empty aclFormula.\n  protected readonly _body = this.autoDispose(obsArray<ObsRulePart>());\n\n  // ruleSet is omitted for a new ObsRuleSet added by the user.\n  constructor(public accessRules: AccessRules, protected _tableRules: TableRules|null, private _ruleSet?: RuleSet) {\n    super();\n    const parts = this._ruleSet?.body.map(part => ObsRulePart.create(this._body, this, part)) || [];\n    if (parts.length === 0) {\n      // If creating a new RuleSet, or if there are no rules,\n      // start with just a default permission part.\n      parts.push(ObsRulePart.create(this._body, this, undefined));\n    }\n    this._body.set(parts);\n\n    this.ruleStatus = Computed.create(this, this._body, (use, body) => {\n      // If anything was changed or added, some part.ruleStatus will be other than Unchanged. If\n      // there were only removals, then body.length will have changed.\n      // Ignore empty rules.\n      return Math.max(\n        getChangedStatus(body.filter(part => !part.isEmpty(use)).length < (this._ruleSet?.body?.length || 0)),\n        ...body.map(part => use(part.ruleStatus)));\n    });\n  }\n\n  public remove() {\n    this._tableRules?.removeRuleSet(this);\n  }\n\n  public getRules(tableId: string): RuleRec[] {\n    // Return every part in the body, tacking on resourceRec to each rule.\n    return this._body.get().map(part => ({\n      ...part.getRulePart(),\n      resourceRec: {tableId, colIds: this.getColIds()}\n    }))\n    // Skip entirely empty rule parts: they are invalid and dropping them is the best fix.\n    .filter(part => part.aclFormula || part.permissionsText);\n  }\n\n  public getColIds(): string {\n    return '*';\n  }\n\n  /**\n   * Check if RuleSet may only add permissions, only remove permissions, or may do either.\n   * A rule that neither adds nor removes permissions is treated as mixed for simplicity,\n   * though this would be suboptimal if this were a useful case to support.\n   */\n  public summarizePermissions(): MixedPermissionValue {\n    return summarizePermissions(this._body.get().map(p => p.summarizePermissions()));\n  }\n\n  public abstract buildResourceDom(): DomElementArg;\n\n  public buildRuleSetDom() {\n    return cssTableRow(\n      cssCell1(cssCell.cls('-rborder'),\n        this.buildResourceDom(),\n        testId('rule-resource')\n      ),\n      cssCell4(cssRuleBody.cls(''),\n        dom.forEach(this._body, part => part.buildRulePartDom()),\n        dom.maybe(use => !this.hasDefaultCondition(use), () =>\n          cssColumnGroup(\n            {style: 'min-height: 28px'},\n            cssCellIcon(\n              cssIconButton(icon('Plus'),\n                dom.on('click', () => this.addRulePart(null)),\n                testId('rule-add'),\n              )\n            ),\n            testId('rule-extra-add'),\n          )\n        ),\n      ),\n      testId('rule-set'),\n    );\n  }\n\n  public removeRulePart(rulePart: ObsRulePart) {\n    removeItem(this._body, rulePart);\n    if (this._body.get().length === 0) {\n      this._tableRules?.removeRuleSet(this);\n    }\n  }\n\n  public addRulePart(beforeRule: ObsRulePart|null,\n                     content?: RulePart,\n                     isNew: boolean = false): ObsRulePart {\n    const body = this._body.get();\n    const i = beforeRule ? body.indexOf(beforeRule) : body.length;\n    const part = ObsRulePart.create(this._body, this, content, isNew);\n    this._body.splice(i, 0, part);\n    return part;\n  }\n\n  /**\n   * Add a sequence of rules, taking priority over existing rules.\n   * optionally, if lowest-priority rule being added applies to\n   * everyone, and the existing rule also applies to everyone,\n   * fold those rules into one.\n   * This method is currently only called on newly created rule\n   * sets, so there's no need to check permissions and memos.\n   */\n  public addRuleParts(newParts: ObsRulePart[], options: {foldEveryoneRule?: boolean}) {\n    // Check if we need to consider folding rules that apply to everyone.\n    if (options.foldEveryoneRule) {\n      const oldParts = this._body.get();\n      const myEveryonePart = (oldParts.length === 1 && !oldParts[0].getRulePart().aclFormula) ? oldParts[0] : null;\n      const newEveryonePart = newParts[newParts.length - 1]?.getRulePart().aclFormula ? null :\n        newParts[newParts.length - 1];\n       if (myEveryonePart && newEveryonePart) {\n         // It suffices to remove the existing rule that applies to everyone,\n         // which is just an empty default from rule set creation.\n         removeItem(this._body, myEveryonePart);\n       }\n    }\n    for (const part of [...newParts].reverse()) {\n      const {permissionsText, aclFormula, memo} = part.getRulePart();\n      if (permissionsText === undefined || aclFormula === undefined) {\n        // Should not happen.\n        continue;\n      }\n      this.addRulePart(\n        this.getFirst() || null,\n        {\n          aclFormula,\n          permissionsText,\n          permissions: parsePermissions(permissionsText),\n          memo,\n        },\n        true,\n      );\n    }\n  }\n\n  /**\n   * Returns the first built-in rule. It's the only one of the built-in rules to get a \"+\" next to\n   * it, since we don't allow inserting new rules in-between built-in rules.\n   */\n  public getFirstBuiltIn(): ObsRulePart|undefined {\n    return this._body.get().find(p => p.isBuiltIn());\n  }\n\n  // Get first rule part, built-in or not.\n  public getFirst(): ObsRulePart|undefined {\n    return this._body.get()[0];\n  }\n\n  /**\n   * When an empty-condition RulePart is the only part of a RuleSet, we can say it applies to\n   * \"Everyone\".\n   */\n  public isSoleCondition(use: UseCB, part: ObsRulePart): boolean {\n    const body = use(this._body);\n    return body.length === 1 && body[0] === part;\n  }\n\n  /**\n   * When an empty-condition RulePart is last in a RuleSet, we say it applies to \"Everyone Else\".\n   */\n  public isLastCondition(use: UseCB, part: ObsRulePart): boolean {\n    const body = use(this._body);\n    return body[body.length - 1] === part;\n  }\n\n  public hasDefaultCondition(use: UseCB): boolean {\n    const body = use(this._body);\n    return body.length > 0 && body[body.length - 1].hasEmptyCondition(use);\n  }\n\n  /**\n   * Which permission bits to allow the user to set.\n   */\n  public getAvailableBits(): PermissionKey[] {\n    return ['read', 'update', 'create', 'delete'];\n  }\n\n  /**\n   * Get valid colIds for the table that this RuleSet is for.\n   */\n  public getValidColIds(): string[] {\n    const tableId = this._tableRules?.tableId;\n    return (tableId && this.accessRules.getValidColIds(tableId)) || [];\n  }\n\n  /**\n   * Check if this rule set is limited to a set of columns.\n   */\n  public hasColumns() {\n    return false;\n  }\n\n  public hasOnlyBuiltInRules() {\n    return this._body.get().every(rule => rule.isBuiltIn());\n  }\n\n  // Get rule parts that are neither built-in nor empty.\n  public getCustomRules(): ObsRulePart[] {\n    return this._body.get().filter(rule => !rule.isBuiltInOrEmpty());\n  }\n}\n\nclass ColumnObsRuleSet extends ObsRuleSet {\n  // Error message for this rule set, or '' if valid.\n  public formulaError: Computed<string>;\n\n  private _colIds = Observable.create<string[]>(this, this._initialColIds);\n\n  constructor(accessRules: AccessRules, tableRules: TableRules, ruleSet: RuleSet|undefined,\n              private _initialColIds: string[]) {\n    super(accessRules, tableRules, ruleSet);\n\n    this.formulaError = Computed.create(this, (use) => {\n      // Exempt existing colIds from checks, by including as a third argument.\n      return accessRules.checkTableColumns(tableRules.tableId, use(this._colIds), this._initialColIds);\n    });\n\n    const baseRuleStatus = this.ruleStatus;\n    this.ruleStatus = Computed.create(this, (use) => {\n      if (use(this.formulaError)) { return RuleStatus.Invalid; }\n      return Math.max(\n        getChangedStatus(!isEqual(use(this._colIds), this._initialColIds)),\n        use(baseRuleStatus));\n    });\n  }\n\n  public buildResourceDom(): DomElementArg {\n    return aclColumnList(this._colIds, this._getValidColIdsList());\n  }\n\n  public getColIdList(): string[] {\n    return this._colIds.get();\n  }\n\n  public removeColId(colId: string) {\n    this._colIds.set(this._colIds.get().filter(c => (c !== colId)));\n  }\n\n  public getColIds(): string {\n    return this._colIds.get().join(\",\");\n  }\n\n  public getAvailableBits(): PermissionKey[] {\n    // Create/Delete bits can't be set on a column-specific rule.\n    return ['read', 'update'];\n  }\n\n  public hasColumns() {\n    return true;\n  }\n\n  private _getValidColIdsList(): string[] {\n    return this.getValidColIds().filter(id => id !== 'id');\n  }\n}\n\nclass DefaultObsRuleSet extends ObsRuleSet {\n  constructor(accessRules: AccessRules, tableRules: TableRules|null,\n              private _haveColumnRules?: Observable<boolean>, ruleSet?: RuleSet) {\n    super(accessRules, tableRules, ruleSet);\n  }\n  public buildResourceDom() {\n    return [\n      cssCenterContent.cls(''),\n      cssDefaultLabel(\n        dom.text(use => this._haveColumnRules && use(this._haveColumnRules) ? 'All Other' : 'All'),\n      )\n    ];\n  }\n}\n\ninterface SpecialRuleBody {\n  permissions: string;\n  formula: string;\n}\n\n/**\n * Properties we need to know about how a special rule should function and\n * be rendered.\n */\ninterface SpecialRuleProperties extends SpecialRuleBody {\n  description: string;\n  name: string;\n  availableBits: PermissionKey[];\n}\n\nconst schemaEditRules: {[key: string]: SpecialRuleBody} = {\n  allowEditors: {\n    permissions: '+S',\n    formula: 'user.Access == EDITOR',\n  },\n  denyEditors: {\n    permissions: '-S',\n    formula: 'user.Access != OWNER',\n  },\n};\n\nconst specialRuleProperties: Record<string, SpecialRuleProperties> = {\n  AccessRules: {\n    name: t('Permission to view Access Rules'),\n    description: t('Allow everyone to view Access Rules.'),\n    availableBits: ['read'],\n    permissions: '+R',\n    formula: 'True',\n  },\n  FullCopies: {\n    name: t('Permission to access the document in full when needed'),\n    description: t(`Allow everyone to copy the entire document, or view it in full in fiddle mode.\nUseful for examples and templates, but not for sensitive data.`),\n    availableBits: ['read'],\n    permissions: '+R',\n    formula: 'True',\n  },\n  SeedRule: {\n    name: t('Seed rules'),\n    description: t('When adding table rules, automatically add a rule to grant OWNER full access.'),\n    availableBits: ['read', 'create', 'update', 'delete'],\n    permissions: '+CRUD',\n    formula: 'user.Access in [OWNER]',\n  },\n  SchemaEdit: {\n    name: t(\"Permission to edit document structure\"),\n    description: t(\"Allow editors to edit structure (e.g. modify and delete tables, columns, \\\nlayouts), and to write formulas, which give access to all data regardless of read restrictions.\"),\n    availableBits: ['schemaEdit'],\n    ...schemaEditRules.denyEditors,\n  },\n};\n\nfunction getSpecialRuleProperties(name: string): SpecialRuleProperties {\n  return specialRuleProperties[name] || {\n    ...specialRuleProperties.AccessRules,\n    name,\n    description: name,\n  };\n}\n\nclass SpecialObsRuleSet extends ColumnObsRuleSet {\n  private _isExpanded = Observable.create<boolean>(this, false);\n\n  public get props() {\n    return getSpecialRuleProperties(this.getColIds());\n  }\n\n  public buildRuleSetDom() {\n    const isNonStandard = this._createIsNonStandardObs();\n    const isChecked = this._createIsCheckedObs(isNonStandard);\n    if (isNonStandard.get()) {\n      this._isExpanded.set(true);\n    }\n\n    return dom('div',\n      dom.autoDispose(isChecked),\n      dom.autoDispose(isNonStandard),\n      cssRuleDescription(\n        cssIconButton(icon('Expand'),\n          dom.style('transform', (use) => use(this._isExpanded) ? 'rotate(90deg)' : ''),\n          dom.on('click', () => this._isExpanded.set(!this._isExpanded.get())),\n          testId('rule-special-expand'),\n          {style: 'margin: -4px'},  // subtract padding to align better.\n        ),\n        cssCheckbox(isChecked,\n          dom.prop('disabled', isNonStandard),\n          testId('rule-special-checkbox'),\n        ),\n        this.props.description,\n      ),\n      this._buildDomWarning(),\n      dom.maybe(this._isExpanded, () =>\n        cssTableRounded(\n          {style: 'margin-left: 56px'},\n          cssTableHeaderRow(\n            cssCellIcon(),\n            cssCell4(cssColHeaderCell(this.props.name)),\n            cssCell1(cssColHeaderCell('Permissions')),\n            cssCellIconWithMargins(),\n            cssCellIcon(),\n          ),\n          cssTableRow(\n            cssRuleBody.cls(''),\n            dom.forEach(this._body, part => part.buildRulePartDom(true)),\n            dom.maybe(use => !this.hasDefaultCondition(use), () =>\n              cssColumnGroup(\n                {style: 'min-height: 28px'},\n                cssCellIcon(\n                  cssIconButton(\n                    icon('Plus'),\n                    dom.on('click', () => this.addRulePart(null)),\n                    testId('rule-add'),\n                  )\n                ),\n                testId('rule-extra-add'),\n              )\n            ),\n          ),\n          testId('rule-set'),\n        )\n      ),\n      testId('rule-special'),\n      testId(`rule-special-${this.getColIds()}`),   // Make accessible in tests as, e.g. rule-special-FullCopies\n    );\n  }\n\n  public getAvailableBits(): PermissionKey[] {\n    return this.props.availableBits;\n  }\n\n  public removeRulePart(rulePart: ObsRulePart) {\n    removeItem(this._body, rulePart);\n    if (this._body.get().length === 0) {\n      this._isExpanded.set(false);\n      this._allowEveryone(false);\n    }\n  }\n\n  protected _buildDomWarning(): DomContents {\n    return null;\n  }\n\n  // Observable for whether this ruleSet is \"standard\", i.e. checked or unchecked state, without\n  // any strange rules that need to be shown expanded with the checkbox greyed out.\n  protected _createIsNonStandardObs(): Observable<boolean> {\n    return Computed.create(null, this._body, (use, body) =>\n      !body.every(rule => rule.isBuiltInOrEmpty(use) || rule.matches(use, this.props.formula, this.props.permissions)));\n  }\n\n  // Observable for whether the checkbox should be shown as checked. Writing to it will update\n  // rules so as to toggle the checkbox.\n  protected _createIsCheckedObs(isNonStandard: Observable<boolean>): Observable<boolean> {\n    return Computed.create(null, this._body,\n      (use, body) => !use(isNonStandard) && !body.every(rule => rule.isBuiltInOrEmpty(use)))\n      .onWrite(val => this._allowEveryone(val));\n  }\n\n  private _allowEveryone(value: boolean) {\n    const builtInRules = this._body.get().filter(r => r.isBuiltIn());\n    if (value) {\n      const rulePart = makeRulePart(this.props);\n      this._body.set([ObsRulePart.create(this._body, this, rulePart, true), ...builtInRules]);\n    } else {\n      this._body.set(builtInRules);\n      if (builtInRules.length === 0) {\n        this._body.push(ObsRulePart.create(this._body, this, undefined));\n      }\n    }\n  }\n}\n\nfunction makeRulePart({permissions, formula}: SpecialRuleBody): RulePart {\n  const rulePart: RulePart = {\n    aclFormula: formula,\n    permissionsText: permissions,\n    permissions: parsePermissions(permissions),\n  };\n  return rulePart;\n}\n\n/**\n * SchemaEdit permissions are moved out to a special fake resource \"*SPECIAL:SchemaEdit\" in the\n * frontend, to be presented under their own checkbox option. Its behaviors are a bit different\n * from other checkbox options; the differences are in the overridden methods here.\n */\nclass SpecialSchemaObsRuleSet extends SpecialObsRuleSet {\n  protected _buildDomWarning(): DomContents {\n    return dom.maybe(\n      (use) => use(this._body).every(rule => rule.isBuiltInOrEmpty(use)),\n      () => cssConditionError({style: 'margin-left: 56px; margin-bottom: 8px;'},\n        t(\"This default should be changed if editors' access is to be limited. \"),\n        dom('a', {style: 'color: inherit; text-decoration: underline'},\n          'Dismiss', dom.on('click', () => this._allowEditors('confirm'))),\n        testId('rule-schema-edit-warning'),\n      )\n    );\n  }\n\n  // SchemaEdit rules support an extra \"standard\" state, where a no-op rule exists (explicit rule\n  // allowing EDITORs SchemaEdit permission), in which case we don't show a warning.\n  protected _createIsNonStandardObs(): Observable<boolean> {\n    return Computed.create(null, this._body, (use, body) =>\n      !body.every(rule => rule.isBuiltInOrEmpty(use) || rule.matches(use, this.props.formula, this.props.permissions)\n        || rule.matches(use, schemaEditRules.allowEditors.formula, schemaEditRules.allowEditors.permissions)));\n  }\n\n  protected _createIsCheckedObs(isNonStandard: Observable<boolean>): Observable<boolean> {\n    return Computed.create(null, this._body,\n      (use, body) => body.every(rule => rule.isBuiltInOrEmpty(use)\n        || rule.matches(use, schemaEditRules.allowEditors.formula, schemaEditRules.allowEditors.permissions)))\n      .onWrite(val => this._allowEditors(val));\n  }\n\n  // The third \"confirm\" option is used by the \"Dismiss\" link in the warning.\n  private _allowEditors(value: boolean|'confirm') {\n    const builtInRules = this._body.get().filter(r => r.isBuiltIn());\n    if (value === 'confirm') {\n      const rulePart = makeRulePart(schemaEditRules.allowEditors);\n      this._body.set([ObsRulePart.create(this._body, this, rulePart, true), ...builtInRules]);\n    } else if (!value) {\n      const rulePart = makeRulePart(schemaEditRules.denyEditors);\n      this._body.set([ObsRulePart.create(this._body, this, rulePart, true), ...builtInRules]);\n    } else {\n      this._body.set(builtInRules);\n    }\n  }\n}\n\nclass ObsUserAttributeRule extends Disposable {\n  public ruleStatus: Computed<RuleStatus>;\n\n  // If the rule failed validation, the error message to show. Blank if valid.\n  public formulaError: Computed<string>;\n\n  private _name = Observable.create<string>(this, this._userAttr?.name || '');\n  private _tableId = Observable.create<string>(this, this._userAttr?.tableId || '');\n  private _lookupColId = Observable.create<string>(this, this._userAttr?.lookupColId || '');\n  private _charId = Observable.create<string>(this, 'user.' + (this._userAttr?.charId || ''));\n  private _validColIds = Computed.create(this, this._tableId, (use, tableId) =>\n    this._accessRules.getValidColIds(tableId) || []);\n\n  private _userAttrChoices: Computed<IAttrOption[]>;\n  private _userAttrError = Observable.create(this, '');\n\n  constructor(private _accessRules: AccessRules, private _userAttr?: UserAttributeRule,\n              private _options: {focus?: boolean} = {}) {\n    super();\n    this.formulaError = Computed.create(\n      this, this._tableId, this._lookupColId, this._userAttrError,\n      (use, tableId, colId, userAttrError) => {\n        if (userAttrError.length) {\n          return userAttrError;\n        }\n\n        // Don't check for errors if it's an existing rule and hasn't changed.\n        if (use(this._tableId) === this._userAttr?.tableId &&\n            use(this._lookupColId) === this._userAttr?.lookupColId) {\n          return '';\n        }\n        return _accessRules.checkTableColumns(tableId, colId ? [colId] : undefined);\n      });\n    this.ruleStatus = Computed.create(this, use => {\n      if (use(this.formulaError)) { return RuleStatus.Invalid; }\n      return getChangedStatus(\n        use(this._name) !== this._userAttr?.name ||\n        use(this._tableId) !== this._userAttr?.tableId ||\n        use(this._lookupColId) !== this._userAttr?.lookupColId ||\n        use(this._charId) !== 'user.' + this._userAttr?.charId\n      );\n    });\n\n    // Reset lookupColId when tableId changes, since a colId from a different table would usually be wrong\n    this.autoDispose(this._tableId.addListener(() => this._lookupColId.set('')));\n\n    this._userAttrChoices = Computed.create(this, _accessRules.userAttrRules, (use, rules) => {\n      // Filter for only those choices created by previous rules.\n      const index = rules.indexOf(this);\n      return use(this._accessRules.userAttrChoices).filter(c => (c.ruleIndex < index));\n    });\n  }\n\n  public remove() {\n    this._accessRules.removeUserAttributes(this);\n  }\n\n  public get name() { return this._name; }\n  public get tableId() { return this._tableId; }\n\n  public buildUserAttrDom() {\n    return cssTableRow(\n      cssCell1(cssCell.cls('-rborder'),\n        cssCellContent(\n          cssInput(this._name, async (val) => this._name.set(val),\n            {placeholder: t(\"Attribute name\")},\n            (this._options.focus ? (elem) => { setTimeout(() => elem.focus(), 0); } : null),\n            testId('rule-userattr-name'),\n          ),\n        ),\n      ),\n      cssCell4(cssRuleBody.cls(''),\n        cssColumnGroup(\n          cssCell1(\n            aclFormulaEditor({\n              gristTheme: this._accessRules.gristDoc.currentTheme,\n              initialValue: this._charId.get(),\n              readOnly: false,\n              setValue: (text) => this._setUserAttr(text),\n              placeholder: '',\n              getSuggestions: () => this._userAttrChoices.get().map(choice => choice.value),\n              customiseEditor: (editor => {\n                editor.on('focus', () => {\n                  if (editor.getValue() == 'user.') {\n                    // TODO this weirdly only works on the first click\n                    (editor as any).completer?.showPopup(editor);\n                  }\n                });\n              })\n            }),\n            testId('rule-userattr-attr'),\n          ),\n          cssCell1(\n            aclSelect(\n              this._tableId,\n              this._accessRules.allTableIds.map(tableId => ({\n                value: tableId,\n                label: this._accessRules.getTableTitle(tableId),\n              })),\n              {defaultLabel: '[Select Table]'},\n            ),\n            testId('rule-userattr-table'),\n          ),\n          cssCell1(\n            aclSelect(this._lookupColId, this._validColIds,\n              {defaultLabel: '[Select Column]'}),\n            testId('rule-userattr-col'),\n          ),\n          cssCellIcon(\n            cssIconButton(icon('Remove'),\n              dom.on('click', () => this._accessRules.removeUserAttributes(this)))\n          ),\n          dom.maybe(this.formulaError, (msg) => cssConditionError(msg, testId('rule-error'))),\n        ),\n      ),\n      testId('rule-userattr'),\n    );\n  }\n\n  public getRule() {\n    const fullCharId = this._charId.get().trim();\n    const strippedCharId = fullCharId.startsWith('user.') ?\n      fullCharId.substring('user.'.length) : fullCharId;\n    const spec = {\n      name: this._name.get(),\n      tableId: this._tableId.get(),\n      lookupColId: this._lookupColId.get(),\n      charId: strippedCharId,\n    };\n    for (const [prop, value] of Object.entries(spec)) {\n      if (!value) {\n        throw new UserError(`Invalid user attribute rule: ${prop} must be set`);\n      }\n    }\n    if (this._getUserAttrError(fullCharId)) {\n      throw new UserError(`Invalid user attribute to look up`);\n    }\n    return {\n      id: this._userAttr?.origRecord?.id,\n      rulePos: this._userAttr?.origRecord?.rulePos as number|undefined,\n      userAttributes: JSON.stringify(spec),\n    };\n  }\n\n  private _setUserAttr(text: string) {\n    if (text === this._charId.get()) {\n      return;\n    }\n    this._charId.set(text);\n    this._userAttrError.set(this._getUserAttrError(text) || '');\n  }\n\n  private _getUserAttrError(text: string): string | null {\n    text = text.trim();\n    if (text.startsWith('user.LinkKey')) {\n      if (/user\\.LinkKey\\.\\w+$/.test(text)) {\n        return null;\n      }\n      return 'Use a simple attribute of user.LinkKey, e.g. user.LinkKey.something';\n    }\n\n    const isChoice = this._userAttrChoices.get().map(choice => choice.value).includes(text);\n    if (!isChoice) {\n      return 'Not a valid user attribute';\n    }\n    return null;\n  }\n}\n\n// Represents one line of a RuleSet, a combination of an aclFormula and permissions to apply to\n// requests that match it.\nclass ObsRulePart extends Disposable {\n  // Whether the rule part, and if it's valid or being checked.\n  public ruleStatus: Computed<RuleStatus>;\n\n  // Formula to show in the formula editor.\n  private _aclFormula = Observable.create<string>(this, this._rulePart?.aclFormula || \"\");\n\n  // Rule-specific completions for editing the formula, e.g. \"user.Email\" or \"rec.City\".\n  private _completions = Computed.create<string[]>(this, (use) => [\n    ...use(this._ruleSet.accessRules.userAttrChoices).map(opt => opt.value),\n    ...this._ruleSet.getValidColIds().map(colId => `rec.${colId}`),\n    ...this._ruleSet.getValidColIds().map(colId => `$${colId}`),\n    ...this._ruleSet.getValidColIds().map(colId => `newRec.${colId}`),\n  ]);\n\n  // The permission bits.\n  private _permissions = Observable.create<PartialPermissionSet>(\n    this, this._rulePart?.permissions || emptyPermissionSet());\n\n  // The memo text. Updated whenever changes are made within `_memoEditor`.\n  private _memo: Observable<string>;\n\n  // Reference to the memo editor element, for triggering focus. Shown when\n  // `_showMemoEditor` is true.\n  private _memoEditor: HTMLInputElement | undefined;\n\n  // Is the memo editor visible? Initialized to true if a saved memo exists for this rule.\n  private _showMemoEditor: Observable<boolean>;\n\n  // Whether the rule is being checked after a change. Saving will wait for such checks to finish.\n  private _checkPending = Observable.create(this, false);\n\n  // If the formula failed validation, the error message to show. Blank if valid.\n  private _formulaError = Observable.create(this, '');\n\n  private _formulaProperties = Observable.create<FormulaProperties>(this, getAclFormulaProperties(this._rulePart));\n\n  // Error message if any validation failed.\n  private _error: Computed<string>;\n\n  constructor(private _ruleSet: ObsRuleSet, private _rulePart?: RulePart, isNew = false) {\n    super();\n    this._memo = Observable.create(this, _rulePart?.memo ?? '');\n\n    if (_rulePart && isNew) {\n      // rulePart is omitted for a new ObsRulePart added by the user. If given, isNew may be set to\n      // treat the rule as new and only use the rulePart for its initialization.\n      this._rulePart = undefined;\n    }\n\n    // If this rule has a blank memo, don't show the editor.\n    this._showMemoEditor = Observable.create(this, !this.isBuiltIn() && this._memo.get() !== '');\n\n    this._error = Computed.create(this, (use) => {\n      return use(this._formulaError) ||\n        this._warnInvalidColIds(use(this._formulaProperties).usedColIds) ||\n        ( !this._ruleSet.isLastCondition(use, this) &&\n          use(this._aclFormula) === '' &&\n          permissionSetToText(use(this._permissions)) !== '' ?\n          'Condition cannot be blank' : ''\n        );\n    });\n\n    const emptyPerms = emptyPermissionSet();\n    this.ruleStatus = Computed.create(this, (use) => {\n      if (use(this._error)) { return RuleStatus.Invalid; }\n      if (use(this._checkPending)) { return RuleStatus.CheckPending; }\n      return getChangedStatus(\n        use(this._aclFormula) !== (this._rulePart?.aclFormula ?? '') ||\n        use(this._memo) !== (this._rulePart?.memo ?? '') ||\n        !isEqual(use(this._permissions), this._rulePart?.permissions ?? emptyPerms)\n      );\n    });\n  }\n\n  public getRulePart(): RuleRec {\n    // Use id of 0 to distinguish built-in rules from newly added rule, which will have id of undefined.\n    const id = this.isBuiltIn() ? 0 : this._rulePart?.origRecord?.id;\n    return {\n      id,\n      aclFormula: this._aclFormula.get(),\n      permissionsText: permissionSetToText(this._permissions.get()),\n      rulePos: this._rulePart?.origRecord?.rulePos as number|undefined,\n      memo: this._memo.get(),\n    };\n  }\n\n  public hasEmptyCondition(use: UseCB): boolean {\n    return use(this._aclFormula) === '';\n  }\n\n  public matches(use: UseCB, aclFormula: string, permissionsText: string): boolean {\n    return (use(this._aclFormula) === aclFormula &&\n            permissionSetToText(use(this._permissions)) === permissionsText);\n  }\n\n  /**\n   * Check if RulePart may only add permissions, only remove permissions, or may do either.\n   * A rule that neither adds nor removes permissions is treated as mixed for simplicity,\n   * though this would be suboptimal if this were a useful case to support.\n   */\n  public summarizePermissions(): MixedPermissionValue {\n    return summarizePermissionSet(this._permissions.get());\n  }\n\n  /**\n   * Verify that the rule is in a good state, optionally given a proposed permission change.\n   */\n  public sanityCheck(pset?: PartialPermissionSet) {\n    // Nothing to do!  We now support all expressible rule permutations.\n  }\n\n  public buildRulePartDom(wide: boolean = false) {\n    return cssRulePartAndMemo(\n      cssColumnGroup(\n        cssCellIcon(\n          (this._isNonFirstBuiltIn() ?\n            null :\n            cssIconButton(icon('Plus'),\n              dom.on('click', () => this._ruleSet.addRulePart(this)),\n              testId('rule-add'),\n            )\n          ),\n        ),\n        cssCell2(\n          wide ? cssCell4.cls('') : null,\n          aclFormulaEditor({\n            gristTheme: this._ruleSet.accessRules.gristDoc.currentTheme,\n            initialValue: this._aclFormula.get(),\n            readOnly: this.isBuiltIn(),\n            setValue: (value) => this._setAclFormula(value),\n            placeholder: dom.text((use) => {\n              return (\n                this._ruleSet.isSoleCondition(use, this) ? t('Everyone') :\n                this._ruleSet.isLastCondition(use, this) ? t('Everyone Else') :\n                t('Enter Condition')\n              );\n            }),\n            getSuggestions: (prefix) => this._completions.get(),\n          }),\n          testId('rule-acl-formula'),\n        ),\n        cssCell1(cssCell.cls('-stretch'),\n          permissionsWidget(this._ruleSet.getAvailableBits(), this._permissions,\n            {disabled: this.isBuiltIn(), sanityCheck: (pset) => this.sanityCheck(pset)},\n            testId('rule-permissions')\n          ),\n        ),\n        cssCellIconWithMargins(\n          dom.maybe(use => !this.isBuiltIn() && !use(this._showMemoEditor), () =>\n            cssIconButton(icon('Memo'),\n              dom.on('click', () => {\n                this._showMemoEditor.set(true);\n                // Note that focus is set when the memo icon is clicked, and not when\n                // the editor is attached to the DOM; because rules with non-blank\n                // memos have their editors visible by default when the page is first\n                // loaded, focusing on creation could cause unintended focusing.\n                setTimeout(() => this._memoEditor?.focus(), 0);\n              }),\n              testId('rule-memo-add'),\n            )\n          ),\n        ),\n        cssCellIcon(\n          (this.isBuiltIn() ?\n            null :\n            cssIconButton(icon('Remove'),\n              dom.on('click', () => this._ruleSet.removeRulePart(this)),\n              testId('rule-remove'),\n            )\n          ),\n        ),\n        dom.maybe(this._error, (msg) => cssConditionError(msg, testId('rule-error'))),\n        testId('rule-part'),\n      ),\n      dom.maybe(this._showMemoEditor, () =>\n        cssMemoColumnGroup(\n          cssCellIcon(),\n          cssMemoIcon('Memo'),\n          cssCell2(\n            wide ? cssCell4.cls('') : null,\n            this._memoEditor = aclMemoEditor(this._memo,\n              {\n                placeholder: t(\"Type a message...\"),\n              },\n              dom.onKeyDown({\n                // Match the behavior of the formula editor.\n                Enter: (_ev, el) => el.blur(),\n              }),\n            ),\n            testId('rule-memo-editor'),\n          ),\n          cssCellIconWithMargins(),\n          cssCellIcon(\n            cssIconButton(icon('Remove'),\n              dom.on('click', () => {\n                this._showMemoEditor.set(false);\n                this._memo.set('');\n              }),\n              testId('rule-memo-remove'),\n            ),\n          ),\n          testId('rule-memo'),\n        ),\n      ),\n      testId('rule-part-and-memo'),\n    );\n  }\n\n  public isBuiltIn(): boolean {\n    return this._rulePart ? !this._rulePart.origRecord?.id : false;\n  }\n\n  // return true if formula, permissions, and memo are all empty.\n  public isEmpty(use: UseCB = unwrap): boolean {\n    return use(this._aclFormula) === '' &&\n      isEqual(use(this._permissions), emptyPermissionSet()) &&\n      use(this._memo) === '';\n  }\n\n  public isBuiltInOrEmpty(use: UseCB = unwrap): boolean {\n    return this.isBuiltIn() || this.isEmpty(use);\n  }\n\n  private _isNonFirstBuiltIn(): boolean {\n    return this.isBuiltIn() && this._ruleSet.getFirstBuiltIn() !== this;\n  }\n\n  private async _setAclFormula(text: string) {\n    if (text === this._aclFormula.get()) { return; }\n    this._aclFormula.set(text);\n    this._checkPending.set(true);\n    this._formulaProperties.set({});\n    this._formulaError.set('');\n    try {\n      this._formulaProperties.set(await this._ruleSet.accessRules.checkAclFormula(text));\n      this.sanityCheck();\n    } catch (e) {\n      this._formulaError.set(e.message);\n    } finally {\n      this._checkPending.set(false);\n    }\n  }\n\n  private _warnInvalidColIds(colIds?: string[]) {\n    if (!colIds || !colIds.length) { return false; }\n    const allValid = new Set(this._ruleSet.getValidColIds());\n    const invalid = colIds.filter(c => !allValid.has(c));\n    if (invalid.length > 0) {\n      return `Invalid columns: ${invalid.join(', ')}`;\n    }\n  }\n}\n\n/**\n * Produce UserActions to create/update/remove records, to replace data in tableData\n * with newRecords. Records are matched on uniqueId(record), which defaults to returning\n * String(record.id). UniqueIds of new records don't need to be unique as long as they don't\n * overlap with uniqueIds of existing records.\n *\n * Return also a rowIdMap, mapping uniqueId(record) to a rowId used in the actions. The rowIds may\n * include negative values (auto-generated when newRecords doesn't include one). These may be used\n * in Reference values within the same action bundle.\n *\n * TODO This is a general-purpose function, and should live in a separate module.\n */\nfunction syncRecords(tableData: TableData, newRecords: RowRecord[],\n                     uniqueId: (r: RowRecord) => string = (r => String(r.id))\n): {userActions: UserAction[], rowIdMap: Map<string, number>} {\n  const oldRecords = tableData.getRecords();\n  const rowIdMap = new Map<string, number>(oldRecords.map(r => [uniqueId(r), r.id]));\n  const newRecordMap = new Map<string, RowRecord>(newRecords.map(r => [uniqueId(r), r]));\n\n  const removedRecords: RowRecord[] = oldRecords.filter(r => !newRecordMap.has(uniqueId(r)));\n\n  // Generate a unique negative rowId for each added record.\n  const addedRecords: RowRecord[] = newRecords.filter(r => !rowIdMap.has(uniqueId(r)))\n    .map((r, index) => ({...r, id: -(index + 1)}));\n\n  // Array of [before, after] pairs for changed records.\n  const updatedRecords: Array<[RowRecord, RowRecord]> = oldRecords.map((r): ([RowRecord, RowRecord]|null) => {\n    const newRec = newRecordMap.get(uniqueId(r));\n    const updated = newRec && {...r, ...newRec, id: r.id};\n    return updated && !isEqual(updated, r) ? [r, updated] : null;\n  }).filter(isNonNullish);\n\n  console.log(\"syncRecords: removing [%s], adding [%s], updating [%s]\",\n    removedRecords.map(uniqueId).join(\", \"),\n    addedRecords.map(uniqueId).join(\", \"),\n    updatedRecords.map(([r]) => uniqueId(r)).join(\", \"));\n\n  const tableId = tableData.tableId;\n  const userActions: UserAction[] = [];\n  if (removedRecords.length > 0) {\n    userActions.push(['BulkRemoveRecord', tableId, removedRecords.map(r => r.id)]);\n  }\n  if (updatedRecords.length > 0) {\n    userActions.push(['BulkUpdateRecord', tableId, updatedRecords.map(([r]) => r.id), getColChanges(updatedRecords)]);\n  }\n  if (addedRecords.length > 0) {\n    userActions.push(['BulkAddRecord', tableId, addedRecords.map(r => r.id), getColValues(addedRecords)]);\n  }\n\n  // Include generated rowIds for added records into the returned map.\n  addedRecords.forEach(r => rowIdMap.set(uniqueId(r), r.id));\n  return {userActions, rowIdMap};\n}\n\n/**\n * Convert a list of [before, after] rows into an object of changes, skipping columns which\n * haven't changed.\n */\nfunction getColChanges(pairs: Array<[RowRecord, RowRecord]>): BulkColValues {\n  const colIdSet = new Set<string>();\n  for (const [before, after] of pairs) {\n    for (const c of Object.keys(after)) {\n      if (c !== 'id' && !isEqual(before[c], after[c])) {\n        colIdSet.add(c);\n      }\n    }\n  }\n  const result: BulkColValues = {};\n  for (const colId of colIdSet) {\n    result[colId] = pairs.map(([before, after]) => after[colId]);\n  }\n  return result;\n}\n\nfunction serializeResource(rec: RowRecord): string {\n  return JSON.stringify([rec.tableId, rec.colIds]);\n}\n\nfunction flatten<T>(...args: T[][]): T[] {\n  return ([] as T[]).concat(...args);\n}\n\nfunction removeItem<T>(observableArray: MutableObsArray<T>, item: T): boolean {\n  const i = observableArray.get().indexOf(item);\n  if (i >= 0) {\n    observableArray.splice(i, 1);\n    return true;\n  }\n  return false;\n}\n\nfunction getChangedStatus(value: boolean): RuleStatus {\n  return value ? RuleStatus.ChangedValid : RuleStatus.Unchanged;\n}\n\nfunction getAclFormulaProperties(part?: RulePart): FormulaProperties {\n  const aclFormulaParsed = part?.origRecord?.aclFormulaParsed;\n  return aclFormulaParsed ? getFormulaProperties(JSON.parse(String(aclFormulaParsed))) : {};\n}\n\n// Return a rule set if it applies to one of the specified columns.\nfunction filterRuleSet(colIds: string[], ruleSet?: RuleSet): RuleSet|undefined {\n  if (!ruleSet) { return undefined; }\n  if (ruleSet.colIds === '*') { return ruleSet; }\n  for (const colId of ruleSet.colIds) {\n    if (colIds.includes(colId)) { return ruleSet; }\n  }\n  return undefined;\n}\n\n// Filter an array of rule sets for just those that apply to one of the specified\n// columns.\nfunction filterRuleSets(colIds: string[], ruleSets: RuleSet[]): RuleSet[] {\n  return ruleSets.map(ruleSet => filterRuleSet(colIds, ruleSet)).filter(rs => rs) as RuleSet[];\n}\n\nconst cssOuter = styled('div', `\n  flex: auto;\n  height: 100%;\n  width: 100%;\n  max-width: 800px;\n  margin: 0 auto;\n  display: flex;\n  flex-direction: column;\n`);\n\nconst cssAddTableRow = styled('div', `\n  flex: none;\n  margin: 16px 16px 8px 16px;\n  display: flex;\n  gap: 16px;\n`);\n\nconst cssDropdownIcon = styled(icon, `\n  margin: -2px -2px 0 4px;\n`);\n\nconst cssRemoveIcon = styled(icon, `\n  margin: -2px -2px 0 4px;\n`);\n\nconst cssSection = styled('div', `\n  margin: 16px 16px 24px 16px;\n`);\n\nconst cssSectionHeading = styled('div', `\n  display: flex;\n  align-items: center;\n  margin-bottom: 8px;\n  font-weight: bold;\n  color: ${theme.lightText};\n`);\n\nconst cssTableName = styled('span', `\n  color: ${theme.text};\n`);\n\nconst cssInput = styled(textInput, `\n  color: ${theme.inputFg};\n  background-color: ${theme.inputBg};\n  width: 100%;\n  border: 1px solid transparent;\n  cursor: pointer;\n\n  &:hover {\n    border: 1px solid ${theme.inputBorder};\n  }\n  &:focus {\n    box-shadow: inset 0 0 0 1px ${theme.controlFg};\n    border-color: ${theme.controlFg};\n    cursor: unset;\n  }\n  &[disabled] {\n    color: ${theme.inputDisabledFg};\n    background-color: ${theme.inputDisabledBg};\n    box-shadow: unset;\n    border-color: transparent;\n  }\n  &::placeholder {\n    color: ${theme.inputPlaceholderFg};\n  }\n`);\n\nconst cssConditionError = styled('div', `\n  margin-top: 4px;\n  width: 100%;\n  color: ${theme.errorText};\n`);\n\n/**\n * Fairly general table styles.\n */\nconst cssTableRounded = styled('div', `\n  border: 1px solid ${theme.accessRulesTableBorder};\n  border-radius: 8px;\n  overflow: hidden;\n`);\n\n// Row with a border\nconst cssTableRow = styled('div', `\n  display: flex;\n  border-bottom: 1px solid ${theme.accessRulesTableBorder};\n  &:last-child {\n    border-bottom: none;\n  }\n`);\n\n// Darker table header\nconst cssTableHeaderRow = styled(cssTableRow, `\n  background-color: ${theme.accessRulesTableHeaderBg};\n  color: ${theme.accessRulesTableHeaderFg};\n`);\n\n// Cell for table column header.\nconst cssColHeaderCell = styled('div', `\n  margin: 4px 8px;\n  text-transform: uppercase;\n  font-weight: 500;\n  font-size: 10px;\n`);\n\n// General table cell.\nconst cssCell = styled('div', `\n  min-width: 0px;\n  overflow: hidden;\n\n  &-rborder {\n    border-right: 1px solid ${theme.accessRulesTableBorder};\n  }\n  &-center {\n    text-align: center;\n  }\n  &-stretch {\n    min-width: unset;\n    overflow: visible;\n  }\n`);\n\n// Variations on columns of different widths.\nconst cssCellIcon = styled(cssCell, `flex: none; width: 24px;`);\nconst cssCellIconWithMargins = styled(cssCellIcon, `margin: 0px 8px;`);\nconst cssCell1 = styled(cssCell, `flex: 1;`);\nconst cssCell2 = styled(cssCell, `flex: 2;`);\nconst cssCell4 = styled(cssCell, `flex: 4;`);\n\n// Group of columns, which may be placed inside a cell.\nconst cssColumnGroup = styled('div', `\n  display: flex;\n  align-items: center;\n  gap: 0px 8px;\n  margin: 0 8px;\n  flex-wrap: wrap;\n`);\n\nconst cssRuleBody = styled('div', `\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  margin: 4px 0;\n`);\n\nconst cssRuleDescription = styled('div', `\n  color: ${theme.text};\n  display: flex;\n  align-items: top;\n  margin: 16px 0 8px 0;\n  gap: 12px;\n  white-space: pre-line;  /* preserve line breaks in long descriptions */\n`);\n\nconst cssCheckbox = styled(squareCheckbox, `\n  flex: none;\n`);\n\nconst cssCellContent = styled('div', `\n  margin: 4px 8px;\n`);\n\nconst cssCenterContent = styled('div', `\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`);\n\nconst cssDefaultLabel = styled('div', `\n  color: ${theme.accessRulesTableBodyFg};\n  font-weight: bold;\n`);\n\nconst cssRuleProblems = styled('div', `\n  flex: auto;\n  height: 100%;\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  gap: 8px;\n`);\n\nconst cssRulePartAndMemo = styled('div', `\n  display: flex;\n  flex-direction: column;\n  row-gap: 4px;\n`);\n\nconst cssMemoColumnGroup = styled(cssColumnGroup, `\n  margin-bottom: 8px;\n`);\n\nconst cssMemoIcon = styled(icon, `\n  --icon-color: ${theme.accentIcon};\n  margin-left: 8px;\n  margin-right: 8px;\n`);\n\nconst cssSeedRule = styled('div', `\n  margin-bottom: 16px;\n`);\n","/**\n * ActionLog manages the list of actions from server and displays them in the side bar.\n */\n\nimport * as dispose from 'app/client/lib/dispose';\nimport dom from 'app/client/lib/dom';\nimport {timeFormat} from 'app/common/timeFormat';\nimport * as ko from 'knockout';\n\nimport koArray from 'app/client/lib/koArray';\nimport {KoArray} from 'app/client/lib/koArray';\nimport * as koDom from 'app/client/lib/koDom';\nimport * as koForm from 'app/client/lib/koForm';\n\nimport {GristDoc} from 'app/client/components/GristDoc';\nimport {ActionGroup} from 'app/common/ActionGroup';\nimport {ActionSummary, asTabularDiffs, defunctTableName, getAffectedTables,\n        LabelDelta} from 'app/common/ActionSummary';\nimport {CellDelta, TabularDiff} from 'app/common/TabularDiff';\nimport {DomContents, IDomComponent} from 'grainjs';\nimport {makeT} from 'app/client/lib/localization';\n\n/**\n *\n * Actions that are displayed in the log get a state observable\n * to track if they are undone/buried.\n *\n * Also for each table shown in the log, we create an observable\n * to track its name.  References to these observables are stored\n * with each action, by the name of the table at that time (the\n * name of a table can change).\n *\n */\nexport interface ActionGroupWithState extends ActionGroup {\n  state?: ko.Observable<string>;  // is action undone/buried\n  tableFilters?: {[tableId: string]: ko.Observable<string>};  // current names of tables\n  affectedTableIds?: Array<ko.Observable<string>>; // names of tables affecting this ActionGroup\n}\n\nconst gristNotify = (window as any).gristNotify;\n\n// Action display state enum.\nconst state = {\n  UNDONE: 'undone',\n  BURIED: 'buried',\n  DEFAULT: 'default'\n};\n\nconst t = makeT('ActionLog');\n\nexport class ActionLog extends dispose.Disposable implements IDomComponent {\n\n  private _displayStack: KoArray<ActionGroupWithState>;\n  private _gristDoc: GristDoc|null;\n  private _selectedTableId: ko.Computed<string>;\n  private _showAllTables: ko.Observable<boolean>;      // should all tables be visible?\n\n  private _pending: ActionGroupWithState[] = [];  // cache for actions that arrive while loading log\n  private _loaded: boolean = false;               // flag set once log is loaded\n  private _loading: ko.Observable<boolean>;  // flag set while log is loading\n\n  /**\n   * Create an ActionLog.\n   * @param options - supplies the GristDoc holding the log, if we have one, so that we\n   *   can cross-reference with it.  We may not have a document, if used from the\n   *   command line renderActions utility, in which case we don't set up cross-references.\n   */\n  public create(options: {gristDoc: GristDoc|null}) {\n    // By default, just show actions for the currently viewed table.\n    this._showAllTables = ko.observable(false);\n    // We load the ActionLog lazily now, when it is first viewed.\n    this._loading = ko.observable(false);\n\n    this._gristDoc = options.gristDoc;\n\n    // TODO: _displayStack grows without bound within a single session.\n    // Stack of actions as they should be displayed to the user.\n    this._displayStack = koArray<ActionGroupWithState>();\n\n    // Computed for the tableId of the table currently being viewed.\n    this._selectedTableId = this.autoDispose(ko.computed(() => {\n      if (!this._gristDoc || this._gristDoc.viewModel.isDisposed()) { return \"\"; }\n      const section = this._gristDoc.viewModel.activeSection();\n      if (!section || section.isDisposed()) { return \"\"; }\n      const table = section.table();\n      return table && !table.isDisposed() ? table.tableId() : \"\";\n    }));\n  }\n\n  public buildDom() {\n    return this._buildLogDom();\n  }\n\n  /**\n   * Pushes actions as they are received from the server to the display stack.\n   * @param {Object} actionGroup - ActionGroup instance from the server.\n   */\n  public pushAction(ag: ActionGroupWithState): void {\n    if (this._loading()) {\n      this._pending.push(ag);\n      return;\n    }\n\n    this._setupFilters(ag, this._displayStack.at(0) || undefined);\n    const otherAg = ag.otherId ? this._displayStack.all().find(a => a.actionNum === ag.otherId) : null;\n\n    if (otherAg) {\n      // Undo/redo action.\n      if (otherAg.state) {\n        otherAg.state(ag.isUndo ? state.UNDONE : state.DEFAULT);\n      }\n    } else {\n      // Any (non-link) action.\n      if (ag.fromSelf) {\n        // Bury all undos immediately preceding this action since they can no longer\n        // be redone. This is triggered by normal actions and undo/redo actions whose\n        // targets are not recent (not in the stack).\n        for (let i = 0; i < this._displayStack.peekLength; i++) {\n          const prevAction = this._displayStack.at(i)!;\n          if (!prevAction.state) { continue; }\n          const prevState = prevAction.state();\n          if (prevAction.fromSelf && prevState === state.DEFAULT) {\n            // When a normal action is found, stop looking to bury previous actions.\n            break;\n          } else if (prevAction.fromSelf && prevState === state.UNDONE) {\n            // The previous action was undone, so now it has become buried.\n            prevAction.state(state.BURIED);\n          }\n        }\n      }\n      if (!ag.otherId) {\n        ag.state = ko.observable(state.DEFAULT);\n        this._displayStack.unshift(ag);\n      }\n    }\n  }\n\n  /**\n   * Render a description of an action prepared on the server.\n   * @param {TabularDiffs} act - a collection of table changes\n   * @param {string} txt - a textual description of the action\n   * @param {ActionGroupWithState} ag - the full action information we have\n   */\n  public renderTabularDiffs(sum: ActionSummary, txt: string, ag?: ActionGroupWithState): HTMLElement {\n    const act = asTabularDiffs(sum);\n    const editDom = dom('div',\n      this._renderTableSchemaChanges(sum, ag),\n      this._renderColumnSchemaChanges(sum, ag),\n      Object.entries(act).map(([table, tdiff]: [string, TabularDiff]) => {\n        if (tdiff.cells.length === 0) { return dom('div'); }\n        return dom('table.action_log_table',\n          koDom.show(() => this._showForTable(table, ag)),\n          dom('caption',\n            this._renderTableName(table)),\n          dom('tr',\n            dom('th'),\n            tdiff.header.map(diff => {\n              return dom('th', this._renderCell(diff));\n            })),\n            tdiff.cells.map(row => {\n            return dom('tr',\n              dom('td', this._renderCell(row[0])),\n                row[2].map((diff, idx: number) => {\n                return dom('td',\n                           this._renderCell(diff),\n                           dom.on('click', () => {\n                             return this._selectCell(row[1], act[table].header[idx], table,\n                                              ag ? ag.actionNum : 0);\n                           }));\n              }));\n            }));\n      }),\n      dom('span.action_comment', txt));\n    return editDom;\n  }\n\n  /**\n   * Decorate an ActionGroup with observables for controlling visibility of any\n   * table information rendered from it.  Observables are shared with the previous\n   * ActionGroup, and simply stored under a new name as needed.\n   */\n  private _setupFilters(ag: ActionGroupWithState, prev?: ActionGroupWithState): void {\n    const filt: {[name: string]: ko.Observable<string>} = ag.tableFilters = {};\n\n    // First, bring along observables for tables from previous actions.\n    if (prev) {\n      // Tables are renamed from time to time - prepare dictionary of updates.\n      const renames = new Map(ag.actionSummary.tableRenames);\n      for (const name of Object.keys(prev.tableFilters!)) {\n        if (name.startsWith('-')) {\n          // skip\n        } else if (renames.has(name)) {\n          const newName = renames.get(name) || defunctTableName(name);\n          filt[newName] = prev.tableFilters![name];\n          filt[newName](newName);   // Update the observable with the new name.\n        } else {\n          filt[name] = prev.tableFilters![name];\n        }\n      }\n    }\n    // Add any more observables that we need for this action.\n    const names = getAffectedTables(ag.actionSummary);\n    for (const name of names) {\n      if (!filt[name]) { filt[name] = ko.observable(name); }\n    }\n    // Record the observables that affect this ActionGroup specifically\n    ag.affectedTableIds = names.map(name => ag.tableFilters![name]).filter(obs => obs);\n  }\n\n  /**\n   * Helper function that returns true if any table touched by the ActionGroup\n   * is set to be visible.\n   */\n  private _hasSelectedTable(ag: ActionGroupWithState): boolean {\n    if (!this._gristDoc) { return true; }\n    return ag.affectedTableIds!.some(tableId => tableId() === this._selectedTableId());\n  }\n\n  /**\n   * Return a koDom.show clause that activates when the named table is not\n   * filtered out.\n   */\n  private _showForTable(tableName: string, ag?: ActionGroupWithState): boolean {\n    if (!ag) { return true; }\n    const obs = ag.tableFilters![tableName];\n    return this._showAllTables() || !obs || obs() === this._selectedTableId();\n  }\n\n  private _buildLogDom() {\n    this._loadActionSummaries().catch(() => gristNotify(t(\"Action Log failed to load\")));\n    return dom('div.action_log',\n        {tabIndex: '-1'},\n        dom('div.preference_item',\n            koForm.checkbox(this._showAllTables,\n                            dom.testId('ActionLog_allTables'),\n                            dom('span.preference_desc', 'All tables'))),\n        dom('div.action_log_load',\n          koDom.show(() => this._loading()),\n          'Loading...'),\n        koDom.foreach(this._displayStack, (ag: ActionGroupWithState) => {\n        const timestamp = ag.time ? timeFormat(\"D T\", new Date(ag.time)) : \"\";\n        let desc: DomContents = ag.desc || \"\";\n        if (ag.actionSummary) {\n          desc = this.renderTabularDiffs(ag.actionSummary, desc, ag);\n        }\n        return dom('div.action_log_item',\n          koDom.cssClass(ag.state),\n          koDom.show(() => this._showAllTables() || this._hasSelectedTable(ag)),\n          dom('div.action_info',\n            dom('span.action_info_action_num', `#${ag.actionNum}`),\n            ag.user ? dom('span.action_info_user',\n              ag.user,\n              koDom.toggleClass('action_info_from_self', ag.fromSelf)\n            ) : '',\n            dom('span.action_info_timestamp', timestamp)),\n          dom('span.action_desc', desc)\n        );\n      })\n    );\n  }\n\n  /**\n   * Fetch summaries of recent actions (with summaries) from the server.\n   */\n  private async _loadActionSummaries() {\n    if (this._loaded || !this._gristDoc) { return; }\n    this._loading(true);\n    // Returned actions are ordered with earliest actions first.\n    const result = await this._gristDoc.docComm.getActionSummaries();\n    this._loading(false);\n    this._loaded = true;\n    // Add the actions to our action log.\n    result.forEach(item => this.pushAction(item));\n    // Add any actions that came in while we were fetching.  Unlikely, but\n    // perhaps possible?\n    const top = result.length > 0 ? result[result.length - 1].actionNum : 0;\n    for (const item of this._pending) {\n      if (item.actionNum > top) { this.pushAction(item); }\n    }\n    this._pending.length = 0;\n  }\n\n  /**\n   * Prepare dom element(s) for a cell that has been created, destroyed,\n   * or modified.\n   *\n   * @param {CellDelta|string|null} cell - a structure with before and after values,\n   *   or a plain string, or null\n   *\n   */\n  private _renderCell(cell: CellDelta|string|null) {\n    // we'll show completely empty cells as \"...\"\n    if (cell === null) {\n      return \"...\";\n    }\n    // strings are shown as themselves\n    if (typeof(cell) === 'string') {\n      return cell;\n    }\n    // by elimination, we have a TabularDiff.CellDelta with before and after values.\n    const [pre, post] = cell;\n    if (!pre && !post) {\n      // very boring before + after values :-)\n      return \"\";\n    } else if (pre && !post) {\n      // this is a cell that was removed\n      return dom('span.action_log_cell_remove', pre[0]);\n    } else if (post && (pre === null || (pre[0] === null || pre[0] === ''))) {\n      // this is a cell that was added, or modified from a previously empty value\n      return dom('span.action_log_cell_add', post[0]);\n    } else if (pre && post) {\n      // a modified cell\n      return dom('div',\n                 dom('span.action_log_cell_remove.action_log_cell_pre', pre[0]),\n                 dom('span.action_log_cell_add', post[0]));\n    }\n    return JSON.stringify(cell);\n  }\n\n  /**\n   * Choose a table name to show.  For now, we show diffs of metadata tables also.\n   * For those tables, we show \"_grist_Foo_bar\" as \"[Foo.bar]\".\n   * @param {string} name - tableId of table\n   * @returns {string} a friendlier name for the table\n   */\n  private _renderTableName(name: string): string {\n    if (name.indexOf('_grist_') !== 0) {\n      // Ordinary data table.  Ideally, we would look up\n      // a friendly name from a raw data view - TODO.\n      return name;\n    }\n    const metaName = name.split('_grist_')[1].replace(/_/g, '.');\n    return `[${metaName}]`;\n  }\n\n  /**\n   * Show an ActionLog item when a column or table is renamed, added, or removed.\n   * Make sure the item is only shown when the affected table is not filtered out.\n   *\n   * @param scope: blank for tables, otherwise \"<tablename>.\"\n   * @param pair: the rename/addition/removal in LabelDelta format: [null, name1]\n   * for addition of name1, [name2, null] for removal of name2, [name1, name2]\n   * for a rename of name1 to name2.\n   * @return a filtered dom element.\n   */\n  private _renderSchemaChange(scope: string, pair: LabelDelta, ag?: ActionGroupWithState) {\n    const [pre, post] = pair;\n    // ignore addition/removal of manualSort column\n    if ((pre || post) === 'manualSort') { return dom('div'); }\n    return dom('div.action_log_rename',\n      koDom.show(() => this._showForTable(post || defunctTableName(pre!), ag)),\n      (!post ? [\"Remove \", scope, dom(\"span.action_log_rename_pre\", pre)] :\n       (!pre ? [\"Add \", scope, dom(\"span.action_log_rename_post\", post)] :\n        [\"Rename \", scope, dom(\"span.action_log_rename_pre\", pre),\n         \" to \", dom(\"span.action_log_rename_post\", post)])));\n  }\n\n  /**\n   * Show any table additions/removals/renames.\n   */\n  private _renderTableSchemaChanges(sum: ActionSummary, ag?: ActionGroupWithState) {\n    return dom('div',\n               sum.tableRenames.map(pair => this._renderSchemaChange(\"\", pair, ag)));\n  }\n\n  /**\n   * Show any column additions/removals/renames.\n   */\n  private _renderColumnSchemaChanges(sum: ActionSummary, ag?: ActionGroupWithState) {\n    return dom('div',\n               Object.keys(sum.tableDeltas).filter(key => !key.startsWith('-')).map(key =>\n                 dom('div',\n                     koDom.show(() => this._showForTable(key, ag)),\n                     sum.tableDeltas[key].columnRenames.map(pair =>\n                        this._renderSchemaChange(key + \".\", pair)))));\n  }\n\n  /**\n   * Move cursor to show a given cell of a given table. Uses primary view of table.\n   */\n  private async _selectCell(rowId: number, colId: string, tableId: string, actionNum: number) {\n    if (!this._gristDoc) { return; }\n\n    // Find action in the stack.\n    const index = this._displayStack.peek().findIndex(a => a.actionNum === actionNum);\n    if (index < 0) { throw new Error(`Cannot find action ${actionNum} in the action log.`); }\n\n    // Found the action. Now trace forward to find current tableId, colId, rowId.\n    for (let i = index; i >= 0; i--) {\n      const action = this._displayStack.at(i)!;\n      const sum = action.actionSummary;\n\n      // Check if this table was renamed / removed.\n      const tableRename: LabelDelta|undefined = sum.tableRenames.find(r => r[0] === tableId);\n      if (tableRename) {\n        const newName = tableRename[1];\n        if (!newName) {\n          // TODO - find a better way to send informative notifications.\n          gristNotify(t(\n            \"Table {{tableId}} was subsequently removed in action #{{actionNum}}\",\n            {tableId:tableId, actionNum: action.actionNum}\n          ));\n          return;\n        }\n        tableId = newName;\n      }\n      const td = sum.tableDeltas[tableId];\n      if (!td) { continue; }\n\n      // Check is this row was removed - if so there's no reason to go on.\n      if (td.removeRows.indexOf(rowId) >= 0) {\n          // TODO - find a better way to send informative notifications.\n        gristNotify(t(\"This row was subsequently removed in action {{action.actionNum}}\", {actionNum}));\n        return;\n      }\n\n      // Check if this column was renamed / added.\n      const columnRename: LabelDelta|undefined = td.columnRenames.find(r => r[0] === colId);\n      if (columnRename) {\n        const newName = columnRename[1];\n        if (!newName) {\n          // TODO - find a better way to send informative notifications.\n          gristNotify(t(\n            \"Column {{colId}} was subsequently removed in action #{{action.actionNum}}\",\n            {colId, actionNum: action.actionNum}\n          ));\n          return;\n        }\n        colId = newName;\n      }\n    }\n\n    // Find the table model of interest.\n    const tableModel = this._gristDoc.getTableModel(tableId);\n    if (!tableModel) { return; }\n\n    // Get its \"primary\" view.\n    const viewRow = tableModel.tableMetaRow.primaryView();\n    const viewId = viewRow.getRowId();\n\n    // Switch to that view.\n    await this._gristDoc.openDocPage(viewId);\n\n    // Now let's pick a reasonable section in that view.\n    const viewSection = viewRow.viewSections().peek().find((s: any) => s.table().tableId() === tableId);\n    if (!viewSection) { return; }\n    const sectionId = viewSection.getRowId();\n\n    // Within that section, find the column of interest if possible.\n    const fieldIndex = viewSection.viewFields().peek().findIndex((f: any) => f.colId.peek() === colId);\n\n    // Finally, move cursor position to the section, column (if we found it), and row.\n    this._gristDoc.moveToCursorPos({rowId, sectionId, fieldIndex}).catch(() => { /* do nothing */ });\n  }\n\n}\n","import {GristDoc} from 'app/client/components/GristDoc';\nimport {reportError} from 'app/client/models/errors';\nimport {DisposableWithEvents} from 'app/common/DisposableWithEvents';\nimport {dom, Observable} from 'grainjs';\nimport {makeT} from 'app/client/lib/localization';\n\n// Rather than require the whole of highlight.js, require just the core with the one language we\n// need, to keep our bundle smaller and the build faster.\nconst hljs           = require('highlight.js/lib/core');\nhljs.registerLanguage('python', require('highlight.js/lib/languages/python'));\n\nconst t = makeT('CodeEditorPanel');\n\nexport class CodeEditorPanel extends DisposableWithEvents {\n  private _schema = Observable.create(this, '');\n  private _denied = Observable.create(this, false);\n  constructor(private _gristDoc: GristDoc) {\n    super();\n    this.listenTo(_gristDoc, 'schemaUpdateAction', this._onSchemaAction.bind(this));\n    this._onSchemaAction().catch(reportError); // Fetch the schema to initialize\n  }\n\n  public buildDom() {\n    // The tabIndex enables the element to gain focus, and the .clipboard class prevents the\n    // Clipboard module from re-grabbing it. This is a quick fix for the issue where clipboard\n    // interferes with text selection. TODO it should be possible for the Clipboard to never\n    // interfere with text selection even for un-focusable elements.\n    return dom('div.g-code-panel.clipboard',\n      {tabIndex: \"-1\"},\n      dom.maybe(this._denied, () => dom('div.g-code-panel-denied',\n        dom('h2', dom.text(t(\"Access denied\"))),\n        dom('div', dom.text(t(\"Code View is available only when you have full document access.\"))),\n      )),\n      dom.maybe(this._schema, (schema) => {\n        // The reason to scope and rebuild instead of using `kd.text(schema)` is because\n        // hljs.highlightBlock(elem) replaces `elem` with a whole new dom tree.\n        const elem = dom('code.g-code-viewer',\n          dom.text(schema),\n          dom.hide(true)\n        );\n        setTimeout(() => {\n          hljs.highlightBlock(elem);\n          dom.showElem(elem, true);\n        });\n        return elem;\n      })\n    );\n  }\n\n  private async _onSchemaAction() {\n    try {\n      const schema = await this._gristDoc.docComm.fetchTableSchema();\n      if (!this.isDisposed()) {\n        this._schema.set(schema);\n        this._denied.set(false);\n      }\n    } catch (err) {\n      if (!String(err).match(/Cannot view code/)) {\n        throw err;\n      }\n      if (!this.isDisposed()) {\n        this._schema.set('');\n        this._denied.set(true);\n      }\n    }\n  }\n}\n","import {CursorPos} from 'app/client/components/Cursor';\nimport {GristDoc} from 'app/client/components/GristDoc';\nimport {getStorage} from 'app/client/lib/storage';\nimport {IDocPage, isViewDocPage, ViewDocPage} from 'app/common/gristUrls';\nimport {Disposable, Listener, Observable} from 'grainjs';\nimport {reportError} from 'app/client/models/errors';\n\n/**\n * Enriched cursor position with a view id\n */\nexport type ViewCursorPos = CursorPos & { viewId: ViewDocPage }\n\n/**\n * Component for GristDoc that allows it to keep track of the latest cursor position.\n * In case, when a document is reloaded abnormally, the latest cursor\n * position should be restored from a local storage.\n */\nexport class CursorMonitor extends Disposable {\n\n  // abstraction to work with local storage\n  private _store: StorageWrapper;\n  // key for storing position in the memory (docId + userId)\n  private _key: string;\n  // flag that tells if the position was already restored\n  // we track document's view change event, so we only want\n  // to react to that event once\n  private _restored = false;\n\n  constructor(\n    doc: GristDoc,\n    store?: Storage) {\n    super();\n\n    this._store = new StorageWrapper(store);\n\n    // Use document id and user id as a key for storage.\n    const userId = doc.app.topAppModel.appObs.get()?.currentUser?.id ?? null;\n    this._key = doc.docId() + userId;\n\n    /**\n     * When document loads last cursor position should be restored from local storage.\n     */\n    this._whenDocumentLoadsRestorePosition(doc);\n\n    /**\n     * When a cursor position changes, its value is stored in a local storage.\n     */\n    this._whenCursorHasChangedStoreInMemory(doc);\n  }\n\n  public clear() {\n    this._store.clear(this._key);\n  }\n\n  private _whenCursorHasChangedStoreInMemory(doc: GristDoc) {\n    // whenever current position changes, store it in the memory\n    this.autoDispose(doc.cursorPosition.addListener(pos => {\n      // if current position is not restored yet, don't change it\n      if (!this._restored) { return; }\n      // store position only when we have valid rowId\n      // for some views (like CustomView) cursor position might not reflect actual row\n      if (pos && pos.rowId !== undefined) { this._storePosition(pos); }\n    }));\n  }\n\n  private _whenDocumentLoadsRestorePosition(doc: GristDoc) {\n    // if doc was opened with a hash link, don't restore last position\n    if (doc.hasCustomNav.get()) {\n      return this._abortRestore();\n    }\n\n    // if we are on raw data view, we need to set the position manually\n    // as currentView observable will not be changed.\n    if (doc.activeViewId.get() === 'data') {\n      this._doRestorePosition(doc).catch((e) => reportError(e));\n      return;\n    }\n\n    // on view shown\n    this.autoDispose(oneTimeListener(doc.currentView, async () => {\n      await this._doRestorePosition(doc);\n    }));\n  }\n\n  private async _doRestorePosition(doc: GristDoc) {\n    // if the position was restored for this document do nothing\n    if (this._restored) { return; }\n    // set that we already restored the position, as some view is shown to the user\n    this._restored = true;\n    const viewId = doc.activeViewId.get();\n    if (!isViewDocPage(viewId)) {\n      return this._abortRestore();\n    }\n    const position = this._readPosition(viewId);\n    if (position) {\n      // Don't restore position if this is a collapsed section.\n      const collapsed = doc.viewModel.activeCollapsedSections.peek();\n      if (position.sectionId && collapsed.includes(position.sectionId)) {\n        return;\n      }\n      // Ignore error with finding desired cell.\n      await doc.recursiveMoveToCursorPos(position, true, true);\n    }\n  }\n\n  private _abortRestore() {\n    this.clear();\n    this._restored = true;\n  }\n\n  private _storePosition(pos: ViewCursorPos) {\n    this._store.update(this._key, pos);\n  }\n\n  private _readPosition(view: IDocPage) {\n    const lastPosition = this._store.read(this._key);\n    this._store.clear(this._key);\n    if (lastPosition && lastPosition.position.viewId == view) {\n      return lastPosition.position;\n    }\n    return null;\n  }\n}\n\n// Internal implementations for working with local storage\nclass StorageWrapper {\n\n  constructor(private _storage = getStorage()) {\n\n  }\n\n  public update(docId: string, position: ViewCursorPos): void {\n    try {\n      const storage = this._storage;\n      const data = { docId, position, timestamp: Date.now() };\n      storage.setItem(this._key(docId), JSON.stringify(data));\n    } catch (e) {\n      console.error(\"Can't store latest position in storage. Detail error \" + e.message);\n    }\n  }\n\n  public clear(docId: string,): void {\n    const storage = this._storage;\n    storage.removeItem(this._key(docId));\n  }\n\n  public read(docId: string): { docId: string; position: ViewCursorPos; } | undefined {\n    const storage = this._storage;\n    const result = storage.getItem(this._key(docId));\n    if (!result) { return undefined; }\n    return JSON.parse(result);\n  }\n\n  protected _key(docId: string) {\n    return `grist-last-position-${docId}`;\n  }\n}\n\nexport function oneTimeListener<T>(obs: Observable<T>, handler: (value: T) => any) {\n  let listener: Listener|null = obs.addListener((value) => {\n    setImmediate(dispose);\n    handler(value);\n  });\n  function dispose() {\n    if (listener) {\n      listener.dispose();\n      listener = null;\n    }\n  }\n  return { dispose };\n}\n","import {Comm} from 'app/client/components/Comm';\nimport {reportError, reportMessage} from 'app/client/models/errors';\nimport {Notifier} from 'app/client/models/NotifyModel';\nimport {ActiveDocAPI, ApplyUAOptions, ApplyUAResult} from 'app/common/ActiveDocAPI';\nimport {CommMessage} from 'app/common/CommTypes';\nimport {UserAction} from 'app/common/DocActions';\nimport {OpenLocalDocResult} from 'app/common/DocListAPI';\nimport {docUrl} from 'app/common/urlUtils';\nimport {Events as BackboneEvents} from 'backbone';\nimport {Disposable, Emitter} from 'grainjs';\n\nconst SLOW_NOTIFICATION_TIMEOUT_MS = 1000; // applies to user actions only\n\n/**\n * The type of data.methods object created by openDoc() in app/client/components/Comm.js.\n * This is used in much of client-side code, and exposed firstly as GristDoc.docComm.\n */\nexport class DocComm extends Disposable implements ActiveDocAPI {\n  // These are all the methods of ActiveDocAPI. Listing them explicitly lets typescript verify\n  // that we haven't missed any.\n  // closeDoc has a special implementation below.\n  public fetchTable = this._wrapMethod(\"fetchTable\");\n  public fetchTableSchema = this._wrapMethod(\"fetchTableSchema\");\n  public useQuerySet = this._wrapMethod(\"useQuerySet\");\n  public disposeQuerySet = this._wrapMethod(\"disposeQuerySet\");\n  // applyUserActions has a special implementation below.\n  public applyUserActionsById = this._wrapMethod(\"applyUserActionsById\");\n  public importFiles = this._wrapMethod(\"importFiles\");\n  public finishImportFiles = this._wrapMethod(\"finishImportFiles\");\n  public cancelImportFiles = this._wrapMethod(\"cancelImportFiles\");\n  public generateImportDiff = this._wrapMethod(\"generateImportDiff\");\n  public addAttachments = this._wrapMethod(\"addAttachments\");\n  public findColFromValues = this._wrapMethod(\"findColFromValues\");\n  public getFormulaError = this._wrapMethod(\"getFormulaError\");\n  public fetchURL = this._wrapMethod(\"fetchURL\");\n  public autocomplete = this._wrapMethod(\"autocomplete\");\n  public removeInstanceFromDoc = this._wrapMethod(\"removeInstanceFromDoc\");\n  public getActionSummaries = this._wrapMethod(\"getActionSummaries\");\n  public startBundleUserActions = this._wrapMethod(\"startBundleUserActions\");\n  public stopBundleUserActions = this._wrapMethod(\"stopBundleUserActions\");\n  public forwardPluginRpc = this._wrapMethod(\"forwardPluginRpc\");\n  public reloadPlugins = this._wrapMethod(\"reloadPlugins\");\n  public reloadDoc = this._wrapMethod(\"reloadDoc\");\n  public fork = this._wrapMethod(\"fork\");\n  public checkAclFormula = this._wrapMethod(\"checkAclFormula\");\n  public getAclResources = this._wrapMethod(\"getAclResources\");\n  public waitForInitialization = this._wrapMethod(\"waitForInitialization\");\n  public getUsersForViewAs = this._wrapMethod(\"getUsersForViewAs\");\n  public getAccessToken = this._wrapMethod(\"getAccessToken\");\n\n  public changeUrlIdEmitter = this.autoDispose(new Emitter());\n\n  // We save the clientId that was used when opening the doc. If it changes (e.g. reconnecting to\n  // another server), it would be incorrect to use the new clientId without re-opening the doc\n  // (which is handled by App.ts). This way, Comm can protect against mismatched clientIds.\n  private _clientId: string;\n  private _docFD: number;\n  private _forkPromise: Promise<void>|null = null;\n  private _isClosed: boolean = false;\n  private listenTo: BackboneEvents['listenTo'];  // set by Backbone\n\n  constructor(private _comm: Comm, openResponse: OpenLocalDocResult, private _docId: string,\n              private _notifier: Notifier) {\n    super();\n    this._setOpenResponse(openResponse);\n    // If *this* doc is shutdown forcibly (e.g. via reloadDoc call), mark it as closed, so we\n    // don't attempt to close it again.\n    this.listenTo(_comm, 'docShutdown', (m: CommMessage) => {\n      if (this.isActionFromThisDoc(m)) { this._isClosed = true; }\n    });\n    this.onDispose(async () => {\n      try {\n        await this._shutdown();\n      } catch (e) {\n        if (!String(e).match(/GristWSConnection disposed/)) {\n          reportError(e);\n        }\n      }\n    });\n  }\n\n  // Returns the URL params that identifying this open document to the DocWorker\n  // (used e.g. in attachment and download URLs).\n  public getUrlParams(): {clientId: string, docFD: number} {\n    return { clientId: this._clientId, docFD: this._docFD };\n  }\n\n  // Completes a path by adding the correct worker host and prefix for this document.\n  // E.g. \"/uploads\" becomes \"https://host.name/v/ver/o/org/uploads\"\n  public docUrl(path: string) {\n    return docUrl(this.docWorkerUrl, path);\n  }\n\n  // Returns a base url to the worker serving the current document, e.g.\n  // \"https://host.name/v/ver/\"\n  public get docWorkerUrl() {\n    return this._comm.getDocWorkerUrl(this._docId);\n  }\n\n  // Returns whether a message received by this Comm object is for the current doc.\n  public isActionFromThisDoc(message: CommMessage): boolean {\n    return message.docFD === this._docFD;\n  }\n\n  /**\n   * Overrides applyUserActions() method to also add the UserActions to a list, for use in tests.\n   */\n  public applyUserActions(actions: UserAction[], options?: ApplyUAOptions): Promise<ApplyUAResult> {\n    this._comm.addUserActions(actions);\n    return this._callMethod('applyUserActions', actions, options);\n  }\n\n  /**\n   * Overrides closeDoc() method to call to Comm directly, without triggering forking logic.\n   * This is important in particular since it may be called while forking.\n   */\n  public closeDoc(): Promise<void> {\n    return this._callDocMethod('closeDoc');\n  }\n\n  /**\n   * Forks the document, making sure the url gets updated, and holding any actions\n   * until the fork is complete.  If a fork has already been started/completed, this\n   * does nothing.\n   */\n  public async forkAndUpdateUrl(): Promise<void> {\n    await (this._forkPromise || (this._forkPromise = this._doForkDoc()));\n  }\n\n  // Clean up connection after closing doc.\n  private async _shutdown() {\n    console.log(`DocComm: shutdown clientId ${this._clientId} docFD ${this._docFD}`);\n    try {\n      // Close the document to unsubscribe from further updates on it.\n      if (!this._isClosed) {\n        await this.closeDoc();\n      }\n    } catch (err) {\n      console.warn(`DocComm: closeDoc failed: ${err}`);\n    } finally {\n      if (!this._comm.isDisposed()) {\n        this._comm.releaseDocConnection(this._docId);\n      }\n    }\n  }\n\n  /**\n   * Store important information from the response to openDoc, and\n   * ensure we have a connection to a docWorker for the document\n   * identified by the current docId.  the caller of _setOpenResponse\n   * should call _releaseDocConnection for any previous docId.\n   */\n  private _setOpenResponse(openResponse: OpenLocalDocResult) {\n    this._docFD = openResponse.docFD;\n    this._clientId = openResponse.clientId;\n    this._comm.useDocConnection(this._docId);\n  }\n\n  private _wrapMethod<Name extends keyof ActiveDocAPI>(name: Name): ActiveDocAPI[Name] {\n    return this._callMethod.bind(this, name);\n  }\n\n  private async _callMethod(name: keyof ActiveDocAPI, ...args: any[]): Promise<any> {\n    return this._notifier.slowNotification(this._doCallMethod(name, ...args), SLOW_NOTIFICATION_TIMEOUT_MS);\n  }\n\n  private async _doCallMethod(name: keyof ActiveDocAPI, ...args: any[]): Promise<any> {\n    if (this._forkPromise) {\n      // If a fork is pending or has finished, call the method after waiting for it.\n      // (If we've gone through a fork, we will not consider forking again.)\n      await this._forkPromise;\n      return this._callDocMethod(name, ...args);\n    }\n    try {\n      return await this._callDocMethod(name, ...args);\n    } catch (err) {\n      // TODO should be the suggested fork id and fork user.\n      if (err.shouldFork) {\n        // If the server suggests to fork, do it now, or wait for the fork already pending.\n        await this.forkAndUpdateUrl();\n        return this._callDocMethod(name, ...args);\n      }\n      throw err;\n    }\n  }\n\n  private _callDocMethod(name: keyof ActiveDocAPI, ...args: any[]): Promise<any> {\n    return this._comm._makeRequest(this._clientId, this._docId, name, this._docFD, ...args);\n  }\n\n  private async _doForkDoc(): Promise<void> {\n    reportMessage('Preparing your copy...', {key: 'forking'});\n    const {urlId, docId} = await this.fork();\n    // TODO: may want to preserve linkParameters in call to openDoc.\n    const openResponse = await this._comm.openDoc(docId);\n    // Close the old doc and release the old connection. Note that the closeDoc call is expected\n    // to fail, since we close the websocket immediately after it. So let it fail silently.\n    this.closeDoc().catch(() => null);\n    this._comm.releaseDocConnection(this._docId);\n    this._docId = docId;\n    this._setOpenResponse(openResponse);\n    this.changeUrlIdEmitter.emit(urlId);\n    reportMessage('You are now editing your own copy', {key: 'forking'});\n  }\n}\n\nObject.assign(DocComm.prototype, BackboneEvents);\n","import { CursorPos } from \"app/client/components/Cursor\";\nimport { DocModel, ViewFieldRec } from \"app/client/models/DocModel\";\nimport BaseRowModel = require(\"app/client/models/BaseRowModel\");\n\n/**\n * Absolute position of a cell in a document\n */\nexport abstract class CellPosition {\n  public static equals(a: CellPosition, b: CellPosition) {\n    return a && b && a.colRef == b.colRef &&\n      a.sectionId == b.sectionId &&\n      a.rowId == b.rowId;\n  }\n  public static create(row: BaseRowModel, field: ViewFieldRec): CellPosition {\n    const rowId = row.id.peek();\n    const colRef = field.colRef.peek();\n    const sectionId = field.viewSection.peek().id.peek();\n    return { rowId, colRef, sectionId };\n  }\n  public sectionId: number;\n  public rowId: number | string;\n  public colRef: number;\n}\n\n/**\n * Converts cursor position to cell absolute positions. Return null if the conversion is not\n * possible (if cursor position doesn't have enough information)\n * @param position Cursor position\n * @param docModel Document model\n */\nexport function fromCursor(position: CursorPos, docModel: DocModel): CellPosition | null {\n  if (!position.sectionId || !position.rowId || position.fieldIndex == null) {\n    return null;\n  }\n\n  const section = docModel.viewSections.getRowModel(position.sectionId);\n  const colRef = section.viewFields().peek()[position.fieldIndex]?.colRef.peek();\n\n  const cursorPosition = {\n    rowId: position.rowId as (string | number), // TODO: cursor position is wrongly typed\n    colRef,\n    sectionId: position.sectionId,\n  };\n\n  return cursorPosition;\n}\n\n/**\n * Converts cell's absolute position to current cursor position.\n * @param position Cell's absolute position\n * @param docModel DocModel\n */\nexport function toCursor(position: CellPosition, docModel: DocModel): CursorPos {\n\n  // translate colRef to fieldIndex\n  const fieldIndex = docModel.viewSections.getRowModel(position.sectionId)\n    .viewFields().peek()\n    .findIndex(x => x.colRef.peek() == position.colRef);\n\n  const cursorPosition = {\n    rowId: position.rowId as number, // this is hack, as cursor position can accept string\n    fieldIndex,\n    sectionId: position.sectionId\n  };\n\n  return cursorPosition;\n}\n","import { CellPosition, toCursor } from \"app/client/components/CellPosition\";\nimport {\n  Disposable, dom, Emitter, Holder, IDisposable, IDisposableOwner,\n  IDomArgs, MultiHolder, styled, TagElem\n} from \"grainjs\";\nimport { GristDoc } from \"app/client/components/GristDoc\";\nimport { makeT } from 'app/client/lib/localization';\nimport { ITooltipControl, showTooltip, tooltipCloseButton } from \"app/client/ui/tooltips\";\nimport { FieldEditorStateEvent } from \"app/client/widgets/FieldEditor\";\nimport { testId, theme } from \"app/client/ui2018/cssVars\";\nimport { cssLink } from \"app/client/ui2018/links\";\n\nconst t = makeT('components.Drafts');\n\n/**\n * Component that keeps track of editor's state (draft value). If user hits an escape button\n * by accident, this component will provide a way to continue the work.\n * Each editor can report its current state, that will be remembered and restored\n * when user whishes to continue his work.\n * Each document can have only one draft at a particular time, that\n * is cleared when changes occur on any other cell or the cursor navigates await from a cell.\n *\n * This component is built as a plugin for GristDoc. GristDoc, FieldBuilder, FieldEditor were just\n * extended in order to provide some public interface that this objects plugs into.\n * To disable the drafts, just simple remove it from GristDoc.\n */\nexport class Drafts extends Disposable {\n  constructor(\n    doc: GristDoc\n  ) {\n    super();\n\n    // Here are all the parts that play some role in this feature\n\n    // Cursor will navigate the cursor on a view to a proper cell\n    const cursor: Cursor = CursorAdapter.create(this, doc);\n    // Storage will remember last draft\n    const storage: Storage = StorageAdapter.create(this);\n    // Notification will show notification with button to undo discard\n    const notification: Notification = NotificationAdapter.create(this, doc);\n    // Tooltip will hover above the editor and offer to continue from last edit\n    const tooltip: Tooltip = TooltipAdapter.create(this, doc);\n    // Editor will restore its previous state and inform about keyboard events\n    const editor: Editor = EditorAdapter.create(this, doc);\n\n    // Here is the main use case describing how parts are connected\n\n    const when = makeWhen(this);\n\n    // When user cancels the editor\n    when(editor.cellCancelled, (ev: StateChanged) => {\n      // if the state of the editor hasn't changed\n      if (!ev.modified) {\n        // close the tooltip and notification\n        tooltip.close();\n        notification.close();\n        // don't store the draft - we assume that user\n        // actually wanted to discard the draft by pressing\n        // escape again\n        return;\n      }\n      // Show notification\n      notification.showUndoDiscard();\n      // Save draft in memory\n      storage.save(ev);\n      // Make sure that tooltip is not visible\n      tooltip.close();\n    });\n\n    // When user clicks notification to continue with the draft\n    when(notification.pressed, async () => {\n      // if the draft is there\n      const draft = storage.get();\n      if (draft) {\n        // restore the position of a cell\n        await cursor.goToCell(draft.position);\n        // activate the editor\n        await editor.activate();\n        // and restore last draft\n        editor.setState(draft.state);\n      }\n      // We don't need the draft any more.\n      // If user presses escape one more time it will be created\n      // once again\n      storage.clear();\n      // Close the notification\n      notification.close();\n      // tooltip is not visible here, and will be shown\n      // when editor is activated\n    });\n\n    // When user doesn't do anything while the notification is visible\n    // remove the draft when it disappears\n    when(notification.disappeared, () => {\n      storage.clear();\n    });\n\n    // When editor is activated (user typed something or double clicked a cell)\n    when(editor.activated, (pos: CellPosition) => {\n      // if there was a draft for a cell\n      if (storage.hasDraftFor(pos)) {\n        // show tooltip to continue with a draft\n        tooltip.showContinueDraft();\n      }\n      // make sure that notification is not visible\n      notification.close();\n    });\n\n    // When editor is modified, close tooltip after some time\n    when(editor.cellModified, (_: StateChanged) => {\n      tooltip.scheduleClose();\n    });\n\n    // When user saves a cell\n    when(editor.cellSaved, (_: StateChanged) => {\n      // just close everything and clear draft\n      storage.clear();\n      tooltip.close();\n      notification.close();\n    });\n\n    // When a user clicks a tooltip to continue with a draft\n    when(tooltip.click, () => {\n      const draft = storage.get();\n      // if there was a draft\n      if (draft) {\n        // restore the draft\n        editor.setState(draft.state);\n      }\n      // close the tooltip\n      tooltip.close();\n    });\n  }\n}\n\n///////////////////////////////////////////////////////////\n// Roles definition that abstract the way this feature interacts with Grist\n\n/**\n * Cursor role can navigate the cursor to a proper cell\n */\ninterface Cursor {\n  goToCell(pos: CellPosition): Promise<void>;\n}\n\n/**\n * Editor role represents active editor that is attached to a cell.\n */\ninterface Editor {\n  // Occurs when user triggers the save operation (by the enter key, clicking away)\n  cellSaved: TypedEmitter<StateChanged>;\n  // Occurs when user triggers the save operation (by the enter key, clicking away)\n  cellModified: TypedEmitter<StateChanged>;\n  // Occurs when user typed something on a cell or double clicked it\n  activated: TypedEmitter<CellPosition>;\n  // Occurs when user cancels the edit (mainly by the escape key or by icon on mobile)\n  cellCancelled: TypedEmitter<StateChanged>;\n  // Editor can restore its state\n  setState(state: any): void;\n  // Editor can be shown up to the user on active cell\n  activate(): Promise<void>;\n}\n\n/**\n * Notification that is shown to the user on the right bottom corner\n */\ninterface Notification {\n  // Occurs when user clicked the notification\n  pressed: Signal;\n  // Occurs when notification disappears with no action from a user\n  disappeared: Signal;\n  // Notification can be closed if it is visible\n  close(): void;\n  // Show notification to the user, to inform him that he can continue with the draft\n  showUndoDiscard(): void;\n}\n\n/**\n * Storage abstraction. Is responsible for storing latest\n * draft (position and state)\n */\ninterface Storage {\n  // Retrieves latest draft data\n  get(): State | null;\n  // Stores latest draft data\n  save(ev: State): void;\n  // Checks if there is draft data at the position\n  hasDraftFor(position: CellPosition): boolean;\n  // Removes draft data\n  clear(): void;\n}\n\n/**\n * Tooltip role is responsible for showing tooltip over active field editor with an information\n * that the drafts is available, and a button to continue with the draft\n */\ninterface Tooltip {\n  // Occurs when user clicks the button on the tooltip - so he wants\n  // to continue with the draft\n  click: Signal;\n  // Show tooltip over active cell editor\n  showContinueDraft(): void;\n  // Close tooltip\n  close(): void;\n  // Close tooltip after some time\n  scheduleClose(): void;\n}\n\n/**\n * Schema of the information that is stored in the storage.\n */\ninterface State {\n  // State of the editor\n  state: any;\n  // Cell position where the draft was created\n  position: CellPosition;\n}\n\n/**\n * Event that is emitted when editor state has changed\n */\ninterface StateChanged extends State {\n  modified: boolean;\n}\n\n///////////////////////////////////////////////////////////\n// Here are all the adapters for the roles above. They\n// abstract the way this feature interacts with the GristDoc\n\nclass CursorAdapter extends Disposable implements Cursor {\n  constructor(private _doc: GristDoc) {\n    super();\n  }\n  public async goToCell(pos: CellPosition): Promise<void> {\n    await this._doc.recursiveMoveToCursorPos(toCursor(pos, this._doc.docModel), true);\n  }\n}\n\nclass StorageAdapter extends Disposable implements Storage {\n  private _memory: State | null;\n  public get(): State | null {\n    return this._memory;\n  }\n  public save(ev: State) {\n    this._memory = ev;\n  }\n  public hasDraftFor(position: CellPosition): boolean {\n    const item = this._memory;\n    if (item && CellPosition.equals(item.position, position)) {\n      return true;\n    }\n    return false;\n  }\n  public clear(): void {\n    this._memory = null;\n  }\n}\n\nclass NotificationAdapter extends Disposable implements Notification {\n  public readonly pressed: Signal;\n  public readonly disappeared: Signal;\n  private _hadAction = false;\n  private _holder = Holder.create(this);\n\n  constructor(private _doc: GristDoc) {\n    super();\n    this.pressed = this.autoDispose(new Emitter());\n    this.disappeared = this.autoDispose(new Emitter());\n  }\n  public close(): void {\n    this._hadAction = true;\n    this._holder.clear();\n  }\n  public showUndoDiscard() {\n    const notifier = this._doc.app.topAppModel.notifier;\n    const notification = notifier.createUserMessage(t(\"Undo discard\"), {\n      message: () =>\n        discardNotification(\n          dom.on(\"click\", () => {\n            this._hadAction = true;\n            this.pressed.emit();\n          })\n        )\n    });\n    notification.onDispose(() => {\n      if (!this._hadAction) {\n        this.disappeared.emit();\n      }\n    });\n    this._holder.autoDispose(notification);\n    this._hadAction = false;\n  }\n}\n\nclass TooltipAdapter extends Disposable implements Tooltip {\n  public readonly click: Signal;\n\n  // there can be only one tooltip at a time\n  private _tooltip: ITooltipControl | null = null;\n  private _scheduled = false;\n\n  constructor(private _doc: GristDoc) {\n    super();\n    this.click = this.autoDispose(new Emitter());\n\n    // make sure that the tooltip is closed when this object gets disposed\n    this.onDispose(() => {\n      this.close();\n    });\n  }\n\n  public scheduleClose(): void {\n    if (this._tooltip && !this._scheduled) {\n      this._scheduled = true;\n      const origClose = this._tooltip.close;\n      this._tooltip.close = () => { clearTimeout(timer); origClose(); };\n      const timer = setTimeout(this._tooltip.close, 6000);\n    }\n  }\n\n  public showContinueDraft(): void {\n    // close tooltip if there was a previous one\n    this.close();\n\n    // get the editor dom\n    const editorDom = this._doc.activeEditor.get()?.getDom();\n    if (!editorDom) {\n      return;\n    }\n\n    // attach the tooltip\n    this._tooltip = showTooltip(\n      editorDom,\n      cellTooltip(() => this.click.emit()));\n  }\n\n  public close(): void {\n    this._scheduled = false;\n    this._tooltip?.close();\n    this._tooltip = null;\n  }\n}\n\nclass EditorAdapter extends Disposable implements Editor {\n  public readonly cellSaved: TypedEmitter<StateChanged> = this.autoDispose(new Emitter());\n  public readonly cellModified: TypedEmitter<StateChanged> = this.autoDispose(new Emitter());\n  public readonly activated: TypedEmitter<CellPosition> = this.autoDispose(new Emitter());\n  public readonly cellCancelled: TypedEmitter<StateChanged> = this.autoDispose(new Emitter());\n\n  private _holder = Holder.create<MultiHolder>(this);\n\n  constructor(private _doc: GristDoc) {\n    super();\n\n    // observe active editor\n    this.autoDispose(_doc.activeEditor.addListener((editor) => {\n      if (!editor) {\n        return;\n      }\n\n      // when the editor is created we assume that it is visible to the user\n      this.activated.emit(editor.cellPosition());\n\n      // Auto dispose the previous MultiHolder along with all the previous listeners, and create a\n      // new MultiHolder for the new ones.\n      const mholder = MultiHolder.create(this._holder);\n\n      mholder.autoDispose(editor.changeEmitter.addListener((e: FieldEditorStateEvent) => {\n        this.cellModified.emit({\n          position: e.position,\n          state: e.currentState,\n          modified: e.wasModified\n        });\n      }));\n\n      // when user presses escape\n      mholder.autoDispose(editor.cancelEmitter.addListener((e: FieldEditorStateEvent) => {\n        this.cellCancelled.emit({\n          position: e.position,\n          state: e.currentState,\n          modified: e.wasModified\n        });\n      }));\n\n      // when user presses enter to save the value\n      mholder.autoDispose(editor.saveEmitter.addListener((e: FieldEditorStateEvent) => {\n        this.cellSaved.emit({\n          position: e.position,\n          state: e.currentState,\n          modified: e.wasModified\n        });\n      }));\n    }));\n  }\n\n  public setState(state: any): void {\n    // rebuild active editor with a state from a draft\n    this._doc.activeEditor.get()?.rebuildEditor(undefined, Number.POSITIVE_INFINITY, state);\n  }\n\n  public async activate() {\n    // open up the editor at current position\n    await this._doc.activateEditorAtCursor({});\n  }\n}\n\n///////////////////////////////////////////////////////////\n// Ui components\n\n// Cell tooltip to restore the draft - it is visible over active editor\nconst styledTooltip = styled('div', `\n  display: flex;\n  align-items: center;\n  --icon-color: ${theme.controlFg};\n\n  & > .${cssLink.className} {\n    margin-left: 8px;\n  }\n`);\n\nfunction cellTooltip(clb: () => any) {\n  return function (ctl: ITooltipControl) {\n    return styledTooltip(\n      cssLink(t(\"Restore last edit\"),\n        dom.on('mousedown', (ev) => { ev.preventDefault(); ctl.close(); clb(); }),\n        testId('draft-tooltip'),\n      ),\n      tooltipCloseButton(ctl),\n    );\n  };\n}\n\n// Discard notification dom\nconst styledNotification = styled('div', `\n  cursor: pointer;\n  color: ${theme.controlFg};\n  &:hover {\n    text-decoration: underline;\n  }\n`);\nfunction discardNotification(...args: IDomArgs<TagElem<\"div\">>) {\n  return styledNotification(\n    t(\"Undo discard\"),\n    testId(\"draft-notification\"),\n    ...args\n  );\n}\n\n///////////////////////////////////////////////////////////\n// Internal implementations - not relevant to main use case\n\n// helper method to listen to the Emitter and dispose the listener with a parent\nfunction makeWhen(owner: IDisposableOwner) {\n  return function <T extends EmitterType<any>>(emitter: T, handler: EmitterHandler<T>) {\n    owner.autoDispose(emitter.addListener(handler as any));\n  };\n}\n\n// Default emitter is not typed, this augments the Emitter interface\ninterface TypedEmitter<T> {\n  emit(item: T): void;\n  addListener(clb: (e: T) => any): IDisposable;\n}\ninterface Signal {\n  emit(): void;\n  addListener(clb: () => any): IDisposable;\n}\ntype EmitterType<T> = T extends TypedEmitter<infer E> ? TypedEmitter<E> : Signal;\ntype EmitterHandler<T> = T extends TypedEmitter<infer E> ? ((e: E) => any) : () => any;\n","import {CellPosition, toCursor} from 'app/client/components/CellPosition';\nimport {oneTimeListener} from 'app/client/components/CursorMonitor';\nimport {GristDoc} from 'app/client/components/GristDoc';\nimport {getStorage} from 'app/client/lib/storage';\nimport {UserError} from 'app/client/models/errors';\nimport {FieldEditor, FieldEditorStateEvent} from 'app/client/widgets/FieldEditor';\nimport {isViewDocPage} from 'app/common/gristUrls';\nimport {Disposable, Emitter, IDisposableOwner} from 'grainjs';\n\n/**\n * Feature for GristDoc that allows it to keep track of current editor's state.\n * State is stored in local storage by default.\n */\nexport class EditorMonitor extends Disposable {\n\n  // abstraction to work with local storage\n  private _store: EditMemoryStorage;\n  private _restored = false;\n\n  constructor(\n    doc: GristDoc,\n    store?: Storage) {\n    super();\n\n    // create store\n    const userId = doc.app.topAppModel.appObs.get()?.currentUser?.id ?? null;\n    // use document id and user id as a key for storage\n    const key = doc.docId() + userId;\n    this._store = new EditMemoryStorage(key, store);\n\n    // listen to document events to handle view load event\n    this._listenToReload(doc).catch((err) => {\n      if (!(err instanceof UserError)) {\n        throw err;\n      }\n      // Don't report UserErrors for this feature (should not happen as\n      // the only error that is thrown was silenced by recursiveMoveToCursorPos)\n      console.error(`Error while restoring last edit position`, err);\n    });\n  }\n\n  /**\n   * Monitors a field editor and updates latest edit position\n   * @param editor Field editor to track\n   */\n  public monitorEditor(editor: FieldEditor) {\n    // typed helper to connect to the emitter\n    const on = typedListener(this);\n    // When user cancels the edit process, discard the memory of the last edited cell.\n    on(editor.cancelEmitter, (event) => {\n      this._store.clear();\n    });\n    // When saves a cell, discard the memory of the last edited cell.\n    on(editor.saveEmitter, (event) => {\n      this._store.clear();\n    });\n    // When user types in the editor, store its state\n    on(editor.changeEmitter, (event) => {\n      this._store.updateValue(event.position, event.currentState);\n    });\n  }\n\n  /**\n   * When document gets reloaded, restore last cursor position and a state of the editor.\n   * Returns last edited cell position and saved editor state or undefined.\n   */\n  private async _listenToReload(doc: GristDoc) {\n    // don't restore on readonly mode or when there is custom nav\n    if (doc.isReadonly.get() || doc.hasCustomNav.get()) {\n      this._store.clear();\n      return;\n     }\n    // if we are on raw data view, we need to set the position manually\n    // as currentView observable will not be changed.\n    if (doc.activeViewId.get() === 'data') {\n      await this._doRestorePosition(doc);\n    } else {\n      // on view shown\n      this.autoDispose(oneTimeListener(doc.currentView, async () => {\n        await this._doRestorePosition(doc);\n      }));\n    }\n  }\n\n  private async _doRestorePosition(doc: GristDoc) {\n    if (this._restored) {\n      return;\n    }\n    this._restored = true;\n    const viewId = doc.activeViewId.get();\n    // if view wasn't rendered (page is displaying history or code view) do nothing\n    if (!isViewDocPage(viewId)) {\n      this._store.clear();\n      return;\n     }\n    const lastEdit = this._store.readValue();\n    if (lastEdit) {\n      // set the cursor at right cell\n      await doc.recursiveMoveToCursorPos(toCursor(lastEdit.position, doc.docModel), true, true);\n      // activate the editor\n      await doc.activateEditorAtCursor({ state: lastEdit.value });\n    }\n  }\n}\n\n// Internal implementation, not relevant to the main use case\n\n// typed listener for the Emitter class\nfunction typedListener(owner: IDisposableOwner) {\n  return function (emitter: Emitter, clb: (e: FieldEditorStateEvent) => any) {\n    owner.autoDispose(emitter.addListener(clb));\n  };\n}\n\n// Marker for a editor state - each editor can report any data as long as it is serialized\ntype EditorState = any;\n\n// Schema for value stored in the local storage\ninterface LastEditData {\n  // absolute position for a cell\n  position: CellPosition;\n  // editor's state\n  value: EditorState;\n}\n\n// Abstraction for working with local storage\nclass EditMemoryStorage {\n\n  private _entry: LastEditData | null = null;\n  private _timestamp = 0;\n\n  constructor(private _key: string, private _storage = getStorage()) {\n  }\n\n  public updateValue(pos: CellPosition, value: EditorState): void {\n    this._entry = { position: pos, value: value };\n    this.save();\n  }\n\n  public readValue(): LastEditData | null {\n    this.load();\n    return this._entry;\n  }\n\n  public clear(): void {\n    this._entry = null;\n    this.save();\n  }\n\n  public timestamp(): number {\n    return this._timestamp;\n  }\n\n  protected _storageKey() {\n    return `grist-last-edit-${this._key}`;\n  }\n\n  protected load() {\n    const storage = this._storage;\n    const data = storage.getItem(this._storageKey());\n    this._entry = null;\n    this._timestamp = 0;\n\n    if (data) {\n      try {\n        const { entry, timestamp } = JSON.parse(data);\n        if (typeof entry === 'undefined' || typeof timestamp != 'number') {\n          console.error(\"[EditMemory] Data in local storage has a different structure\");\n          return;\n        }\n        this._entry = entry;\n        this._timestamp = timestamp;\n      } catch (e) {\n        console.error(\"[EditMemory] Can't deserialize date from local storage\");\n      }\n    }\n  }\n\n  protected save(): void {\n    const storage = this._storage;\n\n    // if entry was removed - clear the storage\n    if (!this._entry) {\n      storage.removeItem(this._storageKey());\n      return;\n    }\n\n    try {\n      this._timestamp = Date.now();\n      const data = { timestamp: this._timestamp, entry: this._entry };\n      storage.setItem(this._storageKey(), JSON.stringify(data));\n    } catch (ex) {\n      console.error(\"Can't save current edited cell state. Error message: \" + ex?.message);\n    }\n  }\n}\n","import {bigBasicButton, bigPrimaryButton} from 'app/client/ui2018/buttons';\nimport {squareCheckbox} from 'app/client/ui2018/checkbox';\nimport {testId, theme} from 'app/client/ui2018/cssVars';\nimport {makeLinks} from 'app/client/ui2018/links';\nimport {cssModalButtons} from 'app/client/ui2018/modals';\nimport {ParseOptionSchema} from 'app/plugin/FileParserAPI';\nimport {Computed, dom, DomContents, IDisposableOwner, input, Observable, styled} from 'grainjs';\nimport fromPairs = require('lodash/fromPairs');\nimport invert = require('lodash/invert');\n\nexport type ParseOptionValueType = boolean|string|number;\n\nexport interface ParseOptionValues {\n  [name: string]: ParseOptionValueType;\n}\n\n/**\n * EscapeChars contains mapping for some escape characters that we need to convert\n * for displaying in input fields\n */\ninterface EscapeChars {\n  [char: string]: string;\n}\n\nconst escapeCharDict: EscapeChars = {\n  '\\n': '\\\\n',\n  '\\r': '\\\\r',\n  '\\t': '\\\\t',\n};\nconst invertedEscapeCharDict: EscapeChars = invert(escapeCharDict);\n\n// Helpers to escape and unescape certain non-printable characters that are useful in parsing\n// options, e.g. as separators.\nfunction escapeChars(value: string) {\n  return value.replace(/[\\n\\r\\t]/g, (match) => escapeCharDict[match]);\n}\nfunction unescapeChars(value: string) {\n  return value.replace(/\\\\[nrt]/g, (match) => invertedEscapeCharDict[match]);\n}\n\n/**\n * Builds a DOM form consisting of inputs built according to schema, with the passed-in values.\n * The included \"Update\" button is enabled if any value has changed, and calls doUpdate() with the\n * current values.\n */\nexport function buildParseOptionsForm(\n  owner: IDisposableOwner,\n  schema: ParseOptionSchema[],\n  values: ParseOptionValues,\n  doUpdate: (v: ParseOptionValues) => void,\n  doCancel: () => void,\n): DomContents {\n  const items = schema.filter(item => item.visible);\n  const optionsMap = new Map<string, Observable<ParseOptionValueType>>(\n    items.map((item) => [item.name, Observable.create(owner, values[item.name])]));\n\n  function collectParseOptions(): ParseOptionValues {\n    return fromPairs(items.map((item) => [item.name, optionsMap.get(item.name)!.get()]));\n  }\n\n  return [\n    cssParseOptionForm(\n      items.map((item) => cssParseOption(\n        cssParseOptionName(makeLinks(item.label)),\n        optionToInput(owner, item.type, optionsMap.get(item.name)!),\n        testId('parseopts-opt'),\n      )),\n    ),\n    cssModalButtons(\n      dom.domComputed((use) => items.every((item) => use(optionsMap.get(item.name)!) === values[item.name]),\n        (unchanged) => (unchanged ?\n          bigBasicButton('Close', dom.on('click', doCancel), testId('parseopts-back')) :\n          bigPrimaryButton('Update preview', dom.on('click', () => doUpdate(collectParseOptions())),\n            testId('parseopts-update'))\n        )\n      )\n    ),\n  ];\n}\n\nfunction optionToInput(owner: IDisposableOwner, type: string, value: Observable<ParseOptionValueType>): HTMLElement {\n  switch (type) {\n    case 'boolean': return squareCheckbox(value as Observable<boolean>);\n    default: {\n      const obs = Computed.create(owner, (use) => escapeChars(String(use(value) || \"\")))\n        .onWrite((val) => value.set(unescapeChars(val)));\n      return cssInputText(obs, {onInput: true},\n        dom.on('focus', (ev, elem) => elem.select()));\n    }\n  }\n}\n\nconst cssParseOptionForm = styled('div', `\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  padding: 16px 0;\n  width: 400px;\n  overflow-y: auto;\n`);\nconst cssParseOption = styled('div', `\n  flex: none;\n  margin: 8px 0;\n  width: calc(50% - 16px);\n  font-weight: initial;   /* negate bootstrap */\n`);\nconst cssParseOptionName = styled('div', `\n  margin-bottom: 8px;\n`);\nconst cssInputText = styled(input, `\n  color: ${theme.inputFg};\n  background-color: ${theme.inputBg};\n  position: relative;\n  display: inline-block;\n  outline: none;\n  height: 28px;\n  border: 1px solid ${theme.inputBorder};\n  border-radius: 3px;\n  padding: 0 6px;\n  width: 100%;\n\n  &::placeholder {\n    color: ${theme.inputPlaceholderFg};\n  }\n`);\n","/**\n * Importer manages an import files to Grist tables\n * TODO: hidden tables should be also deleted on page refresh, error...\n */\n// tslint:disable:no-console\n\nimport {GristDoc} from 'app/client/components/GristDoc';\nimport {buildParseOptionsForm, ParseOptionValues} from 'app/client/components/ParseOptions';\nimport {PluginScreen} from 'app/client/components/PluginScreen';\nimport {FocusLayer} from 'app/client/lib/FocusLayer';\nimport {ImportSourceElement} from 'app/client/lib/ImportSourceElement';\nimport {makeT} from 'app/client/lib/localization';\nimport {fetchURL, isDriveUrl, selectFiles, uploadFiles} from 'app/client/lib/uploads';\nimport {reportError} from 'app/client/models/AppModel';\nimport {ColumnRec, ViewFieldRec, ViewSectionRec} from 'app/client/models/DocModel';\nimport {SortedRowSet} from 'app/client/models/rowset';\nimport {buildHighlightedCode} from 'app/client/ui/CodeHighlight';\nimport {openFilePicker} from 'app/client/ui/FileDialog';\nimport {ACCESS_DENIED, AUTH_INTERRUPTED, canReadPrivateFiles, getGoogleCodeForReading} from 'app/client/ui/googleAuth';\nimport {cssPageIcon} from 'app/client/ui/LeftPanelCommon';\nimport {hoverTooltip, overflowTooltip} from 'app/client/ui/tooltips';\nimport {bigBasicButton, bigPrimaryButton, textButton} from 'app/client/ui2018/buttons';\nimport {labeledSquareCheckbox} from 'app/client/ui2018/checkbox';\nimport {testId as baseTestId, theme, vars} from 'app/client/ui2018/cssVars';\nimport {icon} from 'app/client/ui2018/icons';\nimport {loadingSpinner} from 'app/client/ui2018/loaders';\nimport {IOptionFull, menuDivider, menuItem, multiSelect, selectMenu, selectOption} from 'app/client/ui2018/menus';\nimport {cssModalTitle} from 'app/client/ui2018/modals';\nimport {openFormulaEditor} from 'app/client/widgets/FormulaEditor';\nimport {\n  DataSourceTransformed,\n  DestId,\n  ImportResult,\n  ImportTableResult,\n  MergeOptions,\n  MergeOptionsMap,\n  MergeStrategy,\n  NEW_TABLE,\n  SKIP_TABLE,\n  TransformColumn,\n  TransformRule,\n  TransformRuleMap\n} from 'app/common/ActiveDocAPI';\nimport {DisposableWithEvents} from 'app/common/DisposableWithEvents';\nimport {byteString, not} from 'app/common/gutil';\nimport {FetchUrlOptions, UploadResult} from 'app/common/uploads';\nimport {ParseOptions, ParseOptionSchema} from 'app/plugin/FileParserAPI';\nimport {\n  BindableValue,\n  Computed,\n  Disposable,\n  dom,\n  DomContents,\n  fromKo,\n  Holder,\n  IDisposable,\n  MultiHolder,\n  MutableObsArray,\n  obsArray,\n  Observable,\n  styled,\n  UseCBOwner\n} from 'grainjs';\nimport debounce = require('lodash/debounce');\n\nconst t = makeT('Importer');\n// Custom testId that can be appended conditionally.\nconst testId = (id: string, obs?: BindableValue<boolean>) => dom.cls('test-importer-' + id, obs ?? true);\n\n\n// We expect a function for creating the preview GridView, to avoid the need to require the\n// GridView module here. That brings many dependencies, making a simple test fixture difficult.\ntype CreatePreviewFunc = (vs: ViewSectionRec) => GridView;\ntype GridView = IDisposable & {viewPane: HTMLElement, sortedRows: SortedRowSet, listenTo: (...args: any[]) => void};\nconst TABLE_MAPPING = 1;\nconst COLUMN_MAPPING = 2;\ntype ViewType = typeof TABLE_MAPPING | typeof COLUMN_MAPPING;\n\n/**\n * Information returned by the backend of the current import state, and how the table and sections look there.\n * Also contains some UI state, so it is updated with the data that comes from the backend.\n */\nexport interface SourceInfo {\n  /** Table id that holds the imported data. */\n  hiddenTableId: string;\n  /** Uploaded file index */\n  uploadFileIndex: number;\n  /** Table name that was figured out by the backend. File name or tab in excel name */\n  origTableName: string;\n  /**\n   * Section that contains only imported columns. It is not shown to the user.\n   * Table besides the imported data have formula columns that are used to finalize import. Those formula\n   * columns are not part of this section.\n   */\n  sourceSection: ViewSectionRec;\n  /**\n   * A viewSection containing transform (formula) columns pointing to the original source columns.\n   * When user selects New table, they are basically formulas pointing to the source columns.\n   * When user selects Existing table, new formula columns are created that look like the selected table, and this\n   * section contains those formula columns.\n   */\n  transformSection: Observable<ViewSectionRec|null>;\n  /** The destination table id, selected by the user. Can be null for skip and empty string for `New table`  */\n  destTableId: Observable<DestId>;\n  /** True if there is at least one request in progress to create a new transform section. */\n  isLoadingSection: Observable<boolean>;\n  /** Reference to last promise for the GenImporterView action (which creates `transformSection`). */\n  lastGenImporterViewPromise: Promise<any>|null;\n  /** Selected view, can be table mapping or column mapping, used only in UI. */\n  selectedView: Observable<ViewType>;\n  /** List of columns that were customized (have custom formulas) */\n  customizedColumns: Observable<Set<string>>;\n}\n\n/** Changes the customization flag for the column */\nfunction toggleCustomized(info: SourceInfo, colId: string, on: boolean): void {\n  const customizedColumns = info.customizedColumns.get();\n  if (!on) {\n    customizedColumns.delete(colId);\n  } else {\n    customizedColumns.add(colId);\n  }\n  info.customizedColumns.set(new Set(customizedColumns));\n}\n\n\n/**\n * UI state for each imported table (file). Maps table id to the info object.\n */\ninterface MergeOptionsStateMap {\n  [hiddenTableId: string]: MergeOptionsState|undefined;\n}\n\n/**\n * UI state of merge options for a SourceInfo.\n */\ninterface MergeOptionsState {\n  /**\n   * Whether to update existing records or only add new ones. If false, mergeCols is empty.\n   */\n  updateExistingRecords: Observable<boolean>;\n  /**\n   * List of column ids to merge on if user set `updateExistingRecords` to true. Those are columns from the\n   * target table.\n   */\n  mergeCols: MutableObsArray<string>;\n  /**\n   * Merge strategy to use, not used currently.\n   */\n  mergeStrategy: Observable<MergeStrategy>;\n  /**\n   * Whether mergeCols contains invalid columns (set in the code to show error message).\n   */\n  hasInvalidMergeCols: Observable<boolean>;\n}\n\n/**\n * Imports using the given plugin importer.\n */\nexport async function selectAndImport(\n  gristDoc: GristDoc,\n  imports: ImportSourceElement[],\n  importSourceElem: ImportSourceElement,\n  createPreview: CreatePreviewFunc\n) {\n  // HACK: The url plugin does not support importing from google drive, and we don't want to\n  // ask a user for permission to access all his files (needed to download a single file from an URL).\n  // So to have a nice user experience, we will switch to the built-in google drive plugin and allow\n  // user to chose a file manually.\n  // Suggestion for the future is:\n  // (1) ask the user for the greater permission,\n  // (2) detect when the permission is not granted, and open the picker-based plugin in that case.\n  try {\n    // Importer disposes itself when its dialog is closed, so we do not take ownership of it.\n    await Importer.create(null, gristDoc, importSourceElem, createPreview).pickAndUploadSource(null);\n  } catch(err1) {\n    // If the url was a Google Drive Url, run the google drive plugin.\n    if (!(err1 instanceof GDriveUrlNotSupported)) {\n      reportError(err1);\n    } else {\n      const gdrivePlugin = imports.find((p) => p.plugin.definition.id === 'builtIn/gdrive' && p !== importSourceElem);\n      if (!gdrivePlugin) {\n        reportError(err1);\n      } else {\n        try {\n          await Importer.create(null, gristDoc, gdrivePlugin, createPreview).pickAndUploadSource(null);\n        } catch(err2) {\n          reportError(err2);\n        }\n      }\n    }\n  }\n}\n\n/**\n * Imports from file.\n */\nexport async function importFromFile(gristDoc: GristDoc, createPreview: CreatePreviewFunc) {\n  // In case of using built-in file picker we want to get upload result before instantiating Importer\n  // because if the user dismisses the dialog without picking a file,\n  // there is no good way to detect this and dispose Importer.\n  let uploadResult: UploadResult|null = null;\n  // Use the built-in file picker. On electron, it uses the native file selector (without\n  // actually uploading anything), which is why this requires a slightly different flow.\n  const files: File[] = await openFilePicker({multiple: true});\n  // Important to fork first before trying to import, so we end up uploading to a\n  // consistent doc worker.\n  await gristDoc.forkIfNeeded();\n  const label = files.map(f => f.name).join(', ');\n  const size = files.reduce((acc, f) => acc + f.size, 0);\n  const app = gristDoc.app.topAppModel.appObs.get();\n  const progress = app ? app.notifier.createProgressIndicator(label, byteString(size)) : null;\n  const onProgress = (percent: number) => progress && progress.setProgress(percent);\n  try {\n    onProgress(0);\n    uploadResult = await uploadFiles(files, {docWorkerUrl: gristDoc.docComm.docWorkerUrl,\n                                              sizeLimit: 'import'}, onProgress);\n    onProgress(100);\n  } finally {\n    if (progress) {\n      progress.dispose();\n    }\n  }\n  // Importer disposes itself when its dialog is closed, so we do not take ownership of it.\n  await Importer.create(null, gristDoc, null, createPreview).pickAndUploadSource(uploadResult);\n}\n\n\n/**\n * Importer manages an import files to Grist tables and shows Preview\n */\nexport class Importer extends DisposableWithEvents {\n\n  private _docComm = this._gristDoc.docComm;\n  private _uploadResult?: UploadResult;\n\n  private _screen: PluginScreen;\n  private _optionsScreenHolder = Holder.create(this);\n  /**\n   * Merge information (for updating existing rows).\n   */\n  private _mergeOptions: MergeOptionsStateMap = {};\n  /**\n   * Parsing options (for parsing the file), passed to the backend directly.\n   */\n  private _parseOptions = Observable.create<ParseOptions>(this, {});\n  /**\n   * Info about the data that was parsed from the imported files (or tabs in excel).\n   */\n  private _sourceInfoArray = Observable.create<SourceInfo[]>(this, []);\n  /**\n   * Currently selected table to import (a file or a tab in excel).\n   */\n  private _sourceInfoSelected = Observable.create<SourceInfo|null>(this, null);\n\n  // Owner of the observables in the _sourceInfoArray\n  private readonly _sourceInfoHolder = Holder.create(this);\n\n  // Holder for the column mapping formula editor.\n  private readonly _formulaEditorHolder = Holder.create(this);\n\n  /**\n   * Helper for the preview section (the transformSection from the backend). The naming is misleading a bit, sorry\n   * about that, but this transform section is shown to the user as a Grid.\n   *\n   * We need a helper to make sure section is in good state before showing it to the user.\n   */\n  private _previewViewSection: Observable<ViewSectionRec|null> =\n    Computed.create(this, this._sourceInfoSelected, (use, info) => {\n      if (!info) { return null; }\n\n      const isLoading = use(info.isLoadingSection);\n      if (isLoading) { return null; }\n\n      const viewSection = use(info.transformSection);\n      return viewSection && !viewSection.isDisposed() && !use(viewSection._isDeleted) ? viewSection : null;\n    });\n\n  /**\n   * True if there is at least one request in progress to generate an import diff.\n   */\n  private _isLoadingDiff = Observable.create(this, false);\n  // Promise for the most recent generateImportDiff action.\n  private _lastGenImportDiffPromise: Promise<any>|null = null;\n\n  private _debouncedUpdateDiff = debounce(this._updateDiff, 1000, {leading: true, trailing: true});\n\n  /**\n   * Flag that is set when _updateImportDiff is called, and unset when _debouncedUpdateDiff begins executing.\n   *\n   * This is a workaround until Lodash's next release, which supports checking if a debounced function is\n   * pending. We need to know if more debounced calls are pending so that we can decide to take down the\n   * loading spinner over the preview table, or leave it up until all scheduled calls settle.\n   */\n  private _hasScheduledDiffUpdate = false;\n\n  /**\n   * destTables is a list of tables user can choose to import data into, in the format suitable for the UI to consume.\n   */\n  private _destTables = Computed.create<Array<IOptionFull<DestId>>>(this, (use) => [\n    ...use(this._gristDoc.docModel.visibleTableIds.getObservable()).map((id) => ({value: id, label: id})),\n  ]);\n\n  /**\n   * List of transform fields, i.e. those formula fields of the transform section whose values will be used to\n   * populate the destination columns.\n   * For `New table` those fields are 1-1 with columns imported from the file.\n   * For `Existing table` those are fields that simulate the target table columns.\n   * In UI we will call it `GRIST COLUMNS`, whereas source columns will be called `SOURCE COLUMNS`.\n   *\n   * This is helper that makes sure that those fields from the transformSection are in a good state to show.\n   */\n  private _transformFields: Computed<ViewFieldRec[]|null> = Computed.create(\n      this, this._sourceInfoSelected, (use, info) => {\n    const section = info && use(info.transformSection);\n    if (!section || use(section._isDeleted)) { return null; }\n    return use(use(section.viewFields).getObservable());\n  });\n\n  /**\n   * Prepare a Map, mapping of colRef of each transform column to the set of options to offer in\n   * the dropdown. The options are represented as a Map too, mapping formula to label.\n   *\n   * It only matters for importing into existing table. Transform column are perceived as GRIST COLUMNS, so those\n   * columns that will be updated or imported into.\n   *\n   * For each of such column, this will create a map of possible options to choose in from (except SKIP).\n   * The result is a map (treated as just list of Records), with a formula and label to show in the UI.\n   * This formula will be used to update the target helper column, when user selects it.\n   *\n   * For example:\n   * File has those columns: `Name`, `Age`, `City`, `Country`\n   * Existing table has those: `First name`, `Last name`.\n   *\n   * So for `First name` (and `Last name`) we will have a map of options:\n   * - `$Name` -> `Name`\n   * - `$City` -> `City`\n   * - `$Country` -> `Country`\n   * - `$Age` -> `Age`\n   * (and skip added in the UI).\n   *\n   * There are some special cases for References and column ids.\n   */\n  private _transformColImportOptions: Computed<Map<number, Map<string, string>>> = Computed.create(\n      this, this._transformFields, this._sourceInfoSelected, (use, fields, info) => {\n    if (!fields || !info) { return new Map(); }\n    return new Map(fields.map(f =>\n      [use(f.colRef), this._makeImportOptionsForCol(use(f.column), info)]));\n  });\n\n  /**\n   * List of labels of destination columns that aren't mapped to a source column, i.e. transform\n   * columns with empty formulas.\n   *\n   * In other words, this is a list of GRIST COLUMNS that are not mapped to any SOURCE COLUMNS, so\n   * columns that won't be imported.\n   */\n  private _unmatchedFieldsMap: Computed<Map<SourceInfo, string[]|null>> = Computed.create(this, use => {\n    const sources = use(this._sourceInfoArray);\n    const result = new Map<SourceInfo, string[]|null>();\n    const unmatched = (info: SourceInfo) => {\n      // If Skip import selected, ignore.\n      if (use(info.destTableId) === SKIP_TABLE) { return null; }\n      // If New table selected, ignore.\n      if (use(info.destTableId) === NEW_TABLE) { return null; }\n      // Otherwise, return list of labels of unmatched fields.\n      const section = info && use(info.transformSection);\n      if (!section || section.isDisposed() || use(section._isDeleted)) { return null; }\n      const fields = use(use(section.viewFields).getObservable());\n      const labels = fields?.filter(f => (use(use(f.column).formula).trim() === ''))\n                            .map(f => use(f.label)) ?? null;\n      return labels?.length ? labels : null;\n    };\n    for (const info of sources) {\n      result.set(info, unmatched(info));\n    }\n    return result;\n  });\n\n  constructor(private _gristDoc: GristDoc,\n              // null tells to use the built-in file picker.\n              private _importSourceElem: ImportSourceElement|null,\n              private _createPreview: CreatePreviewFunc) {\n    super();\n    const label = _importSourceElem?.importSource.label || \"Import from file\";\n    this._screen = PluginScreen.create(this, label);\n\n    this.onDispose(() => {\n      this._resetImportDiffState();\n    });\n  }\n\n  /*\n   * Uploads file to the server using the built-in file picker or a plugin instance.\n   */\n  public async pickAndUploadSource(uploadResult: UploadResult|null = null) {\n    try {\n      if (!this._importSourceElem) {\n        // Use upload result if it was passed in or the built-in file picker.\n        // On electron, it uses the native file selector (without actually uploading anything),\n        // which is why this requires a slightly different flow.\n        uploadResult = uploadResult || await selectFiles({docWorkerUrl: this._docComm.docWorkerUrl,\n                                                          multiple: true, sizeLimit: 'import'});\n      } else {\n        // Need to use plugin to get the data, and manually upload it.\n        const plugin = this._importSourceElem.plugin;\n        const handle = this._screen.renderPlugin(plugin);\n        const importSource = await this._importSourceElem.importSourceStub.getImportSource(handle);\n        plugin.removeRenderTarget(handle);\n        this._screen.renderSpinner();\n\n        if (importSource) {\n          // If data has been picked, upload it.\n          const item = importSource.item;\n          if (item.kind === \"fileList\") {\n            const files = item.files.map(({content, name}) => new File([content], name));\n            uploadResult = await uploadFiles(files, {docWorkerUrl: this._docComm.docWorkerUrl,\n                                                     sizeLimit: 'import'});\n          } else if (item.kind ===  \"url\") {\n            if (isDriveUrl(item.url)) {\n              uploadResult = await this._fetchFromDrive(item.url);\n            } else {\n              uploadResult = await fetchURL(this._docComm, item.url);\n            }\n          } else {\n            throw new Error(`Import source of kind ${(item as any).kind} are not yet supported!`);\n          }\n        }\n      }\n    } catch (err) {\n      if (err instanceof CancelledError) {\n        await this._cancelImport();\n        return;\n      }\n      if (err instanceof GDriveUrlNotSupported) {\n        await this._cancelImport();\n        throw err;\n      }\n      this._screen.renderError(err.message);\n      return;\n    }\n\n    if (uploadResult) {\n      this._uploadResult = uploadResult;\n      await this._reImport(uploadResult);\n    } else {\n      await this._cancelImport();\n    }\n  }\n\n  private _getPrimaryViewSection(tableId: string): ViewSectionRec {\n    const tableModel = this._gristDoc.getTableModel(tableId);\n    const viewRow = tableModel.tableMetaRow.primaryView.peek();\n    return viewRow.viewSections.peek().peek()[0];\n  }\n\n  private _getSectionByRef(sectionRef: number): ViewSectionRec {\n    return this._gristDoc.docModel.viewSections.getRowModel(sectionRef);\n  }\n\n  private async _updateTransformSection(sourceInfo: SourceInfo) {\n    this._resetImportDiffState();\n\n    sourceInfo.isLoadingSection.set(true);\n    sourceInfo.transformSection.set(null);\n\n    const genImporterViewPromise = this._gristDoc.docData.sendAction(\n      ['GenImporterView', sourceInfo.hiddenTableId, sourceInfo.destTableId.get(), null, null]);\n    sourceInfo.lastGenImporterViewPromise = genImporterViewPromise;\n    const transformSectionRef = (await genImporterViewPromise).viewSectionRef;\n\n    // If the request is superseded by a newer request, or the Importer is disposed, do nothing.\n    if (this.isDisposed() || sourceInfo.lastGenImporterViewPromise !== genImporterViewPromise) {\n      return;\n    }\n\n    // Otherwise, update the transform section for `sourceInfo`.\n    sourceInfo.transformSection.set(this._gristDoc.docModel.viewSections.getRowModel(transformSectionRef));\n    sourceInfo.isLoadingSection.set(false);\n\n    // Change the active section to the transform section, so that formula autocomplete works.\n    this._gristDoc.viewModel.activeSectionId(transformSectionRef);\n  }\n\n  /**\n   * Reads the configuration from the temporary table and creates a configuration map for each table.\n   */\n  private _getTransformedDataSource(upload: UploadResult): DataSourceTransformed {\n    const transforms: TransformRuleMap[] = upload.files.map((file, i) => this._createTransformRuleMap(i));\n    return {uploadId: upload.uploadId, transforms};\n  }\n\n  private _getMergeOptionMaps(upload: UploadResult): MergeOptionsMap[] {\n    return upload.files.map((_file, i) => this._createMergeOptionsMap(i));\n  }\n\n  private _createTransformRuleMap(uploadFileIndex: number): TransformRuleMap {\n    const result: TransformRuleMap = {};\n    for (const sourceInfo of this._sourceInfoArray.get()) {\n      if (sourceInfo.uploadFileIndex === uploadFileIndex) {\n        result[sourceInfo.origTableName] = this._createTransformRule(sourceInfo);\n      }\n    }\n    return result;\n  }\n\n  private _createMergeOptionsMap(uploadFileIndex: number): MergeOptionsMap {\n    const result: MergeOptionsMap = {};\n    for (const sourceInfo of this._sourceInfoArray.get()) {\n      if (sourceInfo.uploadFileIndex === uploadFileIndex) {\n        result[sourceInfo.origTableName] = this._getMergeOptionsForSource(sourceInfo);\n      }\n    }\n    return result;\n  }\n\n  private _createTransformRule(sourceInfo: SourceInfo): TransformRule {\n    const transformSection = sourceInfo.transformSection.get();\n    if (!transformSection) {\n      throw new Error(`Table ${sourceInfo.hiddenTableId} is missing transform section`);\n    }\n\n    const transformFields = transformSection.viewFields().peek();\n    const sourceFields = sourceInfo.sourceSection.viewFields().peek();\n\n    const destTableId: DestId = sourceInfo.destTableId.get();\n    return {\n      destTableId,\n      destCols: transformFields.map<TransformColumn>((field) => ({\n        label: field.label(),\n        colId: destTableId ? field.colId() : null, // if inserting into new table, colId isn't defined\n        type: field.column().type(),\n        widgetOptions: field.column().widgetOptions(),\n        formula: field.column().formula()\n      })),\n      sourceCols: sourceFields.map((field) => field.colId())\n    };\n  }\n\n  private _getMergeOptionsForSource(sourceInfo: SourceInfo): MergeOptions|undefined {\n    const mergeOptions = this._mergeOptions[sourceInfo.hiddenTableId];\n    if (!mergeOptions) { return undefined; }\n\n    const {updateExistingRecords, mergeCols, mergeStrategy} = mergeOptions;\n    return {\n      mergeCols: updateExistingRecords.get() ? mergeCols.get() : [],\n      mergeStrategy: mergeStrategy.get()\n    };\n  }\n\n  private _getHiddenTableIds(): string[] {\n    return this._sourceInfoArray.get().map((si: SourceInfo) => si.hiddenTableId);\n  }\n\n  private async _reImport(upload: UploadResult) {\n    this._screen.renderSpinner();\n    this._resetImportDiffState();\n    try {\n      // Initialize parsing options with NUM_ROWS=0 (a whole file).\n      const parseOptions = {...this._parseOptions.get(), NUM_ROWS: 0};\n\n      // Create the temporary tables and import the files into it.\n      const importResult: ImportResult = await this._docComm.importFiles(\n        this._getTransformedDataSource(upload), parseOptions, this._getHiddenTableIds());\n\n      // Update the parsing options with the actual one used by the importer (it might have changed)\n      this._parseOptions.set(importResult.options);\n\n      this._sourceInfoHolder.clear();\n      const owner = MultiHolder.create(this._sourceInfoHolder);\n\n      // Read the information from what was imported in a better representation and some metadata, we\n      // will allow to change by the user.\n      this._sourceInfoArray.set(importResult.tables.map((info: ImportTableResult) => ({\n        hiddenTableId: info.hiddenTableId,\n        uploadFileIndex: info.uploadFileIndex,\n        origTableName: info.origTableName,\n        // This is the section with the data imported.\n        sourceSection: this._getPrimaryViewSection(info.hiddenTableId)!,\n        // This is the section created every time user changes the configuration, used for the preview.\n        transformSection: Observable.create(owner, this._getSectionByRef(info.transformSectionRef)),\n        // This is the table where the data will be imported, either a new table or an existing one.\n        // If a new one, it will be hidden for a while, until the user confirms the import.\n        destTableId: Observable.create<DestId>(owner, info.destTableId ?? NEW_TABLE),\n        // Helper to show the spinner.\n        isLoadingSection: Observable.create(owner, false),\n        // and another one.\n        lastGenImporterViewPromise: null,\n        // Which view to show or was shown previously.\n        selectedView: Observable.create(owner, TABLE_MAPPING),\n        // List of customized\n        customizedColumns: Observable.create(owner, new Set<string>()),\n      })));\n\n      if (this._sourceInfoArray.get().length === 0) {\n        throw new Error(\"No data was imported\");\n      }\n\n      this._prepareMergeOptions();\n\n      // Select the first sourceInfo to show in preview.\n      this._sourceInfoSelected.set(this._sourceInfoArray.get()[0] || null);\n\n      // And finally render the main screen.\n      this._renderMain(upload);\n    } catch (e) {\n      console.warn(\"Import failed\", e);\n      this._screen.renderError(e.message);\n    }\n  }\n\n  /**\n   * Create a merging options. This is an extension to the configuration above (_sourceInfoArray).\n   * By default, we are pointing to new tables, so it is empty. This method is used to communicate\n   * with the user about what they want and how they want to merge the data.\n   * For an existing table, it will be filled by the user with columns to merge on (how to identify\n   * existing rows).\n   */\n  private _prepareMergeOptions() {\n    this._mergeOptions = {};\n    this._getHiddenTableIds().forEach(tableId => {\n      this._mergeOptions[tableId] = {\n        // By default no, as we are importing into new tables.\n        updateExistingRecords: Observable.create(null, false),\n        // Empty, user will select it for existing table.\n        mergeCols: obsArray(),\n        // Strategy for the backend (from UI we don't care about it).\n        mergeStrategy: Observable.create(null, {type: 'replace-with-nonblank-source'}),\n        // Helper to show the validation that something is wrong with the columns selected to merge.\n        hasInvalidMergeCols: Observable.create(null, false),\n      };\n    });\n  }\n\n  private async _maybeFinishImport(upload: UploadResult) {\n    const isConfigValid = this._validateImportConfiguration();\n    if (!isConfigValid) { return; }\n\n    this._screen.renderSpinner();\n    this._resetImportDiffState();\n\n    const parseOptions = {...this._parseOptions.get(), NUM_ROWS: 0};\n    const mergeOptionMaps = this._getMergeOptionMaps(upload);\n\n    const importResult: ImportResult = await this._docComm.finishImportFiles(\n      this._getTransformedDataSource(upload), this._getHiddenTableIds(), {mergeOptionMaps, parseOptions});\n\n    // This is not hidden table anymore, it was renamed to the name of the final table.\n    if (importResult.tables[0]?.hiddenTableId) {\n      const tableRowModel = this._gristDoc.docModel.dataTables[importResult.tables[0].hiddenTableId].tableMetaRow;\n      const primaryViewId = tableRowModel.primaryViewId();\n      if (primaryViewId) {\n        // Switch page if there is a sensible one to switch to.\n        await this._gristDoc.openDocPage(primaryViewId);\n      }\n    }\n    this._screen.close();\n    this.dispose();\n  }\n\n  private async _cancelImport() {\n    this._resetImportDiffState();\n    // Formula editor cleanup needs to happen before the hidden tables are removed.\n    this._formulaEditorHolder.dispose();\n    if (this._uploadResult) {\n      await this._docComm.cancelImportFiles(this._uploadResult.uploadId, this._getHiddenTableIds());\n    }\n    this._screen.close();\n    this.dispose();\n  }\n\n  private _resetTableMergeOptions(tableId: string) {\n    this._mergeOptions[tableId]?.mergeCols.set([]);\n  }\n\n  private _validateImportConfiguration(): boolean {\n    let isValid = true;\n\n    const selectedSourceInfo = this._sourceInfoSelected.get();\n    if (!selectedSourceInfo) { return isValid; } // No configuration to validate.\n\n    const mergeOptions = this._mergeOptions[selectedSourceInfo.hiddenTableId];\n    if (!mergeOptions) { return isValid; } // No configuration to validate.\n\n    const destTableId = selectedSourceInfo.destTableId.get();\n    const {updateExistingRecords, mergeCols, hasInvalidMergeCols} = mergeOptions;\n\n    // Check that at least one merge column was selected (if merging into an existing table).\n    if (destTableId !== null && updateExistingRecords.get() && mergeCols.get().length === 0) {\n      hasInvalidMergeCols.set(true);\n      isValid = false;\n    }\n\n    return isValid;\n  }\n\n  private _buildModalTitle(rightElement?: DomContents) {\n    const title =  this._importSourceElem ? this._importSourceElem.importSource.label : 'Import from file';\n    return cssModalHeader(cssModalTitle(title), rightElement);\n  }\n\n  private _buildStaticTitle() {\n    return cssStaticHeader(cssModalTitle(t('Import from file')));\n  }\n\n  /**\n   * Triggers an update of the import diff in the preview table. When called in quick succession,\n   * only the most recent call will result in an update being made to the preview table.\n   *\n   * @param {SourceInfo} info The source to update the diff for.\n   */\n  private async _updateImportDiff(info: SourceInfo) {\n    const {updateExistingRecords, mergeCols} = this._mergeOptions[info.hiddenTableId]!;\n    const isMerging = info.destTableId && updateExistingRecords.get() && mergeCols.get().length > 0;\n    if (!isMerging && this._gristDoc.comparison) {\n      // If we're not merging but diffing is enabled, disable it; since `comparison` isn't\n      // currently observable, we'll wrap the modification around the `_isLoadingDiff`\n      // flag, which will force the preview table to re-render with diffing disabled.\n      this._isLoadingDiff.set(true);\n      this._gristDoc.comparison = null;\n      this._isLoadingDiff.set(false);\n    }\n\n    // If we're not merging, no diff is shown, so don't schedule an update for one.\n    if (!isMerging) { return; }\n\n    this._hasScheduledDiffUpdate = true;\n    this._isLoadingDiff.set(true);\n    await this._debouncedUpdateDiff(info);\n  }\n\n  /**\n   * NOTE: This method should not be called directly. Instead, use _updateImportDiff above, which\n   * wraps this method and calls a debounced version of it.\n   *\n   * Triggers an update of the import diff in the preview table. When called in quick succession,\n   * only the most recent call will result in an update being made to the preview table.\n   *\n   * @param {SourceInfo} info The source to update the diff for.\n   */\n  private async _updateDiff(info: SourceInfo) {\n    // Reset the flag tracking scheduled updates since the debounced update has started.\n    this._hasScheduledDiffUpdate = false;\n\n    // Request a diff of the current source and wait for a response.\n    const genImportDiffPromise = this._docComm.generateImportDiff(info.hiddenTableId,\n      this._createTransformRule(info), this._getMergeOptionsForSource(info)!);\n    this._lastGenImportDiffPromise = genImportDiffPromise;\n    const diff = await genImportDiffPromise;\n\n    // If the request is superseded by a newer request, or the Importer is disposed, do nothing.\n    if (this.isDisposed() || genImportDiffPromise !== this._lastGenImportDiffPromise) { return; }\n\n    // Put the document in comparison mode with the diff data.\n    this._gristDoc.comparison = diff;\n\n    // If more updates where scheduled since we started the update, leave the loading spinner up.\n    if (!this._hasScheduledDiffUpdate) {\n      this._isLoadingDiff.set(false);\n    }\n  }\n\n  /**\n   * Resets all state variables related to diffs to their default values.\n   */\n  private _resetImportDiffState() {\n    this._cancelPendingDiffRequests();\n    this._gristDoc.comparison = null;\n  }\n\n  /**\n   * Effectively cancels all pending diff requests by causing their fulfilled promises to\n   * be ignored by their attached handlers. Since we can't natively cancel the promises, this\n   * is functionally equivalent to canceling the outstanding requests.\n   */\n  private _cancelPendingDiffRequests() {\n    this._debouncedUpdateDiff.cancel();\n    this._lastGenImportDiffPromise = null;\n    this._hasScheduledDiffUpdate = false;\n    this._isLoadingDiff.set(false);\n  }\n\n  // The importer state showing import in progress, with a list of tables, and a preview.\n  private _renderMain(upload: UploadResult) {\n    const schema = this._parseOptions.get().SCHEMA;\n    const header = this._buildModalTitle();\n    const options = schema ? cssActionLink(cssLinkIcon('Settings'), 'Import options',\n      testId('options-link'),\n      dom.on('click', () => this._renderParseOptions(schema, upload))\n    ) : null;\n\n    const selectTab = async (info: SourceInfo) => {\n      // Ignore click if source is already selected.\n      if (info === this._sourceInfoSelected.get()) { return; }\n      // Prevent changing selected source if current configuration is invalid.\n      if (!this._validateImportConfiguration()) { return; }\n      this._cancelPendingDiffRequests();\n      this._sourceInfoSelected.set(info);\n      await this._updateImportDiff(info);\n    };\n\n    const tabs = cssTableList(\n      dom.forEach(this._sourceInfoArray, (info) => {\n        const owner = MultiHolder.create(null);\n        const destTableId = Computed.create(owner, (use) => use(info.destTableId));\n        destTableId.onWrite(async (destId) => {\n          // Prevent changing destination of un-selected sources if current configuration is invalid.\n          if (info !== this._sourceInfoSelected.get() && !this._validateImportConfiguration()) {\n            return;\n          }\n          info.destTableId.set(destId);\n          this._resetTableMergeOptions(info.hiddenTableId);\n          if (destId !== SKIP_TABLE) {\n            await this._updateTransformSection(info);\n          }\n        });\n\n        // If this is selected source.\n        const isSelected = Computed.create(owner, (use) => use(this._sourceInfoSelected) === info);\n\n        const unmatchedCount = Computed.create(owner, use => {\n          const map = use(this._unmatchedFieldsMap);\n          return map.get(info)?.length ?? 0;\n        });\n\n        return cssTabItem(\n          dom.autoDispose(owner),\n          cssBorderBottom(),\n          cssTabItem.cls('-not-selected', not(isSelected)),\n          testId('source'),\n          testId('source-selected', isSelected),\n          testId('source-not-selected', not(isSelected)),\n          cssTabItemContent(\n            cssFileTypeIcon(getSourceFileExtension(info, upload),\n              cssFileTypeIcon.cls('-active', isSelected),\n            ),\n            cssTabItemContent.cls('-selected', isSelected),\n            cssTableLine(cssTableSource(\n              getSourceDescription(info, upload),\n              testId('from'),\n              overflowTooltip(),\n            )),\n            dom.on('click', () => selectTab(info)),\n          ),\n          dom.maybe(unmatchedCount, (count) => cssError(\n            'Exclamation',\n            testId('error'),\n            hoverTooltip(t('{{count}} unmatched field', {count}))\n          )),\n        );\n      }),\n    );\n    const previewAndConfig = dom.maybeOwned(this._sourceInfoSelected, (owner, info) => {\n      const {mergeCols, updateExistingRecords, hasInvalidMergeCols} = this._mergeOptions[info.hiddenTableId]!;\n\n      // Computed for transform section if we have destination table selected.\n      const configSection = Computed.create(owner,\n        use => use(info.destTableId) && use(info.transformSection) ? use(info.transformSection) : null);\n\n      // Computed to show the loader while we are waiting for the preview.\n      const showLoader = Computed.create(owner, use => {\n        return use(this._isLoadingDiff) || !use(this._previewViewSection);\n      });\n\n      // The same computed as configSection, but will evaluate to null while we are waiting for the preview\n      const previewSection = Computed.create(owner, use => {\n        return use(showLoader) ? null : use(this._previewViewSection);\n      });\n\n      // Use helper for checking if destination is selected.\n      const isSelected = (destId: DestId) => (use: UseCBOwner) => use(info.destTableId) === destId;\n\n      // True if user selected `Skip import`\n      const isSkipTable = Computed.create(owner, isSelected(SKIP_TABLE));\n\n      // True if user selected a valid destination table.\n      const isMergeTable = Computed.create(owner, use => ![NEW_TABLE, SKIP_TABLE].includes(use(info.destTableId)));\n\n      // Changes the class if the item is selected. Creates a dom method that can be attached to element.\n      const selectIfDestIs = (destId: DestId) => cssDestination.cls('-selected', isSelected(destId));\n\n      // Helper to toggle visibility if target is selected.\n      const visibleIfDestIs = (destId: DestId) => dom.show(isSelected(destId));\n\n      // Creates a click handler that changes the destination table to the given value.\n      const onClickChangeDestTo = (destId: DestId) => dom.on('click', async () => {\n        if (info !== this._sourceInfoSelected.get() && !this._validateImportConfiguration()) {\n          return;\n        }\n        info.selectedView.set(TABLE_MAPPING);\n        info.destTableId.set(destId);\n        this._resetTableMergeOptions(info.hiddenTableId);\n        if (destId !== SKIP_TABLE) {\n          await this._updateTransformSection(info);\n        }\n      });\n\n      // Should we show the right panel with the column mapping.\n      const showRightPanel = Computed.create(owner, use => {\n        return use(isMergeTable) && use(info.selectedView) === COLUMN_MAPPING;\n      });\n\n      // Handler to switch the view, between destination and column mapping panes.\n      const onClickShowView = (view: ViewType) => dom.on('click', () => {\n        info.selectedView.set(view);\n      });\n\n      // Pattern to create a computed value that can create and dispose objects in its callback.\n      Computed.create(owner, use => {\n        // This value must be returned for this pattern to work.\n        const holder = MultiHolder.create(use.owner);\n        // Now we can safely take ownership of things we create here - the subscriber.\n        if (use(configSection)) {\n          holder.autoDispose(updateExistingRecords.addListener(async () => {\n            if (holder.isDisposed()) { return; }\n            await this._updateImportDiff(info);\n          }));\n        }\n        return holder;\n      });\n\n      return cssConfigAndPreview(\n        cssConfigPanel(\n          cssConfigPanel.cls('-right', showRightPanel),\n          cssConfigLeft(\n            cssTitle('Destination table', testId('target-top')),\n            cssDestinationWrapper(cssDestination(\n              cssPageIcon('Plus'),\n              dom('span', 'New Table'),\n              selectIfDestIs(NEW_TABLE),\n              onClickChangeDestTo(NEW_TABLE),\n              testId('target'),\n              testId('target-new-table'),\n              testId('target-selected', isSelected(NEW_TABLE)),\n            )),\n            dom.maybe(use => use(this._sourceInfoArray).length > 1, () => [\n              cssDestinationWrapper(cssDestination(\n                cssPageIcon('CrossBig'),\n                dom('span', t('Skip Import')),\n                selectIfDestIs(SKIP_TABLE),\n                onClickChangeDestTo(SKIP_TABLE),\n                testId('target'),\n                testId('target-skip'),\n                testId('target-selected', isSelected(SKIP_TABLE)),\n              )),\n            ]),\n            dom.forEach(this._destTables, (destTable) => {\n              return cssDestinationWrapper(\n                testId('target'),\n                testId('target-existing-table'),\n                testId('target-selected', isSelected(destTable.value)),\n                cssDestination(\n                  cssPageIcon('TypeTable'),\n                  dom('span', destTable.label),\n                  selectIfDestIs(destTable.value),\n                  onClickChangeDestTo(destTable.value),\n                  onClickShowView(COLUMN_MAPPING),\n                ),\n                cssDetailsIcon('ArrowRight',\n                  onClickShowView(COLUMN_MAPPING),\n                  visibleIfDestIs(destTable.value),\n                  hoverTooltip(t('Column mapping')),\n                  testId('target-column-mapping'),\n                )\n              );\n            }),\n          ),\n          cssConfigRight(\n            cssNavigation(\n              cssFlexBaseline(\n                cssDestinationTableSecondary(\n                  cssNavigationIcon('ArrowLeft'),\n                  t('Destination table'),\n                  onClickShowView(TABLE_MAPPING),\n                  testId('table-mapping')\n                ),\n                cssSlash(' / '),\n                cssColumnMappingNav(t('Column Mapping')),\n              )\n            ),\n            cssMergeOptions(\n              dom.maybe(isMergeTable, () => cssMergeOptionsToggle(labeledSquareCheckbox(\n                updateExistingRecords,\n                t(\"Update existing records\"),\n                testId('update-existing-records')\n              ))),\n              dom.maybe(configSection, (section) => {\n                return dom.maybeOwned(updateExistingRecords, (owner2) => {\n                  owner2.autoDispose(mergeCols.addListener(async val => {\n                    // Reset the error state of the multiSelect on change.\n                    if (val.length !== 0 && hasInvalidMergeCols.get()) {\n                      hasInvalidMergeCols.set(false);\n                    }\n                    await this._updateImportDiff(info);\n                  }));\n                  return [\n                    cssMergeOptionsMessage(\n                      t(\"Merge rows that match these fields:\"),\n                      testId('merge-fields-message')\n                    ),\n                    multiSelect(\n                      mergeCols,\n                      section.viewFields().peek().map(f => ({label: f.label(), value: f.colId()})) ?? [],\n                      {\n                        placeholder: t(\"Select fields to match on\"),\n                        error: hasInvalidMergeCols\n                      },\n                      testId('merge-fields-select')\n                    )\n                  ];\n                });\n              }),\n            ),\n            dom.maybeOwned(configSection, (owner1, section) => {\n              owner1.autoDispose(updateExistingRecords.addListener(async () => {\n                await this._updateImportDiff(info);\n              }));\n              return dom('div',\n                cssColumnMatchHeader(\n                  dom('span', t('Grist column')),\n                  dom('div', null),\n                  dom('span', t('Source column')),\n                ),\n                dom.forEach(fromKo(section.viewFields().getObservable()), field => {\n                  const owner2 = MultiHolder.create(null);\n                  const isCustomFormula = Computed.create(owner2, use => {\n                    return use(info.customizedColumns).has(field.colId());\n                  });\n                  return cssColumnMatchRow(\n                    testId('column-match-source-destination'),\n                    dom.autoDispose(owner2),\n                    dom.domComputed(field.label, () => cssDestinationFieldLabel(\n                      dom.text(field.label),\n                      overflowTooltip(),\n                      testId('column-match-destination'),\n                    )),\n                    cssIcon180('ArrowRightOutlined'),\n                    dom.domComputedOwned(isCustomFormula, (owner3, isCustom) => {\n                      if (isCustom) {\n                        return this._buildCustomFormula(owner3, field, info);\n                      } else {\n                        return this._buildSourceSelector(owner3, field, info);\n                      }\n                    }),\n                    dom('div',\n                      dom.maybe(isCustomFormula, () => icon('Revert',\n                        dom.style('cursor', 'pointer'),\n                        hoverTooltip(t('Revert')),\n                        dom.on('click', async () => {\n                          toggleCustomized(info, field.colId(), false);\n                          // Try to set the default label.\n                          const transformCol = field.column.peek();\n                          const possibilities = this._transformColImportOptions.get().get(transformCol.getRowId())\n                                                ?? new Map<string, string>();\n                          const matched = [...possibilities.entries()].find(([, v]) => v === transformCol.label.peek());\n                          if (matched) {\n                            await this._setColumnFormula(transformCol, matched[0], info);\n                          } else {\n                            await this._gristDoc.clearColumns([field.colRef()]);\n                          }\n                        }),\n                      )),\n                    ),\n                  );\n                }),\n                testId('column-match-options'),\n              );\n            }),\n          )\n        ),\n        cssPreviewColumn(\n          dom.maybe(showLoader, () => cssPreviewSpinner(loadingSpinner(), testId('preview-spinner'))),\n          dom.maybe(previewSection, () => [\n            cssOptions(\n              dom.domComputed(info.destTableId, destId => cssTableName(\n                destId === NEW_TABLE ? t(\"New Table\") :\n                destId === SKIP_TABLE ? t(\"Skip Import\") :\n                dom.domComputed(this._destTables, list =>\n                  list.find(dt => dt.value === destId)?.label ?? t(\"New Table\")\n                )\n              )),\n              options,\n            )\n          ]),\n          cssWarningText(dom.text(use => use(this._parseOptions)?.WARNING || \"\"), testId('warning')),\n          dom.domComputed(use => {\n            if (use(isSkipTable)) {\n              return cssOverlay(t('Skip Table on Import'), testId('preview-overlay'));\n            }\n            const section = use(previewSection);\n            if (!section || section.isDisposed()) { return null; }\n            const gridView = this._createPreview(section);\n            return cssPreviewGrid(\n              dom.autoDispose(gridView),\n              gridView.viewPane,\n              testId('preview'),\n            );\n          })\n        )\n      );\n    });\n\n    const buttons = cssImportButtons(cssImportButtonsLine(\n      bigPrimaryButton('Import',\n        dom.on('click', () => this._maybeFinishImport(upload)),\n        dom.boolAttr('disabled', use => {\n          return use(this._previewViewSection) === null ||\n                 use(this._sourceInfoArray).every(i => use(i.destTableId) === SKIP_TABLE);\n        }),\n        baseTestId('modal-confirm'),\n      ),\n      bigBasicButton('Cancel',\n        dom.on('click', () => this._cancelImport()),\n        baseTestId('modal-cancel'),\n      ),\n      dom.domComputed(this._unmatchedFieldsMap, fields => {\n        const piles: HTMLElement[] = [];\n        let count = 0;\n        for(const [info, list] of fields) {\n          if (!list?.length) { continue; }\n          count += list.length;\n          piles.push(cssUnmatchedFieldsList(\n            list.join(', '),\n            dom.on('click', () => selectTab(info)),\n            hoverTooltip(getSourceDescription(info, upload)),\n          ));\n        }\n        if (!count) { return null; }\n        return cssUnmatchedFields(\n          cssUnmatchedFieldsIntro(\n            cssUnmatchedIcon('Exclamation'),\n            t('{{count}} unmatched field in import', {count}), ': ',\n          ),\n          ...piles,\n          testId('unmatched-fields'),\n        );\n      }),\n    ));\n    const body = cssContainer(\n      {tabIndex: '-1'},\n      header,\n      cssPreviewWrapper(\n        cssTabsWrapper(\n          tabs,\n        ),\n        previewAndConfig,\n      ),\n      buttons,\n    );\n    this._addFocusLayer(body);\n    this._screen.render(body, {\n      fullscreen: true,\n      fullbody: true\n    });\n  }\n\n  private _makeImportOptionsForCol(gristCol: ColumnRec, info: SourceInfo) {\n    const options = new Map<string, string>();  // Maps formula to label.\n    const sourceFields = info.sourceSection.viewFields.peek().peek();\n\n    // Reference columns are populated using lookup formulas, so figure out now if this is a\n    // reference column, and if so, its destination table and the lookup column ID.\n    const refTable = gristCol.refTable.peek();\n    const refTableId = refTable ? refTable.tableId.peek() : undefined;\n\n    const visibleColId = gristCol.visibleColModel.peek().colId.peek();\n    const isRefDest = Boolean(info.destTableId.get() && gristCol.pureType.peek() === 'Ref');\n\n    for (const sourceField of sourceFields) {\n      const sourceCol = sourceField.column.peek();\n      const sourceId = sourceCol.colId.peek();\n      const sourceLabel = sourceCol.label.peek();\n      if (isRefDest && visibleColId) {\n        const formula = `${refTableId}.lookupOne(${visibleColId}=$${sourceId}) or ($${sourceId} and str($${sourceId}))`;\n        options.set(formula, sourceLabel);\n      } else {\n        options.set(`$${sourceId}`, sourceLabel);\n      }\n      if (isRefDest && ['Numeric', 'Int'].includes(sourceCol.type.peek())) {\n        options.set(`${refTableId}.lookupOne(id=NUM($${sourceId})) or ($${sourceId} and str(NUM($${sourceId})))`,\n          `${sourceLabel} (as row ID)`);\n      }\n    }\n    return options;\n  }\n\n  private _makeImportOptionsMenu(transformCol: ColumnRec, others: [string, string][], info: SourceInfo) {\n    return [\n      menuItem(() => this._setColumnFormula(transformCol, null, info),\n        'Skip',\n        testId('column-match-menu-item')),\n      others.length ? menuDivider() : null,\n      ...others.map(([formula, label]) =>\n        menuItem(() => this._setColumnFormula(transformCol, formula, info),\n          label,\n          testId('column-match-menu-item'))\n      )\n    ];\n  }\n\n  private _addFocusLayer(container: HTMLElement) {\n    dom.autoDisposeElem(container, new FocusLayer({\n      defaultFocusElem: container,\n      allowFocus: (elem) => (elem !== document.body),\n      onDefaultFocus: () => this.trigger('importer_focus'),\n    }));\n  }\n\n  /**\n   * Updates the formula on column `colRef` to `formula`, when user wants to match it to a source column.\n   */\n  private async _setColumnFormula(transformCol: ColumnRec, formula: string|null, info: SourceInfo) {\n    const transformColRef = transformCol.id();\n    const customized = info.customizedColumns.get();\n    customized.delete(transformCol.colId());\n    info.customizedColumns.set(customized);\n    if (formula === null) {\n      await this._gristDoc.clearColumns([transformColRef], {keepType: true});\n    } else {\n      await this._gristDoc.docModel.columns.sendTableAction(\n        ['UpdateRecord', transformColRef, { formula, isFormula: true }]);\n    }\n    await this._updateImportDiff(info);\n  }\n\n  /**\n   * Opens a formula editor for `field` over `refElem`.\n   */\n  private _activateFormulaEditor(refElem: Element, field: ViewFieldRec, onSave: (formula: string) => Promise<void>) {\n    const vsi = this._gristDoc.viewModel.activeSection().viewInstance();\n    const editRow = vsi?.moveEditRowToCursor();\n    const editorHolder = openFormulaEditor({\n      gristDoc: this._gristDoc,\n      column: field.column(),\n      editingFormula: field.editingFormula,\n      refElem,\n      editRow,\n      canDetach: false,\n      setupCleanup: this._setupFormulaEditorCleanup.bind(this),\n      onSave: async (column, formula) => {\n        if (formula === column.formula.peek()) { return; }\n        // Sorry for this hack. We need to store somewhere an info that the formula was edited\n        // unfortunately, we don't have a better place to store it. So we will save this by setting\n        // display column to the same column. This won't break anything as this is a default value.\n        await column.updateColValues({formula});\n        await onSave(formula);\n      }\n    });\n    this._formulaEditorHolder.autoDispose(editorHolder);\n  }\n\n  /**\n   * Called by _activateFormulaEditor to initialize cleanup\n   * code for when the formula editor is closed. Registers and\n   * unregisters callbacks for saving edits when the editor loses\n   * focus.\n   */\n  private _setupFormulaEditorCleanup(\n    owner: Disposable, _doc: GristDoc, editingFormula: ko.Computed<boolean>, _saveEdit: () => Promise<unknown>\n  ) {\n    const saveEdit = () => _saveEdit().catch(reportError);\n\n    // Whenever focus returns to the dialog, close the editor by saving the value.\n    this.on('importer_focus', saveEdit);\n\n    owner.onDispose(() => {\n      this.off('importer_focus', saveEdit);\n      editingFormula(false);\n    });\n  }\n\n  /**\n   * Builds an editable formula component that is displayed\n   * in the column mapping section of Importer. On click, opens\n   * an editor for the formula for `column`.\n   */\n  private _buildSourceSelector(owner: MultiHolder, field: ViewFieldRec, info: SourceInfo) {\n    const anyOtherColumns = Computed.create(owner, use => {\n      const transformCol = field.column.peek();\n      const options = use(this._transformColImportOptions)!.get(transformCol.getRowId()) ?? new Map<string, string>();\n      const otherFilter = ([formula]: [string, string] ) => {\n        // Notice how this is only reactive to the formula value, every other observable is\n        // just picked without being tracked. This is because we only want to recompute this\n        // when the formula is changed (so the target column is changed). If anything other is\n        // changed, we don't care here as this whole computed will be recreated by the caller.\n        const myFormula = use(transformCol.formula);\n        const anyOther = info.transformSection.get()?.viewFields.peek().all()\n            .filter(f => f.column.peek() !== transformCol)\n            .map(f => use(f.column.peek().formula));\n        // If we picked this formula thats ok.\n        if (formula === myFormula) { return true; }\n        // If any other column picked this formula, then we should not show it.\n        if (anyOther?.includes(formula)) { return false; }\n        // Otherwise, show it.\n        return true;\n      };\n      const possibleSources = Array.from(options).filter(otherFilter);\n\n      return this._makeImportOptionsMenu(transformCol, possibleSources, info);\n    });\n\n    const selectedSource = Computed.create(owner, use => {\n      const column = use(field.column);\n      const importOptions = use(this._transformColImportOptions).get(column.getRowId());\n      // Now translate the formula generated (which is unique) to the source label.\n      const label = importOptions?.get(use(column.formula)) || null;\n      return label;\n    });\n    const selectedSourceText = Computed.create(owner, use => use(selectedSource) || t('Skip'));\n\n    const selectedOption = cssSelected(\n      dom.text(selectedSourceText),\n      testId('column-match-formula'),\n      cssSelected.cls('-skip', not(selectedSource)),\n      overflowTooltip(),\n    );\n    const otherColsOptions = dom.domComputed(anyOtherColumns, x => x);\n    const formulaOption = selectOption(\n      () => {\n        this._activateFormulaEditor(selectMenuElement, field, async (newFormula) => {\n          toggleCustomized(info, field.colId.peek(), !!newFormula);\n          await this._updateImportDiff(info);\n        });\n      },\n      \"Apply Formula\",\n      \"Lighting\",\n      testId('apply-formula'),\n      cssGreenIcon.cls(''),\n    );\n    const selectMenuElement = selectMenu(selectedOption, () => [\n      otherColsOptions,\n      menuDivider(),\n      formulaOption,\n    ], testId('column-match-source'));\n    return selectMenuElement;\n  }\n\n  /**\n   * Builds an editable formula component that is displayed\n   * in the column mapping section of Importer. On click, opens\n   * an editor for the formula for `column`.\n   */\n  private _buildCustomFormula(owner: MultiHolder, field: ViewFieldRec, info: SourceInfo) {\n    const formula = Computed.create(owner, use => {\n      const column = use(field.column);\n      return use(column.formula);\n    });\n    const codeOptions = {gristTheme: this._gristDoc.currentTheme, placeholder: 'Skip', maxLines: 1};\n    return cssFieldFormula(formula, codeOptions,\n      dom.cls('disabled'),\n      dom.cls('formula_field_sidepane'),\n      {tabIndex: '-1'},\n      dom.on('focus', (_ev, elem) => this._activateFormulaEditor(elem, field, async (newFormula) => {\n        toggleCustomized(info, field.colId.peek(), !!newFormula);\n        await this._updateImportDiff(info);\n      })),\n      testId('column-match-formula'),\n    );\n  }\n\n  // The importer state showing parse options that may be changed.\n  private _renderParseOptions(schema: ParseOptionSchema[], upload: UploadResult) {\n    const anotherScreen = PluginScreen.create(this._optionsScreenHolder, 'Import from file');\n    anotherScreen.showImportDialog({\n      noClickAway: false,\n      noEscapeKey: false,\n    });\n    anotherScreen.render([\n      this._buildStaticTitle(),\n      dom.create(buildParseOptionsForm, schema, this._parseOptions.get() as ParseOptionValues,\n        (p: ParseOptions) => {\n          anotherScreen.dispose();\n          this._parseOptions.set(p);\n          // Drop what we previously matched because we may have different columns.\n          // If user manually matched, then changed import options, they'll have to re-match; when\n          // columns change at all, the alternative has incorrect columns in UI and is more confusing.\n          this._sourceInfoArray.set([]);\n          this._reImport(upload).catch((err) => reportError(err));\n        },\n        () => {\n          anotherScreen.dispose();\n          this._renderMain(upload);\n        },\n      )\n    ]);\n  }\n\n  private async _fetchFromDrive(itemUrl: string) {\n    // First we will assume that this is public file, so no need to ask for permissions.\n    try {\n      return await fetchURL(this._docComm, itemUrl);\n    } catch(err) {\n      // It is not a public file or the file id in the url is wrong,\n      // but we have no way to check it, so we assume that it is private file\n      // and ask the user for the permission (if we are configured to do so)\n      if (canReadPrivateFiles()) {\n        const options: FetchUrlOptions = {};\n        try {\n          // Request for authorization code from Google.\n          const code = await getGoogleCodeForReading(this);\n          options.googleAuthorizationCode = code;\n        } catch(permError) {\n          if (permError?.message === ACCESS_DENIED) {\n            // User declined to give us full readonly permission, fallback to GoogleDrive plugin\n            // or cancel import if GoogleDrive plugin is not configured.\n            throw new GDriveUrlNotSupported(itemUrl);\n          } else if(permError?.message === AUTH_INTERRUPTED) {\n            // User closed the window - we assume he doesn't want to continue.\n            throw new CancelledError();\n          } else {\n            // Some other error happened during authentication, report to user.\n            throw err;\n          }\n        }\n        // Download file from private drive, if it fails, report the error to user.\n        return await fetchURL(this._docComm, itemUrl, options);\n      } else {\n        // We are not allowed to ask for full readonly permission, fallback to GoogleDrive plugin.\n        throw new GDriveUrlNotSupported(itemUrl);\n      }\n    }\n  }\n}\n\n// Used for switching from URL plugin to Google drive plugin.\nclass GDriveUrlNotSupported extends Error {\n  constructor(public url: string) {\n    super(`This url ${url} is not supported`);\n  }\n}\n\n// Used to cancel import (close the dialog without any error).\nclass CancelledError extends Error {\n}\n\nfunction getSourceDescription(sourceInfo: SourceInfo, upload: UploadResult) {\n  const origName = upload.files[sourceInfo.uploadFileIndex].origName;\n  return sourceInfo.origTableName ? `${sourceInfo.origTableName} - ${origName}` : origName;\n}\n\nfunction getSourceFileExtension(sourceInfo: SourceInfo, upload: UploadResult) {\n  const origName = upload.files[sourceInfo.uploadFileIndex].origName;\n  return origName.includes(\".\") ? origName.split('.').pop() : \"file\";\n}\n\nconst cssContainer = styled('div', `\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  outline: unset;\n`);\n\nconst cssActionLink = styled('div', `\n  display: inline-flex;\n  align-items: center;\n  cursor: pointer;\n  color: ${theme.controlFg};\n  --icon-color: ${theme.controlFg};\n  &:hover {\n    color: ${theme.controlHoverFg};\n    --icon-color: ${theme.controlHoverFg};\n  }\n`);\n\nconst cssLinkIcon = styled(icon, `\n  flex: none;\n  margin-right: 4px;\n`);\n\nconst cssStaticHeader = styled('div', `\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 16px;\n  & > .${cssModalTitle.className} {\n    margin-bottom: 0px;\n  }\n`);\n\nconst cssModalHeader = styled(cssStaticHeader, `\n  padding-left: var(--css-modal-dialog-padding-horizontal, 0px);\n  padding-right: var(--css-modal-dialog-padding-horizontal, 0px);\n  padding-top: var(--css-modal-dialog-padding-vertical, 0px);\n`);\n\nconst cssPreviewWrapper = styled('div', `\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n`);\n\nconst cssBorderBottom = styled('div', `\n  border-bottom: 1px solid ${theme.importerTableInfoBorder};\n  display: none;\n  height: 0px;\n  bottom: 0px;\n  position: absolute;\n  width: 100%;\n`);\n\n\nconst cssFileTypeIcon = styled('div', `\n  background: ${theme.importerInactiveFileBg};\n  color: ${theme.importerInactiveFileFg};\n  border-radius: 4px;\n  height: 2em;\n  text-align: center;\n  display: flex;\n  align-items: center;\n  padding: 1em;\n  font-size: 15px;\n  font-weight: 600;\n  text-transform: uppercase;\n  &-active{\n    background: ${theme.importerActiveFileBg};\n    color: ${theme.importerActiveFileFg};\n  }\n`);\n\nconst cssTabsWrapper = styled('div', `\n  border-bottom: 1px solid ${theme.importerTableInfoBorder};\n  display: flex;\n  flex-direction: column;\n`);\n\nconst cssWarningText = styled('div', `\n  margin-bottom: 8px;\n  color: ${theme.errorText};\n  white-space: pre-line;\n`);\n\nconst cssTableList = styled('div', `\n  align-self: flex-start;\n  max-width: 100%;\n  display: flex;\n  padding: 0px var(--css-modal-dialog-padding-horizontal, 0px);\n`);\n\nconst cssTabItemContent = styled('div', `\n  border: 1px solid transparent;\n  padding-left: 20px;\n  padding-right: 20px;\n  display: flex;\n  align-items: center;\n  align-content: flex-end;\n  overflow: hidden;\n  border-radius: 4px 4px 0px 0px;\n  height: 56px;\n  column-gap: 8px;\n  &-selected {\n    border: 1px solid ${theme.importerTableInfoBorder};\n    border-bottom-color: ${theme.importerMainContentBg};\n    background-color: ${theme.importerMainContentBg};\n  }\n`);\n\nconst cssTabItem = styled('div', `\n  background: ${theme.importerOutsideBg};\n  position: relative;\n  cursor: pointer;\n  margin-bottom: -2px;\n  border-bottom: 1px solid ${theme.importerMainContentBg};\n  flex: 1;\n  &-not-selected + &-not-selected::after{\n    content: '';\n    position: absolute;\n    left: 0px;\n    top: 20%;\n    height: 60%;\n    border-left: 1px solid ${theme.importerTableInfoBorder};\n  }\n  &-not-selected .${cssBorderBottom.className} {\n    display: block;\n  }\n  &-not-selected .${cssFileTypeIcon.className} {\n    display: none;\n  }\n  &-not-selected {\n    min-width: 0px;\n  }\n  &-not-selected:first-child .${cssTabItemContent.className} {\n    padding-left: 0px;\n  }\n`);\n\nconst cssTableLine = styled('div', `\n  display: flex;\n  align-items: center;\n  overflow: hidden;\n  flex-shrink: 1;\n  height: 100%;\n`);\n\nconst cssTableSource = styled('div', `\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  flex-shrink: 1;\n`);\n\nconst cssConfigAndPreview = styled('div', `\n  display: flex;\n  gap: 8px;\n  flex-grow: 1;\n  height: 0px;\n  background-color: ${theme.importerMainContentBg};\n  padding-right: var(--css-modal-dialog-padding-horizontal, 0px);\n`);\n\nconst cssConfigLeft = styled('div', `\n  padding-right: 8px;\n  padding-top: 16px;\n  position: absolute;\n  inset: 0;\n  display: flex;\n  flex-direction: column;\n  overflow-y: auto;\n  width: 100%;\n  transition: transform 0.2s ease-in-out;\n`);\n\nconst cssConfigRight = styled(cssConfigLeft, `\n  left: 100%;\n  padding-left: var(--css-modal-dialog-padding-horizontal, 0px);\n`);\n\nconst cssConfigPanel = styled('div', `\n  width: 360px;\n  height: 100%;\n  position: relative;\n  overflow-x: hidden;\n  &-right .${cssConfigLeft.className} {\n    transform: translateX(-100%);\n  }\n  &-right .${cssConfigRight.className} {\n    transform: translateX(-100%);\n  }\n`);\n\n\nconst cssPreviewColumn = styled('div', `\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n`);\n\nconst cssPreview = styled('div', `\n  display: flex;\n  flex-grow: 1;\n`);\n\nconst cssPreviewSpinner = styled(cssPreview, `\n  align-items: center;\n  justify-content: center;\n`);\n\nconst cssOverlay = styled('div', `\n  background: ${theme.importerSkippedTableOverlay};\n  flex: 1;\n  display: grid;\n  place-items: center;\n`);\n\nconst cssPreviewGrid = styled(cssPreview, `\n  border: 1px solid ${theme.importerPreviewBorder};\n  position: relative;\n`);\n\nconst cssMergeOptions = styled('div', `\n  margin-bottom: 16px;\n`);\n\nconst cssMergeOptionsToggle = styled('div', `\n  margin-bottom: 8px;\n  margin-top: 8px;\n`);\n\nconst cssMergeOptionsMessage = styled('div', `\n  color: ${theme.lightText};\n  margin-bottom: 8px;\n`);\n\nconst cssColumnMatchHeader = styled('div', `\n  display: grid;\n  grid-template-columns: 1fr 20px 1fr;\n  text-transform: uppercase;\n  color: ${theme.lightText};\n  letter-spacing: 1px;\n  font-size: ${vars.xsmallFontSize};\n  margin-bottom: 12px;\n`);\n\nconst cssColumnMatchRow = styled('div', `\n  display: grid;\n  grid-template-columns: 1fr 20px 1fr 20px;\n  gap: 4px;\n  align-items: center;\n  --icon-color: ${theme.iconDisabled};\n  & + & {\n    margin-top: 16px;\n  }\n`);\n\nconst cssFieldFormula = styled(buildHighlightedCode, `\n  flex: auto;\n  cursor: pointer;\n  margin-top: 1px;\n  padding-left: 24px;\n  --icon-color: ${theme.accentIcon};\n`);\n\nconst cssDestinationFieldLabel = styled('div', `\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  padding-left: 4px;\n  cursor: unset;\n  background-color: ${theme.pageBg};\n  color: ${theme.text};\n  width: 100%;\n  height: 30px;\n  line-height: 16px;\n  font-size: ${vars.mediumFontSize};\n  padding: 5px;\n  border: 1px solid ${theme.selectButtonBorder};\n  border-radius: 3px;\n  user-select: none;\n  outline: none;\n`);\n\nconst cssUnmatchedIcon = styled(icon, `\n  height: 12px;\n  --icon-color: ${theme.lightText};\n  vertical-align: bottom;\n  margin-bottom: 2px;\n`);\n\nconst cssUnmatchedFields = styled('div', `\n  display: flex;\n  flex-wrap: wrap;\n  row-gap: 2px;\n  column-gap: 4px;\n  align-items: flex-start;\n`);\n\nconst cssUnmatchedFieldsIntro = styled('div', `\n  padding: 4px 8px;\n`);\n\nconst cssUnmatchedFieldsList = styled('div', `\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  padding-right: 16px;\n  color: ${theme.text};\n  border-radius: 8px;\n  padding: 4px 8px;\n  background-color: ${theme.pagePanelsBorder};\n  max-width: 160px;\n  cursor: pointer;\n`);\n\nconst cssImportButtons = styled('div', `\n  padding-top: 40px;\n  padding-left: var(--css-modal-dialog-padding-horizontal, 0px);\n  padding-right: var(--css-modal-dialog-padding-horizontal, 0px);\n  padding-bottom: calc(var(--css-modal-dialog-padding-vertical, 0px) - 12px);\n  background-color: ${theme.importerMainContentBg};\n`);\n\nconst cssImportButtonsLine = styled('div', `\n  height: 52px;\n  overflow: hidden;\n  display: flex;\n  gap: 8px;\n  align-items: flex-start;\n`);\n\n\nconst cssTitle = styled('span._cssToFrom', `\n  color: ${theme.darkText};\n  text-transform: uppercase;\n  font-weight: 600;\n  font-size: ${vars.smallFontSize};\n  letter-spacing: 0.5px;\n  padding-left: var(--css-modal-dialog-padding-horizontal, 0px);\n  text-align: left;\n  margin-bottom: 16px;\n`);\n\nconst cssDestinationWrapper = styled('div', `\n  margin-bottom: 1px;\n  /* Reuse the modal padding but move 16px to left if possible */\n  margin-left: max(0px, calc(var(--css-modal-dialog-padding-horizontal, 0px) - 16px));\n  display: flex;\n  align-items: center;\n`);\n\nconst cssDestination = styled('div', `\n  --icon-color: ${theme.lightText};\n  align-items: center;\n  border-radius: 0 3px 3px 0;\n  padding-left: 16px;\n  color: ${theme.text};\n  cursor: pointer;\n  display: flex;\n  height: 32px;\n  line-height: 32px;\n  flex: 1;\n  &:hover {\n    background-color: ${theme.pageHoverBg};\n  }\n  &-selected, &-selected:hover {\n    background-color: ${theme.activePageBg};\n    color: ${theme.activePageFg};\n    --icon-color: ${theme.activePageFg};\n  }\n`);\n\nconst cssOptions = styled('div', `\n  display: flex;\n  align-items: flex-end;\n  padding-bottom: 8px;\n  justify-content: space-between;\n  height: 36px;\n`);\n\nconst cssTableName = styled('span', `\n  font-weight: 600;\n`);\n\nconst cssNavigation = styled('div', `\n  display: flex;\n  align-items: center;\n  margin-bottom: 8px;\n`);\n\nconst cssDetailsIcon = styled(icon, `\n  flex: none;\n  color: ${theme.controlFg};\n  --icon-color: ${theme.controlFg};\n  margin-left: 4px;\n  margin-top: -4px;\n  cursor: pointer;\n  &:hover {\n    --icon-color: ${theme.controlHoverFg};\n  }\n`);\n\nconst cssError = styled(icon, `\n  --icon-color: ${theme.iconError};\n  right: 2px;\n  position: absolute;\n  z-index: 1;\n  top: calc(50% - 8px);\n`);\n\nconst cssNavigationIcon = styled(icon, `\n  flex: none;\n  color: ${theme.controlFg};\n  --icon-color: ${theme.controlFg};\n  margin-right: 4px;\n  margin-top: -3px;\n  width: 12px;\n`);\n\nconst cssFlexBaseline = styled('div', `\n  display: flex;\n  align-items: baseline;\n`);\n\nconst cssSelected = styled(cssTableSource, `\n  &-skip {\n    color: ${theme.lightText};\n  }\n`);\n\nconst cssIcon180 = styled(icon, `\n  transform: rotate(180deg);\n`);\n\nconst cssGreenIcon = styled(`div`, `\n--icon-color: ${theme.accentIcon};\n`);\n\n\nconst cssColumnMappingNav = styled('span', `\n  text-transform: uppercase;\n  color: ${theme.darkText};\n  text-transform: uppercase;\n  font-weight: 600;\n  font-size: ${vars.smallFontSize};\n  letter-spacing: 0.5px;\n`);\n\nconst cssSlash = styled('div', `\n  padding: 0px 4px;\n  font-size: ${vars.xsmallFontSize};\n  color: ${theme.lightText};\n`);\n\nconst cssDestinationTableSecondary = styled(textButton, `\n  text-transform: uppercase;\n  font-size: ${vars.smallFontSize};\n  letter-spacing: 0.5px;\n  text-align: left;\n  margin-bottom: 16px;\n  color: ${theme.lightText};\n`);\n","import {makeT} from 'app/client/lib/localization';\nimport {GristDoc} from 'app/client/components/GristDoc';\nimport {cssInput} from 'app/client/ui/cssInput';\nimport {cssField} from 'app/client/ui/MakeCopyMenu';\nimport {labeledSquareCheckbox} from 'app/client/ui2018/checkbox';\nimport {colors} from 'app/client/ui2018/cssVars';\nimport {icon} from 'app/client/ui2018/icons';\nimport {cssLink} from 'app/client/ui2018/links';\nimport {saveModal} from 'app/client/ui2018/modals';\nimport {commonUrls} from 'app/common/gristUrls';\nimport {Computed, Disposable, dom, input, makeTestId, Observable, styled} from 'grainjs';\n\nconst t = makeT('DuplicateTable');\n\nconst testId = makeTestId('test-duplicate-table-');\n\n/**\n * Response returned by a DuplicateTable user action.\n */\nexport interface DuplicateTableResponse {\n  /** Row id of the new table. */\n  id: number;\n  /** Table id of the new table. */\n  table_id: string;\n  /** Row id of the new raw view section. */\n  raw_section_id: number;\n}\n\nexport interface DuplicateTableOptions {\n  onSuccess?(response: DuplicateTableResponse): void;\n}\n\n/**\n * Shows a modal with options for duplicating the table `tableId`.\n */\nexport function duplicateTable(\n  gristDoc: GristDoc,\n  tableId: string,\n  {onSuccess}: DuplicateTableOptions = {}\n) {\n  saveModal((_ctl, owner) => {\n    const duplicateTableModal = DuplicateTableModal.create(owner, gristDoc, tableId);\n    return {\n      title: 'Duplicate Table',\n      body: duplicateTableModal.buildDom(),\n      saveFunc: async () =>  {\n        const response = await duplicateTableModal.save();\n        onSuccess?.(response);\n      },\n      saveDisabled: duplicateTableModal.saveDisabled,\n      width: 'normal',\n    };\n  });\n}\n\nclass DuplicateTableModal extends Disposable {\n  private _newTableName = Observable.create<string>(this, '');\n  private _includeData = Observable.create<boolean>(this, false);\n  private _saveDisabled = Computed.create(this, this._newTableName, (_use, name) => !name.trim());\n\n  constructor(private _gristDoc: GristDoc, private _tableId: string) {\n    super();\n  }\n\n  public get saveDisabled() { return this._saveDisabled; }\n\n  public save() {\n    return this._duplicateTable();\n  }\n\n  public buildDom() {\n    return [\n      cssField(\n        input(\n          this._newTableName,\n          {onInput: true},\n          {placeholder: t(\"Name for new table\")},\n          (elem) => { setTimeout(() => { elem.focus(); }, 20); },\n          dom.on('focus', (_ev, elem) => { elem.select(); }),\n          dom.cls(cssInput.className),\n          testId('name'),\n        ),\n      ),\n      cssWarning(\n        cssWarningIcon('Warning'),\n        dom('div', t(\"Instead of duplicating tables, it's usually better to segment data using linked views. {{link}}\",\n          {link: cssLink({href: commonUrls.helpLinkingWidgets, target: '_blank'}, 'Read More.')}\n        )),\n      ),\n      cssField(\n        cssCheckbox(\n          this._includeData,\n          t(\"Copy all data in addition to the table structure.\"),\n          testId('copy-all-data'),\n        ),\n      ),\n      dom.maybe(this._includeData, () => cssWarning(\n        cssWarningIcon('Warning'),\n        dom('div', t(\"Only the document default access rules will apply to the copy.\")),\n        testId('acl-warning'),\n      )),\n    ];\n  }\n\n  private _duplicateTable() {\n    const {docData} = this._gristDoc;\n    const [newTableName, includeData] = [this._newTableName.get(), this._includeData.get()];\n    return docData.sendAction(['DuplicateTable', this._tableId, newTableName, includeData]);\n  }\n}\n\nconst cssCheckbox = styled(labeledSquareCheckbox, `\n  margin-top: 8px;\n`);\n\nconst cssWarning = styled('div', `\n  display: flex;\n  column-gap: 8px;\n`);\n\nconst cssWarningIcon = styled(icon, `\n  --icon-color: ${colors.orange};\n  flex-shrink: 0;\n`);\n","import * as commands from 'app/client/components/commands';\nimport {makeT} from 'app/client/lib/localization';\nimport { FocusLayer } from 'app/client/lib/FocusLayer';\nimport {ViewSectionRec} from 'app/client/models/entities/ViewSectionRec';\nimport {basicButton, cssButton, primaryButton} from 'app/client/ui2018/buttons';\nimport { theme } from 'app/client/ui2018/cssVars';\nimport {menuCssClass} from 'app/client/ui2018/menus';\nimport {ModalControl} from 'app/client/ui2018/modals';\nimport { Computed, dom, DomElementArg, makeTestId, Observable, styled } from 'grainjs';\nimport {IOpenController, setPopupToCreateDom} from 'popweasel';\nimport { descriptionInfoTooltip } from './tooltips';\nimport { autoGrow } from './forms';\nimport { cssInput, cssLabel, cssRenamePopup, cssTextArea } from 'app/client/ui/RenamePopupStyles';\n\nconst testId = makeTestId('test-widget-title-');\nconst t = makeT('WidgetTitle');\n\ninterface WidgetTitleOptions {\n  tableNameHidden?: boolean,\n  widgetNameHidden?: boolean,\n}\n\nexport function buildWidgetTitle(vs: ViewSectionRec, options: WidgetTitleOptions, ...args: DomElementArg[]) {\n  const title = Computed.create(null, use => use(vs.titleDef));\n  const description = Computed.create(null, use => use(vs.description));\n  return buildRenameWidget(vs, title, description, options, dom.autoDispose(title), ...args);\n}\n\nexport function buildTableName(vs: ViewSectionRec, ...args: DomElementArg[]) {\n  const title = Computed.create(null, use => use(use(vs.table).tableNameDef));\n  const description = Computed.create(null, use => use(vs.description));\n  return buildRenameWidget(vs, title, description, { widgetNameHidden: true }, dom.autoDispose(title), ...args);\n}\n\nexport function buildRenameWidget(\n  vs: ViewSectionRec,\n  title: Observable<string>,\n  description: Observable<string>,\n  options: WidgetTitleOptions,\n  ...args: DomElementArg[]) {\n  return cssTitleContainer(\n    cssTitle(\n      testId('text'),\n      dom.text(title),\n      // In case titleDef is all blank space, make it visible on hover.\n      cssTitle.cls(\"-empty\", use => !use(title)?.trim()),\n      elem => {\n        setPopupToCreateDom(elem, ctl => buildWidgetRenamePopup(ctl, vs, options), {\n          placement: 'bottom-start',\n          trigger: ['click'],\n          attach: 'body',\n          boundaries: 'viewport',\n        });\n      },\n      dom.on('click', (ev) => { ev.stopPropagation(); ev.preventDefault(); }),\n    ),\n    dom.maybe(description, () => [\n      descriptionInfoTooltip(description.get(), \"widget\")\n    ]),\n    ...args\n  );\n}\n\nfunction buildWidgetRenamePopup(ctrl: IOpenController, vs: ViewSectionRec, options: WidgetTitleOptions) {\n  const tableRec = vs.table.peek();\n  // If the table is a summary table.\n  const isSummary = Boolean(tableRec.summarySourceTable.peek());\n  // Table name, for summary table it contains also a grouping description, but it is not editable.\n  // Example: Table1 or Table1 [by B, C]\n  const tableName = [tableRec.tableNameDef.peek(), tableRec.groupDesc.peek()]\n                    .filter(p => Boolean(p?.trim())).join(' ');\n  // User input for table name.\n  const inputTableName = Observable.create(ctrl, tableName);\n  // User input for widget title.\n  const inputWidgetTitle = Observable.create(ctrl, vs.title.peek() ?? '');\n  // Placeholder for widget title:\n  // - when widget title is empty shows a default widget title (what would be shown when title is empty)\n  // - when widget title is set, shows just a text to override it.\n  const inputWidgetPlaceholder = !vs.title.peek() ? t(\"Override widget title\") : vs.defaultWidgetTitle.peek();\n\n  // User input for widget description\n  const inputWidgetDesc = Observable.create(ctrl, vs.description.peek() ?? '');\n\n  const disableSave = Computed.create(ctrl, (use) => {\n    const newTableName = use(inputTableName)?.trim() ?? '';\n    const newWidgetTitle = use(inputWidgetTitle)?.trim() ?? '';\n    const newWidgetDesc = use(inputWidgetDesc)?.trim() ?? '';\n    // Can't save when table name is empty or there wasn't any change.\n    return !newTableName || (\n      newTableName === tableName\n      && newWidgetTitle === use(vs.title)\n      && newWidgetDesc === use(vs.description)\n    );\n  });\n\n  const modalCtl = ModalControl.create(ctrl, () => ctrl.close());\n\n  const saveTableName = async () => {\n    // For summary table ignore - though we could rename primary table.\n    if (isSummary) { return; }\n    // Can't save an empty name - there are actually no good reasons why we can't have empty table name,\n    // unfortunately there are some use cases that really on the empty name:\n    // - For ACL we sometimes may check if tableId is empty (and sometimes if table name).\n    // - Pages with empty name are not visible by default (and pages are renamed with a table - if their name match).\n    if (!inputTableName.get().trim()) { return; }\n    // If value was changed.\n    if (inputTableName.get() !== tableRec.tableNameDef.peek()) {\n      await tableRec.tableNameDef.saveOnly(inputTableName.get());\n    }\n  };\n\n  const saveWidgetTitle = async () => {\n    const newTitle = inputWidgetTitle.get()?.trim() ?? '';\n    // If value was changed.\n    if (newTitle !== vs.title.peek()) {\n      await vs.title.saveOnly(newTitle);\n    }\n  };\n\n  const saveWidgetDesc = async () => {\n    const newWidgetDesc = inputWidgetDesc.get().trim() ?? '';\n    // If value was changed.\n    if (newWidgetDesc !== vs.description.peek()) {\n      await vs.description.saveOnly(newWidgetDesc);\n    }\n  };\n\n  const save = () => Promise.all([\n    saveTableName(),\n    saveWidgetTitle(),\n    saveWidgetDesc()\n  ]);\n\n  function initialFocus() {\n    const isRawView = !widgetInput;\n    const isWidgetTitleEmpty = !vs.title.peek();\n    function focus(inputEl?: HTMLInputElement) {\n      inputEl?.focus();\n      inputEl?.select();\n    }\n    if (isSummary) {\n      focus(widgetInput);\n    } else if (isRawView) {\n      focus(tableInput);\n    } else if (isWidgetTitleEmpty) {\n      focus(tableInput);\n    } else {\n      focus(widgetInput);\n    }\n  }\n\n  // When the popup is closing we will save everything, unless the user has pressed the cancel button.\n  let cancelled = false;\n\n  // Function to close the popup with saving.\n  const close = () => ctrl.close();\n\n  // Function to close the popup without saving.\n  const cancel = () => { cancelled = true; close(); };\n\n  // Function that is called when popup is closed.\n  const onClose = () => {\n    if (!cancelled) {\n      save().catch(reportError);\n    }\n  };\n\n  // User interface for the popup.\n  const myCommands = {\n    // Escape key: just close the popup.\n    cancel,\n    // Enter key: save and close the popup, unless the description input is focused.\n    // There is also a variant for Ctrl+Enter which will always save.\n    accept: () => {\n      // Enters are ignored in the description input (unless ctrl is pressed)\n      if (document.activeElement === descInput) { return true; }\n      close();\n    },\n    // ArrowUp\n    cursorUp: () => {\n      // moves focus to the widget title input if it is already at the top of widget description\n      if (document.activeElement === descInput && descInput?.selectionStart === 0) {\n        widgetInput?.focus();\n        widgetInput?.select();\n      } else if (document.activeElement === widgetInput) {\n        tableInput?.focus();\n        tableInput?.select();\n      } else {\n        return true;\n      }\n    },\n    // ArrowDown\n    cursorDown: () => {\n      if (document.activeElement === tableInput) {\n        widgetInput?.focus();\n        widgetInput?.select();\n      } else if (document.activeElement === widgetInput) {\n        descInput?.focus();\n        descInput?.select();\n      } else {\n        return true;\n      }\n    }\n  };\n\n  // Create this group and attach it to the popup and all inputs.\n  const commandGroup = commands.createGroup({ ...myCommands }, ctrl, true);\n\n  let tableInput: HTMLInputElement|undefined;\n  let widgetInput: HTMLInputElement|undefined;\n  let descInput: HTMLTextAreaElement | undefined;\n  return cssRenamePopup(\n    // Create a FocusLayer to keep focus in this popup while it's active, and prevent keyboard\n    // shortcuts from being seen by the view underneath.\n    elem => { FocusLayer.create(ctrl, { defaultFocusElem: elem, pauseMousetrap: false }); },\n    dom.onDispose(onClose),\n    dom.autoDispose(commandGroup),\n    testId('popup'),\n    dom.cls(menuCssClass),\n    dom.maybe(!options.tableNameHidden, () => [\n      cssLabel(t(\"DATA TABLE NAME\")),\n      // Update tableName on key stroke - this will show the default widget name as we type.\n      // above this modal.\n      tableInput = cssInput(\n        inputTableName,\n        updateOnKey,\n        {disabled: isSummary, placeholder: t(\"Provide a table name\")},\n        testId('table-name-input'),\n        commandGroup.attach(),\n      ),\n    ]),\n    dom.maybe(!options.widgetNameHidden, () => [\n      cssLabel(t(\"WIDGET TITLE\")),\n      widgetInput = cssInput(inputWidgetTitle, updateOnKey, {placeholder: inputWidgetPlaceholder},\n        testId('section-name-input'),\n        commandGroup.attach(),\n      ),\n    ]),\n    cssLabel(t(\"WIDGET DESCRIPTION\")),\n    descInput = cssTextArea(inputWidgetDesc, updateOnKey,\n      testId('section-description-input'),\n      commandGroup.attach(),\n      autoGrow(inputWidgetDesc),\n    ),\n    cssButtons(\n      primaryButton(t(\"Save\"),\n        dom.on('click', close),\n        dom.boolAttr('disabled', use => use(disableSave) || use(modalCtl.workInProgress)),\n        testId('save'),\n      ),\n      basicButton(t(\"Cancel\"),\n        testId('cancel'),\n        dom.on('click', cancel)\n      ),\n    ),\n    dom.onKeyDown({\n      Enter$: e => {\n        if (e.ctrlKey || e.metaKey) {\n          close();\n          return false;\n        }\n      }\n    }),\n    elem => { setTimeout(initialFocus, 0); },\n  );\n}\n\nconst updateOnKey = {onInput: true};\n\n// Leave class for tests.\nconst cssTitleContainer = styled('div', `\n  flex: 1 1 0px;\n  min-width: 0px;\n  display: flex;\n  .info_toggle_icon {\n    width: 13px;\n    height: 13px;\n  }\n`);\n\nconst cssTitle = styled('div', `\n  cursor: pointer;\n  overflow: hidden;\n  border-radius: 3px;\n  margin: -4px;\n  padding: 4px;\n  text-overflow: ellipsis;\n  align-self: start;\n  &:hover {\n    background-color: ${theme.hover};\n  }\n  &-empty {\n    min-width: 48px;\n    min-height: 23px;\n  }\n`);\n\nconst cssButtons = styled('div', `\n  display: flex;\n  margin-top: 16px;\n  & > .${cssButton.className}:not(:first-child) {\n    margin-left: 8px;\n  }\n`);\n","import {GristDoc} from 'app/client/components/GristDoc';\nimport {copyToClipboard} from 'app/client/lib/clipboardUtils';\nimport {setTestState} from 'app/client/lib/testState';\nimport {TableRec} from 'app/client/models/DocModel';\nimport {docListHeader, docMenuTrigger} from 'app/client/ui/DocMenuCss';\nimport {duplicateTable, DuplicateTableResponse} from 'app/client/ui/DuplicateTable';\nimport {showTransientTooltip} from 'app/client/ui/tooltips';\nimport {buildTableName} from 'app/client/ui/WidgetTitle';\nimport * as css from 'app/client/ui2018/cssVars';\nimport {icon} from 'app/client/ui2018/icons';\nimport {loadingDots} from 'app/client/ui2018/loaders';\nimport {menu, menuItem, menuText} from 'app/client/ui2018/menus';\nimport {confirmModal} from 'app/client/ui2018/modals';\nimport {Computed, Disposable, dom, fromKo, makeTestId, Observable, styled} from 'grainjs';\nimport {makeT} from 'app/client/lib/localization';\n\nconst testId = makeTestId('test-raw-data-');\n\nconst t = makeT('DataTables');\n\nexport class DataTables extends Disposable {\n  private _tables: Observable<TableRec[]>;\n\n  private readonly _rowCount = Computed.create(\n    this, this._gristDoc.docPageModel.currentDocUsage, (_use, usage) => {\n      return usage?.rowCount;\n    }\n  );\n\n  // TODO: Update this whenever the rest of the UI is internationalized.\n  private readonly _rowCountFormatter = new Intl.NumberFormat('en-US');\n\n  constructor(private _gristDoc: GristDoc) {\n    super();\n    this._tables = Computed.create(this, use => {\n      const dataTables = use(_gristDoc.docModel.rawDataTables.getObservable());\n      const summaryTables = use(_gristDoc.docModel.rawSummaryTables.getObservable());\n      // Remove tables that we don't have access to. ACL will remove tableId from those tables.\n      return [...dataTables, ...summaryTables].filter(table => Boolean(use(table.tableId)));\n    });\n  }\n\n  public buildDom() {\n    return container(\n      cssTableList(\n        /***************  List section **********/\n        testId('list'),\n        cssHeader(t(\"Raw Data Tables\")),\n        cssList(\n          dom.forEach(this._tables, tableRec =>\n            cssItem(\n              testId('table'),\n              cssLeft(\n                dom.domComputed((use) => cssTableTypeIcon(\n                  use(tableRec.summarySourceTable) !== 0 ? 'PivotLight' : 'TypeTable',\n                  testId(`table-id-${use(tableRec.tableId)}`)\n                )),\n              ),\n              cssMiddle(\n                cssTitleRow(cssTableTitle(this._tableTitle(tableRec), testId('table-title'))),\n                cssDetailsRow(\n                  cssTableIdWrapper(cssHoverWrapper(\n                    cssUpperCase(\"Table ID: \"),\n                    cssTableId(\n                      testId('table-id'),\n                      dom.text(tableRec.tableId),\n                    ),\n                    { title : t(\"Click to copy\") },\n                    dom.on('click', async (e, d) => {\n                      e.stopImmediatePropagation();\n                      e.preventDefault();\n                      showTransientTooltip(d, t(\"Table ID copied to clipboard\"), {\n                        key: 'copy-table-id'\n                      });\n                      await copyToClipboard(tableRec.tableId.peek());\n                      setTestState({clipboard: tableRec.tableId.peek()});\n                    })\n                  )),\n                  this._tableRows(tableRec),\n                ),\n              ),\n              cssRight(\n                docMenuTrigger(\n                  testId('table-menu'),\n                  icon('Dots'),\n                  menu(() => this._menuItems(tableRec), {placement: 'bottom-start'}),\n                  dom.on('click', (ev) => { ev.stopPropagation(); ev.preventDefault(); }),\n                )\n              ),\n              dom.on('click', () => {\n                const sectionId = tableRec.rawViewSection.peek().getRowId();\n                if (!sectionId) {\n                  throw new Error(`Table ${tableRec.tableId.peek()} doesn't have a raw view section.`);\n                }\n                this._gristDoc.viewModel.activeSectionId(sectionId);\n              })\n            )\n          )\n        ),\n      ),\n    );\n  }\n\n  private _tableTitle(table: TableRec) {\n    return dom.domComputed((use) => {\n      const rawViewSectionRef = use(fromKo(table.rawViewSectionRef));\n      const isSummaryTable = use(table.summarySourceTable) !== 0;\n      if (!rawViewSectionRef || isSummaryTable) {\n        // Some very old documents might not have a rawViewSection, and raw summary\n        // tables can't currently be renamed.\n        const tableName = [\n          use(table.tableNameDef), isSummaryTable ? use(table.groupDesc) : ''\n        ].filter(p => Boolean(p?.trim())).join(' ');\n        return cssTableName(tableName);\n      } else {\n        return dom('div', // to disable flex grow in the widget\n          dom.domComputed(fromKo(table.rawViewSection), vs =>\n            buildTableName(vs, testId('widget-title'))\n          )\n        );\n      }\n    });\n  }\n\n  private _menuItems(table: TableRec) {\n    const {isReadonly, docModel} = this._gristDoc;\n    return [\n      menuItem(\n        () => this._duplicateTable(table),\n        t(\"Duplicate Table\"),\n        testId('menu-duplicate-table'),\n        dom.cls('disabled', use =>\n          use(isReadonly) ||\n          use(table.isHidden) ||\n          use(table.summarySourceTable) !== 0\n        ),\n      ),\n      menuItem(\n        () => this._removeTable(table),\n        'Remove',\n        testId('menu-remove'),\n        dom.cls('disabled', use => use(isReadonly) || (\n          // Can't delete last visible table, unless it is a hidden table.\n          use(docModel.visibleTables.getObservable()).length <= 1 && !use(table.isHidden)\n        ))\n      ),\n      dom.maybe(isReadonly, () => menuText(t(\"You do not have edit access to this document\"))),\n    ];\n  }\n\n  private _duplicateTable(r: TableRec) {\n    duplicateTable(this._gristDoc, r.tableId(), {\n      onSuccess: ({raw_section_id}: DuplicateTableResponse) =>\n        this._gristDoc.viewModel.activeSectionId(raw_section_id),\n    });\n  }\n\n  private _removeTable(r: TableRec) {\n    const {docModel} = this._gristDoc;\n    function doRemove() {\n      return docModel.docData.sendAction(['RemoveTable', r.tableId()]);\n    }\n    confirmModal(t(\n      \"Delete {{formattedTableName}} data, and remove it from all pages?\",\n      {formattedTableName : r.formattedTableName()}\n    ), 'Delete', doRemove);\n  }\n\n  private _tableRows(table: TableRec) {\n    return dom.maybe(this._rowCount, (rowCounts) => {\n      if (rowCounts === 'hidden') { return null; }\n\n      return cssTableRowsWrapper(\n        cssUpperCase(\"Rows: \"),\n        rowCounts === 'pending' ? cssLoadingDots() : cssTableRows(\n          rowCounts[table.getRowId()] !== undefined\n            ? this._rowCountFormatter.format(rowCounts[table.getRowId()])\n            : '',\n          testId('table-rows'),\n        )\n      );\n    });\n  }\n}\n\nconst container = styled('div', `\n  overflow-y: auto;\n  position: relative;\n`);\n\nconst cssHeader = styled(docListHeader, `\n  display: inline-block;\n`);\n\nconst cssList = styled('div', `\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n`);\n\nconst cssItem = styled('div', `\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n  border-radius: 3px;\n  width: 100%;\n  height: calc(1em * 56/13); /* 56px for 13px font */\n  max-width: 750px;\n  border: 1px solid ${css.theme.rawDataTableBorder};\n  &:hover {\n    border-color: ${css.theme.rawDataTableBorderHover};\n  }\n`);\n\n// Holds icon in top left corner\nconst cssLeft = styled('div', `\n  padding-top: 11px;\n  padding-left: 12px;\n  margin-right: 8px;\n  align-self: flex-start;\n  display: flex;\n  flex: none;\n`);\n\nconst cssMiddle = styled('div', `\n  flex-grow: 1;\n  min-width: 0px;\n  display: flex;\n  flex-wrap: wrap;\n  margin-top: 6px;\n  margin-bottom: 4px;\n`);\n\nconst cssTitleRow = styled('div', `\n  min-width: 100%;\n  margin-right: 4px;\n`);\n\nconst cssDetailsRow = styled('div', `\n  min-width: 100%;\n  display: flex;\n  gap: 8px;\n`);\n\n\n// Holds dots menu (which is 24px x 24px, but has its own 4px right margin)\nconst cssRight = styled('div', `\n  padding-right: 8px;\n  margin-left: 8px;\n  align-self: center;\n  display: flex;\n  flex: none;\n`);\n\nconst cssTableTypeIcon = styled(icon, `\n  --icon-color: ${css.theme.accentIcon};\n`);\n\nconst cssLine = styled('span', `\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  overflow: hidden;\n`);\n\nconst cssTableIdWrapper = styled('div', `\n  display: flex;\n  flex-grow: 1;\n  min-width: 0;\n`);\n\nconst cssTableRowsWrapper = styled('div', `\n  display: flex;\n  flex-shrink: 0;\n  min-width: 100px;\n  overflow: hidden;\n  align-items: baseline;\n  color: ${css.theme.lightText};\n  line-height: 18px;\n  padding: 0px 2px;\n`);\n\nconst cssHoverWrapper = styled('div', `\n  display: flex;\n  overflow: hidden;\n  cursor: default;\n  align-items: baseline;\n  color: ${css.theme.lightText};\n  transition: background 0.05s;\n  padding: 0px 2px;\n  line-height: 18px;\n  &:hover {\n    background: ${css.theme.lightHover};\n  }\n`);\n\nconst cssTableId = styled(cssLine, `\n  font-size: ${css.vars.smallFontSize};\n`);\n\nconst cssTableRows = cssTableId;\n\nconst cssTableTitle = styled('div', `\n  color: ${css.theme.text};\n  white-space: nowrap;\n`);\n\nconst cssUpperCase = styled('span', `\n  text-transform: uppercase;\n  letter-spacing: 0.81px;\n  font-weight: 500;\n  font-size: 9px; /* xxsmallFontSize is to small */\n  margin-right: 2px;\n  flex: 0;\n  white-space: nowrap;\n`);\n\nconst cssTableList = styled('div', `\n  overflow-y: auto;\n  position: relative;\n  margin-bottom: 56px;\n`);\n\nconst cssLoadingDots = styled(loadingDots, `\n  --dot-size: 6px;\n`);\n\nconst cssTableName = styled('span', `\n  color: ${css.theme.text};\n`);\n","import {DocPageModel} from 'app/client/models/DocPageModel';\nimport {urlState} from 'app/client/models/gristUrlState';\nimport {docListHeader} from 'app/client/ui/DocMenuCss';\nimport {GristTooltips, TooltipContentFunc} from 'app/client/ui/GristTooltips';\nimport {withInfoTooltip} from 'app/client/ui/tooltips';\nimport {mediaXSmall, theme} from 'app/client/ui2018/cssVars';\nimport {icon} from 'app/client/ui2018/icons';\nimport {loadingDots, loadingSpinner} from 'app/client/ui2018/loaders';\nimport {APPROACHING_LIMIT_RATIO, DataLimitStatus} from 'app/common/DocUsage';\nimport {Features, isFreePlan} from 'app/common/Features';\nimport {capitalizeFirstWord} from 'app/common/gutil';\nimport {canUpgradeOrg} from 'app/common/roles';\nimport {Computed, Disposable, dom, DomContents, DomElementArg, makeTestId, styled} from 'grainjs';\nimport {makeT} from 'app/client/lib/localization';\n\nconst t = makeT('DocumentUsage');\n\nconst testId = makeTestId('test-doc-usage-');\n\n// Default used by the progress bar to visually indicate row usage.\nconst DEFAULT_MAX_ROWS = 20000;\n\n// Default used by the progress bar to visually indicate data size usage.\nconst DEFAULT_MAX_DATA_SIZE = DEFAULT_MAX_ROWS * 2 * 1024; // 40MB (2KiB per row)\n\n// Default used by the progress bar to visually indicate attachments size usage.\nconst DEFAULT_MAX_ATTACHMENTS_SIZE = 1 * 1024 * 1024 * 1024; // 1GiB\n\n/**\n * Displays statistics about document usage, such as number of rows used.\n */\nexport class DocumentUsage extends Disposable {\n  private readonly _currentDoc = this._docPageModel.currentDoc;\n  private readonly _currentDocUsage = this._docPageModel.currentDocUsage;\n  private readonly _currentOrg = this._docPageModel.currentOrg;\n  private readonly _currentProduct = this._docPageModel.currentProduct;\n\n  // TODO: Update this whenever the rest of the UI is internationalized.\n  private readonly _rowCountFormatter = new Intl.NumberFormat('en-US');\n\n  private readonly _dataLimitStatus = Computed.create(this, this._currentDocUsage, (_use, usage) => {\n    return usage?.dataLimitStatus ?? null;\n  });\n\n  private readonly _rowCount = Computed.create(this, this._currentDocUsage, (_use, usage) => {\n    return usage?.rowCount;\n  });\n\n  private readonly _dataSizeBytes = Computed.create(this, this._currentDocUsage, (_use, usage) => {\n    return usage?.dataSizeBytes;\n  });\n\n  private readonly _attachmentsSizeBytes = Computed.create(this, this._currentDocUsage, (_use, usage) => {\n    return usage?.attachmentsSizeBytes;\n  });\n\n  private readonly _rowMetricOptions: Computed<MetricOptions> =\n    Computed.create(this, this._currentProduct, this._rowCount, (_use, product, rowCount) => {\n      const maxRows = product?.features.baseMaxRowsPerDocument;\n      // Invalid row limits are currently treated as if they are undefined.\n      const maxValue = maxRows && maxRows > 0 ? maxRows : undefined;\n      return {\n        name: t(\"Rows\"),\n        currentValue: typeof rowCount !== 'object' ? undefined : rowCount.total,\n        maximumValue: maxValue ?? DEFAULT_MAX_ROWS,\n        unit: 'rows',\n        shouldHideLimits: maxValue === undefined,\n        formatValue: (val) => this._rowCountFormatter.format(val),\n      };\n    });\n\n  private readonly _dataSizeMetricOptions: Computed<MetricOptions> =\n    Computed.create(this, this._currentProduct, this._dataSizeBytes, (_use, product, dataSize) => {\n      const maxSize = product?.features.baseMaxDataSizePerDocument;\n      // Invalid data size limits are currently treated as if they are undefined.\n      const maxValue = maxSize && maxSize > 0 ? maxSize : undefined;\n      return {\n        name: t(\"Data Size\"),\n        currentValue: typeof dataSize !== 'number' ? undefined : dataSize,\n        maximumValue: maxValue ?? DEFAULT_MAX_DATA_SIZE,\n        unit: 'MB',\n        shouldHideLimits: maxValue === undefined,\n        tooltipContentFunc: GristTooltips.dataSize,\n        formatValue: (val) => {\n          // To display a nice, round number for `maximumValue`, we first convert\n          // to KiBs (base-2), and then convert to MBs (base-10). Normally, we wouldn't\n          // mix conversions like this, but to display something that matches our\n          // marketing limits (e.g. 40MB for Pro plan), we need to bend conversions a bit.\n          return ((val / 1024) / 1000).toFixed(2);\n        },\n      };\n    });\n\n  private readonly _attachmentsSizeMetricOptions: Computed<MetricOptions> =\n    Computed.create(this, this._currentProduct, this._attachmentsSizeBytes, (_use, product, attachmentsSize) => {\n      const maxSize = product?.features.baseMaxAttachmentsBytesPerDocument;\n      // Invalid attachments size limits are currently treated as if they are undefined.\n      const maxValue = maxSize && maxSize > 0 ? maxSize : undefined;\n      return {\n        name: t(\"Attachments Size\"),\n        currentValue: typeof attachmentsSize !== 'number' ? undefined : attachmentsSize,\n        maximumValue: maxValue ?? DEFAULT_MAX_ATTACHMENTS_SIZE,\n        unit: 'GB',\n        shouldHideLimits: maxValue === undefined,\n        formatValue: (val) => (val / (1024 * 1024 * 1024)).toFixed(2),\n      };\n    });\n\n  private readonly _areAllMetricsPending: Computed<boolean> =\n    Computed.create(\n      this, this._currentDoc, this._rowCount, this._dataSizeBytes, this._attachmentsSizeBytes,\n      (_use, doc, rowCount, dataSize, attachmentsSize) => {\n        const hasNonPendingMetrics = [rowCount, dataSize, attachmentsSize]\n          .some(metric => metric !== 'pending' && metric !== undefined);\n        return !doc || !hasNonPendingMetrics;\n      }\n    );\n\n  private readonly _isAccessDenied: Computed<boolean | null> =\n    Computed.create(this, this._areAllMetricsPending, this._currentDoc, this._rowCount,\n      this._dataSizeBytes, this._attachmentsSizeBytes,\n      (_use, isLoading, doc, rowCount, dataSize, attachmentsSize) => {\n        if (isLoading) { return null; }\n\n        const {access} = doc!.workspace.org;\n        const isPublicUser = access === 'guests' || access === null;\n        const hasHiddenMetrics = [rowCount, dataSize, attachmentsSize].some(metric => metric === 'hidden');\n        return isPublicUser || hasHiddenMetrics;\n      }\n    );\n\n  constructor(private _docPageModel: DocPageModel) {\n    super();\n  }\n\n  public buildDom() {\n    return dom('div',\n      cssHeader(t(\"Usage\"), testId('heading')),\n      dom.domComputed(this._areAllMetricsPending, (isLoading) => {\n        if (isLoading) { return cssSpinner(loadingSpinner(), testId('loading')); }\n\n        return [this._buildMessage(), this._buildMetrics()];\n      }),\n      testId('container'),\n    );\n  }\n\n  private _buildMessage() {\n    return dom.domComputed((use) => {\n      const isAccessDenied = use(this._isAccessDenied);\n      if (isAccessDenied === null) { return null; }\n      if (isAccessDenied) {\n        return buildMessage(t(\"Usage statistics are only available to users with full access to the document data.\"));\n      }\n\n      const org = use(this._currentOrg);\n      const product = use(this._currentProduct);\n      const status = use(this._dataLimitStatus);\n      if (!org || !status) { return null; }\n\n      return buildMessage([\n        buildLimitStatusMessage(status, product?.features, {\n          disableRawDataLink: true\n        }),\n        (product && isFreePlan(product.name)\n          ? [' ', buildUpgradeMessage(\n            canUpgradeOrg(org),\n            'long',\n            () =>  this._docPageModel.appModel.showUpgradeModal()\n          )]\n          : null\n        ),\n      ]);\n    });\n  }\n\n  private _buildMetrics() {\n    return dom.maybe(use => use(this._isAccessDenied) === false, () =>\n      cssUsageMetrics(\n        dom.domComputed(this._rowMetricOptions, (metrics) =>\n          buildUsageMetric(metrics, testId('rows')),\n        ),\n        dom.domComputed(this._dataSizeMetricOptions, (metrics) =>\n          buildUsageMetric(metrics, testId('data-size')),\n        ),\n        dom.domComputed(this._attachmentsSizeMetricOptions, (metrics) =>\n          buildUsageMetric(metrics, testId('attachments-size')),\n        ),\n        testId('metrics'),\n      ),\n    );\n  }\n}\n\nexport function buildLimitStatusMessage(\n  status: NonNullable<DataLimitStatus>,\n  features?: Features,\n  options: {\n    disableRawDataLink?: boolean;\n  } = {}\n) {\n  const {disableRawDataLink = false} = options;\n  switch (status) {\n    case 'approachingLimit': {\n      return [\n        'This document is ',\n        disableRawDataLink ? 'approaching' : buildRawDataPageLink('approaching'),\n        ' free plan limits.'\n      ];\n    }\n    case 'gracePeriod': {\n      const gracePeriodDays = features?.gracePeriodDays;\n      if (!gracePeriodDays) {\n        return [\n          'Document limits ',\n          disableRawDataLink ? 'exceeded' : buildRawDataPageLink('exceeded'),\n          '.'\n        ];\n      }\n\n      return [\n        'Document limits ',\n        disableRawDataLink ? 'exceeded' : buildRawDataPageLink('exceeded'),\n        `. In ${gracePeriodDays} days, this document will be read-only.`\n      ];\n    }\n    case 'deleteOnly': {\n      return [\n        'This document ',\n        disableRawDataLink ? 'exceeded' : buildRawDataPageLink('exceeded'),\n        ' free plan limits and is now read-only, but you can delete rows.'\n      ];\n    }\n  }\n}\n\nexport function buildUpgradeMessage(\n  canUpgrade: boolean,\n  variant: 'short' | 'long',\n  onUpgrade: () => void,\n) {\n  if (!canUpgrade) { return t(\"Contact the site owner to upgrade the plan to raise limits.\"); }\n\n  const upgradeLinkText = t(\"start your 30-day free trial of the Pro plan.\");\n  // TODO i18next\n  return [\n    variant === 'short' ? null : t(\"For higher limits, \"),\n    buildUpgradeLink(\n      variant === 'short' ? capitalizeFirstWord(upgradeLinkText) : upgradeLinkText,\n      () => onUpgrade(),\n    ),\n  ];\n}\n\nfunction buildUpgradeLink(linkText: string, onClick: () => void) {\n  return cssUnderlinedLink(linkText, dom.on('click', () => onClick()));\n}\n\nfunction buildRawDataPageLink(linkText: string) {\n  return cssUnderlinedLink(linkText, urlState().setLinkUrl({docPage: 'data'}));\n}\n\ninterface MetricOptions {\n  name: string;\n  // If undefined, loading dots will be shown.\n  currentValue?: number;\n  // If undefined or non-positive (i.e. invalid), no limits will be assumed.\n  maximumValue?: number;\n  unit?: string;\n  // If true, limits will always be hidden, even if `maximumValue` is a positive number.\n  shouldHideLimits?: boolean;\n  // Shows an icon next to the metric name that displays a tooltip on hover.\n  tooltipContentFunc?: TooltipContentFunc;\n  formatValue?(value: number): string;\n}\n\n/**\n * Builds a component which displays the current and maximum values for\n * a particular metric (e.g. row count), and a progress meter showing how\n * close `currentValue` is to hitting `maximumValue`.\n */\nfunction buildUsageMetric(options: MetricOptions, ...domArgs: DomElementArg[]) {\n  const {name, tooltipContentFunc} = options;\n  return cssUsageMetric(\n    cssMetricName(\n      tooltipContentFunc\n        ? withInfoTooltip(\n            cssOverflowableText(name, testId('name')),\n            tooltipContentFunc()\n          )\n        : cssOverflowableText(name, testId('name')),\n    ),\n    buildUsageProgressBar(options),\n    ...domArgs,\n  );\n}\n\nfunction buildUsageProgressBar(options: MetricOptions) {\n  const {\n    currentValue,\n    maximumValue,\n    shouldHideLimits,\n    unit,\n    formatValue = (n) => n.toString()\n  } = options;\n\n  let ratioUsed: number;\n  let percentUsed: number;\n  if (currentValue === undefined) {\n    ratioUsed = 0;\n    percentUsed = 0;\n  } else {\n    ratioUsed = currentValue / (maximumValue || Infinity);\n    percentUsed = Math.min(100, Math.floor(ratioUsed * 100));\n  }\n\n  return [\n    cssProgressBarContainer(\n      cssProgressBarFill(\n        {style: `width: ${percentUsed}%`},\n        // Change progress bar to red if close to limit, unless limits are hidden.\n        shouldHideLimits || ratioUsed <= APPROACHING_LIMIT_RATIO\n          ? null\n          : cssProgressBarFill.cls('-approaching-limit'),\n        testId('progress-fill'),\n      ),\n    ),\n    dom('div',\n      currentValue === undefined ? ['Loading ', cssLoadingDots()] : formatValue(currentValue)\n        + (shouldHideLimits || !maximumValue ? '' : ' of ' + formatValue(maximumValue))\n        + (unit ? ` ${unit}` : ''),\n      testId('value'),\n    ),\n  ];\n}\n\nfunction buildMessage(message: DomContents) {\n  return cssWarningMessage(\n    cssIcon('Idea'),\n    cssLightlyBoldedText(message, testId('message-text')),\n    testId('message'),\n  );\n}\n\nconst cssLightlyBoldedText = styled('div', `\n  font-weight: 500;\n`);\n\nconst cssWarningMessage = styled('div', `\n  color: ${theme.text};\n  --icon-color: ${theme.text};\n  display: flex;\n  gap: 16px;\n  margin-top: 16px;\n`);\n\nconst cssIcon = styled(icon, `\n  flex-shrink: 0;\n  width: 16px;\n  height: 16px;\n`);\n\nconst cssMetricName = styled('div', `\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  font-weight: 700;\n`);\n\nconst cssOverflowableText = styled('span', `\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n`);\n\nconst cssHeader = styled(docListHeader, `\n  margin-bottom: 0px;\n`);\n\nconst cssUnderlinedLink = styled('span', `\n  cursor: pointer;\n  color: unset;\n  text-decoration: underline;\n\n  &:hover, &:focus {\n    color: unset;\n  }\n`);\n\nconst cssUsageMetrics = styled('div', `\n  display: flex;\n  flex-wrap: wrap;\n  margin-top: 24px;\n  row-gap: 24px;\n  column-gap: 54px;\n`);\n\nconst cssUsageMetric = styled('div', `\n  color: ${theme.text};\n  display: flex;\n  flex-direction: column;\n  width: 180px;\n  gap: 8px;\n\n  @media ${mediaXSmall} {\n    & {\n      width: 100%;\n    }\n  }\n`);\n\nconst cssProgressBarContainer = styled('div', `\n  width: 100%;\n  height: 4px;\n  border-radius: 5px;\n  background: ${theme.progressBarBg};\n`);\n\nconst cssProgressBarFill = styled(cssProgressBarContainer, `\n  background: ${theme.progressBarFg};\n\n  &-approaching-limit {\n    background: ${theme.progressBarErrorFg};\n  }\n`);\n\nconst cssSpinner = styled('div', `\n  display: flex;\n  justify-content: center;\n  margin-top: 32px;\n`);\n\nconst cssLoadingDots = styled(loadingDots, `\n  --dot-size: 8px;\n`);\n","import {makeT} from 'app/client/lib/localization';\nimport {allCommands} from 'app/client/components/commands';\nimport {ViewSectionRec} from 'app/client/models/DocModel';\nimport {urlState} from 'app/client/models/gristUrlState';\nimport {testId} from 'app/client/ui2018/cssVars';\nimport {menuDivider, menuItemCmd, menuItemLink} from 'app/client/ui2018/menus';\nimport {GristDoc} from 'app/client/components/GristDoc';\nimport {dom, UseCB} from 'grainjs';\n\nconst t = makeT('ViewLayoutMenu');\n\n/**\n * Returns a list of menu items for a view section.\n */\nexport function makeViewLayoutMenu(viewSection: ViewSectionRec, isReadonly: boolean) {\n  const viewInstance = viewSection.viewInstance.peek()!;\n  const gristDoc = viewInstance.gristDoc;\n\n  // get current row index from cursor\n  const cursorRow = viewInstance.cursor.rowIndex.peek();\n  // get row id from current data\n  // rowId can be string - it is wrongly typed in cursor and in viewData\n  const rowId = (cursorRow !== null ? viewInstance.viewData.getRowId(cursorRow) : null) as string|null|number;\n  const isAddRow = rowId === 'new';\n\n  const contextMenu = [\n    menuItemCmd(allCommands.deleteRecords,\n      t(\"Delete record\"),\n      testId('section-delete-card'),\n      dom.cls('disabled', isReadonly || isAddRow)),\n    menuItemCmd(allCommands.copyLink,\n      t(\"Copy anchor link\"),\n      testId('section-card-link'),\n    ),\n    menuDivider(),\n  ];\n\n  const viewRec = viewSection.view();\n  const isSinglePage = urlState().state.get().params?.style === 'singlePage';\n\n  const sectionId = viewSection.table.peek().rawViewSectionRef.peek();\n  const anchorUrlState = viewInstance.getAnchorLinkForSection(sectionId);\n  anchorUrlState.hash!.popup = true;\n  const rawUrl = urlState().makeUrl(anchorUrlState);\n\n  // Count number of rendered sections on the viewLayout. Note that the layout might be detached or cleaned\n  // when we have an external section in the popup.\n  const expandedSectionCount = () => gristDoc.viewLayout?.layout.getAllLeafIds().length ?? 0 > 1;\n\n  const dontRemoveSection = () =>\n    !viewRec.getRowId() || viewRec.viewSections().peekLength <= 1 || isReadonly || expandedSectionCount() === 1;\n\n  const dontCollapseSection = () =>\n    dontRemoveSection() ||\n    (gristDoc.externalSectionId.get() === viewSection.getRowId()) ||\n    (gristDoc.maximizedSectionId.get() === viewSection.getRowId());\n\n  const showRawData = (use: UseCB) => {\n    return !use(viewSection.isRaw)// Don't show raw data if we're already in raw data.\n        && !isSinglePage // Don't show raw data in single page mode.\n           ;\n  };\n\n  return [\n    dom.maybe((use) => ['single'].includes(use(viewSection.parentKey)), () => contextMenu),\n    dom.maybe(showRawData,\n      () => menuItemLink(\n        { href: rawUrl}, t(\"Show raw data\"), testId('show-raw-data'),\n        dom.on('click', (ev) => {\n          // Replace the current URL so that the back button works as expected (it navigates back from\n          // the current page).\n          ev.stopImmediatePropagation();\n          ev.preventDefault();\n          urlState().pushUrl(anchorUrlState, { replace: true }).catch(reportError);\n        })\n      )\n    ),\n    menuItemCmd(allCommands.printSection, t(\"Print widget\"), testId('print-section')),\n    menuItemLink({ href: gristDoc.getCsvLink(), target: '_blank', download: ''},\n      t(\"Download as CSV\"), testId('download-section')),\n    menuItemLink({ href: gristDoc.getXlsxActiveViewLink(), target: '_blank', download: ''},\n      t(\"Download as XLSX\"), testId('download-section')),\n    dom.maybe((use) => ['detail', 'single'].includes(use(viewSection.parentKey)), () =>\n      menuItemCmd(allCommands.editLayout, t(\"Edit Card Layout\"),\n        dom.cls('disabled', isReadonly))),\n\n    dom.maybe(!isSinglePage, () => [\n      menuDivider(),\n      menuItemCmd(allCommands.viewTabOpen, t(\"Widget options\"), testId('widget-options')),\n      menuItemCmd(allCommands.sortFilterTabOpen, t(\"Advanced Sort & Filter\")),\n      menuItemCmd(allCommands.dataSelectionTabOpen, t(\"Data selection\")),\n    ]),\n\n    menuDivider(),\n    dom.maybe((use) => use(viewSection.parentKey) === 'custom' && use(viewSection.hasCustomOptions), () =>\n      menuItemCmd(allCommands.openWidgetConfiguration, t(\"Open configuration\"),\n        testId('section-open-configuration')),\n    ),\n    menuItemCmd(allCommands.collapseSection, t(\"Collapse widget\"),\n      dom.cls('disabled', dontCollapseSection()),\n      testId('section-collapse')),\n    menuItemCmd(allCommands.deleteSection, t(\"Delete widget\"),\n      dom.cls('disabled', dontRemoveSection()),\n      testId('section-delete')),\n  ];\n}\n\n\n/**\n * Returns a list of menu items for a view section.\n */\nexport function makeCollapsedLayoutMenu(viewSection: ViewSectionRec, gristDoc: GristDoc) {\n  const isReadonly = gristDoc.isReadonly.get();\n  const isSinglePage = urlState().state.get().params?.style === 'singlePage';\n  const sectionId = viewSection.table.peek().rawViewSectionRef.peek();\n  const anchorUrlState = { hash: { sectionId, popup: true } };\n  const rawUrl = urlState().makeUrl(anchorUrlState);\n  return [\n    dom.maybe((use) => !use(viewSection.isRaw) && !isSinglePage && !use(gristDoc.maximizedSectionId),\n      () => menuItemLink(\n        { href: rawUrl}, t(\"Show raw data\"), testId('show-raw-data'),\n        dom.on('click', (ev) => {\n          // Replace the current URL so that the back button works as expected (it navigates back from\n          // the current page).\n          ev.stopImmediatePropagation();\n          ev.preventDefault();\n          urlState().pushUrl(anchorUrlState, { replace: true }).catch(reportError);\n        })\n      )\n    ),\n    menuDivider(),\n    menuItemCmd(allCommands.expandSection, t(\"Add to page\"),\n      dom.cls('disabled', isReadonly),\n      testId('section-expand')),\n    menuItemCmd(allCommands.deleteCollapsedSection, t(\"Delete widget\"),\n      dom.cls('disabled', isReadonly),\n      testId('section-delete')),\n  ];\n}\n","import {GristDoc} from 'app/client/components/GristDoc';\nimport {allCommands} from 'app/client/components/commands';\nimport {makeT} from 'app/client/lib/localization';\nimport {reportError} from 'app/client/models/AppModel';\nimport {DocModel, ViewSectionRec} from 'app/client/models/DocModel';\nimport {FilterConfig} from 'app/client/ui/FilterConfig';\nimport {cssLabel, cssSaveButtonsRow} from 'app/client/ui/RightPanelStyles';\nimport {hoverTooltip} from 'app/client/ui/tooltips';\nimport {SortConfig} from 'app/client/ui/SortConfig';\nimport {makeViewLayoutMenu} from 'app/client/ui/ViewLayoutMenu';\nimport {basicButton, primaryButton} from 'app/client/ui2018/buttons';\nimport {isNarrowScreenObs, theme, vars} from 'app/client/ui2018/cssVars';\nimport {icon} from 'app/client/ui2018/icons';\nimport {menu} from 'app/client/ui2018/menus';\nimport {Computed, dom, IDisposableOwner, makeTestId, styled} from 'grainjs';\nimport {defaultMenuOptions} from 'popweasel';\n\nconst testId = makeTestId('test-section-menu-');\nconst t = makeT('ViewSectionMenu');\n\n// Handler for [Save] button.\nasync function doSave(docModel: DocModel, viewSection: ViewSectionRec): Promise<void> {\n  await docModel.docData.bundleActions(t(\"Update Sort&Filter settings\"), () => Promise.all([\n    viewSection.activeSortJson.save(),      // Save sort\n    viewSection.saveFilters(),              // Save filter\n    viewSection.activeCustomOptions.save(), // Save widget options\n  ]));\n}\n\n// Handler for [Revert] button.\nfunction doRevert(viewSection: ViewSectionRec) {\n  viewSection.activeSortJson.revert();      // Revert sort\n  viewSection.revertFilters();              // Revert filter\n  viewSection.activeCustomOptions.revert(); // Revert widget options\n}\n\n// [Filter Icon] - Filter toggle and all the components in the menu.\nexport function viewSectionMenu(\n  owner: IDisposableOwner,\n  gristDoc: GristDoc,\n  viewSection: ViewSectionRec,\n) {\n  const {docModel, isReadonly} = gristDoc;\n\n  // If there is any filter (should [Filter Icon] background be filled).\n  const anyFilter = Computed.create(owner, (use) =>  Boolean(use(viewSection.activeFilters).length));\n\n  // Should we show [Save] [Revert] buttons.\n  const displaySaveObs: Computed<boolean> = Computed.create(owner, (use) => (\n    use(viewSection.filterSpecChanged)\n      || !use(viewSection.activeSortJson.isSaved)\n      || !use(viewSection.activeCustomOptions.isSaved)\n  ));\n\n  const save = () => { doSave(docModel, viewSection).catch(reportError); };\n  const revert = () => doRevert(viewSection);\n\n  // Should we show expand icon.\n  const showExpandIcon = Computed.create(owner, (use) => {\n    return !use(isNarrowScreenObs()) // not on narrow screens\n         && use(gristDoc.maximizedSectionId) !== use(viewSection.id) // not in when we are maximized\n         && use(gristDoc.externalSectionId) !== use(viewSection.id) // not in when we are external\n         && !use(viewSection.isRaw); // not in raw mode\n  });\n\n  return [\n    cssFilterMenuWrapper(\n      cssFilterMenuWrapper.cls('-unsaved', displaySaveObs),\n      testId('wrapper'),\n      cssMenu(\n        testId('sortAndFilter'),\n        // [Filter icon]\n        cssFilterIconWrapper(\n          testId('filter-icon'),\n          // Fill background when there are some filters. Ignore sort options.\n          cssFilterIconWrapper.cls('-any', anyFilter),\n          cssFilterIcon('Filter'),\n          hoverTooltip('Sort and filter', {key: 'sortFilterBtnTooltip'}),\n        ),\n      ),\n      // [Save] [Revert] buttons when there are unsaved options.\n      dom.maybe(displaySaveObs, () => cssSectionSaveButtonsWrapper(\n        cssSaveTextButton(\n          t(\"Save\"),\n          cssSaveTextButton.cls('-accent'),\n          dom.on('click', save),\n          hoverTooltip('Save sort & filter settings', {key: 'sortFilterBtnTooltip'}),\n          testId('small-btn-save'),\n          dom.hide(isReadonly),\n        ),\n        cssRevertIconButton(\n          cssRevertIcon('Revert', cssRevertIcon.cls('-normal')),\n          dom.on('click', revert),\n          hoverTooltip('Revert sort & filter settings', {key: 'sortFilterBtnTooltip'}),\n          testId('small-btn-revert'),\n        ),\n      )),\n      menu(ctl => [\n        // Sort section.\n        makeSortPanel(viewSection, gristDoc),\n        // Filter section.\n        makeFilterPanel(viewSection),\n        // Widget options\n        dom.maybe(use => use(viewSection.parentKey) === 'custom', () =>\n          makeCustomOptions(viewSection)\n        ),\n        // [Save] [Revert] buttons\n        dom.domComputed(displaySaveObs, displaySave => [\n          displaySave ? cssSaveButtonsRow(\n            cssSaveButton(t(\"Save\"), testId('btn-save'),\n                          dom.on('click', () => { ctl.close(); save(); }),\n                          dom.boolAttr('disabled', isReadonly)),\n            basicButton(t(\"Revert\"), testId('btn-revert'),\n                        dom.on('click', () => { ctl.close(); revert(); }))\n          ) : null,\n        ]),\n        // Updates to active sort or filters can cause menu contents to grow, while\n        // leaving the position of the popup unchanged. This can sometimes lead to\n        // the menu growing beyond the boundaries of the viewport. To mitigate this,\n        // we subscribe to changes to the sort/filters and manually update the popup's\n        // position, which will re-position the popup if necessary so that it's fully\n        // visible.\n        dom.autoDispose(viewSection.activeFilters.addListener(() => ctl.update())),\n        dom.autoDispose(viewSection.activeSortJson.subscribe(() => ctl.update())),\n      ], {...defaultMenuOptions, placement: 'bottom-end', trigger: [\n        // Toggle the menu whenever the filter icon button is clicked.\n        (el, ctl) => dom.onMatchElem(el, '.test-section-menu-sortAndFilter', 'click', () => {\n          ctl.toggle();\n        }),\n        // Close the menu whenever the save or revert button is clicked.\n        (el, ctl) => dom.onMatchElem(el, '.test-section-menu-small-btn-save', 'click', () => {\n          ctl.close();\n        }),\n        (el, ctl) => dom.onMatchElem(el, '.test-section-menu-small-btn-revert', 'click', () => {\n          ctl.close();\n        }),\n      ]}),\n    ),\n    cssMenu(\n      testId('viewLayout'),\n      cssDotsIconWrapper(cssIcon('Dots')),\n      menu(_ctl => makeViewLayoutMenu(viewSection, isReadonly.get()), {\n        ...defaultMenuOptions,\n        placement: 'bottom-end',\n      })\n    ),\n    dom.maybe(showExpandIcon, () =>\n      cssExpandIconWrapper(\n        cssSmallIcon('Grow'),\n        testId('expandSection'),\n        dom.on('click', () =>  allCommands.maximizeActiveSection.run()),\n        hoverTooltip('Expand section', {key: 'expandSection'}),\n      ),\n    )\n  ];\n}\n\nfunction makeSortPanel(section: ViewSectionRec, gristDoc: GristDoc) {\n  return [\n    cssLabel(t(\"SORT\"), testId('heading-sort')),\n    dom.create(SortConfig, section, gristDoc, {\n      // Attach content to triggerElem's parent, which is needed to prevent view\n      // section menu to close when clicking an item in the advanced sort menu.\n      menuOptions: {attach: null},\n    }),\n  ];\n}\n\nfunction makeFilterPanel(section: ViewSectionRec) {\n  return [\n    cssLabel(t(\"FILTER\"), testId('heading-filter')),\n    dom.create(FilterConfig, section, {\n      // Attach content to triggerElem's parent, which is needed to prevent view\n      // section menu to close when clicking an item of the add filter menu.\n      menuOptions: {attach: null},\n    }),\n  ];\n}\n\n// Custom Options\n// (empty)|(customized)|(modified) [Remove Icon]\nfunction makeCustomOptions(section: ViewSectionRec) {\n  const color = Computed.create(null, use => use(section.activeCustomOptions.isSaved) ? \"-normal\" : \"-accent\");\n  const text = Computed.create(null, use => {\n    if (use(section.activeCustomOptions)) {\n      return use(section.activeCustomOptions.isSaved) ? t(\"(customized)\") : t(\"(modified)\");\n    } else {\n      return t(\"(empty)\");\n    }\n  });\n  return [\n    cssMenuInfoHeader(t(\"Custom options\"), testId('heading-widget-options')),\n    cssMenuText(\n      dom.autoDispose(text),\n      dom.autoDispose(color),\n      dom.text(text),\n      cssMenuText.cls(color),\n      cssSpacer(),\n      dom.maybe(use => Boolean(use(section.activeCustomOptions)), () =>\n        cssMenuIconWrapper(\n          cssIcon('Remove', testId('btn-remove-options'), dom.on('click', () =>\n            section.activeCustomOptions(null)\n          ))\n        ),\n      ),\n      testId(\"custom-options\")\n    )\n  ];\n}\n\nconst clsOldUI = styled('div', ``);\n\n\nexport const cssMenu = styled('div', `\n  display: flex;\n  cursor: pointer;\n  border-radius: 3px;\n  &.${clsOldUI.className} {\n    margin-top: 0px;\n    border-radius: 0px;\n  }\n  &:hover, &.weasel-popup-open {\n    background-color: ${theme.hover};\n  }\n`);\n\nconst cssIconWrapper = styled('div', `\n  padding: 3px;\n  border-radius: 3px;\n  cursor: pointer;\n  user-select: none;\n`);\n\nconst cssMenuIconWrapper = styled(cssIconWrapper, `\n  display: flex;\n  margin: -3px 0;\n  width: 22px;\n  height: 22px;\n\n  &:hover, &.weasel-popup-open {\n    background-color: ${theme.hover};\n  }\n  &-changed {\n    background-color: ${theme.accentIcon};\n  }\n  &-changed:hover, &-changed:hover.weasel-popup-open {\n    background-color: ${theme.controlHoverFg};\n  }\n`);\n\nconst cssFilterMenuWrapper = styled('div', `\n  display: flex;\n  border-radius: 3px;\n  align-items: center;\n  &-unsaved {\n    border: 1px solid ${theme.accentBorder};\n  }\n  & .${cssMenu.className} {\n    border: none;\n  }\n`);\n\nconst cssIcon = styled(icon, `\n  flex: none;\n  cursor: pointer;\n  background-color: ${theme.lightText};\n\n  .${cssMenuIconWrapper.className}-changed & {\n    background-color: ${theme.controlPrimaryFg};\n  }\n\n  .${clsOldUI.className} & {\n    background-color: ${theme.controlPrimaryFg};\n  }\n\n  &-accent {\n    background-color: ${theme.accentIcon};\n  }\n`);\n\nexport const cssDotsIconWrapper = styled(cssIconWrapper, `\n  border-radius: 0px 2px 2px 0px;\n  display: flex;\n  .${clsOldUI.className} & {\n    border-radius: 0px;\n  }\n`);\n\nconst cssExpandIconWrapper = styled('div', `\n  display: flex;\n  border-radius: 3px;\n  align-items: center;\n  padding: 4px;\n  cursor: pointer;\n  &:hover, &.weasel-popup-open {\n    background-color: ${theme.hover};\n  }\n`);\n\nconst cssSmallIcon = styled(cssIcon, `\n  height: 13px;\n  width: 13px;\n`);\n\nconst cssFilterIconWrapper = styled(cssIconWrapper, `\n  border-radius: 2px 0px 0px 2px;\n  display: flex;\n  &-any {\n    border-radius: 2px;\n    background-color: ${theme.controlSecondaryFg};\n  }\n  .${cssFilterMenuWrapper.className}-unsaved & {\n    background-color: ${theme.controlPrimaryBg};\n  }\n`);\n\nconst cssFilterIcon = styled(cssIcon, `\n  .${cssFilterIconWrapper.className}-any & {\n    background-color: ${theme.controlPrimaryFg};\n  }\n  .${cssFilterMenuWrapper.className}-unsaved & {\n    background-color: ${theme.controlPrimaryFg};\n  }\n`);\n\nconst cssMenuInfoHeader = styled('div', `\n  color: ${theme.menuSubheaderFg};\n  font-weight: ${vars.bigControlTextWeight};\n  padding: 8px 24px 8px 24px;\n  cursor: default;\n`);\n\nconst cssMenuText = styled('div', `\n  display: flex;\n  align-items: center;\n  padding: 0px 24px 8px 24px;\n  cursor: default;\n  white-space: nowrap;\n  &-accent {\n    color: ${theme.accentText};\n  }\n  &-normal {\n    color: ${theme.lightText};\n  }\n`);\n\nconst cssSaveButton = styled(primaryButton, `\n  margin-right: 8px;\n`);\n\nconst cssSaveTextButton = styled('div', `\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n  font-size: ${vars.mediumFontSize};\n  padding: 0px 5px;\n  border-right: 1px solid ${theme.accentBorder};\n\n  &-accent {\n    color: ${theme.accentText};\n  }\n`);\n\nconst cssRevertIconButton = styled('div', `\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n`);\n\nconst cssRevertIcon = styled(icon, `\n  --icon-color: ${theme.accentIcon};\n  margin: 0 5px 0 5px;\n`);\n\nconst cssSectionSaveButtonsWrapper = styled('div', `\n  padding: 0 1px 0 1px;\n  display: flex;\n  justify-content: space-between;\n  align-self: normal;\n`);\n\nconst cssSpacer = styled('div', `\n  margin: 0 auto;\n`);\n","import BaseView from 'app/client/components/BaseView';\nimport {GristDoc} from 'app/client/components/GristDoc';\nimport {ViewRec, ViewSectionRec} from 'app/client/models/DocModel';\nimport {makeT} from 'app/client/lib/localization';\nimport {filterBar} from 'app/client/ui/FilterBar';\nimport {cssIcon} from 'app/client/ui/RightPanelStyles';\nimport {makeCollapsedLayoutMenu} from 'app/client/ui/ViewLayoutMenu';\nimport {cssDotsIconWrapper, cssMenu, viewSectionMenu} from 'app/client/ui/ViewSectionMenu';\nimport {buildWidgetTitle} from 'app/client/ui/WidgetTitle';\nimport {getWidgetTypes} from 'app/client/ui/widgetTypes';\nimport {colors, isNarrowScreenObs, mediaSmall, testId, theme} from 'app/client/ui2018/cssVars';\nimport {icon} from 'app/client/ui2018/icons';\nimport {menu} from 'app/client/ui2018/menus';\nimport {Computed, dom, DomElementArg, Observable, styled} from 'grainjs';\nimport {defaultMenuOptions} from 'popweasel';\n\nconst t = makeT('ViewSection');\n\nexport function buildCollapsedSectionDom(options: {\n  gristDoc: GristDoc,\n  sectionRowId: number|string,\n}, ...domArgs: DomElementArg[]) {\n  const {gristDoc, sectionRowId} = options;\n  if (typeof sectionRowId === 'string') {\n    return cssMiniSection(\n      dom('span.viewsection_title_font',\n        'Empty'\n      )\n    );\n  }\n  const vs: ViewSectionRec = gristDoc.docModel.viewSections.getRowModel(sectionRowId);\n  const typeComputed = Computed.create(null, use => getWidgetTypes(use(vs.parentKey) as any).icon);\n  return cssMiniSection(\n    testId(`collapsed-section-${sectionRowId}`),\n    testId(`collapsed-section`),\n    cssDragHandle(\n      dom.domComputed(typeComputed, (type) => icon(type)),\n      dom('div', {style: 'margin-right: 16px;'}),\n      dom.maybe((use) => use(use(vs.table).summarySourceTable), () => cssSigmaIcon('Pivot', testId('sigma'))),\n      dom('span.viewsection_title_font', testId('collapsed-section-title'),\n        dom.text(vs.titleDef),\n      ),\n    ),\n    cssMenu(\n      testId('section-menu-viewLayout'),\n      cssDotsIconWrapper(cssIcon('Dots')),\n      menu(_ctl => makeCollapsedLayoutMenu(vs, gristDoc), {\n        ...defaultMenuOptions,\n        placement: 'bottom-end',\n      })\n    ),\n    ...domArgs\n  );\n}\n\n\nexport function buildViewSectionDom(options: {\n  gristDoc: GristDoc,\n  sectionRowId: number,\n  isResizing?: Observable<boolean>\n  viewModel?: ViewRec,\n  // Should show drag anchor.\n  draggable?: boolean, /* defaults to true */\n  // Should show green bar on the left (but preserves active-section class).\n  focusable?: boolean, /* defaults to true */\n  tableNameHidden?: boolean,\n  widgetNameHidden?: boolean,\n}) {\n  const isResizing = options.isResizing ?? Observable.create(null, false);\n  const {gristDoc, sectionRowId, viewModel, draggable = true, focusable = true} = options;\n\n  // Creating normal section dom\n  const vs: ViewSectionRec = gristDoc.docModel.viewSections.getRowModel(sectionRowId);\n  const selectedBySectionTitle = Computed.create(null, (use) => {\n    if (!use(vs.linkSrcSectionRef)) { return null; }\n    return use(use(vs.linkSrcSection).titleDef);\n  });\n  return dom('div.view_leaf.viewsection_content.flexvbox.flexauto',\n    testId(`viewlayout-section-${sectionRowId}`),\n    dom.autoDispose(selectedBySectionTitle),\n    !options.isResizing ? dom.autoDispose(isResizing) : null,\n    cssViewLeaf.cls(''),\n    cssViewLeafInactive.cls('', (use) => !vs.isDisposed() && !use(vs.hasFocus)),\n    dom.cls('active_section', vs.hasFocus),\n    dom.cls('active_section--no-indicator', !focusable),\n    dom.maybe<BaseView|null>((use) => use(vs.viewInstance), (viewInstance) => dom('div.viewsection_title.flexhbox',\n      cssDragIcon('DragDrop',\n        dom.cls(\"viewsection_drag_indicator\"),\n        // Makes element grabbable only if grist is not readonly.\n        dom.cls('layout_grabbable', (use) => !use(gristDoc.isReadonlyKo)),\n        !draggable ? dom.style(\"visibility\", \"hidden\") : null\n      ),\n      dom.maybe((use) => use(use(viewInstance.viewSection.table).summarySourceTable), () =>\n        cssSigmaIcon('Pivot', testId('sigma'))),\n      buildWidgetTitle(vs, options, testId('viewsection-title'), cssTestClick(testId(\"viewsection-blank\"))),\n      viewInstance.buildTitleControls(),\n      dom('div.viewsection_buttons',\n        dom.create(viewSectionMenu, gristDoc, vs)\n      )\n     )),\n    dom.create(filterBar, gristDoc, vs),\n    dom.maybe<BaseView|null>(vs.viewInstance, (viewInstance) => [\n      dom('div.view_data_pane_container.flexvbox',\n        cssResizing.cls('', isResizing),\n        dom.maybe(viewInstance.disableEditing, () =>\n          dom('div.disable_viewpane.flexvbox',\n            dom.domComputed(selectedBySectionTitle, (title) => title\n              ? t(`No row selected in {{title}}`, {title})\n              : t('No data')),\n          )\n        ),\n        dom.maybe(viewInstance.isTruncated, () =>\n          dom('div.viewsection_truncated', t('Not all data is shown'))\n        ),\n        dom.cls((use) => 'viewsection_type_' + use(vs.parentKey)),\n        viewInstance.viewPane\n      ),\n      dom.maybe(use => !use(isNarrowScreenObs()), () => viewInstance.selectionSummary?.buildDom()),\n    ]),\n    dom.on('mousedown', () => { viewModel?.activeSectionId(sectionRowId); }),\n  );\n}\n\n// With new widgetPopup it is hard to click on viewSection without a activating it, hence we\n// add a little blank space to use in test.\nconst cssTestClick = styled(`div`, `\n  min-width: 2px;\n`);\n\nconst cssSigmaIcon = styled(icon, `\n  bottom: 1px;\n  margin-right: 5px;\n  background-color: ${theme.lightText}\n`);\n\nconst cssViewLeaf = styled('div', `\n  @media ${mediaSmall} {\n    & {\n      margin: 4px;\n    }\n  }\n`);\n\nconst cssViewLeafInactive = styled('div', `\n  @media screen and ${mediaSmall} {\n    & {\n      overflow: hidden;\n      background: repeating-linear-gradient(\n        -45deg,\n        ${theme.widgetInactiveStripesDark},\n        ${theme.widgetInactiveStripesDark} 10px,\n        ${theme.widgetInactiveStripesLight} 10px,\n        ${theme.widgetInactiveStripesLight} 20px\n      );\n      border: 1px solid ${theme.widgetBorder};\n      border-radius: 4px;\n      padding: 0 2px;\n    }\n    &::after {\n      content: '';\n      position: absolute;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n    }\n    &.layout_vbox {\n      max-width: 32px;\n    }\n    &.layout_hbox {\n      max-height: 32px;\n    }\n    & > .viewsection_title.flexhbox {\n      position: absolute;\n    }\n    & > .view_data_pane_container,\n    & .viewsection_buttons,\n    & .grist-single-record__menu,\n    & > .filter_bar {\n      display: none;\n    }\n  }\n`);\n\n\n// z-index ensure it's above the resizer line, since it's hard to grab otherwise\nconst cssDragIcon = styled(icon, `\n  visibility: hidden;\n  --icon-color: ${colors.slate};\n  top: -1px;\n  z-index: 100;\n\n  .viewsection_title:hover &.layout_grabbable {\n    visibility: visible;\n  }\n`);\n\n// This class is added while sections are being resized (or otherwise edited), to ensure that the\n// content of the section (such as an iframe) doesn't interfere with mouse drag-related events.\n// (It assumes that contained elements do not set pointer-events to another value; if that were\n// important then we'd need to use an overlay element during dragging.)\nconst cssResizing = styled('div', `\n  pointer-events: none;\n`);\n\nconst cssMiniSection = styled('div.mini_section_container', `\n  --icon-color: ${colors.lightGreen};\n  display: flex;\n  align-items: center;\n  padding-right: 8px;\n`);\n\nconst cssDragHandle = styled('div.draggable-handle', `\n  display: flex;\n  padding: 8px;\n  flex: 1;\n  padding-right: 16px;\n`);\n","import { DisposableWithEvents } from 'app/common/DisposableWithEvents';\nimport { Disposable, IDisposable, IDisposableOwner, Observable } from 'grainjs';\n\n/**\n * A simple abstraction for events composition. It is an object that can emit a single value of type T,\n * and holds the last value emitted. It can be used to compose events from other events.\n *\n * Simple observables can't be used for this purpose because they are not reentrant. We can't update\n * an observable from within a listener, because it won't trigger a new event.\n *\n * This class is basically a wrapper around Observable, that emits events when the value changes after it is\n * set.\n *\n * Example:\n *  const signal = Signal.create(null, 0);\n *  signal.listen(value => console.log(value));\n *  const onlyEven = signal.filter(value => value % 2 === 0);\n *  onlyEven.listen(value => console.log('even', value));\n *\n *  const flag1 = Signal.create(null, false);\n *  const flag2 = Signal.create(null, false);\n *  const flagAnd = Signal.compute(null, on => on(flag1) && on(flag2));\n *  // This will still emit multiple times with the same value repeated.\n *  flagAnd.listen(value => console.log('Both are true', value));\n *\n *  // This will emit only when both are true, and will ignore further changes while both are true.\n *  const toggle = flagAnd.distinct();\n *\n *  // Current value can be accessed via signal.state.get()\n *  const emitter = Signal.from(null, 0);\n *  // Emit values only when the toggle is true.\n *  const emitterWhileAnd = emitter.filter(() => toggle.state.get());\n *  // Equivalent to:\n *  const emitterWhileAnd = Signal.compute(null, on => on(toggle) ? on(emitter) : null).distinct();\n */\nexport class Signal<T = any> implements IDisposable, IDisposableOwner {\n  /**\n   * Creates a new event with a default value. A convenience method for creating an event that supports\n   * generic attribute.\n   */\n  public static create<T>(owner: IDisposableOwner | null, value: T) {\n    return new Signal(owner, value);\n  }\n\n  /**\n   * Creates an event from a set of events. Holds last value emitted by any of the events.\n   */\n  public static fromEvents<T = any>(\n    owner: Disposable | null,\n    emitter: any,\n    first: string,\n    ...rest: string[]\n  ) {\n    const signal = Signal.create(owner, null);\n    for(const event of [first, ...rest]) {\n      signal._emitter.listenTo(emitter, event, (value: any) => signal.emit(value));\n    }\n    return signal as Signal<T | null>;\n  }\n\n  /**\n   * Helper methods that creates a signal that emits the result of a function that takes a function\n   */\n  public static compute<T>(owner: Disposable | null, compute: ComputeFunction<T>) {\n    const signal = Signal.create(owner, null as any);\n    const on: any = (s: Signal) => {\n      if (!signal._listeners.has(s)) {\n        signal._listeners.add(s);\n        signal._emitter.listenTo(s._emitter, 'signal', () => signal.emit(compute(on)));\n      }\n      return s.state.get();\n    };\n    signal.state.set(compute(on));\n    return signal as Signal<T>;\n  }\n\n  /**\n   * Last value emitted if any.\n   */\n  public state: Observable<T>;\n\n  /**\n   * List of signals that we are listening to. Stored in a WeakSet to avoid memory leaks.\n   */\n  private _listeners: WeakSet<Signal> = new WeakSet();\n\n  /**\n   * Flag that can be changed by stateless() function. It won't hold last value (but can't be used in compute function).\n   */\n  private _emitter: DisposableWithEvents;\n\n  private _beforeHandler: CustomEmitter<T>;\n\n  constructor(owner: IDisposableOwner|null, initialValue: T) {\n    this._emitter = DisposableWithEvents.create(owner);\n    this.state = Observable.create(this, initialValue);\n  }\n\n  public dispose() {\n    this._emitter.dispose();\n  }\n\n  public autoDispose(disposable: IDisposable) {\n    this._emitter.autoDispose(disposable);\n  }\n\n  /**\n   * Push all events from this signal to another signal.\n   */\n  public pipe(signal: Signal<T>) {\n    this.autoDispose(this.listen(value => signal.emit(value)));\n    return this;\n  }\n\n  /**\n   * Modify all values emitted by this signal.\n   */\n  public map<Z>(selector: (value: T) => Z): Signal<Z> {\n    const signal = Signal.create(this, selector(this.state.get()));\n    this.listen(value => {\n      signal.emit(selector(value));\n    });\n    return signal;\n  }\n\n  /**\n   * Creates a new signal with the same state, but it will only\n   * emit those values that pass the test implemented by the provided function.\n   */\n  public filter(selector: (value: T) => boolean): Signal<T> {\n    const signal = Signal.create(this, this.state.get());\n    this.listen(value => {\n      if (selector(value)) {\n        signal.emit(value);\n      }\n    });\n    return signal;\n  }\n\n  /**\n   * Emit only the value that is different from the previous one.\n   */\n  public distinct(): Signal<T> {\n    let last = this.state.get();\n    const signal = this.filter((value: any) => {\n      if (value !== last) {\n        last = value;\n        return true;\n      }\n      return false;\n    });\n    signal.state.set(last);\n    return signal;\n  }\n\n  /**\n   * Emits true or false only when the value is changed from truthy to falsy or vice versa.\n   */\n  public flag() {\n    return this.map(Boolean).distinct();\n  }\n\n  /**\n   * Listen to changes of the signal.\n   */\n  public listen(handler: (value: T) => any) {\n    const stateHandler = () => {\n      handler(this.state.get());\n    };\n    this._emitter.on('signal', stateHandler);\n    return {\n      dispose: () => this._emitter.off('signal', stateHandler),\n    };\n  }\n\n  public emit(value: T) {\n    if (this._beforeHandler) {\n      this._beforeHandler(value, (emitted: T) => {\n        this.state.set(emitted);\n        this._emitter.trigger('signal', emitted);\n      });\n    } else {\n      this.state.set(value);\n      this._emitter.trigger('signal', value);\n    }\n  }\n\n  public before(handler: CustomEmitter<T>) {\n    this._beforeHandler = handler;\n  }\n}\n\ntype ComputeFunction<T> = (on: <TS>(s: Signal<TS>) => TS) => T;\ntype CustomEmitter<T> = (value: T, emit: (value: T) => void) => any;\n","import BaseView from 'app/client/components/BaseView';\nimport {buildCollapsedSectionDom, buildViewSectionDom} from 'app/client/components/buildViewSectionDom';\nimport * as commands from 'app/client/components/commands';\nimport {ContentBox} from 'app/client/components/Layout';\nimport type {ViewLayout} from 'app/client/components/ViewLayout';\nimport {get as getBrowserGlobals} from 'app/client/lib/browserGlobals';\nimport {detachNode} from 'app/client/lib/dom';\nimport {Signal} from 'app/client/lib/Signal';\nimport {urlState} from 'app/client/models/gristUrlState';\nimport {TransitionWatcher} from 'app/client/ui/transitions';\nimport {theme} from 'app/client/ui2018/cssVars';\nimport {DisposableWithEvents} from 'app/common/DisposableWithEvents';\nimport {isNonNullish} from 'app/common/gutil';\nimport {Computed, Disposable, dom, IDisposable, IDisposableOwner,\n        makeTestId, obsArray, Observable, styled} from 'grainjs';\nimport isEqual from 'lodash/isEqual';\n\nconst testId = makeTestId('test-layoutTray-');\n\nconst G = getBrowserGlobals('document', 'window', '$');\n\n\n/**\n * Adds a tray for minimizing and restoring sections. It is built as a plugin for the ViewLayout component.\n */\nexport class LayoutTray extends DisposableWithEvents {\n  // We and LayoutEditor will emit this event with the box that is being dragged. When the\n  // drag is over there will be another event with null.\n  public drag = Signal.create<Dropped|null>(this, null);\n  // Event for dropping, contains a dropped element.\n  public drop = Signal.create<Dropped|null>(this, null);\n  // Monitor if the cursor is over the our tray.\n  public hovering = Signal.create(this, false);\n  // If the drag is active and the mouse is over the tray make a signal..\n  public over = Signal.compute(this, on => Boolean(on(this.drag) && on(this.hovering)));\n  // Mouse events during dragging (without a state).\n  public dragging = Signal.create<MouseEvent|null>(this, null);\n  // Create a layout to actually render the collapsed sections.\n  public layout = CollapsedLayout.create(this, this);\n  // Whether we are active (have a dotted border, that indicates we are ready to receive a drop)\n  public active = Signal.create(this, false);\n\n  private _rootElement: HTMLElement;\n\n  constructor(public viewLayout: ViewLayout) {\n    super();\n    // Create a proxy for the LayoutEditor. It will mimic the same interface as CollapsedLeaf.\n    const externalLeaf = ExternalLeaf.create(this, this);\n\n    // Build layout using saved settings.\n    this.layout.buildLayout(this.viewLayout.viewModel.collapsedSections.peek());\n\n    this._registerCommands();\n\n    // Override the drop event, to detect if we are dropped on the tray, and no one else\n    // gets the value.\n    this.drop.before((value, emit) => {\n      // Emit the value, if someone else will handle it, he should grab the state from it.\n      emit(value);\n      // See if the state is still there.\n      if (value && this.drop.state.get()) {\n        // No one took it, so we should handle it if we are over the tray.\n        if (this.over.state.get()) {\n          const leafId = value.leafId();\n          // Add it as a last element.\n          this.layout.addBox(leafId);\n          // Ask it to remove itself from the target.\n          value.removeFromLayout();\n        }\n      }\n      // Clear the state, any other listener will get null.\n      this.drop.state.set(null);\n    });\n\n    // Now wire up active state.\n\n    // When a drag is started, get the top point of the tray, over which we will activate.\n    let topPoint = 48; // By default it is 48 pixels.\n    this.autoDispose(externalLeaf.drag.listen(d => {\n      if (!d) { return; }\n      topPoint = (this._rootElement.parentElement?.getBoundingClientRect().top ?? 61) - 13;\n    }));\n\n    // First we can be activated when a drag has started and we have some boxes.\n    this.drag.map(drag => drag && this.layout.count.get() > 0)\n             .flag() // Map to a boolean, and emit only when the value changes.\n             .filter(Boolean) // Only emit when it is set to true\n             .pipe(this.active);\n\n    // Second, we can be activated when the drag has started by the main layout, and we don't have any boxes yet, but\n    // mouse pointer is relatively high on the screen.\n    Signal.compute(this, on => {\n      const drag = on(externalLeaf.drag);\n      if (!drag) { return false; }\n      const mouseEvent = on(externalLeaf.dragMove);\n      const over = mouseEvent && mouseEvent.clientY < topPoint;\n      return !!over;\n    }).flag().filter(Boolean).pipe(this.active);\n\n    // If a drag has ended, we should deactivate.\n    this.drag.flag().filter(d => !d).pipe(this.active);\n  }\n\n  public replaceLayout() {\n    const savedSections = this.viewLayout.viewModel.collapsedSections.peek();\n    this.viewLayout.viewModel.activeCollapsedSections(savedSections);\n    const boxes = this.layout.buildLayout(savedSections);\n    return {\n      dispose() {\n        boxes.forEach(box => box.dispose());\n        boxes.length = 0;\n      }\n    };\n  }\n\n  /**\n   * Builds a popup for a maximized section.\n   */\n  public buildPopup(owner: IDisposableOwner, selected: Observable<number|null>, close: () => void) {\n    const section = Observable.create<number|null>(owner, null);\n    owner.autoDispose(selected.addListener((cur, prev) => {\n      if (prev) {\n        this.layout.getBox(prev)?.attach();\n      }\n      if (cur) {\n        this.layout.getBox(cur)?.detach();\n      }\n      section.set(cur);\n    }));\n    return dom.domComputed(section, (id) => {\n      if (!id) { return null; }\n      return dom.update(\n        buildViewSectionDom({\n          gristDoc: this.viewLayout.gristDoc,\n          sectionRowId: id,\n          draggable: false,\n          focusable: false,\n        })\n      );\n    });\n  }\n\n  public buildDom() {\n    return this._rootElement = cssCollapsedTray(\n      testId('editor'),\n      // When drag is active we should show a dotted border around the tray.\n      cssCollapsedTray.cls('-is-active', this.active.state),\n      // If element is over the tray, we should indicate that we are ready by changing a color.\n      cssCollapsedTray.cls('-is-target', this.over.state),\n      // Synchronize the hovering state with the event.\n      syncHover(this.hovering),\n      // Create a drop zone (below actual sections)\n      dom.create(CollapsedDropZone, this),\n      // Build the layout.\n      this.layout.buildDom(),\n      // But show only if there are any sections in the tray (even if those are empty or drop target sections)\n      // or we can accept a drop.\n      dom.show(use => use(this.layout.count) > 0 || use(this.active.state)),\n    );\n  }\n\n  public buildContentDom(id: string|number) {\n    return buildCollapsedSectionDom({\n      gristDoc: this.viewLayout.gristDoc,\n      sectionRowId: id,\n    });\n  }\n\n\n\n  private _registerCommands() {\n    const viewLayout = this.viewLayout;\n    // Add custom commands for options in the menu.\n    const commandGroup = {\n      // Collapse visible section.\n      collapseSection: () => {\n        const leafId = viewLayout.viewModel.activeSectionId();\n        if (!leafId) { return; }\n\n        // Find the box for this section in the layout.\n        const box = viewLayout.layoutEditor.getBox(leafId);\n        if (!box) { return; }\n\n        // Change the active section now. This is important as this will destroy the view before we\n        // remove the box from the dom. Charts are very sensitive for this.\n        viewLayout.viewModel.activeSectionId(\n          // We can't collapse last section, so the main layout will always have at least one section.\n          viewLayout.layoutEditor.layout.getAllLeafIds().filter(x => x !== leafId)[0]\n        );\n\n        // Add the box to our collapsed editor (it will transfer the viewInstance).\n        this.layout.addBox(leafId);\n\n        // Remove it from the main layout.\n        box.dispose();\n\n        // And ask the viewLayout to save the specs.\n        viewLayout.saveLayoutSpec();\n      },\n      expandSection: () => {\n        // Get the section that is collapsed and clicked (we are setting this value).\n        const leafId = viewLayout.viewModel.activeCollapsedSectionId();\n        if (!leafId) { return; }\n        viewLayout.viewModel.activeCollapsedSectionId(0);\n        viewLayout.viewModel.activeCollapsedSections(\n          viewLayout.viewModel.activeCollapsedSections.peek().filter(x => x !== leafId)\n        );\n        viewLayout.viewModel.activeSectionId(leafId);\n        viewLayout.saveLayoutSpec();\n      },\n      // Delete collapsed section.\n      deleteCollapsedSection: () => {\n        // This section is still in the view (but not in the layout). So we can just remove it.\n        const leafId = viewLayout.viewModel.activeCollapsedSectionId();\n        if (!leafId) { return; }\n        this.viewLayout.removeViewSection(leafId);\n        // We need to manually update the layout. Main layout editor doesn't care about missing sections.\n        // but we can't afford that. Without removing it, user can add another section that will be collapsed\n        // from the start, as the id will be the same as the one we just removed.\n        const currentSpec = viewLayout.viewModel.layoutSpecObj();\n        const validSections = new Set(viewLayout.viewModel.viewSections.peek().peek().map(vs => vs.id.peek()));\n        validSections.delete(leafId);\n        currentSpec.collapsed = currentSpec.collapsed\n          ?.filter(x => typeof x.leaf === 'number' && validSections.has(x.leaf));\n        viewLayout.saveLayoutSpec(currentSpec);\n      }\n    };\n    this.autoDispose(commands.createGroup(commandGroup, this, true));\n  }\n}\n\n/**\n * Main component that detects where the section should be dropped.\n */\nclass CollapsedDropZone extends Disposable {\n  private _rootElement: HTMLElement;\n  // Some operations will be blocked when we are waiting for an animation to finish.\n  private _animation = Observable.create(this, 0);\n  private _lastTarget: TargetLeaf | undefined;\n  private _lastIndex = -1;\n\n  constructor(protected model: LayoutTray) {\n    super();\n    // When the drag has started or has finished we will add an empty leaf that can accept\n    // dragged section. Event is fire only once, and it will be fired with a null when the draggable\n    // has finished.\n    let pushedLeaf: EmptyLeaf | undefined;\n    const layout = model.layout;\n\n    this.autoDispose(model.active.distinct().listen(ok => {\n      if (ok) {\n        pushedLeaf = EmptyLeaf.create(null, this.model);\n        layout.addBox(pushedLeaf);\n      } else if (pushedLeaf) {\n        layout.destroy(pushedLeaf);\n      }\n    }));\n  }\n\n  public buildDom() {\n    const obsRects = Observable.create(this, [] as Array<VRect|null>);\n    return (this._rootElement = cssVirtualZone(\n      // We are only rendered when mouse is over the tray and it has some dragged leaf with it.\n      dom.maybeOwned(this.model.over.state, (owner) => {\n        // Get the bounding rect of the rootElement, virtual rects are relative, so we will be\n        // adjusting coordinates.\n        const root = this._rootElement.getBoundingClientRect();\n        // We store rects in an observable, that might be used to visualize the zones.\n        // Create the mouseMove listener.\n        const listener = async (e: MouseEvent) => {\n          if (owner.isDisposed() || this._isAnimating()) {\n            return;\n          }\n           // If there are some previous rects (from previous calculation), test if we are still in one of them.\n          if (this._lastTarget) {\n            const stillThere = obsRects.get()[this._lastIndex]?.contains(e);\n            if (stillThere) {\n              return;\n            }\n          }\n          // Calculate the virtual zones.\n          obsRects.set(this._calculate(root));\n          // Find the one under the mouse.\n          const underMouse = obsRects.get().findIndex((x) => x?.contains(e));\n          // If it is still the same, do nothing.\n          if (underMouse === this._lastIndex) { return; }\n          // If we found something, insert a drop target.\n          if (underMouse !== -1) {\n            this._insertDropTarget(underMouse)\n              .catch((err) => console.error(`Failed to insert zone:`, err)); // This should not happen.\n            return;\n          }\n          // We haven't found anything, remove the last drop target.\n          this._removeDropZone().catch((err) => console.error(`Failed to remove zone:`, err));// This should not happen.\n        };\n        G.window.addEventListener('mousemove', listener);\n        // When mouse leaves, we need to remove the last drop target.\n        owner.onDispose(() => {\n          this._removeDropZone().catch((err) => console.error(`Failed to remove zone:`, err));// This should not happen.\n        });\n        owner.onDispose(() => G.window.removeEventListener('mousemove', listener));\n        // For debugging, we can show the virtual zones.\n        const show = false;\n        return !show ? null : dom.domComputed(\n          obsRects,\n          rects => rects.filter(isNonNullish).map((rect: VRect) => cssVirtualPart(\n            {style: `left: ${rect.left}px; width: ${rect.width}px; top: ${rect.top}px; height: ${rect.height}px;`}\n        )));\n      })\n    ));\n  }\n\n  private _start() {\n    this._animation.set(this._animation.get() + 1);\n  }\n  private _stop() {\n    this._animation.set(this._animation.get() - 1);\n  }\n  private _isAnimating() {\n    return this._animation.get() > 0;\n  }\n  private _calculate(parentRect: DOMRect) {\n    const boxes = this.model.layout.all();\n    const rects: Array<VRect|null> = [];\n    // Boxes can be wrapped, we will detect the line offset.\n    let lineOffset = 12;\n    // We will always have at least one box, so we can use it to get the height.\n    const height = boxes[0]?.rootElement.getBoundingClientRect().height;\n    for (let i = 0; i < boxes.length; i++) {\n      const box = boxes[i];\n      const prev = boxes[i - 1];\n      const next = boxes[i + 1];\n\n      // First handle edge cases (don't add targets for first elements in next lines), it will mess up the wrapping.\n      if (prev && prev?.rootElement.offsetTop !== box.rootElement.offsetTop) {\n        rects.push(null);\n        continue;\n      }\n\n      // Now handle normal cases.\n      const root = box.rootElement;\n      lineOffset = root.offsetTop;\n\n      if (i === 0 && box instanceof CollapsedLeaf) {\n        // For the first one, we have very little rectangle, from the left + 50px past the left border.\n        const left = 0;\n        const right = root.offsetLeft + 50;\n        rects.push(new VRect(parentRect, { left, top: lineOffset, right, height }));\n      } else if (box instanceof CollapsedLeaf && i === boxes.length - 1) {\n        // Last one is very similar, little rectangle on the left part.\n        const left = root.offsetLeft + root.offsetWidth - 30;\n        const right = root.offsetLeft + root.offsetWidth + 30;\n        rects.push(new VRect(parentRect, { left, top: lineOffset, right, height }));\n      } else if (box instanceof CollapsedLeaf && prev instanceof CollapsedLeaf) {\n        // In between, we have a rectangle from the left border to the right border.\n        const leftRoot = prev.rootElement;\n        const rightRoot = root;\n        const left = leftRoot.offsetLeft + leftRoot.offsetWidth - 30;\n        const right = rightRoot.offsetLeft + 30;\n        rects.push(new VRect(parentRect, { left, top: lineOffset, right, height }));\n      } else if (next && box instanceof TargetLeaf && i === 0) {\n        // If this is a first box and it is a target, the first rectangle will be much larger, it should cover\n        // the TargetLeaf width.\n        const left = 0;\n        const right = next.rootElement.offsetLeft;\n        rects.push(new VRect(parentRect, { left, top: lineOffset, right, height }));\n      } else if (box instanceof TargetLeaf && prev instanceof CollapsedLeaf && next instanceof CollapsedLeaf) {\n        // If this box is target between two collapsed boxes, we will have a rectangle from the prev to next\n        // covering the whole target leaf.\n        const left = prev.rootElement.offsetLeft + prev.rootElement.offsetWidth - 30;\n        const right = next.rootElement.offsetLeft + 30;\n        rects.push(new VRect(parentRect, { left, top: lineOffset, right, height }));\n      }\n    }\n    return rects;\n  }\n  private async _insertDropTarget(index: number) {\n    this._start();\n    try {\n      await this._lastTarget?.remove();\n      this._lastTarget = TargetLeaf.create(null, this.model);\n      await this._lastTarget.insert(index);\n      this._lastIndex = index;\n    } finally {\n      this._stop();\n    }\n  }\n  private async _removeDropZone() {\n    if (!this._lastTarget) { return; }\n    this._start();\n    try {\n      await this._lastTarget?.remove();\n      this._lastTarget = undefined;\n      this._lastIndex = -1;\n    } finally {\n      this._stop();\n    }\n  }\n}\n\n\n/**\n * UI component that renders and owns all the collapsed leaves.\n */\nclass CollapsedLayout extends Disposable {\n  public rootElement: HTMLElement;\n  /**\n   * Leaves owner. Adding or removing leaves will not dispose them automatically, as they are released and\n   * return to the caller. Only those leaves that were not removed will be disposed with the layout.\n   */\n  public holder = ArrayHolder.create(this);\n  /**\n   * Number of leaves in the layout.\n   */\n  public count: Computed<number>;\n\n  private _boxes = this.autoDispose(obsArray<Leaf>());\n\n  constructor(protected model: LayoutTray) {\n    super();\n\n    // Whenever we add or remove box, update the model. This is used to test if the section is collapsed or not.\n    this._boxes.addListener(l => model.viewLayout.viewModel.activeCollapsedSections(this.leafIds()));\n\n    this.count = Computed.create(this, use => use(this._boxes).length);\n  }\n\n  public all() {\n    return this._boxes.get();\n  }\n\n  public buildLayout(leafs: number[]) {\n    if (isEqual(leafs, this._boxes.get().map((box) => box.id.get()))) { return []; }\n    const removed = this._boxes.splice(0, this._boxes.get().length,\n      ...leafs.map((id) => CollapsedLeaf.create(this.holder, this.model, id)));\n    removed.forEach((box) => this.holder.release(box));\n    return removed;\n  }\n\n  public addBox(id: number|Leaf, index?: number) {\n    index ??= -1;\n    const box = typeof id === 'number' ? CollapsedLeaf.create(this.holder, this.model, id): id;\n    if (typeof id !== 'number') {\n      this.holder.autoDispose(box);\n    }\n    return this.insert(index, box);\n  }\n\n  public indexOf(box: Leaf) {\n    return this._boxes.get().indexOf(box);\n  }\n\n  public insert(index: number, leaf: Leaf) {\n    this.holder.autoDispose(leaf);\n    if (index < 0) {\n      this._boxes.push(leaf);\n    } else {\n      this._boxes.splice(index, 0, leaf);\n    }\n    return leaf;\n  }\n\n  /**\n   * Removes the leaf from the list but doesn't dispose it.\n   */\n  public remove(leaf: Leaf) {\n    const index = this._boxes.get().indexOf(leaf);\n    if (index >= 0) {\n      const removed = this._boxes.splice(index, 1)[0];\n      if (removed) {\n        this.holder.release(removed);\n      }\n      return removed || null;\n    }\n    return null;\n  }\n\n  /**\n   * Removes and dispose the leaf from the list.\n   */\n  public destroy(leaf: Leaf) {\n    this.remove(leaf)?.dispose();\n  }\n\n  public leafIds() {\n    return this._boxes.get().map(l => l.id.get()).filter(x => x && typeof x === 'number');\n  }\n\n  public getBox(leaf: number): CollapsedLeaf|undefined {\n    return this._boxes.get().find(l => l.id.get() === leaf) as CollapsedLeaf|undefined;\n  }\n\n  public buildDom() {\n    return (this.rootElement = cssLayout(\n      testId('layout'),\n      useDragging(),\n      dom.hide(use => use(this._boxes).length === 0),\n      dom.forEach(this._boxes, line => line.buildDom())\n    ));\n  }\n}\n\ninterface Draggable {\n  dragStart?: (ev: DragEvent, floater: MiniFloater) => Draggable|null;\n  dragEnd?: (ev: DragEvent, floater: MiniFloater) => void;\n  drag?: (ev: DragEvent, floater: MiniFloater) => void;\n  drop?: (ev: DragEvent, floater: MiniFloater) => void;\n}\n\ninterface Dropped {\n  removeFromLayout(): void;\n  leafId(): number;\n}\n\n/**\n * Base class for all the leaves in the layout tray.\n */\nabstract class Leaf extends Disposable {\n  public id = Observable.create(this, 0);\n  public rootElement: HTMLElement;\n  public buildDom(): HTMLElement|null {\n    return null;\n  }\n}\n\n/**\n * Empty leaf that is used to represent the empty space in the collapsed layout. Can be used to drop boxes.\n */\nclass EmptyLeaf extends Leaf {\n  public name = Observable.create(this, 'empty');\n\n  // If we are hovering over the empty leaf.\n  private _onHover = Signal.create(this, false);\n\n  constructor(protected model: LayoutTray) {\n    super();\n    this.monitorDrop();\n  }\n\n  public monitorDrop() {\n    this.autoDispose(\n      this.model.drop.listen((box) => {\n        // If some box was dropped, and the cursor is over this leaf, we will add the box to the layout.\n        if (!box || !this._onHover.state.get()) {\n          return;\n        }\n        this.model.drop.state.set(null);\n        // Replace the empty leaf with the dropped box.\n        const myIndex = this.model.layout.indexOf(this);\n        const leafId = box.leafId();\n        this.model.layout.addBox(leafId, myIndex);\n        box.removeFromLayout();\n      })\n    );\n  }\n\n  public buildDom() {\n    return (this.rootElement = cssEmptyBox(\n      cssEmptyBox.cls('-can-accept', this._onHover.state),\n      syncHover(this._onHover),\n      testId('empty-box'),\n    ));\n  }\n}\n\n/**\n * This is an empty leaf that supports animation when added to the list.\n */\nclass TargetLeaf extends EmptyLeaf {\n  public buildDom() {\n    this.name.set('target');\n    const element = super.buildDom();\n    dom.update(element,\n      testId('target-box'),\n      dom.cls(cssProbe.className),\n      { style: 'width: 2px;' }\n    );\n    return element;\n  }\n\n  public insert(index: number) {\n    // First insert the drop target leaf.\n    this.model.layout.insert(index, this);\n    // Force the reflow, so that we can start the animation.\n    this.rootElement.getBoundingClientRect();\n    // Start and wait for the animation to finish.\n    return new Promise((resolve) => {\n      const watcher = new TransitionWatcher(this.rootElement);\n      watcher.onDispose(() => {\n        resolve(undefined);\n      });\n      this.rootElement.style.width = '';\n    });\n  }\n\n  public remove() {\n    return new Promise((resolve) => {\n      const watcher = new TransitionWatcher(this.rootElement);\n      watcher.onDispose(() => {\n        this.model.layout.destroy(this);\n        resolve(undefined);\n      });\n      this.rootElement.style.width = '0px';\n    });\n  }\n}\n\n/**\n * This is the collapsed widget that is shown in the collapsed layout. It can be dragged and dropped.\n */\nclass CollapsedLeaf extends Leaf implements Draggable, Dropped {\n  // The content of the leaf that is rendered. Stored in an observable so that we can update it when the\n  // content changes or put it in the floater.\n  private _content: Observable<HTMLElement|null> = Observable.create(this, null);\n\n  // Computed to get the view instance from the viewSection.\n  private _viewInstance: Computed<BaseView|null>;\n\n  // An observable for the dom that holds the viewInstance and displays it in a hidden element.\n  // This is owned by this leaf and is disposed separately from the dom that is returned by buildDom. Like a\n  // singleton, this element will be moved from one \"instance\" (a result of buildDom) to another.\n  // When a leaf is removed from the dom (e.g. when we remove the collapsed section or move it to the main area)\n  // the dom of this element is disposed, but the hidden element stays with this instance and can be disposed\n  // later on, giving anyone a chance to grab the viewInstance and display it somewhere else.\n  private _hiddenViewInstance: Observable<HTMLElement|null> = Observable.create(this, null);\n\n  // Helper to keeping track of the index of the leaf in the layout.\n  private _indexWhenDragged = 0;\n\n  // A helper variable that indicates that this section is in a popup, and we should\n  // make any attempt to grab it and attach to our dom. Note: this is not a computed variable.\n  private _detached = false;\n\n  constructor(protected model: LayoutTray, id: number) {\n    super();\n    this.id.set(id);\n    this._viewInstance = Computed.create(this, use => {\n      const sections = use(use(this.model.viewLayout.viewModel.viewSections).getObservable());\n      const view = sections.find(s => use(s.id) === use(this.id));\n      if (!view) { return null; }\n      const instance = use(view.viewInstance);\n      return instance;\n    });\n    this._buildHidden();\n    this.onDispose(() => {\n      const instance = this._hiddenViewInstance.get();\n      instance && dom.domDispose(instance);\n    });\n  }\n\n  public detach() {\n    this._detached = true;\n  }\n\n  public attach() {\n    this._detached = false;\n    const previous = this._hiddenViewInstance.get();\n    this._buildHidden();\n    previous && dom.domDispose(previous);\n  }\n\n  public buildDom() {\n    this._content.set(this.model.buildContentDom(this.id.get()));\n    return this.rootElement = cssBox(\n      testId('leaf-box'),\n      dom.domComputed(this._content, c => c),\n      // Add draggable interface.\n      asDraggable(this),\n      dom.on('click', (e) => {\n        this.model.viewLayout.viewModel.activeCollapsedSectionId(this.id.get());\n        // Sanity (and type) check.\n        if (!(e.target instanceof HTMLElement)) {\n          return;\n        }\n        // If the click not landed in a draggable-handle ignore it. Might be a click to open the menu.\n        if (!e.target.closest('.draggable-handle')) {\n          return;\n        }\n        // Apparently the click was to open the section in the popup. Use the anchor link to do that.\n        // Show my section on a popup using anchor link. We can't use maximize section for it, as we\n        // would need to rebuild the layout (as this is not a part of it).\n        urlState().pushUrl({\n          hash: {\n            sectionId: this.id.get(),\n            popup: true\n          }\n        }).catch(() => {});\n        e.preventDefault();\n        e.stopPropagation();\n      }),\n      detachedNode(this._hiddenViewInstance),\n    );\n  }\n\n  // Implement the drag interface. All those methods are called by the draggable helper.\n\n  public dragStart(ev: DragEvent, floater: MiniFloater) {\n    // Get the element.\n    const myElement = this._content.get();\n    this._content.set(null);\n    floater.content.set(myElement);\n    // Create a clone.\n    const clone = CollapsedLeaf.create(floater, this.model, this.id.get());\n    clone._indexWhenDragged = this.model.layout.indexOf(this);\n    this.model.drag.emit(clone);\n\n    // Remove self from the layout (it will dispose this instance, but the viewInstance was moved to the floater)\n    this.model.layout.destroy(this);\n    return clone;\n  }\n\n  public dragEnd(ev: DragEvent) {\n    this.model.drag.emit(null);\n  }\n\n  public drag(ev: DragEvent) {\n    this.model.dragging.emit(ev);\n  }\n\n  public drop(ev: DragEvent, floater: MiniFloater) {\n    // Take back the element.\n    const element = floater.content.get();\n    floater.content.set(null);\n    this._content.set(element);\n    this.model.drop.emit(this);\n    // If I wasn't moved somewhere else, read myself back.\n    if (this.id.get() !== 0) {\n      this.model.layout.addBox(this.id.get(), this._indexWhenDragged);\n    }\n  }\n\n  public removeFromLayout() {\n    // Set the id to 0 so that the layout doesn't try to read me back.\n    this.id.set(0);\n    this.model.layout.destroy(this);\n  }\n\n  public leafId() {\n    return this.id.get();\n  }\n\n  private _buildHidden() {\n    this._hiddenViewInstance.set(cssHidden(dom.maybe(this._viewInstance, view => {\n      return this._detached ? null : view.viewPane;\n    })));\n  }\n}\n\n/**\n * This is analogous component to the main Floater in the LayoutEditor. It holds the little preview of a widget,\n * while it is dragged.\n */\nclass MiniFloater extends Disposable {\n  public content: Observable<HTMLElement|null> = Observable.create(this, null);\n  public rootElement: HTMLElement;\n  constructor() {\n    super();\n    this.rootElement = this.buildDom();\n    G.document.body.appendChild(this.rootElement);\n    this.onDispose(() => {\n      this.rootElement.remove();\n      dom.domDispose(this.rootElement);\n    });\n  }\n\n  public buildDom() {\n    return cssMiniFloater(\n      dom.show(use => Boolean(use(this.content))),\n      // dom.cls('layout_editor_floater'),\n      dom.domComputed(this.content, c => c)\n    );\n  }\n\n  public onMove(ev: MouseEvent) {\n    if (this.content.get()) {\n      this.rootElement.style.left = `${ev.clientX}px`;\n      this.rootElement.style.top = `${ev.clientY}px`;\n    }\n  }\n}\n\n/**\n * ExternalLeaf pretends that it is a collapsed leaf and acts as a proxy between collapsed tray and the\n * ViewLayout.\n */\nclass ExternalLeaf extends Disposable implements Dropped {\n  // If external element is in drag mode\n  public drag: Signal<Dropped>;\n  // Event when external leaf is being dragged.\n  public dragMove: Signal<MouseEvent>;\n\n  // Event when external leaf is dropped.\n  private _drop: Signal<ContentBox>;\n\n  constructor(protected model: LayoutTray) {\n    super();\n    // Wire up external events to mimic that we are a part.\n\n    // First we will replace all events, so that they won't emit anything if we are the only leaf\n    // in the layout.\n    const multipleLeaves = () => this.model.viewLayout.layout.getAllLeafIds().length > 1;\n\n    this.drag = Signal.fromEvents(this, this.model.viewLayout.layoutEditor, 'dragStart', 'dragEnd')\n                      .filter(multipleLeaves);\n\n    this._drop = Signal.fromEvents(this, this.model.viewLayout.layoutEditor, 'dragDrop')\n                      .filter(multipleLeaves);\n\n    this.dragMove = Signal.fromEvents(this, this.model.viewLayout.layoutEditor, 'dragMove')\n                          .filter(multipleLeaves);\n\n    // Now bubble up those events to the model.\n\n    // For dragging we just need to know that it is on or off.\n    this.drag.map(box => {\n      // We are tricking the model, we report that we are dragged, not the external leaf.\n      return box ? this as Dropped : null;\n    }).distinct().pipe(this.model.drag);\n\n\n    // When the external box is dropped, we will pretend that we were dropped.\n    this._drop.map(x => this as Dropped|null).pipe(this.model.drop);\n\n    // Listen to the inDrag state in the model, if the dragged element is not us, update\n    // target hits. Otherwise target hits will be updated by the viewLayout.\n    this.autoDispose(model.dragging.listen(ev => {\n      // If the dragged box is not us, we need to update the targets.\n      if (ev && model.drag.state.get() !== this) {\n        this.model.viewLayout.layoutEditor.updateTargets(ev);\n      }\n    }));\n\n    // When drag is started by tray, we need to fire up user edit event. This is only needed\n    // because the viewLayout has a different UI when user is editing.\n    const miniDrag = Signal.compute(this, on => on(model.drag) && !on(this.drag)).map(Boolean).distinct();\n    this.autoDispose(miniDrag.listen(box => {\n      if (box) {\n        this.model.viewLayout.layoutEditor.triggerUserEditStart();\n      } else {\n        const dropTargeter = this.model.viewLayout.layoutEditor.dropTargeter;\n        dropTargeter.removeTargetHints();\n        // Save the layout immediately after the drop. Otherwise we would wait a bit,\n        // and the section won't be created on time.\n        this.model.viewLayout.layoutEditor.triggerUserEditStop();\n        // Manually save the layout.\n        this.model.viewLayout.saveLayoutSpec();\n      }\n    }));\n\n\n    // We are responsible for saving the layout, when section is collapsed or expanded.\n\n    // Also we need to monitor when mini leaf is dropped, it will trigger a drop event,\n    // but non-one will listen to it.\n    this.autoDispose(\n      model.drop.listen(dropped => {\n        if (!dropped) {\n          return;\n        }\n        // If I was dropped (collapsed) over the tray, we don't need to do anything here.\n        // Our leaf was removed already and the layout will be saved by the miniDrag event.\n\n        // If I was dropped anywhere else, we don't need to do anything either, viewLayout will\n        // take care of it.\n        if (dropped === this) {\n          return;\n        }\n        // We only care when collapsed widget was dropped over the main area.\n        const externalEditor = this.model.viewLayout.layoutEditor;\n        const dropTargeter = this.model.viewLayout.layoutEditor.dropTargeter;\n        // Check that it was dropped over the main area.\n        if (dropTargeter?.activeTarget && !dropTargeter?.activeTarget?.box.isDisposed()) {\n          // Remove the widget from the tray, and at new leaf to the layout.\n          const part = dropTargeter.activeTarget;\n          dropTargeter.removeTargetHints();\n          const leaf = dropped.leafId();\n          const box = externalEditor.layout.buildLayoutBox({leaf});\n          dropped.removeFromLayout();\n          if (part.isChild) {\n            part.box.addChild(box, part.isAfter);\n          } else {\n            part.box.addSibling(box, part.isAfter);\n          }\n          this.model.viewLayout.viewModel.activeSectionId(leaf);\n          this.model.drop.state.set(null);\n        }\n      })\n    );\n    this._replaceFloater();\n  }\n\n  /**\n   * Dropped interface implementation, it is called only when a section in the main area is collapsed (dragged\n   * onto the valid target in the tray).\n   */\n  public removeFromLayout() {\n    const droppedBox = this._drop.state.get();\n    if (!droppedBox) { return; }\n    const leafId = this.leafId();\n    const otherSection = this.model.viewLayout.layoutEditor\n      .layout.getAllLeafIds().find(x => typeof x === 'number' && x !== leafId);\n    this.model.viewLayout.viewModel.activeSectionId(otherSection);\n    // We can safely remove the box, because we should be called after viewInstance is grabbed by\n    // the tray.\n    this.model.viewLayout.layoutEditor.doRemoveBox(droppedBox);\n  }\n\n  public leafId() {\n    return this._drop.state.get()?.leafId.peek() || 0;\n  }\n\n  /**\n   * Monitors the external floater element, and if it is on top of the collapsed tray, replaces its content.\n   */\n  private _replaceFloater() {\n    const model = this.model;\n    // We will replace floater just after it starts till it is about to be dropped.\n    const period = Signal.fromEvents(model, model.viewLayout.layoutEditor, 'dragStart', 'dragStop');\n    const overEditor = Signal.compute(model, on => Boolean(on(period) && on(model.over))).distinct();\n    let lastContent: HTMLElement|null = null;\n    let lastTransform: string|null = null;\n    let lastX: number|null = null;\n    let lastY: number|null = null;\n    // When the external box is on top of the tray, we need to replace the content to be much smaller.\n    model.autoDispose(\n      overEditor.listen(over => {\n        if (over) {\n          const floater = model.viewLayout.layoutEditor.floater;\n          const leafId = floater.leafId.peek();\n          if (typeof leafId !== 'number') {\n            return;\n          }\n          const content = floater.leafContent.peek() as HTMLElement;\n          if (content) {\n            lastContent = content;\n            // Hide this element.\n            content.style.display = 'none';\n            // Create another element to show in the floater.\n            const newContent = cssFloaterWrapper(content, buildCollapsedSectionDom({\n              gristDoc: model.viewLayout.gristDoc,\n              sectionRowId: leafId,\n            }));\n            floater.leafContent(newContent);\n            lastTransform = floater.dom.style.transform;\n            lastX = floater.mouseOffsetX;\n            lastY = floater.mouseOffsetY;\n            floater.dom.style.transform = 'none';\n            floater.mouseOffsetX = 0;\n            floater.mouseOffsetY = 0;\n          }\n        } else if (lastContent) {\n          lastContent.style.display = '';\n          const floater = model.viewLayout.layoutEditor.floater;\n          const currentContent = floater.leafContent.peek() as HTMLElement;\n          floater.leafContent(lastContent);\n          if (currentContent) {\n            dom.domDispose(currentContent);\n          }\n          lastContent = null;\n          floater.dom.style.transform = lastTransform!;\n          floater.mouseOffsetX = lastX!;\n          floater.mouseOffsetY = lastY!;\n        }\n      })\n    );\n  }\n}\n\n/**\n * A class that holds an array of IDisposable objects, and disposes them all when it is disposed.\n * The difference from a MultipleHolder is that it can release individual disposables from the array.\n */\nclass ArrayHolder extends Disposable {\n  private _array: IDisposable[] = [];\n\n  constructor() {\n    super();\n    this.onDispose(() => {\n      const seen = new Set();\n      for (const obj of this._array) {\n        if (!seen.has(obj)) {\n          seen.add(obj);\n          obj.dispose();\n        }\n      }\n      this._array = [];\n    });\n  }\n\n  public autoDispose<T extends IDisposable>(obj: T): T {\n    this._array.push(obj);\n    return obj;\n  }\n\n  public release(obj: IDisposable) {\n    const index = this._array.indexOf(obj);\n    if (index >= 0) {\n      return this._array.splice(index, 1);\n    }\n    return null;\n  }\n}\n\nfunction syncHover(obs: Signal) {\n  return [dom.on('mouseenter', () => obs.emit(true)), dom.on('mouseleave', () => obs.emit(false))];\n}\n\n/**\n * Helper function that renders an element from an observable, but prevents it from being disposed.\n * Used to keep viewInstance from being disposed when it is added as a child in various containers.\n */\nfunction detachedNode(node: Observable<HTMLElement|null>) {\n  return [\n    dom.maybe(node, n => n),\n    dom.onDispose(() => node.get() && detachNode(node.get()))\n  ];\n}\n\n/**\n * Finds element that is marked as draggable from the mouse event.\n */\nfunction findDraggable(ev: EventTarget|null) {\n  if (ev instanceof HTMLElement) {\n    const target = ev.closest(\".draggable-handle\")?.closest(\".draggable\");\n    return !target ? null : dom.getData(target, 'draggable') as Draggable;\n  }\n  return null;\n}\n\n/**\n * Marks a dom element as draggable. It sets a class and a data attribute that is looked up by the useDragging helper.\n */\nfunction asDraggable(item: Draggable) {\n  return [\n    dom.cls('draggable'),\n    dom.data('draggable', item)\n  ];\n}\n\n/**\n * Attaches a mouse events for dragging to a parent container. This way we have a single mouse event listener\n * for all draggable elements. All events are then delegated to the draggable elements.\n *\n * When a drag is started a MiniFloater is created, and the draggable element can be moved to the floater.\n */\nfunction useDragging() {\n  return (el: HTMLElement) => {\n    // Implement them by hand, using mouseenter, mouseleave, and mousemove events.\n    // This is a inspired by LayoutEditor.ts.\n    let justStarted = false;\n    let isDragging = false;\n    let dragged: Draggable|null = null;\n    let floater: MiniFloater|null = null;\n    let downX: number|null = null;\n    let downY: number|null = null;\n    const listener = (ev: MouseEvent) => {\n      switch (ev.type) {\n        case 'mousedown':\n          // Only handle left button.\n          if (ev.button !== 0) {\n            return;\n          }\n          // If we haven't found a draggable element, return.\n          dragged = findDraggable(ev.target);\n          if (!dragged) {\n            return;\n          }\n          // If we had floater, dispose it.\n          floater?.dispose();\n          floater = new MiniFloater();\n          // Start drag and attach mousemove and mouseup listeners.\n          justStarted = true;\n          G.$(G.window).on('mousemove', mouseMoveListener);\n          G.$(G.window).on('mouseup', mouseUpListener);\n          downX = ev.clientX;\n          downY = ev.clientY;\n          return false;\n        case 'mouseup':\n          if (!dragged) {\n            return;\n          }\n          justStarted = false;\n          G.$(G.window).off('mousemove', mouseMoveListener);\n          G.$(G.window).off('mouseup', mouseUpListener);\n\n          if (isDragging) {\n            isDragging = false;\n            if (dragged?.drop) {\n              dragged.drop(ev as DragEvent, floater!);\n            }\n            if (dragged?.dragEnd) {\n              dragged.dragEnd(ev as DragEvent, floater!);\n            }\n          }\n          dragged = null;\n          floater?.dispose();\n          floater = null;\n          return false;\n        case 'mousemove':\n          if (justStarted) {\n            const slightMove = downX && downY &&\n              (Math.abs(ev.clientX - downX) > 3 || Math.abs(ev.clientY - downY) > 3);\n            if (slightMove) {\n              justStarted = false;\n              if (dragged?.dragStart) {\n                // Drag element has an opportunity to return a new draggable object.\n                dragged = dragged.dragStart(ev as DragEvent, floater!);\n                if (!dragged) {\n                  return;\n                }\n              }\n              // Now we are dragging.\n              isDragging = true;\n            }\n          }\n          if (!isDragging) {\n            return;\n          }\n          if (dragged?.drag) {\n            dragged.drag(ev as DragEvent, floater!);\n          }\n          floater!.onMove(ev);\n          return false;\n      }\n    };\n    const mouseMoveListener = (ev: MouseEvent) => listener(ev);\n    const mouseUpListener = (ev: MouseEvent) => listener(ev);\n    dom.autoDisposeElem(el, dom.onElem(G.window, 'mousedown', (e) => listener(e)));\n    dom.onDisposeElem(el, () => (floater?.dispose(), floater = null));\n  };\n}\n\n/**\n * A virtual rectangle that is relative to a DOMRect.\n */\nclass VRect {\n  public left: number;\n  public width: number;\n  public top: number;\n  public right: number;\n  public height: number;\n  constructor(offset: DOMRect, params: Partial<VRect>) {\n    Object.assign(this, params);\n    this.left += offset.left;\n    this.right += offset.left;\n    this.top += offset.top;\n    this.width = this.right - this.left;\n  }\n  public contains(ev: MouseEvent) {\n    return ev.clientX >= this.left && ev.clientX <= this.right &&\n      ev.clientY >= this.top && ev.clientY <= this.top + this.height;\n  }\n}\n\nconst cssVirtualZone = styled('div', `\n  position: absolute;\n  inset: 0;\n`);\n\n\nconst cssFloaterWrapper = styled('div', `\n  height: 40px;\n  width: 140px;\n  max-width: 140px;\n  background: ${theme.tableBodyBg};\n  border: 1px solid ${theme.widgetBorder};\n  border-radius: 4px;\n  -webkit-transform: rotate(5deg) scale(0.8) translate(-10px, 0px);\n  transform: rotate(5deg) scale(0.8) translate(-10px, 0px);\n  & .mini_section_container {\n    overflow: hidden;\n    white-space: nowrap;\n  }\n`);\n\nconst cssCollapsedTray = styled('div.collapsed_layout', `\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  transition: height 0.2s;\n  position: relative;\n  margin: calc(-1 * var(--view-content-page-margin, 12px));\n  margin-bottom: 0;\n  user-select: none;\n  background-color: ${theme.pageBg};\n  border-bottom: 1px solid ${theme.pagePanelsBorder};\n  outline-offset: -1px;\n\n  &-is-active {\n    outline: 2px dashed ${theme.widgetBorder};\n  }\n  &-is-target {\n    outline: 2px dashed #7B8CEA;\n    background: rgba(123, 140, 234, 0.1);\n  }\n`\n);\n\nconst cssRow = styled('div', `display: flex`);\nconst cssLayout = styled(cssRow, `\n  padding: 8px 24px;\n  column-gap: 16px;\n  row-gap: 8px;\n  flex-wrap: wrap;\n  position: relative;\n`);\n\nconst cssBox = styled('div', `\n  border: 1px solid ${theme.widgetBorder};\n  border-radius: 3px;\n  background: ${theme.widgetBg};\n  min-width: 120px;\n  min-height: 34px;\n  cursor: pointer;\n`);\n\nconst cssEmptyBox = styled('div', `\n  text-align: center;\n  text-transform: uppercase;\n  color: ${theme.widgetBorder};\n  font-weight: bold;\n  letter-spacing: 1px;\n  border: 2px dashed ${theme.widgetBorder};\n  border-radius: 3px;\n  padding: 8px;\n  width: 120px;\n  min-height: 34px;\n  &-can-accept {\n    border: 2px dashed #7B8CEA;\n    background: rgba(123, 140, 234, 0.1);\n  }\n`);\n\nconst cssProbe = styled('div', `\n  min-width: 0px;\n  padding: 0px;\n  transition: width 0.2s ease-out;\n`);\n\nconst cssMiniFloater = styled(cssBox, `\n  pointer-events: none;\n  position: absolute;\n  overflow: hidden;\n  pointer-events: none;\n  z-index: 10;\n  -webkit-transform: rotate(5deg) scale(0.8);\n  transform: rotate(5deg) scale(0.8);\n  transform-origin: top left;\n`);\n\nconst cssVirtualPart = styled('div', `\n  outline: 1px solid blue;\n  position: absolute;\n  z-index: 10;\n  background: rgba(0, 0, 0, 0.1);\n`);\n\nconst cssHidden = styled('div', `display: none;`);\n","import BaseView from 'app/client/components/BaseView';\nimport {ChartView} from 'app/client/components/ChartView';\nimport * as commands from 'app/client/components/commands';\nimport {CustomView} from 'app/client/components/CustomView';\nimport * as DetailView from 'app/client/components/DetailView';\nimport * as GridView from 'app/client/components/GridView';\nimport {GristDoc} from 'app/client/components/GristDoc';\nimport {BoxSpec, Layout} from 'app/client/components/Layout';\nimport {LayoutEditor} from 'app/client/components/LayoutEditor';\nimport {printViewSection} from 'app/client/components/Printing';\nimport {Delay} from 'app/client/lib/Delay';\nimport {createObsArray} from 'app/client/lib/koArrayWrap';\nimport {ViewRec, ViewSectionRec} from 'app/client/models/DocModel';\nimport {reportError} from 'app/client/models/errors';\nimport {isNarrowScreen, mediaSmall, testId, theme} from 'app/client/ui2018/cssVars';\nimport {icon} from 'app/client/ui2018/icons';\nimport {DisposableWithEvents} from 'app/common/DisposableWithEvents';\nimport {LayoutTray} from 'app/client/components/LayoutTray';\nimport {buildViewSectionDom} from 'app/client/components/buildViewSectionDom';\nimport {mod} from 'app/common/gutil';\nimport * as ko from 'knockout';\nimport * as _ from 'underscore';\nimport debounce from 'lodash/debounce';\nimport {Computed, computedArray, Disposable, dom, fromKo, Holder,\n        IDomComponent, MultiHolder, Observable, styled, subscribe} from 'grainjs';\n\n// tslint:disable:no-console\n\nconst viewSectionTypes: {[key: string]: any} = {\n  record: GridView,\n  detail: DetailView,\n  chart: ChartView,\n  single: DetailView,\n  custom: CustomView,\n};\n\nfunction getInstanceConstructor(parentKey: string) {\n  const Cons = viewSectionTypes[parentKey];\n  if (!Cons) {\n    console.error('ViewLayout error: requested an unsupported section type:', parentKey);\n  }\n  // Default to GridView if no valid constructor\n  return Cons || viewSectionTypes.record;\n}\n\nexport class ViewSectionHelper extends Disposable {\n  private _instance = Holder.create<BaseView>(this);\n\n  constructor(gristDoc: GristDoc, vs: ViewSectionRec) {\n    super();\n    this.onDispose(() => vs.viewInstance(null));\n\n    this.autoDispose(subscribe((use) => {\n      // Rebuild the section when its type changes or its underlying table.\n      const table = use(vs.table);\n      const Cons = getInstanceConstructor(use(vs.parentKey));\n      this._instance.clear();\n      if (table.getRowId()) {\n        this._instance.autoDispose(Cons.create(gristDoc, vs));\n      }\n      vs.viewInstance(this._instance.get());\n    }));\n  }\n}\n\n/**\n * ViewLayout - Handles layout for a single page.\n */\nexport class ViewLayout extends DisposableWithEvents implements IDomComponent {\n  public docModel = this.gristDoc.docModel;\n  public viewModel: ViewRec;\n  public layoutSpec: ko.Computed<BoxSpec>;\n  public maximized: Observable<number|null>;\n  public previousSectionId = 0; // Used to restore focus after a maximized section is closed.\n  public isResizing = Observable.create(this, false);\n  public layout: Layout;\n  public layoutEditor: LayoutEditor;\n  public layoutTray: LayoutTray;\n  public layoutSaveDelay = this.autoDispose(new Delay());\n\n  private _freeze = false;\n  // Exposed for test to indicate that save has not yet been called.\n  private _savePending = Observable.create(this, false);\n  constructor(public readonly gristDoc: GristDoc, viewId: number) {\n    super();\n    this.viewModel = this.docModel.views.getRowModel(viewId);\n\n\n    // A Map from viewSection RowModels to corresponding View class instances.\n    // TODO add a test that creating / deleting a section creates/destroys one instance, and\n    // switching pages destroys all instances.\n    const viewSectionObs = createObsArray(this, this.viewModel.viewSections());\n    this.autoDispose(computedArray(viewSectionObs, (vs, i, compArr) =>\n      ViewSectionHelper.create(compArr, gristDoc, vs)));\n\n    // Update the stored layoutSpecObj with any missing fields that are present in viewFields.\n    this.layoutSpec = this.autoDispose(ko.computed(\n      () => this._updateLayoutSpecWithSections(this.viewModel.layoutSpecObj()))\n      .extend({rateLimit: 0}));\n\n    this.layout = this.autoDispose(Layout.create(this.layoutSpec(),\n                                                 this._buildLeafContent.bind(this), true));\n\n\n    // When the layoutSpec changes by some means other than the layout editor, rebuild.\n    // This includes adding/removing sections and undo/redo.\n    this.autoDispose(this.layoutSpec.subscribe((spec) => this._freeze || this.rebuildLayout(spec)));\n\n    this.listenTo(this.layout, 'layoutUserEditStop', () => {\n      this.isResizing.set(false);\n      this.layoutSaveDelay.schedule(1000, () => {\n        this.saveLayoutSpec();\n      });\n    });\n\n    // Do not save if the user has started editing again.\n    this.listenTo(this.layout, 'layoutUserEditStart', () => {\n      this.layoutSaveDelay.cancel();\n      this._savePending.set(true);\n      this.isResizing.set(true);\n    });\n\n    this.layoutEditor = this.autoDispose(LayoutEditor.create(this.layout));\n    this.layoutTray = LayoutTray.create(this, this);\n\n    // Add disposal of this._layout after layoutEditor, so that it gets disposed first, and\n    // layoutEditor doesn't attempt to update it in its own disposal logic.\n    this.onDispose(() => this.layout.dispose());\n\n    this.autoDispose(this.gristDoc.resizeEmitter.addListener(this._onResize, this));\n\n    // It's hard to detect a click or mousedown on a third-party iframe\n    // (See https://stackoverflow.com/questions/2381336/detect-click-into-iframe-using-javascript).\n    this.listenTo(this.gristDoc.app, 'clipboard_blur', this._maybeFocusInSection);\n\n    // On narrow screens (e.g. mobile), we need to resize the section after a transition.\n    // There will two transition events (one from section one from row), so we debounce them after a tick.\n    const handler = debounce((e: TransitionEvent) => {\n      // We work only on the transition of the flex-grow property, and only on narrow screens.\n      if (e.propertyName !== 'flex-grow' || !isNarrowScreen()) { return; }\n      // Make sure the view is still active.\n      if (this.viewModel.isDisposed() || !this.viewModel.activeSection) { return; }\n      const section = this.viewModel.activeSection.peek();\n      if (!section || section.isDisposed()) { return; }\n      const view = section.viewInstance.peek();\n      if (!view || view.isDisposed()) { return; }\n      // Make resize.\n      view.onResize();\n    }, 0);\n    this.layout.rootElem.addEventListener('transitionend', handler);\n    // Don't need to dispose the listener, as the rootElem is disposed with the layout.\n\n    const classActive = cssLayoutBox.className + '-active';\n    const classInactive = cssLayoutBox.className + '-inactive';\n    this.autoDispose(subscribe(fromKo(this.viewModel.activeSection), (use, section) => {\n      const id = section.getRowId();\n      this.layout.forEachBox(box => {\n        box.dom!.classList.add(classInactive);\n        box.dom!.classList.remove(classActive);\n        box.dom!.classList.remove(\"transition\");\n      });\n      let elem: Element|null = this.layout.getLeafBox(id)?.dom || null;\n      while (elem?.matches('.layout_box')) {\n        elem.classList.remove(classInactive);\n        elem.classList.add(classActive);\n        elem = elem.parentElement;\n      }\n      if (!isNarrowScreen()) {\n        section.viewInstance.peek()?.onResize();\n      }\n    }));\n\n    const commandGroup = {\n      deleteSection: () => { this.removeViewSection(this.viewModel.activeSectionId()); },\n      nextSection: () => { this._otherSection(+1); },\n      prevSection: () => { this._otherSection(-1); },\n      printSection: () => { printViewSection(this.layout, this.viewModel.activeSection()).catch(reportError); },\n      sortFilterMenuOpen: (sectionId?: number) => { this._openSortFilterMenu(sectionId); },\n      maximizeActiveSection: () => { this._maximizeActiveSection(); },\n      cancel: () => {\n        if (this.maximized.get()) {\n          this.maximized.set(null);\n        }\n      }\n    };\n    this.autoDispose(commands.createGroup(commandGroup, this, true));\n\n    this.maximized = fromKo(this.layout.maximizedLeaf) as any;\n    this.autoDispose(this.maximized.addListener((sectionId, prev) => {\n      // If we are closing popup, resize all sections.\n      if (!sectionId) {\n        this._onResize();\n        // Reset active section to the first one if the section is popup is collapsed.\n        if (prev\n            && this.viewModel.activeCollapsedSections.peek().includes(prev)\n            && this.previousSectionId) {\n          // Make sure that previous section exists still.\n          if (this.viewModel.viewSections.peek().all()\n                  .some(s => !s.isDisposed() && s.id.peek() === this.previousSectionId)) {\n            this.viewModel.activeSectionId(this.previousSectionId);\n          }\n        }\n      } else {\n        // Otherwise resize only active one (the one in popup).\n        const section = this.viewModel.activeSection.peek();\n        if (!section.isDisposed() && section.id.peek()) {\n          section?.viewInstance.peek()?.onResize();\n        }\n      }\n    }));\n  }\n\n  public buildDom() {\n    const owner = MultiHolder.create(null);\n    const close = () => this.maximized.set(null);\n    const mainBoxInPopup = Computed.create(owner, use => this.layout.getAllLeafIds().includes(use(this.maximized)));\n    const miniBoxInPopup = Computed.create(owner, use => use(mainBoxInPopup) ? null : use(this.maximized));\n    return cssOverlay(\n      dom.autoDispose(owner),\n      cssOverlay.cls('-active', use => !!use(this.maximized)),\n      testId('viewLayout-overlay'),\n      cssVFull(\n        this.layoutTray.buildDom(),\n        cssLayoutWrapper(\n          cssLayoutWrapper.cls('-active', use => Boolean(use(this.maximized))),\n          dom.update(\n            this.layout.rootElem,\n            dom.hide(use => Boolean(use(miniBoxInPopup))),\n          ),\n          this.layoutTray.buildPopup(owner, miniBoxInPopup, close),\n        ),\n      ),\n      dom.maybe(use => !!use(this.maximized), () =>\n        cssCloseButton('CrossBig',\n          testId('close-button'),\n          dom.on('click', () => close())\n        )\n      ),\n      // Close the lightbox when user clicks exactly on the overlay.\n      dom.on('click', (ev, elem) => void (ev.target === elem && this.maximized.get() ? close() : null)),\n      dom.cls('test-viewLayout-save-pending', this._savePending)\n    );\n  }\n\n  // Freezes the layout until the passed in promise resolves. This is useful to achieve a single\n  // layout rebuild when multiple user actions needs to apply, simply pass in a promise that resolves\n  // when all user actions have resolved.\n  public async freezeUntil<T>(promise: Promise<T>): Promise<T> {\n    this._freeze = true;\n    try {\n      return await promise;\n    } finally {\n      this._freeze = false;\n      this.rebuildLayout(this.layoutSpec.peek());\n    }\n  }\n\n  public saveLayoutSpec(specs?: BoxSpec) {\n    this._savePending.set(false);\n    // Cancel the automatic delay.\n    this.layoutSaveDelay.cancel();\n    if (!this.layout) { return; }\n    // Only save layout changes when the document isn't read-only.\n    if (!this.gristDoc.isReadonly.get()) {\n      if (!specs) {\n        specs = this.layout.getLayoutSpec();\n        specs.collapsed = this.viewModel.activeCollapsedSections.peek().map((leaf)=> ({leaf}));\n      }\n      this.viewModel.layoutSpecObj.setAndSave(specs).catch(reportError);\n    }\n    this._onResize();\n  }\n\n  // Removes a view section from the current view. Should only be called if there is\n  // more than one viewsection in the view.\n  public removeViewSection(viewSectionRowId: number) {\n    this.maximized.set(null);\n    this.gristDoc.docData.sendAction(['RemoveViewSection', viewSectionRowId]).catch(reportError);\n  }\n\n  public rebuildLayout(layoutSpec: BoxSpec) {\n    // Rebuild the collapsed section layout. In return we will get all leaves that were\n    // removed from collapsed dom. Some of them will hold a view instance dom.\n    const oldTray = this.layoutTray.replaceLayout();\n    // Build the normal layout. While building, some leaves will grab the view instance dom\n    // and attach it to their dom (and detach them from the old layout in the process).\n    this.layout.buildLayout(layoutSpec, true);\n    this._onResize();\n    // Dispose the old layout. This will dispose the view instances that were not reused.\n    oldTray.dispose();\n  }\n\n  private _maximizeActiveSection() {\n    const activeSection = this.viewModel.activeSection();\n    const activeSectionId = activeSection.getRowId();\n    const activeSectionBox = this.layout.getLeafBox(activeSectionId);\n    if (!activeSectionBox) { return; }\n    activeSectionBox.maximize();\n  }\n\n  private _buildLeafContent(sectionRowId: number) {\n    return buildViewSectionDom({\n       gristDoc: this.gristDoc,\n       sectionRowId,\n       isResizing: this.isResizing,\n       viewModel: this.viewModel\n    });\n  }\n\n  /**\n   * If there is no layout saved, we can create a default layout just from the list of fields for\n   * this view section. By default we just arrange them into a list of rows, two fields per row.\n   */\n  private _updateLayoutSpecWithSections(spec: BoxSpec) {\n    // We use tmpLayout as a way to manipulate the layout before we get a final spec from it.\n    const tmpLayout = Layout.create(spec, () => dom('div'), true);\n\n    const specFieldIds = tmpLayout.getAllLeafIds();\n    const viewSectionIds = this.viewModel.viewSections().all().map(function(f) { return f.getRowId(); });\n\n    function addToSpec(leafId: number) {\n      const newBox = tmpLayout.buildLayoutBox({ leaf: leafId });\n      const rows = tmpLayout.rootBox()!.childBoxes.peek();\n      const lastRow = rows[rows.length - 1];\n      if (rows.length >= 1 && lastRow.isLeaf()) {\n        // Add a new child to the last row.\n        lastRow.addChild(newBox, true);\n      } else {\n        // Add a new row.\n        tmpLayout.rootBox()!.addChild(newBox, true);\n      }\n      return newBox;\n    }\n\n    // For any stale fields (no longer among viewFields), remove them from tmpLayout.\n    _.difference(specFieldIds, viewSectionIds).forEach(function(leafId: string|number) {\n      tmpLayout.getLeafBox(leafId)?.dispose();\n    });\n\n    // For all fields that should be in the spec but aren't, add them to tmpLayout. We maintain a\n    // two-column layout, so add a new row, or a second box to the last row if it's a leaf.\n    const missingLeafs = _.difference(viewSectionIds, specFieldIds);\n    const collapsedLeafs = new Set((spec.collapsed || []).map(c => c.leaf));\n    missingLeafs.forEach(function(leafId: any) {\n      if (!collapsedLeafs.has(leafId)) {\n        addToSpec(leafId);\n      }\n    });\n\n    spec = tmpLayout.getLayoutSpec();\n    tmpLayout.dispose();\n    return spec;\n  }\n\n\n\n  // Resizes the scrolly windows of all viewSection classes with a 'scrolly' property.\n  private _onResize() {\n    this.viewModel.viewSections().all().forEach(vs => {\n      const inst = vs.viewInstance.peek();\n      if (inst) {\n        inst.onResize();\n      }\n    });\n  }\n\n  // Select another section in cyclic ordering of sections. Order is counter-clockwise if given a\n  // positive `delta`, clockwise otherwise.\n  private _otherSection(delta: number) {\n    const sectionIds = this.layout.getAllLeafIds();\n    const sectionId = this.viewModel.activeSectionId.peek();\n    const currentIndex = sectionIds.indexOf(sectionId);\n    const index = mod(currentIndex + delta, sectionIds.length);\n    // update the active section id\n    this.viewModel.activeSectionId(sectionIds[index]);\n  }\n\n  private _maybeFocusInSection()  {\n    // If the focused element is inside a view section, make that section active.\n    const layoutBox = this.layout.getContainingBox(document.activeElement);\n    if (layoutBox && layoutBox.leafId) {\n      this.gristDoc.viewModel.activeSectionId(layoutBox.leafId.peek());\n    }\n  }\n\n  /**\n   * Opens the sort and filter menu of the active view section.\n   *\n   * Optionally accepts a `sectionId` for opening a specific section's menu.\n   */\n  private _openSortFilterMenu(sectionId?: number)  {\n    const id = sectionId ?? this.viewModel.activeSectionId();\n    const leafBoxDom = this.layout.getLeafBox(id)?.dom;\n    if (!leafBoxDom) { return; }\n\n    const menu: HTMLElement | null = leafBoxDom.querySelector('.test-section-menu-sortAndFilter');\n    menu?.click();\n  }\n}\n\nconst cssLayoutBox = styled('div', `\n  @media screen and ${mediaSmall} {\n    &-active, &-inactive {\n      transition: flex-grow var(--grist-layout-animation-duration, 0.4s); // Exposed for tests\n    }\n    &-active > &-inactive,\n    &-active > &-inactive.layout_hbox .layout_hbox,\n    &-active > &-inactive.layout_vbox .layout_vbox {\n      flex: none !important;\n    }\n\n    &-active > &-inactive.layout_hbox.layout_leaf,\n    &-active > &-inactive.layout_hbox .layout_hbox.layout_leaf {\n      height: 40px;\n    }\n\n    &-active > &-inactive.layout_vbox.layout_leaf,\n    &-active > &-inactive.layout_vbox .layout_vbox.layout_leaf {\n      width: 40px;\n    }\n\n    &-inactive.layout_leaf {\n      min-height: 40px;\n      min-width: 40px;\n    }\n  }\n`);\n\nconst cssLayoutWrapper = styled('div', `\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  flex-grow: 1;\n  @media not print {\n    &-active {\n      background: ${theme.mainPanelBg};\n      height: 100%;\n      width: 100%;\n      border-radius: 5px;\n      border-bottom-left-radius: 0px;\n      border-bottom-right-radius: 0px;\n      position: relative;\n    }\n    &-active .viewsection_content {\n      margin: 0px;\n      margin-top: 12px;\n    }\n    &-active .viewsection_title {\n      padding: 0px 12px;\n    }\n    &-active .filter_bar {\n      margin-left: 6px;\n    }\n  }\n`);\n\nconst cssOverlay = styled('div', `\n  height: 100%;\n  @media screen {\n    &-active {\n      background-color: ${theme.modalBackdrop};\n      inset: 0px;\n      height: 100%;\n      width: 100%;\n      padding: 20px 56px 20px 56px;\n      position: absolute;\n    }\n    &-active .collapsed_layout {\n      display: none !important;\n    }\n  }\n  @media screen and ${mediaSmall} {\n    &-active {\n      padding: 22px;\n      padding-top: 30px;\n    }\n  }\n`);\n\nconst cssCloseButton = styled(icon, `\n  position: absolute;\n  top: 16px;\n  right: 16px;\n  height: 24px;\n  width: 24px;\n  cursor: pointer;\n  --icon-color: ${theme.modalBackdropCloseButtonFg};\n  &:hover {\n    --icon-color: ${theme.modalBackdropCloseButtonHoverFg};\n  }\n  @media ${mediaSmall} {\n    & {\n      top: 6px;\n      right: 6px;\n    }\n  }\n`);\n\nconst cssVFull = styled('div', `\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n`);\n","import * as commands from 'app/client/components/commands';\nimport {DataTables} from 'app/client/components/DataTables';\nimport {DocumentUsage} from 'app/client/components/DocumentUsage';\nimport {GristDoc} from 'app/client/components/GristDoc';\nimport {printViewSection} from 'app/client/components/Printing';\nimport {ViewSectionHelper} from 'app/client/components/ViewLayout';\nimport {mediaSmall, theme} from 'app/client/ui2018/cssVars';\nimport {icon} from 'app/client/ui2018/icons';\nimport {Computed, Disposable, dom, fromKo, makeTestId, Observable, styled} from 'grainjs';\nimport {reportError} from 'app/client/models/errors';\nimport {ViewSectionRec} from 'app/client/models/DocModel';\nimport {buildViewSectionDom} from 'app/client/components/buildViewSectionDom';\n\nconst testId = makeTestId('test-raw-data-');\n\nexport class RawDataPage extends Disposable {\n  private _lightboxVisible: Observable<boolean>;\n  constructor(private _gristDoc: GristDoc) {\n    super();\n    const commandGroup = {\n      printSection: () => { printViewSection(null, this._gristDoc.viewModel.activeSection()).catch(reportError); },\n    };\n    this.autoDispose(commands.createGroup(commandGroup, this, true));\n    this._lightboxVisible = Computed.create(this, use => {\n      const section = use(this._gristDoc.viewModel.activeSection);\n      return Boolean(use(section.id)) && use(section.isRaw);\n    });\n    // When we are disposed, we want to clear active section in the viewModel we got (which is an empty model)\n    // to not restore the section when user will come back to Raw Data page.\n    // But by the time we are gone (disposed), active view will be changed, so here we will save the reference.\n    // TODO: empty view should rather have id = 0, not undefined. Should be fixed soon.\n    const emptyView = this._gristDoc.docModel.views.rowModels.find(x => x.id.peek() === undefined);\n    this.autoDispose(this._gristDoc.activeViewId.addListener(() => {\n      emptyView?.activeSectionId(0);\n    }));\n    // Whenever we close lightbox, clear cursor monitor state.\n    this.autoDispose(this._lightboxVisible.addListener(state => {\n      if (!state) {\n        this._gristDoc.cursorMonitor.clear();\n      }\n    }));\n  }\n\n  public buildDom() {\n    return cssContainer(\n      cssPage(\n        dom('div', this._gristDoc.behavioralPromptsManager.attachTip('rawDataPage', {hideArrow: true})),\n        dom('div',\n          dom.create(DataTables, this._gristDoc),\n          dom.create(DocumentUsage, this._gristDoc.docPageModel)\n        ),\n        // We are hiding it, because overlay doesn't have a z-index (it conflicts with a searchbar and list buttons)\n        dom.hide(this._lightboxVisible)\n      ),\n      /***************  Lightbox section **********/\n      dom.domComputed(fromKo(this._gristDoc.viewModel.activeSection), (viewSection) => {\n        const sectionId = viewSection.getRowId();\n        if (!sectionId || !viewSection.isRaw.peek()) {\n          return null;\n        }\n        return dom.create(RawDataPopup, this._gristDoc, viewSection, () => this._close());\n      }),\n    );\n  }\n\n  private _close() {\n    this._gristDoc.viewModel.activeSectionId(0);\n  }\n}\n\nexport class RawDataPopup extends Disposable {\n  constructor(\n    private _gristDoc: GristDoc,\n    private _viewSection: ViewSectionRec,\n    private _onClose: () => void,\n    ) {\n    super();\n    const commandGroup = {\n      cancel: () => { this._onClose(); },\n      deleteSection: () => {\n        // Normally this command is disabled on the menu, but for collapsed section it is active.\n        if (this._viewSection.isRaw.peek()) {\n          throw new Error(\"Can't delete a raw section\");\n        }\n        this._gristDoc.docData.sendAction(['RemoveViewSection', this._viewSection.id.peek()]).catch(reportError);\n      },\n    };\n    this.autoDispose(commands.createGroup(commandGroup, this, true));\n  }\n  public buildDom() {\n    ViewSectionHelper.create(this, this._gristDoc, this._viewSection);\n    return cssOverlay(\n      testId('overlay'),\n      cssSectionWrapper(\n        buildViewSectionDom({\n          gristDoc: this._gristDoc,\n          sectionRowId: this._viewSection.getRowId(),\n          draggable: false,\n          focusable: false,\n          widgetNameHidden: this._viewSection.isRaw.peek(), // We are sometimes used for non raw sections.\n        })\n      ),\n      cssCloseButton('CrossBig',\n        testId('close-button'),\n        dom.on('click', () => this._onClose())\n      ),\n      // Close the lightbox when user clicks exactly on the overlay.\n      dom.on('click', (ev, elem) => void (ev.target === elem ? this._onClose() : null))\n    );\n  }\n}\n\nconst cssContainer = styled('div', `\n  height: 100%;\n  overflow: hidden;\n  position: relative;\n`);\n\nconst cssPage = styled('div', `\n  overflow-y: auto;\n  height: 100%;\n  padding: 32px 64px 24px 64px;\n  @media ${mediaSmall} {\n    & {\n      padding: 32px 24px 24px 24px;\n    }\n  }\n`);\n\nconst cssOverlay = styled('div', `\n  background-color: ${theme.modalBackdrop};\n  inset: 0px;\n  height: 100%;\n  width: 100%;\n  padding: 20px 56px 20px 56px;\n  position: absolute;\n  @media ${mediaSmall} {\n    & {\n      padding: 22px;\n      padding-top: 30px;\n    }\n  }\n`);\n\nconst cssSectionWrapper = styled('div', `\n  background: ${theme.mainPanelBg};\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  border-radius: 5px;\n  border-bottom-left-radius: 0px;\n  border-bottom-right-radius: 0px;\n  & .viewsection_content {\n    margin: 0px;\n    margin-top: 12px;\n  }\n  & .viewsection_title {\n    padding: 0px 12px;\n  }\n  & .filter_bar {\n    margin-left: 6px;\n  }\n`);\n\nconst cssCloseButton = styled(icon, `\n  position: absolute;\n  top: 16px;\n  right: 16px;\n  height: 24px;\n  width: 24px;\n  cursor: pointer;\n  --icon-color: ${theme.modalBackdropCloseButtonFg};\n  &:hover {\n    --icon-color: ${theme.modalBackdropCloseButtonHoverFg};\n  }\n  @media ${mediaSmall} {\n    & {\n      top: 6px;\n      right: 6px;\n    }\n  }\n`);\n","import {CursorPos} from 'app/client/components/Cursor';\nimport {GristDoc} from 'app/client/components/GristDoc';\nimport * as dispose from 'app/client/lib/dispose';\nimport {MinimalActionGroup} from 'app/common/ActionGroup';\nimport {PromiseChain, setDefault} from 'app/common/gutil';\nimport {fromKo, Observable} from 'grainjs';\nimport * as ko from 'knockout';\nimport sortBy = require('lodash/sortBy');\n\nexport interface ActionGroupWithCursorPos extends MinimalActionGroup {\n  cursorPos?: CursorPos;\n  // For operations not done by the server, we supply a function to\n  // handle them.\n  op?: (ag: MinimalActionGroup, isUndo: boolean) => Promise<void>;\n}\n\n// Provides observables indicating disabled state for undo/redo.\nexport interface IUndoState {\n  isUndoDisabled: Observable<boolean>;\n  isRedoDisabled: Observable<boolean>;\n}\n\n/**\n * Maintains the stack of actions which can be undone and redone, and maintains the\n * position in this stack. Undo and redo actions are generated and sent to the server here.\n */\nexport class UndoStack extends dispose.Disposable {\n  public isDisabled: Observable<boolean>;\n  public undoDisabledObs: ko.Observable<boolean>;\n  public redoDisabledObs: ko.Observable<boolean>;\n  private _gristDoc: GristDoc;\n  private _stack: ActionGroupWithCursorPos[];\n  private _pointer: number;\n  private _linkMap: Map<number, ActionGroupWithCursorPos[]>;\n\n  // Chain of promises which send undo actions to the server. This delays the execution of the\n  // next action until the current one has been received and moved the pointer index.\n  private _undoChain = new PromiseChain<void>();\n\n  public create(log: MinimalActionGroup[], options: {gristDoc: GristDoc}) {\n    this._gristDoc = options.gristDoc;\n\n    this.isDisabled = Observable.create(this, false);\n\n    // TODO: _stack and _linkMap grow without bound within a single session.\n    // The top of the stack is stack.length - 1. The pointer points above the most\n    // recently applied (not undone) action.\n    this._stack = [];\n    this._pointer = 0;\n\n    // Map leading from actionNums to the action groups which link to them.\n    this._linkMap = new Map();\n\n    // Observables for when there is nothing to undo/redo.\n    this.undoDisabledObs = ko.observable(true);\n    this.redoDisabledObs = ko.observable(true);\n\n    // Set the history nav interface in the DocPageModel to properly enable/disabled undo/redo.\n    if (this._gristDoc.docPageModel) {\n      this._gristDoc.docPageModel.undoState.set({\n        isUndoDisabled: fromKo(this.undoDisabledObs),\n        isRedoDisabled: fromKo(this.redoDisabledObs)\n      });\n    }\n\n    // Initialize the stack from the log of recent actions from the server.\n    log.forEach(ag => { this.pushAction(ag); });\n  }\n\n  /**\n   * Should only be given own actions. Pays attention to actionNum, otherId, linkId, and\n   * uses those to adjust undo index.\n   */\n  public pushAction(ag: MinimalActionGroup): void {\n    if (!ag.fromSelf) {\n      return;\n    }\n    const otherIndex = ag.otherId ?\n      this._stack.findIndex(a => a.actionNum === ag.otherId) : -1;\n\n    if (ag.linkId) {\n      // Link action. Add the action to the linkMap, but not to any stacks.\n      setDefault(this._linkMap, ag.linkId, []).push(ag);\n    } else if (otherIndex > -1) {\n      // Undo/redo action from the current session.\n      this._pointer = ag.isUndo ? otherIndex : otherIndex + 1;\n    } else {\n      // Either a normal action from the current session, or an undo/redo which\n      // applies to a non-recent action. Bury all undone actions.\n      if (!this.redoDisabledObs()) {\n        this._stack.splice(this._pointer);\n      }\n      // Reset pointer and add to the stack (if not an undo action).\n      if (!ag.otherId) {\n        this._stack.push(ag);\n      }\n      this._pointer = this._stack.length;\n    }\n    this.undoDisabledObs(this._pointer <= 0);\n    this.redoDisabledObs(this._pointer >= this._stack.length);\n  }\n\n  // Send an undo action. This should be called when the user presses 'undo'.\n  public async sendUndoAction(): Promise<void> {\n    if (this.isDisabled.get()) { return; }\n\n    return this._undoChain.add(() => this._sendAction(true));\n  }\n\n  // Send a redo action. This should be called when the user presses 'redo'.\n  public async sendRedoAction(): Promise<void> {\n    if (this.isDisabled.get()) { return; }\n\n    return this._undoChain.add(() => this._sendAction(false));\n  }\n\n  public enable(): void {\n    this.isDisabled.set(false);\n  }\n\n  public disable(): void {\n    this.isDisabled.set(true);\n  }\n\n  private async _sendAction(isUndo: boolean): Promise<void> {\n    // Pick the action group to undo or redo.\n    const ag = this._stack[isUndo ? this._pointer - 1 : this._pointer];\n    if (!ag) { return; }\n\n    try {\n      // Get all actions in the bundle that starts at the current index. Typically, an array with a\n      // single action group is returned.\n      const actionGroups = this._findActionBundle(ag);\n      // When we undo/redo, jump to the place where this action occurred, to bring the user to the\n      // context where the change was originally made. We jump first immediately to feel more\n      // responsive, then again when the action is done. The second jump matters more for most\n      // changes, but the first is the important one when Undoing an AddRecord.\n      this._gristDoc.moveToCursorPos(ag.cursorPos, ag).catch(() => { /* do nothing */ });\n      if (actionGroups.length === 1 && actionGroups[0].op) {\n        // this is an internal operation, rather than one done by the server,\n        // so we can't ask the server to undo it.\n        await actionGroups[0].op(actionGroups[0], isUndo);\n      } else {\n        await this._gristDoc.docComm.applyUserActionsById(\n          actionGroups.map(a => a.actionNum),\n          actionGroups.map(a => a.actionHash),\n          isUndo,\n          { otherId: ag.actionNum });\n      }\n      this._gristDoc.moveToCursorPos(ag.cursorPos, ag).catch(() => { /* do nothing */ });\n    } catch (err) {\n      err.message = `Failed to apply ${isUndo ? 'undo' : 'redo'} action: ${err.message}`;\n      throw err;\n    }\n  }\n\n  /**\n   * Find all actionGroups in the bundle that starts with the given action group.\n   */\n  private _findActionBundle(ag: ActionGroupWithCursorPos) {\n    const prevNums = new Set();\n    const actionGroups = [];\n    const queue = [ag];\n    // Follow references through the linkMap adding items to the array bundle.\n    while (queue.length) {\n      ag = queue.pop()!;\n      // Checking that actions are only accessed once prevents an infinite circular loop.\n      if (prevNums.has(ag.actionNum)) {\n        break;\n      }\n      actionGroups.push(ag);\n      prevNums.add(ag.actionNum);\n      queue.push(...this._linkMap.get(ag.actionNum) || []);\n    }\n    return sortBy(actionGroups, group => group.actionNum);\n  }\n}\n","\nimport {ClientScope} from 'app/client/components/ClientScope';\nimport {SafeBrowser} from 'app/client/lib/SafeBrowser';\nimport {ActiveDocAPI} from 'app/common/ActiveDocAPI';\nimport {LocalPlugin} from 'app/common/plugin';\nimport {createRpcLogger, PluginInstance} from 'app/common/PluginInstance';\nimport {Rpc} from 'grain-rpc';\n\n/**\n * DocPluginManager's Client side implementation.\n */\nexport class DocPluginManager {\n\n  public pluginsList: PluginInstance[];\n\n  constructor(localPlugins: LocalPlugin[], private _untrustedContentOrigin: string, private _docComm: ActiveDocAPI,\n              private _clientScope: ClientScope) {\n    this.pluginsList = [];\n    for (const plugin of localPlugins) {\n      try {\n        const pluginInstance = new PluginInstance(plugin, createRpcLogger(console, `PLUGIN ${plugin.id}:`));\n        const components = plugin.manifest.components || {};\n        const safeBrowser = pluginInstance.safeBrowser = new SafeBrowser(pluginInstance,\n          this._clientScope, this._untrustedContentOrigin, components.safeBrowser);\n        if (components.safeBrowser) {\n          pluginInstance.rpc.registerForwarder(components.safeBrowser, safeBrowser);\n        }\n\n        // Forward calls to the server, if no matching forwarder.\n        pluginInstance.rpc.registerForwarder('*', {\n          forwardCall: (call) => this._docComm.forwardPluginRpc(plugin.id, call),\n          forwardMessage: (msg) => this._docComm.forwardPluginRpc(plugin.id, msg),\n        });\n        this.pluginsList.push(pluginInstance);\n      } catch (err) {\n        console.error( // tslint:disable-line:no-console\n          `DocPluginManager: failed to instantiate ${plugin.id}: ${err.message}`);\n      }\n    }\n  }\n\n  /**\n   * `receiveAction` handles an action received from the server by forwarding it to all safe browser component.\n   */\n  public receiveAction(action: any[]) {\n    for (const plugin of this.pluginsList) {\n      const safeBrowser = plugin.safeBrowser as SafeBrowser;\n      if (safeBrowser) {\n        safeBrowser.receiveAction(action);\n      }\n    }\n  }\n\n  /**\n   * Make an Rpc object to call server methods from a url-flavored custom view.\n   */\n  public makeAnonForwarder() {\n    const rpc = new Rpc({});\n    rpc.queueOutgoingUntilReadyMessage();\n    rpc.registerForwarder('*', {\n      forwardCall: (call) => this._docComm.forwardPluginRpc(\"builtIn/core\", call),\n      forwardMessage: (msg) => this._docComm.forwardPluginRpc(\"builtIn/core\", msg),\n    });\n    return rpc;\n  }\n}\n","/**\n * Implements a cache of values computed from the data in a Grist column.\n */\nimport {TableData} from 'app/client/models/TableData';\nimport {DocAction} from 'app/common/DocActions';\nimport {isBulkUpdateRecord, isUpdateRecord} from 'app/common/DocActions';\nimport {getSetMapValue} from 'app/common/gutil';\n\nexport class ColumnCache<T> {\n  private _cachedColIndexes = new Map<string, T>();\n\n  constructor(private _tableData: TableData) {\n    // Whenever a table action is applied, consider invalidating per-column caches.\n    this._tableData.tableActionEmitter.addListener(this._invalidateCache, this);\n    this._tableData.dataLoadedEmitter.addListener(this._clearCache, this);\n  }\n\n  /**\n   * Returns the cached value for the given column, or calculates and caches the value using the\n   * provided calc() function.\n   */\n  public getValue(colId: string, calc: () => T): T {\n    return getSetMapValue(this._cachedColIndexes, colId, calc);\n  }\n\n  private _invalidateCache(action: DocAction): void {\n    if (isUpdateRecord(action) || isBulkUpdateRecord(action)) {\n      // If the update only affects existing records, only invalidate affected columns.\n      const colValues = action[3];\n      for (const colId of Object.keys(colValues)) {\n        this._cachedColIndexes.delete(colId);\n      }\n    } else {\n      // For add/delete actions and all schema changes, drop the cache entirely to be on the safe side.\n      this._clearCache();\n    }\n  }\n\n  private _clearCache(): void {\n    this._cachedColIndexes.clear();\n  }\n}\n","/**\n * Implements a cache of ACIndex objects for columns in Grist table.\n *\n * The getColACIndex() function returns the corresponding ACIndex, building it if needed and\n * caching for subsequent calls. Any change to the column or a value in it invalidates the cache.\n *\n * It is available as tableData.columnACIndexes.\n *\n * It is currently used for auto-complete in the ReferenceEditor and ReferenceListEditor widgets.\n */\nimport {ACIndex, ACIndexImpl, normalizeText} from 'app/client/lib/ACIndex';\nimport {ColumnCache} from 'app/client/models/ColumnCache';\nimport {UserError} from 'app/client/models/errors';\nimport {TableData} from 'app/client/models/TableData';\nimport {localeCompare, nativeCompare} from 'app/common/gutil';\nimport {BaseFormatter} from 'app/common/ValueFormatter';\n\nexport interface ICellItem {\n  rowId: number|'new';\n  text: string;           // Formatted cell text.\n  cleanText: string;      // Trimmed lowercase text for searching.\n}\n\n\nexport class ColumnACIndexes {\n  private _columnCache = new ColumnCache<ACIndex<ICellItem>>(this._tableData);\n\n  constructor(private _tableData: TableData) {}\n\n  /**\n   * Returns the column index for the given column, using a cached one if available.\n   * The formatter should be created using field.visibleColFormatter(). It's assumed that\n   * getColACIndex() is called for the same column with the the same formatter.\n   */\n  public getColACIndex(colId: string, formatter: BaseFormatter): ACIndex<ICellItem> {\n    return this._columnCache.getValue(colId, () => this._buildColACIndex(colId, formatter));\n  }\n\n  private _buildColACIndex(colId: string, formatter: BaseFormatter): ACIndex<ICellItem> {\n    const rowIds = this._tableData.getRowIds();\n    const valColumn = this._tableData.getColValues(colId);\n    if (!valColumn) {\n      throw new UserError(`Invalid column ${this._tableData.tableId}.${colId}`);\n    }\n    const items: ICellItem[] = valColumn.map((val, i) => {\n      const rowId = rowIds[i];\n      const text = formatter.formatAny(val);\n      const cleanText = normalizeText(text);\n      return {rowId, text, cleanText};\n    });\n    items.sort(itemCompare);\n    return new ACIndexImpl(items);\n  }\n}\n\nfunction itemCompare(a: ICellItem, b: ICellItem) {\n  return localeCompare(a.cleanText, b.cleanText) ||\n    localeCompare(a.text, b.text) ||\n    nativeCompare(a.rowId, b.rowId);\n}\n","/**\n * TableData maintains a single table's data.\n */\nimport {ColumnACIndexes} from 'app/client/models/ColumnACIndexes';\nimport {ColumnCache} from 'app/client/models/ColumnCache';\nimport {DocData} from 'app/client/models/DocData';\nimport {DocAction, ReplaceTableData, TableDataAction, UserAction} from 'app/common/DocActions';\nimport {isRaisedException} from 'app/common/gristTypes';\nimport {countIf} from 'app/common/gutil';\nimport {SchemaTypes} from 'app/common/schema';\nimport {ColTypeMap, MetaTableData as MetaTableDataBase, TableData as TableDataBase} from 'app/common/TableData';\nimport {Emitter} from 'grainjs';\n\n/**\n * TableData class to maintain a single table's data.\n */\nexport class TableData extends TableDataBase {\n  public readonly tableActionEmitter = new Emitter();\n  public readonly dataLoadedEmitter = new Emitter();\n\n  public readonly columnACIndexes = new ColumnACIndexes(this);\n\n  private _columnErrorCounts = new ColumnCache<number|undefined>(this);\n\n  /**\n   * Constructor for TableData.\n   * @param {DocData} docData: The root DocData object for this document.\n   * @param {String} tableId: The name of this table.\n   * @param {Object} tableData: An object equivalent to BulkAddRecord, i.e.\n   *        [\"TableData\", tableId, rowIds, columnValues].\n   * @param {Object} columnTypes: A map of colId to colType.\n   */\n  constructor(public readonly docData: DocData,\n              tableId: string, tableData: TableDataAction|null, columnTypes: ColTypeMap) {\n    super(tableId, tableData, columnTypes);\n  }\n\n  public loadData(tableData: TableDataAction|ReplaceTableData): number[] {\n    const oldRowIds = super.loadData(tableData);\n    // If called from base constructor, this.dataLoadedEmitter may be unset; in that case there\n    // are no subscribers anyway.\n    if (this.dataLoadedEmitter) {\n      this.dataLoadedEmitter.emit(oldRowIds, this.getRowIds());\n    }\n    return oldRowIds;\n  }\n\n  // Used by QuerySet to load new rows for onDemand tables.\n  public loadPartial(data: TableDataAction): void {\n    super.loadPartial(data);\n    // Emit dataLoaded event, to trigger ('rowChange', 'add') on the TableModel RowSource.\n    this.dataLoadedEmitter.emit([], data[2]);\n  }\n\n  // Used by QuerySet to remove unused rows for onDemand tables when a QuerySet is disposed.\n  public unloadPartial(rowIds: number[]): void {\n    super.unloadPartial(rowIds);\n    // Emit dataLoaded event, to trigger ('rowChange', 'rm') on the TableModel RowSource.\n    this.dataLoadedEmitter.emit(rowIds, []);\n  }\n\n  /**\n   * Counts and returns the number of error values in the given column. The count is cached to\n   * keep it faster for large tables, and the cache is cleared as needed on changes to the table.\n   */\n  public countErrors(colId: string): number|undefined {\n    return this._columnErrorCounts.getValue(colId, () => {\n      const values = this.getColValues(colId);\n      return values && countIf(values, isRaisedException);\n    });\n  }\n\n  /**\n   * Sends an array of table-specific action to the server to be applied. The tableId should be\n   * omitted from each `action` parameter and will be inserted automatically.\n   *\n   * @param {Array} actions: Array of user actions of the form [actionType, rowId, etc], which is sent\n   * to the server as [actionType, **tableId**, rowId, etc]\n   * @param {String} optDesc: Optional description of the actions to be shown in the log.\n   * @returns {Array} Array of return values for all the UserActions as produced by the data engine.\n   */\n  public sendTableActions(actions: UserAction[], optDesc?: string) {\n    actions.forEach((action) => action.splice(1, 0, this.tableId));\n    return this.docData.sendActions(actions as DocAction[], optDesc);\n  }\n\n  /**\n   * Sends a table-specific action to the server. The tableId should be omitted from the action parameter\n   * and will be inserted automatically.\n   *\n   * @param {Array} action: [actionType, rowId...], sent as [actionType, **tableId**, rowId...]\n   * @param {String} optDesc: Optional description of the actions to be shown in the log.\n   * @returns {Object} Return value for the UserAction as produced by the data engine.\n   */\n  public sendTableAction(action: UserAction, optDesc?: string) {\n    if (!action) { return; }\n    action.splice(1, 0, this.tableId);\n    return this.docData.sendAction(action as DocAction, optDesc);\n  }\n\n  /**\n   * Emits a table-specific action received from the server as a 'tableAction' event.\n   */\n  public receiveAction(action: DocAction): boolean {\n    const applied = super.receiveAction(action);\n    if (applied) {\n      this.tableActionEmitter.emit(action);\n    }\n    return applied;\n  }\n}\n\nexport type MetaTableData<TableId extends keyof SchemaTypes> = MetaTableDataBase<TableId> & TableData;\n","/**\n * DocData maintains all underlying data for a Grist document, knows how to load it,\n * subscribes to actions which change it, and forwards those actions to individual tables.\n * It also provides the interface to apply actions to data.\n */\n\nimport {DocComm} from 'app/client/components/DocComm';\nimport {MetaTableData, TableData} from 'app/client/models/TableData';\nimport {ApplyUAOptions, ApplyUAResult} from 'app/common/ActiveDocAPI';\nimport {CellValue, getTableId, isDataAction, TableDataAction, UserAction} from 'app/common/DocActions';\nimport {DocData as BaseDocData} from 'app/common/DocData';\nimport {SchemaTypes} from 'app/common/schema';\nimport {ColTypeMap} from 'app/common/TableData';\nimport * as bluebird from 'bluebird';\nimport {Emitter} from 'grainjs';\nimport defaults = require('lodash/defaults');\n\nconst gristNotify = (window as any).gristNotify;\n\nexport class DocData extends BaseDocData {\n  public readonly sendActionsEmitter = new Emitter();\n  public readonly sendActionsDoneEmitter = new Emitter();\n\n  private _bundlesPending: number = 0;          // How many bundles are currently pending.\n  private _lastBundlePromise?: Promise<void>;   // Promise for completion of the last pending bundle.\n  private _triggerBundleFinalize?: () => void;  // When a bundle is pending, trigger its finalize() callback.\n\n  // When a bundle is pending and actions should be checked, the callback to check them.\n  private _shouldIncludeInBundle?: (actions: UserAction[]) => boolean;\n\n  private _nextDesc: string|null = null;        // The description for the next incoming action.\n  private _lastActionNum: number|null = null;   // ActionNum of the last action in the current bundle, or null.\n  private _bundleSender: BundleSender;\n\n  private _virtualTablesFunc: Map<string, Constructor<TableData>>;\n\n  /**\n   * Constructor for DocData.\n   * @param {Object} docComm: A map of server methods available on this document.\n   * @param {Object} metaTableData: A map from tableId to table data, presented as an action,\n   *      equivalent to BulkAddRecord, i.e. [\"TableData\", tableId, rowIds, columnValues].\n   */\n  constructor(public readonly docComm: DocComm, metaTableData: {[tableId: string]: TableDataAction}) {\n    super((tableId) => docComm.fetchTable(tableId), metaTableData);\n    this._bundleSender = new BundleSender(this.docComm);\n    this._virtualTablesFunc = new Map();\n  }\n\n  public createTableData(tableId: string, tableData: TableDataAction|null, colTypes: ColTypeMap): TableData {\n    const Cons = this._virtualTablesFunc?.get(tableId) || TableData;\n    return new Cons(this, tableId, tableData, colTypes);\n  }\n\n  // Version of inherited getTable() which returns the enhance TableData type.\n  public getTable(tableId: string): TableData|undefined {\n    return super.getTable(tableId) as TableData;\n  }\n\n  // Version of inherited getMetaTable() which returns the enhanced TableData type.\n  public getMetaTable<TableId extends keyof SchemaTypes>(tableId: TableId): MetaTableData<TableId> {\n    return super.getMetaTable(tableId) as any;\n  }\n\n  /**\n   * Finds up to n most likely target columns for the given values in the document.\n   */\n  public async findColFromValues(values: any[], n: number, optTableId?: string): Promise<number[]> {\n    try {\n      return await this.docComm.findColFromValues(values, n, optTableId);\n    } catch (e) {\n      gristNotify(`Error finding matching columns: ${e.message}`);\n      return [];\n    }\n  }\n\n  /**\n   * Returns error message (traceback) for one invalid formula cell.\n   */\n  public getFormulaError(tableId: string, colId: string, rowId: number): Promise<CellValue> {\n    return this.docComm.getFormulaError(tableId, colId, rowId);\n  }\n\n  // Sets a bundle to collect all incoming actions. Throws an error if any actions which\n  // do not match the verification callback are sent.\n  public startBundlingActions<T>(options: BundlingOptions<T>): BundlingInfo<T> {\n    if (this._bundlesPending >= 2) {\n      // We don't expect a full-blown queue of bundles or actions at any point. If a bundle is\n      // pending, a new bundle should immediately finalize it. Here we refuse to queue up more\n      // actions than that. (This could crop up in theory while disconnected, but is hard to\n      // trigger to test.)\n      throw new Error('Too many actions already pending');\n    }\n    this._bundlesPending++;\n\n    // Promise to allow waiting for the result of prepare() callback before it's even called.\n    let prepareResolve!: (value: T|Promise<T>) => void;\n    const preparePromise = new Promise<T>(resolve => { prepareResolve = resolve; });\n\n    // Manually-triggered promise for when finalize() should be called. It's triggered by user,\n    // and when an unrelated action or a new bundle is started.\n    let triggerFinalize!: () => void;\n    const triggerFinalizePromise = new Promise<void>(resolve => { triggerFinalize = resolve; });\n\n    const doBundleActions = async () => {\n      if (this._lastBundlePromise) {\n        this._triggerBundleFinalize?.();\n        await this._lastBundlePromise;\n      }\n      try {\n        this._nextDesc = options.description;\n        this._lastActionNum = null;\n        this._triggerBundleFinalize = triggerFinalize;\n        prepareResolve(options.prepare());\n        this._shouldIncludeInBundle = options.shouldIncludeInBundle;\n\n        // If finalize is triggered, we must wait for preparePromise to fulfill before proceeding.\n        await Promise.all([triggerFinalizePromise, preparePromise]);\n\n        // Unset _shouldIncludeInBundle so that actions sent by finalize() are included in the\n        // bundle. If they were checked and incorrectly failed the check, we'd have a deadlock.\n        // TODO The downside is that when sending multiple unrelated actions quickly, the first\n        // can trigger finalize, and subsequent ones can get bundled in while finalize() is\n        // running. This changes the order of actions and may create problems (e.g. with undo).\n        this._shouldIncludeInBundle = undefined;\n        await options.finalize();\n      } finally {\n        // In all cases, reset the bundle-specific values we set above\n        this._shouldIncludeInBundle = undefined;\n        this._triggerBundleFinalize = undefined;\n        this._bundlesPending--;\n        if (this._bundlesPending === 0) {\n          this._lastBundlePromise = undefined;\n        }\n      }\n    };\n\n    const completionPromise = this._lastBundlePromise = doBundleActions();\n    return {preparePromise, triggerFinalize, completionPromise};\n  }\n\n  // Execute a callback that may send multiple actions, and bundle those actions together. The\n  // callback may return a promise, in which case bundleActions() will wait for it to resolve.\n  // If nestInActiveBundle is true, and there is an active bundle, then simply calls callback()\n  // without starting a new bundle.\n  public async bundleActions<T>(desc: string|null, callback: () => T|Promise<T>,\n                                options: {nestInActiveBundle?: boolean} = {}): Promise<T> {\n    if (options.nestInActiveBundle && this._bundlesPending) {\n      return await callback();\n    }\n    const bundlingInfo = this.startBundlingActions<T>({\n      description: desc,\n      shouldIncludeInBundle: () => true,\n      prepare: callback,\n      finalize: async () => undefined,\n    });\n    try {\n      return await bundlingInfo.preparePromise;\n    } finally {\n      bundlingInfo.triggerFinalize();\n      await bundlingInfo.completionPromise;\n    }\n  }\n\n  /**\n   * Sends actions to the server to be applied.\n   * @param {String} optDesc: Optional description of the actions to be shown in the log.\n   *\n   * sendActions also emits two events:\n   * 'sendActions': emitted before the action is sent, with { actions } object as data.\n   * 'sendActionsDone': emitted on success, with the same data object.\n   *   Note that it allows a handler for 'sendActions' to pass along information to the handler\n   *   for the corresponding 'sendActionsDone', by tacking it onto the event data object.\n   */\n  public sendActions(actions: UserAction[], optDesc?: string): Promise<any[]> {\n    // Some old code relies on this promise being a bluebird Promise.\n    // TODO Remove bluebird and this cast.\n    return bluebird.Promise.resolve(this._sendActionsImpl(actions, optDesc)) as unknown as Promise<any[]>;\n  }\n\n  /**\n   * Sends a single action to the server to be applied. Calls this.sendActions to manage the\n   * optional bundle.\n   * @param {String} optDesc: Optional description of the actions to be shown in the log.\n   */\n  public sendAction(action: UserAction, optDesc?: string): Promise<any> {\n    return this.sendActions([action], optDesc).then((retValues) => retValues[0]);\n  }\n\n  public registerVirtualTable(tableId: string, Cons: typeof TableData) {\n    this._virtualTablesFunc.set(tableId, Cons);\n  }\n\n  // See documentation of sendActions().\n  private async _sendActionsImpl(actions: UserAction[], optDesc?: string): Promise<any[]> {\n    const tableName = String(actions[0]?.[1]);\n    if (this._virtualTablesFunc?.has(tableName)) {\n      // Actions applying to virtual tables are handled directly by their TableData instance.\n      for (const action of actions) {\n        if (!isDataAction(action)) {\n          throw new Error('virtual table received an action it cannot handle');\n        }\n        if (getTableId(action) !== tableName) {\n          throw new Error('virtual table actions mixed with other actions');\n        }\n      }\n      const tableActions = actions.map(a => [a[0], ...a.slice(2)]);\n      // The type on sendTableActions seems kind of misleading, and\n      // only working because UserAction is defined weakly. The first\n      // thing the method does is splice back in the table names...\n      return this.getTable(tableName)!.sendTableActions(tableActions, optDesc);\n    }\n    const eventData = {actions};\n    this.sendActionsEmitter.emit(eventData);\n    const options = { desc: optDesc };\n    if (this._shouldIncludeInBundle && !this._shouldIncludeInBundle(actions)) {\n      this._triggerBundleFinalize?.();\n      await this._lastBundlePromise;\n    }\n    if (this._bundlesPending) {\n      defaults(options, {\n        desc: this._nextDesc,\n        linkId: this._lastActionNum,\n      });\n      this._nextDesc = null;\n    }\n\n    const result: ApplyUAResult = await this._bundleSender.applyUserActions(actions, options);\n    this._lastActionNum = result.actionNum;\n    this.sendActionsDoneEmitter.emit(eventData);\n    return result.retValues;\n  }\n}\n\n/**\n * BundleSender helper class collects multiple applyUserActions() calls that happen on the same\n * tick, and sends them to the server all at once.\n */\nclass BundleSender {\n  private _options = {};\n  private _actions: UserAction[] = [];\n  private _sendPromise?: Promise<ApplyUAResult>;\n\n  constructor(private _docComm: DocComm) {}\n\n  public applyUserActions(actions: UserAction[], options: ApplyUAOptions): Promise<ApplyUAResult> {\n    defaults(this._options, options);\n    const start = this._actions.length;\n    this._actions.push(...actions);\n    const end = this._actions.length;\n    return this._getSendPromise()\n    .then(result => ({\n      actionNum: result.actionNum,\n      retValues: result.retValues.slice(start, end),\n      isModification: result.isModification\n    }));\n  }\n\n  public _getSendPromise(): Promise<ApplyUAResult> {\n    if (!this._sendPromise) {\n      // Note that the first Promise.resolve() ensures that the next step (actual send) happens on\n      // the next tick. By that time, more actions may have been added to this._actions array.\n      this._sendPromise = Promise.resolve()\n      .then(() => {\n        this._sendPromise = undefined;\n        const ret = this._docComm.applyUserActions(this._actions, this._options);\n        this._options = {};\n        this._actions = [];\n        return ret;\n      });\n    }\n    return this._sendPromise;\n  }\n}\n\n\n/**\n * Options to startBundlingAction().\n */\nexport interface BundlingOptions<T = unknown> {\n  // Description of the action bundle.\n  description: string|null;\n\n  // Checker for whether an action belongs in the current bundle. If not, finalize() will be\n  // called immediately. Note that this checker is NOT applied for actions sent from prepare()\n  // or finalize() callbacks, only those in between.\n  shouldIncludeInBundle: (actions: UserAction[]) => boolean;\n\n  // Callback to start this action bundle.\n  prepare: () => T|Promise<T>;\n\n  // Callback to finalize this action bundle.\n  finalize: () => Promise<void>;\n}\n\n/**\n * Result of startBundlingActions(), to allow waiting for prepare() to complete, and to trigger\n * finalize() manually, and to wait for the full bundle to complete.\n */\nexport interface BundlingInfo<T = unknown> {\n  // Promise for when the prepare() has completed. Note that sometimes it's delayed until the\n  // previous bundle has been finalized.\n  preparePromise: Promise<T>;\n\n  // Ask DocData to call the finalize callback immediately.\n  triggerFinalize: () => void;\n\n  // Promise for when the bundle has been finalized.\n  completionPromise: Promise<void>;\n}\n\ntype Constructor<T> = new (...args: any[]) => T;\n","import {DocModel, IRowModel} from 'app/client/models/DocModel';\n\nexport type ACLRuleRec = IRowModel<\"_grist_ACLRules\">;\n\nexport function createACLRuleRec(this: ACLRuleRec, docModel: DocModel): void {\n  // currently don't care much about content.\n}\n","import {KoArray} from 'app/client/lib/koArray';\nimport {localStorageJsonObs} from 'app/client/lib/localStorageObs';\nimport {CellRec, DocModel, IRowModel, recordSet,\n        refRecord, TableRec, ViewFieldRec} from 'app/client/models/DocModel';\nimport {urlState} from 'app/client/models/gristUrlState';\nimport {jsonObservable, ObjObservable} from 'app/client/models/modelUtil';\nimport {AssistanceState} from 'app/common/AssistancePrompts';\nimport * as gristTypes from 'app/common/gristTypes';\nimport {getReferencedTableId} from 'app/common/gristTypes';\nimport {\n  BaseFormatter,\n  createFullFormatterRaw,\n  createVisibleColFormatterRaw,\n  FullFormatterArgs\n} from 'app/common/ValueFormatter';\nimport {createParser} from 'app/common/ValueParser';\nimport {Observable} from 'grainjs';\nimport * as ko from 'knockout';\nimport {v4 as uuidv4} from 'uuid';\n\n// Column behavior type, used primarily in the UI.\nexport type BEHAVIOR = \"empty\"|\"formula\"|\"data\";\n\n// Represents a column in a user-defined table.\nexport interface ColumnRec extends IRowModel<\"_grist_Tables_column\"> {\n  table: ko.Computed<TableRec>;\n  widgetOptionsJson: ObjObservable<any>;\n  viewFields: ko.Computed<KoArray<ViewFieldRec>>;\n  summarySource: ko.Computed<ColumnRec>;\n\n  // Is an empty column (undecided if formula or data); denoted by an empty formula.\n  isEmpty: ko.Computed<boolean>;\n\n  // Is a real formula column (not an empty column; i.e. contains a non-empty formula).\n  isRealFormula: ko.Computed<boolean>;\n\n  // Is a trigger formula column (not formula, but contains non-empty formula)\n  hasTriggerFormula: ko.Computed<boolean>;\n\n  // Used for transforming a column.\n  // Reference to the original column for a transform column, or to itself for a non-transforming column.\n  origColRef: ko.Observable<number>;\n  origCol: ko.Computed<ColumnRec>;\n  // Indicates whether a column is transforming. Manually set, but should be true in both the original\n  // column being transformed and that column's transform column.\n  isTransforming: ko.Observable<boolean>;\n\n  // Convenience observable to obtain and set the type with no suffix\n  pureType: ko.Computed<string>;\n\n  // Column behavior as seen by the user.\n  behavior: ko.Computed<BEHAVIOR>;\n\n  // The column's display column\n  _displayColModel: ko.Computed<ColumnRec>;\n\n  // Display col ref to use for the column, defaulting to the plain column itself.\n  displayColRef: ko.Computed<number>;\n\n  // The display column to use for the column, or the column itself when no displayCol is set.\n  displayColModel: ko.Computed<ColumnRec>;\n  visibleColModel: ko.Computed<ColumnRec>;\n\n  disableModifyBase: ko.Computed<boolean>;    // True if column config can't be modified (name, type, etc.)\n  disableModify: ko.Computed<boolean>;        // True if column can't be modified (is summary) or is being transformed.\n  disableEditData: ko.Computed<boolean>;      // True to disable editing of the data in this column.\n\n  isHiddenCol: ko.Computed<boolean>;\n\n  // Returns the rowModel for the referenced table, or null, if is not a reference column.\n  refTable: ko.Computed<TableRec|null>;\n\n  // Helper for Reference/ReferenceList columns, which returns a formatter according\n  // to the visibleCol associated with column.\n  visibleColFormatter: ko.Computed<BaseFormatter>;\n\n  // A formatter for values of this column.\n  // The difference between visibleColFormatter and formatter is especially important for ReferenceLists:\n  // `visibleColFormatter` is for individual elements of a list, sometimes hypothetical\n  // (i.e. they aren't actually referenced but they exist in the visible column and are relevant to e.g. autocomplete)\n  // `formatter` formats actual cell values, e.g. a whole list from the display column.\n  formatter: ko.Computed<BaseFormatter>;\n  cells: ko.Computed<KoArray<CellRec>>;\n\n  /**\n   * Current history of chat. This is a temporary array used only in the ui.\n   */\n  chatHistory: ko.PureComputed<Observable<ChatHistory>>;\n\n  // Helper which adds/removes/updates column's displayCol to match the formula.\n  saveDisplayFormula(formula: string): Promise<void>|undefined;\n\n  createValueParser(): (value: string) => any;\n}\n\nexport function createColumnRec(this: ColumnRec, docModel: DocModel): void {\n  this.table = refRecord(docModel.tables, this.parentId);\n  this.widgetOptionsJson = jsonObservable(this.widgetOptions);\n  this.viewFields = recordSet(this, docModel.viewFields, 'colRef');\n  this.summarySource = refRecord(docModel.columns, this.summarySourceCol);\n  this.cells = recordSet(this, docModel.cells, 'colRef');\n\n  // Is this an empty column (undecided if formula or data); denoted by an empty formula.\n  this.isEmpty = ko.pureComputed(() => this.isFormula() && this.formula() === '');\n\n  // Is this a real formula column (not an empty column; i.e. contains a non-empty formula).\n  this.isRealFormula = ko.pureComputed(() => this.isFormula() && this.formula() !== '');\n  // If this column has a trigger formula defined\n  this.hasTriggerFormula = ko.pureComputed(() => !this.isFormula() && this.formula() !== '');\n\n  // Used for transforming a column.\n  // Reference to the original column for a transform column, or to itself for a non-transforming column.\n  this.origColRef = ko.observable(this.getRowId());\n  this.origCol = refRecord(docModel.columns, this.origColRef);\n  // Indicates whether a column is transforming. Manually set, but should be true in both the original\n  // column being transformed and that column's transform column.\n  this.isTransforming = ko.observable(false);\n\n  // Convenience observable to obtain and set the type with no suffix\n  this.pureType = ko.pureComputed(() => gristTypes.extractTypeFromColType(this.type()));\n\n  // The column's display column\n  this._displayColModel = refRecord(docModel.columns, this.displayCol);\n\n  // Helper which adds/removes/updates this column's displayCol to match the formula.\n  this.saveDisplayFormula = function(formula) {\n    if (formula !== (this._displayColModel().formula() || '')) {\n      return docModel.docData.sendAction([\"SetDisplayFormula\", this.table().tableId(),\n        null, this.getRowId(), formula]);\n    }\n  };\n\n  // Display col ref to use for the column, defaulting to the plain column itself.\n  this.displayColRef = ko.pureComputed(() => this.displayCol() || this.origColRef());\n\n  // The display column to use for the column, or the column itself when no displayCol is set.\n  this.displayColModel = refRecord(docModel.columns, this.displayColRef);\n  this.visibleColModel = refRecord(docModel.columns, this.visibleCol);\n\n  this.disableModifyBase = ko.pureComputed(() => Boolean(this.summarySourceCol()));\n  this.disableModify = ko.pureComputed(() => this.disableModifyBase() || this.isTransforming());\n  this.disableEditData = ko.pureComputed(() => Boolean(this.summarySourceCol()));\n\n  this.isHiddenCol = ko.pureComputed(() => gristTypes.isHiddenCol(this.colId()));\n\n  // Returns the rowModel for the referenced table, or null, if this is not a reference column.\n  this.refTable = ko.pureComputed(() => {\n    const refTableId = getReferencedTableId(this.type() || \"\");\n    return refTableId ? docModel.visibleTables.all().find(t => t.tableId() === refTableId) || null : null;\n  });\n\n  // Helper for Reference/ReferenceList columns, which returns a formatter according to the visibleCol\n  // associated with this column. If no visible column available, return formatting for the column itself.\n  this.visibleColFormatter = ko.pureComputed(() => formatterForRec(this, this, docModel, 'vcol'));\n\n  this.formatter = ko.pureComputed(() => formatterForRec(this, this, docModel, 'full'));\n\n  this.createValueParser = function() {\n    const parser = createParser(docModel.docData, this.id.peek());\n    return parser.cleanParse.bind(parser);\n  };\n\n  this.behavior = ko.pureComputed(() => this.isEmpty() ? 'empty' : this.isFormula() ? 'formula' : 'data');\n\n  this.chatHistory = this.autoDispose(ko.computed(() => {\n    const docId = urlState().state.get().doc ?? '';\n    // Changed key name from history to history-v2 when ChatHistory changed in incompatible way.\n    const key = `formula-assistant-history-v2-${docId}-${this.table().tableId()}-${this.colId()}`;\n    return localStorageJsonObs(key, {messages: [], conversationId: uuidv4()} as ChatHistory);\n  }));\n}\n\nexport function formatterForRec(\n  rec: ColumnRec | ViewFieldRec, colRec: ColumnRec, docModel: DocModel, kind: 'full' | 'vcol'\n): BaseFormatter {\n  const vcol = rec.visibleColModel();\n  const func = kind === 'full' ? createFullFormatterRaw : createVisibleColFormatterRaw;\n  const args: FullFormatterArgs = {\n    docData: docModel.docData,\n    type: colRec.type(),\n    widgetOpts: rec.widgetOptionsJson(),\n    visibleColType: vcol?.type(),\n    visibleColWidgetOpts: vcol?.widgetOptionsJson(),\n    docSettings: docModel.docInfoRow.documentSettingsJson(),\n  };\n  return func(args);\n}\n\n/**\n * A chat message. Either send by the user or by the AI.\n */\nexport interface ChatMessage {\n  /**\n   * The message to display. It is a prompt typed by the user or a formula returned from the AI.\n   */\n  message: string;\n  /**\n   * The sender of the message. Either the user or the AI.\n   */\n  sender: 'user' | 'ai';\n  /**\n   * The formula returned from the AI. It is only set when the sender is the AI.\n   */\n  formula?: string|null;\n  /**\n   * Suggested actions returned from the AI.\n   */\n  action?: any;\n}\n\n/**\n * The state of assistance for a particular column.\n * ChatMessages are what are shown in the UI, whereas state is\n * how the back-end represents the conversation. The two are\n * similar but not the same because of post-processing.\n * It may be possible to reconcile them when things settle down\n * a bit?\n */\nexport interface ChatHistory {\n  messages: ChatMessage[];\n  conversationId?: string;\n  state?: AssistanceState;\n}\n","import {DocModel, IRowModel} from 'app/client/models/DocModel';\nimport * as modelUtil from 'app/client/models/modelUtil';\nimport {jsonObservable} from 'app/client/models/modelUtil';\nimport {DocumentSettings} from 'app/common/DocumentSettings';\nimport * as ko from 'knockout';\n\n// The document-wide metadata. It's all contained in a single record with id=1.\nexport interface DocInfoRec extends IRowModel<\"_grist_DocInfo\"> {\n  documentSettingsJson: modelUtil.SaveableObjObservable<DocumentSettings>\n  defaultViewId: ko.Computed<number>;\n  newDefaultViewId: ko.Computed<number>;\n}\n\nexport function createDocInfoRec(this: DocInfoRec, docModel: DocModel): void {\n  this.documentSettingsJson = jsonObservable(this.documentSettings);\n  this.defaultViewId = this.autoDispose(ko.pureComputed(() => {\n    const tab = docModel.allTabs.at(0);\n    return tab ? tab.viewRef() : 0;\n  }));\n  this.newDefaultViewId = this.autoDispose(ko.pureComputed(() => {\n    const page = docModel.visibleDocPages()[0];\n    return page ? page.viewRef() : 0;\n  }));\n}\n","import {ColumnRec, DocModel, IRowModel, refRecord, ViewSectionRec} from 'app/client/models/DocModel';\nimport * as modelUtil from 'app/client/models/modelUtil';\nimport * as ko from 'knockout';\n\n// Represents a column filter for a view section.\nexport interface FilterRec extends IRowModel<\"_grist_Filters\"> {\n  viewSection: ko.Computed<ViewSectionRec>;\n  column: ko.Computed<ColumnRec>;\n\n  // Observable for the parsed filter object.\n  activeFilter: modelUtil.CustomComputed<string>;\n}\n\nexport function createFilterRec(this: FilterRec, docModel: DocModel): void {\n  this.viewSection = refRecord(docModel.viewSections, this.viewSectionRef);\n  this.column = refRecord(docModel.columns, this.colRef);\n\n  // Observable for the active filter that's initialized from the value saved to the server.\n  this.activeFilter = modelUtil.customComputed({\n    read: () => { const f = this.filter(); return f === 'null' ? '' : f; }, // To handle old empty filters.\n  });\n}\n","import {DocModel, IRowModel, refRecord, ViewRec} from 'app/client/models/DocModel';\nimport * as ko from 'knockout';\n\n// Represents a page entry in the tree of pages.\nexport interface PageRec extends IRowModel<\"_grist_Pages\"> {\n  view: ko.Computed<ViewRec>;\n  isHidden: ko.Computed<boolean>;\n  isCensored: ko.Computed<boolean>;\n  isSpecial: ko.Computed<boolean>;\n}\n\nexport function createPageRec(this: PageRec, docModel: DocModel): void {\n  this.view = refRecord(docModel.views, this.viewRef);\n  // Page is hidden when any of this is true:\n  // - It has an empty name (or no name at all)\n  // - It is GristDocTour (unless user wants to see it)\n  // - It is GristDocTutorial (unless user should see it)\n  // - It is a page generated for a hidden table TODO: Follow up - don't create\n  //   pages for hidden tables.\n  // This is used currently only the left panel, to hide pages from the user.\n  this.isCensored = ko.pureComputed(() => !this.view().name());\n  this.isSpecial = ko.pureComputed(() => {\n    const name = this.view().name();\n    const isTableHidden = () => {\n      const viewId = this.view().id();\n      const tables = docModel.rawDataTables.all();\n      const primaryTable = tables.find(t => t.primaryViewId() === viewId);\n      return !!primaryTable && primaryTable.tableId()?.startsWith(\"GristHidden_\");\n    };\n    return (\n      (name === 'GristDocTour' && !docModel.showDocTourTable) ||\n      (name === 'GristDocTutorial' && !docModel.showDocTutorialTable) ||\n      isTableHidden()\n    );\n  });\n  this.isHidden = ko.pureComputed(() => {\n    return this.isCensored() || this.isSpecial();\n  });\n}\n","import {DocModel, IRowModel, refRecord, ViewRec} from 'app/client/models/DocModel';\nimport * as ko from 'knockout';\n\n// Represents a page entry in the tree of pages.\nexport interface TabBarRec extends IRowModel<\"_grist_TabBar\"> {\n  view: ko.Computed<ViewRec>;\n}\n\nexport function createTabBarRec(this: TabBarRec, docModel: DocModel): void {\n  this.view = refRecord(docModel.views, this.viewRef);\n}\n","import {KoArray} from 'app/client/lib/koArray';\nimport {DocModel, IRowModel, recordSet, refRecord, ViewSectionRec} from 'app/client/models/DocModel';\nimport {ColumnRec, ValidationRec, ViewRec} from 'app/client/models/DocModel';\nimport * as modelUtil from 'app/client/models/modelUtil';\nimport {summaryGroupByDescription} from 'app/common/ActiveDocAPI';\nimport {MANUALSORT} from 'app/common/gristTypes';\nimport * as ko from 'knockout';\nimport randomcolor from 'randomcolor';\n\n// Represents a user-defined table.\nexport interface TableRec extends IRowModel<\"_grist_Tables\"> {\n  columns: ko.Computed<KoArray<ColumnRec>>;\n  validations: ko.Computed<KoArray<ValidationRec>>;\n\n  primaryView: ko.Computed<ViewRec>;\n  rawViewSection: ko.Computed<ViewSectionRec>;\n  summarySource: ko.Computed<TableRec>;\n\n  // A Set object of colRefs for all summarySourceCols of table.\n  summarySourceColRefs: ko.Computed<Set<number>>;\n\n  // tableId for normal tables, or tableId of the source table for summary tables.\n  primaryTableId: ko.Computed<string>;\n\n  // The list of grouped by columns.\n  groupByColumns: ko.Computed<ColumnRec[]>;\n  // Grouping description.\n  groupDesc: ko.PureComputed<string>;\n  // Name of the data table - title of the rawViewSection\n  // for summary table it is name of primary table.\n  tableName: modelUtil.KoSaveableObservable<string>;\n  // Table name with a default value (which is tableId).\n  tableNameDef: modelUtil.KoSaveableObservable<string>;\n  // Like tableNameDef, but formatted to be more suitable for displaying to\n  // users (e.g. including group columns for summary tables).\n  formattedTableName: ko.PureComputed<string>;\n  // If user can select this table in various places.\n  // Note: Some hidden tables can still be visible on RawData view.\n  isHidden: ko.Computed<boolean>;\n\n  tableColor: string;\n  disableAddRemoveRows: ko.Computed<boolean>;\n  supportsManualSort: ko.Computed<boolean>;\n}\n\nexport function createTableRec(this: TableRec, docModel: DocModel): void {\n  this.columns = recordSet(this, docModel.columns, 'parentId', {sortBy: 'parentPos'});\n  this.validations = recordSet(this, docModel.validations, 'tableRef');\n\n  this.primaryView = refRecord(docModel.views, this.primaryViewId);\n  this.rawViewSection = refRecord(docModel.viewSections, this.rawViewSectionRef);\n  this.summarySource = refRecord(docModel.tables, this.summarySourceTable);\n  this.isHidden = this.autoDispose(\n    // This is repeated logic from isHiddenTable.\n    ko.pureComputed(() => !this.tableId() || !!this.summarySourceTable() || this.tableId().startsWith(\"GristHidden_\"))\n  );\n\n  // A Set object of colRefs for all summarySourceCols of this table.\n  this.summarySourceColRefs = this.autoDispose(ko.pureComputed(() => new Set(\n    this.columns().all().map(c => c.summarySourceCol()).filter(colRef => colRef))));\n\n  // tableId for normal tables, or tableId of the source table for summary tables.\n  this.primaryTableId = ko.pureComputed(() =>\n    this.summarySourceTable() ? this.summarySource().tableId() : this.tableId());\n\n  this.groupByColumns = ko.pureComputed(() => this.columns().all().filter(c => c.summarySourceCol()));\n\n  this.groupDesc = ko.pureComputed(() => {\n    if (!this.summarySourceTable()) {\n      return '';\n    }\n    return summaryGroupByDescription(this.groupByColumns().map(c => c.label()));\n  });\n\n  // TODO: We should save this value and let users change it.\n  this.tableColor = randomcolor({\n    luminosity: 'light',\n    seed: typeof this.id() === 'number' ? 5 * this.id() : this.id()\n  });\n\n  this.disableAddRemoveRows = ko.pureComputed(() => Boolean(this.summarySourceTable()));\n\n  this.supportsManualSort = ko.pureComputed(() => this.columns().all().some(c => c.colId() === MANUALSORT));\n\n  this.tableName = modelUtil.savingComputed({\n    read: () => {\n      if (this.isDisposed()) {\n        return '';\n      }\n      if (this.summarySourceTable()) {\n        return this.summarySource().rawViewSection().title();\n      } else {\n        // Need to be extra careful here, rawViewSection might be disposed.\n        if (this.rawViewSection().isDisposed()) {\n          return '';\n        }\n        return this.rawViewSection().title();\n      }\n    },\n    write: (setter, val) => {\n      if (this.summarySourceTable()) {\n        setter(this.summarySource().rawViewSection().title, val);\n      } else {\n        setter(this.rawViewSection().title, val);\n      }\n    }\n  });\n  this.tableNameDef = modelUtil.fieldWithDefault(\n    this.tableName,\n    // TableId will be null/undefined when ACL will restrict access to it.\n    ko.computed(() => {\n      // During table removal, we could be disposed.\n      if (this.isDisposed()) {\n        return '';\n      }\n      const table = this.summarySourceTable() ? this.summarySource() : this;\n      return table.tableId() || '';\n    })\n  );\n  this.formattedTableName = ko.pureComputed(() => {\n    return this.summarySourceTable()\n      ? `${this.tableNameDef()} ${this.groupDesc()}`\n      : this.tableNameDef();\n  });\n}\n","import {DocModel, IRowModel} from 'app/client/models/DocModel';\n\n// Represents a validation rule.\nexport type ValidationRec = IRowModel<\"_grist_Validations\">\n\nexport function createValidationRec(this: ValidationRec, docModel: DocModel): void {\n  // no extra fields\n}\n","import {ColumnRec, DocModel} from 'app/client/models/DocModel';\nimport {Style} from 'app/client/models/Styles';\nimport * as modelUtil from 'app/client/models/modelUtil';\nimport {GristObjCode} from 'app/plugin/GristData';\n\nexport interface RuleOwner {\n  // Field or Section can have a list of conditional styling rules. Each style is a combination of a formula and options\n  // that must by applied. Style is persisted as a new hidden formula column and the list of such\n  // columns is stored as Reference List property ('rules') in a field or column.\n  tableId: ko.Computed<string>;\n  // If this field (or column) has a list of conditional styling rules.\n  hasRules: ko.Computed<boolean>;\n  // List of rules.\n  rulesList: ko.Computed<[GristObjCode.List, ...number[]] | null>;\n  // List of columns that are used as rules for conditional styles.\n  rulesCols: ko.Computed<ColumnRec[]>;\n  // List of columns ids that are used as rules for conditional styles.\n  rulesColsIds: ko.Computed<string[]>;\n  // List of styles used by conditional rules.\n  rulesStyles: modelUtil.KoSaveableObservable<Style[]>;\n  // Adds empty conditional style rule. Sets before sending to the server.\n  addEmptyRule(): Promise<void>;\n  // Removes one rule from the collection. Removes before sending update to the server.\n  removeRule(index: number): Promise<void>;\n}\n\nexport async function removeRule(docModel: DocModel, owner: RuleOwner, index: number) {\n  const col = owner.rulesCols.peek()[index];\n  if (!col) {\n    throw new Error(`There is no rule at index ${index}`);\n  }\n  const newStyles = owner.rulesStyles.peek()?.slice() ?? [];\n  if (newStyles.length >= index) {\n    newStyles.splice(index, 1);\n  } else {\n    console.debug(`There are not style options at index ${index}`);\n  }\n  await docModel.docData.bundleActions(\"Remove conditional rule\", () =>\n    Promise.all([\n      owner.rulesStyles.setAndSave(newStyles),\n      docModel.docData.sendAction(['RemoveColumn', owner.tableId.peek(), col.colId.peek()])\n    ])\n  );\n}\n","import * as modelUtil from 'app/client/models/modelUtil';\n// This is circular import, but only for types so it's fine.\nimport type {DocModel, ViewFieldRec} from 'app/client/models/DocModel';\nimport * as UserType from 'app/client/widgets/UserType';\nimport {ifNotSet} from 'app/common/gutil';\nimport * as ko from 'knockout';\nimport intersection from \"lodash/intersection\";\nimport isEqual from \"lodash/isEqual\";\nimport zip from 'lodash/zip';\n\nexport class ViewFieldConfig {\n  /** If there are multiple columns selected in the viewSection */\n  public multiselect: ko.Computed<boolean>;\n  /** If all selected columns have the same widget list. */\n  public sameWidgets: ko.Computed<boolean>;\n  /** Widget options for a field or multiple fields. Doesn't contain style options */\n  public options: CommonOptions;\n  /** Style options for a field or multiple fields  */\n  public style: ko.Computed<StyleOptions>;\n  /** Header style options for a field or multiple fields  */\n  public headerStyle: ko.Computed<StyleOptions>;\n\n  // Rest of the options mimic the same options from ViewFieldRec.\n  public wrap: modelUtil.KoSaveableObservable<boolean|undefined>;\n  public widget: ko.Computed<string|undefined>;\n  public alignment: modelUtil.KoSaveableObservable<string|undefined>;\n  public fields: ko.PureComputed<ViewFieldRec[]>;\n  constructor(private _field: ViewFieldRec, private _docModel: DocModel) {\n    // Everything here will belong to a _field, this class is just a builder.\n    const owner = _field;\n\n    // Get all selected fields from the viewSection, if there is only one field\n    // selected (or the selection is empty) return it in an array.\n    this.fields = owner.autoDispose(ko.pureComputed(() => {\n      const list = this._field.viewSection().selectedFields();\n      if (!list || !list.length) {\n        return [_field];\n      }\n      // Make extra sure that field and column is not disposed, most of the knockout\n      // based entities, don't dispose their computed observables. As we keep references\n      // for them, it can happen that some of them are disposed while we are still\n      // computing something (mainly when columns are removed or restored using undo).\n      return list.filter(f => !f.isDisposed() && !f.column().isDisposed());\n    }));\n\n    // Just a helper field to see if we have multiple selected columns or not.\n    this.multiselect = owner.autoDispose(ko.pureComputed(() => this.fields().length > 1));\n\n    // Calculate if all columns share the same allowed widget list (like for Numeric type\n    // we have normal TextBox and Spinner). This will be used to allow the user to change\n    // this type if such columns are selected.\n    this.sameWidgets = owner.autoDispose(ko.pureComputed(() => {\n      const list = this.fields();\n      // If we have only one field selected, list is always the same.\n      if (list.length <= 1) { return true; }\n      // Now get all widget list and calculate intersection of the Sets.\n      // Widget types are just strings defined in UserType.\n      const widgets = list.map(c =>\n        Object.keys(UserType.typeDefs[c.column().pureType()]?.widgets ?? {})\n      );\n      return intersection(...widgets).length === widgets[0]?.length;\n    }));\n\n    // Changing widget type is not trivial, as we need to carefully reset all\n    // widget options to their default values, and there is a nuance there.\n    this.widget = owner.autoDispose(ko.pureComputed({\n      read: () => {\n        // For single column, just return its widget type.\n        if (!this.multiselect()) {\n          return this._field.widget();\n        }\n        // If all have the same value, return it, otherwise\n        // return a default value for this option \"undefined\"\n        const values = this.fields().map(f => f.widget());\n        if (allSame(values)) {\n          return values[0];\n        } else {\n          return undefined;\n        }\n      },\n      write: (widget) => {\n        // Go through all the fields, and reset them all.\n        for(const field of this.fields.peek()) {\n          // Reset the entire JSON, so that all options revert to their defaults.\n          const previous = field.widgetOptionsJson.peek();\n          // We don't need to bundle anything (actions send in the same tick, are bundled\n          // by default).\n          field.widgetOptionsJson.setAndSave({\n            widget,\n            // Persists color settings across widgets (note: we cannot use `field.fillColor` to get the\n            // current value because it returns a default value for `undefined`. Same for `field.textColor`.\n            fillColor: previous.fillColor,\n            textColor: previous.textColor,\n          }).catch(reportError);\n        }\n      }\n    }));\n\n    // Calculate common options for all column types (and their widgets).\n    // We will use this, to know which options are allowed to be changed\n    // when multiple columns are selected.\n    const commonOptions = owner.autoDispose(ko.pureComputed(() => {\n      const fields = this.fields();\n      // Put all options of first widget in the Set, and then remove\n      // them one by one, if they are not present in other fields.\n      let options: Set<string>|null = null;\n      for(const field of fields) {\n        // First get the data, and prepare initial set.\n        const widget = field.widget() || '';\n        const widgetOptions = UserType.typeDefs[field.column().pureType()]?.widgets[widget]?.options;\n        if (!widgetOptions) { continue; }\n        if (!options) { options = new Set(Object.keys(widgetOptions)); }\n        else {\n          // And now remove options that are not common.\n          const newOptions = new Set(Object.keys(widgetOptions));\n          for(const key of options) {\n            if (!newOptions.has(key)) {\n              options.delete(key);\n            }\n          }\n        }\n      }\n      return options ?? new Set();\n    }));\n\n    // Prepare our \"multi\" widgetOptionsJson, that can read and save\n    // options for multiple columns.\n    const options = modelUtil.savingComputed({\n      read: () => {\n        // For one column, just proxy this to the field.\n        if (!this.multiselect()) {\n          return this._field.widgetOptionsJson();\n        }\n        // Assemble final json object.\n        const result: any = {};\n        // First get all widgetOption jsons from all columns/fields.\n        const optionList = this.fields().map(f => f.widgetOptionsJson());\n        // And fill only those that are common\n        const common = commonOptions();\n        for(const key of common) {\n          // Setting null means that this options is there, but has no value.\n          result[key] = null;\n          // If all columns have the same value, use it.\n          if (allSame(optionList.map(v => v[key]))) {\n            result[key] = optionList[0][key] ?? null;\n          }\n        }\n        return result;\n      },\n      write: (setter, value) => {\n        if (!this.multiselect.peek()) {\n          return setter(this._field.widgetOptionsJson, value);\n        }\n        // When the creator panel is saving widgetOptions, it will pass\n        // our virtual widgetObject, which has nulls for mixed values.\n        // If this option wasn't changed (set), we don't want to save it.\n        value = {...value};\n        for(const key of Object.keys(value)) {\n          if (value[key] === null) {\n            delete value[key];\n          }\n        }\n        // Now update all options, for all fields, by amending the options\n        // object from the field/column.\n        for(const item of this.fields.peek()) {\n          const previous = item.widgetOptionsJson.peek();\n          setter(item.widgetOptionsJson, {\n            ...previous,\n            ...value,\n          });\n        }\n      }\n    });\n\n    // We need some additional information about each property.\n    this.options = owner.autoDispose(extendObservable(modelUtil.objObservable(options), {\n      // Property is not supported by set of columns if it is not a common option.\n      disabled: prop => ko.pureComputed(() => !commonOptions().has(prop)),\n      // Property has mixed value, if not all options are the same.\n      mixed: prop => ko.pureComputed(() => !allSame(this.fields().map(f => f.widgetOptionsJson.prop(prop)()))),\n      // Property has empty value, if all options are empty (are null, undefined, empty Array or empty Object).\n      empty: prop => ko.pureComputed(() => allEmpty(this.fields().map(f => f.widgetOptionsJson.prop(prop)()))),\n    }));\n\n    // This is repeated logic for wrap property in viewFieldRec,\n    // every field has wrapping implicitly set to true on a card view.\n    this.wrap = modelUtil.fieldWithDefault(\n      this.options.prop('wrap'),\n      () => this._field.viewSection().parentKey() !== 'record'\n    );\n\n    this.alignment = this.options.prop('alignment');\n\n    // Style options are a bit different, as they are saved when style picker is disposed.\n    // By the time it happens, fields may have changed (since user might have clicked some other column).\n    // To support this use case we need to compute a snapshot of fields, and use it to save style. Style\n    // picker will be rebuild every time fields change, and it will have access to last selected fields\n    // when it will be disposed.\n    this.style = ko.pureComputed(() => {\n      const fields = this.fields();\n      const multiSelect = fields.length > 1;\n      const savableOptions = modelUtil.savingComputed({\n        read: () => {\n          // For one column, just proxy this to the field.\n          if (!multiSelect) {\n            return this._field.widgetOptionsJson();\n          }\n          // Assemble final json object.\n          const result: any = {};\n          // First get all widgetOption jsons from all columns/fields.\n          const optionList = fields.map(f => f.widgetOptionsJson());\n          // And fill only those that are common\n          for(const key of ['textColor', 'fillColor', 'fontBold',\n                            'fontItalic', 'fontUnderline', 'fontStrikethrough']) {\n            // Setting null means that this options is there, but has no value.\n            result[key] = null;\n            // If all columns have the same value, use it.\n            if (allSame(optionList.map(v => v[key]))) {\n              result[key] = optionList[0][key] ?? null;\n            }\n          }\n          return result;\n        },\n        write: (setter, value) => {\n          if (!multiSelect) {\n            return setter(this._field.widgetOptionsJson, value);\n          }\n          // When the creator panel is saving widgetOptions, it will pass\n          // our virtual widgetObject, which has nulls for mixed values.\n          // If this option wasn't changed (set), we don't want to save it.\n          value = {...value};\n          for(const key of Object.keys(value)) {\n            if (value[key] === null) {\n              delete value[key];\n            }\n          }\n          // Now update all options, for all fields, by amending the options\n          // object from the field/column.\n          for(const item of fields) {\n            const previous = item.widgetOptionsJson.peek();\n            setter(item.widgetOptionsJson, {\n              ...previous,\n              ...value,\n            });\n          }\n        }\n      });\n      // Style picker needs to be able revert to previous value, if user cancels.\n      const state = fields.map(f => f.style.peek());\n      // We need some additional information about each property.\n      const result: StyleOptions = extendObservable(modelUtil.objObservable(savableOptions), {\n        // Property has mixed value, if not all options are the same.\n        mixed: prop => ko.pureComputed(() => !allSame(fields.map(f => f.widgetOptionsJson.prop(prop)()))),\n        // Property has empty value, if all options are empty (are null, undefined, empty Array or empty Object).\n        empty: prop => ko.pureComputed(() => allEmpty(fields.map(f => f.widgetOptionsJson.prop(prop)()))),\n      });\n      result.revert = () => { zip(fields, state).forEach(([f, s]) => f!.style(s!)); };\n      return result;\n    });\n\n    this.headerStyle = ko.pureComputed(() => {\n      const fields = this.fields();\n      const multiSelect = fields.length > 1;\n      const savableOptions = modelUtil.savingComputed({\n        read: () => {\n          // For one column, just proxy this to the field.\n          if (!multiSelect) {\n            return this._field.widgetOptionsJson();\n          }\n          // Assemble final json object.\n          const result: any = {};\n          // First get all widgetOption jsons from all columns/fields.\n          const optionList = fields.map(f => f.widgetOptionsJson());\n          // And fill only those that are common\n          for(const key of ['headerTextColor', 'headerFillColor', 'headerFontBold',\n                            'headerFontItalic', 'headerFontUnderline', 'headerFontStrikethrough']) {\n            // Setting null means that this options is there, but has no value.\n            result[key] = null;\n            // If all columns have the same value, use it.\n            if (allSame(optionList.map(v => v[key]))) {\n              result[key] = optionList[0][key] ?? null;\n            }\n          }\n          return result;\n        },\n        write: (setter, value) => {\n          if (!multiSelect) {\n            return setter(this._field.widgetOptionsJson, value);\n          }\n          // When the creator panel is saving widgetOptions, it will pass\n          // our virtual widgetObject, which has nulls for mixed values.\n          // If this option wasn't changed (set), we don't want to save it.\n          value = {...value};\n          for(const key of Object.keys(value)) {\n            if (value[key] === null) {\n              delete value[key];\n            }\n          }\n          // Now update all options, for all fields, by amending the options\n          // object from the field/column.\n          for(const item of fields) {\n            const previous = item.widgetOptionsJson.peek();\n            setter(item.widgetOptionsJson, {\n              ...previous,\n              ...value,\n            });\n          }\n        }\n      });\n      // Style picker needs to be able revert to previous value, if user cancels.\n      const state = fields.map(f => f.headerStyle.peek());\n      // We need some additional information about each property.\n      const result: StyleOptions = extendObservable(modelUtil.objObservable(savableOptions), {\n        // Property has mixed value, if not all options are the same.\n        mixed: prop => ko.pureComputed(() => !allSame(fields.map(f => f.widgetOptionsJson.prop(prop)()))),\n        // Property has empty value, if all options are empty (are null, undefined, empty Array or empty Object).\n        empty: prop => ko.pureComputed(() => allEmpty(fields.map(f => f.widgetOptionsJson.prop(prop)()))),\n      });\n      result.revert = () => { zip(fields, state).forEach(([f, s]) => f!.headerStyle(s!)); };\n      return result;\n    });\n  }\n\n  // Helper for Choice/ChoiceList columns, that saves widget options and renames values in a document\n  // in one bundle\n  public async updateChoices(renames: Record<string, string>, options: any){\n    const hasRenames = !!Object.entries(renames).length;\n    const tableId = this._field.column.peek().table.peek().tableId.peek();\n    if (this.multiselect.peek()) {\n      this._field.config.options.update(options);\n      const colIds = this.fields.peek().map(f => f.colId.peek());\n      return this._docModel.docData.bundleActions(\"Update choices configuration\", () => Promise.all([\n        this._field.config.options.save(),\n        !hasRenames ? null : this._docModel.docData.sendActions(\n          colIds.map(colId => [\"RenameChoices\", tableId, colId, renames])\n        )\n      ]));\n    } else {\n      const column = this._field.column.peek();\n      // In case this column is being transformed - using Apply Formula to Data, bundle the action\n      // together with the transformation.\n      const actionOptions = {nestInActiveBundle: column.isTransforming.peek()};\n      this._field.widgetOptionsJson.update(options);\n      return this._docModel.docData.bundleActions(\"Update choices configuration\", () => Promise.all([\n        this._field.widgetOptionsJson.save(),\n        !hasRenames ? null\n        : this._docModel.docData.sendAction([\"RenameChoices\", tableId, column.colId.peek(), renames])\n      ]), actionOptions);\n    }\n\n  }\n}\n\n/**\n * Deeply checks that all elements in a list are equal. Equality is checked by first\n * converting \"empty like\" elements to null and then deeply comparing the elements.\n */\nfunction allSame(arr: any[]) {\n  if (arr.length <= 1) { return true; }\n  const first = ifNotSet(arr[0], null);\n  const same = arr.every(next => {\n    return isEqual(ifNotSet(next, null), first);\n  });\n  return same;\n}\n\n/**\n * Checks if every item in a list is empty (empty like in empty string, null, undefined, empty Array or Object)\n */\nfunction allEmpty(arr: any[]) {\n  if (arr.length === 0) { return true; }\n  return arr.every(item => ifNotSet(item, null) === null);\n}\n\n/**\n * Extended version of widget options observable that contains information about mixed and empty values.\n */\ntype CommonOptions = modelUtil.SaveableObjObservable<any> & {\n  disabled(prop: string): ko.Computed<boolean>,\n  mixed(prop: string): ko.Computed<boolean>,\n  empty(prop: string): ko.Computed<boolean>,\n}\n\n/**\n * Extended version of widget options observable that contains information about mixed and empty styles, and supports\n * reverting to a previous value.\n */\ntype StyleOptions = modelUtil.SaveableObjObservable<any> & {\n  mixed(prop: string): ko.Computed<boolean>,\n  empty(prop: string): ko.Computed<boolean>,\n  revert(): void;\n}\n\n// This is helper that adds disabled computed to an ObjObservable, it follows\n// the same pattern as `prop` helper.\nfunction extendObservable(\n  obs: modelUtil.SaveableObjObservable<any>,\n  options: { [key: string]: (prop: string) => ko.PureComputed<boolean> }\n) {\n  const result = obs as any;\n  for(const key of Object.keys(options)) {\n    const cacheKey = `__${key}`;\n    result[cacheKey] = new Map();\n    result[key] = (prop: string) => {\n      if (!result[cacheKey].has(prop)) {\n        result[cacheKey].set(prop, options[key](prop));\n      }\n      return result[cacheKey].get(prop);\n    };\n  }\n\n  return result;\n}\n","import {ColumnRec, DocModel, IRowModel, refListRecords, refRecord, ViewSectionRec} from 'app/client/models/DocModel';\nimport {formatterForRec} from 'app/client/models/entities/ColumnRec';\nimport * as modelUtil from 'app/client/models/modelUtil';\nimport {removeRule, RuleOwner} from 'app/client/models/RuleOwner';\nimport { HeaderStyle, Style } from 'app/client/models/Styles';\nimport {ViewFieldConfig} from 'app/client/models/ViewFieldConfig';\nimport * as UserType from 'app/client/widgets/UserType';\nimport {DocumentSettings} from 'app/common/DocumentSettings';\nimport {BaseFormatter} from 'app/common/ValueFormatter';\nimport {createParser} from 'app/common/ValueParser';\nimport * as ko from 'knockout';\n\n// Represents a page entry in the tree of pages.\nexport interface ViewFieldRec extends IRowModel<\"_grist_Views_section_field\">, RuleOwner {\n  viewSection: ko.Computed<ViewSectionRec>;\n  widthDef: modelUtil.KoSaveableObservable<number>;\n\n  widthPx: ko.Computed<string>;\n  column: ko.Computed<ColumnRec>;\n  origCol: ko.Computed<ColumnRec>;\n  colId: ko.Computed<string>;\n  label: ko.Computed<string>;\n  description: modelUtil.KoSaveableObservable<string>;\n\n  // displayLabel displays label by default but switches to the more helpful colId whenever a\n  // formula field in the view is being edited.\n  displayLabel: modelUtil.KoSaveableObservable<string>;\n\n  // The field knows when we are editing a formula, so that all rows can reflect that.\n  editingFormula: ko.Computed<boolean>;\n\n  // CSS class to add to formula cells, incl. to show that we are editing field's formula.\n  formulaCssClass: ko.Computed<string|null>;\n\n  // The fields's display column\n  _displayColModel: ko.Computed<ColumnRec>;\n\n  // Whether field uses column's widgetOptions (true) or its own (false).\n  // During transform, use the transform column's options (which should be initialized to match\n  // field or column when the transform starts TODO).\n  useColOptions: ko.Computed<boolean>;\n\n  // Helper that returns the RowModel for either field or its column, depending on\n  // useColOptions. Field and Column have a few identical fields:\n  //    .widgetOptions()        // JSON string of options\n  //    .saveDisplayFormula()   // Method to save the display formula\n  //    .displayCol()           // Reference to an optional associated display column.\n  _fieldOrColumn: ko.Computed<ColumnRec|ViewFieldRec>;\n\n  // Display col ref to use for the field, defaulting to the plain column itself.\n  displayColRef: ko.Computed<number>;\n\n  visibleColRef: modelUtil.KoSaveableObservable<number>;\n\n  // The display column to use for the field, or the column itself when no displayCol is set.\n  displayColModel: ko.Computed<ColumnRec>;\n  visibleColModel: ko.Computed<ColumnRec>;\n\n  // The widgetOptions to read and write: either the column's or the field's own.\n  _widgetOptionsStr: modelUtil.KoSaveableObservable<string>;\n\n  // Observable for the object with the current options, either for the field or for the column,\n  // which takes into account the default options for column's type.\n  widgetOptionsJson: modelUtil.SaveableObjObservable<any>;\n\n\n  disableModify: ko.Computed<boolean>;\n  disableEditData: ko.Computed<boolean>;\n\n  // Whether lines should wrap in a cell.\n  wrap: modelUtil.KoSaveableObservable<boolean>;\n  widget: modelUtil.KoSaveableObservable<string|undefined>;\n  textColor: modelUtil.KoSaveableObservable<string|undefined>;\n  fillColor: modelUtil.KoSaveableObservable<string|undefined>;\n  fontBold: modelUtil.KoSaveableObservable<boolean|undefined>;\n  fontUnderline: modelUtil.KoSaveableObservable<boolean|undefined>;\n  fontItalic: modelUtil.KoSaveableObservable<boolean|undefined>;\n  fontStrikethrough: modelUtil.KoSaveableObservable<boolean|undefined>;\n  headerTextColor: modelUtil.KoSaveableObservable<string|undefined>;\n  headerFillColor: modelUtil.KoSaveableObservable<string|undefined>;\n  headerFontBold: modelUtil.KoSaveableObservable<boolean|undefined>;\n  headerFontUnderline: modelUtil.KoSaveableObservable<boolean|undefined>;\n  headerFontItalic: modelUtil.KoSaveableObservable<boolean|undefined>;\n  headerFontStrikethrough: modelUtil.KoSaveableObservable<boolean|undefined>;\n  // Helper computed to change style of a cell and headerStyle without saving it.\n  style: ko.PureComputed<Style>;\n  headerStyle: ko.PureComputed<HeaderStyle>;\n\n  config: ViewFieldConfig;\n\n  documentSettings: ko.PureComputed<DocumentSettings>;\n\n  // Helper for Reference/ReferenceList columns, which returns a formatter according\n  // to the visibleCol associated with field.\n  visibleColFormatter: ko.Computed<BaseFormatter>;\n\n  // A formatter for values of this column.\n  // The difference between visibleColFormatter and formatter is especially important for ReferenceLists:\n  // `visibleColFormatter` is for individual elements of a list, sometimes hypothetical\n  // (i.e. they aren't actually referenced but they exist in the visible column and are relevant to e.g. autocomplete)\n  // `formatter` formats actual cell values, e.g. a whole list from the display column.\n  formatter: ko.Computed<BaseFormatter>;\n\n  createValueParser(): (value: string) => any;\n\n  // Helper which adds/removes/updates field's displayCol to match the formula.\n  saveDisplayFormula(formula: string): Promise<void>|undefined;\n}\n\nexport function createViewFieldRec(this: ViewFieldRec, docModel: DocModel): void {\n  this.viewSection = refRecord(docModel.viewSections, this.parentId);\n  this.widthDef = modelUtil.fieldWithDefault(this.width, () => this.viewSection().defaultWidth());\n\n  this.widthPx = ko.pureComputed(() => this.widthDef() + 'px');\n  this.column = refRecord(docModel.columns, this.colRef);\n  this.origCol = ko.pureComputed(() => this.column().origCol());\n  this.colId = ko.pureComputed(() => this.column().colId());\n  this.label = ko.pureComputed(() => this.column().label());\n  this.description = modelUtil.savingComputed({\n    read: () => this.column().description(),\n    write: (setter, val) => setter(this.column().description, val)\n  });\n\n  // displayLabel displays label by default but switches to the more helpful colId whenever a\n  // formula field in the view is being edited.\n  this.displayLabel = modelUtil.savingComputed({\n    read: () => docModel.editingFormula() ? '$' + this.origCol().colId() : this.origCol().label(),\n    write: (setter, val) => setter(this.column().label, val)\n  });\n\n  // The field knows when we are editing a formula, so that all rows can reflect that.\n  const _editingFormula = ko.observable(false);\n  this.editingFormula = ko.pureComputed({\n    read: () => _editingFormula(),\n    write: val => {\n      // Whenever any view field changes its editingFormula status, let the docModel know.\n      docModel.editingFormula(val);\n      _editingFormula(val);\n    }\n  });\n\n  // CSS class to add to formula cells, incl. to show that we are editing this field's formula.\n  this.formulaCssClass = ko.pureComputed<string|null>(() => {\n    const col = this.column();\n\n    // If the current column is transforming, assign the CSS class \"transform_field\"\n    if (col.isTransforming()) {\n      if ( col.origCol().isFormula() && col.origCol().formula() !== \"\") {\n        return \"transform_field formula_field\";\n      }\n      return \"transform_field\";\n    }\n    // If the column is not transforming but a formula is being edited\n    else if (this.editingFormula()) {\n      return \"formula_field_edit\";\n    }\n    // If a formula exists and it is not empty\n    else if (col.isFormula() && col.formula() !== \"\") {\n      return \"formula_field\";\n    }\n    // If none of the above conditions are met, assign null\n    else {\n      return null;\n    }\n  });\n\n  // The fields's display column\n  this._displayColModel = refRecord(docModel.columns, this.displayCol);\n\n  // Helper which adds/removes/updates this field's displayCol to match the formula.\n  this.saveDisplayFormula = function(formula) {\n    if (formula !== (this._displayColModel().formula() || '')) {\n      return docModel.docData.sendAction([\"SetDisplayFormula\", this.column().table().tableId(),\n        this.getRowId(), null, formula]);\n    }\n  };\n\n  // Whether this field uses column's widgetOptions (true) or its own (false).\n  // During transform, use the transform column's options (which should be initialized to match\n  // field or column when the transform starts TODO).\n  this.useColOptions = this.autoDispose(ko.pureComputed(() => !this.widgetOptions() || this.column().isTransforming()));\n\n  // Helper that returns the RowModel for either this field or its column, depending on\n  // useColOptions. Field and Column have a few identical fields:\n  //    .widgetOptions()        // JSON string of options\n  //    .saveDisplayFormula()   // Method to save the display formula\n  //    .displayCol()           // Reference to an optional associated display column.\n  this._fieldOrColumn = this.autoDispose(ko.pureComputed(() => this.useColOptions() ? this.column() : this));\n\n  // Display col ref to use for the field, defaulting to the plain column itself.\n  this.displayColRef = this.autoDispose(ko.pureComputed(() => this._fieldOrColumn().displayCol() || this.colRef()));\n\n  this.visibleColRef = modelUtil.addSaveInterface(ko.pureComputed({\n      read: () => this._fieldOrColumn().visibleCol(),\n      write: (colRef) => this._fieldOrColumn().visibleCol(colRef),\n    }),\n    colRef => docModel.docData.bundleActions(null, async () => {\n      const col = docModel.columns.getRowModel(colRef);\n      await Promise.all([\n        this._fieldOrColumn().visibleCol.saveOnly(colRef),\n        this._fieldOrColumn().saveDisplayFormula(colRef ? `$${this.colId()}.${col.colId()}` : '')\n      ]);\n    }, {nestInActiveBundle: this.column.peek().isTransforming.peek()})\n  );\n\n  // The display column to use for the field, or the column itself when no displayCol is set.\n  this.displayColModel = refRecord(docModel.columns, this.displayColRef);\n  this.visibleColModel = refRecord(docModel.columns, this.visibleColRef);\n\n  // Helper for Reference/ReferenceList columns, which returns a formatter according to the visibleCol\n  // associated with this field. If no visible column available, return formatting for the field itself.\n  this.visibleColFormatter = ko.pureComputed(() => formatterForRec(this, this.column(), docModel, 'vcol'));\n\n  this.formatter = ko.pureComputed(() => formatterForRec(this, this.column(), docModel, 'full'));\n\n  this.createValueParser = function() {\n    const fieldRef = this.useColOptions.peek() ? undefined : this.id.peek();\n    const parser = createParser(docModel.docData, this.colRef.peek(), fieldRef);\n    return parser.cleanParse.bind(parser);\n  };\n\n  // The widgetOptions to read and write: either the column's or the field's own.\n  this._widgetOptionsStr = this.autoDispose(modelUtil.savingComputed({\n    read: () => this._fieldOrColumn().widgetOptions(),\n    write: (setter, val) => setter(this._fieldOrColumn().widgetOptions, val)\n  }));\n\n  // Observable for the object with the current options, either for the field or for the column,\n  // which takes into account the default options for this column's type.\n  this.widgetOptionsJson = this.autoDispose(modelUtil.jsonObservable(this._widgetOptionsStr,\n    (opts: any) => UserType.mergeOptions(opts || {}, this.column().pureType())));\n\n  // When user has yet to specify a desired wrapping state, we use different defaults for\n  // GridView (no wrap) and DetailView (wrap).\n  this.wrap = this.autoDispose(modelUtil.fieldWithDefault(\n    this.widgetOptionsJson.prop('wrap'),\n    () => this.viewSection().parentKey() !== 'record'\n  ));\n  this.widget = this.widgetOptionsJson.prop('widget');\n  this.textColor = this.widgetOptionsJson.prop('textColor');\n  this.fillColor = this.widgetOptionsJson.prop('fillColor');\n  this.fontBold = this.widgetOptionsJson.prop('fontBold');\n  this.fontUnderline = this.widgetOptionsJson.prop('fontUnderline');\n  this.fontItalic = this.widgetOptionsJson.prop('fontItalic');\n  this.fontStrikethrough = this.widgetOptionsJson.prop('fontStrikethrough');\n  this.headerTextColor = this.widgetOptionsJson.prop('headerTextColor');\n  this.headerFillColor = this.widgetOptionsJson.prop('headerFillColor');\n  this.headerFontBold = this.widgetOptionsJson.prop('headerFontBold');\n  this.headerFontUnderline = this.widgetOptionsJson.prop('headerFontUnderline');\n  this.headerFontItalic = this.widgetOptionsJson.prop('headerFontItalic');\n  this.headerFontStrikethrough = this.widgetOptionsJson.prop('headerFontStrikethrough');\n\n  this.documentSettings = ko.pureComputed(() => docModel.docInfoRow.documentSettingsJson());\n  this.style = ko.pureComputed({\n    read: () => ({\n      textColor: this.textColor(),\n      fillColor: this.fillColor(),\n      fontBold: this.fontBold(),\n      fontUnderline: this.fontUnderline(),\n      fontItalic: this.fontItalic(),\n      fontStrikethrough: this.fontStrikethrough(),\n    }) as Style,\n    write: (style: Style) => {\n      this.widgetOptionsJson.update(style);\n    },\n  });\n  this.headerStyle = ko.pureComputed({\n    read: () => ({\n      headerTextColor: this.headerTextColor(),\n      headerFillColor: this.headerFillColor(),\n      headerFontBold: this.headerFontBold(),\n      headerFontUnderline: this.headerFontUnderline(),\n      headerFontItalic: this.headerFontItalic(),\n      headerFontStrikethrough: this.headerFontStrikethrough(),\n    }) as HeaderStyle,\n    write: (headerStyle: HeaderStyle) => {\n      this.widgetOptionsJson.update(headerStyle);\n    },\n  });\n\n  this.tableId = ko.pureComputed(() => this.column().table().tableId());\n  this.rulesList = ko.pureComputed(() => this._fieldOrColumn().rules());\n  this.rulesCols = refListRecords(docModel.columns, ko.pureComputed(() => this._fieldOrColumn().rules()));\n  this.rulesColsIds = ko.pureComputed(() => this.rulesCols().map(c => c.colId()));\n  this.rulesStyles = modelUtil.fieldWithDefault(\n    this.widgetOptionsJson.prop(\"rulesOptions\") as modelUtil.KoSaveableObservable<Style[]>,\n    []);\n  this.hasRules = ko.pureComputed(() => this.rulesCols().length > 0);\n\n  // Helper method to add an empty rule (either initial or additional one).\n  // Style options are added to widget options directly and can be briefly out of sync,\n  // which is taken into account during rendering.\n  this.addEmptyRule = async () => {\n    const useCol = this.useColOptions.peek();\n    const action = [\n      'AddEmptyRule',\n      this.column.peek().table.peek().tableId.peek(),\n      useCol ? 0 : this.id.peek(), // field_ref\n      useCol ? this.column.peek().id.peek() : 0, // col_ref\n    ];\n    await docModel.docData.sendAction(action, `Update rules for ${this.colId.peek()}`);\n  };\n\n  this.removeRule = (index: number) => removeRule(docModel, this, index);\n  // Externalize widgetOptions configuration, to support changing those options\n  // for multiple fields at once.\n  this.config = new ViewFieldConfig(this, docModel);\n\n  this.disableModify = this.autoDispose(ko.pureComputed(() => this.column().disableModify()));\n  this.disableEditData = this.autoDispose(ko.pureComputed(() => this.column().disableEditData()));\n}\n","import {BoxSpec} from 'app/client/components/Layout';\nimport {KoArray} from 'app/client/lib/koArray';\nimport * as koUtil from 'app/client/lib/koUtil';\nimport {DocModel, IRowModel, recordSet, refRecord} from 'app/client/models/DocModel';\nimport {TabBarRec, ViewSectionRec} from 'app/client/models/DocModel';\nimport * as modelUtil from 'app/client/models/modelUtil';\nimport * as ko from 'knockout';\n\n// Represents a view (now also referred to as a \"page\") containing one or more view sections.\nexport interface ViewRec extends IRowModel<\"_grist_Views\"> {\n  viewSections: ko.Computed<KoArray<ViewSectionRec>>;\n  tabBarItem: ko.Computed<KoArray<TabBarRec>>;\n\n  layoutSpecObj: modelUtil.SaveableObjObservable<BoxSpec>;\n\n  // An observable for the ref of the section last selected by the user.\n  activeSectionId: ko.Computed<number>;\n\n  // This is active collapsed section id. Set when the widget is clicked.\n  activeCollapsedSectionId: ko.Observable<number>;\n\n  // Saved collapsed sections.\n  collapsedSections: ko.Computed<number[]>;\n\n  // Active collapsed sections, changed by the user, can be different from the\n  // saved collapsed sections, for a brief moment (editor is buffering changes).\n  activeCollapsedSections: ko.Observable<number[]>;\n\n  activeSection: ko.Computed<ViewSectionRec>;\n\n  // If the active section is removed, set the next active section to be the default.\n  _isActiveSectionGone: ko.Computed<boolean>;\n}\n\nexport function createViewRec(this: ViewRec, docModel: DocModel): void {\n  this.viewSections = recordSet(this, docModel.viewSections, 'parentId');\n  this.tabBarItem = recordSet(this, docModel.tabBar, 'viewRef');\n\n  this.layoutSpecObj = modelUtil.jsonObservable(this.layoutSpec);\n\n  this.activeCollapsedSectionId = ko.observable(0);\n\n  this.collapsedSections = this.autoDispose(ko.pureComputed(() => {\n    const allSections = new Set(this.viewSections().all().map(x => x.id()));\n    const collapsed: number[] = (this.layoutSpecObj().collapsed || []).map(x => x.leaf as number);\n    return collapsed.filter(x => allSections.has(x));\n  }));\n  this.activeCollapsedSections = ko.observable(this.collapsedSections.peek());\n\n  // An observable for the ref of the section last selected by the user.\n  this.activeSectionId = koUtil.observableWithDefault(ko.observable(), () => {\n    // The default function which is used when the conditional case is true.\n    // Read may occur for recently disposed sections, must check condition first.\n    // `!this.getRowId()` implies that this is an empty (non-existent) view record\n    // which happens when viewing the raw data tables, in which case the default is no active view section.\n\n    if (this.isDisposed() || !this.getRowId()) { return 0; }\n    const all = this.viewSections().all();\n    const collapsed = new Set(this.activeCollapsedSections());\n    const visible = all.filter(x => !collapsed.has(x.id()));\n\n    // Default to the first leaf from layoutSpec (which corresponds to the top-left section), or\n    // fall back to the first item in the list if anything goes wrong (previous behavior).\n    const firstLeaf = getFirstLeaf(this.layoutSpecObj.peek());\n    const result = visible.find(s => s.id() === firstLeaf) ? firstLeaf as number :\n      (visible[0]?.id() || 0);\n    return result;\n  });\n\n  this.activeSection = refRecord(docModel.viewSections, this.activeSectionId);\n\n  // If the active section is removed, set the next active section to be the default.\n  this._isActiveSectionGone = this.autoDispose(ko.computed(() => this.activeSection()._isDeleted()));\n  this.autoDispose(this._isActiveSectionGone.subscribe(gone => {\n    if (gone) {\n      this.activeSectionId(0);\n    }\n  }));\n}\n\nfunction getFirstLeaf(layoutSpec: BoxSpec|undefined): BoxSpec['leaf'] {\n  while (layoutSpec?.children?.length) {\n    layoutSpec = layoutSpec.children[0];\n  }\n  return layoutSpec?.leaf;\n}\n","import {DataRowModel} from \"app/client/models/DataRowModel\";\nimport DataTableModel from \"app/client/models/DataTableModel\";\nimport {DocModel} from 'app/client/models/DocModel';\nimport {ColumnRec} from \"app/client/models/entities/ColumnRec\";\nimport {TableRec} from \"app/client/models/entities/TableRec\";\nimport {ViewSectionRec} from \"app/client/models/entities/ViewSectionRec\";\nimport {UIRowId} from \"app/common/TableData\";\nimport {LinkConfig} from \"app/client/ui/selectBy\";\nimport {FilterColValues, QueryOperation} from \"app/common/ActiveDocAPI\";\nimport {isList, isListType, isRefListType} from \"app/common/gristTypes\";\nimport * as gutil from \"app/common/gutil\";\nimport {encodeObject} from 'app/plugin/objtypes';\nimport {Disposable, toKo} from \"grainjs\";\nimport * as  ko from \"knockout\";\nimport identity = require('lodash/identity');\nimport mapValues = require('lodash/mapValues');\nimport pickBy = require('lodash/pickBy');\n\n\n/**\n * Returns if the first table is a summary of the second. If both are summary tables, returns true\n * if the second table is a more detailed summary, i.e. has additional group-by columns.\n * @param summary: TableRec for the table to check for being the summary table.\n * @param detail: TableRec for the table to check for being the detailed version.\n * @returns {Boolean} Whether the first argument is a summarized version of the second.\n */\nfunction isSummaryOf(summary: TableRec, detail: TableRec): boolean {\n  const summarySource = summary.summarySourceTable();\n  if (summarySource === detail.getRowId()) { return true; }\n  const detailSource = detail.summarySourceTable();\n  return (Boolean(summarySource) &&\n    detailSource === summarySource &&\n    summary.getRowId() !== detail.getRowId() &&\n    gutil.isSubset(summary.summarySourceColRefs(), detail.summarySourceColRefs()));\n}\n\n/**\n * Maintains state useful for linking sections, i.e. auto-filtering and auto-scrolling.\n * Exposes .filterColValues, which is either null or a computed evaluating to a filtering object;\n * and .cursorPos, which is either null or a computed that evaluates to a cursor position.\n * LinkingState must be created with a valid srcSection and tgtSection.\n *\n * There are several modes of linking:\n * (1) If tgtColId is set, tgtSection will be filtered to show rows whose values of target column\n *     are equal to the value of source column in srcSection at the cursor. With byAllShown set, all\n *     values in srcSection are used (rather than only the value in the cursor).\n * (2) If srcSection is a summary of tgtSection, then tgtSection is filtered to show only those\n *     rows that match the row at the cursor of srcSection.\n * (3) If tgtColId is null, tgtSection is scrolled to the rowId determined by the value of the\n *     source column at the cursor in srcSection.\n *\n * @param gristDoc: GristDoc instance, for getting the relevant TableData objects.\n * @param srcSection: RowModel for the section that drives the target section.\n * @param srcColId: Name of the column that drives the target section, or null to use rowId.\n * @param tgtSection: RowModel for the section that's being driven.\n * @param tgtColId: Name of the reference column to auto-filter by, or null to auto-scroll.\n * @param byAllShown: For auto-filter, filter by all values in srcSection rather than only the\n *    value at the cursor. The user can use column filters on srcSection to control what's shown\n *    in the linked tgtSection.\n */\nexport class LinkingState extends Disposable {\n  // If linking affects target section's cursor, this will be a computed for the cursor rowId.\n  public readonly cursorPos?: ko.Computed<UIRowId>;\n\n  // If linking affects filtering, this is a computed for the current filtering state, as a\n  // {[colId]: colValues} mapping, with a dependency on srcSection.activeRowId()\n  public readonly filterColValues?: ko.Computed<FilterColValues>;\n\n  // Get default values for a new record so that it continues to satisfy the current linking filters\n  public readonly getDefaultColValues: () => any;\n\n  private _srcSection: ViewSectionRec;\n  private _srcTableModel: DataTableModel;\n  private _srcCol: ColumnRec;\n  private _srcColId: string | undefined;\n\n  constructor(docModel: DocModel, linkConfig: LinkConfig) {\n    super();\n    const {srcSection, srcCol, srcColId, tgtSection, tgtCol, tgtColId} = linkConfig;\n    this._srcSection = srcSection;\n    this._srcCol = srcCol;\n    this._srcColId = srcColId;\n    this._srcTableModel = docModel.dataTables[srcSection.table().tableId()];\n    const srcTableData = this._srcTableModel.tableData;\n\n    if (tgtColId) {\n      const operation = isRefListType(tgtCol.type()) ? 'intersects' : 'in';\n      if (srcSection.parentKey() === 'custom') {\n        this.filterColValues = this._srcCustomFilter(tgtColId, operation);\n      } else if (srcColId) {\n        this.filterColValues = this._srcCellFilter(tgtColId, operation);\n      } else {\n        this.filterColValues = this._simpleFilter(tgtColId, operation, (rowId => [rowId]));\n      }\n    } else if (srcColId && isRefListType(srcCol.type())) {\n      this.filterColValues = this._srcCellFilter('id', 'in');\n    } else if (!srcColId && isSummaryOf(srcSection.table(), tgtSection.table())) {\n      // We filter summary tables when a summary section is linked to a more detailed one without\n      // specifying src or target column. The filtering is on the shared group-by column (i.e. all\n      // those in the srcSection).\n      // TODO: This approach doesn't help cursor-linking (the other direction). If we have the\n      // inverse of summary-table's 'group' column, we could implement both, and more efficiently.\n      const isDirectSummary = srcSection.table().summarySourceTable() === tgtSection.table().getRowId();\n      const _filterColValues = ko.observable<FilterColValues>();\n      this.filterColValues = this.autoDispose(ko.computed(() => _filterColValues()));\n\n      // source data table could still be loading (this could happen after changing the group by\n      // columns of a linked summary table for instance), hence the below listener.\n      this.autoDispose(srcTableData.dataLoadedEmitter.addListener(_update));\n\n      _update();\n      function _update() {\n        const result: FilterColValues = {filters: {}, operations: {}};\n        if (srcSection.isDisposed()) {\n          return result;\n        }\n        const srcRowId = srcSection.activeRowId();\n        for (const c of srcSection.table().groupByColumns()) {\n          const colId = c.colId();\n          const srcValue = srcTableData.getValue(srcRowId as number, colId);\n          result.filters[colId] = [srcValue];\n          result.operations[colId] = 'in';\n          if (isDirectSummary && isListType(c.summarySource().type())) {\n            // If the source groupby column is a ChoiceList or RefList, then null or '' in the summary table\n            // should match against an empty list in the source table.\n            result.operations[colId] = srcValue ? 'intersects' : 'empty';\n          }\n        }\n        _filterColValues(result);\n      }\n    } else if (srcSection.parentKey() === 'custom') {\n      this.filterColValues = this._srcCustomFilter('id', 'in');\n    } else {\n      const srcValueFunc = srcColId ? this._makeSrcCellGetter() : identity;\n      if (srcValueFunc) {\n        this.cursorPos = this.autoDispose(ko.computed(() =>\n          srcValueFunc(srcSection.activeRowId()) as UIRowId\n        ));\n      }\n\n      if (!srcColId) {\n        // This is a same-record link: copy getDefaultColValues from the source if possible\n        const getDefaultColValues = srcSection.linkingState()?.getDefaultColValues;\n        if (getDefaultColValues) {\n          this.getDefaultColValues = getDefaultColValues;\n        }\n      }\n    }\n\n    if (!this.getDefaultColValues) {\n      this.getDefaultColValues = () => {\n        if (!this.filterColValues) {\n          return {};\n        }\n        const {filters, operations} = this.filterColValues.peek();\n        return mapValues(\n          pickBy(filters, (value: any[], key: string) => value.length > 0 && key !== \"id\"),\n          (value, key) => operations[key] === \"intersects\" ? encodeObject(value) : value[0]\n        );\n      };\n    }\n  }\n\n  /**\n   * Returns a boolean indicating whether editing should be disabled in the destination section.\n   */\n  public disableEditing(): boolean {\n    return Boolean(this.filterColValues) && this._srcSection.activeRowId() === 'new';\n  }\n\n  // Value for this.filterColValues filtering based on a single column\n  private _simpleFilter(\n    colId: string, operation: QueryOperation, valuesFunc: (rowId: UIRowId|null) => any[]\n  ): ko.Computed<FilterColValues> {\n    return this.autoDispose(ko.computed(() => {\n      const srcRowId = this._srcSection.activeRowId();\n      if (srcRowId === null) {\n        console.warn(\"_simpleFilter activeRowId is null\");\n        return { filters: {}, operations: {}};\n      }\n      const values = valuesFunc(srcRowId);\n      return {filters: {[colId]: values}, operations: {[colId]: operation}} as FilterColValues;\n    }));\n  }\n\n  // Value for this.filterColValues based on the value in srcCol at the selected row\n  private _srcCellFilter(colId: string, operation: QueryOperation): ko.Computed<FilterColValues> | undefined {\n    const srcCellGetter = this._makeSrcCellGetter();\n    if (srcCellGetter) {\n      const isSrcRefList = isRefListType(this._srcCol.type());\n      return this._simpleFilter(colId, operation, rowId => {\n        const value = srcCellGetter(rowId);\n        if (isSrcRefList) {\n          if (isList(value)) {\n            return value.slice(1);\n          } else {\n            // The cell value is invalid, so the filter should be empty\n            return [];\n          }\n        } else {\n          return [value];\n        }\n      });\n    }\n  }\n\n  // Value for this.filterColValues based on the values in srcSection.selectedRows\n  private _srcCustomFilter(colId: string, operation: QueryOperation): ko.Computed<FilterColValues> | undefined {\n    return this.autoDispose(ko.computed(() => {\n      const values = toKo(ko, this._srcSection.selectedRows)();\n      return {filters: {[colId]: values}, operations: {[colId]: operation}} as FilterColValues;\n    }));\n  }\n\n  // Returns a function which returns the value of the cell\n  // in srcCol in the selected record of srcSection.\n  // Uses a row model to create a dependency on the cell's value,\n  // so changes to the cell value will notify observers\n  private _makeSrcCellGetter() {\n    const srcRowModel = this.autoDispose(this._srcTableModel.createFloatingRowModel()) as DataRowModel;\n    const srcCellObs = srcRowModel.cells[this._srcColId!];\n    // If no srcCellObs, linking is broken; do nothing. This shouldn't happen, but may happen\n    // transiently while the separate linking-related observables get updated.\n    if (!srcCellObs) {\n      return null;\n    }\n    return (rowId: UIRowId | null) => {\n      srcRowModel.assign(rowId);\n      if (rowId === 'new') {\n        return 'new';\n      }\n      return srcCellObs();\n    };\n  }\n}\n","import BaseView from 'app/client/components/BaseView';\nimport {CursorPos} from 'app/client/components/Cursor';\nimport {LinkingState} from 'app/client/components/LinkingState';\nimport {KoArray} from 'app/client/lib/koArray';\nimport {\n  ColumnRec,\n  DocModel,\n  FilterRec,\n  IRowModel,\n  recordSet,\n  refListRecords,\n  refRecord,\n  TableRec,\n  ViewFieldRec,\n  ViewRec\n} from 'app/client/models/DocModel';\nimport * as modelUtil from 'app/client/models/modelUtil';\nimport {LinkConfig} from 'app/client/ui/selectBy';\nimport {getWidgetTypes} from 'app/client/ui/widgetTypes';\nimport {FilterColValues} from \"app/common/ActiveDocAPI\";\nimport {AccessLevel, ICustomWidget} from 'app/common/CustomWidget';\nimport {UserAction} from 'app/common/DocActions';\nimport {arrayRepeat} from 'app/common/gutil';\nimport {Sort} from 'app/common/SortSpec';\nimport {UIRowId} from 'app/common/TableData';\nimport {ColumnsToMap, WidgetColumnMap} from 'app/plugin/CustomSectionAPI';\nimport {ColumnToMapImpl} from 'app/client/models/ColumnToMap';\nimport {BEHAVIOR} from 'app/client/models/entities/ColumnRec';\nimport {removeRule, RuleOwner} from 'app/client/models/RuleOwner';\nimport {Computed, Holder, Observable} from 'grainjs';\nimport * as ko from 'knockout';\nimport defaults = require('lodash/defaults');\n\n// Represents a section of user views, now also known as a \"page widget\" (e.g. a view may contain\n// a grid section and a chart section).\nexport interface ViewSectionRec extends IRowModel<\"_grist_Views_section\">, RuleOwner {\n  viewFields: ko.Computed<KoArray<ViewFieldRec>>;\n\n  // List of sections linked from this one, i.e. for whom this one is the selector or link source.\n  linkedSections: ko.Computed<KoArray<ViewSectionRec>>;\n\n  // All table columns associated with this view section, excluding hidden helper columns.\n  columns: ko.Computed<ColumnRec[]>;\n\n  optionsObj: modelUtil.SaveableObjObservable<any>;\n\n  customDef: CustomViewSectionDef;\n\n  themeDef: modelUtil.KoSaveableObservable<string>;\n  chartTypeDef: modelUtil.KoSaveableObservable<string>;\n  view: ko.Computed<ViewRec>;\n\n  table: ko.Computed<TableRec>;\n\n  // Widget title with a default value\n  titleDef: modelUtil.KoSaveableObservable<string>;\n  // Default widget title (the one that is used in titleDef).\n  defaultWidgetTitle: ko.PureComputed<string>;\n\n  description: modelUtil.KoSaveableObservable<string>;\n\n  // true if this record is its table's rawViewSection, i.e. a 'raw data view'\n  // in which case the UI prevents various things like hiding columns or changing the widget type.\n  isRaw: ko.Computed<boolean>;\n  isVirtual: ko.Computed<boolean>;\n  isCollapsed: ko.Computed<boolean>;\n\n  borderWidthPx: ko.Computed<string>;\n\n  layoutSpecObj: modelUtil.ObjObservable<any>;\n\n  _savedFilters: ko.Computed<KoArray<FilterRec>>;\n\n  /**\n   * Unsaved client-side filters, keyed by original col ref. Currently only wiped when unsaved filters\n   * are applied or reverted.\n   *\n   * If saved filters exist for a col ref, unsaved filters take priority and are applied instead. This\n   * prevents disruption when changes are made to saved filters for the same field/column, but there\n   * may be some cases where we'd want to reset _unsavedFilters on some indirect change to the document.\n   *\n   * NOTE: See `filters`, where `_unsavedFilters` is merged with `savedFilters`.\n   */\n  _unsavedFilters: Map<number, Partial<Filter>>;\n\n  /**\n   * Filter information for all fields/section in the section.\n   *\n   * Re-computed on changes to `savedFilters`, as well as any changes to `viewFields` or `columns`. Any\n   * unsaved filters saved in `_unsavedFilters` are applied on computation, taking priority over saved\n   * filters for the same field/column, if any exist.\n   */\n  filters: ko.Computed<FilterInfo[]>;\n\n  // Subset of `filters` containing non-blank active filters.\n  activeFilters: Computed<FilterInfo[]>;\n\n  // Subset of `activeFilters` that are pinned.\n  pinnedActiveFilters: Computed<FilterInfo[]>;\n\n  // Helper metadata item which indicates whether any of the section's fields/columns have unsaved\n  // changes to their filters. (True indicates unsaved changes)\n  filterSpecChanged: Computed<boolean>;\n\n  // Set to true when a second pinned filter is added, to trigger a behavioral prompt. Note that\n  // the popup is only shown once, even if this observable is set to true again in the future.\n  showNestedFilteringPopup: Observable<boolean>;\n\n  // Customizable version of the JSON-stringified sort spec. It may diverge from the saved one.\n  activeSortJson: modelUtil.CustomComputed<string>;\n\n  // is an array (parsed from JSON) of colRefs (i.e. rowIds into the columns table), with a\n  // twist: a rowId may be positive or negative, for ascending or descending respectively.\n  activeSortSpec: modelUtil.ObjObservable<Sort.SortSpec>;\n\n  // Modified sort spec to take into account any active display columns.\n  activeDisplaySortSpec: ko.Computed<Sort.SortSpec>;\n\n  // Evaluates to an array of column models, which are not referenced by anything in viewFields.\n  hiddenColumns: ko.Computed<ColumnRec[]>;\n\n  hasFocus: ko.Computed<boolean>;\n\n  // Section-linking affects table if linkSrcSection is set. The controller value of the\n  // link is the value of srcCol at activeRowId of linkSrcSection, or activeRowId itself when\n  // srcCol is unset. If targetCol is set, we filter for all rows whose targetCol is equal to\n  // the controller value. Otherwise, the controller value determines the rowId of the cursor.\n\n  /**\n   * Section selected in the `Select By` dropdown. Used for filtering this section.\n   */\n  linkSrcSection: ko.Computed<ViewSectionRec>;\n  /**\n   * Column selected in the `Select By` dropdown in the remote section. It points to a column in remote section\n   * that contains a reference to this table (or common table - because we can be linked by having the same reference\n   * to some other section).\n   * Used for filtering this section. Can be empty as user can just link by section.\n   * Watch out, it is not cleared, so it is only valid when we have linkSrcSection.\n   * In UI it is shown as Target Section (dot) Target Column.\n   */\n  linkSrcCol: ko.Computed<ColumnRec>;\n  /**\n   * In case we have multiple reference columns, that are shown as\n   *   Target Section -> My Column or\n   *   Target Section . Target Column -> My Column\n   * store the reference to the column (my column) to use.\n   */\n  linkTargetCol: ko.Computed<ColumnRec>;\n\n  // Linking state maintains .filterFunc and .cursorPos observables which we use for\n  // auto-scrolling and filtering.\n  linkingState: ko.Computed<LinkingState | null>;\n  _linkingState: Holder<LinkingState>; // Holder for the current value of linkingState\n\n  linkingFilter: ko.Computed<FilterColValues>;\n\n  activeRowId: ko.Observable<UIRowId | null>;     // May be null when there are no rows.\n\n  // If the view instance for section is instantiated, it will be accessible here.\n  viewInstance: ko.Observable<BaseView | null>;\n\n  // Describes the most recent cursor position in the section. Only rowId and fieldIndex are used.\n  lastCursorPos: CursorPos;\n\n  // Describes the most recent scroll position.\n  lastScrollPos: {\n    rowIndex: number;   // Used for scrolly sections. Indicates the index of the first visible row.\n    offset: number;     // Pixel distance past the top of row indicated by rowIndex.\n    scrollLeft: number; // Used for grid sections. Indicates the scrollLeft value of the scroll pane.\n  };\n\n  disableAddRemoveRows: ko.Computed<boolean>;\n\n  isSorted: ko.Computed<boolean>;\n  disableDragRows: ko.Computed<boolean>;\n  // Number of frozen columns\n  rawNumFrozen: modelUtil.CustomComputed<number>;\n  // Number for frozen columns to display.\n  // We won't freeze all the columns on a grid, it will leave at least 1 column unfrozen.\n  numFrozen: ko.Computed<number>;\n  activeCustomOptions: modelUtil.CustomComputed<any>;\n\n  // Temporary fields used to communicate with the Custom Widget. There are set through the Widget API.\n\n  // Temporary variable holding columns mapping requested by the widget (set by API).\n  columnsToMap: ko.Observable<ColumnsToMap|null>;\n  // Temporary variable holding columns mapped by the user;\n  mappedColumns: ko.Computed<WidgetColumnMap|null>;\n  // Temporary variable holding flag that describes if the widget supports custom options (set by API).\n  hasCustomOptions: ko.Observable<boolean>;\n  // Temporary variable holding widget desired access (changed either from manifest or via API).\n  desiredAccessLevel: ko.Observable<AccessLevel|null>;\n\n  // Show widget as linking source. Used by custom widget.\n  allowSelectBy: Observable<boolean>;\n\n  // List of selected rows\n  selectedRows: Observable<number[]>;\n\n  editingFormula: ko.Computed<boolean>;\n\n  // Selected fields (columns) for the section.\n  selectedFields: ko.Observable<ViewFieldRec[]>;\n\n  // Some computed observables for multi-select, used in the creator panel, by more than one widgets.\n\n  // Common column behavior or mixed.\n  columnsBehavior: ko.PureComputed<BEHAVIOR|'mixed'>;\n  // If all selected columns are empty or formula column.\n  columnsAllIsFormula: ko.PureComputed<boolean>;\n  // Common type of selected columns or mixed.\n  columnsType: ko.PureComputed<string|'mixed'>;\n\n  // Save all filters of fields/columns in the section.\n  saveFilters(): Promise<void>;\n\n  // Revert all filters of fields/columns in the section.\n  revertFilters(): void;\n\n  // Set `filter` for the field or column identified by `colRef`.\n  setFilter(colRef: number, filter: Partial<Filter>): void;\n\n  // Revert the filter of the field or column identified by `colRef`.\n  revertFilter(colRef: number): void;\n\n  // Saves custom definition (bundles change)\n  saveCustomDef(): Promise<void>;\n}\n\nexport type WidgetMappedColumn = number|number[]|null;\nexport type WidgetColumnMapping = Record<string, WidgetMappedColumn>\n\nexport interface CustomViewSectionDef {\n  /**\n   * The mode.\n   */\n  mode: modelUtil.KoSaveableObservable<\"url\"|\"plugin\">;\n  /**\n   * The url.\n   */\n  url: modelUtil.KoSaveableObservable<string|null>;\n   /**\n   * Custom widget information.\n   */\n  widgetDef: modelUtil.KoSaveableObservable<ICustomWidget|null>;\n   /**\n   * Custom widget options.\n   */\n  widgetOptions: modelUtil.KoSaveableObservable<Record<string, any>|null>;\n  /**\n   * Custom widget interaction options.\n   */\n  columnsMapping: modelUtil.KoSaveableObservable<WidgetColumnMapping|null>;\n  /**\n   * Access granted to url.\n   */\n  access: modelUtil.KoSaveableObservable<string>;\n  /**\n   * The plugin id.\n   */\n  pluginId: modelUtil.KoSaveableObservable<string>;\n  /**\n   * The section id.\n   */\n  sectionId: modelUtil.KoSaveableObservable<string>;\n}\n\n/** Information about filters for a field or hidden column. */\nexport interface FilterInfo {\n  /** The section that's being filtered. */\n  viewSection: ViewSectionRec;\n  /** The field or column that's being filtered. (Field if column is visible.) */\n  fieldOrColumn: ViewFieldRec|ColumnRec;\n  /** Filter that applies to this field/column, if any. */\n  filter: modelUtil.CustomComputed<string>;\n  /** Whether this filter is pinned to the filter bar. */\n  pinned: modelUtil.CustomComputed<boolean>;\n  /** True if `filter` has a non-blank value. */\n  isFiltered: ko.PureComputed<boolean>;\n  /** True if `pinned` is true. */\n  isPinned: ko.PureComputed<boolean>;\n}\n\nexport interface Filter {\n  filter: string;\n  pinned: boolean;\n}\n\nexport function createViewSectionRec(this: ViewSectionRec, docModel: DocModel): void {\n  this.viewFields = recordSet(this, docModel.viewFields, 'parentId', {sortBy: 'parentPos'});\n  this.linkedSections = recordSet(this, docModel.viewSections, 'linkSrcSectionRef');\n\n  // All table columns associated with this view section, excluding any hidden helper columns.\n  this.columns = this.autoDispose(ko.pureComputed(() => this.table().columns().all().filter(c => !c.isHiddenCol())));\n  this.editingFormula = ko.pureComputed({\n    read: () => docModel.editingFormula(),\n    write: val => {\n      docModel.editingFormula(val);\n    }\n  });\n  const defaultOptions = {\n    verticalGridlines: true,\n    horizontalGridlines: true,\n    zebraStripes: false,\n    customView: '',\n    numFrozen: 0\n  };\n  this.optionsObj = modelUtil.jsonObservable(this.options,\n    (obj: any) => defaults(obj || {}, defaultOptions));\n\n  const customViewDefaults = {\n    mode: 'url',\n    url: null,\n    widgetDef: null,\n    access: '',\n    pluginId: '',\n    sectionId: ''\n  };\n  const customDefObj = modelUtil.jsonObservable(this.optionsObj.prop('customView'),\n    (obj: any) => defaults(obj || {}, customViewDefaults));\n\n  this.customDef = {\n    mode: customDefObj.prop('mode'),\n    url: customDefObj.prop('url'),\n    widgetDef: customDefObj.prop('widgetDef'),\n    widgetOptions: customDefObj.prop('widgetOptions'),\n    columnsMapping: customDefObj.prop('columnsMapping'),\n    access: customDefObj.prop('access'),\n    pluginId: customDefObj.prop('pluginId'),\n    sectionId: customDefObj.prop('sectionId')\n  };\n\n  this.selectedFields = ko.observable<any>([]);\n\n  // During schema change, some columns/fields might be disposed beyond our control.\n  const selectedColumns = this.autoDispose(ko.pureComputed(() => this.selectedFields()\n    .filter(f => !f.isDisposed())\n    .map(f => f.column())\n    .filter(c => !c.isDisposed())));\n  this.columnsBehavior = ko.pureComputed(() => {\n    const list = new Set(selectedColumns().map(c => c.behavior()));\n    return list.size === 1 ? list.values().next().value : 'mixed';\n  });\n  this.columnsType = ko.pureComputed(() => {\n    const list = new Set(selectedColumns().map(c => c.type()));\n    return list.size === 1 ? list.values().next().value : 'mixed';\n  });\n  this.columnsAllIsFormula = ko.pureComputed(() => {\n    return selectedColumns().every(c => c.isFormula());\n  });\n\n  this.activeCustomOptions = modelUtil.customValue(this.customDef.widgetOptions);\n\n  this.saveCustomDef = async () => {\n    await customDefObj.save();\n    this.activeCustomOptions.revert();\n  };\n\n  this.themeDef = modelUtil.fieldWithDefault(this.theme, 'form');\n  this.chartTypeDef = modelUtil.fieldWithDefault(this.chartType, 'bar');\n  this.view = refRecord(docModel.views, this.parentId);\n\n  this.table = refRecord(docModel.tables, this.tableRef);\n\n\n  // The user-friendly name of the table, which is the same as tableId for non-summary tables,\n  // and is 'tableId[groupByCols...]' for summary tables.\n  // Consist of 3 parts\n  // - TableId (or primary table id for summary tables) capitalized\n  // - Grouping description (table record contains this for summary tables)\n  // - Widget type description (if not grid)\n  // All concatenated separated by space.\n  this.defaultWidgetTitle = this.autoDispose(ko.pureComputed(() => {\n    const widgetTypeDesc = this.parentKey() !== 'record' ? `${getWidgetTypes(this.parentKey.peek() as any).label}` : '';\n    const table = this.table();\n    return [\n      table.tableNameDef()?.toUpperCase(), // Due to ACL this can be null.\n      table.groupDesc(),\n      widgetTypeDesc\n    ].filter(part => Boolean(part?.trim())).join(' ');\n  }));\n  // Widget title.\n  this.titleDef = modelUtil.fieldWithDefault(this.title, this.defaultWidgetTitle);\n\n  // Widget description\n  this.description = modelUtil.fieldWithDefault(this.description, this.description());\n\n  // true if this record is its table's rawViewSection, i.e. a 'raw data view'\n  // in which case the UI prevents various things like hiding columns or changing the widget type.\n  this.isRaw = this.autoDispose(ko.pureComputed(() => this.table().rawViewSectionRef() === this.getRowId()));\n\n  this.isVirtual = this.autoDispose(ko.pureComputed(() => typeof this.id() === 'string'));\n\n  this.borderWidthPx = ko.pureComputed(() => this.borderWidth() + 'px');\n\n  this.layoutSpecObj = modelUtil.jsonObservable(this.layoutSpec);\n\n  this._savedFilters = recordSet(this, docModel.filters, 'viewSectionRef');\n\n  /**\n   * Unsaved client-side filters, keyed by original col ref. Currently only wiped when unsaved filters\n   * are applied or reverted.\n   *\n   * If saved filters exist for a col ref, unsaved filters take priority and are applied instead. This\n   * prevents disruption when changes are made to saved filters for the same field/column, but there\n   * may be some cases where we'd want to reset _unsavedFilters on some indirect change to the document.\n   *\n   * NOTE: See `filters`, where `_unsavedFilters` is merged with `savedFilters`.\n   */\n  this._unsavedFilters = new Map();\n\n  /**\n   * Filter information for all fields/columns in the section.\n   *\n   * Re-computed on changes to `savedFilters`, as well as any changes to `viewFields` or `columns`. Any\n   * unsaved filters saved in `_unsavedFilters` are applied on computation, taking priority over saved\n   * filters for the same field/column, if any exist.\n   */\n  this.filters = this.autoDispose(ko.computed(() => {\n    const savedFiltersByColRef = new Map(this._savedFilters().all().map(f => [f.colRef(), f]));\n    const viewFieldsByColRef = new Map(this.viewFields().all().map(f => [f.origCol().getRowId(), f]));\n\n    return this.columns().map(column => {\n      const savedFilter = savedFiltersByColRef.get(column.origColRef());\n      // Initialize with a saved filter, if one exists. Otherwise, use a blank filter.\n      const filter = modelUtil.customComputed({\n        read: () => { return savedFilter ? savedFilter.activeFilter() : ''; },\n      });\n      const pinned = modelUtil.customComputed({\n        read: () => { return savedFilter ? savedFilter.pinned() : false; },\n      });\n\n      // If an unsaved filter exists, overwrite the filter with it.\n      const unsavedFilter = this._unsavedFilters.get(column.origColRef());\n      if (unsavedFilter) {\n        const {filter: f, pinned: p} = unsavedFilter;\n        if (f !== undefined) { filter(f); }\n        if (p !== undefined) { pinned(p); }\n      }\n\n      return {\n        viewSection: this,\n        filter,\n        pinned,\n        fieldOrColumn: viewFieldsByColRef.get(column.origColRef()) ?? column,\n        isFiltered: ko.pureComputed(() => filter() !== ''),\n        isPinned: ko.pureComputed(() => pinned()),\n      };\n    });\n  }));\n\n  // List of `filters` that have non-blank active filters.\n  this.activeFilters = Computed.create(this, use => use(this.filters).filter(f => use(f.isFiltered)));\n\n  // List of `activeFilters` that are pinned.\n  this.pinnedActiveFilters = Computed.create(this, use => use(this.activeFilters).filter(f => use(f.isPinned)));\n\n  // Helper metadata item which indicates whether any of the section's fields/columns have unsaved\n  // changes to their filters. (True indicates unsaved changes)\n  this.filterSpecChanged = Computed.create(this, use => {\n    return use(this.filters).some(col => !use(col.filter.isSaved) || !use(col.pinned.isSaved));\n  });\n\n  this.showNestedFilteringPopup = Observable.create(this, false);\n\n  // Save all filters of fields/columns in the section.\n  this.saveFilters = () => {\n    return docModel.docData.bundleActions(`Save all filters in ${this.titleDef()}`,\n      async () => {\n        const savedFiltersByColRef = new Map(this._savedFilters().all().map(f => [f.colRef(), f]));\n        const updatedFilters: [number, Filter][] = []; // Pairs of row ids and filters to update.\n        const removedFilterIds: number[] = []; // Row ids of filters to remove.\n        const newFilters: [number, Filter][] = []; // Pairs of column refs and filters to add.\n\n        for (const f of this.filters()) {\n          const {fieldOrColumn, filter, pinned} = f;\n          // Skip saved filters (i.e. filters whose local values are unchanged from server).\n          if (filter.isSaved() && pinned.isSaved()) { continue; }\n\n          const savedFilter = savedFiltersByColRef.get(fieldOrColumn.origCol().origColRef());\n          if (!savedFilter) {\n            // Never save blank filters. (This is primarily a sanity check.)\n            if (filter() === '') { continue; }\n\n            // Since no saved filter exists, we must add a new record to the filters table.\n            newFilters.push([fieldOrColumn.origCol().origColRef(), {\n              filter: filter(),\n              pinned: pinned(),\n            }]);\n          } else if (filter() === '') {\n            // Mark the saved filter for removal from the filters table.\n            removedFilterIds.push(savedFilter.id());\n          } else {\n            // Mark the saved filter for update in the filters table.\n            updatedFilters.push([savedFilter.id(), {\n              filter: filter(),\n              pinned: pinned(),\n            }]);\n          }\n        }\n\n        const actions: UserAction[] = [];\n\n        // Remove records of any deleted filters.\n        if (removedFilterIds.length > 0) {\n          actions.push(['BulkRemoveRecord', removedFilterIds]);\n        }\n\n        // Update existing filter records with new filter values.\n        if (updatedFilters.length > 0) {\n          actions.push(['BulkUpdateRecord',\n            updatedFilters.map(([id]) => id),\n            {\n              filter: updatedFilters.map(([, {filter}]) => filter),\n              pinned: updatedFilters.map(([, {pinned}]) => pinned),\n            }\n          ]);\n        }\n\n        // Add new filter records.\n        if (newFilters.length > 0) {\n          actions.push(['BulkAddRecord',\n            arrayRepeat(newFilters.length, null),\n            {\n              viewSectionRef: arrayRepeat(newFilters.length, this.id()),\n              colRef: newFilters.map(([colRef]) => colRef),\n              filter: newFilters.map(([, {filter}]) => filter),\n              pinned: newFilters.map(([, {pinned}]) => pinned),\n            }\n          ]);\n        }\n\n        if (actions.length > 0) {\n          await docModel.filters.sendTableActions(actions);\n        }\n\n        // Reset client filter state.\n        this.revertFilters();\n      }\n    );\n  };\n\n  // Revert all filters of fields/columns in the section.\n  this.revertFilters = () => {\n    this._unsavedFilters.clear();\n    this.filters().forEach(c => {\n      c.filter.revert();\n      c.pinned.revert();\n    });\n  };\n\n  // Set `filter` for the field or column identified by `colRef`.\n  this.setFilter = (colRef: number, filter: Partial<Filter>) => {\n    this._unsavedFilters.set(colRef, {...this._unsavedFilters.get(colRef), ...filter});\n    const filterInfo = this.filters().find(c => c.fieldOrColumn.origCol().origColRef() === colRef);\n    if (!filterInfo) { return; }\n\n    const {filter: newFilter, pinned: newPinned} = filter;\n    if (newFilter !== undefined) { filterInfo.filter(newFilter); }\n    if (newPinned !== undefined) { filterInfo.pinned(newPinned); }\n  };\n\n  // Revert the filter of the field or column identified by `colRef`.\n  this.revertFilter = (colRef: number) => {\n    this._unsavedFilters.delete(colRef);\n    const filterInfo = this.filters().find(c => c.fieldOrColumn.origCol().origColRef() === colRef);\n    if (!filterInfo) { return; }\n\n    filterInfo.filter.revert();\n    filterInfo.pinned.revert();\n  };\n\n  // Customizable version of the JSON-stringified sort spec. It may diverge from the saved one.\n  this.activeSortJson = modelUtil.customValue(this.sortColRefs);\n\n  // This is an array (parsed from JSON) of colRefs (i.e. rowIds into the columns table), with a\n  // twist: a rowId may be positive or negative, for ascending or descending respectively.\n  // TODO: This method of ignoring columns which are deleted is inefficient and may cause conflicts\n  //  with sharing.\n  this.activeSortSpec = modelUtil.jsonObservable(this.activeSortJson, (obj: Sort.SortSpec|null) => {\n    return (obj || []).filter((sortRef: Sort.ColSpec) => {\n      const colModel = docModel.columns.getRowModel(Sort.getColRef(sortRef));\n      return !colModel._isDeleted() && colModel.getRowId();\n    });\n  });\n\n  // Modified sort spec to take into account any active display columns.\n  this.activeDisplaySortSpec = this.autoDispose(ko.computed(() => {\n    return this.activeSortSpec().map(directionalColRef => {\n      const colRef = Sort.getColRef(directionalColRef);\n      const field = this.viewFields().all().find(f => f.column().origColRef() === colRef);\n      const effectiveColRef = field ? field.displayColRef() : colRef;\n      return Sort.swapColRef(directionalColRef, effectiveColRef);\n    });\n  }));\n\n  // Evaluates to an array of column models, which are not referenced by anything in viewFields.\n  this.hiddenColumns = this.autoDispose(ko.pureComputed(() => {\n    const included = new Set(this.viewFields().all().map((f) => f.column().origColRef()));\n    return this.columns().filter(c => !included.has(c.getRowId()));\n  }));\n\n  this.hasFocus = ko.pureComputed({\n    // Read may occur for recently disposed sections, must check condition first.\n    read: () => !this.isDisposed() && this.view().activeSectionId() === this.id(),\n    write: (val) => { this.view().activeSectionId(val ? this.id() : 0); }\n  });\n\n  // Section-linking affects this table if linkSrcSection is set. The controller value of the\n  // link is the value of srcCol at activeRowId of linkSrcSection, or activeRowId itself when\n  // srcCol is unset. If targetCol is set, we filter for all rows whose targetCol is equal to\n  // the controller value. Otherwise, the controller value determines the rowId of the cursor.\n  this.linkSrcSection = refRecord(docModel.viewSections, this.linkSrcSectionRef);\n  this.linkSrcCol = refRecord(docModel.columns, this.linkSrcColRef);\n  this.linkTargetCol = refRecord(docModel.columns, this.linkTargetColRef);\n\n  this.activeRowId = ko.observable<UIRowId|null>(null);\n\n  this._linkingState = Holder.create(this);\n  this.linkingState = this.autoDispose(ko.pureComputed(() => {\n    if (!this.linkSrcSectionRef()) {\n      // This view section isn't selected by anything.\n      return null;\n    }\n    try {\n      const config = new LinkConfig(this);\n      return LinkingState.create(this._linkingState, docModel, config);\n    } catch (err) {\n      console.warn(err);\n      // Dispose old LinkingState in case creating the new one failed.\n      this._linkingState.dispose();\n      return null;\n    }\n  }));\n\n  this.linkingFilter = this.autoDispose(ko.pureComputed(() => {\n    return this.linkingState()?.filterColValues?.() || {filters: {}, operations: {}};\n  }));\n\n  // If the view instance for this section is instantiated, it will be accessible here.\n  this.viewInstance = ko.observable<BaseView|null>(null);\n\n  // Describes the most recent cursor position in the section.\n  this.lastCursorPos = {\n    rowId:      0,\n    fieldIndex: 0\n  };\n\n  // Describes the most recent scroll position.\n  this.lastScrollPos = {\n    rowIndex:   0, // Used for scrolly sections. Indicates the index of the first visible row.\n    offset:     0, // Pixel distance past the top of row indicated by rowIndex.\n    scrollLeft: 0  // Used for grid sections. Indicates the scrollLeft value of the scroll pane.\n  };\n\n  this.disableAddRemoveRows = ko.pureComputed(() => this.table().disableAddRemoveRows());\n\n  this.isSorted = ko.pureComputed(() => this.activeSortSpec().length > 0);\n  this.disableDragRows = ko.pureComputed(() => this.isSorted() || !this.table().supportsManualSort());\n\n  // Number of frozen columns\n  this.rawNumFrozen = modelUtil.customValue(this.optionsObj.prop('numFrozen'));\n  // Number for frozen columns to display\n  this.numFrozen = ko.pureComputed(() =>\n    Math.max(\n      0,\n      Math.min(\n        this.rawNumFrozen(),\n        this.viewFields().all().length - 1\n      )\n    )\n  );\n\n  this.hasCustomOptions = ko.observable(false);\n  this.desiredAccessLevel = ko.observable<AccessLevel|null>(null);\n  this.columnsToMap = ko.observable<ColumnsToMap|null>(null);\n  // Calculate mapped columns for Custom Widget.\n  this.mappedColumns = ko.pureComputed(() => {\n    // First check if widget has requested a custom column mapping and\n    // if we have a saved configuration.\n    const request = this.columnsToMap();\n    const mapping = this.customDef.columnsMapping();\n    if (!request || !mapping) {\n      return null;\n    }\n    // Convert simple column expressions (widget can just specify a name of a column) to a rich column definition.\n    const columnsToMap = request.map(r => new ColumnToMapImpl(r));\n    const result: WidgetColumnMap = {};\n    // Prepare map of existing column, will need this for translating colRefs to colIds.\n    const colMap = new Map(this.columns().map(f => [f.id.peek(), f]));\n    for(const widgetCol of columnsToMap) {\n      // Start with marking this column as not mapped.\n      result[widgetCol.name] = widgetCol.allowMultiple ? [] : null;\n      const mappedCol = mapping[widgetCol.name];\n      if (!mappedCol) {\n        continue;\n      }\n      if (widgetCol.allowMultiple) {\n        // We expect a list of colRefs be mapped;\n        if (!Array.isArray(mappedCol)) { continue; }\n        result[widgetCol.name] = mappedCol\n          // Remove all colRefs saved but deleted\n          .filter(cId => colMap.has(cId))\n          // And those with wrong type.\n          .filter(cId => widgetCol.canByMapped(colMap.get(cId)!.pureType()))\n          .map(cId => colMap.get(cId)!.colId());\n      } else {\n         // Widget expects a single value and existing column\n         if (Array.isArray(mappedCol) || !colMap.has(mappedCol)) { continue; }\n         const selectedColumn = colMap.get(mappedCol)!;\n         result[widgetCol.name] = widgetCol.canByMapped(selectedColumn.pureType()) ? selectedColumn.colId() : null;\n      }\n    }\n    return result;\n  });\n\n  this.allowSelectBy = Observable.create(this, false);\n  this.selectedRows = Observable.create(this, []);\n\n  this.tableId = this.autoDispose(ko.pureComputed(() => this.table().tableId()));\n  const rawSection = this.autoDispose(ko.pureComputed(() => this.table().rawViewSection()));\n  this.rulesCols = refListRecords(docModel.columns, ko.pureComputed(() => rawSection().rules()));\n  this.rulesColsIds = ko.pureComputed(() => this.rulesCols().map(c => c.colId()));\n  this.rulesStyles = modelUtil.savingComputed({\n    read: () => rawSection().optionsObj.prop(\"rulesOptions\")() ?? [],\n    write: (setter, val) => setter(rawSection().optionsObj.prop(\"rulesOptions\"), val)\n  });\n  this.hasRules = ko.pureComputed(() => this.rulesCols().length > 0);\n  this.addEmptyRule = async () => {\n    const action = [\n      'AddEmptyRule',\n      this.tableId.peek(),\n      null,\n      null\n    ];\n    await docModel.docData.sendAction(action, `Update rules for ${this.table.peek().tableId.peek()}`);\n  };\n\n  this.removeRule = (index: number) => removeRule(docModel, this, index);\n\n  this.isCollapsed = this.autoDispose(ko.pureComputed(() => {\n    const list = this.view().activeCollapsedSections();\n    return list.includes(this.id());\n  }));\n}\n","import {isCensored} from 'app/common/gristTypes';\nimport * as ko from 'knockout';\nimport {KoArray} from 'app/client/lib/koArray';\nimport {jsonObservable} from 'app/client/models/modelUtil';\nimport * as modelUtil from 'app/client/models/modelUtil';\nimport {ColumnRec, DocModel, IRowModel, recordSet, refRecord, TableRec} from 'app/client/models/DocModel';\n\n\nexport interface CellRec extends IRowModel<\"_grist_Cells\"> {\n  column: ko.Computed<ColumnRec>;\n  table: ko.Computed<TableRec>;\n  children: ko.Computed<KoArray<CellRec>>;\n  hidden: ko.Computed<boolean>;\n  parent: ko.Computed<CellRec>;\n\n  text: modelUtil.KoSaveableObservable<string|undefined>;\n  userName: modelUtil.KoSaveableObservable<string|undefined>;\n  timeCreated: modelUtil.KoSaveableObservable<number|undefined>;\n  timeUpdated: modelUtil.KoSaveableObservable<number|undefined>;\n  resolved: modelUtil.KoSaveableObservable<boolean|undefined>;\n  resolvedBy: modelUtil.KoSaveableObservable<string|undefined>;\n}\n\nexport function createCellRec(this: CellRec, docModel: DocModel): void {\n  this.hidden = ko.pureComputed(() => isCensored(this.content()));\n  this.column = refRecord(docModel.columns, this.colRef);\n  this.table = refRecord(docModel.tables, this.tableRef);\n  this.parent = refRecord(docModel.cells, this.parentId);\n  this.children = recordSet(this, docModel.cells, 'parentId');\n  const properContent = modelUtil.savingComputed({\n    read: () => this.hidden() ? '{}' : this.content(),\n    write: (setter, val) => setter(this.content, val)\n  });\n  const optionJson = jsonObservable(properContent);\n\n  // Comments:\n  this.text = optionJson.prop('text');\n  this.userName = optionJson.prop('userName');\n  this.timeCreated = optionJson.prop('timeCreated');\n  this.timeUpdated = optionJson.prop('timeUpdated');\n  this.resolved = optionJson.prop('resolved');\n  this.resolvedBy = optionJson.prop('resolvedBy');\n}\n","/**\n * DocModel describes the observable models for all document data, including the built-in tables\n * (aka metatables), which are used in the Grist application itself (e.g. to render views).\n *\n * Since all data is structured as tables, we have several levels of models:\n * (1) DocModel maintains all tables\n * (2) MetaTableModel maintains data for a built-in table.\n * (3) DataTableModel maintains data for a user-defined table.\n * (4) RowModels (defined in {Data,Meta}TableModel.js) maintains data for one record in a table.\n *     For built-in tables, the records are defined in this module, below.\n */\nimport {KoArray} from 'app/client/lib/koArray';\nimport {KoSaveableObservable} from 'app/client/models/modelUtil';\n\nimport * as ko from 'knockout';\nimport memoize from 'lodash/memoize';\n\nimport * as koArray from 'app/client/lib/koArray';\nimport * as koUtil from 'app/client/lib/koUtil';\nimport DataTableModel from 'app/client/models/DataTableModel';\nimport {DocData} from 'app/client/models/DocData';\nimport {DocPageModel} from 'app/client/models/DocPageModel';\nimport {urlState} from 'app/client/models/gristUrlState';\nimport MetaRowModel from 'app/client/models/MetaRowModel';\nimport MetaTableModel from 'app/client/models/MetaTableModel';\nimport * as rowset from 'app/client/models/rowset';\nimport {TableData} from 'app/client/models/TableData';\nimport {isHiddenTable, isSummaryTable} from 'app/common/isHiddenTable';\nimport {canEdit} from 'app/common/roles';\nimport {RowFilterFunc} from 'app/common/RowFilterFunc';\nimport {schema, SchemaTypes} from 'app/common/schema';\nimport {UIRowId} from 'app/common/TableData';\nimport {ACLRuleRec, createACLRuleRec} from 'app/client/models/entities/ACLRuleRec';\nimport {ColumnRec, createColumnRec} from 'app/client/models/entities/ColumnRec';\nimport {createDocInfoRec, DocInfoRec} from 'app/client/models/entities/DocInfoRec';\nimport {createFilterRec, FilterRec} from 'app/client/models/entities/FilterRec';\nimport {createPageRec, PageRec} from 'app/client/models/entities/PageRec';\nimport {createTabBarRec, TabBarRec} from 'app/client/models/entities/TabBarRec';\nimport {createTableRec, TableRec} from 'app/client/models/entities/TableRec';\nimport {createValidationRec, ValidationRec} from 'app/client/models/entities/ValidationRec';\nimport {createViewFieldRec, ViewFieldRec} from 'app/client/models/entities/ViewFieldRec';\nimport {createViewRec, ViewRec} from 'app/client/models/entities/ViewRec';\nimport {createViewSectionRec, ViewSectionRec} from 'app/client/models/entities/ViewSectionRec';\nimport {CellRec, createCellRec} from 'app/client/models/entities/CellRec';\nimport {RefListValue} from 'app/common/gristTypes';\nimport {decodeObject} from 'app/plugin/objtypes';\nimport {toKo} from 'grainjs';\n\n// Re-export all the entity types available. The recommended usage is like this:\n//    import {ColumnRec, ViewFieldRec} from 'app/client/models/DocModel';\nexport type {ColumnRec, DocInfoRec, FilterRec, PageRec, TabBarRec, TableRec, ValidationRec,\n  ViewFieldRec, ViewRec, ViewSectionRec, CellRec};\n\n/**\n * Creates the type for a MetaRowModel containing a KoSaveableObservable for each field listed in\n * the auto-generated app/common/schema.ts. It represents the metadata record in the database.\n * Particular DocModel entities derive from this, and add other helpful computed values.\n */\nexport type IRowModel<TName extends keyof SchemaTypes> = MetaRowModel<TName> & {\n  [ColId in keyof SchemaTypes[TName]]: KoSaveableObservable<SchemaTypes[TName][ColId]>;\n};\n\n\n/**\n * Returns an observable for an observable array of records from the given table.\n *\n * @param {RowModel} rowModel: RowModel that owns this recordSet.\n * @param {TableModel} tableModel: The model for the table to return records from.\n * @param {String} groupByField: The name of the field in the other table by which to group. The\n *    returned observable arrays will be for the group matching the value of rowModel.id().\n * @param {String} [options.sortBy]: Keep the returned array sorted by this key. If omitted, the\n *    returned array will be sorted by rowId.\n */\nexport function recordSet<TRow extends MetaRowModel>(\n  rowModel: MetaRowModel, tableModel: MetaTableModel<TRow>, groupByField: string, options?: {sortBy: string}\n): ko.Computed<KoArray<TRow>> {\n\n  const opts = {groupBy: groupByField, sortBy: 'id', ...options};\n  return koUtil.computedAutoDispose(\n    () => tableModel.createRowGroupModel(rowModel.id() || 0, opts),\n    null, { pure: true });\n}\n\n\n/**\n * Returns an observable for a record from another table, selected using the passed-in observable\n * for a rowId. If rowId is invalid, returns the row model for the fake empty record.\n * @param {TableModel} tableModel: The model for the table to return a record from.\n * @param {ko.observable} rowIdObs: An observable for the row id to look up.\n */\nexport function refRecord<TRow extends MetaRowModel>(\n  tableModel: MetaTableModel<TRow>, rowIdObs: ko.Observable<number>|ko.Computed<number>\n): ko.Computed<TRow> {\n  // Pass 'true' to getRowModel() to depend on the row version.\n  return ko.pureComputed(() => tableModel.getRowModel(rowIdObs() || 0, true));\n}\n\n\n/**\n * Returns an observable with a list of records from another table, selected using RefList column.\n * @param {TableModel} tableModel: The model for the table to return a record from.\n * @param {ko.observable} rowsIdObs: An observable with a RefList value.\n */\nexport function refListRecords<TRow extends MetaRowModel>(\n  tableModel: MetaTableModel<TRow>, rowsIdObs: ko.Observable<RefListValue>|ko.Computed<RefListValue>\n) {\n  return ko.pureComputed(() => {\n    const ids = decodeObject(rowsIdObs()) as number[]|null;\n    if (!Array.isArray(ids)) {\n      return [];\n    }\n    return ids.map(id => tableModel.getRowModel(id, true));\n  });\n}\n\n// Use an alias for brevity.\ntype MTM<RowModel extends MetaRowModel> = MetaTableModel<RowModel>;\n\nexport class DocModel {\n  // MTM is a shorthand for MetaTableModel below, to keep each item to one line.\n  public docInfo: MTM<DocInfoRec> = this._metaTableModel(\"_grist_DocInfo\", createDocInfoRec);\n  public tables: MTM<TableRec> = this._metaTableModel(\"_grist_Tables\", createTableRec);\n  public columns: MTM<ColumnRec> = this._metaTableModel(\"_grist_Tables_column\", createColumnRec);\n  public views: MTM<ViewRec> = this._metaTableModel(\"_grist_Views\", createViewRec);\n  public viewSections: MTM<ViewSectionRec> = this._metaTableModel(\"_grist_Views_section\", createViewSectionRec);\n  public viewFields: MTM<ViewFieldRec> = this._metaTableModel(\"_grist_Views_section_field\", createViewFieldRec);\n  public tabBar: MTM<TabBarRec> = this._metaTableModel(\"_grist_TabBar\", createTabBarRec);\n  public validations: MTM<ValidationRec> = this._metaTableModel(\"_grist_Validations\", createValidationRec);\n  public pages: MTM<PageRec> = this._metaTableModel(\"_grist_Pages\", createPageRec);\n  public rules: MTM<ACLRuleRec> = this._metaTableModel(\"_grist_ACLRules\", createACLRuleRec);\n  public filters: MTM<FilterRec> = this._metaTableModel(\"_grist_Filters\", createFilterRec);\n  public cells: MTM<CellRec> = this._metaTableModel(\"_grist_Cells\", createCellRec);\n\n  public docInfoRow: DocInfoRec;\n\n  public allTables: KoArray<TableRec>;\n  public visibleTables: KoArray<TableRec>;\n  public rawDataTables: KoArray<TableRec>;\n  public rawSummaryTables: KoArray<TableRec>;\n\n  public allTableIds: KoArray<string>;\n  public visibleTableIds: KoArray<string>;\n\n  // A mapping from tableId to DataTableModel for user-defined tables.\n  public dataTables: {[tableId: string]: DataTableModel} = {};\n\n  // Another map, this one mapping tableRef (rowId) to DataTableModel.\n  public dataTablesByRef = new Map<number, DataTableModel>();\n\n  public allTabs: KoArray<TabBarRec> = this.tabBar.createAllRowsModel('tabPos');\n\n  /** Pages that are shown in the menu. These can include censored pages if they have children. */\n  public menuPages: ko.Computed<PageRec[]>;\n  // Excludes pages hidden by ACL rules or other reasons (e.g. doc-tour)\n  public visibleDocPages: ko.Computed<PageRec[]>;\n\n  // Flag for tracking whether document is in formula-editing mode\n  public editingFormula: ko.Observable<boolean> = ko.observable(false);\n\n  // If the doc has a docTour. Used also to enable the UI button to restart the tour.\n  public readonly hasDocTour: ko.Computed<boolean>;\n\n  public readonly isTutorial: ko.Computed<boolean>;\n\n  // TODO This is a temporary solution until we expose creation of doc-tours to users. This flag\n  // is initialized once on page load. If set, then the tour page (if any) will be visible.\n  public showDocTourTable: boolean = (urlState().state.get().docPage === 'GristDocTour');\n\n  // Whether the GristDocTutorial table should be shown. Initialized once on page load.\n  public showDocTutorialTable: boolean =\n    // We skip subscribing to the observables below since they normally shouldn't change during\n    // this object's lifetime. If that changes, this should be made into a computed observable.\n    !this._docPageModel.isTutorialFork.get() ||\n    canEdit(this._docPageModel.currentDoc.get()?.trunkAccess ?? null);\n\n  // List of all the metadata tables.\n  private _metaTables: Array<MetaTableModel<any>>;\n\n  constructor(public readonly docData: DocData, private readonly _docPageModel: DocPageModel) {\n    // For all the metadata tables, load their data (and create the RowModels).\n    for (const model of this._metaTables) {\n      model.loadData();\n    }\n\n    this.docInfoRow = this.docInfo.getRowModel(1);\n\n    // An observable array of all tables, sorted by tableId, with no exclusions.\n    this.allTables = this._createAllTablesArray();\n\n    // An observable array of user-visible tables, sorted by tableId, excluding summary tables.\n    // This is a publicly exposed member.\n    this.visibleTables = this._createVisibleTablesArray();\n\n    // Observable arrays of raw data and summary tables, sorted by tableId.\n    this.rawDataTables = this._createRawDataTablesArray();\n    this.rawSummaryTables = this._createRawSummaryTablesArray();\n\n    // An observable array of all tableIds. A shortcut mapped from allTables.\n    const allTableIds = ko.computed(() => this.allTables.all().map(t => t.tableId()));\n    this.allTableIds = koArray.syncedKoArray(allTableIds);\n\n    // An observable array of user-visible tableIds. A shortcut mapped from visibleTables.\n    const visibleTableIds = ko.computed(() => this.visibleTables.all().map(t => t.tableId()));\n    this.visibleTableIds = koArray.syncedKoArray(visibleTableIds);\n\n    // Create an observable array of RowModels for all the data tables. We'll trigger\n    // onAddTable/onRemoveTable in response to this array's splice events below.\n    const allTableMetaRows = this.tables.createAllRowsModel('id');\n\n    // For a new table, we get AddTable action followed by metadata actions to add a table record\n    // (which triggers this subscribeForEach) and to add all the column records. So we have to keep\n    // in mind that metadata for columns isn't available yet.\n    allTableMetaRows.subscribeForEach({\n      add: r => this._onAddTable(r),\n      remove: r => this._onRemoveTable(r),\n    });\n\n    // Get a list of only the visible pages.\n    const allPages = this.pages.createAllRowsModel('pagePos');\n    this.menuPages = ko.computed(() => {\n      const pagesToShow = allPages.all().filter(p => !p.isSpecial()).sort((a, b) => a.pagePos() - b.pagePos());\n      // Helper to find all children of a page.\n      const children = memoize((page: PageRec) => {\n        const following = pagesToShow.slice(pagesToShow.indexOf(page) + 1);\n        const firstOutside = following.findIndex(p => p.indentation() <= page.indentation());\n        return firstOutside >= 0 ? following.slice(0, firstOutside) : following;\n      });\n      // Helper to test if the page is hidden and all its children are hidden.\n      // In that case, we won't show it at all.\n      const hide = memoize((page: PageRec): boolean => page.isCensored() && children(page).every(p => hide(p)));\n      return pagesToShow.filter(p => !hide(p));\n    });\n    this.visibleDocPages = ko.computed(() => allPages.all().filter(p => !p.isHidden()));\n\n    this.hasDocTour = ko.computed(() => this.visibleTableIds.all().includes('GristDocTour'));\n\n    this.isTutorial = ko.computed(() =>\n      toKo(ko, this._docPageModel.isTutorialFork)()\n      && this.allTableIds.all().includes('GristDocTutorial'));\n  }\n\n  private _metaTableModel<TName extends keyof SchemaTypes, TRow extends IRowModel<TName>>(\n    tableId: TName,\n    rowConstructor: (this: TRow, docModel: DocModel) => void,\n  ): MetaTableModel<TRow> {\n    const fields = Object.keys(schema[tableId]);\n    const model = new MetaTableModel<TRow>(this, this.docData.getTable(tableId)!, fields, rowConstructor);\n    // To keep _metaTables private member listed after public ones, initialize it on first use.\n    if (!this._metaTables) { this._metaTables = []; }\n    this._metaTables.push(model);\n    return model;\n  }\n\n  private _onAddTable(tableMetaRow: TableRec) {\n    let tid = tableMetaRow.tableId();\n    const dtm = new DataTableModel(this, this.docData.getTable(tid)!, tableMetaRow);\n    this.dataTables[tid] = dtm;\n    this.dataTablesByRef.set(tableMetaRow.getRowId(), dtm);\n\n    // Subscribe to tableMetaRow.tableId() to handle table renames.\n    tableMetaRow.tableId.subscribe(newTableId => {\n      this.dataTables[newTableId] = this.dataTables[tid];\n      delete this.dataTables[tid];\n      tid = newTableId;\n    });\n  }\n\n  private _onRemoveTable(tableMetaRow: TableRec) {\n    const tid = tableMetaRow.tableId();\n    this.dataTables[tid].dispose();\n    delete this.dataTables[tid];\n    this.dataTablesByRef.delete(tableMetaRow.getRowId());\n  }\n\n  /**\n   * Returns an observable array of all tables, sorted by tableId.\n   */\n  private _createAllTablesArray(): KoArray<TableRec> {\n    return createTablesArray(this.tables);\n  }\n\n  /**\n   * Returns an observable array of user tables, sorted by tableId, and excluding hidden/summary\n   * tables.\n   */\n  private _createVisibleTablesArray(): KoArray<TableRec> {\n    return createTablesArray(this.tables, r =>\n      !isHiddenTable(this.tables.tableData, r) &&\n      !isVirtualTable(this.tables.tableData, r) &&\n      (!isTutorialTable(this.tables.tableData, r) || this.showDocTutorialTable)\n    );\n  }\n\n  /**\n   * Returns an observable array of raw data tables, sorted by tableId, and excluding summary\n   * tables.\n   */\n  private _createRawDataTablesArray(): KoArray<TableRec> {\n    return createTablesArray(this.tables, r =>\n      !isSummaryTable(this.tables.tableData, r) &&\n      (!isTutorialTable(this.tables.tableData, r) || this.showDocTutorialTable)\n    );\n  }\n\n  /**\n   * Returns an observable array of raw summary tables, sorted by tableId.\n   */\n  private _createRawSummaryTablesArray(): KoArray<TableRec> {\n    return createTablesArray(this.tables, r => isSummaryTable(this.tables.tableData, r));\n  }\n}\n\n/**\n * Creates an observable array of tables, sorted by tableId.\n *\n * An optional `filterFunc` may be specified to filter tables.\n */\nfunction createTablesArray(\n  tablesModel: MetaTableModel<TableRec>,\n  filterFunc: RowFilterFunc<UIRowId> = (_row) => true\n) {\n  const rowSource = new rowset.FilteredRowSource(filterFunc);\n  rowSource.subscribeTo(tablesModel);\n  // Create an observable RowModel array based on this rowSource, sorted by tableId.\n  return tablesModel._createRowSetModel(rowSource, 'tableId');\n}\n\n/**\n * Return whether a table (identified by the rowId of its metadata record) is\n * the special GristDocTutorial table.\n */\nfunction isTutorialTable(tablesData: TableData, tableRef: UIRowId): boolean {\n  return tablesData.getValue(tableRef, 'tableId') === 'GristDocTutorial';\n}\n\n/**\n * Check whether a table is virtual - currently that is done\n * by having a string rowId rather than the expected integer.\n */\nfunction isVirtualTable(tablesData: TableData, tableRef: UIRowId): boolean {\n  return typeof(tableRef) === 'string';\n}\n","import {makeT} from 'app/client/lib/localization';\nimport {createSessionObs} from 'app/client/lib/sessionObs';\nimport {DocPageModel} from 'app/client/models/DocPageModel';\nimport {reportError} from 'app/client/models/errors';\nimport {urlState} from 'app/client/models/gristUrlState';\nimport {getTimeFromNow} from 'app/client/models/HomeModel';\nimport {buildConfigContainer} from 'app/client/ui/RightPanel';\nimport {buttonSelect} from 'app/client/ui2018/buttonSelect';\nimport {testId, theme, vars} from 'app/client/ui2018/cssVars';\nimport {icon} from 'app/client/ui2018/icons';\nimport {menu, menuAnnotate, menuItemLink} from 'app/client/ui2018/menus';\nimport {buildUrlId, parseUrlId} from 'app/common/gristUrls';\nimport {StringUnion} from 'app/common/StringUnion';\nimport {DocSnapshot} from 'app/common/UserAPI';\nimport {Disposable, dom, IDomComponent, MultiHolder, Observable, styled} from 'grainjs';\nimport moment from 'moment';\n\nconst t = makeT('DocHistory');\n\nconst DocHistorySubTab = StringUnion(\"activity\", \"snapshots\");\n\nexport class DocHistory extends Disposable implements IDomComponent {\n  private _subTab = createSessionObs(this, \"docHistorySubTab\", \"snapshots\", DocHistorySubTab.guard);\n\n  constructor(private _docPageModel: DocPageModel, private _actionLog: IDomComponent) {\n    super();\n  }\n\n  public buildDom() {\n    const tabs = [\n      {value: 'activity', label: t(\"Activity\")},\n      {value: 'snapshots', label: t(\"Snapshots\")},\n    ];\n    return [\n      cssSubTabs(\n        buttonSelect(this._subTab, tabs, {}, testId('doc-history-tabs')),\n      ),\n      dom.domComputed(this._subTab, (subTab) =>\n        buildConfigContainer(\n          subTab === 'activity' ? this._actionLog.buildDom() :\n          subTab === 'snapshots' ? dom.create(this._buildSnapshots.bind(this)) :\n          null\n        )\n      ),\n    ];\n  }\n\n  private _buildSnapshots(owner: MultiHolder) {\n    // Fetch snapshots, and render.\n    const doc = this._docPageModel.currentDoc.get();\n    if (!doc) { return null; }\n\n    // origUrlId is the snapshot-less URL, which we use to fetch snapshot history, and for\n    // snapshot comparisons.\n    const origUrlId = buildUrlId({...doc.idParts, snapshotId: undefined});\n\n    // If comparing one snapshot to another, get the other ID, so that we can highlight it too.\n    const compareUrlId = urlState().state.get().params?.compare;\n    const compareSnapshotId = compareUrlId && parseUrlId(compareUrlId).snapshotId;\n\n    // Helper to set a link to open a snapshot, optionally comparing it with a docId.\n    // We include urlState().state to preserve the currently selected page.\n    function setLink(snapshot: DocSnapshot, compareDocId?: string) {\n      return dom.attr('href', (use) => urlState().makeUrl({\n        ...use(urlState().state), doc: snapshot.docId,\n        params: (compareDocId ? {compare: compareDocId} : {})\n      }));\n    }\n\n    const snapshots = Observable.create<DocSnapshot[]>(owner, []);\n    const snapshotsDenied = Observable.create<boolean>(owner, false);\n    const userApi = this._docPageModel.appModel.api;\n    const docApi = userApi.getDocAPI(origUrlId);\n    docApi.getSnapshots().then(result =>\n      snapshots.isDisposed() || snapshots.set(result.snapshots)).catch(err => {\n        snapshotsDenied.set(true);\n        reportError(err);\n      });\n    return dom(\n      'div',\n      dom.maybe(snapshotsDenied, () => cssSnapshotDenied(\n        t(\"Snapshots are unavailable.\"),\n        testId('doc-history-error'))),\n      // Note that most recent snapshots are first.\n      dom.domComputed(snapshots, (snapshotList) => snapshotList.map((snapshot, index) => {\n        const modified = moment(snapshot.lastModified);\n        const prevSnapshot = snapshotList[index + 1] || null;\n        return cssSnapshot(\n          cssSnapshotTime(getTimeFromNow(snapshot.lastModified)),\n          cssSnapshotCard(\n            cssSnapshotCard.cls('-current', Boolean(\n              snapshot.snapshotId === doc.idParts.snapshotId ||\n              (compareSnapshotId && snapshot.snapshotId === compareSnapshotId)\n            )),\n            dom('div',\n              cssDatePart(modified.format('ddd ll')), ' ',\n              cssDatePart(modified.format('LT'))\n            ),\n            cssMenuDots(icon('Dots'),\n              menu(() => [\n                  menuItemLink(setLink(snapshot), t(\"Open Snapshot\")),\n                  menuItemLink(setLink(snapshot, origUrlId), t(\"Compare to Current\"),\n                    menuAnnotate(t(\"Beta\"))),\n                  prevSnapshot && menuItemLink(setLink(prevSnapshot, snapshot.docId), t(\"Compare to Previous\"),\n                    menuAnnotate(t(\"Beta\"))),\n                ],\n                {placement: 'bottom-end', parentSelectorToMark: '.' + cssSnapshotCard.className}\n              ),\n              testId('doc-history-snapshot-menu'),\n            ),\n            testId('doc-history-card'),\n          ),\n          testId('doc-history-snapshot'),\n        );\n      })),\n    );\n  }\n}\n\nconst cssSubTabs = styled('div', `\n  padding: 16px;\n  border-bottom: 1px solid ${theme.pagePanelsBorder};\n`);\n\nconst cssSnapshot = styled('div', `\n  margin: 8px 16px;\n`);\n\nconst cssSnapshotDenied = styled('div', `\n  margin: 8px 16px;\n`);\n\nconst cssSnapshotTime = styled('div', `\n  text-align: right;\n  color: ${theme.lightText};\n  font-size: ${vars.smallFontSize};\n`);\n\nconst cssSnapshotCard = styled('div', `\n  border: 1px solid ${theme.documentHistorySnapshotBorder};\n  padding: 8px;\n  color: ${theme.documentHistorySnapshotFg};\n  background: ${theme.documentHistorySnapshotBg};\n  border-radius: 8px;\n  overflow: hidden;\n  display: flex;\n  align-items: center;\n  --icon-color: ${theme.controlSecondaryFg};\n\n  &-current {\n    background-color: ${theme.documentHistorySnapshotSelectedBg};\n    color: ${theme.documentHistorySnapshotSelectedFg};\n    --icon-color: ${theme.documentHistorySnapshotSelectedFg};\n  }\n`);\n\nconst cssDatePart = styled('span', `\n  display: inline-block;\n`);\n\nconst cssMenuDots = styled('div', `\n  flex: none;\n  margin: 0 4px 0 auto;\n  height: 24px;\n  width: 24px;\n  padding: 4px;\n  line-height: 0px;\n  border-radius: 3px;\n  cursor: default;\n  &:hover, &.weasel-popup-open {\n    background-color: ${theme.hover};\n  }\n`);\n","/**\n * Utility to generate a series of onboarding popups. It is used to give users a short description\n * of some elements of the UI. The first step is to create the list of messages following the\n * `IOnBoardingMsg` interface. Then you have to attach each message to its corresponding element of\n * the UI using the `attachOnBoardingMsg' dom method:\n *\n *  Usage:\n *\n *    // create the list of message\n *    const messages = [{id: 'add-new-btn', placement: 'right', buildDom: () => ... },\n *                      {id: 'share-btn', buildDom: () => ... ];\n *\n *\n *    // attach each message to the corresponding element\n *    dom('div', 'Add New', ..., dom.cls('tour-add-new-btn'));\n *\n *    // start\n *    startOnBoarding(message, onFinishCB);\n *\n * Note:\n * - this module does UI only, saving which user has already seen the popups has to be handled by\n *   the caller. Pass an `onFinishCB` to handle when a user dimiss the popups.\n */\n\nimport { Disposable, dom, DomElementArg, Holder, makeTestId, styled, svg } from \"grainjs\";\nimport { createPopper, Placement } from '@popperjs/core';\nimport { FocusLayer } from 'app/client/lib/FocusLayer';\nimport {makeT} from 'app/client/lib/localization';\nimport * as Mousetrap from 'app/client/lib/Mousetrap';\nimport { bigBasicButton, bigPrimaryButton } from \"app/client/ui2018/buttons\";\nimport { theme, vars } from \"app/client/ui2018/cssVars\";\nimport range = require(\"lodash/range\");\nimport {IGristUrlState} from \"app/common/gristUrls\";\nimport {urlState} from \"app/client/models/gristUrlState\";\nimport {delay} from \"app/common/delay\";\nimport {reportError} from \"app/client/models/errors\";\nimport {cssBigIcon, cssCloseButton} from \"./ExampleCard\";\n\nconst t = makeT('OnBoardingPopups');\n\nconst testId = makeTestId('test-onboarding-');\n\n// Describes an onboarding popup. Each popup is uniquely identified by its id.\nexport interface IOnBoardingMsg {\n\n  // A CSS selector pointing to the reference element\n  selector: string,\n\n  // Title\n  title: DomElementArg,\n\n  // Body\n  body?: DomElementArg,\n\n  // If true show the message as a modal centered on the screen.\n  showHasModal?: boolean,\n\n  // The popper placement.\n  placement?: Placement,\n\n  // Adjusts the popup offset so that it is positioned relative to the content of the reference\n  // element. This is useful when the reference element has padding and no border (ie: such as\n  // icons). In which case, and when set to true, it will fill the gap between popups and the UI\n  // part it's pointing at. If `cropPadding` is falsy otherwise, the popup might look a bit distant.\n  cropPadding?: boolean,\n\n  // The popper offset.\n  offset?: [number, number],\n\n  // Skip the message\n  skip?: boolean;\n\n  // If present, will be passed to urlState().pushUrl() to navigate to the location defined by that state\n  urlState?: IGristUrlState;\n}\n\n// There should only be one tour at a time. Use a holder to dispose the previous tour when\n// starting a new one.\nconst tourSingleton = Holder.create<OnBoardingPopupsCtl>(null);\n\nexport function startOnBoarding(messages: IOnBoardingMsg[], onFinishCB: () => void) {\n  const ctl = OnBoardingPopupsCtl.create(tourSingleton, messages, onFinishCB);\n  ctl.start().catch(reportError);\n}\n\n// Returns whether some tour is currently active.\nexport function isTourActive(): boolean {\n  return !tourSingleton.isEmpty();\n}\n\nclass OnBoardingError extends Error {\n  public name = 'OnBoardingError';\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * Current index in the list of messages.\n * This allows closing the tour and reopening where you left off.\n * Since it's a single global value, mixing unrelated tours\n * (e.g. the generic welcome tour and a specific document tour)\n * in a single page load won't work well.\n */\nlet ctlIndex = 0;\n\nclass OnBoardingPopupsCtl extends Disposable {\n  private _openPopupCtl: {close: () => void}|undefined;\n  private _overlay: HTMLElement;\n  private _arrowEl = buildArrow();\n\n  constructor(private _messages: IOnBoardingMsg[], private _onFinishCB: () => void) {\n    super();\n    if (this._messages.length === 0) {\n      throw new OnBoardingError('messages should not be an empty list');\n    }\n\n    // In case we're reopening after deleting some rows of GristDocTour,\n    // ensure ctlIndex is still within bounds\n    ctlIndex = Math.min(ctlIndex, this._messages.length - 1);\n\n    this.onDispose(() => {\n      this._openPopupCtl?.close();\n    });\n  }\n\n  public async start() {\n    this._showOverlay();\n    await this._move(0);\n    Mousetrap.setPaused(true);\n    this.onDispose(() => {\n      Mousetrap.setPaused(false);\n    });\n  }\n\n  private _finish() {\n    this._onFinishCB();\n    this.dispose();\n  }\n\n  private async _move(movement: number, maybeClose = false) {\n    const newIndex = ctlIndex + movement;\n    const entry = this._messages[newIndex];\n    if (!entry) {\n      if (maybeClose) {\n        // User finished the tour, close and restart from the beginning if they reopen\n        ctlIndex = 0;\n        this._finish();\n      }\n      return;  // gone out of bounds, probably by keyboard shortcut\n    }\n    ctlIndex = newIndex;\n    if (entry.skip) {\n      // movement = 0 when starting a tour, make sure we don't get stuck in a loop\n      await this._move(movement || +1);\n      return;\n    }\n\n    // close opened popup if any\n    this._openPopupCtl?.close();\n\n    if (entry.urlState) {\n      await urlState().pushUrl(entry.urlState);\n      await delay(100);  // make sure cursor is in correct place\n    }\n\n    if (entry.showHasModal) {\n      this._showHasModal();\n    } else {\n      await this._showHasPopup(movement);\n    }\n  }\n\n  private async _showHasPopup(movement: number) {\n    const content = this._buildPopupContent();\n    const entry = this._messages[ctlIndex];\n    const elem = document.querySelector<HTMLElement>(entry.selector);\n    const {placement} = entry;\n\n    // The element the popup refers to is not present. To the user we show nothing and simply skip\n    // it to the next.\n    if (!elem) {\n      console.warn(`On boarding tour: element ${entry.selector} not found!`);\n      // movement = 0 when starting a tour, make sure we don't get stuck in a loop\n      return this._move(movement || +1);\n    }\n\n    // Cleanup\n    function close() {\n      popper.destroy();\n      dom.domDispose(content);\n      content.remove();\n    }\n\n    this._openPopupCtl = {close};\n    document.body.appendChild(content);\n    this._addFocusLayer(content);\n\n    // Create a popper for positioning the popup content relative to the reference element\n    const adjacentPadding = entry.cropPadding ? this._getAdjacentPadding(elem, placement) : 0;\n    const popper = createPopper(elem, content, {\n      placement,\n      modifiers: [{\n        name: 'arrow',\n        options: {\n          element: this._arrowEl,\n        },\n      }, {\n        name: 'offset',\n        options: {\n          offset: [0, 12 - adjacentPadding],\n        }\n      }],\n    });\n  }\n\n  private _addFocusLayer(container: HTMLElement) {\n    dom.autoDisposeElem(container, new FocusLayer({\n      defaultFocusElem: container,\n      allowFocus: (elem) => (elem !== document.body)\n    }));\n  }\n\n  // Get the padding length for the side that will be next to the popup.\n  private _getAdjacentPadding(elem: HTMLElement, placement?: Placement) {\n    if (placement) {\n      let padding = '';\n      if (placement.includes('bottom')) {\n        padding = getComputedStyle(elem).paddingBottom;\n      }\n      else if (placement.includes('top')) {\n        padding = getComputedStyle(elem).paddingTop;\n      }\n      else if (placement.includes('left')) {\n        padding = getComputedStyle(elem).paddingLeft;\n      }\n      else if (placement.includes('right')) {\n        padding = getComputedStyle(elem).paddingRight;\n      }\n      // Note: getComputedStyle return value in pixel, hence no need to handle other unit. See here\n      // for reference:\n      // https://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle#notes.\n      if (padding && padding.endsWith('px')) {\n        return Number(padding.slice(0, padding.length - 2));\n      }\n    }\n    return 0;\n  }\n\n  private _showHasModal() {\n    const content = this._buildPopupContent();\n    dom.update(this._overlay, content);\n    this._addFocusLayer(content);\n\n    function close() {\n      content.remove();\n      dom.domDispose(content);\n    }\n\n    this._openPopupCtl = {close};\n  }\n\n  private _buildPopupContent() {\n    return Container(\n      {tabindex: '-1'},\n      this._arrowEl,\n      ContentWrapper(\n        cssCloseButton(cssBigIcon('CrossBig'),\n          dom.on('click', () => this._finish()),\n          testId('close'),\n        ),\n        cssTitle(this._messages[ctlIndex].title),\n        cssBody(this._messages[ctlIndex].body),\n        this._buildFooter(),\n        testId('popup'),\n      ),\n      dom.onKeyDown({\n        Escape:     () => this._finish(),\n        ArrowLeft:  () => this._move(-1),\n        ArrowRight: () => this._move(+1),\n        Enter:      () => this._move(+1, true),\n      }),\n    );\n  }\n\n  private _buildFooter() {\n    const nSteps = this._messages.length;\n    const isLastStep = ctlIndex === nSteps - 1;\n    const isFirstStep = ctlIndex === 0;\n    return Footer(\n      ProgressBar(\n        range(nSteps).map((i) => Dot(Dot.cls('-done', i > ctlIndex))),\n      ),\n      Buttons(\n        bigBasicButton(\n          'Previous', testId('previous'),\n          dom.on('click', () => this._move(-1)),\n          dom.prop('disabled', isFirstStep),\n          {style: `margin-right: 8px; visibility: ${isFirstStep ? 'hidden' : 'visible'}`},\n        ),\n        bigPrimaryButton(\n          isLastStep ? t(\"Finish\") : t(\"Next\"), testId('next'),\n          dom.on('click', () => this._move(+1, true)),\n        ),\n      )\n    );\n  }\n\n  private _showOverlay() {\n    document.body.appendChild(this._overlay = Overlay());\n    this.onDispose(() => {\n      document.body.removeChild(this._overlay);\n      dom.domDispose(this._overlay);\n    });\n  }\n}\n\nfunction buildArrow() {\n  return ArrowContainer(\n    svg('svg', { style: 'width: 13px; height: 34px;' },\n        svg('path', {'d': 'M 2 19 h 13 v 18 Z'}))\n  );\n}\n\nconst Container = styled('div', `\n  align-self: center;\n  border: 2px solid ${theme.accentBorder};\n  border-radius: 3px;\n  z-index: ${vars.onboardingPopupZIndex};\n  max-width: 490px;\n  position: relative;\n  background-color: ${theme.popupBg};\n  box-shadow: 0 2px 18px 0 ${theme.popupInnerShadow}, 0 0 1px 0 ${theme.popupOuterShadow};\n  outline: unset;\n`);\n\nfunction sideSelectorChunk(side: 'top'|'bottom'|'left'|'right') {\n  return `.${Container.className}[data-popper-placement^=${side}]`;\n}\n\nconst ArrowContainer = styled('div', `\n  position: absolute;\n\n  & path {\n    stroke: ${theme.accentBorder};\n    stroke-width: 2px;\n    fill: ${theme.popupBg};\n  }\n\n  ${sideSelectorChunk('top')} > & {\n    bottom: -26px;\n  }\n\n  ${sideSelectorChunk('bottom')} > & {\n    top: -23px;\n  }\n\n  ${sideSelectorChunk('right')} > & {\n    left: -12px;\n  }\n\n  ${sideSelectorChunk('left')} > & {\n    right: -12px;\n  }\n\n  ${sideSelectorChunk('top')} svg {\n    transform: rotate(-90deg);\n  }\n\n  ${sideSelectorChunk('bottom')} svg {\n    transform: rotate(90deg);\n  }\n\n  ${sideSelectorChunk('left')} svg {\n    transform: scalex(-1);\n  }\n`);\n\nconst ContentWrapper = styled('div', `\n  position: relative;\n  padding: 32px;\n  background-color: ${theme.popupBg};\n`);\n\nconst Footer = styled('div', `\n  display: flex;\n  flex-direction: row;\n  margin-top: 32px;\n  justify-content: space-between;\n  align-items: center;\n`);\n\nconst ProgressBar = styled('div', `\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  row-gap: 12px;\n`);\n\nconst Buttons = styled('div', `\n  display: flex;\n  flex-directions: row;\n`);\n\nconst Dot = styled('div', `\n  width: 6px;\n  height: 6px;\n  border-radius: 3px;\n  margin-right: 12px;\n  align-self: center;\n  background-color: ${theme.progressBarFg};\n  &-done {\n    background-color: ${theme.progressBarBg};\n  }\n`);\n\nconst Overlay = styled('div', `\n  position: fixed;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  z-index: ${vars.onboardingBackdropZIndex};\n  overflow-y: auto;\n`);\n\nconst cssTitle = styled('div', `\n  font-size: ${vars.xxxlargeFontSize};\n  font-weight: ${vars.headerControlTextWeight};\n  color: ${theme.text};\n  margin: 0 0 16px 0;\n  line-height: 32px;\n`);\n\nconst cssBody = styled('div', `\n  color: ${theme.text};\n`);\n","export type IconName = \"ChartArea\" |\n  \"ChartBar\" |\n  \"ChartDonut\" |\n  \"ChartKaplan\" |\n  \"ChartLine\" |\n  \"ChartPie\" |\n  \"TypeCard\" |\n  \"TypeCardList\" |\n  \"TypeCell\" |\n  \"TypeChart\" |\n  \"TypeCustom\" |\n  \"TypeDetails\" |\n  \"TypeTable\" |\n  \"FieldAny\" |\n  \"FieldAttachment\" |\n  \"FieldCheckbox\" |\n  \"FieldChoice\" |\n  \"FieldColumn\" |\n  \"FieldDate\" |\n  \"FieldDateTime\" |\n  \"FieldFunction\" |\n  \"FieldFunctionEqual\" |\n  \"FieldInteger\" |\n  \"FieldLink\" |\n  \"FieldNumeric\" |\n  \"FieldReference\" |\n  \"FieldSpinner\" |\n  \"FieldSwitcher\" |\n  \"FieldTable\" |\n  \"FieldText\" |\n  \"FieldTextbox\" |\n  \"FieldToggle\" |\n  \"LoginStreamline\" |\n  \"LoginUnify\" |\n  \"LoginVisualize\" |\n  \"GoogleLogo\" |\n  \"GristLogo\" |\n  \"ThumbPreview\" |\n  \"AddUser\" |\n  \"ArrowLeft\" |\n  \"ArrowRight\" |\n  \"ArrowRightOutlined\" |\n  \"BarcodeQR\" |\n  \"BarcodeQR2\" |\n  \"Board\" |\n  \"Bookmark\" |\n  \"CenterAlign\" |\n  \"Chat\" |\n  \"Code\" |\n  \"Collapse\" |\n  \"Convert\" |\n  \"Copy\" |\n  \"CrossBig\" |\n  \"CrossSmall\" |\n  \"Database\" |\n  \"Dots\" |\n  \"Download\" |\n  \"DragDrop\" |\n  \"Dropdown\" |\n  \"DropdownUp\" |\n  \"Empty\" |\n  \"Exclamation\" |\n  \"Expand\" |\n  \"EyeHide\" |\n  \"EyeShow\" |\n  \"Feedback\" |\n  \"Filter\" |\n  \"FilterSimple\" |\n  \"Fireworks\" |\n  \"Flag\" |\n  \"Folder\" |\n  \"FontBold\" |\n  \"FontItalic\" |\n  \"FontStrikethrough\" |\n  \"FontUnderline\" |\n  \"FunctionResult\" |\n  \"GreenArrow\" |\n  \"Grow\" |\n  \"Heart\" |\n  \"Help\" |\n  \"Home\" |\n  \"Idea\" |\n  \"Import\" |\n  \"ImportArrow\" |\n  \"Info\" |\n  \"LeftAlign\" |\n  \"Lighting\" |\n  \"Lock\" |\n  \"Log\" |\n  \"Mail\" |\n  \"Maximize\" |\n  \"Memo\" |\n  \"Message\" |\n  \"Minimize\" |\n  \"Minus\" |\n  \"MobileChat\" |\n  \"MobileChat2\" |\n  \"NewNotification\" |\n  \"Notification\" |\n  \"Offline\" |\n  \"Page\" |\n  \"PanelLeft\" |\n  \"PanelRight\" |\n  \"Pencil\" |\n  \"PinBig\" |\n  \"PinSmall\" |\n  \"PinTilted\" |\n  \"Pivot\" |\n  \"PivotLight\" |\n  \"Plus\" |\n  \"Popup\" |\n  \"Public\" |\n  \"PublicColor\" |\n  \"PublicFilled\" |\n  \"Redo\" |\n  \"Remove\" |\n  \"RemoveBig\" |\n  \"Repl\" |\n  \"ResizePanel\" |\n  \"Revert\" |\n  \"RightAlign\" |\n  \"Robot\" |\n  \"Script\" |\n  \"Search\" |\n  \"Settings\" |\n  \"Share\" |\n  \"Sort\" |\n  \"Sparks\" |\n  \"Tick\" |\n  \"TickSolid\" |\n  \"Undo\" |\n  \"Validation\" |\n  \"Video\" |\n  \"Warning\" |\n  \"Widget\" |\n  \"Wrap\" |\n  \"Zoom\" |\n  \"UseChart\" |\n  \"UseEducate\" |\n  \"UseFinance\" |\n  \"UseHr\" |\n  \"UseMedia\" |\n  \"UseMonitor\" |\n  \"UseOther\" |\n  \"UseProduct\" |\n  \"UseSales\" |\n  \"UseScience\";\n\nexport const IconList: IconName[] = [\"ChartArea\",\n  \"ChartBar\",\n  \"ChartDonut\",\n  \"ChartKaplan\",\n  \"ChartLine\",\n  \"ChartPie\",\n  \"TypeCard\",\n  \"TypeCardList\",\n  \"TypeCell\",\n  \"TypeChart\",\n  \"TypeCustom\",\n  \"TypeDetails\",\n  \"TypeTable\",\n  \"FieldAny\",\n  \"FieldAttachment\",\n  \"FieldCheckbox\",\n  \"FieldChoice\",\n  \"FieldColumn\",\n  \"FieldDate\",\n  \"FieldDateTime\",\n  \"FieldFunction\",\n  \"FieldFunctionEqual\",\n  \"FieldInteger\",\n  \"FieldLink\",\n  \"FieldNumeric\",\n  \"FieldReference\",\n  \"FieldSpinner\",\n  \"FieldSwitcher\",\n  \"FieldTable\",\n  \"FieldText\",\n  \"FieldTextbox\",\n  \"FieldToggle\",\n  \"LoginStreamline\",\n  \"LoginUnify\",\n  \"LoginVisualize\",\n  \"GoogleLogo\",\n  \"GristLogo\",\n  \"ThumbPreview\",\n  \"AddUser\",\n  \"ArrowLeft\",\n  \"ArrowRight\",\n  \"ArrowRightOutlined\",\n  \"BarcodeQR\",\n  \"BarcodeQR2\",\n  \"Board\",\n  \"Bookmark\",\n  \"CenterAlign\",\n  \"Chat\",\n  \"Code\",\n  \"Collapse\",\n  \"Convert\",\n  \"Copy\",\n  \"CrossBig\",\n  \"CrossSmall\",\n  \"Database\",\n  \"Dots\",\n  \"Download\",\n  \"DragDrop\",\n  \"Dropdown\",\n  \"DropdownUp\",\n  \"Empty\",\n  \"Exclamation\",\n  \"Expand\",\n  \"EyeHide\",\n  \"EyeShow\",\n  \"Feedback\",\n  \"Filter\",\n  \"FilterSimple\",\n  \"Fireworks\",\n  \"Flag\",\n  \"Folder\",\n  \"FontBold\",\n  \"FontItalic\",\n  \"FontStrikethrough\",\n  \"FontUnderline\",\n  \"FunctionResult\",\n  \"GreenArrow\",\n  \"Grow\",\n  \"Heart\",\n  \"Help\",\n  \"Home\",\n  \"Idea\",\n  \"Import\",\n  \"ImportArrow\",\n  \"Info\",\n  \"LeftAlign\",\n  \"Lighting\",\n  \"Lock\",\n  \"Log\",\n  \"Mail\",\n  \"Maximize\",\n  \"Memo\",\n  \"Message\",\n  \"Minimize\",\n  \"Minus\",\n  \"MobileChat\",\n  \"MobileChat2\",\n  \"NewNotification\",\n  \"Notification\",\n  \"Offline\",\n  \"Page\",\n  \"PanelLeft\",\n  \"PanelRight\",\n  \"Pencil\",\n  \"PinBig\",\n  \"PinSmall\",\n  \"PinTilted\",\n  \"Pivot\",\n  \"PivotLight\",\n  \"Plus\",\n  \"Popup\",\n  \"Public\",\n  \"PublicColor\",\n  \"PublicFilled\",\n  \"Redo\",\n  \"Remove\",\n  \"RemoveBig\",\n  \"Repl\",\n  \"ResizePanel\",\n  \"Revert\",\n  \"RightAlign\",\n  \"Robot\",\n  \"Script\",\n  \"Search\",\n  \"Settings\",\n  \"Share\",\n  \"Sort\",\n  \"Sparks\",\n  \"Tick\",\n  \"TickSolid\",\n  \"Undo\",\n  \"Validation\",\n  \"Video\",\n  \"Warning\",\n  \"Widget\",\n  \"Wrap\",\n  \"Zoom\",\n  \"UseChart\",\n  \"UseEducate\",\n  \"UseFinance\",\n  \"UseHr\",\n  \"UseMedia\",\n  \"UseMonitor\",\n  \"UseOther\",\n  \"UseProduct\",\n  \"UseSales\",\n  \"UseScience\"];\n","import {Placement} from '@popperjs/core';\nimport {placements} from '@popperjs/core/lib/enums';\nimport {DocComm} from 'app/client/components/DocComm';\nimport {makeT} from 'app/client/lib/localization';\nimport {sameDocumentUrlState} from 'app/client/models/gristUrlState';\nimport {cssButtons, cssLinkBtn, cssLinkIcon} from 'app/client/ui/ExampleCard';\nimport {IOnBoardingMsg, startOnBoarding} from 'app/client/ui/OnBoardingPopups';\nimport {isNarrowScreen} from 'app/client/ui2018/cssVars';\nimport {IconList, IconName} from 'app/client/ui2018/IconList';\nimport {DocData} from 'app/common/DocData';\nimport {dom} from 'grainjs';\nimport sortBy = require('lodash/sortBy');\n\nconst t = makeT('DocTour');\n\nexport async function startDocTour(docData: DocData, docComm: DocComm, onFinishCB: () => void) {\n  const docTour: IOnBoardingMsg[] = await makeDocTour(docData, docComm) || invalidDocTour;\n  exposeDocTour(docTour);\n  startOnBoarding(docTour, onFinishCB);\n}\n\nconst invalidDocTour: IOnBoardingMsg[] = [{\n  title: t(\"No valid document tour\"),\n  body: t(\"Cannot construct a document tour from the data in this document. \\\nEnsure there is a table named GristDocTour with columns Title, Body, Placement, and Location.\"),\n  selector: 'document',\n  showHasModal: true,\n}];\n\nasync function makeDocTour(docData: DocData, docComm: DocComm): Promise<IOnBoardingMsg[] | null> {\n  const tableId = \"GristDocTour\";\n  if (!docData.getTable(tableId)) {\n    return null;\n  }\n  // Make sure any formulas in GristDocTour table have had time to evaluate. For example, for a\n  // first time open of a new document copy, any use of SELF_HYPERLINK will be stale since the URL\n  // of the document has changed.\n  await docComm.waitForInitialization();\n  await docData.fetchTable(tableId);\n  const tableData = docData.getTable(tableId)!;\n\n  const result = sortBy(tableData.getRowIds(), tableData.getRowPropFunc('manualSort') as any).map(rowId => {\n    function getValue(colId: string): string {\n      return String(tableData.getValue(rowId, colId) || \"\");\n    }\n    const title = getValue(\"Title\");\n    let body: HTMLElement | string = getValue(\"Body\");\n    const linkText = getValue(\"Link_Text\");\n    const linkUrl = getValue(\"Link_URL\");\n    const linkIcon = getValue(\"Link_Icon\") as IconName;\n    const locationValue = getValue(\"Location\");\n    let placement = getValue(\"Placement\");\n\n    if (!(title || body)) {\n      return null;\n    }\n\n    const urlState = sameDocumentUrlState(locationValue);\n    if (isNarrowScreen() || !placements.includes(placement as Placement)) {\n      placement = \"auto\";\n    }\n\n    let validLinkUrl = true;\n    try {\n      new URL(linkUrl);\n    } catch {\n      validLinkUrl = false;\n    }\n\n    if (validLinkUrl && linkText) {\n      body = dom(\n        'div',\n        dom('p', body),\n        dom('p',\n          cssButtons(cssLinkBtn(\n            IconList.includes(linkIcon) ? cssLinkIcon(linkIcon) : null,\n            linkText,\n            {href: linkUrl, target: '_blank'},\n          ))\n        ),\n      );\n    }\n\n    return {\n      title,\n      body,\n      placement,\n      urlState,\n      selector: '.active_cursor',\n      // Center the popup if the user doesn't provide a link to a cell\n      showHasModal: !urlState?.hash\n    };\n  }).filter(x => x !== null) as IOnBoardingMsg[];\n  if (!result.length) {\n    return null;\n  }\n  return result;\n}\n\n// for easy testing\nfunction exposeDocTour(docTour: IOnBoardingMsg[]) {\n  (window as any)._gristDocTour = () =>\n    docTour.map(msg => ({\n      ...msg,\n      body: typeof msg.body === \"string\" ? msg.body\n        : (msg.body as HTMLElement)?.outerHTML\n          .replace(/_grain\\d+_/g, \"_grainXXX_\"),\n      urlState: msg.urlState?.hash\n    }));\n}\n","import {marked} from 'marked';\n\nexport const renderer = new marked.Renderer();\n\nrenderer.image = (href: string | null, title: string | null, _text: string) => {\n  let classes = 'doc-tutorial-popup-thumbnail';\n  const hash = href?.split('#')?.[1];\n  if (hash) {\n    const extraClass = `doc-tutorial-popup-thumbnail-${hash}`;\n    classes += ` ${extraClass}`;\n  }\n  return `<div class=\"${classes}\">\n  <img src=\"${href}\" title=\"${title ?? ''}\" />\n  <div class=\"doc-tutorial-popup-thumbnail-icon-wrapper\">\n    <div class=\"doc-tutorial-popup-thumbnail-icon\"></div>\n  </div>\n</div>`;\n};\n\nrenderer.link = (href: string | null, _title: string | null, text: string) => {\n  return `<a href=\"${href}\" target=\"_blank\">${text}</a>`;\n};\n","import {GristDoc} from 'app/client/components/GristDoc';\nimport {logTelemetryEvent} from 'app/client/lib/telemetry';\nimport {getWelcomeHomeUrl, urlState} from 'app/client/models/gristUrlState';\nimport {renderer} from 'app/client/ui/DocTutorialRenderer';\nimport {cssPopupBody, FLOATING_POPUP_TOOLTIP_KEY, FloatingPopup} from 'app/client/ui/FloatingPopup';\nimport {sanitizeHTML} from 'app/client/ui/sanitizeHTML';\nimport {hoverTooltip, setHoverTooltip} from 'app/client/ui/tooltips';\nimport {basicButton, primaryButton} from 'app/client/ui2018/buttons';\nimport {mediaXSmall, theme, vars} from 'app/client/ui2018/cssVars';\nimport {icon} from 'app/client/ui2018/icons';\nimport {loadingSpinner} from 'app/client/ui2018/loaders';\nimport {confirmModal, modal} from 'app/client/ui2018/modals';\nimport {parseUrlId} from 'app/common/gristUrls';\nimport {dom, makeTestId, Observable, styled} from 'grainjs';\nimport {marked} from 'marked';\nimport debounce = require('lodash/debounce');\nimport range = require('lodash/range');\nimport sortBy = require('lodash/sortBy');\n\ninterface DocTutorialSlide {\n  slideContent: string;\n  boxContent?: string;\n  slideTitle?: string;\n  imageUrls: string[];\n}\n\nconst testId = makeTestId('test-doc-tutorial-');\n\nexport class DocTutorial extends FloatingPopup {\n  private _appModel = this._gristDoc.docPageModel.appModel;\n  private _currentDoc = this._gristDoc.docPageModel.currentDoc.get();\n  private _currentFork = this._currentDoc?.forks?.[0];\n  private _docComm = this._gristDoc.docComm;\n  private _docData = this._gristDoc.docData;\n  private _docId = this._gristDoc.docId();\n  private _slides: Observable<DocTutorialSlide[] | null> = Observable.create(this, null);\n  private _currentSlideIndex = Observable.create(this, this._currentFork?.options?.tutorial?.lastSlideIndex ?? 0);\n\n\n  private _saveCurrentSlidePositionDebounced = debounce(this._saveCurrentSlidePosition, 1000, {\n    // Save new position immediately if at least 1 second has passed since the last change.\n    leading: true,\n    // Otherwise, wait for the new position to settle for 1 second before saving it.\n    trailing: true\n  });\n\n  constructor(private _gristDoc: GristDoc) {\n    super({\n      minimizable: true,\n      stopClickPropagationOnMove: true,\n    });\n  }\n\n  public async start() {\n    this.showPopup();\n    await this._loadSlides();\n\n    const tableData = this._docData.getTable('GristDocTutorial');\n    if (tableData) {\n      this.autoDispose(tableData.tableActionEmitter.addListener(() => this._reloadSlides()));\n    }\n  }\n\n  protected _buildTitle() {\n    return dom('span', dom.text(this._gristDoc.docPageModel.currentDocTitle), testId('popup-header'));\n  }\n\n  protected _buildContent() {\n    return [\n        dom.domComputed(use => {\n        const slides = use(this._slides);\n        const slideIndex = use(this._currentSlideIndex);\n        const slide = slides?.[slideIndex];\n        return cssPopupBody(\n          !slide ? cssSpinner(loadingSpinner()) : [\n            dom('div', elem => {\n              elem.innerHTML = slide.slideContent;\n            }),\n            !slide.boxContent ? null : cssTryItOutBox(\n              dom('div', elem => { elem.innerHTML = slide.boxContent!; }),\n            ),\n            dom.on('click', (ev) => {\n              if((ev.target as HTMLElement).tagName !== 'IMG') {\n                return;\n              }\n\n              this._openLightbox((ev.target as HTMLImageElement).src);\n            }),\n            this._initializeImages(),\n          ],\n          testId('popup-body'),\n        );\n      }),\n      cssPopupFooter(\n        dom.domComputed(use => {\n          const slides = use(this._slides);\n          if (!slides) { return null; }\n\n          const slideIndex = use(this._currentSlideIndex);\n          const numSlides = slides.length;\n          const isFirstSlide = slideIndex === 0;\n          const isLastSlide = slideIndex === numSlides - 1;\n          return [\n              cssFooterButtonsLeft(\n              cssPopupFooterButton(icon('Undo'),\n                hoverTooltip('Restart Tutorial', {key: FLOATING_POPUP_TOOLTIP_KEY}),\n                dom.on('click', () => this._restartTutorial()),\n                testId('popup-restart'),\n              ),\n            ),\n            cssProgressBar(\n              range(slides.length).map((i) => cssProgressBarDot(\n                hoverTooltip(slides[i].slideTitle, {\n                  closeOnClick: false,\n                  key: FLOATING_POPUP_TOOLTIP_KEY,\n                }),\n                cssProgressBarDot.cls('-current', i === slideIndex),\n                i === slideIndex ? null : dom.on('click', () => this._changeSlide(i)),\n                testId(`popup-slide-${i + 1}`),\n              )),\n            ),\n            cssFooterButtonsRight(\n              basicButton('Previous',\n                dom.on('click', async () => {\n                  await this._previousSlide();\n                }),\n                {style: `visibility: ${isFirstSlide ? 'hidden' : 'visible'}`},\n                testId('popup-previous'),\n              ),\n              primaryButton(isLastSlide ? 'Finish': 'Next',\n                isLastSlide\n                  ? dom.on('click', async () => await this._finishTutorial())\n                  : dom.on('click', async () => await this._nextSlide()),\n                testId('popup-next'),\n              ),\n            ),\n          ];\n        }),\n        testId('popup-footer'),\n      ),\n    ];\n  }\n\n  protected _buildArgs() {\n    return [\n      dom.cls('doc-tutorial-popup'),\n      testId('popup'),\n      // Pre-fetch images from all slides and store them in a hidden div.\n      dom.maybe(this._slides, slides =>\n        dom('div',\n          {style: 'display: none;'},\n          dom.forEach(slides, slide => {\n            if (slide.imageUrls.length === 0) { return null; }\n            return dom('div', slide.imageUrls.map(src => dom('img', {src})));\n          }),\n        ),\n      ),\n    ];\n  }\n\n  private async _loadSlides() {\n    const tableId = 'GristDocTutorial';\n    if (!this._docData.getTable(tableId)) {\n      throw new Error('DocTutorial failed to find table GristDocTutorial');\n    }\n\n    await this._docComm.waitForInitialization();\n    if (this.isDisposed()) { return; }\n\n    await this._docData.fetchTable(tableId);\n    if (this.isDisposed()) { return; }\n\n    const tableData = this._docData.getTable(tableId)!;\n    const slides = (await Promise.all(\n      sortBy(tableData.getRowIds(), tableData.getRowPropFunc('manualSort') as any)\n      .map(async rowId => {\n        let slideTitle: string | undefined;\n        const imageUrls: string[] = [];\n\n        const getValue = (colId: string): string | undefined => {\n          const value = tableData.getValue(rowId, colId);\n          return value ? String(value) : undefined;\n        };\n\n        const walkTokens = (token: marked.Token) => {\n          if (token.type === 'image') {\n            imageUrls.push(token.href);\n          }\n\n          if (!slideTitle && token.type === 'heading' && token.depth === 1) {\n            slideTitle = token.text;\n          }\n        };\n\n        let slideContent = getValue('slide_content');\n        if (!slideContent) { return null; }\n        slideContent = sanitizeHTML(await marked.parse(slideContent, {\n          async: true, renderer, walkTokens\n        }));\n\n        let boxContent = getValue('box_content');\n        if (boxContent) {\n          boxContent = sanitizeHTML(await marked.parse(boxContent, {\n            async: true, renderer, walkTokens\n          }));\n        }\n        return {\n          slideContent,\n          boxContent,\n          slideTitle,\n          imageUrls,\n        };\n      })\n    )).filter(slide => slide !== null) as DocTutorialSlide[];\n    if (this.isDisposed()) { return; }\n\n    if (slides.length === 0) {\n      throw new Error('DocTutorial failed to find slides in table GristDocTutorial');\n    }\n\n    this._slides.set(slides);\n  }\n\n  private async _reloadSlides() {\n    await this._loadSlides();\n    const slides = this._slides.get();\n    if (!slides) { return; }\n\n    if (this._currentSlideIndex.get() > slides.length - 1) {\n      this._currentSlideIndex.set(slides.length - 1);\n    }\n  }\n\n  private async _saveCurrentSlidePosition() {\n    const currentOptions = this._currentDoc?.options ?? {};\n    const currentSlideIndex = this._currentSlideIndex.get();\n    const numSlides = this._slides.get()?.length;\n    await this._appModel.api.updateDoc(this._docId, {\n      options: {\n        ...currentOptions,\n        tutorial: {\n          lastSlideIndex: currentSlideIndex,\n        }\n      }\n    });\n\n    let percentComplete: number | undefined = undefined;\n    if (numSlides !== undefined && numSlides > 0) {\n      percentComplete = Math.floor(((currentSlideIndex + 1) / numSlides) * 100);\n    }\n    logTelemetryEvent('tutorialProgressChanged', {\n      full: {\n        tutorialForkIdDigest: this._currentFork?.id,\n        tutorialTrunkIdDigest: this._currentFork?.trunkId,\n        lastSlideIndex: currentSlideIndex,\n        numSlides,\n        percentComplete,\n      },\n    });\n  }\n\n  private async _changeSlide(slideIndex: number) {\n    this._currentSlideIndex.set(slideIndex);\n    await this._saveCurrentSlidePositionDebounced();\n  }\n\n  private async _previousSlide() {\n    await this._changeSlide(this._currentSlideIndex.get() - 1);\n  }\n\n  private async _nextSlide() {\n    await this._changeSlide(this._currentSlideIndex.get() + 1);\n  }\n\n  private async _finishTutorial() {\n    this._saveCurrentSlidePositionDebounced.cancel();\n    await this._saveCurrentSlidePosition();\n    const lastVisitedOrg = this._appModel.lastVisitedOrgDomain.get();\n    if (lastVisitedOrg) {\n      await urlState().pushUrl({org: lastVisitedOrg});\n    } else {\n      window.location.assign(getWelcomeHomeUrl());\n    }\n  }\n\n  private async _restartTutorial() {\n    const doRestart = async () => {\n      const urlId = this._currentDoc!.id;\n      const {trunkId} = parseUrlId(urlId);\n      const docApi = this._appModel.api.getDocAPI(urlId);\n      await docApi.replace({sourceDocId: trunkId, resetTutorialMetadata: true});\n    };\n\n    confirmModal(\n      'Do you want to restart the tutorial? All progress will be lost.',\n      'Restart',\n      doRestart,\n      {\n        modalOptions: {\n          backerDomArgs: [\n            // Stack modal above the tutorial popup.\n            dom.style('z-index', vars.tutorialModalZIndex.toString()),\n          ],\n        },\n      }\n    );\n  }\n\n  private _initializeImages() {\n    return (element: HTMLElement) => {\n      setTimeout(() => {\n        const imgs = element.querySelectorAll('img');\n        for (const img of imgs) {\n          // Re-assigning src to itself is a neat way to restart a GIF.\n          // eslint-disable-next-line no-self-assign\n          img.src = img.src;\n\n          setHoverTooltip(img, 'Click to expand', {\n            key: FLOATING_POPUP_TOOLTIP_KEY,\n            modifiers: {\n              flip: {\n                boundariesElement: 'scrollParent',\n              },\n            },\n            placement: 'bottom',\n          });\n        }\n      }, 0);\n    };\n  }\n\n  private _openLightbox(src: string) {\n    modal((ctl) => {\n      this.onDispose(ctl.close);\n      return [\n        cssFullScreenModal.cls(''),\n        cssModalCloseButton('CrossBig',\n          dom.on('click', () => ctl.close()),\n          testId('lightbox-close'),\n        ),\n        cssModalContent(cssModalImage({src}, testId('lightbox-image'))),\n        dom.on('click', (ev, elem) => void (ev.target === elem ? ctl.close() : null)),\n        testId('lightbox'),\n      ];\n    }, {\n      backerDomArgs: [\n        // Stack modal above the tutorial popup.\n        dom.style('z-index', vars.tutorialModalZIndex.toString()),\n      ],\n    });\n  }\n}\n\n\nconst cssPopupFooter = styled('div', `\n  display: flex;\n  column-gap: 24px;\n  align-items: center;\n  justify-content: space-between;\n  flex-shrink: 0;\n  padding: 24px 16px 24px 16px;\n  border-top: 1px solid ${theme.tutorialsPopupBorder};\n`);\n\nconst cssTryItOutBox = styled('div', `\n  margin-top: 16px;\n  padding: 24px;\n  border-radius: 4px;\n  background-color: ${theme.tutorialsPopupBoxBg};\n`);\n\n\n\nconst cssPopupFooterButton = styled('div', `\n  --icon-color: ${theme.controlSecondaryFg};\n  padding: 4px;\n  border-radius: 4px;\n  cursor: pointer;\n\n  &:hover {\n    background-color: ${theme.hover};\n  }\n`);\n\nconst cssProgressBar = styled('div', `\n  display: flex;\n  gap: 8px;\n  flex-grow: 1;\n  flex-wrap: wrap;\n`);\n\nconst cssProgressBarDot = styled('div', `\n  width: 10px;\n  height: 10px;\n  border-radius: 5px;\n  align-self: center;\n  cursor: pointer;\n  background-color: ${theme.progressBarBg};\n\n  &-current {\n    cursor: default;\n    background-color: ${theme.progressBarFg};\n  }\n`);\n\nconst cssFooterButtonsLeft = styled('div', `\n  flex-shrink: 0;\n`);\n\nconst cssFooterButtonsRight = styled('div', `\n  display: flex;\n  justify-content: flex-end;\n  column-gap: 8px;\n  flex-shrink: 0;\n  min-width: 140px;\n\n  @media ${mediaXSmall} {\n    & {\n      flex-direction: column;\n      row-gap: 8px;\n      column-gap: 0px;\n      min-width: 0px;\n    }\n  }\n`);\n\nconst cssFullScreenModal = styled('div', `\n  display: flex;\n  flex-direction: column;\n  row-gap: 8px;\n  background-color: initial;\n  width: 100%;\n  height: 100%;\n  border: none;\n  border-radius: 0px;\n  box-shadow: none;\n  padding: 0px;\n`);\n\nconst cssModalCloseButton = styled(icon, `\n  align-self: flex-end;\n  flex-shrink: 0;\n  height: 24px;\n  width: 24px;\n  cursor: pointer;\n  --icon-color: ${theme.modalBackdropCloseButtonFg};\n  &:hover {\n    --icon-color: ${theme.modalBackdropCloseButtonHoverFg};\n  }\n`);\n\nconst cssModalContent = styled('div', `\n  align-self: center;\n  min-height: 0;\n  margin-top: auto;\n  margin-bottom: auto;\n`);\n\nconst cssModalImage = styled('img', `\n  height: 100%;\n  max-width: min(100%, 1200px);\n`);\n\nconst cssSpinner = styled('div', `\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n`);\n","/**\n * This module export a component for editing some document settings consisting of the timezone,\n * (new settings to be added here ...).\n */\nimport {GristDoc} from 'app/client/components/GristDoc';\nimport {ACIndexImpl} from 'app/client/lib/ACIndex';\nimport {ACSelectItem, buildACSelect} from 'app/client/lib/ACSelect';\nimport {copyToClipboard} from 'app/client/lib/clipboardUtils';\nimport {makeT} from 'app/client/lib/localization';\nimport {reportError} from 'app/client/models/AppModel';\nimport {urlState} from 'app/client/models/gristUrlState';\nimport {KoSaveableObservable} from 'app/client/models/modelUtil';\nimport {docListHeader} from 'app/client/ui/DocMenuCss';\nimport {showTransientTooltip} from 'app/client/ui/tooltips';\nimport {primaryButtonLink} from 'app/client/ui2018/buttons';\nimport {mediaSmall, testId, theme, vars} from 'app/client/ui2018/cssVars';\nimport {select} from 'app/client/ui2018/menus';\nimport {confirmModal} from 'app/client/ui2018/modals';\nimport {buildCurrencyPicker} from 'app/client/widgets/CurrencyPicker';\nimport {buildTZAutocomplete} from 'app/client/widgets/TZAutocomplete';\nimport {EngineCode} from 'app/common/DocumentSettings';\nimport {GristLoadConfig} from 'app/common/gristUrls';\nimport {propertyCompare} from 'app/common/gutil';\nimport {getCurrency, locales} from 'app/common/Locales';\nimport {Computed, Disposable, dom, fromKo, IDisposableOwner, styled} from 'grainjs';\nimport * as moment from 'moment-timezone';\n\nconst t = makeT('DocumentSettings');\n\nexport class DocSettingsPage extends Disposable {\n  private _docInfo = this._gristDoc.docInfo;\n\n  private _timezone = this._docInfo.timezone;\n  private _locale: KoSaveableObservable<string> = this._docInfo.documentSettingsJson.prop('locale');\n  private _currency: KoSaveableObservable<string|undefined> = this._docInfo.documentSettingsJson.prop('currency');\n  private _engine: Computed<EngineCode|undefined> = Computed.create(this, (\n    use => use(this._docInfo.documentSettingsJson.prop('engine'))\n  ))\n    .onWrite(val => this._setEngine(val));\n\n  constructor(private _gristDoc: GristDoc) {\n    super();\n  }\n\n  public buildDom() {\n    const canChangeEngine = getSupportedEngineChoices().length > 0;\n    const docPageModel = this._gristDoc.docPageModel;\n\n    return cssContainer(\n      cssHeader(t('Document Settings')),\n      cssDataRow(t(\"Time Zone:\")),\n      cssDataRow(\n        dom.create(buildTZAutocomplete, moment, fromKo(this._timezone), (val) => this._timezone.saveOnly(val))\n      ),\n      cssDataRow(t(\"Locale:\")),\n      cssDataRow(dom.create(buildLocaleSelect, this._locale)),\n      cssDataRow(t(\"Currency:\")),\n      cssDataRow(dom.domComputed(fromKo(this._locale), (l) =>\n        dom.create(buildCurrencyPicker, fromKo(this._currency), (val) => this._currency.saveOnly(val),\n          {defaultCurrencyLabel: t(\"Local currency ({{currency}})\", {currency: getCurrency(l)})})\n      )),\n      canChangeEngine ? cssDataRow([\n        // Small easter egg: you can click on the skull-and-crossbones to\n        // force a reload of the document.\n        cssDataRow(t(\"Engine (experimental {{span}} change at own risk):\", {span:\n          dom('span', '☠',\n            dom.style('cursor', 'pointer'),\n            dom.on('click', async () => {\n              await docPageModel.appModel.api.getDocAPI(docPageModel.currentDocId.get()!).forceReload();\n              document.location.reload();\n            }))\n          })),\n        select(this._engine, getSupportedEngineChoices()),\n      ]) : null,\n      cssHeader(t('API')),\n      cssDataRow(t(\"This document's ID (for API use):\")),\n      cssDataRow(cssHoverWrapper(\n        dom('tt', docPageModel.currentDocId.get()),\n        dom.on('click', async (e, d) => {\n          e.stopImmediatePropagation();\n          e.preventDefault();\n          showTransientTooltip(d, t(\"Document ID copied to clipboard\"), {\n            key: 'copy-document-id'\n          });\n          await copyToClipboard(docPageModel.currentDocId.get()!);\n        }),\n      )),\n      cssHeader(t('Webhooks'), cssBeta('Beta')),\n      cssDataRow(primaryButtonLink(t('Manage Webhooks'), urlState().setLinkUrl({docPage: 'webhook'}))),\n    );\n  }\n\n  private async _setEngine(val: EngineCode|undefined) {\n    confirmModal(t('Save and Reload'), t('Ok'), () => this._doSetEngine(val));\n  }\n\n  private async _doSetEngine(val: EngineCode|undefined) {\n    const docPageModel = this._gristDoc.docPageModel;\n    if (this._engine.get() !== val) {\n      await this._docInfo.documentSettingsJson.prop('engine').saveOnly(val);\n      await docPageModel.appModel.api.getDocAPI(docPageModel.currentDocId.get()!).forceReload();\n    }\n  }\n}\n\ntype LocaleItem = ACSelectItem & {locale?: string};\n\nfunction buildLocaleSelect(\n  owner: IDisposableOwner,\n  locale: KoSaveableObservable<string>,\n) {\n  const localeList: LocaleItem[] = locales.map(l => ({\n    value: l.name, // Use name as a value, we will translate the name into the locale on save\n    label: l.name,\n    locale: l.code,\n    cleanText: l.name.trim().toLowerCase(),\n  })).sort(propertyCompare(\"label\"));\n  const acIndex = new ACIndexImpl<LocaleItem>(localeList, 200, true);\n  // AC select will show the value (in this case locale) not a label when something is selected.\n  // To show the label - create another observable that will be in sync with the value, but\n  // will contain text.\n  const textObs = Computed.create(owner, use => {\n    const localeCode = use(locale);\n    const localeName = locales.find(l => l.code === localeCode)?.name || localeCode;\n    return localeName;\n  });\n  return buildACSelect(owner,\n    {\n      acIndex, valueObs: textObs,\n      save(_value, item: LocaleItem | undefined) {\n        if (!item) { throw new Error(\"Invalid locale\"); }\n        locale.saveOnly(item.locale!).catch(reportError);\n      },\n    },\n    testId(\"locale-autocomplete\")\n  );\n}\n\nconst cssHeader = styled(docListHeader, `\n  margin-bottom: 0;\n  &:not(:first-of-type) {\n    margin-top: 40px;\n  }\n`);\n\nconst cssContainer = styled('div', `\n  overflow-y: auto;\n  position: relative;\n  height: 100%;\n  padding: 32px 64px 24px 64px;\n  @media ${mediaSmall} {\n    & {\n      padding: 32px 24px 24px 24px;\n    }\n  }\n`);\n\nconst cssHoverWrapper = styled('div', `\n  display: inline-block;\n  cursor: default;\n  color: ${theme.lightText};\n  transition: background 0.05s;\n  &:hover {\n    background: ${theme.lightHover};\n  }\n`);\n\n// This matches the style used in showProfileModal in app/client/ui/AccountWidget.\nconst cssDataRow = styled('div', `\n  margin: 16px 0px;\n  font-size: ${vars.largeFontSize};\n  color: ${theme.text};\n  width: 360px;\n`);\n\nconst cssBeta = styled('sup', `\n  text-transform: uppercase;\n  color: ${theme.text};\n  font-size: ${vars.smallFontSize};\n  margin-left: 8px;\n`);\n\n// Check which engines can be selected in the UI, if any.\nexport function getSupportedEngineChoices(): EngineCode[] {\n  const gristConfig: GristLoadConfig = (window as any).gristConfig || {};\n  return gristConfig.supportEngines || [];\n}\n","import { AlternateActions, AlternateStorage, ProcessedAction} from 'app/common/AlternateActions';\nimport { DocAction, UserAction } from 'app/common/DocActions';\nimport { DocData } from 'app/common/DocData';\nimport max from 'lodash/max';\n\n/**\n * An implementation of an in-memory storage that can handle UserActions,\n * generating DocActions and retValues that work as for regular storage.\n * It shares an implementation with on-demand tables.\n */\nexport class DocDataCache implements AlternateStorage {\n  public docData: DocData;\n  private _altActions: AlternateActions;\n  constructor(actions?: DocAction[]) {\n    this.docData = new DocData(\n      async (tableId) => {\n        throw new Error(`no ${tableId}`);\n      },\n      null,\n    );\n    this._altActions = new AlternateActions(this);\n    for (const action of actions || []) {\n      this.docData.receiveAction(action);\n    }\n  }\n\n  public async sendTableActions(actions: UserAction[]): Promise<ProcessedAction[]> {\n    const results: ProcessedAction[] = [];\n    for (const userAction of actions) {\n      const processedAction = await this._altActions.processUserAction(userAction);\n      results.push(processedAction);\n      for (const storedAction of processedAction.stored) {\n        this.docData.receiveAction(storedAction);\n      }\n    }\n    return results;\n  }\n\n  public async fetchActionData(tableId: string, rowIds: number[], colIds?: string[]) {\n    const table = await this.docData.requireTable(tableId);\n    return table.getTableDataAction(\n      rowIds,\n      colIds,\n    );\n  }\n\n  public async getNextRowId(tableId: string): Promise<number> {\n    const table = await this.docData.requireTable(tableId);\n    return (max(table.getRowIds()) || 0) + 1;\n  }\n}\n","import { reportError } from 'app/client/models/errors';\nimport { GristDoc } from 'app/client/components/GristDoc';\nimport { DocData } from 'app/client/models/DocData';\nimport { TableData } from 'app/client/models/TableData';\nimport { concatenateSummaries, summarizeStoredAndUndo } from 'app/common/ActionSummarizer';\nimport { TableDelta } from 'app/common/ActionSummary';\nimport { ProcessedAction } from 'app/common/AlternateActions';\nimport { DisposableWithEvents } from 'app/common/DisposableWithEvents';\nimport { DocAction, TableDataAction, UserAction } from 'app/common/DocActions';\nimport { DocDataCache } from 'app/common/DocDataCache';\nimport { ColTypeMap } from 'app/common/TableData';\nimport { RowRecord } from 'app/plugin/GristData';\nimport debounce = require('lodash/debounce');\n\n/**\n * An interface for use while editing a virtual table.\n * This is the interface passed to beforeEdit and afterEdit callbacks.\n * The getRecord method gives access to the record prior to the edit;\n * the getRecordNew method gives access to (an internal copy of)\n * the record after the edit.\n * The same interface is passed in other places, in which case\n * actions and delta are trivial.\n */\nexport interface IEdit {\n  gristDoc: GristDoc,\n  actions: ProcessedAction[],  // UserActions plus corresponding DocActions (forward and undo).\n  delta: TableDelta,           // A summary of the effect actions would have (or had).\n\n  /**\n   * Apply a set of actions. The result is from the store backing the\n   * virtual table. Will not trigger beforeEdit or afterEdit callbacks.\n   */\n  patch(actions: UserAction[]): Promise<ProcessedAction[]>;\n\n  getRecord(rowId: number): RowRecord|undefined;     // A record in the table.\n  getRecordNew(rowId: number): RowRecord|undefined;  // A record in the table, after the edit.\n  getRowIds(): readonly number[];  // All rowIds in the table.\n}\n\n/**\n * Interface with a back-end for a specific virtual table.\n */\nexport interface IExternalTable {\n  name: string;  // the tableId of the virtual table (e.g. GristHidden_WebhookTable)\n  initialActions: DocAction[];  // actions to create the table.\n  fetchAll(): Promise<TableDataAction>;  // get initial state of the table.\n  sync(editor: IEdit): Promise<void>;    // incorporate external changes.\n  beforeEdit(editor: IEdit): Promise<void>;  // called prior to committing a change.\n  afterEdit(editor: IEdit): Promise<void>;   // called after committing a change.\n  afterAnySchemaChange(editor: IEdit): Promise<void>;  // called after any schema change in the document.\n}\n\n// A counter to generate unique actionNums for undo actions.\nlet _counterForUndoActions: number = 1;\n\n/**\n * A flavor of TableData that is backed by external operations and local cache.\n * This lets virtual tables \"fit in\" to a DocData instance.\n */\nexport class VirtualTableData extends TableData {\n\n  public gristDoc: GristDoc;\n  public ext: IExternalTable;\n  public cache: DocDataCache;\n\n  constructor(docData: DocData, tableId: string, tableData: TableDataAction|null, columnTypes: ColTypeMap) {\n    super(docData, tableId, tableData, columnTypes);\n  }\n\n  public setExt(_ext: IExternalTable) {\n    this.ext = _ext;\n    this.cache = new DocDataCache(this.ext.initialActions);\n  }\n\n  public get name() {\n    return this.ext.name;\n  }\n\n  public fetchData() {\n    return super.fetchData(async () => {\n      const data = await this.ext.fetchAll();\n      this.cache.docData.getTable(this.name)?.loadData(data);\n      return data;\n    });\n  }\n\n  public async sendTableActions(userActions: UserAction[]): Promise<any[]> {\n    const actions = await this._sendTableActionsCore(userActions,\n                                                     {isUser: true});\n    await this.ext.afterEdit(this._editor(actions));\n    return actions.map(action => action.retValues);\n  }\n\n  public sync() {\n    return this.ext.sync(this._editor());\n  }\n\n  public async sendTableAction(action: UserAction): Promise<any> {\n    const retValues = await this.sendTableActions([action]);\n    return retValues[0];\n  }\n\n  public async schemaChange() {\n    await this.ext.afterAnySchemaChange(this._editor());\n  }\n\n  private _editor(actions: ProcessedAction[] = []): IEdit {\n    const summary = concatenateSummaries(\n      actions\n        .map(action => summarizeStoredAndUndo(action.stored, action.undo)));\n    const delta = summary.tableDeltas[this.name];\n    return {\n      actions,\n      delta,\n      gristDoc: this.gristDoc,\n      getRecord: rowId => this.getRecord(rowId),\n      getRecordNew: rowId => this.getRecord(rowId),\n      getRowIds: () => this.getRowIds(),\n      patch: userActions => this._sendTableActionsCore(userActions, {\n        hasTableIds: true,\n        isUser: false,\n      })\n    };\n  }\n\n  private async _sendTableActionsCore(userActions: UserAction[], options: {\n    isUser: boolean,\n    isUndo?: boolean,\n    hasTableIds?: boolean,\n    actionNum?: any,\n  }): Promise<ProcessedAction[]> {\n    const {isUndo, isUser, hasTableIds} = options;\n    if (!hasTableIds) {\n      userActions.forEach((action) => action.splice(1, 0, this.tableId));\n    }\n    const actions = await this.cache.sendTableActions(userActions);\n    if (isUser) {\n      const newTable = await this.cache.docData.requireTable(this.name);\n      try {\n        await this.ext.beforeEdit({\n          ...this._editor(actions),\n          getRecordNew: rowId => newTable.getRecord(rowId),\n        });\n      } catch (e) {\n        actions.reverse();\n        for (const action of actions) {\n          await this.cache.sendTableActions(action.undo);\n        }\n        throw e;\n      }\n    }\n\n    for (const action of actions) {\n      for (const docAction of action.stored) {\n        this.docData.receiveAction(docAction);\n        this.cache.docData.receiveAction(docAction);\n        if (isUser) {\n          const code = `ext-${this.name}-${_counterForUndoActions}`;\n          _counterForUndoActions++;\n          this.gristDoc.getUndoStack().pushAction({\n            actionNum: code,\n            actionHash: 'hash',\n            fromSelf: true,\n            otherId: options.actionNum || 0,\n            linkId: 0,\n            rowIdHint: 0,\n            isUndo,\n            action,\n            op: this._doUndo.bind(this),\n          } as any);\n        }\n      }\n    }\n    return actions;\n  }\n\n\n  private async _doUndo(actionGroup: {\n    action: ProcessedAction,\n    actionNum: number|string,\n  }, isUndo: boolean) {\n    await this._sendTableActionsCore(\n      isUndo ? actionGroup.action.undo : actionGroup.action.stored,\n      {\n        isUndo,\n        isUser: true,\n        actionNum: actionGroup.actionNum,\n        hasTableIds: true,\n      });\n  }\n}\n\n/**\n * Everything needed to run a virtual table. Contains a tableData instance.\n * Subscribes to schema changes. Offers a debouncing lazySync method that\n * will attempt to synchronize the virtual table with the external source\n * one second after last call (or at most 2 seconds after the first\n * call).\n */\nexport class VirtualTable {\n  public lazySync = debounce(this.sync, 1000, {\n    maxWait: 2000,\n    trailing: true,\n  });\n  public tableData: VirtualTableData;\n\n  public constructor(private _owner: DisposableWithEvents,\n                     _gristDoc: GristDoc,\n                     _ext: IExternalTable) {\n    if (!_gristDoc.docModel.docData.getTable(_ext.name)) {\n\n      // register the virtual table\n      _gristDoc.docModel.docData.registerVirtualTable(_ext.name, VirtualTableData);\n\n      // then process initial actions\n      for (const action of _ext.initialActions) {\n        _gristDoc.docData.receiveAction(action);\n      }\n\n      // pass in gristDoc and external interface\n      this.tableData = _gristDoc.docModel.docData.getTable(_ext.name)! as VirtualTableData;\n      //this.tableData.docApi = this.docApi;\n      this.tableData.gristDoc = _gristDoc;\n      this.tableData.setExt(_ext);\n\n      // subscribe to schema changes\n      this.tableData.schemaChange().catch(e => reportError(e));\n      _owner.listenTo(_gristDoc, 'schemaUpdateAction', () => this.tableData.schemaChange());\n    } else {\n      this.tableData = _gristDoc.docModel.docData.getTable(_ext.name)! as VirtualTableData;\n    }\n    // debounce is typed as returning a promise, but doesn't appear to actually do so?\n    Promise.resolve(this.lazySync()).catch(e => reportError(e));\n  }\n\n  public async sync() {\n    if (this._owner.isDisposed()) {\n      return;\n    }\n    await this.tableData.sync();\n  }\n}\n","import {GristDoc} from 'app/client/components/GristDoc';\nimport {ViewSectionHelper} from 'app/client/components/ViewLayout';\nimport {makeT} from 'app/client/lib/localization';\nimport {reportMessage, reportSuccess} from 'app/client/models/errors';\nimport {IEdit, IExternalTable, VirtualTable} from 'app/client/models/VirtualTable';\nimport {docListHeader} from 'app/client/ui/DocMenuCss';\nimport {bigPrimaryButton} from 'app/client/ui2018/buttons';\nimport {mediaSmall, testId} from 'app/client/ui2018/cssVars';\nimport {ApiError} from 'app/common/ApiError';\nimport {DisposableWithEvents} from 'app/common/DisposableWithEvents';\nimport {\n  DocAction,\n  getColIdsFromDocAction,\n  getColValues,\n  isDataAction,\n  TableDataAction,\n  UserAction\n} from 'app/common/DocActions';\nimport {WebhookSummary} from 'app/common/Triggers';\nimport {DocAPI} from 'app/common/UserAPI';\nimport {GristObjCode, RowRecord} from 'app/plugin/GristData';\nimport {dom, styled} from 'grainjs';\nimport {observableArray, ObservableArray} from \"knockout\";\nimport omit = require('lodash/omit');\nimport pick = require('lodash/pick');\nimport range = require('lodash/range');\nimport without = require('lodash/without');\n\nconst t = makeT('WebhookPage');\n\n/**\n * A list of columns for a virtual table about webhooks.\n * The ids need to be strings.\n */\nconst WEBHOOK_COLUMNS = [\n  {\n    id: 'vt_webhook_fc1',\n    colId: 'tableId',\n    type: 'Choice',\n    label: 'Table',\n    // widgetOptions are configured later, since the choices depend\n    // on the user tables in the document.\n  },\n  {\n    id: 'vt_webhook_fc2',\n    colId: 'url',\n    type: 'Text',\n    label: 'URL',\n  },\n  {\n    id: 'vt_webhook_fc3',\n    colId: 'eventTypes',\n    type: 'ChoiceList',\n    label: 'Event Types',\n    widgetOptions: JSON.stringify({\n      widget: 'TextBox',\n      alignment: 'left',\n      choices: ['add', 'update'],\n      choiceOptions: {},\n    }),\n  },\n  {\n    id: 'vt_webhook_fc4',\n    colId: 'enabled',\n    type: 'Bool',\n    label: 'Enabled',\n    widgetOptions: JSON.stringify({\n      widget: 'Switch',\n    }),\n  },\n  {\n    id: 'vt_webhook_fc5',\n    colId: 'isReadyColumn',\n    type: 'Text',\n    label: 'Ready Column',\n  },\n  {\n    id: 'vt_webhook_fc6',\n    colId: 'webhookId',\n    type: 'Text',\n    label: 'Webhook Id',\n  },\n  {\n    id: 'vt_webhook_fc7',\n    colId: 'name',\n    type: 'Text',\n    label: 'Name',\n  },\n  {\n    id: 'vt_webhook_fc8',\n    colId: 'memo',\n    type: 'Text',\n    label: 'Memo',\n  },\n  {\n    id: 'vt_webhook_fc9',\n    colId: 'status',\n    type: 'Text',\n    label: 'Status',\n  },\n] as const;\n\n/**\n * Layout of fields in a view, with a specific ordering.\n */\nconst WEBHOOK_VIEW_FIELDS: Array<(typeof WEBHOOK_COLUMNS)[number]['colId']> = [\n  'name', 'memo',\n  'eventTypes', 'url',\n  'tableId', 'isReadyColumn',\n  'webhookId', 'enabled',\n  'status'\n];\n\n/**\n *\n * Change webhooks based on a virtual table.\n *\n * TODO: error handling is not rock-solid. If a set of actions are\n * applied all together, and one fails, then state between UI and\n * back-end may end up being inconsistent. One option would be just to\n * resync in the case of an error. In practice, the way the virtual\n * table is used in a card list, it would be hard to tickle this case\n * right now, so I'm not going to worry about it.\n *\n */\nclass WebhookExternalTable implements IExternalTable {\n  public name = 'GristHidden_WebhookTable';\n  public initialActions = _prepareWebhookInitialActions(this.name);\n  public saveableFields = [\n    'tableId', 'url', 'eventTypes', 'enabled', 'name', 'memo', 'isReadyColumn',\n  ];\n  public webhooks: ObservableArray<WebhookSummary> =  observableArray<WebhookSummary>([]);\n\n  public constructor(private _docApi: DocAPI) {\n  }\n\n  public async fetchAll(): Promise<TableDataAction> {\n    const webhooks = (await this._docApi.getWebhooks()).webhooks;\n    this._initalizeWebhookList(webhooks);\n    const indices = range(webhooks.length);\n    return ['TableData', this.name, indices.map(i => i + 1),\n      getColValues(indices.map(rowId => _mapWebhookValues(webhooks[rowId])))];\n  }\n\n  public async beforeEdit(editor: IEdit) {\n    const results = editor.actions;\n    for (const r of results) {\n      for (const d of r.stored) {\n        if (!isDataAction(d)) {\n          continue;\n        }\n        const colIds = new Set(getColIdsFromDocAction(d) || []);\n        if (colIds.has('webhookId') || colIds.has('status')) {\n          throw new Error(`Sorry, not all fields can be edited.`);\n        }\n      }\n    }\n    const delta = editor.delta;\n    for (const recId of delta.removeRows) {\n      const rec = editor.getRecord(recId);\n      if (!rec) {\n        continue;\n      }\n      await this._removeWebhook(rec);\n      reportMessage(`Removed webhook.`);\n    }\n    const updates = new Set(delta.updateRows);\n    const t2 = editor;\n    for (const recId of updates) {\n      const rec = t2.getRecordNew(recId);\n      if (rec?.webhookId) {\n        await this._updateWebhook(String(rec?.webhookId), rec);\n      }\n    }\n  }\n\n  public async afterEdit(editor: IEdit) {\n    const {delta} = editor;\n    const updates = new Set(delta.updateRows);\n    const addsAndUpdates = new Set([...delta.addRows, ...delta.updateRows]);\n    for (const recId of addsAndUpdates) {\n      const rec = editor.getRecord(recId);\n      if (!rec) {\n        continue;\n      }\n      const notes: string[] = [];\n      const values: Record<string, any> = {};\n      if (!rec.webhookId) {\n        try {\n          const webhookId = await this._addWebhook(rec);\n          values.webhookId = webhookId;\n          notes.push(\"Added\");\n        } catch (e) {\n          notes.push(\"Incomplete\" + ' | ' + this._getErrorString(e).replace(/^Error: /, '').replace('\\n', ' | '));\n        }\n      } else {\n        notes.push(\"Updated\");\n      }\n      if (!values.status) {\n        values.status = notes.join('\\n');\n      }\n      if (!updates.has(recId)) {\n        // 'enabled' needs an initial value, otherwise it is unsettable\n        values.enabled = false;\n      }\n      await editor.patch([\n        ['UpdateRecord', this.name, recId, values],\n      ]);\n    }\n  }\n\n  public async sync(editor: IEdit): Promise<void> {\n    // Map from external webhookId to local arbitrary rowId.\n    const rowMap = new Map(editor.getRowIds().map(rowId => [editor.getRecord(rowId)!.webhookId, rowId]));\n    // Provisional list of rows to remove (we'll be trimming this down\n    // as we go).\n    const toRemove = new Set(editor.getRowIds());\n    // Synchronization is done by applying a collected list of actions.\n    const actions: UserAction[] = [];\n\n    // Prepare to add or update webhook listings stored locally. Uses\n    // brute force, on the assumption that there won't be many\n    // webhooks, or that \"updating\" something that hasn't actually\n    // changed is not disruptive.\n    const webhooks = (await this._docApi.getWebhooks()).webhooks;\n    this._initalizeWebhookList(webhooks);\n    for (const webhook of webhooks) {\n      const values = _mapWebhookValues(webhook);\n      const rowId = rowMap.get(webhook.id);\n      if (rowId) {\n        toRemove.delete(rowId);\n        actions.push(\n          ['UpdateRecord', this.name, rowId, values]\n        );\n      } else {\n        actions.push(\n          ['AddRecord', this.name, null, values]\n        );\n      }\n    }\n\n    // Prepare to remove webhook rows that no longer correspond to something that\n    // exists externally.\n    for (const rowId of toRemove) {\n      if (editor.getRecord(rowId)?.webhookId) {\n        actions.push(['RemoveRecord', this.name, rowId]);\n      }\n    }\n\n    // Apply the changes.\n    await editor.patch(actions);\n  }\n\n  public async afterAnySchemaChange(editor: IEdit) {\n    // Configure the table picker, since the set of tables may have changed.\n    // TODO: should do something about the ready column picker. Right now,\n    // Grist doesn't have a good way to handle contingent choices.\n    const choices = editor.gristDoc.docModel.visibleTables.all().map(tableRec => tableRec.tableId());\n    editor.gristDoc.docData.receiveAction([\n      'UpdateRecord', '_grist_Tables_column', 'vt_webhook_fc1' as any, {\n        widgetOptions: JSON.stringify({\n          widget: 'TextBox',\n          alignment: 'left',\n          choices,\n        })\n      }]);\n  }\n\n  private _initalizeWebhookList(webhooks: WebhookSummary[]){\n\n    this.webhooks.removeAll();\n    this.webhooks.push(...webhooks);\n  }\n\n  private _getErrorString(e: ApiError): string {\n    return e.details?.userError || e.message;\n  }\n\n  private async _addWebhook(rec: RowRecord) {\n    const fields = this._prepareFields(rec);\n    // Leave enabled at default, meaning it will enable on successful\n    // creation. It seems likely we'd get support requests asking why\n    // webhooks are not working otherwise.\n    const {webhookId} = await this._docApi.addWebhook(omit(fields, 'enabled'));\n    return webhookId;\n  }\n\n  private async _updateWebhook(id: string, rec: RowRecord) {\n    const fields = this._prepareFields(rec);\n    if (Object.keys(fields).length) {\n      await this._docApi.updateWebhook({id, fields});\n    }\n  }\n\n  private async _removeWebhook(rec: RowRecord) {\n    if (rec.webhookId) {\n      await this._docApi.removeWebhook(String(rec.webhookId), String(rec.tableId));\n    }\n  }\n\n  /**\n   * Perform some transformations for sending fields to api:\n   *   - (1) removes all non saveble props and\n   *   - (2) removes the leading 'L' from eventTypes.\n   */\n  private _prepareFields(fields: any) {\n    fields = pick(fields, ...this.saveableFields);\n    if (fields.eventTypes) {\n      fields.eventTypes = without(fields.eventTypes, 'L');\n    }\n    return fields;\n  }\n}\n\n/**\n * Visualize webhooks. There's a button to clear the queue, and\n * a card list of webhooks.\n */\nexport class WebhookPage extends DisposableWithEvents {\n\n  public docApi = this.gristDoc.docPageModel.appModel.api.getDocAPI(this.gristDoc.docId());\n  public sharedTable: VirtualTable;\n  private _webhookExternalTable: WebhookExternalTable;\n\n\n  constructor(public gristDoc: GristDoc) {\n    super();\n    //this._webhooks = observableArray<WebhookSummary>();\n    this._webhookExternalTable = new WebhookExternalTable(this.docApi);\n    const table = new VirtualTable(this, gristDoc, this._webhookExternalTable);\n    this.listenTo(gristDoc, 'webhooks', async () => {\n      await table.lazySync();\n\n    });\n  }\n\n\n\n  public buildDom() {\n    const viewSectionModel = this.gristDoc.docModel.viewSections.getRowModel('vt_webhook_fs1' as any);\n    ViewSectionHelper.create(this, this.gristDoc, viewSectionModel);\n    return cssContainer(\n      cssHeader(t('Webhook Settings')),\n      cssControlRow(\n        bigPrimaryButton(t(\"Clear Queue\"),\n          dom.on('click', () => this.reset()),\n          testId('webhook-reset'),\n        )\n      ),\n      // active_section here is a bit of a hack, to allow tests to run\n      // more easily.\n      dom('div.active_section.view_data_pane_container.flexvbox', viewSectionModel.viewInstance()!.viewPane),\n    );\n  }\n\n  public async reset() {\n    await this.docApi.flushWebhooks();\n    reportSuccess('Cleared webhook queue.');\n  }\n\n  public async resetSelected(id: string) {\n    await this.docApi.flushWebhook(id);\n    reportSuccess(`Cleared webhook ${id} queue.`);\n  }\n}\n\nconst cssHeader = styled(docListHeader, `\n  margin-bottom: 0;\n  &:not(:first-of-type) {\n    margin-top: 40px;\n  }\n`);\n\nconst cssControlRow = styled('div', `\n  flex: none;\n  margin-bottom: 16px;\n  margin-top: 16px;\n  display: flex;\n  gap: 16px;\n`);\n\nconst cssContainer = styled('div', `\n  overflow-y: auto;\n  position: relative;\n  height: 100%;\n  padding: 32px 64px 24px 64px;\n\n  display: flex;\n  flex-direction: column;\n  @media ${mediaSmall} {\n    & {\n      padding: 32px 24px 24px 24px;\n    }\n  }\n`);\n\n\n/**\n * Actions needed to create the virtual table about webhooks, and a\n * view for it. There are some \"any\" casts to place string ids where\n * numbers are expected.\n */\nfunction _prepareWebhookInitialActions(tableId: string): DocAction[] {\n  return [[\n    // Add the virtual table.\n    'AddTable', tableId,\n    WEBHOOK_COLUMNS.map(col => ({\n      isFormula: true,\n      type: 'Any',\n      formula: '',\n      id: col.colId\n    }))\n  ], [\n    // Add an entry for the virtual table.\n    'AddRecord', '_grist_Tables', 'vt_webhook_ft1' as any, {tableId, primaryViewId: 0},\n  ], [\n    // Add entries for the columns of the virtual table.\n    'BulkAddRecord', '_grist_Tables_column',\n    WEBHOOK_COLUMNS.map(col => col.id) as any, getColValues(WEBHOOK_COLUMNS.map(rec =>\n      Object.assign({\n        isFormula: false,\n        formula: '',\n        widgetOptions: '',\n        parentId: 'vt_webhook_ft1' as any,\n      }, omit(rec, ['id']) as any))),\n  ], [\n    // Add a view section.\n    'AddRecord', '_grist_Views_section', 'vt_webhook_fs1' as any,\n    {tableRef: 'vt_webhook_ft1', parentKey: 'detail', title: '', borderWidth: 1, defaultWidth: 100, theme: 'blocks'}\n  ], [\n    // List the fields shown in the view section.\n    'BulkAddRecord', '_grist_Views_section_field', WEBHOOK_VIEW_FIELDS.map((_, i) => `vt_webhook_ff${i + 1}`) as any, {\n      colRef: WEBHOOK_VIEW_FIELDS.map(colId => WEBHOOK_COLUMNS.find(r => r.colId === colId)!.id),\n      parentId: WEBHOOK_VIEW_FIELDS.map(() => 'vt_webhook_fs1'),\n      parentPos: WEBHOOK_VIEW_FIELDS.map((_, i) => i),\n    }\n  ]];\n}\n\n/**\n * Map a webhook summary to a webhook table raw record.  The main\n * difference is that `eventTypes` is tweaked to be in a cell format,\n * and `status` is converted to a string.\n */\nfunction _mapWebhookValues(webhookSummary: WebhookSummary): Partial<WebhookSchemaType> {\n  const fields = webhookSummary.fields;\n  const {eventTypes} = fields;\n  return {\n    ...fields,\n    webhookId: webhookSummary.id,\n    status: JSON.stringify(webhookSummary.usage),\n    eventTypes: [GristObjCode.List, ...eventTypes],\n  };\n}\n\ntype WebhookSchemaType = {\n  [prop in keyof WebhookSummary['fields']]: WebhookSummary['fields'][prop]\n} & {\n  eventTypes: [GristObjCode, ...unknown[]];\n  status: string;\n  webhookId: string;\n}\n","import { makeT } from 'app/client/lib/localization';\nimport * as commands from 'app/client/components/commands';\nimport { urlState } from 'app/client/models/gristUrlState';\nimport { IOnBoardingMsg, startOnBoarding } from \"app/client/ui/OnBoardingPopups\";\nimport { ShortcutKey, ShortcutKeyContent } from 'app/client/ui/ShortcutKey';\nimport { theme } from 'app/client/ui2018/cssVars';\nimport { icon } from \"app/client/ui2018/icons\";\nimport { cssLink } from \"app/client/ui2018/links\";\nimport { dom, styled } from \"grainjs\";\n\nconst t = makeT('WelcomeTour');\n\nexport const WelcomeTour: IOnBoardingMsg[] = [\n  {\n    title: t('Editing Data'),\n    body: () => [\n      dom('p',\n        t('Double-click or hit {{enter}} on a cell to edit it. ', {\n          enter: ShortcutKey(ShortcutKeyContent(t('Enter'))),\n        }),\n        t('Start with {{equal}} to enter a formula.', {\n          equal: ShortcutKey(ShortcutKeyContent('=')),\n        })),\n    ],\n    selector: '.field_clip',\n    placement: 'bottom',\n  },\n  {\n    selector: '.tour-creator-panel',\n    title: t('Configuring your document'),\n    body: () => [\n      dom('p',\n          t('Toggle the {{creatorPanel}} to format columns, ', {creatorPanel: dom('em', t('creator panel'))}),\n          t('convert to card view, select data, and more.')\n         )\n    ],\n    placement: 'left',\n    cropPadding: true,\n  },\n  {\n    selector: '.tour-type-selector',\n    title: t('Customizing columns'),\n    body: () => [\n      dom('p',\n          t('Set formatting options, formulas, or column types, such as dates, choices, or attachments. ')),\n      dom('p',\n          t('Make it relational! Use the {{ref}} type to link tables. ', {\n            ref: ShortcutKey(t('Reference')),\n          })),\n    ],\n    placement: 'right',\n  },\n  {\n    selector: '.tour-add-new',\n    title: t('Building up'),\n    body: () => [\n      dom('p', t('Use {{addNew}} to add widgets, pages, or import more data. ', {\n        addNew: ShortcutKey(t('Add New')),\n      })),\n    ],\n    placement: 'right',\n  },\n  {\n    selector: '.tour-share-icon',\n    title: t('Sharing'),\n    body: () => [\n      dom('p', t('Use the Share button ({{share}}) to share the document or export data.',\n      {share: TopBarButtonIcon(t('Share'))}))\n    ],\n    placement: 'bottom',\n    cropPadding: true,\n  },\n  {\n    selector: '.tour-help-center',\n    title: t('Flying higher'),\n    body: () => [\n      dom('p', t('Use {{helpCenter}} for documentation or questions.',\n      {helpCenter: ShortcutKey(GreyIcon('Help'), t('Help Center'))}))\n    ],\n    placement: 'right',\n  },\n  {\n    selector: '.tour-welcome',\n    title: t('Welcome to Grist!'),\n    body: () => [\n      dom('p', t(\"Browse our {{templateLibrary}} to discover what's possible and get inspired.\",\n        {\n          templateLibrary: cssLink({ target: '_blank', href: urlState().makeUrl({ homePage: \"templates\" }) },\n            t('template library'), cssInlineIcon('FieldLink'))\n        }\n      )),\n    ],\n    showHasModal: true,\n  }\n\n];\n\nexport function startWelcomeTour(onFinishCB: () => void) {\n  commands.allCommands.fieldTabOpen.run();\n  startOnBoarding(WelcomeTour, onFinishCB);\n}\n\nconst TopBarButtonIcon = styled(icon, `\n  --icon-color: ${theme.topBarButtonPrimaryFg};\n`);\n\nconst GreyIcon = styled(icon, `\n  --icon-color: ${theme.shortcutKeySecondaryFg};\n  margin-right: 8px;\n`);\n\nconst cssInlineIcon = styled(icon, `\n  margin: -3px 8px 0 4px;\n`);\n","/**\n * GristDoc manages an open Grist document on the client side.\n */\n// tslint:disable:no-console\n\nimport {AccessRules} from 'app/client/aclui/AccessRules';\nimport {ActionLog} from 'app/client/components/ActionLog';\nimport BaseView from 'app/client/components/BaseView';\nimport {isNumericLike, isNumericOnly} from 'app/client/components/ChartView';\nimport {CodeEditorPanel} from 'app/client/components/CodeEditorPanel';\nimport * as commands from 'app/client/components/commands';\nimport {CursorPos} from 'app/client/components/Cursor';\nimport {CursorMonitor, ViewCursorPos} from \"app/client/components/CursorMonitor\";\nimport {DocComm} from 'app/client/components/DocComm';\nimport * as DocConfigTab from 'app/client/components/DocConfigTab';\nimport {Drafts} from \"app/client/components/Drafts\";\nimport {EditorMonitor} from \"app/client/components/EditorMonitor\";\nimport * as GridView from 'app/client/components/GridView';\nimport {importFromFile, selectAndImport} from 'app/client/components/Importer';\nimport {RawDataPage, RawDataPopup} from 'app/client/components/RawDataPage';\nimport {ActionGroupWithCursorPos, UndoStack} from 'app/client/components/UndoStack';\nimport {ViewLayout} from 'app/client/components/ViewLayout';\nimport {get as getBrowserGlobals} from 'app/client/lib/browserGlobals';\nimport {DocPluginManager} from 'app/client/lib/DocPluginManager';\nimport {ImportSourceElement} from 'app/client/lib/ImportSourceElement';\nimport {makeT} from 'app/client/lib/localization';\nimport {createSessionObs} from 'app/client/lib/sessionObs';\nimport {setTestState} from 'app/client/lib/testState';\nimport {selectFiles} from 'app/client/lib/uploads';\nimport {AppModel, reportError} from 'app/client/models/AppModel';\nimport BaseRowModel from 'app/client/models/BaseRowModel';\nimport DataTableModel from 'app/client/models/DataTableModel';\nimport {DataTableModelWithDiff} from 'app/client/models/DataTableModelWithDiff';\nimport {DocData} from 'app/client/models/DocData';\nimport {DocInfoRec, DocModel, ViewFieldRec, ViewRec, ViewSectionRec} from 'app/client/models/DocModel';\nimport {DocPageModel} from 'app/client/models/DocPageModel';\nimport {UserError} from 'app/client/models/errors';\nimport {getMainOrgUrl, urlState} from 'app/client/models/gristUrlState';\nimport {getFilterFunc, QuerySetManager} from 'app/client/models/QuerySet';\nimport {getUserOrgPrefObs, getUserOrgPrefsObs, markAsSeen} from 'app/client/models/UserPrefs';\nimport {App} from 'app/client/ui/App';\nimport {DocHistory} from 'app/client/ui/DocHistory';\nimport {startDocTour} from \"app/client/ui/DocTour\";\nimport {DocTutorial} from 'app/client/ui/DocTutorial';\nimport {DocSettingsPage} from 'app/client/ui/DocumentSettings';\nimport {isTourActive} from \"app/client/ui/OnBoardingPopups\";\nimport {IPageWidget, toPageWidget} from 'app/client/ui/PageWidgetPicker';\nimport {linkFromId, selectBy} from 'app/client/ui/selectBy';\nimport {WebhookPage} from 'app/client/ui/WebhookPage';\nimport {startWelcomeTour} from 'app/client/ui/WelcomeTour';\nimport {IWidgetType} from 'app/client/ui/widgetTypes';\nimport {PlayerState, YouTubePlayer} from 'app/client/ui/YouTubePlayer';\nimport {isNarrowScreen, mediaSmall, mediaXSmall, testId, theme} from 'app/client/ui2018/cssVars';\nimport {IconName} from 'app/client/ui2018/IconList';\nimport {icon} from 'app/client/ui2018/icons';\nimport {invokePrompt} from 'app/client/ui2018/modals';\nimport {DiscussionPanel} from 'app/client/widgets/DiscussionEditor';\nimport {FieldEditor} from \"app/client/widgets/FieldEditor\";\nimport {MinimalActionGroup} from 'app/common/ActionGroup';\nimport {ClientQuery, FilterColValues} from \"app/common/ActiveDocAPI\";\nimport {CommDocChatter, CommDocUsage, CommDocUserAction} from 'app/common/CommTypes';\nimport {delay} from 'app/common/delay';\nimport {DisposableWithEvents} from 'app/common/DisposableWithEvents';\nimport {isSchemaAction, UserAction} from 'app/common/DocActions';\nimport {OpenLocalDocResult} from 'app/common/DocListAPI';\nimport {isList, isListType, isRefListType, RecalcWhen} from 'app/common/gristTypes';\nimport {HashLink, IDocPage, isViewDocPage, SpecialDocPage, ViewDocPage} from 'app/common/gristUrls';\nimport {undef, waitObs} from 'app/common/gutil';\nimport {LocalPlugin} from \"app/common/plugin\";\nimport {StringUnion} from 'app/common/StringUnion';\nimport {TableData} from 'app/common/TableData';\nimport {DocStateComparison} from 'app/common/UserAPI';\nimport {\n  bundleChanges,\n  Computed,\n  dom,\n  DomContents,\n  Emitter,\n  fromKo,\n  Holder,\n  IDisposable,\n  IDomComponent,\n  keyframes,\n  Observable,\n  styled,\n  subscribe,\n  toKo\n} from 'grainjs';\nimport * as ko from 'knockout';\nimport cloneDeepWith = require('lodash/cloneDeepWith');\nimport isEqual = require('lodash/isEqual');\n\nconst RICK_ROLL_YOUTUBE_EMBED_ID = 'dQw4w9WgXcQ';\n\nconst t = makeT('GristDoc');\n\nconst G = getBrowserGlobals('document', 'window');\n\n// Re-export some tools to move them from main webpack bundle to the one with GristDoc.\nexport {DocComm, startDocTour};\n\nexport interface TabContent {\n  showObs?: any;\n  header?: boolean;\n  label?: any;\n  items?: any;\n  buildDom?: any;\n  keywords?: any;\n}\n\nexport interface TabOptions {\n  shortLabel?: string;\n  hideSearchContent?: boolean;\n  showObs?: any;\n  category?: any;\n}\n\nconst RightPanelTool = StringUnion(\"none\", \"docHistory\", \"validations\", \"discussion\");\n\nexport interface IExtraTool {\n  icon: IconName;\n  label: DomContents;\n  content: TabContent[] | IDomComponent;\n}\n\ninterface RawSectionOptions {\n  viewSection: ViewSectionRec;\n  hash: HashLink;\n  close: () => void;\n}\n\nexport class GristDoc extends DisposableWithEvents {\n  public docModel: DocModel;\n  public viewModel: ViewRec;\n  public activeViewId: Computed<IDocPage>;\n  public currentPageName: Observable<string>;\n  public docData: DocData;\n  public docInfo: DocInfoRec;\n  public docPluginManager: DocPluginManager;\n  public querySetManager: QuerySetManager;\n  public rightPanelTool: Observable<IExtraTool | null>;\n  public isReadonly = this.docPageModel.isReadonly;\n  public isReadonlyKo = toKo(ko, this.isReadonly);\n  public comparison: DocStateComparison | null;\n  // component for keeping track of latest cursor position\n  public cursorMonitor: CursorMonitor;\n  // component for keeping track of a cell that is being edited\n  public editorMonitor: EditorMonitor;\n  // component for keeping track of a cell that is being edited\n  public draftMonitor: Drafts;\n  // will document perform its own navigation (from anchor link)\n  public hasCustomNav: Observable<boolean>;\n  // Emitter triggered when the main doc area is resized.\n  public readonly resizeEmitter = this.autoDispose(new Emitter());\n\n  // This holds a single FieldEditor. When a new FieldEditor is created (on edit), it replaces the\n  // previous one if any. The holder is maintained by GristDoc, so that we are guaranteed at\n  // most one instance of FieldEditor at any time.\n  public readonly fieldEditorHolder = Holder.create(this);\n  // active field editor\n  public readonly activeEditor: Observable<FieldEditor | null> = Observable.create(this, null);\n\n  // Holds current view that is currently rendered\n  public currentView: Observable<BaseView | null>;\n\n  // Holds current cursor position with a view id\n  public cursorPosition: Computed<ViewCursorPos | undefined>;\n\n  public readonly userOrgPrefs = getUserOrgPrefsObs(this.docPageModel.appModel);\n\n  public readonly behavioralPromptsManager = this.docPageModel.appModel.behavioralPromptsManager;\n  // One of the section can be expanded (as requested from the Layout), we will\n  // store its id in this variable. NOTE: expanded section looks exactly the same as a section\n  // in the popup. But they are rendered differently, as section in popup is probably an external\n  // section (or raw data section) that is not part of this view. Maximized section is a section\n  // in the view, so there is no need to render it twice, layout just hides all other sections to make\n  // the space.\n  public maximizedSectionId: Observable<number | null> = Observable.create(this, null);\n  // This is id of the section that is currently shown in the popup. Probably this is an external\n  // section, like raw data view, or a section from another view..\n  public externalSectionId: Computed<number | null>;\n  public viewLayout: ViewLayout | null = null;\n\n  // Holder for the popped up formula editor.\n  public readonly formulaPopup = Holder.create(this);\n\n  public readonly currentTheme = this.docPageModel.appModel.currentTheme;\n\n  public get docApi() {\n    return this.docPageModel.appModel.api.getDocAPI(this.docPageModel.currentDocId.get()!);\n  }\n\n  private _actionLog: ActionLog;\n  private _undoStack: UndoStack;\n  private _lastOwnActionGroup: ActionGroupWithCursorPos | null = null;\n  private _rightPanelTabs = new Map<string, TabContent[]>();\n  private _docHistory: DocHistory;\n  private _discussionPanel: DiscussionPanel;\n  private _rightPanelTool = createSessionObs(this, \"rightPanelTool\", \"none\", RightPanelTool.guard);\n  private _showGristTour = getUserOrgPrefObs(this.userOrgPrefs, 'showGristTour');\n  private _seenDocTours = getUserOrgPrefObs(this.userOrgPrefs, 'seenDocTours');\n  private _rawSectionOptions: Observable<RawSectionOptions | null> = Observable.create(this, null);\n  private _activeContent: Computed<IDocPage | RawSectionOptions>;\n  private _docTutorialHolder = Holder.create<DocTutorial>(this);\n  private _isRickRowing: Observable<boolean> = Observable.create(this, false);\n  private _showBackgroundVideoPlayer: Observable<boolean> = Observable.create(this, false);\n  private _backgroundVideoPlayerHolder: Holder<YouTubePlayer> = Holder.create(this);\n  private _disableAutoStartingTours: boolean = false;\n\n\n  constructor(\n    public readonly app: App,\n    public readonly appModel: AppModel,\n    public readonly docComm: DocComm,\n    public readonly docPageModel: DocPageModel,\n    openDocResponse: OpenLocalDocResult,\n    plugins: LocalPlugin[],\n    options: {\n      comparison?: DocStateComparison  // initial comparison with another document\n    } = {}\n  ) {\n    super();\n    console.log(\"RECEIVED DOC RESPONSE\", openDocResponse);\n    this.docData = new DocData(this.docComm, openDocResponse.doc);\n    this.docModel = new DocModel(this.docData, this.docPageModel);\n    this.querySetManager = QuerySetManager.create(this, this.docModel, this.docComm);\n    this.docPluginManager = new DocPluginManager(plugins,\n      app.topAppModel.getUntrustedContentOrigin(), this.docComm, app.clientScope);\n\n    // Maintain the MetaRowModel for the global document info, including docId and peers.\n    this.docInfo = this.docModel.docInfoRow;\n\n    const defaultViewId = this.docInfo.newDefaultViewId;\n\n    // Grainjs observable for current view id, which may be a string such as 'code'.\n    this.activeViewId = Computed.create(this, (use) => {\n      const {docPage} = use(urlState().state);\n\n      // Return most special pages like 'code' and 'acl' as is\n      if (typeof docPage === 'string' && docPage !== 'GristDocTour' && SpecialDocPage.guard(docPage)) {\n        return docPage;\n      }\n\n      // GristDocTour is a special table that is usually hidden from users, but putting /p/GristDocTour\n      // in the URL navigates to it and makes it visible in the list of pages in the sidebar\n      // For GristDocTour, find the view with that name.\n      // Otherwise find the view with the given row ID, because letting a non-existent row ID pass through here is bad.\n      // If no such view exists, return the default view.\n      const viewId = this.docModel.views.tableData.findRow(docPage === 'GristDocTour' ? 'name' : 'id', docPage);\n      return viewId || use(defaultViewId);\n    });\n    this._activeContent = Computed.create(this, use => use(this._rawSectionOptions) ?? use(this.activeViewId));\n    this.externalSectionId = Computed.create(this, use => {\n      const externalContent = use(this._rawSectionOptions);\n      return externalContent ? use(externalContent.viewSection.id) : null;\n    });\n    // This viewModel reflects the currently active view, relying on the fact that\n    // createFloatingRowModel() supports an observable rowId for its argument.\n    // Although typings don't reflect it, createFloatingRowModel() accepts non-numeric values,\n    // which yield an empty row, which is why we can cast activeViewId.\n    this.viewModel = this.autoDispose(\n      this.docModel.views.createFloatingRowModel(toKo(ko, this.activeViewId) as ko.Computed<number>));\n\n    // When active section is changed, clear the maximized state.\n    this.autoDispose(this.viewModel.activeSectionId.subscribe((id) => {\n      if (id === this.maximizedSectionId.get()) {\n        return;\n      }\n      this.maximizedSectionId.set(null);\n      // If we have layout, update it.\n      if (!this.viewLayout?.isDisposed()) {\n        this.viewLayout?.maximized.set(null);\n      }\n    }));\n\n    // Grainjs observable reflecting the name of the current document page.\n    this.currentPageName = Computed.create(this, this.activeViewId,\n      (use, docPage) => typeof docPage === 'number' ? use(this.viewModel.name) : docPage);\n\n    // Whenever the active viewModel is deleted, switch to the default view.\n    this.autoDispose(this.viewModel._isDeleted.subscribe((isDeleted) => {\n      if (isDeleted) {\n        // This should not be done synchronously, as that affects the same viewModel that triggered\n        // this callback, and causes some obscure effects on knockout subscriptions.\n        Promise.resolve().then(() => urlState().pushUrl({docPage: undefined})).catch(() => null);\n      }\n    }));\n\n\n    // Subscribe to URL state, and navigate to anchor or open a popup if necessary.\n    this.autoDispose(subscribe(urlState().state, async (use, state) => {\n      if (!state.hash) {\n        return;\n      }\n\n\n      try {\n        if (state.hash.popup) {\n          await this.openPopup(state.hash);\n        } else {\n          // Navigate to an anchor if one is present in the url hash.\n          const cursorPos = this._getCursorPosFromHash(state.hash);\n          await this.recursiveMoveToCursorPos(cursorPos, true);\n        }\n\n        const isTourOrTutorialActive = isTourActive() || this.docModel.isTutorial();\n        if (state.hash.rickRow && !this._isRickRowing.get() && !isTourOrTutorialActive) {\n          YouTubePlayer.create(this._backgroundVideoPlayerHolder, RICK_ROLL_YOUTUBE_EMBED_ID, {\n            height: '100%',\n            width: '100%',\n            origin: getMainOrgUrl(),\n            playerVars: {\n              controls: 0,\n              disablekb: 1,\n              fs: 0,\n              iv_load_policy: 3,\n              modestbranding: 1,\n            },\n            onPlayerStateChange: (_player, event) => {\n              if (event.data === PlayerState.Playing) {\n                this._isRickRowing.set(true);\n              }\n            },\n          }, cssYouTubePlayer.cls(''));\n          this._showBackgroundVideoPlayer.set(true);\n          this._waitForView()\n            .then(() => {\n              const cursor = document.querySelector('.selected_cursor.active_cursor');\n              if (!cursor) {\n                return;\n              }\n\n              this.behavioralPromptsManager.showTip(cursor, 'rickRow', {\n                forceShow: true,\n                hideDontShowTips: true,\n                markAsSeen: false,\n                showOnMobile: true,\n                onDispose: () => this.playRickRollVideo(),\n              });\n            })\n            .catch(reportError);\n        }\n      } catch (e) {\n        reportError(e);\n      } finally {\n        setTimeout(finalizeAnchor, 0);\n      }\n    }));\n\n    if (this.docModel.isTutorial()) {\n      this.behavioralPromptsManager.disable();\n    }\n\n    let isStartingTourOrTutorial = false;\n    this.autoDispose(subscribe(urlState().state, async (_use, state) => {\n      // Only start a tour or tutorial when the full interface is showing, i.e. not when in\n      // embedded mode.\n      if (state.params?.style === 'singlePage') {\n        return;\n      }\n\n      const isTutorial = this.docModel.isTutorial();\n      // Onboarding tours were not designed with mobile support in mind. Disable until fixed.\n      if (isNarrowScreen() && !isTutorial) {\n        return;\n      }\n\n      // Onboarding tours can conflict with rick rowing.\n      if (state.hash?.rickRow) {\n        this._disableAutoStartingTours = true;\n      }\n\n      // If we have an active tour or tutorial (or are in the process of starting one), don't start\n      // a new one.\n      const hasActiveTourOrTutorial = isTourActive() || !this._docTutorialHolder.isEmpty();\n      if (isStartingTourOrTutorial || hasActiveTourOrTutorial) {\n        return;\n      }\n\n      const shouldStartTutorial = isTutorial;\n      const shouldStartDocTour = state.docTour || this._shouldAutoStartDocTour();\n      const shouldStartWelcomeTour = state.welcomeTour || this._shouldAutoStartWelcomeTour();\n      if (shouldStartTutorial || shouldStartDocTour || shouldStartWelcomeTour) {\n        isStartingTourOrTutorial = true;\n        try {\n          await this._waitForView();\n\n          // Remove any tour-related hash-tags from the URL. So #repeat-welcome-tour and\n          // #repeat-doc-tour are used as triggers, but will immediately disappear.\n          await urlState().pushUrl({welcomeTour: false, docTour: false},\n            {replace: true, avoidReload: true});\n\n          if (shouldStartTutorial) {\n            await DocTutorial.create(this._docTutorialHolder, this).start();\n          } else if (shouldStartDocTour) {\n            const onFinishCB = () => (\n              !this._seenDocTours.get()?.includes(this.docId())\n              && markAsSeen(this._seenDocTours, this.docId())\n            );\n            await startDocTour(this.docData, this.docComm, onFinishCB);\n          } else {\n            startWelcomeTour(() => this._showGristTour.set(false));\n          }\n        } finally {\n          isStartingTourOrTutorial = false;\n        }\n      }\n    }));\n\n    // Importer takes a function for creating previews.\n    const createPreview = (vs: ViewSectionRec) => {\n      const preview = GridView.create(this, vs, true);\n      // We need to set the instance to the newly created section. This is important, as\n      // GristDoc is responsible for changing the cursor position not the cursor itself. Final\n      // cursor position is determined by finding active (or visible) section and passing this\n      // command (setCursor) to its instance.\n      vs.viewInstance(preview);\n      preview.autoDisposeCallback(() => vs.viewInstance(null));\n      return preview;\n    };\n\n    const importSourceElems = ImportSourceElement.fromArray(this.docPluginManager.pluginsList);\n    const importMenuItems = [\n      {\n        label: t(\"Import from file\"),\n        action: () => importFromFile(this, createPreview),\n      },\n      ...importSourceElems.map(importSourceElem => ({\n        label: importSourceElem.importSource.label,\n        action: () => selectAndImport(this, importSourceElems, importSourceElem, createPreview)\n      }))\n    ];\n\n    // Set the available import sources in the DocPageModel.\n    this.docPageModel.importSources = importMenuItems;\n\n    this._actionLog = this.autoDispose(ActionLog.create({gristDoc: this}));\n    this._undoStack = this.autoDispose(UndoStack.create(openDocResponse.log, {gristDoc: this}));\n    this._docHistory = DocHistory.create(this, this.docPageModel, this._actionLog);\n    this._discussionPanel = DiscussionPanel.create(this, this);\n\n    // Tap into docData's sendActions method to save the cursor position with every action, so that\n    // undo/redo can jump to the right place.\n    this.autoDispose(this.docData.sendActionsEmitter.addListener(this._onSendActionsStart, this));\n    this.autoDispose(this.docData.sendActionsDoneEmitter.addListener(this._onSendActionsEnd, this));\n\n    /* Command binding */\n    this.autoDispose(commands.createGroup({\n      undo() {\n        this._undoStack.sendUndoAction().catch(reportError);\n      },\n      redo() {\n        this._undoStack.sendRedoAction().catch(reportError);\n      },\n      reloadPlugins() {\n        void this.docComm.reloadPlugins().then(() => G.window.location.reload(false));\n      },\n\n      // Command to be manually triggered on cell selection. Moves the cursor to the selected cell.\n      // This is overridden by the formula editor to insert \"$col\" variables when clicking cells.\n      setCursor: this.onSetCursorPos.bind(this),\n    }, this, true));\n\n    this.listenTo(app.comm, 'docUserAction', this.onDocUserAction);\n\n    this.listenTo(app.comm, 'docUsage', this.onDocUsageMessage);\n\n    this.listenTo(app.comm, 'docChatter', this.onDocChatter);\n\n    this._handleTriggerQueueOverflowMessage();\n\n    this.autoDispose(DocConfigTab.create({gristDoc: this}));\n\n    this.rightPanelTool = Computed.create(this, (use) => this._getToolContent(use(this._rightPanelTool)));\n\n    this.comparison = options.comparison || null;\n\n    // We need prevent default here to allow drop events to fire.\n    this.autoDispose(dom.onElem(window, 'dragover', (ev) => ev.preventDefault()));\n    // The default action is to open dragged files as a link, navigating out of the app.\n    this.autoDispose(dom.onElem(window, 'drop', (ev) => ev.preventDefault()));\n\n    // On window resize, trigger the resizeEmitter to update ViewLayout and individual BaseViews.\n    this.autoDispose(dom.onElem(window, 'resize', () => this.resizeEmitter.emit()));\n\n    // create current view observer\n    this.currentView = Observable.create<BaseView | null>(this, null);\n\n    // create computed observable for viewInstance - if it is loaded or not\n\n    // GrainJS will not recalculate section.viewInstance correctly because it will be\n    // modified (updated from null to a correct instance) in the same tick. We need to\n    // switch for a moment to knockout to fix this.\n    const viewInstance = fromKo(this.autoDispose(ko.pureComputed(() => {\n      const viewId = toKo(ko, this.activeViewId)();\n      if (!isViewDocPage(viewId)) {\n        return null;\n      }\n      const section = this.viewModel.activeSection();\n      if (section?.isDisposed()) { return null; }\n      const view = section.viewInstance();\n      return view;\n    })));\n\n    // then listen if the view is present, because we still need to wait for it load properly\n    this.autoDispose(viewInstance.addListener(async (view) => {\n      if (view) {\n        await view.getLoadingDonePromise();\n      }\n      if (view?.isDisposed()) {\n        return;\n      }\n      // finally set the current view as fully loaded\n      this.currentView.set(view);\n    }));\n\n    // create observable for current cursor position\n    this.cursorPosition = Computed.create<ViewCursorPos | undefined>(this, use => {\n      // get the BaseView\n      const view = use(this.currentView);\n      if (!view) {\n        return undefined;\n      }\n      const viewId = use(this.activeViewId);\n      if (!isViewDocPage(viewId)) {\n        return undefined;\n      }\n      // read latest position\n      const currentPosition = use(view.cursor.currentPosition);\n      if (currentPosition) {\n        return {...currentPosition, viewId};\n      }\n      return undefined;\n    });\n\n    this.hasCustomNav = Computed.create(this, urlState().state, (_, state) => {\n      const hash = state.hash;\n      return !!(hash && (undef(hash.colRef, hash.rowId, hash.sectionId) !== undefined));\n    });\n\n    this.draftMonitor = Drafts.create(this, this);\n    this.cursorMonitor = CursorMonitor.create(this, this);\n    this.editorMonitor = EditorMonitor.create(this, this);\n\n    // When active section is changed to a chart or custom widget, change the tab in the creator\n    // panel to the table.\n    this.autoDispose(this.viewModel.activeSection.subscribe((section) => {\n      if (section.isDisposed() || section._isDeleted.peek()) {\n        return;\n      }\n      if (['chart', 'custom'].includes(section.parentKey.peek())) {\n        commands.allCommands.viewTabFocus.run();\n      }\n    }));\n  }\n\n  /**\n   * Returns current document's id\n   */\n  public docId() {\n    return this.docPageModel.currentDocId.get()!;\n  }\n\n  // DEPRECATED This is used only for validation, which is not used anymore.\n  public addOptionsTab(label: string, iconElem: any, contentObj: TabContent[], options: TabOptions): IDisposable {\n    this._rightPanelTabs.set(label, contentObj);\n    // Return a do-nothing disposable, to satisfy the previous interface.\n    return {dispose: () => null};\n  }\n\n  /**\n   * Builds the DOM for this GristDoc.\n   */\n  public buildDom() {\n    const isMaximized = Computed.create(this, use => use(this.maximizedSectionId) !== null);\n    const isPopup = Computed.create(this, use => {\n      return ['data', 'settings'].includes(use(this.activeViewId) as any) // On Raw data or doc settings pages\n        || use(isMaximized) // Layout has a maximized section visible\n        || typeof use(this._activeContent) === 'object'; // We are on show raw data popup\n    });\n    return cssViewContentPane(\n      testId('gristdoc'),\n      cssViewContentPane.cls(\"-contents\", isPopup),\n      dom.maybe(this._isRickRowing, () => cssStopRickRowingButton(\n        cssCloseIcon('CrossBig'),\n        dom.on('click', () => {\n          this._isRickRowing.set(false);\n          this._showBackgroundVideoPlayer.set(false);\n        }),\n        testId('gristdoc-stop-rick-rowing'),\n      )),\n      dom.domComputed(this._activeContent, (content) => {\n        return  (\n          content === 'code' ? dom.create(CodeEditorPanel, this) :\n          content === 'acl' ? dom.create(AccessRules, this) :\n          content === 'data' ? dom.create(RawDataPage, this) :\n          content === 'settings' ? dom.create(DocSettingsPage, this) :\n          content === 'webhook' ? dom.create(WebhookPage, this) :\n          content === 'GristDocTour' ? null :\n          (typeof content === 'object') ? dom.create(owner => {\n            // In case user changes a page, close the popup.\n            owner.autoDispose(this.activeViewId.addListener(content.close));\n            // In case the section is removed, close the popup.\n            content.viewSection.autoDispose({dispose: content.close});\n            return dom.create(RawDataPopup, this, content.viewSection, content.close);\n          }) :\n          dom.create((owner) => {\n            this.viewLayout = ViewLayout.create(owner, this, content);\n            this.viewLayout.maximized.addListener(n => this.maximizedSectionId.set(n));\n            owner.onDispose(() => this.viewLayout = null);\n            return this.viewLayout;\n          })\n        );\n      }),\n      dom.maybe(this._showBackgroundVideoPlayer, () => [\n        cssBackgroundVideo(\n          this._backgroundVideoPlayerHolder.get()?.buildDom(),\n          cssBackgroundVideo.cls('-fade-in-and-out', this._isRickRowing),\n          testId('gristdoc-background-video'),\n        ),\n      ]),\n    );\n  }\n\n  // Open the given page. Note that links to pages should use <a> elements together with setLinkUrl().\n  public openDocPage(viewId: IDocPage) {\n    return urlState().pushUrl({docPage: viewId});\n  }\n\n  public showTool(tool: typeof RightPanelTool.type): void {\n    this._rightPanelTool.set(tool);\n  }\n\n  /**\n   * Returns an object representing the position of the cursor, including the section. It will have\n   * fields { sectionId, rowId, fieldIndex }. Fields may be missing if no section is active.\n   */\n  public getCursorPos(): CursorPos {\n    const pos = {sectionId: this.viewModel.activeSectionId()};\n    const viewInstance = this.viewModel.activeSection.peek().viewInstance.peek();\n    return Object.assign(pos, viewInstance ? viewInstance.cursor.getCursorPos() : {});\n  }\n\n  public async onSetCursorPos(rowModel: BaseRowModel | undefined, fieldModel?: ViewFieldRec) {\n    return this.setCursorPos({\n      rowIndex: rowModel?._index() || 0,\n      fieldIndex: fieldModel?._index() || 0,\n      sectionId: fieldModel?.viewSection().getRowId(),\n    });\n  }\n\n  public async setCursorPos(cursorPos: CursorPos) {\n    if (cursorPos.sectionId && cursorPos.sectionId !== this.externalSectionId.get()) {\n      const desiredSection: ViewSectionRec = this.docModel.viewSections.getRowModel(cursorPos.sectionId);\n      // If the section id is 0, the section doesn't exist (can happen during undo/redo), and should\n      // be fixed there. For now ignore it, to not create empty sections or views (peeking a view will create it).\n      if (!desiredSection.id.peek()) {\n        return;\n      }\n      // If this is completely unknown section (without a parent), it is probably an import preview.\n      if (!desiredSection.parentId.peek() && !desiredSection.isRaw.peek()) {\n        const view = desiredSection.viewInstance.peek();\n        // Make sure we have a view instance here - it will prove our assumption that this is\n        // an import preview. Section might also be disconnected during undo/redo.\n        if (view && !view.isDisposed()) {\n          view.setCursorPos(cursorPos);\n          return;\n        }\n      }\n      if (desiredSection.view.peek().getRowId() !== this.activeViewId.get()) {\n        // This may be asynchronous. In other cases, the change is synchronous, and some code\n        // relies on it (doesn't wait for this function to resolve).\n        await this._switchToSectionId(cursorPos.sectionId);\n      } else if (desiredSection !== this.viewModel.activeSection.peek()) {\n        this.viewModel.activeSectionId(cursorPos.sectionId);\n      }\n    }\n    const viewInstance = this.viewModel.activeSection.peek().viewInstance.peek();\n    viewInstance?.setCursorPos(cursorPos);\n  }\n\n  /**\n   * Switch to the view/section and scroll to the record indicated by cursorPos. If cursorPos is\n   * null, then moves to a position best suited for optActionGroup (not yet implemented).\n   */\n  public async moveToCursorPos(cursorPos?: CursorPos, optActionGroup?: MinimalActionGroup): Promise<void> {\n    if (!cursorPos || !cursorPos.sectionId) {\n      // TODO We could come up with a suitable cursorPos here based on the action itself.\n      // This should only come up if trying to undo/redo after reloading a page (since the cursorPos\n      // associated with the action is only stored in memory of the current JS process).\n      // A function like `getCursorPosForActionGroup(ag)` would also be useful to jump to the best\n      // place from any action in the action log.\n      // When user deletes table from Raw Data view, the section id will be 0 and undoing that\n      // operation will move cursor to the empty section row (with id 0).\n      return;\n    }\n    try {\n      await this.setCursorPos(cursorPos);\n    } catch (e) {\n      reportError(e);\n    }\n  }\n\n  /**\n   * Process actions received from the server by forwarding them to `docData.receiveAction()` and\n   * pushing them to actionLog.\n   */\n  public onDocUserAction(message: CommDocUserAction) {\n    console.log(\"GristDoc.onDocUserAction\", message);\n    let schemaUpdated = false;\n    /**\n     * If an operation is applied successfully to a document, and then information about\n     * it is broadcast to clients, and one of those broadcasts has a failure (due to\n     * granular access control, which is client-specific), then that error is logged on\n     * the server and also sent to the client via an `error` field.  Under normal operation,\n     * there should be no such errors, but if they do arise it is best to make them as visible\n     * as possible.\n     */\n    if (message.data.error) {\n      reportError(new Error(message.data.error));\n      return;\n    }\n    if (this.docComm.isActionFromThisDoc(message)) {\n      const docActions = message.data.docActions;\n      for (let i = 0, len = docActions.length; i < len; i++) {\n        console.log(\"GristDoc applying #%d\", i, docActions[i]);\n        this.docData.receiveAction(docActions[i]);\n        this.docPluginManager.receiveAction(docActions[i]);\n\n        if (!schemaUpdated && isSchemaAction(docActions[i])) {\n          schemaUpdated = true;\n        }\n      }\n      // Add fromSelf property to actionGroup indicating if it's from the current session.\n      const actionGroup = message.data.actionGroup;\n      actionGroup.fromSelf = message.fromSelf || false;\n      // Push to the actionLog and the undoStack.\n      if (!actionGroup.internal) {\n        this._actionLog.pushAction(actionGroup);\n        this._undoStack.pushAction(actionGroup);\n        if (actionGroup.fromSelf) {\n          this._lastOwnActionGroup = actionGroup;\n        }\n      }\n      if (schemaUpdated) {\n        this.trigger('schemaUpdateAction', docActions);\n      }\n      this.docPageModel.updateCurrentDocUsage(message.data.docUsage);\n      this.trigger('onDocUserAction', docActions);\n    }\n  }\n\n  public getUndoStack() {\n    return this._undoStack;\n  }\n\n  /**\n   * Process usage and product received from the server by updating their respective\n   * observables.\n   */\n  public onDocUsageMessage(message: CommDocUsage) {\n    if (!this.docComm.isActionFromThisDoc(message)) {\n      return;\n    }\n\n    bundleChanges(() => {\n      this.docPageModel.updateCurrentDocUsage(message.data.docUsage);\n      this.docPageModel.currentProduct.set(message.data.product ?? null);\n    });\n  }\n\n  public onDocChatter(message: CommDocChatter) {\n    if (!this.docComm.isActionFromThisDoc(message) ||\n      !message.data.webhooks) {\n      return;\n    }\n    if (message.data.webhooks.type == 'webhookOverflowError') {\n      this.trigger('webhookOverflowError',\n        t('New changes are temporarily suspended. Webhooks queue overflowed.' +\n          ' Please check webhooks settings, remove invalid webhooks, and clean the queue.'),);\n    } else {\n      this.trigger('webhooks', message.data.webhooks);\n    }\n  }\n\n  public getTableModel(tableId: string): DataTableModel {\n    return this.docModel.dataTables[tableId];\n  }\n\n  // Get a DataTableModel, possibly wrapped to include diff data if a comparison is\n  // in effect.\n  public getTableModelMaybeWithDiff(tableId: string): DataTableModel {\n    const tableModel = this.getTableModel(tableId);\n    if (!this.comparison?.details) {\n      return tableModel;\n    }\n    // TODO: cache wrapped models and share between views.\n    return new DataTableModelWithDiff(tableModel, this.comparison.details);\n  }\n\n  /**\n   * Sends an action to create a new empty table and switches to that table's primary view.\n   */\n  public async addEmptyTable(): Promise<void> {\n    const name = await this._promptForName();\n    if (name === undefined) {\n      return;\n    }\n    const tableInfo = await this.docData.sendAction(['AddEmptyTable', name || null]);\n    await this.openDocPage(this.docModel.tables.getRowModel(tableInfo.id).primaryViewId());\n  }\n\n  /**\n   * Adds a view section described by val to the current page.\n   */\n  public async addWidgetToPage(val: IPageWidget) {\n    const docData = this.docModel.docData;\n    const viewName = this.viewModel.name.peek();\n    let tableId: string | null | undefined;\n    if (val.table === 'New Table') {\n      tableId = await this._promptForName();\n      if (tableId === undefined) {\n        return;\n      }\n    }\n    const res = await docData.bundleActions(\n      t(\"Added new linked section to view {{viewName}}\", {viewName}),\n      () => this.addWidgetToPageImpl(val, tableId ?? null)\n    );\n\n    // The newly-added section should be given focus.\n    this.viewModel.activeSectionId(res.sectionRef);\n\n    this._maybeShowEditCardLayoutTip(val.type).catch(reportError);\n  }\n\n  /**\n   * The actual implementation of addWidgetToPage\n   */\n  public async addWidgetToPageImpl(val: IPageWidget, tableId: string | null = null) {\n    const viewRef = this.activeViewId.get();\n    const tableRef = val.table === 'New Table' ? 0 : val.table;\n    const result = await this.docData.sendAction(\n      ['CreateViewSection', tableRef, viewRef, val.type, val.summarize ? val.columns : null, tableId]\n    );\n    if (val.type === 'chart') {\n      await this._ensureOneNumericSeries(result.sectionRef);\n    }\n    await this.saveLink(val.link, result.sectionRef);\n    return result;\n  }\n\n  /**\n   * Adds a new page (aka: view) with a single view section (aka: page widget) described by `val`.\n   */\n  public async addNewPage(val: IPageWidget) {\n    if (val.table === 'New Table') {\n      const name = await this._promptForName();\n      if (name === undefined) {\n        return;\n      }\n      const result = await this.docData.sendAction(['AddEmptyTable', name]);\n      await this.openDocPage(result.views[0].id);\n    } else {\n      let result: any;\n      await this.docData.bundleActions(`Add new page`, async () => {\n        result = await this.docData.sendAction(\n          ['CreateViewSection', val.table, 0, val.type, val.summarize ? val.columns : null, null]\n        );\n        if (val.type === 'chart') {\n          await this._ensureOneNumericSeries(result.sectionRef);\n        }\n      });\n      await this.openDocPage(result.viewRef);\n      // The newly-added section should be given focus.\n      this.viewModel.activeSectionId(result.sectionRef);\n\n      this._maybeShowEditCardLayoutTip(val.type).catch(reportError);\n    }\n  }\n\n  /**\n   * Opens a dialog to upload one or multiple files as tables and then switches to the first table's\n   * primary view.\n   */\n  public async uploadNewTable(): Promise<void> {\n    const uploadResult = await selectFiles({\n      docWorkerUrl: this.docComm.docWorkerUrl,\n      multiple: true\n    });\n    if (uploadResult) {\n      const dataSource = {uploadId: uploadResult.uploadId, transforms: []};\n      const importResult = await this.docComm.finishImportFiles(dataSource, [], {});\n      const tableId = importResult.tables[0].hiddenTableId;\n      const tableRowModel = this.docModel.dataTables[tableId].tableMetaRow;\n      await this.openDocPage(tableRowModel.primaryViewId());\n    }\n  }\n\n  public async saveViewSection(section: ViewSectionRec, newVal: IPageWidget) {\n    const docData = this.docModel.docData;\n    const oldVal: IPageWidget = toPageWidget(section);\n    const viewModel = section.view();\n    const colIds = section.viewFields().all().map((f) => f.column().colId());\n\n    if (isEqual(oldVal, newVal)) {\n      // nothing to be done\n      return section;\n    }\n\n    return await this.viewLayout!.freezeUntil(docData.bundleActions(\n      t(\"Saved linked section {{title}} in view {{name}}\", {title: section.title(), name: viewModel.name()}),\n      async () => {\n\n        // if table changes or a table is made a summary table, let's replace the view section by a\n        // new one, and return.\n        if (oldVal.table !== newVal.table || oldVal.summarize !== newVal.summarize) {\n          return await this._replaceViewSection(section, oldVal, newVal);\n        }\n\n        // if type changes, let's save it.\n        if (oldVal.type !== newVal.type) {\n          await section.parentKey.saveOnly(newVal.type);\n        }\n\n        // if grouped by column changes, let's use the specific user action.\n        if (!isEqual(oldVal.columns, newVal.columns)) {\n          await docData.sendAction(\n            ['UpdateSummaryViewSection', section.getRowId(), newVal.columns]\n          );\n          // Charts needs to keep view fields consistent across update.\n          if (newVal.type === 'chart' && oldVal.type === 'chart') {\n            await this.setSectionViewFieldsFromArray(section, colIds);\n          }\n        }\n\n        // update link\n        if (oldVal.link !== newVal.link) {\n          await this.saveLink(newVal.link);\n        }\n        return section;\n      },\n      {nestInActiveBundle: true}\n    ));\n  }\n\n  // Set section's viewFields to be colIds in that order. Omit any colum id that do not belong to\n  // section's table.\n  public async setSectionViewFieldsFromArray(section: ViewSectionRec, colIds: string[]) {\n\n    // remove old view fields\n    await Promise.all(section.viewFields.peek().all().map((viewField) => (\n      this.docModel.viewFields.sendTableAction(['RemoveRecord', viewField.id()])\n    )));\n\n    // create map\n    const mapColIdToColumn = new Map();\n    for (const col of section.table().columns().all()) {\n      mapColIdToColumn.set(col.colId(), col);\n    }\n\n    // If split series and/or x-axis do not exist any more in new table, update options to make them\n    // undefined\n    if (colIds.length) {\n      if (section.optionsObj.prop('multiseries')()) {\n        if (!mapColIdToColumn.has(colIds[0])) {\n          await section.optionsObj.prop('multiseries').saveOnly(false);\n        }\n        if (colIds.length > 1 && !mapColIdToColumn.has(colIds[1])) {\n          await section.optionsObj.prop('isXAxisUndefined').saveOnly(true);\n        }\n      } else if (!mapColIdToColumn.has(colIds[0])) {\n        await section.optionsObj.prop('isXAxisUndefined').saveOnly(true);\n      }\n    }\n\n    // adds new view fields; ignore colIds that do not exist in new table.\n    await Promise.all(colIds.map((colId, i) => {\n      if (!mapColIdToColumn.has(colId)) {\n        return;\n      }\n      const colInfo = {\n        parentId: section.id(),\n        colRef: mapColIdToColumn.get(colId).id(),\n        parentPos: i\n      };\n      const action = ['AddRecord', null, colInfo];\n      return this.docModel.viewFields.sendTableAction(action);\n    }));\n  }\n\n  // Save link for a given section, by default the active section.\n  public async saveLink(linkId: string, sectionId?: number) {\n    sectionId = sectionId || this.viewModel.activeSection.peek().getRowId();\n    const link = linkFromId(linkId);\n    if (link.targetColRef) {\n      const targetTable = this.docModel.viewSections.getRowModel(sectionId).table();\n      const targetCol = this.docModel.columns.getRowModel(link.targetColRef);\n      if (targetTable.id() !== targetCol.table().id()) {\n        // targetColRef is actually not a column in the target table.\n        // This should mean that the target table is a summary table (which didn't exist when the\n        // option was selected) and targetColRef is from the source table.\n        // Change it to the corresponding summary table column instead.\n        link.targetColRef = targetTable.columns().all().find(c => c.summarySourceCol() === link.targetColRef)!.id();\n      }\n    }\n    return this.docData.sendAction(\n      ['UpdateRecord', '_grist_Views_section', sectionId, {\n        linkSrcSectionRef: link.srcSectionRef,\n        linkSrcColRef: link.srcColRef,\n        linkTargetColRef: link.targetColRef\n      }]\n    );\n  }\n\n\n  // Returns the list of all the valid links to link from one of the sections in the active view to\n  // the page widget 'widget'.\n  public selectBy(widget: IPageWidget) {\n    const viewSections = this.viewModel.viewSections.peek().peek();\n    return selectBy(this.docModel, viewSections, widget);\n  }\n\n  // Fork the document if it is in prefork mode.\n  public async forkIfNeeded() {\n    if (this.docPageModel.isPrefork.get()) {\n      await this.docComm.forkAndUpdateUrl();\n    }\n  }\n\n  // Turn the given columns into empty columns, losing any data stored in them.\n  public async clearColumns(colRefs: number[], {keepType}: { keepType?: boolean } = {}): Promise<void> {\n    await this.docModel.columns.sendTableAction(\n      ['BulkUpdateRecord', colRefs, {\n        isFormula: colRefs.map(f => true),\n        formula: colRefs.map(f => ''),\n        ...(keepType ? {} : {\n          type: colRefs.map(f => 'Any'),\n          widgetOptions: colRefs.map(f => ''),\n          visibleCol: colRefs.map(f => null),\n          displayCol: colRefs.map(f => null),\n          rules: colRefs.map(f => null),\n        }),\n        // Set recalc settings to defaults when emptying a column.\n        recalcWhen: colRefs.map(f => RecalcWhen.DEFAULT),\n        recalcDeps: colRefs.map(f => null),\n      }]\n    );\n  }\n\n  // Convert the given columns to data, saving the calculated values and unsetting the formulas.\n  public async convertIsFormula(colRefs: number[], opts: { toFormula: boolean, noRecalc?: boolean }): Promise<void> {\n    return this.docModel.columns.sendTableAction(\n      ['BulkUpdateRecord', colRefs, {\n        isFormula: colRefs.map(f => opts.toFormula),\n        recalcWhen: colRefs.map(f => opts.noRecalc ? RecalcWhen.NEVER : RecalcWhen.DEFAULT),\n        recalcDeps: colRefs.map(f => null),\n      }]\n    );\n  }\n\n  // Updates formula for a column.\n  public async updateFormula(colRef: number, formula: string): Promise<void> {\n    return this.docModel.columns.sendTableAction(\n      ['UpdateRecord', colRef, {\n        formula,\n      }]\n    );\n  }\n\n  // Convert column to pure formula column.\n  public async convertToFormula(colRef: number, formula: string): Promise<void> {\n    return this.docModel.columns.sendTableAction(\n      ['UpdateRecord', colRef, {\n        isFormula: true,\n        formula,\n        recalcWhen: RecalcWhen.DEFAULT,\n        recalcDeps: null,\n      }]\n    );\n  }\n\n  // Convert column to data column with a trigger formula\n  public async convertToTrigger(colRefs: number, formula: string): Promise<void> {\n    return this.docModel.columns.sendTableAction(\n      ['UpdateRecord', colRefs, {\n        isFormula: false,\n        formula,\n        recalcWhen: RecalcWhen.DEFAULT,\n        recalcDeps: null,\n      }]\n    );\n  }\n\n  public getCsvLink() {\n    const params = this._getDocApiDownloadParams();\n    return this.docPageModel.appModel.api.getDocAPI(this.docId()).getDownloadCsvUrl(params);\n  }\n\n  public getXlsxActiveViewLink() {\n    const params = this._getDocApiDownloadParams();\n    return this.docPageModel.appModel.api.getDocAPI(this.docId()).getDownloadXlsxUrl(params);\n  }\n\n  public hasGranularAccessRules(): boolean {\n    const rulesTable = this.docData.getMetaTable('_grist_ACLRules');\n    // To check if there are rules, ignore the default no-op rule created for an older incarnation\n    // of ACLs. It exists in older documents, and is still created for new ones. We detect it by\n    // the use of the deprecated 'permissions' field, and not the new 'permissionsText' field.\n    return rulesTable.numRecords() > rulesTable.filterRowIds({permissionsText: '', permissions: 63}).length;\n  }\n\n  /**\n   * Move to the desired cursor position.  If colRef is supplied, the cursor will be\n   * moved to a field with that colRef.  Any linked sections that need their cursors\n   * moved in order to achieve the desired outcome are handled recursively.\n   * If setAsActiveSection is true, the section in cursorPos is set as the current\n   * active section.\n   */\n  public async recursiveMoveToCursorPos(\n    cursorPos: CursorPos,\n    setAsActiveSection: boolean,\n    silent: boolean = false): Promise<boolean> {\n    try {\n      if (!cursorPos.sectionId) {\n        throw new Error('sectionId required');\n      }\n      if (!cursorPos.rowId) {\n        throw new Error('rowId required');\n      }\n      const section = this.docModel.viewSections.getRowModel(cursorPos.sectionId);\n      if (!section.id.peek()) {\n        throw new Error(`Section ${cursorPos.sectionId} does not exist`);\n      }\n      const srcSection = section.linkSrcSection.peek();\n      if (srcSection.id.peek()) {\n        // We're in a linked section, so we need to recurse to make sure the row we want\n        // will be visible.\n        const linkTargetCol = section.linkTargetCol.peek();\n        let controller: any;\n        if (linkTargetCol.colId.peek()) {\n          const destTable = await this._getTableData(section);\n          controller = destTable.getValue(cursorPos.rowId, linkTargetCol.colId.peek());\n        } else {\n          controller = cursorPos.rowId;\n        }\n        const colId = section.linkSrcCol.peek().colId.peek();\n        let srcRowId: any;\n        const isSrcSummary = srcSection.table.peek().summarySource.peek().id.peek();\n        if (!colId && !isSrcSummary) {\n          // Simple case - source linked by rowId, not a summary.\n          if (isList(controller)) {\n            // Should be a reference list. Pick the first reference.\n            controller = controller[1];  // [0] is the L type code, [1] is the first value\n          }\n          srcRowId = controller;\n        } else {\n          const srcTable = await this._getTableData(srcSection);\n          const query: ClientQuery = {tableId: srcTable.tableId, filters: {}, operations: {}};\n          if (colId) {\n            query.operations[colId] = isRefListType(section.linkSrcCol.peek().type.peek()) ? 'intersects' : 'in';\n            query.filters[colId] = isList(controller) ? controller.slice(1) : [controller];\n          } else {\n            // must be a summary -- otherwise dealt with earlier.\n            const destTable = await this._getTableData(section);\n            for (const srcCol of srcSection.table.peek().groupByColumns.peek()) {\n              const filterCol = srcCol.summarySource.peek();\n              const filterColId = filterCol.colId.peek();\n              controller = destTable.getValue(cursorPos.rowId, filterColId);\n              // If the source groupby column is a ChoiceList or RefList, then null or '' in the summary table\n              // should match against an empty list in the source table.\n              query.operations[filterColId] = isListType(filterCol.type.peek()) && !controller ? 'empty' : 'in';\n              query.filters[filterColId] = isList(controller) ? controller.slice(1) : [controller];\n            }\n          }\n          srcRowId = srcTable.getRowIds().find(getFilterFunc(this.docData, query));\n        }\n        if (!srcRowId || typeof srcRowId !== 'number') {\n          throw new Error('cannot trace rowId');\n        }\n        await this.recursiveMoveToCursorPos({\n          rowId: srcRowId,\n          sectionId: srcSection.id.peek(),\n        }, false, silent);\n      }\n      const view: ViewRec = section.view.peek();\n      const docPage: ViewDocPage = section.isRaw.peek() ? \"data\" : view.getRowId();\n      if (docPage != this.activeViewId.get()) {\n        await this.openDocPage(docPage);\n      }\n      if (setAsActiveSection) {\n        view.activeSectionId(cursorPos.sectionId);\n      }\n      const fieldIndex = cursorPos.fieldIndex;\n      const viewInstance = await waitObs(section.viewInstance);\n      if (!viewInstance) {\n        throw new Error('view not found');\n      }\n      // Give any synchronous initial cursor setting a chance to happen.\n      await delay(0);\n      viewInstance.setCursorPos({...cursorPos, fieldIndex});\n      // TODO: column selection not working on card/detail view, or getting overridden -\n      // look into it (not a high priority for now since feature not easily discoverable\n      // in this view).\n\n      // even though the cursor is at right place, the scroll could not have yet happened\n      // wait for a bit (scroll is done in a setTimeout 0)\n      await delay(0);\n      return true;\n    } catch (e) {\n      console.debug(`_recursiveMoveToCursorPos(${JSON.stringify(cursorPos)}): ${e}`);\n      if (!silent) {\n        throw new UserError('There was a problem finding the desired cell.');\n      }\n      return false;\n    }\n  }\n\n  /**\n   * Opens up an editor at cursor position\n   * @param input Optional. Cell's initial value\n   */\n  public async activateEditorAtCursor(options?: { init?: string, state?: any }) {\n    const view = await this._waitForView();\n    view?.activateEditorAtCursor(options);\n  }\n\n  /**\n   * Renames table. Method exposed primarily for tests.\n   */\n  public async renameTable(tableId: string, newTableName: string) {\n    const tableRec = this.docModel.visibleTables.all().find(tb => tb.tableId.peek() === tableId);\n    if (!tableRec) {\n      throw new UserError(`No table with id ${tableId}`);\n    }\n    await tableRec.tableName.saveOnly(newTableName);\n  }\n\n  /**\n   * Opens popup with a section data (used by Raw Data view).\n   */\n  public async openPopup(hash: HashLink) {\n    // We can only open a popup for a section.\n    if (!hash.sectionId) {\n      return;\n    }\n    // We might open popup either for a section in this view or some other section (like Raw Data Page).\n    if (this.viewModel.viewSections.peek().peek().some(s => s.id.peek() === hash.sectionId)) {\n      if (this.viewLayout) {\n        this.viewLayout.previousSectionId = this.viewModel.activeSectionId.peek();\n      }\n      this.viewModel.activeSectionId(hash.sectionId);\n      // If the anchor link is valid, set the cursor.\n      if (hash.colRef && hash.rowId) {\n        const activeSection = this.viewModel.activeSection.peek();\n        const fieldIndex = activeSection.viewFields.peek().all().findIndex(f => f.colRef.peek() === hash.colRef);\n        if (fieldIndex >= 0) {\n          const view = await this._waitForView(activeSection);\n          view?.setCursorPos({sectionId: hash.sectionId, rowId: hash.rowId, fieldIndex});\n        }\n      }\n      this.viewLayout?.maximized.set(hash.sectionId);\n      return;\n    }\n    // We will borrow active viewModel and will trick him into believing that\n    // the section from the link is his viewSection and it is active. Fortunately\n    // he doesn't care. After popup is closed, we will restore the original.\n    const prevSection = this.viewModel.activeSection.peek();\n    this.viewModel.activeSectionId(hash.sectionId);\n    // Now we have view section we want to show in the popup.\n    const popupSection = this.viewModel.activeSection.peek();\n    // We need to make it active, so that cursor on this section will be the\n    // active one. This will change activeViewSectionId on a parent view of this section,\n    // which might be a diffrent view from what we currently have. If the section is\n    // a raw data section it will use `EmptyRowModel` as raw sections don't have parents.\n    popupSection.hasFocus(true);\n    this._rawSectionOptions.set({\n      hash,\n      viewSection: popupSection,\n      close: () => {\n        // In case we are already close, do nothing.\n        if (!this._rawSectionOptions.get()) {\n          return;\n        }\n        if (popupSection !== prevSection) {\n          // We need to blur raw view section. Otherwise it will automatically be opened\n          // on raw data view. Note: raw data section doesn't have its own view, it uses\n          // empty row model as a parent (which feels like a hack).\n          if (!popupSection.isDisposed()) {\n            popupSection.hasFocus(false);\n          }\n          // We need to restore active viewSection for a view that we borrowed.\n          // When this popup was opened we tricked active view by setting its activeViewSection\n          // to our viewSection (which might be a completely diffrent section or a raw data section) not\n          // connected to this view.\n          if (!prevSection.isDisposed()) {\n            prevSection.hasFocus(true);\n          }\n        }\n        // Clearing popup data will close this popup.\n        this._rawSectionOptions.set(null);\n      }\n    });\n    // If the anchor link is valid, set the cursor.\n    if (hash.colRef && hash.rowId) {\n      const fieldIndex = popupSection.viewFields.peek().all().findIndex(f => f.colRef.peek() === hash.colRef);\n      if (fieldIndex >= 0) {\n        const view = await this._waitForView(popupSection);\n        view?.setCursorPos({sectionId: hash.sectionId, rowId: hash.rowId, fieldIndex});\n      }\n    }\n  }\n\n  /**\n   * Starts playing the music video for Never Gonna Give You Up in the background.\n   */\n  public async playRickRollVideo() {\n    const backgroundVideoPlayer = this._backgroundVideoPlayerHolder.get();\n    if (!backgroundVideoPlayer) {\n      return;\n    }\n\n    await backgroundVideoPlayer.isLoaded();\n    backgroundVideoPlayer.play();\n\n    const setVolume = async (start: number, end: number, step: number) => {\n      let volume: number;\n      const condition = start <= end\n        ? () => volume <= end\n        : () => volume >= end;\n      const afterthought = start <= end\n        ? () => volume += step\n        : () => volume -= step;\n      for (volume = start; condition(); afterthought()) {\n        backgroundVideoPlayer.setVolume(volume);\n        await delay(250);\n      }\n    };\n\n    await setVolume(0, 100, 5);\n\n    await delay(190 * 1000);\n    if (!this._isRickRowing.get()) {\n      return;\n    }\n\n    await setVolume(100, 0, 5);\n\n    this._isRickRowing.set(false);\n    this._showBackgroundVideoPlayer.set(false);\n  }\n\n  /**\n   * Waits for a view to be ready\n   */\n  private async _waitForView(popupSection?: ViewSectionRec) {\n    const sectionToCheck = popupSection ?? this.viewModel.activeSection.peek();\n    // For pages like ACL's, there isn't a view instance to wait for.\n    if (!sectionToCheck.getRowId()) {\n      return null;\n    }\n\n    async function singleWait(s: ViewSectionRec): Promise<BaseView> {\n      const view = await waitObs(\n        sectionToCheck.viewInstance,\n        vsi => Boolean(vsi && !vsi.isDisposed())\n      );\n      return view!;\n    }\n\n    let view = await singleWait(sectionToCheck);\n    if (view.isDisposed()) {\n      // If the view is disposed (it can happen, as wait is not reliable enough, because it uses\n      // subscription for testing the predicate, which might dispose object before we have a chance to test it).\n      // This can happen when section is recreating itself on a popup.\n      if (popupSection) {\n        view = await singleWait(popupSection);\n      }\n      if (view.isDisposed()) {\n        return null;\n      }\n    }\n    await view.getLoadingDonePromise();\n    // Wait extra bit for scroll to happen.\n    await delay(0);\n    return view;\n  }\n\n  private _getToolContent(tool: typeof RightPanelTool.type): IExtraTool | null {\n    switch (tool) {\n      case 'docHistory': {\n        return {icon: 'Log', label: 'Document History', content: this._docHistory};\n      }\n      case 'validations': {\n        const content = this._rightPanelTabs.get(\"Validate Data\");\n        return content ? {icon: 'Validation', label: 'Validation Rules', content} : null;\n      }\n      case 'discussion': {\n        return {icon: 'Chat', label: this._discussionPanel.buildMenu(), content: this._discussionPanel};\n      }\n      case 'none':\n      default: {\n        return null;\n      }\n    }\n  }\n\n  private async _maybeShowEditCardLayoutTip(selectedWidgetType: IWidgetType) {\n    if (\n      // Don't show the tip if a non-card widget was selected.\n      !['single', 'detail'].includes(selectedWidgetType) ||\n      // Or if we've already seen it.\n      this.behavioralPromptsManager.hasSeenTip('editCardLayout')\n    ) {\n      return;\n    }\n\n    // Open the right panel to the widget subtab.\n    commands.allCommands.viewTabOpen.run();\n\n    // Wait for the right panel to finish animation if it was collapsed before.\n    await commands.allCommands.rightPanelOpen.run();\n\n    const editLayoutButton = document.querySelector('.behavioral-prompt-edit-card-layout');\n    if (!editLayoutButton) {\n      throw new Error('GristDoc failed to find edit card layout button');\n    }\n\n    this.behavioralPromptsManager.showTip(editLayoutButton, 'editCardLayout', {\n      popupOptions: {\n        placement: 'left-start',\n      }\n    });\n  }\n\n  private async _promptForName() {\n    return await invokePrompt(\"Table name\", \"Create\", '', \"Default table name\");\n  }\n\n  private async _replaceViewSection(\n    section: ViewSectionRec,\n    oldVal: IPageWidget,\n    newVal: IPageWidget\n  ) {\n\n    const docModel = this.docModel;\n    const viewModel = section.view();\n    const docData = this.docModel.docData;\n    const options = section.options();\n    const colIds = section.viewFields().all().map((f) => f.column().colId());\n    const chartType = section.chartType();\n    const sectionTheme = section.theme();\n\n    // we must read the current layout from the view layout because it can override the one in\n    // `section.layoutSpec` (in particular it provides a default layout when missing from the\n    // latter).\n    const layoutSpec = this.viewLayout!.layoutSpec();\n\n    const sectionTitle = section.title();\n    const sectionId = section.id();\n\n    // create a new section\n    const sectionCreationResult = await this.addWidgetToPageImpl(newVal);\n\n    // update section name\n    const newSection: ViewSectionRec = docModel.viewSections.getRowModel(sectionCreationResult.sectionRef);\n    await newSection.title.saveOnly(sectionTitle);\n\n    // replace old section id with new section id in the layout spec and save\n    const newLayoutSpec = cloneDeepWith(layoutSpec, (val) => {\n      if (typeof val === 'object' && val.leaf === sectionId) {\n        return {...val, leaf: newSection.id()};\n      }\n    });\n    await viewModel.layoutSpec.saveOnly(JSON.stringify(newLayoutSpec));\n\n    // persist options\n    await newSection.options.saveOnly(options);\n\n    // charts needs to keep view fields consistent across updates\n    if (oldVal.type === 'chart' && newVal.type === 'chart') {\n      await this.setSectionViewFieldsFromArray(newSection, colIds);\n    }\n\n    // update theme, and chart type\n    await newSection.theme.saveOnly(sectionTheme);\n    await newSection.chartType.saveOnly(chartType);\n\n    // The newly-added section should be given focus.\n    this.viewModel.activeSectionId(newSection.getRowId());\n\n    // remove old section\n    await docData.sendAction(['RemoveViewSection', sectionId]);\n    return newSection;\n  }\n\n  /**\n   * Helper called before an action is sent to the server. It saves cursor position to come back to\n   * in case of Undo.\n   */\n  private _onSendActionsStart(ev: { cursorPos: CursorPos }) {\n    this._lastOwnActionGroup = null;\n    ev.cursorPos = this.getCursorPos();\n  }\n\n  /**\n   * Helper called when server responds to an action. It attaches the saved cursor position to the\n   * received action (if any), and stores also the resulting position.\n   */\n  private _onSendActionsEnd(ev: { cursorPos: CursorPos }) {\n    const a = this._lastOwnActionGroup;\n    if (a) {\n      a.cursorPos = ev.cursorPos;\n      if (a.rowIdHint) {\n        a.cursorPos.rowId = a.rowIdHint;\n      }\n    }\n  }\n\n  private _getDocApiDownloadParams() {\n    const activeSection = this.viewModel.activeSection();\n    const filters = activeSection.activeFilters.get().map(filterInfo => ({\n      colRef: filterInfo.fieldOrColumn.origCol().origColRef(),\n      filter: filterInfo.filter()\n    }));\n    const linkingFilter: FilterColValues = activeSection.linkingFilter();\n\n    return {\n      viewSection: this.viewModel.activeSectionId(),\n      tableId: activeSection.table().tableId(),\n      activeSortSpec: JSON.stringify(activeSection.activeSortSpec()),\n      filters: JSON.stringify(filters),\n      linkingFilter: JSON.stringify(linkingFilter),\n    };\n  }\n\n  /**\n   * Switch to a given sectionId, wait for it to load, and return a Promise for the instantiated\n   * viewInstance (such as an instance of GridView or DetailView).\n   */\n  private async _switchToSectionId(sectionId: number) {\n    const section: ViewSectionRec = this.docModel.viewSections.getRowModel(sectionId);\n    if (section.isRaw.peek()) {\n      // This is raw data view\n      await urlState().pushUrl({docPage: 'data'});\n      this.viewModel.activeSectionId(sectionId);\n    } else if (section.isVirtual.peek()) {\n      // this is a virtual table, and therefore a webhook page (that is the only\n      // place virtual tables are used so far)\n      await urlState().pushUrl({docPage: 'webhook'});\n      this.viewModel.activeSectionId(sectionId);\n    } else {\n      const view: ViewRec = section.view.peek();\n      await this.openDocPage(view.getRowId());\n      view.activeSectionId(sectionId);  // this.viewModel will reflect this with a delay.\n    }\n\n    // Returns the value of section.viewInstance() as soon as it is truthy.\n    return waitObs(section.viewInstance);\n  }\n\n  private async _getTableData(section: ViewSectionRec): Promise<TableData> {\n    const viewInstance = await waitObs(section.viewInstance);\n    if (!viewInstance) {\n      throw new Error('view not found');\n    }\n    await viewInstance.getLoadingDonePromise();\n    const table = this.docData.getTable(section.table.peek().tableId.peek());\n    if (!table) {\n      throw new Error('no section table');\n    }\n    return table;\n  }\n\n  /**\n   * Convert a url hash to a cursor position.\n   */\n  private _getCursorPosFromHash(hash: HashLink): CursorPos {\n    const cursorPos: CursorPos = {rowId: hash.rowId, sectionId: hash.sectionId};\n    if (cursorPos.sectionId != undefined && hash.colRef !== undefined) {\n      // translate colRef to a fieldIndex\n      const section = this.docModel.viewSections.getRowModel(cursorPos.sectionId);\n      const fieldIndex = section.viewFields.peek().all()\n        .findIndex(x => x.colRef.peek() == hash.colRef);\n      if (fieldIndex >= 0) {\n        cursorPos.fieldIndex = fieldIndex;\n      }\n    }\n    return cursorPos;\n  }\n\n  /**\n   * Returns whether a doc tour should automatically be started.\n   *\n   * Currently, tours are started if a GristDocTour table exists and the user hasn't\n   * seen the tour before.\n   */\n  private _shouldAutoStartDocTour(): boolean {\n    if (this._disableAutoStartingTours || this.docModel.isTutorial()) {\n      return false;\n    }\n\n    return this.docModel.hasDocTour() && !this._seenDocTours.get()?.includes(this.docId());\n  }\n\n  /**\n   * Returns whether a welcome tour should automatically be started.\n   *\n   * Currently, tours are started for first-time users on a personal org, as long as\n   * a doc tutorial or tour isn't available.\n   */\n  private _shouldAutoStartWelcomeTour(): boolean {\n    // If a doc tutorial or tour are available, leave the welcome tour for another\n    // doc (e.g. a new one).\n    if (this._disableAutoStartingTours || this.docModel.isTutorial() || this.docModel.hasDocTour()) {\n      return false;\n    }\n\n    // Only show the tour if one is on a personal org and can edit. This excludes templates (on\n    // the Templates org, which may have their own tour) and team sites (where user's intended\n    // role is often other than document creator).\n    const appModel = this.docPageModel.appModel;\n    if (!appModel.currentOrg?.owner || this.isReadonly.get()) {\n      return false;\n    }\n    // Use the showGristTour pref if set; otherwise default to true for anonymous users, and false\n    // for real returning users.\n    return this._showGristTour.get() ?? (!appModel.currentValidUser);\n  }\n\n  /**\n   * Makes sure that the first y-series (ie: the view fields at index 1) is a numeric series. Does\n   * not handle chart with the group by option on: it is only intended to be used to make sure that\n   * newly created chart do have a visible y series.\n   */\n  private async _ensureOneNumericSeries(id: number) {\n    const viewSection = this.docModel.viewSections.getRowModel(id);\n    const viewFields = viewSection.viewFields.peek().peek();\n\n    // If no y-series, then simply return.\n    if (viewFields.length === 1) {\n      return;\n    }\n\n    const field = viewSection.viewFields.peek().peek()[1];\n    if (isNumericOnly(viewSection.chartTypeDef.peek()) &&\n      !isNumericLike(field.column.peek())) {\n      const actions: UserAction[] = [];\n\n      // remove non-numeric field\n      actions.push(['RemoveRecord', field.id.peek()]);\n\n      // add new field\n      const newField = viewSection.hiddenColumns.peek().find((col) => isNumericLike(col));\n      if (newField) {\n        const colInfo = {\n          parentId: viewSection.id.peek(),\n          colRef: newField.id.peek(),\n        };\n        actions.push(['AddRecord', null, colInfo]);\n      }\n\n      // send actions\n      await this.docModel.viewFields.sendTableActions(actions);\n    }\n  }\n\n  private _handleTriggerQueueOverflowMessage() {\n    this.listenTo(this, 'webhookOverflowError', (err: any) => {\n      this.app.topAppModel.notifier.createNotification({\n        message: err.toString(),\n        canUserClose: false,\n        level: \"error\",\n        badgeCounter: true,\n        expireSec: 5,\n        key: 'webhookOverflowError',\n        actions: [{\n          label: t('go to webhook settings'), action: async () => {\n            await urlState().pushUrl({docPage: 'webhook'});\n          }\n        }]\n      });\n    });\n  }\n}\n\nasync function finalizeAnchor() {\n  await urlState().pushUrl({hash: {}}, {replace: true});\n  setTestState({anchorApplied: true});\n}\n\nconst cssViewContentPane = styled('div', `\n  --view-content-page-margin: 12px;\n  flex: auto;\n  display: flex;\n  flex-direction: column;\n  overflow: visible;\n  position: relative;\n  min-width: 240px;\n  margin: var(--view-content-page-margin, 12px);\n  @media ${mediaSmall} {\n    & {\n      margin: 4px;\n    }\n  }\n  @media print {\n    & {\n      margin: 0px;\n    }\n  }\n  &-contents {\n    margin: 0px;\n    overflow: hidden;\n  }\n`);\n\nconst fadeInAndOut = keyframes(`\n  0% {\n    opacity: 0.01;\n  }\n  5%, 95% {\n    opacity: 0.2;\n  }\n  100% {\n    opacity: 0.01;\n  }\n`);\n\nconst cssBackgroundVideo = styled('div', `\n  position: fixed;\n  top: 0;\n  right: 0;\n  height: 100%;\n  width: 100%;\n  opacity: 0;\n  pointer-events: none;\n\n  &-fade-in-and-out {\n    animation: ${fadeInAndOut} 200s;\n  }\n`);\n\nconst cssYouTubePlayer = styled('div', `\n  position: absolute;\n  width: 450%;\n  height: 450%;\n  top: -175%;\n  left: -175%;\n\n  @media ${mediaXSmall} {\n    & {\n      width: 450%;\n      height: 450%;\n      top: -175%;\n      left: -175%;\n    }\n  }\n`);\n\nconst cssStopRickRowingButton = styled('div', `\n  position: fixed;\n  top: 0;\n  right: 0;\n  padding: 8px;\n  margin: 16px;\n  border-radius: 24px;\n  background-color: ${theme.toastBg};\n  cursor: pointer;\n`);\n\nconst cssCloseIcon = styled(icon, `\n  height: 24px;\n  width: 24px;\n  --icon-color: ${theme.toastControlFg};\n`);\n","/**\n * This module provides the ability to render and edit hierarchical layouts of boxes. Each box may\n * contain a list of other boxes, and horizontally- and vertically-arranged lists alternating with\n * the depth in the hierarchy.\n *\n * Layout\n *    Layout is a tree of LayoutBoxes (HBoxes and VBoxes). It consists of HBoxes and VBoxes in\n *    alternating levels. The leaves of the tree are LeafBoxes, and those are the only items that\n *    may be moved around, with the structure of Boxes above them changing to accommodate.\n *\n * LayoutBox\n *    A LayoutBox is a node in the Layout tree. LayoutBoxes should typically have nothing visual\n *    about them (e.g. no borders) except their dimensions: they serve purely for layout purposes.\n *\n *    A LayoutBox may be an HBox or a VBox. An HBox may contain multiple VBoxes arranged in a row.\n *    A VBox may contain multiple HBoxes one under the other. Either kind of LayoutBox may contain\n *    a single LeafBox instead of child LayoutBoxes. No LayoutBox may be empty, and no LayoutBox\n *    may contain a single LayoutBox as a child: it must contain either multiple LayoutBox\n *    children, or a single LeafBox.\n *\n * LeafBox\n *    A LeafBox is the container for user content, i.e. what needs to be laid out, for example\n *    form elements. LeafBoxes are what the user can drag around to other location in the layout.\n *    All the LeafBoxes in a Layout together fill the entire Layout rectangle. If some parts of\n *    the layout are to be empty, they should still contain an empty LeafBox.\n *\n *    There is no separate JS class for LeafBoxes, they are simply LayoutBoxes with .layout_leaf\n *    class and set leafId and leafContent member observables.\n *\n * Floater\n *    A Floater is a rectangle that floats over the layout with the mouse pointer while the user is\n *    dragging a LeafBox. It contains the content of the LeafBox being dragged, so that the user\n *    can see what is being repositioned.\n *\n * DropOverlay\n *    An DropOverlay is a visual aid to the user to indicate area over the current LeafBox where a\n *    drop may be attempted. It also computes the \"affinity\": which border of the current LeafBox\n *    the user is trying to target as the insertion point.\n *\n * DropTargeter\n *    DropTargeter displays a set of rectangles, each of which represents a particular allowed\n *    insertion point for the element being dragged. E.g. dragging an element to the right side of\n *    a LeafBox would display a drop target for each LayoutBox up the tree that allows a sibling\n *    to be inserted on the right.\n *\n * Saving Changes\n * --------------\n *    We don't attempt to save granular changes to the layout, for each drag operation, because\n *    for the user, it's better to finish editing the layout, and only save the end result. Also,\n *    it's not so easy (the structure changes many times while dragging, and a single drag\n *    operation results in a non-trivial diff of the 'before' and 'after' layouts). So instead, we\n *    just have a way to serialize the layout to and from a JSON blob.\n */\n\n\nimport dom, {detachNode, findAncestor} from '../lib/dom';\nimport koArray, {isKoArray, KoArray} from '../lib/koArray';\nimport {cssClass, domData, foreach, scope, style, toggleClass} from '../lib/koDom';\nimport {Disposable} from 'app/client/lib/dispose';\nimport assert from 'assert';\nimport {Events as BackboneEvents} from 'backbone';\nimport * as ko from 'knockout';\nimport {computed, isObservable, observable, utils} from 'knockout';\nimport {identity, last, uniqueId} from 'underscore';\n\nexport interface ContentBox {\n  leafId: ko.Observable<any>;\n  leafContent: ko.Observable<Element|null>;\n  dom: HTMLElement|null;\n}\n\nexport interface BoxSpec {\n  leaf?: string|number;\n  size?: number;\n  children?: BoxSpec[];\n  collapsed?: BoxSpec[];\n}\n\n/**\n * A LayoutBox is the node in the hierarchy of boxes comprising the layout. This class is used for\n * rendering as well as for the code editor. Since it may be rendered many times on a page, it's\n * important for it to be efficient.\n * @param {Layout} layout: The Layout object that manages this LayoutBox.\n */\nexport class LayoutBox extends Disposable implements ContentBox {\n  public layout: Layout;\n  public dom: HTMLElement | null = null;\n  public leafId: ko.Observable<any>; // probably number for section id\n  public parentBox: ko.Observable<LayoutBox|null>;\n  public childBoxes: KoArray<LayoutBox>;\n  public leafContent: ko.Observable<Element|null>;\n  public uniqueId: string;\n  public isVBox: ko.Computed<boolean>;\n  public isHBox: ko.Computed<boolean>;\n  public isLeaf: ko.Computed<boolean>;\n  public isMaximized: ko.Computed<boolean>;\n  public isHidden: ko.Computed<boolean>;\n  public flexSize: ko.Observable<number>;\n  private _parentBeingDisposed: boolean;\n\n  public create(layout: Layout) {\n    this.layout = layout;\n    this.parentBox = observable(null as any);\n    this.childBoxes = koArray();\n    this.leafId = observable(null);\n    this.leafContent = observable(null as any);\n    this.uniqueId = uniqueId(\"lb\"); // For logging and debugging.\n\n    this.isVBox = this.autoDispose(computed(() => {\n      return this.parentBox() ? !this.parentBox()!.isVBox() : true;\n    }, this));\n    this.isHBox = this.autoDispose(computed(() => { return !this.isVBox(); }));\n    this.isLeaf = this.autoDispose(computed(() => { return this.leafId() !== null; },\n      this));\n\n    this.isMaximized = this.autoDispose(ko.pureComputed(() => {\n      const leafId = this.layout?.maximizedLeaf();\n      if (!leafId) { return false; }\n      if (leafId === this.leafId()) { return true; }\n      return this.childBoxes.all().some(function(child) { return child.isMaximized(); });\n    }, this));\n    this.isHidden = this.autoDispose(ko.pureComputed(() => {\n      // If there isn't any maximized box, then no box is hidden.\n      const maximized = this.layout?.maximizedLeaf();\n      if (!maximized) { return false; }\n      return !this.isMaximized();\n    }, this));\n\n    // flexSize represents flexWidth for VBoxes and flexHeight for HBoxes.\n    // Undesirable transition effects are likely when <1, so we set average value\n    // to 100 so that reduction below 1 is rare.\n    this.flexSize = observable(100);\n\n    this.dom = null;\n\n    // This is an optimization to avoid the wasted cost of removeFromParent during disposal.\n    this._parentBeingDisposed = false;\n\n    this.autoDisposeCallback(() => {\n      if (!this._parentBeingDisposed) {\n        this.removeFromParent();\n      }\n      this.childBoxes.peek().forEach(function(child) {\n        child._parentBeingDisposed = true;\n        child.dispose();\n      });\n    });\n  }\n  public getDom() {\n    return this.dom || (this.dom = this.autoDispose(this.buildDom()));\n  }\n  public maximize() {\n    if (this.layout.maximizedLeaf.peek() !== this.leafId.peek()) {\n      this.layout.maximizedLeaf(this.leafId());\n    } else {\n      this.layout.maximizedLeaf(null);\n    }\n  }\n  public buildDom() {\n    const self = this;\n    const wrap = this.layout.needDynamic ? identity : makeStatic;\n\n    return dom('div.layout_box',\n      toggleClass('layout_leaf', wrap(this.isLeaf)),\n      toggleClass('layout_hidden', this.isHidden),\n      toggleClass(this.layout.leafId, wrap(this.isLeaf)),\n      cssClass(wrap(function() { return self.isVBox() ? \"layout_vbox\" : \"layout_hbox\"; })),\n      cssClass(wrap(function() {\n        return (self.layout.fillWindow ? 'layout_fill_window' :\n          (self.isLastChild() ? 'layout_last_child' : null));\n      })),\n      style('--flex-grow', wrap(function() {\n        return (self.isVBox() || (self.isHBox() && self.layout.fillWindow)) ? self.flexSize() : '';\n      })),\n      domData('layoutBox', this),\n      foreach(wrap(this.childBoxes), function(layoutBox: LayoutBox) {\n        return layoutBox.getDom();\n      }),\n      scope(wrap(this.leafContent), function(leafContent: any) {\n        return leafContent;\n      })\n    );\n  }\n  /**\n   * Moves the leaf id and content from another layoutBox, unsetting them in the source one.\n   */\n  public takeLeafFrom(sourceLayoutBox: ContentBox) {\n    this.leafId(sourceLayoutBox.leafId.peek());\n    // Note that we detach the node, so that the old box doesn't destroy its DOM.\n    this.leafContent(detachNode(sourceLayoutBox.leafContent.peek()));\n    sourceLayoutBox.leafId(null);\n    sourceLayoutBox.leafContent(null);\n  }\n  public setChildren(children: LayoutBox[]) {\n    children.forEach((child) => child.parentBox(this));\n    this.childBoxes.assign(children);\n  }\n  public isFirstChild() {\n    return this.parentBox() ? this.parentBox()!.childBoxes.peek()[0] === this : true;\n  }\n  public isLastChild() {\n    // Use .all() rather than .peek() because it's used in kd.toggleClass('layout_last_child'), and\n    // we want it to automatically stay correct when childBoxes array changes.\n    return this.parentBox() ? last(this.parentBox()!.childBoxes.all()) === this : true;\n  }\n  public isDomDetached() {\n    return !(this.dom && this.dom.parentNode);\n  }\n  public getSiblingBox(isAfter: boolean) {\n    if (!this.parentBox()) {\n      return null;\n    }\n    const siblings = this.parentBox()!.childBoxes.peek();\n    let index = siblings.indexOf(this);\n    if (index < 0) {\n      return null;\n    }\n    index += (isAfter ? 1 : -1);\n    return (index < 0 || index >= siblings.length ? null : siblings[index]);\n  }\n  public _addChild(childBox: LayoutBox, isAfter: boolean, optNextSibling?: LayoutBox) {\n    assert(childBox.parentBox() === null, \"LayoutBox._addChild: child already has parentBox set\");\n    let index;\n    if (optNextSibling) {\n      index = this.childBoxes.peek().indexOf(optNextSibling) + (isAfter ? 1 : 0);\n    } else {\n      index = isAfter ? this.childBoxes.peekLength : 0;\n    }\n    childBox.parentBox(this);\n    this.childBoxes.splice(index, 0, childBox);\n  }\n  public addSibling(childBox: LayoutBox, isAfter: boolean) {\n    childBox.removeFromParent();\n    const parentBox = this.parentBox();\n    if (parentBox) {\n      // Normally, we just add a sibling as requested.\n      parentBox._addChild(childBox, isAfter, this);\n    } else {\n      // If adding a sibling to the root node (another VBox), we need to create a new root and push\n      // things down two levels (HBox and VBox), and add the sibling to the lower VBox.\n      if (this.childBoxes.peekLength === 1) {\n        // Except when the root has a single child, in which case there is already a good place to\n        // add the new node two levels lower. And we should not create another level because the\n        // root is the only place that can have a single child.\n        const lowerBox = this.childBoxes.peek()[0];\n        assert(!lowerBox.isLeaf(), 'LayoutBox.addSibling: should not have leaf as a single child');\n        lowerBox._addChild(childBox, isAfter);\n      } else {\n        // Create a new root, and add the sibling two levels lower.\n        const vbox = LayoutBox.create(this.layout);\n        const hbox = LayoutBox.create(this.layout);\n        // We don't need removeFromParent here because this only runs when there is no parent.\n        vbox._addChild(hbox, false);\n        hbox._addChild(this, false);\n        hbox._addChild(childBox, isAfter);\n        this.layout.setRoot(vbox);\n      }\n    }\n    this.layout.trigger('layoutChanged');\n  }\n  public addChild(childBox: LayoutBox, isAfter: boolean) {\n    childBox.removeFromParent();\n    if (this.isLeaf()) {\n      // Move the leaf data into a new child, then add the requested childBox.\n      const newBox = LayoutBox.create(this.layout);\n      newBox.takeLeafFrom(this);\n      this._addChild(newBox, false);\n    }\n    this._addChild(childBox, isAfter);\n    this.layout.trigger('layoutChanged');\n  }\n  public toString(): string {\n    return this.isDisposed() ? this.uniqueId + \"[disposed]\" : (this.uniqueId +\n      (this.isHBox() ? \"H\" : \"V\") +\n      (this.isLeaf() ? \"(\" + this.leafId() + \")\" :\n        \"[\" + this.childBoxes.peek().map(function(b) { return b.toString(); }).join(\",\") + \"]\")\n    );\n  }\n  public _removeChildBox(childBox: LayoutBox) {\n    //console.log(\"_removeChildBox %s from %s\", childBox.toString(), this.toString());\n    let index = this.childBoxes.peek().indexOf(childBox);\n    childBox.parentBox(null);\n    if (index >= 0) {\n      this.childBoxes.splice(index, 1);\n      this.rescaleFlexSizes();\n    }\n    if (this.childBoxes.peekLength === 1) {\n      // If we now have a single child, then something needs to collapse.\n      const lowerBox = this.childBoxes.peek()[0];\n      const parentBox = this.parentBox();\n      if (lowerBox.isLeaf()) {\n        // Move the leaf data into ourselves, and remove the lower box.\n        this.takeLeafFrom(lowerBox);\n        lowerBox.dispose();\n      } else if (parentBox) {\n        // Move grandchildren into our place within our parent, and collapse two levels.\n        // (Unless we are the root, in which case it's OK for us to have a single non-leaf child.)\n        index = parentBox.childBoxes.peek().indexOf(this);\n        assert(index >= 0, 'LayoutBox._removeChildBox: box not found in parent');\n\n        const grandchildBoxes = lowerBox.childBoxes.peek();\n        grandchildBoxes.forEach(function(box) { box.parentBox(parentBox); });\n        parentBox.childBoxes.arraySplice(index, 0, grandchildBoxes);\n\n        lowerBox.childBoxes.splice(0, lowerBox.childBoxes.peekLength);\n        this.removeFromParent();\n\n        lowerBox.dispose();\n        this.dispose();\n      }\n    }\n  }\n  /**\n   * Helper to detach a box from its parent without disposing it. If you no longer plan to reattach\n   * the box, you should probably call box.dispose().\n   */\n  public removeFromParent() {\n    if (this.parentBox()) {\n      this.parentBox()!._removeChildBox(this);\n      this.layout.trigger('layoutChanged');\n    }\n  }\n  /**\n   * Adjust flexSize values of the children so that they add up to at least 1.\n   * Otherwise, Firefox will not stretch them to the full size of the container.\n   */\n  public rescaleFlexSizes() {\n    // Just scale so that the smallest value is 1.\n    const children = this.childBoxes.peek();\n    const minSize = Math.min.apply(null, children.map(function(b) { return b.flexSize(); }));\n    if (minSize < 1) {\n      children.forEach(function(b) {\n        b.flexSize(b.flexSize() / minSize);\n      });\n    }\n  }\n}\n\n/**\n * This helper turns a value, observable, or function (as accepted by koDom functions) into a\n * plain value. It's used to build a static piece of DOM without subscribing to any of the\n * observables, to avoid the performance cost of subscribing/unsubscribing.\n */\nfunction makeStatic(valueOrFunc: any) {\n  if (isObservable(valueOrFunc) || isKoArray(valueOrFunc)) {\n    return valueOrFunc.peek();\n  } else if (typeof valueOrFunc === 'function') {\n    return valueOrFunc();\n  } else {\n    return valueOrFunc;\n  }\n}\n\n//----------------------------------------------------------------------\n\n/**\n * @event layoutChanged: Triggered on changes to the structure of the layout.\n * @event layoutResized: Triggered on non-structural changes that may affect the size of rootElem.\n */\nexport class Layout extends Disposable {\n  /**\n   * You can also find the nearest containing LayoutBox without having the Layout object itself by\n   * using Layout.Layout.getContainingBox. The Layout object is then accessible as box.layout.\n   */\n  public static getContainingBox(elem: Element|null, optContainer: any) {\n    const boxElem = findAncestor(elem, optContainer, '.layout_box');\n    return boxElem ? utils.domData.get(boxElem, 'layoutBox') : null;\n  }\n\n  public listenTo: BackboneEvents[\"listenTo\"];            // set by Backbone\n  public trigger: BackboneEvents[\"trigger\"];              // set by Backbone\n  public stopListening: BackboneEvents[\"stopListening\"];  // set by Backbone\n\n  public maximizedLeaf: ko.Observable<string|null>;\n  public rootBox: ko.Observable<LayoutBox|null>;\n  public createLeafFunc: (id: string) => HTMLElement;\n  public fillWindow: boolean;\n  public needDynamic: boolean;\n  public rootElem: HTMLElement;\n  public leafId: string;\n  private _leafIdMap: Map<any, LayoutBox>|null;\n\n  public create(boxSpec: BoxSpec, createLeafFunc: (id: string) => HTMLElement, optFillWindow: boolean) {\n    this.maximizedLeaf = observable(null as (string|null));\n    this.rootBox = observable(null as any);\n    this.createLeafFunc = createLeafFunc;\n    this._leafIdMap = null;\n    this.fillWindow = optFillWindow || false;\n    this.needDynamic = false;\n    this.rootElem = this.autoDispose(this.buildDom());\n\n    // Generates a unique id class so boxes can only be placed next to other boxes in this layout.\n    this.leafId = uniqueId('layout_leaf_');\n\n    this.buildLayout(boxSpec || {});\n\n    // Invalidate the _leafIdMap when the layout is adjusted.\n    this.listenTo(this, 'layoutChanged', () => { this._leafIdMap = null; });\n\n    this.autoDisposeCallback(() => {\n      if (this.rootBox()) {\n        this.rootBox()!.dispose();\n      }\n    });\n  }\n  /**\n   * Finds and returns the leaf layout box containing the content for the given leafId.\n   */\n  public getLeafBox(leafId: string|number) {\n    return this.getLeafIdMap().get(leafId);\n  }\n  /**\n   * Returns the list of all leafIds present in this layout.\n   */\n  public getAllLeafIds() {\n    return Array.from(this.getLeafIdMap().keys());\n  }\n  public setRoot(layoutBox: LayoutBox) {\n    this.rootBox(layoutBox);\n  }\n  public buildDom() {\n    return dom('div.layout_root',\n      domData('layoutModel', this),\n      toggleClass('layout_fill_window', this.fillWindow),\n      toggleClass('layout_box_maximized', this.maximizedLeaf),\n      scope(this.rootBox, (rootBox: LayoutBox) => {\n        return rootBox ? rootBox.getDom() : null;\n      })\n    );\n  }\n  /**\n   * Calls cb on each box in the layout recursively.\n   */\n  public forEachBox(cb: (box: LayoutBox) => void, optContext?: any) {\n    if (!this.rootBox.peek()) {\n      return;\n    }\n    function iter(box: any) {\n      cb.call(optContext, box);\n      box.childBoxes.peek().forEach(iter);\n    }\n    iter(this.rootBox.peek());\n  }\n  public buildLayoutBox(boxSpec: BoxSpec) {\n    // Note that this is hot code: it runs when rendering a layout for each record, not only for the\n    // layout editor.\n    const box = LayoutBox.create(this);\n    if (boxSpec.size) {\n      box.flexSize(boxSpec.size);\n    }\n    if (boxSpec.leaf) {\n      box.leafId(boxSpec.leaf);\n      box.leafContent(this.createLeafFunc(box.leafId()!));\n    } else if (boxSpec.children) {\n      box.setChildren(boxSpec.children.map(this.buildLayoutBox, this));\n    }\n    return box;\n  }\n  public buildLayout(boxSpec: BoxSpec, needDynamic = false) {\n    this.needDynamic = needDynamic;\n    const oldRootBox = this.rootBox();\n    this.rootBox(this.buildLayoutBox(boxSpec));\n    this.trigger('layoutChanged');\n    if (oldRootBox) {\n      oldRootBox.dispose();\n    }\n  }\n  public _getBoxSpec(layoutBox: LayoutBox) {\n    const spec: BoxSpec = {};\n    if (layoutBox.isDisposed()) {\n      return spec;\n    }\n    if (layoutBox.flexSize() && layoutBox.flexSize() !== 100) {\n      spec.size = layoutBox.flexSize();\n    }\n    if (layoutBox.isLeaf()) {\n      spec.leaf = layoutBox.leafId();\n    } else {\n      spec.children = layoutBox.childBoxes.peek().map(this._getBoxSpec, this);\n    }\n    return spec;\n  }\n  public getLayoutSpec() {\n    return this._getBoxSpec(this.rootBox()!);\n  }\n  /**\n   * Returns a Map object mapping leafId to its LayoutBox. This gets invalidated on layoutAdjust\n   * events, and rebuilt on next request.\n   */\n  public getLeafIdMap() {\n    if (!this._leafIdMap) {\n      this._leafIdMap = new Map<number|string, LayoutBox>();\n      this.forEachBox((box) => {\n        const leafId = box.leafId.peek();\n        if (leafId !== null) {\n          this._leafIdMap!.set(leafId, box);\n        }\n      }, this);\n    }\n    return this._leafIdMap;\n  }\n  /**\n   * Returns a LayoutBox object containing the given DOM element, or null if not found.\n   */\n  public getContainingBox(elem: Element|null) {\n    return Layout.getContainingBox(elem, this.rootElem);\n  }\n}\n\nObject.assign(Layout.prototype, BackboneEvents);\n","/**\n * The LayoutEditor can be attached to a Layout object to allow changing it.\n *\n * Issues:\n * TODO: Hitting ESC while dragging should revert smoothly. We can collapse the original leaf, but\n * not remove it. On Cancel, we would uncollapse it, and remove the newly-inserted targetBox.\n * TODO: UNDO should work. It's OK to just rebuild the old layout without any transition. In other\n * words, this may be fine to do fully outside of LayoutEditor.\n * TODO: if mouseup over an active hint of the DropTargeter, it might be a better experience to\n * reposition to that spot.\n *\n * TEST CASES THAT SHOULD BE VERIFIED AFTER ANY CHANGE.\n * These refer to test/client/components/sampleLayout.js, testable at\n * http://localhost:8080/testKoForm.html#topTab=4.\n * 1. Drag #1 down and up its container element, pausing at borders. Elements around that border\n * should smoothly float to open space for it. Dropping it should cause no jumps.\n * 2. Drag #1 down to top of #6. A grey \"drop target\" rectangle should appear. Hovering over it\n * should open space over #6. After that, dragging to bottom of #6 and back to top of #6 should\n * open the space automatically without the \"drop target\".\n * 3. Drag #3 right and left in its container, pausing at borders. Elements should again smoothly\n * float to open space for it. Dropping it should cause no jumps.\n * 4. Drag #4 down into #5, positioning above #5, below, to the left (splitting #5 horizontally)\n * or to the right.\n * 5. Drop #4 onto the leftmost \"drop target\" on the left side of #5. It should end up as 1/3 of\n * the width of the entire layout, spanning the full height above #6. Drop it back to its place\n * between #3 and #9.\n * 6. Resizing: every vertical line should allow dragging it left or right to resize. The \"resize\"\n * mouse pointer should appear over a few pixels to the left and right of the border, it should\n * not be a difficult area to target. (This gets messed up if overflow:hidden is set on the box\n * elements.)\n * 7. Drag box 3 to trash; hovering should make it disappear from Layout, mousing back should\n * bring it back. Mouse-up over the trash icon should leave it out of the layout.\n * 8. Drag boxes 3, 9, 10, 2, 7, 1 (8 should stretch vertically), 5 to trash. They should\n * disappear with other elements shrinking or expanding to close the gap.\n * 9. Adding a new element: Drag \"+ Add New\" box to between 1 and 2. A \"drop target\" should\n * appear, allowing you to insert it. Same for adding between 3 and 4. Should be no jumps.\n * 10. Drag new element to above #3: three possible drop targets should appear. Hover over each in\n * turn, starting from the bottommost part, and make sure it gets inserted in the right level.\n */\n\n\nimport {extend, noop, pick} from 'underscore';\nimport {observable, removeNode, utils} from 'knockout';\nimport assert from 'assert';\nimport Promise from 'bluebird';\nimport {Events as BackboneEvents} from 'backbone';\n\nimport {Disposable, emptyNode} from 'app/client/lib/dispose';\nimport {Delay} from 'app/client/lib/Delay';\nimport dom from 'app/client/lib/dom';\nimport koDom from 'app/client/lib/koDom';\nimport {ContentBox, Layout, LayoutBox} from './Layout';\nimport * as ko from 'knockout';\nimport {get as getBrowserGlobals} from 'app/client/lib/browserGlobals';\n\n/**\n * Use the browser globals in a way that allows replacing them with mocks in tests.\n */\nconst G = getBrowserGlobals('document', 'window', '$');\n\n//----------------------------------------------------------------------\n\nclass HelperBox {\n  public box!: LayoutBox;\n  public scalePerFlexUnit: number = 0;\n  public nextSiblings: LayoutBox[] = [];\n  public origNextSizes: number[] = [];\n  public origSize: number = 0;\n  public sumAll: number = 0;\n  public sumPrev: number = 0;\n  public sumNext: number = 0;\n  constructor(data?: Partial<HelperBox>) {\n    if (data) {\n      extend(this, data);\n    }\n  }\n}\n\ninterface TargetPart {\n  box: LayoutBox;\n  isChild: boolean;\n  isAfter: boolean;\n}\n\ninterface JqueryUI {\n  size: { width: number, height: number };\n  position: { left: number, top: number };\n  originalPosition: { left: number, top: number };\n  originalSize: { width: number, height: number };\n}\n\ntype LeafId = string|number;\n\n/**\n * The Floater class represents a floating version of the element being dragged around. Its size\n * corresponds to the box being dragged. It lets the user see what's being repositioned.\n */\nclass Floater extends Disposable implements ContentBox {\n  public leafId: ko.Observable<LeafId|null>;\n  public leafContent: ko.Observable<Element | null>;\n  public fillWindow: boolean;\n  public dom: HTMLElement;\n  public mouseOffsetX: number;\n  public mouseOffsetY: number;\n  public lastMouseEvent: MouseEvent | null;\n\n  public create(fillWindow?: boolean) {\n    this.leafId = observable<LeafId|null>(null);\n    this.leafContent = observable<Element | null>(null);\n    this.fillWindow = fillWindow || false;\n\n    this.dom = this.autoDispose(dom('div.layout_editor_floater',\n      koDom.show(this.leafContent),\n      koDom.scope(this.leafContent, (leafContent: Element) => {\n        return leafContent;\n      })\n    ));\n    G.document.body.appendChild(this.dom);\n\n    this.mouseOffsetX = 0;\n    this.mouseOffsetY = 0;\n    this.lastMouseEvent = null;\n  }\n  public onInitialMouseMove(mouseEvent: MouseEvent, sourceBox: ContentBox) {\n    const rect = sourceBox.dom!.getBoundingClientRect();\n    this.dom.style.width = rect.width + 'px';\n    this.dom.style.height = rect.height + 'px';\n    this.mouseOffsetX = 0.2 * rect.width;\n    this.mouseOffsetY = 0.1 * rect.height;\n    this.onMouseMove(mouseEvent);\n\n    this.leafId(sourceBox.leafId());\n    this.leafContent(sourceBox.leafContent());\n    // We use a dummy non-null leafId here, to ensure that sourceBox remains considered a leaf.\n    sourceBox.leafId('empty');\n    sourceBox.leafContent(dom('div.layout_editor_empty_space',\n      koDom.style('margin', (rect.height * 0.02) + 'px'),\n      koDom.style('min-height', (rect.height * 0.96) + 'px')\n    ));\n  }\n  public onMouseUp() {\n    this.lastMouseEvent = null;\n  }\n  public onMouseMove(mouseEvent: MouseEvent) {\n    this.lastMouseEvent = mouseEvent;\n    this.dom.style.left = (mouseEvent.clientX - this.mouseOffsetX) + 'px';\n    this.dom.style.top = (mouseEvent.clientY - this.mouseOffsetY) + 'px';\n  }\n}\n\n\n\n\n//----------------------------------------------------------------------\n\n/**\n * DropOverlay is a rectangular indicator that's displayed over a leaf box under the mouse\n * pointer, and shows regions of affinity towards one of the borders. It also computes which\n * region the user is targeting, and returns an affinity value.\n */\nclass DropOverlay extends Disposable {\n  public overlayElem: HTMLElement;\n  public overlayRect: DOMRect|null;\n  public hBorder: number | null;\n  public vBorder: number | null;\n  public create() {\n    this.overlayElem = this.autoDispose(dom('div.layout_editor_drop_overlay'));\n    this.overlayRect = null;\n    this.hBorder = null;\n    this.vBorder = null;\n  }\n  /**\n   * Hides the overlay box by detaching it from the current element, if any.\n   */\n  public detach() {\n    if (this.overlayElem.parentNode) {\n      this.overlayElem.parentNode.removeChild(this.overlayElem);\n    }\n  }\n  /**\n   * Shows the overlay box over the given element.\n   */\n  public attach(targetElem: HTMLElement) {\n    const rect = this.overlayRect = targetElem.getBoundingClientRect();\n    /*\n    // If uncommented, this will show areas of affinity when hovering over a box. This is helpful in\n    // debugging, and may be helpful to users too, but makes the interface feel more cluttered.\n    if (this.overlayElem.parentNode !== targetElem) {\n      // This also automatically removes it from the old parent, if any.\n      targetElem.appendChild(this.overlayElem);\n    }\n    */\n    // Areas of affinity are essentially fat borders, proportional to width and height. In addition,\n    // to avoid overly disproportionate regions, we use twice the smaller dimension to limit the\n    // larger dimension.\n    this.hBorder = Math.floor(Math.min(rect.height, rect.width * 2) / 3);\n    this.vBorder = Math.floor(Math.min(rect.width, rect.height * 2) / 3);\n    const s = this.overlayElem.style;\n    s.borderTopWidth = s.borderBottomWidth = this.hBorder + 'px';\n    s.borderLeftWidth = s.borderRightWidth = this.vBorder + 'px';\n  }\n  /**\n   * If the mouse is over a region of affinity, returns the affinity as an 0-3 integer (see\n   * AFFINITY_NAMES above). Otherwise, returns -1.\n   */\n  public getAffinity(mouseEvent: MouseEvent) {\n    const rect = this.overlayRect!;\n    const x = mouseEvent.clientX - rect.left, y = mouseEvent.clientY - rect.top;\n    const top = getFrac(y, this.hBorder!), down = getFrac(rect.height - y, this.hBorder!);\n    const left = getFrac(x, this.vBorder!), right = getFrac(rect.width - x, this.vBorder!);\n    const minValue = Math.min(top, down, left, right);\n\n    return (minValue === Infinity ? -1 : [top, down, left, right].indexOf(minValue));\n  }\n}\n\n//----------------------------------------------------------------------\n\n/**\n * DropTargeter displays a set of rectangles, each of which represents a particular allowed\n * insertion point for the element being dragged. It only shows the insertion points at the edge\n * of a particular layoutBox as indicated by DropOverlay.\n */\nclass DropTargeter extends Disposable {\n  public listenTo: BackboneEvents[\"listenTo\"];\n  public trigger: BackboneEvents[\"trigger\"];\n  public stopListening: BackboneEvents[\"stopListening\"];\n  public rootElem: HTMLElement;\n  public targetsDom: HTMLElement|null;\n  public currentBox: LayoutBox | null;\n  public currentAffinity: number | null;\n  public delayedInsertion: Delay;\n  public activeTarget: TargetPart|null;\n\n  public create(rootElem: HTMLElement) {\n    this.rootElem = rootElem;\n    this.targetsDom = null;\n    this.currentBox = null;\n    this.currentAffinity = null;\n    this.delayedInsertion = Delay.create();\n    this.activeTarget = null;\n    this.autoDisposeCallback(this.removeTargetHints);\n  }\n  public removeTargetHints() {\n    if (this.activeTarget?.box?.dom) {\n      this.activeTarget.box.dom.style.transition = '';\n      this.activeTarget.box.dom.style.padding = '0';\n    }\n    this.activeTarget = null;\n    this.delayedInsertion.cancel();\n    if (this.targetsDom) {\n      removeNode(this.targetsDom);\n      this.targetsDom = null;\n    }\n    this.currentBox = null;\n    this.currentAffinity = null;\n  }\n  public updateTargetHints(\n    layoutBox: LayoutBox|null,\n    affinity: number,\n    overlay: DropOverlay,\n    prevTargetBox?: LayoutBox\n  ) {\n    // Nothing to update.\n    if (!layoutBox || (layoutBox === this.currentBox && affinity === this.currentAffinity)) {\n      return;\n    }\n    this.removeTargetHints();\n    if (affinity === -1) {\n      return;\n    }\n    this.currentBox = layoutBox;\n    this.currentAffinity = affinity;\n\n    const upDown = isAffinityUpDown(affinity);\n    const isAfter = isAffinityAfter(affinity);\n\n    const targetParts: TargetPart[] = [];\n    // Allow dragging a leaf into another leaf as a child, splitting the latter into two.\n    // But don't allow dragging a leaf box into itself, that makes no sense.\n    if (upDown === layoutBox.isVBox() && layoutBox !== prevTargetBox) {\n      targetParts.push({box: layoutBox, isChild: true, isAfter: isAfter});\n    }\n    while (layoutBox) {\n      if (upDown === layoutBox.isHBox()) {\n        const children = layoutBox.childBoxes.peek();\n        // If one of two children is prevTargetBox, replace the last target hint since it\n        // will be redundant once prevTargetBox is removed.\n        if (children.length === 2 && prevTargetBox?.parentBox() === layoutBox) {\n          targetParts.splice(targetParts.length - 1, 1,\n            {box: layoutBox, isChild: false, isAfter: isAfter});\n        }\n        // If there is only one child (which may happen for the root box), the target hint\n        // is redundant.\n        else if (prevTargetBox !== layoutBox && prevTargetBox !== layoutBox.getSiblingBox(isAfter) &&\n          children.length !== 1) {\n          targetParts.push({box: layoutBox, isChild: false, isAfter: isAfter});\n        }\n        if (isAfter && !layoutBox.isLastChild()) { break; }\n        if (!isAfter && !layoutBox.isFirstChild()) { break; }\n      }\n      layoutBox = layoutBox.parentBox();\n    }\n    if (targetParts.length === 0) {\n      return;\n    }\n\n    // Render the hint parts.\n    if (!isAfter) {\n      targetParts.reverse();\n    }\n\n    // The same code works for both horizontal and vertical situation. For ease of thinking about\n    // it, we pretend below that we are dealing with an up-down situation (drop hints are horizontal\n    // wide boxes stacked vertically), and use properties that are named using the up-down\n    // situation, but whose values might reflect a left-right situation.\n    const pTop = upDown ? 'top' : 'left', pHeight = upDown ? 'height' : 'width',\n          pLeft = upDown ? 'left' : 'top', pWidth = upDown ? 'width' : 'height';\n    let totalHeight = upDown ? overlay.hBorder! : overlay.vBorder!;\n    const singleHeight = Math.floor(totalHeight / targetParts.length);\n\n    // Adjust to account for the rounding-down above.\n    totalHeight = singleHeight * targetParts.length;\n\n    const outerRect = this.rootElem.getBoundingClientRect();\n    const innerRect = this.currentBox.dom!.getBoundingClientRect();\n\n    const self = this;\n    this.targetsDom = dom('div.layout_editor_drop_targeter',\n      koDom.style(pTop,\n        (innerRect[pTop] - outerRect[pTop] +\n          (isAfter ? innerRect[pHeight] - totalHeight : 0)) + 'px'\n      ),\n      targetParts.map((part, index) => {\n        const rect = part.box.dom!.getBoundingClientRect();\n        return dom('div.layout_editor_drop_target', (elem: HTMLDivElement) => {\n            elem.style[pHeight] = (singleHeight + 1) + 'px'; // 1px of overlap for better looks\n            elem.style[pWidth] = rect[pWidth] + 'px';\n            elem.style[pLeft] = (rect[pLeft] - outerRect[pLeft]) + 'px';\n            elem.style[pTop] = (singleHeight * index) + 'px';\n          },\n          dom.on('mouseenter', function(this: HTMLElement) {\n            this.classList.add(\"layout_hover\");\n            self.activeTarget = part;\n            const padDir = upDown ? (isAfter ? 'Bottom' : 'Top') : (isAfter ? 'Right' : 'Left');\n            const padding = 'padding' + padDir;\n            part.box.dom!.style.transition = 'padding .3s';\n            part.box.dom!.style[padding as any] = '20px';\n          }),\n          dom.on('mouseleave', function(this: HTMLElement) {\n            this.classList.remove(\"layout_hover\");\n            self.activeTarget = null;\n            part.box.dom!.style.padding = '0';\n          }),\n          dom.on('transitionend', this.triggerInsertion.bind(this, part))\n        );\n      })\n    );\n    this.rootElem.appendChild(this.targetsDom!);\n  }\n  public triggerInsertion(part: TargetPart) {\n    this.removeTargetHints();\n    this.trigger('insertBox', (box: LayoutBox) => {\n      if (part.isChild) {\n        part.box.addChild(box, part.isAfter);\n      } else {\n        part.box.addSibling(box, part.isAfter);\n      }\n    });\n  }\n  public accelerateInsertion() {\n    if (this.activeTarget) {\n      this.activeTarget.box.dom!.style.transition = '';\n      this.activeTarget.box.dom!.style.padding = '0';\n      this.triggerInsertion(this.activeTarget);\n    }\n  }\n}\n\nextend(DropTargeter.prototype, BackboneEvents);\n\n//----------------------------------------------------------------------\n\n/**\n * When a LayoutEditor is created for a given Layout object, it makes it possible to drag\n * LayoutBoxes to change the layout.\n *\n * When a user drags a box, its content migrates temporarily to the Floater element, which moves\n * with the mouse cursor. As the user drags, the space for the element will open up here or there,\n * by adding an appropriate empty targetBox. DropOverlay and DropTargeter together decide the\n * insertion point for the drag operations.\n *\n * NOTES:\n *  There is some awkwardness in sizing: in a vertically laid out box, the last box takes up all\n *  available space, so moving it away does not show a transition (the box transitions to empty in\n *  theory, but it still takes all the same available space).\n */\nexport class LayoutEditor extends Disposable {\n  public layout: Layout;\n  public rootElem: HTMLElement;\n  public floater: Floater;\n  public dropOverlay: DropOverlay;\n  public dropTargeter: DropTargeter;\n  public measuringBox: HTMLElement;\n\n  public listenTo: BackboneEvents[\"listenTo\"];\n  public trigger: BackboneEvents[\"trigger\"];\n  public stopListening: BackboneEvents[\"stopListening\"];\n\n  public transitionPromise: Promise<void>;\n  public trashDelay: Delay;\n  public originalBox: LayoutBox|null;\n  public targetBox: LayoutBox|null;\n  public boundMouseDown: (ev: MouseEvent, el: HTMLElement) => void;\n  public boundMouseMove: (ev: MouseEvent, el: HTMLElement) => void;\n  public boundMouseUp: (ev: MouseEvent, el: HTMLElement) => void;\n  public initialMouseDown: boolean;\n  public lastTriggered: string;\n\n  public create(layout: Layout) {\n    this.layout = layout;\n    this.rootElem = layout.rootElem;\n\n    this.layout.buildLayout(this.layout.getLayoutSpec(), true);\n    this.floater = this.autoDispose(Floater.create(this.layout.fillWindow));\n    this.dropOverlay = this.autoDispose(DropOverlay.create());\n    this.dropTargeter = this.autoDispose(DropTargeter.create(this.rootElem));\n    this.listenTo(this.dropTargeter, 'insertBox', this.onInsertBox);\n\n    // This is a place to put LayoutBoxes that should NOT be shown, but SHOULD be possible to\n    // measure. It's used when a new box is being moved into the editor.\n    this.measuringBox = this.autoDispose(dom('div.layout_editor_measuring_box'));\n    this.rootElem.appendChild(this.measuringBox);\n\n    // For better experience, we prevent new repositions while a transition is active, and we\n    // require some work (leaving and re-entering affinity area) after a previous transition ends.\n    this.transitionPromise = Promise.resolve();\n    this.trashDelay = Delay.create();\n\n    // TODO: We don't use originalBox at the moment, but may want to, specifically to collapse it\n    // without removing, and restore if the user hits \"Escape\".\n    // This is the box the user clicked, to move its content elsewhere.\n    this.originalBox = null;\n\n    // The new box into which the content is to be inserted. During a move operation, it starts out\n    // with this.originalBox.\n    this.targetBox = null;\n\n    // Make all LayoutBoxes resizable. Update whenever the layout changes.\n    this.layout.forEachBox(this.makeResizable, this);\n    this.listenTo(this.layout, 'layoutChanged', () => {\n      this.layout.forEachBox(this.makeResizable, this);\n    });\n\n    const self = this;\n    this.boundMouseDown = function(this: HTMLElement, ev: MouseEvent) {\n      return self.handleMouseDown(ev, this);\n    };\n    this.boundMouseMove = this.handleMouseMove.bind(this);\n    this.boundMouseUp = this.handleMouseUp.bind(this);\n    G.$(this.rootElem).on('mousedown', '.layout_leaf', this.boundMouseDown);\n\n    this.initialMouseDown = false;\n\n    this.lastTriggered = 'stop';\n\n    this.autoDisposeCallback(() => {\n      G.$(G.window).off('mouseup', this.boundMouseUp);\n      G.$(G.window).off('mousemove', this.boundMouseMove);\n      G.$(this.rootElem).off('mousedown', this.boundMouseDown);\n      if (!this.layout.isDisposed()) {\n        this.layout.buildLayout(this.layout.getLayoutSpec(), false);\n        this.layout.forEachBox(this.unmakeResizable, this);\n      }\n    });\n  }\n  public triggerUserEditStart() {\n    assert(this.lastTriggered === 'stop', \"UserEditStart triggered twice in succession\");\n    this.lastTriggered = 'start';\n    // This attribute allows browser tests to tell when an edit is in progress.\n    this.rootElem.setAttribute('data-useredit', 'start');\n    this.layout.trigger('layoutUserEditStart');\n  }\n  public triggerUserEditStop() {\n    assert(this.lastTriggered === 'start', \"UserEditStop triggered twice in succession\");\n    this.lastTriggered = 'stop';\n    this.layout.trigger('layoutUserEditStop');\n    // This attribute allows browser tests to tell when an edit is finished.\n    this.rootElem.setAttribute('data-useredit', 'stop');\n  }\n  public makeResizable(box: LayoutBox) {\n    // Do not add resizable if:\n    // Box already resizable, box is not vertically resizable, box is last in it`s group.\n    if (G.$(box.dom).resizable('instance') || (box.isHBox() && !this.layout.fillWindow) ||\n      box.isLastChild()) {\n      return;\n    }\n    const helperObj = new HelperBox({box});\n    const isWidth = box.isVBox();\n    G.$(box.dom).resizable({\n      handles: isWidth ? 'e' : 's',\n      start: this.onResizeStart.bind(this, helperObj, isWidth),\n      resize: this.onResizeMove.bind(this, helperObj, isWidth),\n      stop: this.triggerUserEditStop.bind(this)\n    });\n  }\n  public unmakeResizable(box: LayoutBox) {\n    if (G.$(box.dom).resizable(\"instance\")) {\n      // Resizable widget is set for this box.\n      G.$(box.dom).resizable('destroy');\n    }\n  }\n  public onResizeStart(helperObj: HelperBox, isWidth: boolean, event: MouseEvent, ui: JqueryUI) {\n    this.triggerUserEditStart();\n    const size = isWidth ? ui.originalSize.width : ui.originalSize.height;\n    helperObj.scalePerFlexUnit = size / (helperObj.box.flexSize() || 1);\n    const allSiblings = helperObj.box.parentBox()!.childBoxes.peek();\n    const index = allSiblings.indexOf(helperObj.box);\n    helperObj.nextSiblings = allSiblings.slice(index + 1);\n    helperObj.origNextSizes = helperObj.nextSiblings.map(function(b) { return b.flexSize(); });\n    helperObj.origSize = helperObj.box.flexSize();\n    helperObj.sumPrev = allSiblings.slice(0, index).reduce(adder, 0);\n    helperObj.sumAll = allSiblings.reduce(adder, 0);\n    helperObj.sumNext = helperObj.sumAll - helperObj.sumPrev;\n  }\n  public onResizeMove(helperObj: HelperBox, isWidth: boolean, event: MouseEvent, ui: JqueryUI) {\n    const sizePx = isWidth ? ui.size.width : ui.size.height;\n    let newSize = sizePx / helperObj.scalePerFlexUnit;\n\n    // We need some amount of snapping to make it easier to align boxes. The way we'll do it is to\n    // adjust flexSize of the box being resized and all following boxes so that boundaries end up at\n    // multiples of fullSize / NumSteps.\n    newSize = snap(newSize, helperObj.sumPrev, helperObj.sumAll);\n    const siblingsFactor = (helperObj.sumNext - newSize) / (helperObj.sumNext - helperObj.origSize);\n    let sumPrev = helperObj.sumPrev + newSize;\n    const newSizes: number[] = [];\n    helperObj.origNextSizes.forEach(function(size) {\n      const s = snap(size * siblingsFactor, sumPrev, helperObj.sumAll);\n      sumPrev += s;\n      newSizes.push(s);\n    });\n\n    if (newSize <= 0 || newSizes.some(size => size <= 0)) {\n      return; // This isn't an acceptable position.\n    }\n    if (newSize !== helperObj.box.flexSize.peek()) {\n      helperObj.box.flexSize(newSize);\n      helperObj.nextSiblings.forEach(function(b, i) {\n        b.flexSize(newSizes[i]);\n      });\n      this.layout.trigger('layoutResized');\n    }\n  }\n  public handleMouseDown(event: MouseEvent, elem: HTMLElement) {\n    const target = (event.target as HTMLElement);\n    if (event.button !== 0 || target?.classList.contains('ui-resizable-handle')) {\n      return;\n    }\n    if (target?.classList.contains('layout_grabbable')) {\n      this.initialMouseDown = true;\n      this.originalBox = utils.domData.get(elem, 'layoutBox');\n      assert(this.originalBox, \"MouseDown on element without an associated layoutBox\");\n      G.$(G.window).on('mousemove', this.boundMouseMove);\n      G.$(G.window).on('mouseup', this.boundMouseUp);\n      return false;\n    }\n  }\n  // Exposed for tests\n  public dragInNewBox(event: MouseEvent, leafId: number) {\n    const box = this.layout.buildLayoutBox({leaf: leafId});\n\n    // Place this box into a measuring div.\n    this.measuringBox.appendChild(box.getDom());\n\n    this.handleMouseDown(event, box.dom!);\n  }\n  public startDragBox(event: MouseEvent, box: LayoutBox) {\n    this.triggerUserEditStart();\n    this.targetBox = box;\n    this.floater.onInitialMouseMove(event, box);\n    this.trigger('dragStart', this.originalBox);\n  }\n  public handleMouseUp(event: MouseEvent) {\n    G.$(G.window).off('mousemove', this.boundMouseMove);\n    G.$(G.window).off('mouseup', this.boundMouseUp);\n\n    if (this.initialMouseDown) {\n      this.initialMouseDown = false;\n      return;\n    }\n\n    // We stopped dragging, any listener can clean its modification\n    // to the floater element.\n    this.trigger('dragStop');\n    this.targetBox!.takeLeafFrom(this.floater);\n    // We dropped back the box to its original position, now\n    // anyone can hijack the box.\n    this.trigger('dragDrop', this.targetBox);\n\n    // Check if the box was hijacked by a drop target.\n    if (this.originalBox?.leafId() !== 'empty') {\n      if (this.dropTargeter.activeTarget) {\n        this.dropTargeter.accelerateInsertion();\n      } else {\n        resizeLayoutBox(this.targetBox!, 'reset');\n      }\n    }\n\n    this.dropTargeter.removeTargetHints();\n    this.dropOverlay.detach();\n    this.trigger('dragEnd');\n    // Cleanup for any state.\n    this.transitionPromise.finally(() => {\n      this.floater.onMouseUp();\n      resizeLayoutBox(this.targetBox!, 'reset');\n      this.targetBox = this.originalBox = null;\n      emptyNode(this.measuringBox);\n      this.triggerUserEditStop();\n    });\n  }\n\n  public getBoxFromElement(elem: HTMLElement) {\n    const box = this.layout.getContainingBox(elem);\n    if (box && !box.isDomDetached()) {\n      return box;\n    }\n    return null;\n  }\n\n  public getBox(leafId: number) {\n    return this.layout.getLeafBox(leafId);\n  }\n\n  public removeContainingBox(box: LayoutBox) {\n    if (box && !box.isDomDetached()) {\n      this.triggerUserEditStart();\n      this.targetBox = box;\n      this.doRemoveBox(box);\n      this.triggerUserEditStop();\n    }\n  }\n\n  public doRemoveBox(box: ContentBox) {\n    const rect = box.dom!.getBoundingClientRect();\n    box.leafId('empty');\n    box.leafContent(dom('div.layout_editor_empty_space',\n      koDom.style('min-height', rect.height + 'px')\n    ));\n    this.onInsertBox(noop).catch(noop);\n  }\n  public handleMouseMove(event: MouseEvent) {\n    // Make sure the grabbed box still exists\n    if (!this.originalBox || this.originalBox?.isDisposed()) {\n      return;\n    }\n\n    if (this.initialMouseDown) {\n      this.initialMouseDown = false;\n      this.startDragBox(event, this.originalBox);\n    }\n    this.floater.onMouseMove(event);\n\n    this.trigger('dragMove', event, this.originalBox);\n\n    if (this.transitionPromise.isPending()) {\n      // Don't attempt to do any repositioning while another reposition is happening.\n      return;\n    }\n\n    // Handle dragging to trash.\n    if (dom.findAncestor(event.target, null, '.layout_trash')) {\n      const isTrashed = this.targetBox && this.targetBox.isDomDetached();\n      if (!this.trashDelay.isPending() && !isTrashed) {\n        // To \"trash\" a box, we call onInsertBox with noop for the inserter function. The new box\n        // will still be created, just not attached to anything.\n        this.trashDelay.schedule(100, this.onInsertBox, this, noop);\n      }\n      return;\n    }\n    this.trashDelay.cancel();\n    this.updateTargets(event);\n  }\n\n  public updateTargets(event: MouseEvent) {\n    if (this.transitionPromise.isPending()) {\n      // Don't attempt to do any repositioning while another reposition is happening.\n      return;\n    }\n    // See if we are over a layout_leaf, and that the leaf is in the same layout as the dragged\n    // element. If so, we are dealing with repositioning.\n    const elem = dom.findAncestor(event.target, this.rootElem, '.' + this.layout.leafId);\n    if (elem) {\n      const hoverBox = utils.domData.get(elem, 'layoutBox');\n      this.dropOverlay.attach(elem);\n      const affinity = this.dropOverlay.getAffinity(event);\n      this.dropTargeter.updateTargetHints(hoverBox, affinity, this.dropOverlay, this.targetBox!);\n    } else if (!dom.findAncestor(event.target, this.rootElem, '.layout_editor_drop_target')) {\n      this.dropTargeter.removeTargetHints();\n    }\n  }\n  public async onInsertBox(inserterFunc: (box: LayoutBox) => void) {\n    // Create a new LayoutBox, and insert it using inserterFunc.\n    // Shrink prevTargetBox to 0. Create a new target box, initially shrunk, and grow it.\n    const prevTargetBox = this.targetBox!;\n\n    this.targetBox = LayoutBox.create(this.layout);\n    this.targetBox.takeLeafFrom(prevTargetBox);\n    this.targetBox.flexSize(prevTargetBox.flexSize());\n\n    // Sizing boxes vertically requires extra care that the sum of values doesn't change.\n    this.targetBox.getDom(); // Make sure its dom is created.\n\n\n    //console.log(\"onInsertBox %s -> %s\", prevTargetBox, this.targetBox);\n    let transitionPromiseResolve!: () => void;\n    this.transitionPromise = new Promise(function(resolve, reject) {\n      transitionPromiseResolve = resolve;\n    });\n\n    inserterFunc(this.targetBox);\n\n    const prevRect = prevTargetBox.dom!.getBoundingClientRect();\n\n    // Set previous box size to 0 for accurate measurement of new target box\n    const prevFlexGrow = prevTargetBox.dom!.style.flexGrow;\n    prevTargetBox.dom!.style.flexGrow = '0';\n\n    const targetRect = this.targetBox.dom!.getBoundingClientRect();\n\n    prevTargetBox.dom!.style.flexGrow = prevFlexGrow;\n\n    await Promise.all([\n      resizeLayoutBoxSmoothly(prevTargetBox, prevRect, 'collapse'),\n      resizeLayoutBoxSmoothly(this.targetBox, 'collapse', targetRect),\n    ]);\n    prevTargetBox.dispose();\n    if (this.targetBox) {\n      resizeLayoutBox(this.targetBox, 'reset');\n      this.dropOverlay.attach(this.targetBox.dom!);\n    }\n    transitionPromiseResolve();\n    this.layout.trigger('layoutResized');\n  }\n}\n\nextend(LayoutEditor.prototype, BackboneEvents);\n\n\n//----------------------------------------------------------------------\n\n/**\n * When the user hovers near the edge of a box, we call the direction the \"affinity\", and it\n * indicates where an insertion is to happen. Affinities are represented by numbers 0 - 3. The\n * functions below distinguish top-down vs left-right, and top/left vs down/right.\n */\n//const AFFINITY_NAMES = { 0: 'TOP', 1: 'DOWN', 2: 'LEFT', 3: 'RIGHT' };\nfunction isAffinityUpDown(affinity: number): boolean {\n  return (affinity >> 1) === 0;\n}\n\nfunction isAffinityAfter(affinity: number): boolean {\n  return (affinity & 1) === 1;\n}\n\nfunction getFrac(distance: number, max: number): number {\n  return distance < max ? distance / max : Infinity;\n}\n\n// We'll snap to 1/NumSteps of total size. The choice of 60 allows many evenly-sized layouts.\nconst NumSteps = 60;\n\nfunction round(value: number, multipleOf: number) {\n  return Math.round(value / multipleOf) * multipleOf;\n}\n\nfunction snap(flexSize: number, sumPrev: number, sumAll: number) {\n  const endEdge = round(sumPrev + flexSize, sumAll / NumSteps);\n  return Math.min(endEdge, sumAll) - sumPrev;\n}\n\n\n/**\n * Resizes the given LayoutBox to transition it when it's supposed to expand or collapse. It only\n * affects the height for HBoxes, and only the width for VBoxes. For rows, we use an explicit\n * height. For columns we rely on 'flex-grow' property.\n *    A rectangle object: set the relevant style according to the values there.\n *    'reset': unset the relevant style, to revert to the values associated with CSS classes.\n *    'collapse': collapse to empty size.\n *    'current': set and explicit value for the relevant style, which is needed for transitions.\n */\nfunction resizeLayoutBox(layoutBox: LayoutBox, sizeRect: string|DOMRect) {\n  const reset = (sizeRect === 'reset');\n  const collapse = (sizeRect === 'collapse');\n  if (sizeRect === 'current') {\n    sizeRect = layoutBox.dom!.getBoundingClientRect();\n  }\n  if (layoutBox.isHBox()) {\n    layoutBox.dom!.style.height = (reset ? '' : (collapse ? '0px' : (sizeRect as DOMRect).height + 'px'));\n  } else {\n    layoutBox.dom!.style.width = (reset ? '' : (collapse ? '0px' : (sizeRect as DOMRect).width + 'px'));\n  }\n  layoutBox.dom!.style.opacity = collapse ? '0.0' : '1.0';\n}\n\nfunction rectDesc(rect: string|DOMRect) {\n  return (typeof rect === 'string') ? rect :\n    Math.floor(rect.width) + \"x\" + Math.floor(rect.height);\n}\n\n/**\n * Resizes the given LayoutBox smoothly from starting to ending position, where startRect and\n * endRect are one of the values documented in 'resizeLayoutBox'.\n */\nfunction resizeLayoutBoxSmoothly(layoutBox: LayoutBox, startRect: string|DOMRect, endRect: string|DOMRect) {\n  if (layoutBox.isDomDetached()) {\n    return Promise.resolve();\n  }\n  const prevFlexGrow = layoutBox.dom!.style.flexGrow;\n  layoutBox.dom!.style.flexGrow = '0';\n  resizeLayoutBox(layoutBox, startRect);\n\n  // Force the layout engine to compute the current state of the layoutBox.dom element before\n  // applying the transition. This follows the recommendation here, and seems to work:\n  // https://timtaubert.de/blog/2012/09/css-transitions-for-dynamically-created-dom-elements/\n  pick(G.window.getComputedStyle(layoutBox.dom), 'height', 'width');\n\n  // Start the transition.\n  layoutBox.dom!.classList.add('layout_editor_resize_transition');\n  return new Promise(function(resolve, reject) {\n    dom.once(layoutBox.dom, 'transitionend', function() { resolve(); });\n    resizeLayoutBox(layoutBox, endRect);\n  })\n  .timeout(600)    // Transitions are only 400ms long, so complain if nothing happened for longer.\n  .catch(Promise.TimeoutError, function() {\n    console.error(\"LayoutEditor.resizeLayoutBoxSmoothly %s %s->%s: transition didn't run\",\n      layoutBox, rectDesc(startRect), rectDesc(endRect));\n    // We keep going. It should look like something's wrong and jumpy, but it should still be\n    // usable and not cause errors elsewhere.\n  })\n  .finally(function() {\n    layoutBox.dom!.classList.remove('layout_editor_resize_transition');\n    layoutBox.dom!.style.flexGrow = prevFlexGrow;\n  });\n}\n\n\nfunction adder(sum: number, box: LayoutBox) {\n  return sum + box.flexSize.peek();\n}\n","import { makeT } from 'app/client/lib/localization';\nimport { bigBasicButton } from 'app/client/ui2018/buttons';\nimport { testId, theme } from 'app/client/ui2018/cssVars';\nimport { loadingSpinner } from 'app/client/ui2018/loaders';\nimport { cssModalButtons, cssModalTitle, IModalControl, IModalOptions, modal } from 'app/client/ui2018/modals';\nimport { PluginInstance } from 'app/common/PluginInstance';\nimport { RenderTarget } from 'app/plugin/RenderOptions';\nimport { Disposable, dom, DomContents, Observable, styled } from 'grainjs';\n\nconst t = makeT('PluginScreen');\n\n/**\n * Rendering options for the PluginScreen modal.\n */\nexport interface RenderOptions {\n  // Maximizes modal to fill the viewport.\n  fullscreen?: boolean;\n  fullbody?: boolean;\n}\n\n/**\n * Helper for showing plugin components during imports.\n */\nexport class PluginScreen extends Disposable {\n  private _openModalCtl: IModalControl | null = null;\n  private _importerContent = Observable.create<DomContents>(this, null);\n  private _fullscreen = Observable.create(this, false);\n  private _fullbody = Observable.create(this, false);\n\n  constructor(private _title: string) {\n    super();\n  }\n\n  // The importer state showing the inline element from the plugin (e.g. to enter URL in case of\n  // import-from-url).\n  public renderContent(inlineElement: HTMLElement) {\n    this.render([this._buildModalTitle(), inlineElement]);\n  }\n\n  // registers a render target for plugin to render inline.\n  public renderPlugin(plugin: PluginInstance): RenderTarget {\n    const handle: RenderTarget = plugin.addRenderTarget((el, opt = {}) => {\n      el.style.width = \"100%\";\n      el.style.height = opt.height || \"200px\";\n      this.renderContent(el);\n    });\n    return handle;\n  }\n\n  public render(content: DomContents, options?: RenderOptions) {\n    this._fullscreen.set(Boolean(options?.fullscreen));\n    this._fullbody.set(Boolean(options?.fullbody));\n    this.showImportDialog();\n    this._importerContent.set(content);\n  }\n\n  // The importer state showing just an error.\n  public renderError(message: string) {\n    this._fullbody.set(false);\n    this.render([\n      this._buildModalTitle(),\n      cssModalBody(t(\"Import failed: \"), message, testId('importer-error')),\n      cssModalButtons(\n        bigBasicButton('Close',\n          dom.on('click', () => this.close()),\n          testId('modal-cancel'))),\n    ]);\n  }\n\n  // The importer state showing just a spinner, when the user has to wait. We don't even let the\n  // user cancel it, because the cleanup can only happen properly once the wait completes.\n  public renderSpinner() {\n    this._fullbody.set(false);\n    this.render([this._buildModalTitle(), cssSpinner(loadingSpinner())]);\n  }\n\n  public close() {\n    this._openModalCtl?.close();\n    this._openModalCtl = null;\n  }\n\n  public showImportDialog(options?: IModalOptions) {\n    if (this._openModalCtl) { return; }\n    modal((ctl, ctlOwner) => {\n      this._openModalCtl = ctl;\n\n      // Make sure we are close when parent is closed.\n      this.onDispose(() => {\n        if (ctlOwner.isDisposed()) { return; }\n        ctl.close();\n      });\n\n      return [\n        cssModalOverrides.cls(''),\n        cssModalOverrides.cls('-fullscreen', this._fullscreen),\n        cssModalOverrides.cls('-fullbody', this._fullbody),\n        dom.domComputed(this._importerContent),\n        testId('importer-dialog'),\n      ];\n    }, {\n      noClickAway: true,\n      noEscapeKey: true,\n      ...options,\n    });\n  }\n\n  private _buildModalTitle(rightElement?: DomContents) {\n    return cssModalHeader(cssModalTitle(this._title), rightElement);\n  }\n}\n\n\nconst cssModalOverrides = styled('div', `\n  max-height: calc(100% - 32px);\n  display: flex;\n  flex-direction: column;\n  & > .${cssModalButtons.className} {\n    margin-top: 16px;\n  }\n\n  &-fullscreen {\n    height: 100%;\n    margin: 32px;\n  }\n\n  &-fullbody {\n    padding: 0px;\n    background-color: ${theme.importerOutsideBg};\n  }\n`);\n\nconst cssModalBody = styled('div', `\n  padding: 16px 0;\n  overflow-y: auto;\n  max-width: 470px;\n  white-space: pre-line;\n`);\n\nconst cssModalHeader = styled('div', `\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 16px;\n  & > .${cssModalTitle.className} {\n    margin-bottom: 0px;\n  }\n`);\n\nconst cssSpinner = styled('div', `\n  display: flex;\n  align-items: center;\n  height: 80px;\n  margin: auto;\n`);\n","import {CustomView} from 'app/client/components/CustomView';\nimport {DataRowModel} from 'app/client/models/DataRowModel';\nimport DataTableModel from 'app/client/models/DataTableModel';\nimport {ViewSectionRec} from 'app/client/models/DocModel';\nimport {prefersDarkMode, prefersDarkModeObs} from 'app/client/ui2018/cssVars';\nimport {dom} from 'grainjs';\n\ntype RowId = number|'new';\n\n/**\n * Print the specified viewSection (aka page widget). We use the existing view instance rather\n * than render a new one, since it may have state local to this instance view, such as current\n * filters.\n *\n * Views get a chance to render things specially for printing (which is needed when they use\n * scrolly for normal rendering).\n *\n * To let an existing view print across multiple pages, we can't have it nested in a flexbox or a\n * div with 'height: 100%'. We achieve it by forcing all parents of our view to have a simple\n * layout. This is potentially fragile.\n */\nexport async function printViewSection(layout: any, viewSection: ViewSectionRec) {\n  const viewInstance = viewSection.viewInstance.peek();\n  const sectionElem = viewInstance?.viewPane?.closest('.viewsection_content');\n  if (!sectionElem) {\n    throw new Error(\"No page widget to print\");\n  }\n  if (viewInstance instanceof CustomView) {\n    try {\n      await viewInstance.triggerPrint();\n      return;\n    } catch (e) {\n      // tslint:disable-next-line:no-console\n      console.warn(`Failed to trigger print in CustomView: ${e}`);\n      // continue on to trying to print from outside, which should work OK for a single page.\n    }\n  }\n\n  function prepareToPrint(onOff: boolean) {\n    // window.print() is a blocking call, which means our listener for the\n    // `prefers-color-scheme: dark` media feature will not receive any updates for the\n    // duration that the print dialog is shown. This proves problematic since an event is\n    // sent just before the blocking call containing a value of false, regardless of the\n    // user agent's color scheme preference. It's not clear why this happens, but the result\n    // is Grist temporarily reverting to the light theme until the print dialog is dismissed.\n    // As a workaround, we'll temporarily pause our listener, and unpause after the print dialog\n    // is dismissed.\n    prefersDarkModeObs().pause();\n\n    // Hide all layout boxes that do NOT contain the section to be printed.\n    layout?.forEachBox((box: any) => {\n      if (!box.dom.contains(sectionElem)) {\n        box.dom.classList.toggle('print-hide', onOff);\n      }\n    });\n\n    // Mark the section to be printed.\n    sectionElem.classList.toggle('print-widget', onOff);\n\n    // Let the view instance update its rendering, e.g. to render all rows when scrolly is in use.\n    viewInstance?.prepareToPrint(onOff);\n\n    // If .print-all-rows element is present (created for scrolly-based views), use it as the\n    // start element for the loop below, to ensure it's rendered flexbox-free.\n    const keyElem = sectionElem.querySelector('.print-all-rows') || sectionElem;\n\n    // Go through all parents of the element to be printed. For @media print, we override their\n    // layout in a heavy-handed way, forcing them all to be non-flexbox and sized to content,\n    // since our normal flexbox-based layout is sized to screen and would not print multiple pages.\n    let elem = keyElem.parentElement;\n    while (elem) {\n      elem.classList.toggle('print-parent', onOff);\n      elem = elem.parentElement;\n    }\n  }\n\n  const sub1 = dom.onElem(window, 'beforeprint', () => prepareToPrint(true));\n  const sub2 = dom.onElem(window, 'afterprint', (window as any).afterPrintCallback = () => {\n    sub1.dispose();\n    sub2.dispose();\n    // To debug printing, set window.debugPrinting=1 in the console, then print a section, dismiss\n    // the print dialog, switch to \"@media print\" emulation, and you can explore the styles. You'd\n    // need to call window.finishPrinting() or reload the page to do it again.\n    if ((window as any).debugPrinting) {\n      (window as any).finishPrinting = () => prepareToPrint(false);\n    } else {\n      prepareToPrint(false);\n    }\n    delete (window as any).afterPrintCallback;\n    prefersDarkModeObs().pause(false);\n\n    // This may have changed while window.print() was blocking.\n    prefersDarkModeObs().set(prefersDarkMode());\n  });\n\n  // Running print on a timeout makes it possible to test printing using selenium, and doesn't\n  // seem to affect normal printing.\n  setTimeout(() => window.print(), 0);\n}\n\n\n/**\n * Produces a div with all requested rows using the same renderRow() function as used with scrolly\n * for dynamically rendered views. This is used for printing, so these rows do not subscribe to\n * data.\n *\n * To avoid creating a lot of subscriptions when rendering rows this way, we render one DOM row at\n * a time, copy the produced HTML, and dispose the produced DOM.\n */\nexport function renderAllRows(\n  tableModel: DataTableModel, rowIds: RowId[], renderRow: (r: DataRowModel) => Element,\n) {\n  const rowModel = tableModel.createFloatingRowModel(null) as DataRowModel;\n  const html: string[] = [];\n  rowIds.forEach((rowId, index) => {\n    if (rowId !== 'new') {\n      rowModel._index(index);\n      rowModel.assign(rowId);\n      const elem = renderRow(rowModel);\n      html.push(`<div class=\"print-row\">${elem.outerHTML}</div>`);\n      dom.domDispose(elem);\n    }\n  });\n  rowModel.dispose();\n  const result = dom('div.print-all-rows');\n  result.innerHTML = html.join(\"\\n\");\n  return result;\n}\n","import {CellSelector, COL, ROW} from 'app/client/components/CellSelector';\nimport {copyToClipboard} from 'app/client/lib/clipboardUtils';\nimport {Delay} from \"app/client/lib/Delay\";\nimport {KoArray} from 'app/client/lib/koArray';\nimport {ViewFieldRec} from 'app/client/models/entities/ViewFieldRec';\nimport {UserError} from 'app/client/models/errors';\nimport {ALL, RowsChanged, SortedRowSet} from \"app/client/models/rowset\";\nimport {showTransientTooltip} from 'app/client/ui/tooltips';\nimport {colors, isNarrowScreen, isNarrowScreenObs, theme, vars} from 'app/client/ui2018/cssVars';\nimport {icon} from 'app/client/ui2018/icons';\nimport {CellValue} from 'app/common/DocActions';\nimport {isEmptyList, isListType, isRefListType} from \"app/common/gristTypes\";\nimport {TableData} from \"app/common/TableData\";\nimport {BaseFormatter} from 'app/common/ValueFormatter';\nimport ko from 'knockout';\nimport {Computed, Disposable, dom, makeTestId, Observable, styled, subscribe} from 'grainjs';\nimport {makeT} from 'app/client/lib/localization';\n\nconst t = makeT('SelectionSummary');\n\n/**\n * A beginning and end index for a range of columns or rows.\n */\ninterface Range {\n  begin: number;\n  end: number;\n}\n\n/**\n * A single part of the cell selection summary.\n */\ninterface SummaryPart {\n  /** Identifier for the summary part. */\n  id: 'sum' | 'count' | 'dimensions';\n  /** Label that's shown to the left of `value`. */\n  label: string;\n  /** Value of the summary part. */\n  value: string;\n  /** If true, displays a copy button on hover. Defaults to false. */\n  clickToCopy?: boolean;\n}\n\nconst testId = makeTestId('test-selection-summary-');\n\n// We can handle a million cells in under 60ms on a good laptop. Much beyond that, and we'll break\n// selection with the bad performance. Instead, skip the counting and summing for too many cells.\nconst MAX_CELLS_TO_SCAN = 1_000_000;\n\nexport class SelectionSummary extends Disposable {\n  private _colTotalCount = Computed.create(this, (use) =>\n    use(use(this._viewFields).getObservable()).length);\n\n  private _rowTotalCount = Computed.create(this, (use) => {\n    const rowIds = use(this._sortedRows.getKoArray().getObservable());\n    const includesNewRow = (rowIds.length > 0 && rowIds[rowIds.length - 1] === 'new');\n    return rowIds.length - (includesNewRow ? 1 : 0);\n  });\n\n  // In CellSelector, start and end are 0-based, inclusive, and not necessarily in order.\n  // It's not good for representing an empty range. Here, we convert ranges as [begin, end),\n  // with end >= begin.\n  private _rowRange = Computed.create<Range>(this, (use) => {\n    const type = use(this._cellSelector.currentSelectType);\n    if (type === COL) {\n      return {begin: 0, end: use(this._rowTotalCount)};\n    } else {\n      const start = use(this._cellSelector.row.start);\n      const end = use(this._cellSelector.row.end);\n      return {\n        begin: Math.min(start, end),\n        end: Math.max(start, end) + 1,\n      };\n    }\n  });\n\n  private _colRange = Computed.create<Range>(this, (use) => {\n    const type = use(this._cellSelector.currentSelectType);\n    if (type === ROW) {\n      return {begin: 0, end: use(this._colTotalCount)};\n    } else {\n      const start = use(this._cellSelector.col.start);\n      const end = use(this._cellSelector.col.end);\n      return {\n        begin: Math.min(start, end),\n        end: Math.max(start, end) + 1,\n      };\n    }\n  });\n\n  private _summary = Observable.create<SummaryPart[]>(this, []);\n  private _delayedRecalc = this.autoDispose(Delay.create());\n\n  constructor(\n    private _cellSelector: CellSelector,\n    private _tableData: TableData,\n    private _sortedRows: SortedRowSet,\n    private _viewFields: ko.Computed<KoArray<ViewFieldRec>>,\n  ) {\n    super();\n\n    this.autoDispose(this._sortedRows.getKoArray().subscribe(this._onSpliceChange, this, 'spliceChange'));\n    const onRowNotify = this._onRowNotify.bind(this);\n    this._sortedRows.on('rowNotify', onRowNotify);\n    this.onDispose(() => this._sortedRows.off('rowNotify', onRowNotify));\n    this.autoDispose(subscribe(this._rowRange, this._colRange,\n      () => this._scheduleRecalc()));\n    this.autoDispose(isNarrowScreenObs().addListener((isNarrow) => {\n      if (isNarrow) { return; }\n      // No calculations occur while the screen is narrow, so we need to schedule one.\n      this._scheduleRecalc();\n    }));\n  }\n\n  public buildDom() {\n    return cssSummary(\n      dom.forEach(this._summary, ({id, label, value, clickToCopy}) =>\n        cssSummaryPart(\n          label ? dom('span', cssLabelText(label), cssCopyIcon('Copy')) : null,\n          value,\n          cssSummaryPart.cls('-copyable', Boolean(clickToCopy)),\n          (clickToCopy ? dom.on('click', (ev, elem) => doCopy(value, elem)) : null),\n          testId(id),\n        )\n      ),\n    );\n  }\n\n  private _onSpliceChange(splice: {start: number}) {\n    const rowRange = this._rowRange.get();\n    const rowCount = rowRange.end - rowRange.begin;\n    if (rowCount === 1) { return; }\n    if (splice.start >= rowRange.end) { return; }\n    // We could be smart here and only recalculate when the splice affects our selection. But for\n    // that to make sense, the selection itself needs to be smart. Currently, the selection is\n    // lost whenever the cursor is affected. For example, when you have a selection and another\n    // user adds/removes columns or rows before the selection, the selection won't be shifted\n    // with the cursor, and will instead be cleared. Since we can't always rely on the selection\n    // being there, we'll err on the safe side and always schedule a recalc.\n    this._scheduleRecalc();\n  }\n\n  private _onRowNotify(rows: RowsChanged) {\n    const rowRange = this._rowRange.get();\n    if (rows === ALL) {\n      this._scheduleRecalc();\n    } else {\n      const rowArray = this._sortedRows.getKoArray().peek();\n      const rowIdSet = new Set(rows);\n      for (let r = rowRange.begin; r < rowRange.end; r++) {\n        if (rowIdSet.has(rowArray[r])) {\n          this._scheduleRecalc();\n          break;\n        }\n      }\n    }\n  }\n\n  /**\n   * Schedules a re-calculation to occur in the immediate future.\n   *\n   * May be called repeatedly, but only a single re-calculation will be scheduled, to\n   * avoid queueing unnecessary amounts of work.\n   */\n  private _scheduleRecalc() {\n    // `_recalc` may take a non-trivial amount of time, so we defer until the stack is clear.\n    this._delayedRecalc.schedule(0, () => this._recalc());\n  }\n\n  private _recalc() {\n    const rowRange = this._rowRange.get();\n    const colRange = this._colRange.get();\n    let rowCount = rowRange.end - rowRange.begin;\n    let colCount = colRange.end - colRange.begin;\n    const cellCount = rowCount * colCount;\n    const summary: SummaryPart[] = [];\n    // Do nothing on narrow screens, because we haven't come up with a place to render sum anyway.\n    if (cellCount > 1 && !isNarrowScreen()) {\n      if (cellCount <= MAX_CELLS_TO_SCAN) {\n        const rowArray = this._sortedRows.getKoArray().peek();\n        const fields = this._viewFields.peek().peek();\n        let countNumeric = 0;\n        let countNonEmpty = 0;\n        let sum = 0;\n        let sumFormatter: BaseFormatter|null = null;\n        const rowIndices: number[] = [];\n        for (let r = rowRange.begin; r < rowRange.end; r++) {\n          const rowId = rowArray[r];\n          if (rowId === undefined || rowId === 'new') {\n            // We can run into this whenever the selection gets out of sync due to external\n            // changes, like another user removing some rows. For now, we'll skip rows that are\n            // still selected and no longer exist, but the real TODO is to better update the\n            // selection so that it doesn't have out-of-date and invalid ranges.\n            rowCount -= 1;\n            continue;\n          }\n          rowIndices.push(this._tableData.getRowIdIndex(rowId)!);\n        }\n        for (let c = colRange.begin; c < colRange.end; c++) {\n          const field = fields[c];\n          if (field === undefined) {\n            // Like with rows (see comment above), we need to watch out for out-of-date ranges.\n            colCount -= 1;\n            continue;\n          }\n          const col = fields[c].column.peek();\n          const displayCol = fields[c].displayColModel.peek();\n          const colType = col.type.peek();\n          const visibleColType = fields[c].visibleColModel.peek().type.peek();\n          const effectiveColType = visibleColType ?? colType;\n          const displayColId = displayCol.colId.peek();\n          // Note: we get values from the display column so that reference columns displaying\n          // numbers are included in the computed sum. Unfortunately, that also means we can't\n          // show a count of non-empty references. For now, that's a trade-off we'll have to make,\n          // but in the future it should be possible to allow showing multiple summary parts with\n          // some level of configurability.\n          const values = this._tableData.getColValues(displayColId);\n          if (!values) {\n            throw new UserError(`Invalid column ${this._tableData.tableId}.${displayColId}`);\n          }\n          const isNumeric = ['Numeric', 'Int', 'Any'].includes(effectiveColType);\n          const isEmpty: undefined | ((value: CellValue) => boolean) = (\n            colType.startsWith('Ref:') && !visibleColType ? value => (value === 0) :\n            isRefListType(colType) || isListType(effectiveColType) ? isEmptyList :\n            undefined\n          );\n          // The loops below are optimized, minimizing the amount of work done per row. For\n          // example, column values are retrieved in bulk above instead of once per row. In one\n          // unscientific test, they take 30-60ms per million numeric cells.\n          //\n          // TODO: Add a benchmark test suite that automates checking for performance regressions.\n          if (isNumeric) {\n            if (!sumFormatter) {\n              sumFormatter = fields[c].formatter.peek();\n            }\n            for (const i of rowIndices) {\n              const value = values[i];\n              if (typeof value === 'number') {\n                countNumeric++;\n                sum += value;\n              } else if (value !== null && value !== undefined && value !== '' && !isEmpty?.(value)) {\n                countNonEmpty++;\n              }\n            }\n          } else {\n            for (const i of rowIndices) {\n              const value = values[i];\n              if (value !== null && value !== undefined && value !== '' && value !== false && !isEmpty?.(value)) {\n                countNonEmpty++;\n              }\n            }\n          }\n        }\n\n        if (countNumeric > 0) {\n          const sumValue = sumFormatter ? sumFormatter.formatAny(sum) : String(sum);\n          summary.push({id: 'sum', label: 'Sum ', value: sumValue, clickToCopy: true});\n        } else {\n          summary.push({id: 'count', label: 'Count ', value: String(countNonEmpty), clickToCopy: true});\n        }\n      }\n      summary.push({id: 'dimensions', label: '', value: `${rowCount}⨯${colCount}`});\n    }\n    this._summary.set(summary);\n  }\n}\n\nasync function doCopy(value: string, elem: Element) {\n  await copyToClipboard(value);\n  showTransientTooltip(elem, t(\"Copied to clipboard\"), {key: 'copy-selection-summary'});\n}\n\nconst cssSummary = styled('div', `\n  position: absolute;\n  bottom: -18px;\n  height: 18px;\n  line-height: 18px;\n  display: flex;\n  column-gap: 8px;\n  width: 100%;\n  justify-content: end;\n  color: ${theme.text};\n  font-family: ${vars.fontFamilyData};\n\n  @media print {\n    & {\n      display: none;\n    }\n  }\n`);\n\n// Note: the use of an extra element for the background is to set its opacity, to make it a bit\n// lighter (or darker, in dark-mode) than actual mediumGrey, without defining a special color.\nconst cssSummaryPart = styled('div', `\n  padding: 0 8px;\n  border-radius: 4px;\n  border-top-left-radius: 0px;\n  border-top-right-radius: 0px;\n  border-top: none;\n  z-index: 100;\n  position: relative;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  /* Set explicit backdrop to improve visibility in raw data views. */\n  background-color: ${theme.mainPanelBg};\n\n  &-copyable:hover {\n    cursor: pointer;\n  }\n  &::before {\n    content: \"\";\n    position: absolute;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0;\n    background-color: ${colors.mediumGrey};\n    opacity: 0.8;\n    z-index: -1;\n  }\n`);\n\nconst cssLabelText = styled('span', `\n  font-size: ${vars.xsmallFontSize};\n  text-transform: uppercase;\n  position: relative;\n  margin-right: 4px;\n  .${cssSummaryPart.className}-copyable:hover & {\n    visibility: hidden;\n  }\n`);\n\nconst cssCopyIcon = styled(icon, `\n  position: absolute;\n  top: 0;\n  margin: 1px 0 0 4px;\n  --icon-color: ${theme.controlFg};\n  display: none;\n  .${cssSummaryPart.className}-copyable:hover & {\n    display: block;\n  }\n`);\n","import {PluginInstance} from 'app/common/PluginInstance';\nimport {InternalImportSourceAPI} from 'app/plugin/InternalImportSourceAPI';\nimport {ImportSource} from 'app/plugin/PluginManifest';\nimport {checkers} from 'app/plugin/TypeCheckers';\n\n/**\n * Encapsulate together an import source contribution with its plugin instance and a callable stub\n * for the ImportSourceAPI. Exposes as well a `fromArray` static method to get all the import\n * sources from an array of plugins instances.\n */\nexport class ImportSourceElement {\n\n  /**\n   * Get all import sources from an array of plugin instances.\n   */\n  public static fromArray(pluginInstances: PluginInstance[]): ImportSourceElement[] {\n    const importSources: ImportSourceElement[] = [];\n    for (const plugin of pluginInstances) {\n      const definitions = plugin.definition.manifest.contributions.importSources;\n      if (definitions) {\n        for (const importSource of definitions) {\n          importSources.push(new ImportSourceElement(plugin, importSource));\n        }\n      }\n    }\n    return importSources;\n  }\n\n  public importSourceStub: InternalImportSourceAPI;\n\n  private constructor(public plugin: PluginInstance, public importSource: ImportSource) {\n    this.importSourceStub = plugin.getStub<InternalImportSourceAPI>(importSource.importSource,\n      checkers.InternalImportSourceAPI);\n  }\n}\n","import {dom, EventCB} from 'grainjs';\n\nconst DOUBLE_TAP_INTERVAL_MS = 500;\n\n/**\n * Helper to handle 'dblclick' events on either browser or mobile.\n *\n * This is equivalent to a 'dblclick' handler when touch events are not supported. When they are,\n * the callback will be called on second touch within a short time of a first one. (In that case,\n * preventDefault() prevents a 'dblclick' event from being emulated.)\n *\n * Background: though mobile browsers we care about already generate 'click' and 'dblclick' events\n * in response to touch events, it doesn't seem to be treated as a direct user interaction. E.g.\n * double-click to edit a cell should focus the editor and open the mobile keyboard, but a\n * JS-issued focus() call only works when triggered by a direct user interaction, and synthesized\n * dblclick doesn't seem to do that.\n *\n * Helpful links on emulated (synthesized) events:\n * - https://developer.mozilla.org/en-US/docs/Web/API/Touch_events/Supporting_both_TouchEvent_and_MouseEvent\n * - https://github.com/w3c/pointerevents/issues/171\n */\nexport function onDblClickMatchElem(elem: EventTarget, selector: string, callback: EventCB): void {\n  // According to https://developer.mozilla.org/en-US/docs/Web/CSS/touch-action, this \"removes the\n  // need for browsers to delay the generation of click events when the user taps the screen\".\n  // Without it, the delay (e.g. on mobile Chrome) prevents cursor from moving on double-tap.\n  dom.styleElem(elem as HTMLElement, 'touch-action', 'manipulation');\n  dom.onMatchElem(elem, selector, 'dblclick', (ev, _elem) => {\n    callback(ev, _elem);\n  });\n\n  let lastTapTime = 0;\n  let lastTapElem: EventTarget|null = null;\n  dom.onMatchElem(elem, selector, 'touchend', (ev, _elem) => {\n    const currentTime = Date.now();\n    const tapLength = currentTime - lastTapTime;\n    const sameElem = (_elem === lastTapElem);\n    lastTapTime = currentTime;\n    lastTapElem = _elem;\n    // Only consider a gesture a double-tap if it's on the same cell. Otherwise, two-finger\n    // gestures, such as zooming, may trigger this too.\n    if (sameElem && tapLength < DOUBLE_TAP_INTERVAL_MS && tapLength > 0) {\n      ev.preventDefault();\n      callback(ev, _elem);\n    }\n  });\n}\n","import {loadMomentTimezone} from 'app/client/lib/imports';\n\n/**\n * Returns the browser timezone, using moment.tz.guess(), allowing overriding it via a \"timezone\"\n * URL parameter, for the sake of tests.\n */\nexport async function guessTimezone() {\n  const moment = await loadMomentTimezone();\n  const searchParams = new URLSearchParams(window.location.search);\n  return searchParams.get('timezone') || moment.tz.guess();\n}\n","import {ClientScope} from 'app/client/components/ClientScope';\nimport {SafeBrowser} from 'app/client/lib/SafeBrowser';\nimport {LocalPlugin} from 'app/common/plugin';\nimport {createRpcLogger, PluginInstance} from 'app/common/PluginInstance';\n\n/**\n * Home plugins are all plugins that contributes to a general Grist management tasks.\n * They operate on Grist as a whole, without current document context.\n * TODO: currently it is used primary for importing documents on home screen and supports\n * only safeBrowser components without any access to Grist.\n */\nexport class HomePluginManager {\n\n  public pluginsList: PluginInstance[];\n\n  constructor(localPlugins: LocalPlugin[],\n              _untrustedContentOrigin: string,\n              _clientScope: ClientScope) {\n    this.pluginsList = [];\n    for (const plugin of localPlugins) {\n      try {\n        const components = plugin.manifest.components || {};\n        // Home plugins supports only safeBrowser components\n        if (components.safePython || components.unsafeNode) {\n          continue;\n        }\n        // and currently implements only safe imports\n        const importSources = plugin.manifest.contributions.importSources;\n        if (!importSources?.some(i => i.safeHome)) {\n          continue;\n        }\n        const pluginInstance = new PluginInstance(plugin, createRpcLogger(console, `HOME PLUGIN ${plugin.id}:`));\n        const safeBrowser = pluginInstance.safeBrowser = new SafeBrowser(pluginInstance,\n          _clientScope, _untrustedContentOrigin, components.safeBrowser);\n        if (components.safeBrowser) {\n          pluginInstance.rpc.registerForwarder(components.safeBrowser, safeBrowser);\n        }\n        const forwarder = new NotAvailableForwarder();\n        // Block any calls to internal apis.\n        pluginInstance.rpc.registerForwarder('*', {\n          forwardCall: (call) => forwarder.forwardPluginRpc(plugin.id, call),\n          forwardMessage: (msg) => forwarder.forwardPluginRpc(plugin.id, msg),\n        });\n        this.pluginsList.push(pluginInstance);\n      } catch (err) {\n        console.error( // tslint:disable-line:no-console\n          `HomePluginManager: failed to instantiate ${plugin.id}: ${err.message}`);\n      }\n    }\n  }\n}\n\nclass NotAvailableForwarder {\n  public async forwardPluginRpc(pluginId: string, msg: any) {\n    throw new Error(\"This api is not available\");\n  }\n}\n","import {ClientScope} from 'app/client/components/ClientScope';\nimport {guessTimezone} from 'app/client/lib/guessTimezone';\nimport {HomePluginManager} from 'app/client/lib/HomePluginManager';\nimport {ImportSourceElement} from 'app/client/lib/ImportSourceElement';\nimport {localStorageObs} from 'app/client/lib/localStorageObs';\nimport {AppModel, reportError} from 'app/client/models/AppModel';\nimport {reportMessage, UserError} from 'app/client/models/errors';\nimport {urlState} from 'app/client/models/gristUrlState';\nimport {ownerName} from 'app/client/models/WorkspaceInfo';\nimport {IHomePage} from 'app/common/gristUrls';\nimport {isLongerThan} from 'app/common/gutil';\nimport {SortPref, UserOrgPrefs, ViewPref} from 'app/common/Prefs';\nimport * as roles from 'app/common/roles';\nimport {getGristConfig} from 'app/common/urlUtils';\nimport {Document, Organization, Workspace} from 'app/common/UserAPI';\nimport {bundleChanges, Computed, Disposable, Observable, subscribe} from 'grainjs';\nimport moment from 'moment';\nimport flatten = require('lodash/flatten');\nimport sortBy = require('lodash/sortBy');\n\nconst DELAY_BEFORE_SPINNER_MS = 500;\n\n// Given a UTC Date ISO 8601 string (the doc updatedAt string), gives a reader-friendly\n// relative time to now - e.g. 'yesterday', '2 days ago'.\nexport function getTimeFromNow(utcDateISO: string): string {\n  const time = moment.utc(utcDateISO);\n  const now = moment();\n  const diff = now.diff(time, 's');\n  if (diff < 0 && diff > -60) {\n    // If the time appears to be in the future, but less than a minute\n    // in the future, chalk it up to a difference in time\n    // synchronization and don't claim the resource will be changed in\n    // the future.  For larger differences, just report them\n    // literally, there's a more serious problem or lack of\n    // synchronization.\n    return now.fromNow();\n  }\n  return time.fromNow();\n}\n\nexport interface HomeModel {\n  // PageType value, one of the discriminated union values used by AppModel.\n  pageType: \"home\";\n\n  app: AppModel;\n  currentPage: Observable<IHomePage>;\n  currentWSId: Observable<number|undefined>;    // should be set when currentPage is 'workspace'\n\n  // Note that Workspace contains its documents in .docs.\n  workspaces: Observable<Workspace[]>;\n  loading: Observable<boolean|\"slow\">;          // Set to \"slow\" when loading for a while.\n  available: Observable<boolean>;               // set if workspaces loaded correctly.\n  showIntro: Observable<boolean>;               // set if no docs and we should show intro.\n  singleWorkspace: Observable<boolean>;         // set if workspace name should be hidden.\n  trashWorkspaces: Observable<Workspace[]>;     // only set when viewing trash\n  templateWorkspaces: Observable<Workspace[]>;  // Only set when viewing templates or all documents.\n\n  // currentWS is undefined when currentPage is not \"workspace\" or if currentWSId doesn't exist.\n  currentWS: Observable<Workspace|undefined>;\n\n  // List of pinned docs to show for currentWS.\n  currentWSPinnedDocs: Observable<Document[]>;\n\n  // List of featured templates from templateWorkspaces.\n  featuredTemplates: Observable<Document[]>;\n\n  // List of other sites (orgs) user can access. Only populated on All Documents, and only when\n  // the current org is a personal org, or the current org is view access only.\n  otherSites: Observable<Organization[]>;\n\n  currentSort: Observable<SortPref>;\n  currentView: Observable<ViewPref>;\n  importSources: Observable<ImportSourceElement[]>;\n\n  // The workspace for new docs, or \"unsaved\" to only allow unsaved-doc creation, or null if the\n  // user isn't allowed to create a doc.\n  newDocWorkspace: Observable<Workspace|null|\"unsaved\">;\n\n  shouldShowAddNewTip: Observable<boolean>;\n\n  createWorkspace(name: string): Promise<void>;\n  renameWorkspace(id: number, name: string): Promise<void>;\n  deleteWorkspace(id: number, forever: boolean): Promise<void>;\n  restoreWorkspace(ws: Workspace): Promise<void>;\n\n  createDoc(name: string, workspaceId: number|\"unsaved\"): Promise<string>;\n  renameDoc(docId: string, name: string): Promise<void>;\n  deleteDoc(docId: string, forever: boolean): Promise<void>;\n  restoreDoc(doc: Document): Promise<void>;\n  pinUnpinDoc(docId: string, pin: boolean): Promise<void>;\n  moveDoc(docId: string, workspaceId: number): Promise<void>;\n}\n\nexport interface ViewSettings {\n  currentSort: Observable<SortPref>;\n  currentView: Observable<ViewPref>;\n}\n\nexport class HomeModelImpl extends Disposable implements HomeModel, ViewSettings {\n  public readonly pageType = \"home\";\n  public readonly currentPage = Computed.create(this, urlState().state, (use, s) =>\n    s.homePage || (s.ws !== undefined ? \"workspace\" : \"all\"));\n  public readonly currentWSId = Computed.create(this, urlState().state, (use, s) => s.ws);\n  public readonly workspaces = Observable.create<Workspace[]>(this, []);\n  public readonly loading = Observable.create<boolean|\"slow\">(this, true);\n  public readonly available = Observable.create(this, false);\n  public readonly singleWorkspace = Observable.create(this, true);\n  public readonly trashWorkspaces = Observable.create<Workspace[]>(this, []);\n  public readonly templateWorkspaces = Observable.create<Workspace[]>(this, []);\n  public readonly importSources = Observable.create<ImportSourceElement[]>(this, []);\n\n  // Get the workspace details for the workspace with id of currentWSId.\n  public readonly currentWS = Computed.create(this, (use) =>\n    use(this.workspaces).find(ws => (ws.id === use(this.currentWSId))));\n\n  public readonly currentWSPinnedDocs = Computed.create(this, this.currentPage, this.currentWS, (use, page, ws) => {\n    const docs = (page === 'all') ?\n      flatten((use(this.workspaces).map(w => w.docs))) :\n      (ws ? ws.docs : []);\n    return sortBy(docs.filter(doc => doc.isPinned), (doc) => doc.name.toLowerCase());\n  });\n\n  public readonly featuredTemplates = Computed.create(this, this.templateWorkspaces, (_use, templates) => {\n    const featuredTemplates = flatten((templates).map(t => t.docs)).filter(t => t.isPinned);\n    return sortBy(featuredTemplates, (t) => t.name.toLowerCase());\n  });\n\n  public readonly otherSites = Computed.create(this, this.currentPage, this.app.topAppModel.orgs,\n    (_use, page, orgs) => {\n      if (page !== 'all') { return []; }\n\n      const currentOrg = this._app.currentOrg;\n      if (!currentOrg) { return []; }\n\n      const isPersonalOrg = currentOrg.owner;\n      if (!isPersonalOrg && (currentOrg.access !== 'viewers' || !currentOrg.public)) {\n        return [];\n      }\n\n      return orgs.filter(org => org.id !== currentOrg.id);\n    });\n\n  public readonly currentSort: Observable<SortPref>;\n  public readonly currentView: Observable<ViewPref>;\n\n  // The workspace for new docs, or \"unsaved\" to only allow unsaved-doc creation, or null if the\n  // user isn't allowed to create a doc.\n  public readonly newDocWorkspace = Computed.create(this, this.currentPage, this.currentWS, (use, page, ws) => {\n    // Anonymous user can create docs, but in unsaved mode.\n    if (!this.app.currentValidUser) { return \"unsaved\"; }\n    if (page === 'trash') { return null; }\n    const destWS = (['all', 'templates'].includes(page)) ? (use(this.workspaces)[0] || null) : ws;\n    return destWS && roles.canEdit(destWS.access) ? destWS : null;\n  });\n\n  // Whether to show intro: no docs (other than examples).\n  public readonly showIntro = Computed.create(this, this.workspaces, (use, wss) => (\n    wss.every((ws) => ws.isSupportWorkspace || ws.docs.length === 0)));\n\n  public readonly shouldShowAddNewTip = Observable.create(this,\n    !this._app.behavioralPromptsManager.hasSeenTip('addNew'));\n\n  private _userOrgPrefs = Observable.create<UserOrgPrefs|undefined>(this, this._app.currentOrg?.userOrgPrefs);\n\n  constructor(private _app: AppModel, clientScope: ClientScope) {\n    super();\n\n    if (!this.app.currentValidUser) {\n      // For the anonymous user, use local settings, don't attempt to save anything to the server.\n      const viewSettings = makeLocalViewSettings(null, 'all');\n      this.currentSort = viewSettings.currentSort;\n      this.currentView = viewSettings.currentView;\n    } else {\n      // Preference for sorting. Defaults to 'name'. Saved to server on write.\n      this.currentSort = Computed.create(this, this._userOrgPrefs,\n        (use, prefs) => SortPref.parse(prefs?.docMenuSort) || 'name')\n        .onWrite(s => this._saveUserOrgPref(\"docMenuSort\", s));\n\n      // Preference for view mode. The default is somewhat complicated. Saved to server on write.\n      this.currentView = Computed.create(this, this._userOrgPrefs,\n        (use, prefs) => ViewPref.parse(prefs?.docMenuView) || getViewPrefDefault(use(this.workspaces)))\n        .onWrite(s => this._saveUserOrgPref(\"docMenuView\", s));\n    }\n\n    this.autoDispose(subscribe(this.currentPage, this.currentWSId, (use) =>\n      this._updateWorkspaces().catch(reportError)));\n\n    // Defer home plugin initialization\n    const pluginManager = new HomePluginManager(\n      _app.topAppModel.plugins,\n      _app.topAppModel.getUntrustedContentOrigin()!,\n      clientScope);\n    const importSources = ImportSourceElement.fromArray(pluginManager.pluginsList);\n    this.importSources.set(importSources);\n\n    this._app.refreshOrgUsage().catch(reportError);\n  }\n\n  // Accessor for the AppModel containing this HomeModel.\n  public get app(): AppModel { return this._app; }\n\n  public async createWorkspace(name: string) {\n    const org = this._app.currentOrg;\n    if (!org) { return; }\n    this._checkForDuplicates(name);\n    await this._app.api.newWorkspace({name}, org.id);\n    await this._updateWorkspaces();\n  }\n\n  public async renameWorkspace(id: number, name: string) {\n    this._checkForDuplicates(name);\n    await this._app.api.renameWorkspace(id, name);\n    await this._updateWorkspaces();\n  }\n\n  public async deleteWorkspace(id: number, forever: boolean) {\n    // TODO: Prevent the last workspace from being removed.\n    await (forever ? this._app.api.deleteWorkspace(id) : this._app.api.softDeleteWorkspace(id));\n    await this._updateWorkspaces();\n  }\n\n  public async restoreWorkspace(ws: Workspace) {\n    await  this._app.api.undeleteWorkspace(ws.id);\n    await this._updateWorkspaces();\n    reportMessage(`Workspace \"${ws.name}\" restored`);\n  }\n\n  // Creates a new doc by calling the API, and returns its docId.\n  public async createDoc(name: string, workspaceId: number|\"unsaved\"): Promise<string> {\n    if (workspaceId === \"unsaved\") {\n      const timezone = await guessTimezone();\n      return await this._app.api.newUnsavedDoc({timezone});\n    }\n    const id = await this._app.api.newDoc({name}, workspaceId);\n    await this._updateWorkspaces();\n    return id;\n  }\n\n  public async renameDoc(docId: string, name: string): Promise<void> {\n    await this._app.api.renameDoc(docId, name);\n    await this._updateWorkspaces();\n  }\n\n  public async deleteDoc(docId: string, forever: boolean): Promise<void> {\n    await (forever ? this._app.api.deleteDoc(docId) : this._app.api.softDeleteDoc(docId));\n    await this._updateWorkspaces();\n  }\n\n  public async restoreDoc(doc: Document): Promise<void> {\n    await this._app.api.undeleteDoc(doc.id);\n    await this._updateWorkspaces();\n    reportMessage(`Document \"${doc.name}\" restored`);\n  }\n\n  public async pinUnpinDoc(docId: string, pin: boolean): Promise<void> {\n    await (pin ? this._app.api.pinDoc(docId) : this._app.api.unpinDoc(docId));\n    await this._updateWorkspaces();\n  }\n\n  public async moveDoc(docId: string, workspaceId: number): Promise<void> {\n    await this._app.api.moveDoc(docId, workspaceId);\n    await this._updateWorkspaces();\n  }\n\n  private _checkForDuplicates(name: string): void {\n    if (this.workspaces.get().find(ws => ws.name === name)) {\n      throw new UserError('Name already exists. Please choose a different name.');\n    }\n  }\n\n  // Fetches and updates workspaces, which include contained docs as well.\n  private async _updateWorkspaces() {\n    if (this.isDisposed()) {\n      return;\n    }\n    const org = this._app.currentOrg;\n    if (!org) {\n      this.workspaces.set([]);\n      this.trashWorkspaces.set([]);\n      this.templateWorkspaces.set([]);\n      return;\n    }\n\n    this.loading.set(true);\n    const currentPage = this.currentPage.get();\n    const promises = [\n      this._fetchWorkspaces(org.id, false).catch(reportError),\n      currentPage === 'trash' ? this._fetchWorkspaces(org.id, true).catch(reportError) : null,\n      this._maybeFetchTemplates(),\n    ] as const;\n\n    const promise = Promise.all(promises);\n    if (await isLongerThan(promise, DELAY_BEFORE_SPINNER_MS)) {\n      this.loading.set(\"slow\");\n    }\n    const [wss, trashWss, templateWss] = await promise;\n    if (this.isDisposed()) {\n      return;\n    }\n    // bundleChanges defers computeds' evaluations until all changes have been applied.\n    bundleChanges(() => {\n      this.workspaces.set(wss || []);\n      this.trashWorkspaces.set(trashWss || []);\n      this.templateWorkspaces.set(templateWss || []);\n      this.loading.set(false);\n      this.available.set(!!wss);\n      // Hide workspace name if we are showing a single (non-support) workspace, and active\n      // product doesn't allow adding workspaces.  It is important to check both conditions because:\n      //   * A personal org, where workspaces can't be added, can still have multiple\n      //     workspaces via documents shared by other users.\n      //   * An org with workspace support might happen to just have one workspace right\n      //     now, but it is good to show names to highlight the possibility of adding more.\n      const nonSupportWss = Array.isArray(wss) ? wss.filter(ws => !ws.isSupportWorkspace) : null;\n      this.singleWorkspace.set(\n        // The anon personal site always has 0 non-support workspaces.\n        nonSupportWss?.length === 0 ||\n        nonSupportWss?.length === 1 && _isSingleWorkspaceMode(this._app)\n      );\n    });\n  }\n\n  private async _fetchWorkspaces(orgId: number, forRemoved: boolean) {\n    let api = this._app.api;\n    if (forRemoved) {\n        api = api.forRemoved();\n    }\n    const wss = await api.getOrgWorkspaces(orgId);\n    if (this.isDisposed()) { return null; }\n    for (const ws of wss) {\n      ws.docs = sortBy(ws.docs, (doc) => doc.name.toLowerCase());\n\n      // Populate doc.removedAt for soft-deleted docs even when deleted along with a workspace.\n      if (forRemoved) {\n        for (const doc of ws.docs) {\n          doc.removedAt = doc.removedAt || ws.removedAt;\n        }\n      }\n\n      // Populate doc.workspace, which is used by DocMenu/PinnedDocs and\n      // is useful in cases where there are multiple workspaces containing\n      // pinned documents that need to be sorted in alphabetical order.\n      for (const doc of ws.docs) {\n        doc.workspace = doc.workspace ?? ws;\n      }\n    }\n    // Sort workspaces such that workspaces from the personal orgs of others\n    // come after workspaces from our own personal org; workspaces from personal\n    // orgs are grouped by personal org and the groups are ordered alphabetically\n    // by owner name; and all else being equal workspaces are ordered alphabetically\n    // by their name.  All alphabetical ordering is case-insensitive.\n    // Workspaces shared from support account (e.g. samples) are put last.\n    return sortBy(wss, (ws) => [ws.isSupportWorkspace,\n                                ownerName(this._app, ws).toLowerCase(),\n                                ws.name.toLowerCase()]);\n  }\n\n  /**\n   * Fetches templates if on the Templates or All Documents page.\n   *\n   * Only fetches featured (pinned) templates on the All Documents page.\n   */\n  private async _maybeFetchTemplates(): Promise<Workspace[] | null> {\n    const {templateOrg} = getGristConfig();\n    if (!templateOrg) { return null; }\n\n    const currentPage = this.currentPage.get();\n    const shouldFetchTemplates = ['all', 'templates'].includes(currentPage);\n    if (!shouldFetchTemplates) { return null; }\n\n    let templateWss: Workspace[] = [];\n    try {\n      const onlyFeatured = currentPage === 'all';\n      templateWss = await this._app.api.getTemplates(onlyFeatured);\n    } catch {\n      reportError('Failed to load templates');\n    }\n    if (this.isDisposed()) { return null; }\n\n    for (const ws of templateWss) {\n      for (const doc of ws.docs) {\n        // Populate doc.workspace, which is used by DocMenu/PinnedDocs and\n        // is useful in cases where there are multiple workspaces containing\n        // pinned documents that need to be sorted in alphabetical order.\n        doc.workspace = doc.workspace ?? ws;\n      }\n      ws.docs = sortBy(ws.docs, (doc) => doc.name.toLowerCase());\n    }\n    return templateWss;\n  }\n\n  private async _saveUserOrgPref<K extends keyof UserOrgPrefs>(key: K, value: UserOrgPrefs[K]) {\n    const org = this._app.currentOrg;\n    if (org) {\n      org.userOrgPrefs = {...org.userOrgPrefs, [key]: value};\n      this._userOrgPrefs.set(org.userOrgPrefs);\n      await this._app.api.updateOrg('current', {userOrgPrefs: org.userOrgPrefs});\n    }\n  }\n}\n\n// Check if active product allows just a single workspace.\nfunction _isSingleWorkspaceMode(app: AppModel): boolean {\n  return app.currentFeatures.maxWorkspacesPerOrg === 1;\n}\n\n// Returns a default view mode preference. We used to show 'list' for everyone. We now default to\n// 'icons' for new or light users. But if a user has more than 4 docs or any pinned docs, we'll\n// switch to 'list'. This will also avoid annoying existing users who may prefer a list.\nfunction getViewPrefDefault(workspaces: Workspace[]): ViewPref {\n  const userWorkspaces = workspaces.filter(ws => !ws.isSupportWorkspace);\n  const numDocs = userWorkspaces.reduce((sum, ws) => sum + ws.docs.length, 0);\n  const pinnedDocs = userWorkspaces.some((ws) => ws.docs.some(doc => doc.isPinned));\n  return (numDocs > 4 || pinnedDocs) ? 'list' : 'icons';\n}\n\n/**\n * Create observables for per-workspace view settings which default to org-wide settings, but can\n * be changed independently and persisted in localStorage.\n */\nexport function makeLocalViewSettings(home: HomeModel|null, wsId: number|'trash'|'all'|'templates'): ViewSettings {\n  const userId = home?.app.currentUser?.id || 0;\n  const sort = localStorageObs(`u=${userId}:ws=${wsId}:sort`);\n  const view = localStorageObs(`u=${userId}:ws=${wsId}:view`);\n\n  return {\n    currentSort: Computed.create(null,\n      // If no value in localStorage, use sort of All Documents.\n      (use) => SortPref.parse(use(sort)) || (home ? use(home.currentSort) : 'name'))\n      .onWrite((val) => sort.set(val)),\n    currentView: Computed.create(null,\n      // If no value in localStorage, use mode of All Documents, except Trash which defaults to 'list'.\n      (use) => ViewPref.parse(use(view)) || (wsId === 'trash' ? 'list' : (home ? use(home.currentView) : 'icons')))\n      .onWrite((val) => view.set(val)),\n  };\n}\n","/**\n * Helpers needed for showing the title of a workspace.\n */\nimport {AppModel} from 'app/client/models/AppModel';\nimport {FullUser} from 'app/common/LoginSessionAPI';\nimport {Workspace} from 'app/common/UserAPI';\n\n// Render the name of a workspace.  There is a similar method in HomeLeftPane.\n// Not merging since the styling of parts of the name may need to diverge.\nexport function workspaceName(app: AppModel, ws: Workspace) {\n  const {owner, name} = getWorkspaceInfo(app, ws);\n  return [name, owner ? `@${owner.name}` : ''].join(' ').trim();\n}\n\n// Get the name of the personal owner of a workspace, if it is set\n// and distinct from the current user.  If the personal owner is not\n// set, or is the same as the current user, the empty string is\n// returned.  The personal owner will only be set for workspaces in\n// the \"docs\" pseudo-organization, which is assembled from all the\n// personal organizations the current user has access to.\nexport function ownerName(app: AppModel, ws: Workspace): string {\n  const {owner, self} = getWorkspaceInfo(app, ws);\n  return self ? '' : (owner ? owner.name : '');\n}\n\n// Information needed for showing the title of a workspace.\nexport interface WorkspaceInfo {\n  name: string;      // user-specified workspace name (empty if should not be shown)\n  owner?: FullUser;  // personal owner of workspace (if known and should be shown)\n  self?: boolean;    // set if owner is current user\n  isDefault?: boolean;  // set if workspace is current user's 'Home' workspace\n}\n\n// Get information needed for showing the title of a workspace.\nexport function getWorkspaceInfo(app: AppModel, ws: Workspace): WorkspaceInfo {\n  const user = app.currentUser;\n  const {name, owner} = ws;\n  const isHome = name === 'Home';\n  if (!user || !owner) { return {owner, name}; }\n  const self = user.id === owner.id;\n  const isDefault = self && isHome;\n  if (ws.isSupportWorkspace) {\n    // Keep workspace name for support workspaces; drop owner name.\n    return {name, self, isDefault};\n  }\n  if (isHome && !isDefault) {\n    // \"Home\" workspaces of other users have their names omitted, but we retain\n    // the name \"Home\" for the current user's \"Home\" workspace.\n    return {name: '', owner, self, isDefault};  // omit name in this case\n  }\n  if (self) {\n    return {name, self, isDefault};\n  }\n  return {name, owner, self, isDefault};\n}\n","import { allCommands } from 'app/client/components/commands';\nimport { makeT } from 'app/client/lib/localization';\nimport { menuDivider, menuItemCmd } from 'app/client/ui2018/menus';\nimport { IMultiColumnContextMenu } from 'app/client/ui/GridViewMenus';\nimport { IRowContextMenu } from 'app/client/ui/RowContextMenu';\nimport { COMMENTS } from 'app/client/models/features';\nimport { dom } from 'grainjs';\n\nconst t = makeT('CellContextMenu');\n\nexport function CellContextMenu(rowOptions: IRowContextMenu, colOptions: IMultiColumnContextMenu) {\n\n  const { disableInsert, disableDelete, isViewSorted } = rowOptions;\n  const { disableModify, isReadonly } = colOptions;\n\n  // disableModify is true if the column is a summary column or is being transformed.\n  // isReadonly is true for readonly mode.\n  const disableForReadonlyColumn = dom.cls('disabled', Boolean(disableModify) || isReadonly);\n  const disableForReadonlyView = dom.cls('disabled', isReadonly);\n\n  const numCols: number = colOptions.numColumns;\n  const nameClearColumns = colOptions.isFiltered ?\n    t(\"Reset {{count}} entire columns\", {count: numCols}) :\n    t(\"Reset {{count}} columns\", {count: numCols});\n  const nameDeleteColumns = t(\"Delete {{count}} columns\", {count: numCols});\n\n  const numRows: number = rowOptions.numRows;\n  const nameDeleteRows = t(\"Delete {{count}} rows\", {count: numRows});\n\n  const nameClearCells = (numRows > 1 || numCols > 1) ? t(\"Clear values\") : t(\"Clear cell\");\n\n  const result: Array<Element|null> = [];\n\n  result.push(\n    menuItemCmd(allCommands.contextMenuCut, t('Cut'), disableForReadonlyColumn),\n    menuItemCmd(allCommands.contextMenuCopy, t('Copy')),\n    menuItemCmd(allCommands.contextMenuPaste, t('Paste'), disableForReadonlyColumn),\n    menuDivider(),\n    colOptions.isFormula ?\n      null :\n      menuItemCmd(allCommands.clearValues, nameClearCells, disableForReadonlyColumn),\n      menuItemCmd(allCommands.clearColumns, nameClearColumns, disableForReadonlyColumn),\n\n    ...(\n      (numCols > 1 || numRows > 1) ? [] : [\n        menuDivider(),\n        menuItemCmd(allCommands.copyLink, t(\"Copy anchor link\")),\n        menuDivider(),\n        menuItemCmd(allCommands.filterByThisCellValue, t(\"Filter by this value\")),\n        menuItemCmd(allCommands.openDiscussion, t('Comment'), dom.cls('disabled', (\n         isReadonly || numRows === 0 || numCols === 0\n        )), dom.hide(use => !use(COMMENTS()))) //TODO: i18next\n      ]\n    ),\n\n    menuDivider(),\n\n    // inserts\n    ...(\n      isViewSorted ?\n        // When the view is sorted, any newly added records get shifts instantly at the top or\n        // bottom. It could be very confusing for users who might expect the record to stay above or\n        // below the active row. Thus in this case we show a single `insert row` command.\n        [menuItemCmd(allCommands.insertRecordAfter, t(\"Insert row\"),\n                    dom.cls('disabled', disableInsert))] :\n\n        [menuItemCmd(allCommands.insertRecordBefore, t(\"Insert row above\"),\n                     dom.cls('disabled', disableInsert)),\n         menuItemCmd(allCommands.insertRecordAfter, t(\"Insert row below\"),\n                     dom.cls('disabled', disableInsert))]\n    ),\n    menuItemCmd(allCommands.duplicateRows, t(\"Duplicate rows\", {count: numRows}),\n        dom.cls('disabled', disableInsert || numRows === 0)),\n    menuItemCmd(allCommands.insertFieldBefore, t(\"Insert column to the left\"),\n                disableForReadonlyView),\n    menuItemCmd(allCommands.insertFieldAfter, t(\"Insert column to the right\"),\n                disableForReadonlyView),\n\n\n    menuDivider(),\n\n    // deletes\n    menuItemCmd(allCommands.deleteRecords, nameDeleteRows, dom.cls('disabled', disableDelete)),\n\n    menuItemCmd(allCommands.deleteFields, nameDeleteColumns, disableForReadonlyColumn),\n\n    // todo: add \"hide N columns\"\n  );\n\n  return result;\n}\n","import * as Clipboard from 'app/client/components/Clipboard';\nimport * as commands from 'app/client/components/commands';\nimport {copyToClipboard} from 'app/client/lib/clipboardUtils';\nimport {FocusLayer} from 'app/client/lib/FocusLayer';\nimport {makeT} from 'app/client/lib/localization';\nimport {setTestState} from 'app/client/lib/testState';\nimport {ViewFieldRec} from 'app/client/models/DocModel';\nimport {autoGrow} from 'app/client/ui/forms';\nimport {showTransientTooltip} from 'app/client/ui/tooltips';\nimport {basicButton, primaryButton, textButton} from 'app/client/ui2018/buttons';\nimport {theme, vars} from 'app/client/ui2018/cssVars';\nimport {icon} from 'app/client/ui2018/icons';\nimport {menuCssClass} from 'app/client/ui2018/menus';\n\nimport {Computed, dom, makeTestId, Observable, styled} from 'grainjs';\nimport * as ko from 'knockout';\nimport {IOpenController, PopupControl, setPopupToCreateDom} from 'popweasel';\nimport { cssInput, cssLabel, cssRenamePopup, cssTextArea } from 'app/client/ui/RenamePopupStyles';\n\n\nconst testId = makeTestId('test-column-title-');\nconst t = makeT('ColumnTitle');\n\ninterface IColumnTitleOptions {\n  field: ViewFieldRec;\n  isEditing: ko.Computed<boolean>;\n  optCommands?: any;\n}\n\nexport function buildRenameColumn(options: IColumnTitleOptions) {\n  return (elem: Element) => {\n    // To open the popup we will listen to the isEditing observable, and open the popup when it\n    // it is changed. This can be changed either by us, but also by an external source.\n    const trigger = (triggerElem: Element, ctl: PopupControl) => {\n      ctl.autoDispose(options.isEditing.subscribe((editing) => {\n        if (editing) {\n          ctl.open();\n        } else if (!ctl.isDisposed()) {\n          ctl.close();\n        }\n      }));\n    };\n    setPopupToCreateDom(elem, ctl => buildColumnRenamePopup(ctl, options), {\n      placement: 'bottom-start',\n      trigger: [trigger],\n      attach: 'body',\n      boundaries: 'viewport',\n    });\n  };\n}\n\nfunction buildColumnRenamePopup(\n  ctrl: IOpenController, {field, isEditing, optCommands}: IColumnTitleOptions\n) {\n  // Store temporary values for the label and description.\n  const editedLabel = Observable.create(ctrl, field.displayLabel.peek());\n  const editedDesc = Observable.create(ctrl, field.description.peek());\n  // Col id is static, as we can't forsee if it will change and what it will\n  // change to (it may overlap with another column)\n  const colId = '$' + field.colId.peek();\n\n  const hasChange = Computed.create(ctrl, (use) => {\n    return use(editedLabel)?.trim() !== field.displayLabel.peek()\n        || use(editedDesc)?.trim() !== field.description.peek();\n  });\n\n  const cantSave = Computed.create(ctrl, (use) => {\n    const filledLabel = Boolean(use(editedLabel)?.trim());\n    return !filledLabel;\n  });\n\n  // Function to change a column name.\n  const saveColumnLabel = async () => {\n    // Trim new label and make sure it is a string (not null).\n    const newLabel = editedLabel.get()?.trim() ?? '';\n    // Save only when it is not empty and different from the current value.\n    if (newLabel && newLabel !== field.displayLabel.peek()) {\n      await field.displayLabel.setAndSave(newLabel);\n    }\n  };\n\n  // Function to change a column description.\n  const saveColumnDesc = async () => {\n    const newDesc = editedDesc.get()?.trim() ?? '';\n    if (newDesc !== field.description.peek()) {\n      await field.description.saveOnly(newDesc);\n    }\n  };\n\n  // Function save column name and description and close the popup.\n  const save = () => Promise.all([\n    saveColumnLabel(),\n    saveColumnDesc()\n  ]);\n\n  // When the popup is closing we will save everything, unless the user has pressed the cancel button.\n  let cancelled = false;\n\n  // Function to close the popup with saving.\n  const close = () => ctrl.close();\n\n  // Function to close the popup without saving.\n  const cancel = () => { cancelled = true; close(); };\n\n  // Function that is called when popup is closed.\n  const onClose = () => {\n    if (!cancelled) {\n      save().catch(reportError);\n    }\n    // Reset the isEditing flag. It will set the editIndex in GridView to -1 if this is active column.\n    // It can happen that we will be open even if the column is not active (as the isEditing flag is asynchronous).\n    isEditing(false);\n  };\n\n  // User interface for the popup.\n  const myCommands = {\n    // Escape key: just close the popup.\n    cancel,\n    // Enter key: save and close the popup, unless the description input is focused.\n    // There is also a variant for Ctrl+Enter which will always save.\n    accept: () => {\n      // Enters are ignored in the description input (unless ctrl is pressed)\n      if (document.activeElement === descInput) { return true; }\n      close();\n    },\n    // Tab: save and close the popup, and move to the next field.\n    nextField: () => {\n      close();\n      optCommands?.nextField?.();\n    },\n    // Shift + Tab: save and close the popup, and move to the previous field.\n    prevField: () => {\n      close();\n      optCommands?.prevField?.();\n    },\n    // ArrowUp: moves focus to the label if it is already at the top\n    cursorUp: () => {\n      if (document.activeElement === descInput && descInput?.selectionStart === 0) {\n        labelInput?.focus();\n        labelInput?.select();\n      } else {\n        return true;\n      }\n    },\n    // ArrowDown: move to the description input, only if the label input is focused.\n    cursorDown: () => {\n      if (document.activeElement === labelInput) {\n        const focus = () => {\n          descInput?.focus();\n          descInput?.select();\n        };\n        showDesc.set(true);\n        focus();\n      } else {\n        return true;\n      }\n    }\n  };\n\n  // Create this group and attach it to the popup and both inputs.\n  const commandGroup = commands.createGroup({...optCommands, ...myCommands}, ctrl, true);\n\n  // We will still focus from other elements and restore it on either the label or description input.\n  let lastFocus: HTMLElement | undefined;\n  const rememberFocus = (el: HTMLElement) => dom.on('focus', () => lastFocus = el);\n  const restoreFocus = (el: HTMLElement) => dom.on('focus', () => lastFocus?.focus());\n\n  const showDesc = Observable.create(null, Boolean(field.description.peek() !== ''));\n\n  let labelInput: HTMLInputElement | undefined;\n  let descInput: HTMLTextAreaElement | undefined;\n  return cssRenamePopup(\n    dom.onDispose(onClose),\n    dom.autoDispose(commandGroup),\n    dom.autoDispose(showDesc),\n    testId('popup'),\n    dom.cls(menuCssClass),\n    cssLabel(t(\"Column label\")),\n    cssColLabelBlock(\n      labelInput = cssInput(\n        editedLabel,\n        updateOnKey,\n        { placeholder: t(\"Provide a column label\") },\n        testId('label'),\n        commandGroup.attach(),\n        rememberFocus,\n      ),\n      cssColId(\n        t(\"COLUMN ID: \"),\n        colId,\n        dom.on('click', async (e, d) => {\n          e.stopImmediatePropagation();\n          e.preventDefault();\n          showTransientTooltip(d, t(\"Column ID copied to clipboard\"), {\n            key: 'copy-column-id'\n          });\n          await copyToClipboard(colId);\n          setTestState({clipboard: colId});\n        }),\n        testId('colid'),\n      ),\n    ),\n    dom.maybe(use => !use(showDesc), () => cssAddDescription(\n      textButton(\n        icon('Plus'),\n        t(\"Add description\"),\n        dom.on('click', () => {\n          showDesc.set(true);\n          descInput?.focus();\n          setTimeout(() => descInput?.focus(), 0);\n        }),\n        testId('add-description'),\n      ),\n    )),\n    dom.maybe(showDesc, () => [\n      cssLabel(t(\"Column description\")),\n      descInput = cssTextArea(editedDesc, updateOnKey,\n        testId('description'),\n        commandGroup.attach(),\n        rememberFocus,\n        autoGrow(editedDesc),\n      ),\n    ]),\n    dom.onKeyDown({\n      Enter$: e => {\n        if (e.ctrlKey || e.metaKey) {\n          close();\n          return false;\n        }\n      }\n    }),\n    cssButtons(\n      primaryButton(\n        dom.on('click', cancel),\n        testId('close'),\n        dom.hide(hasChange),\n        t(\"Close\"),\n      ),\n      primaryButton(t(\"Save\"),\n        dom.on('click', close),\n        testId('save'),\n        dom.show(hasChange),\n        dom.boolAttr('disabled', cantSave),\n      ),\n      basicButton(t(\"Cancel\"),\n        testId('cancel'),\n        dom.on('click', cancel),\n        dom.show(hasChange)\n      ),\n    ),\n    // After showing the popup, focus the label input and select it's content.\n    elem => { setTimeout(() => {\n      if (ctrl.isDisposed()) { return; }\n      labelInput?.focus();\n      labelInput?.select();\n    }, 0); },\n    // Create a FocusLayer to keep focus in this popup while it's active, by default when focus is stolen\n    // by someone else, we will bring back it to the label element. Clicking anywhere outside the popup\n    // will close it, but not when we click on the header itself (as it will reopen it). So this one\n    // makes sure that the focus is restored in the label.\n    elem => { FocusLayer.create(ctrl, {\n      defaultFocusElem: elem,\n      pauseMousetrap: false,\n      allowFocus: Clipboard.allowFocus\n    }); },\n    restoreFocus\n  );\n}\n\nconst updateOnKey = { onInput: true };\n\nconst cssAddDescription = styled('div', `\n  display: flex;\n  padding-top: 14px;\n  padding-bottom: 4px;\n  & button {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n  }\n`);\n\nconst cssColLabelBlock = styled('div', `\n  display: flex;\n  flex-direction: column;\n  flex: auto;\n  min-width: 80px;\n`);\n\nconst cssColId = styled('div', `\n  font-size: ${vars.xsmallFontSize};\n  font-weight: ${vars.bigControlTextWeight};\n  margin-top: 8px;\n  color: ${theme.lightText};\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  cursor: pointer;\n  align-self: start;\n`);\n\nconst cssButtons = styled('div', `\n  display: flex;\n  margin-top: 16px;\n  gap: 8px;\n  & button {\n    min-width: calc(50 / 13 * 1em); /* Min 50px for 13px font size, to make Save and Close buttons equal width */\n  }\n`);\n","import {transientInput} from 'app/client/ui/transientInput';\nimport {mediaSmall, theme, vars} from 'app/client/ui2018/cssVars';\nimport {icon} from 'app/client/ui2018/icons';\nimport {styled} from 'grainjs';\nimport {bigBasicButton} from 'app/client/ui2018/buttons';\n\n// Import popweasel to ensure that sortSelector style below comes later in CSS than popweasel\n// styles, which gives it priority.\nimport 'popweasel';\n\n// The \"&:after\" clause forces some padding below all docs.\nexport const docList = styled('div', `\n  height: 100%;\n  padding: 32px 64px 24px 64px;\n  overflow-y: auto;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n\n  &:after {\n    content: \"\";\n    display: block;\n    height: 64px;\n  }\n  @media ${mediaSmall} {\n    & {\n      padding: 32px 24px 24px 24px;\n    }\n  }\n  @media print {\n    & {\n      display: none;\n    }\n  }\n`);\n\nexport const docListContent = styled('div', `\n  display: flex;\n`);\n\nexport const docMenu = styled('div', `\n  flex-grow: 1;\n  max-width: 100%;\n`);\n\nconst listHeader = styled('div', `\n  min-height: 32px;\n  line-height: 32px;\n  color: ${theme.text};\n  font-size: ${vars.xxxlargeFontSize};\n  font-weight: ${vars.headerControlTextWeight};\n`);\n\nexport const docListHeader = styled(listHeader, `\n  margin-bottom: 24px;\n`);\n\nexport const templatesHeaderWrap = styled('div', `\n  display: flex;\n  align-items: baseline;\n  justify-content: space-between;\n  gap: 16px;\n  margin-bottom: 24px;\n\n  @media ${mediaSmall} {\n    & {\n      flex-direction: column;\n      align-items: flex-start;\n    }\n  }\n`);\n\nexport const templatesHeader = styled(listHeader, `\n  cursor: pointer;\n`);\n\nexport const featuredTemplatesHeader = styled(docListHeader, `\n  display: flex;\n  align-items: center;\n`);\n\nexport const otherSitesHeader = templatesHeader;\n\nexport const allDocsTemplates = styled('div', `\n  display: flex;\n`);\n\nexport const docBlock = styled('div', `\n  color: ${theme.text};\n  max-width: 550px;\n  min-width: 300px;\n  margin-bottom: 28px;\n\n  &-icons {\n    max-width: max-content;\n    min-width: calc(min(550px, 100%));\n  }\n`);\n\nexport const templatesDocBlock = styled(docBlock, `\n  margin-top: 32px;\n`);\n\nexport const otherSitesBlock = styled('div', `\n  color: ${theme.text};\n  margin-bottom: 32px;\n`);\n\nexport const otherSitesButtons = styled('div', `\n  display: flex;\n  overflow: auto;\n  padding-bottom: 16px;\n  margin-top: 16px;\n  margin-bottom: 28px;\n  gap: 16px;\n`);\n\nexport const siteButton = styled(bigBasicButton, `\n  flex: 0 0 auto;\n`);\n\nexport const docHeaderIcon = styled(icon, `\n  margin-right: 8px;\n  margin-top: -3px;\n  --icon-color: ${theme.lightText};\n`);\n\nexport const pinnedDocsIcon = styled(docHeaderIcon, `\n  --icon-color: ${theme.text};\n`);\n\nexport const featuredTemplatesIcon = styled(icon, `\n  --icon-color: ${theme.text};\n  margin-right: 8px;\n  width: 20px;\n  height: 20px;\n`);\n\nexport const templatesHeaderIcon = styled(docHeaderIcon, `\n  width: 24px;\n  height: 24px;\n`);\n\nexport const otherSitesHeaderIcon = templatesHeaderIcon;\n\nconst docBlockHeader = `\n  display: flex;\n  align-items: center;\n  height: 40px;\n  line-height: 40px;\n  margin-bottom: 8px;\n  margin-right: -16px;\n  color: ${theme.text};\n  font-size: ${vars.mediumFontSize};\n  font-weight: bold;\n  &, &:hover, &:focus {\n    text-decoration: none;\n    outline: none;\n    color: inherit;\n  }\n`;\n\nexport const docBlockHeaderLink = styled('a', docBlockHeader);\n\nexport const templateBlockHeader = styled('div', docBlockHeader);\n\nexport const wsLeft = styled('div', `\n  color: ${theme.text};\n  flex: 1 0 50%;\n  min-width: 0px;\n  margin-right: 24px;\n`);\n\nexport const docRowWrapper = styled('div', `\n  position: relative;\n  margin: 0px -16px 8px -16px;\n  border-radius: 3px;\n  font-size: ${vars.mediumFontSize};\n  color: ${theme.text};\n  --icon-color: ${theme.lightText};\n\n  &:hover, &.weasel-popup-open, &-renaming {\n    background-color: ${theme.hover};\n  }\n`);\n\nexport const docRowLink = styled('a', `\n  display: flex;\n  align-items: center;\n  height: 40px;\n  line-height: 40px;\n  border-radius: 3px;\n  outline: none;\n  transition: background-color 2s;\n  &, &:hover, &:focus {\n    text-decoration: none;\n    outline: none;\n    color: inherit;\n  }\n  &-no-access, &-no-access:hover, &-no-access:focus {\n    color: ${theme.disabledText};\n    cursor: not-allowed;\n  }\n`);\n\nexport const docLeft = styled('div', `\n  flex: 1 0 50%;\n  min-width: 0px;\n  margin: 0 16px;\n  display: flex;\n  align-items: center;\n`);\n\nexport const docName = styled('div', `\n  flex: 0 1 auto;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`);\n\nexport const docPinIcon = styled(icon, `\n  flex: none;\n  margin-left: 4px;\n  --icon-color: ${theme.accentIcon};\n`);\n\nexport const docPublicIcon = styled(icon, `\n  flex: none;\n  margin-left: auto;\n  --icon-color: ${theme.accentIcon};\n`);\n\nexport const docEditorInput = styled(transientInput, `\n  flex: 1 0 50%;\n  min-width: 0px;\n  margin: 0 16px;\n  color: initial;\n  font-size: inherit;\n  line-height: initial;\n`);\n\nexport const docRowUpdatedAt = styled('div', `\n  flex: 1 1 50%;\n  color: ${theme.lightText};\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  font-weight: normal;\n`);\n\nexport const docMenuTrigger = styled('div', `\n  flex: none;\n  margin: 0 4px 0 auto;\n  height: 24px;\n  width: 24px;\n  padding: 4px;\n  line-height: 0px;\n  border-radius: 3px;\n  cursor: default;\n  --icon-color: ${theme.docMenuDocOptionsFg};\n  .${docRowLink.className}:hover > & {\n    --icon-color: ${theme.docMenuDocOptionsHoverFg};\n  }\n  &:hover, &.weasel-popup-open {\n    background-color: ${theme.docMenuDocOptionsHoverBg};\n    --icon-color: ${theme.docMenuDocOptionsHoverFg};\n  }\n`);\n\nexport const moveDocModalBody = styled('div', `\n  display: flex;\n  flex-direction: column;\n  border-bottom: 1px solid ${theme.modalBorderDark};\n  margin: 0 -64px;\n  height: 200px;\n`);\n\nexport const moveDocListItem = styled('div', `\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  height: 32px;\n  padding: 12px 64px;\n  cursor: pointer;\n  font-size: ${vars.mediumFontSize};\n\n  &-selected {\n    background-color: ${theme.moveDocsSelectedBg};\n    color: ${theme.moveDocsSelectedFg};\n  }\n  &-disabled {\n    color: ${theme.moveDocsDisabledFg};\n    cursor: default;\n  }\n`);\n\nexport const moveDocListText = styled('div', `\n  display: flex;\n  flex: 1 1 0;\n  flex-direction: column;\n  justify-content: center;\n`);\n\nexport const moveDocListHintText = styled(moveDocListText, `\n  text-align: right;\n`);\n\nexport const spinner = styled('div', `\n  display: flex;\n  align-items: center;\n  height: 80px;\n  margin: auto;\n  margin-top: 80px;\n`);\n\nexport const prefSelectors = styled('div', `\n  float: right;\n  display: flex;\n  align-items: center;\n`);\n\nexport const sortSelector = styled('div', `\n  margin-right: 24px;\n\n  /* negate the styles of a select that normally looks like a button */\n  border: none;\n  display: inline-flex;\n  height: unset;\n  line-height: unset;\n  align-items: center;\n  border-radius: ${vars.controlBorderRadius};\n  color: ${theme.controlFg};\n  --icon-color: ${theme.controlFg};\n  background-color: unset;\n\n  &:focus, &:hover {\n    outline: none;\n    box-shadow: none;\n    background-color: ${theme.hover};\n  }\n  @media ${mediaSmall} {\n    & {\n      margin-right: 0;\n    }\n  }\n`);\n\nexport const upgradeButton = styled('div', `\n  margin-left: 32px;\n\n  @media ${mediaSmall} {\n    & {\n      margin-left: 8px;\n    }\n  }\n`);\n\nexport const upgradeCard = styled('div', `\n  margin-left: 64px;\n`);\n","import {IExampleInfo} from 'app/client/ui/ExampleInfo';\nimport {prepareForTransition, TransitionWatcher} from 'app/client/ui/transitions';\nimport {mediaXSmall, testId, theme, vars} from 'app/client/ui2018/cssVars';\nimport {icon} from 'app/client/ui2018/icons';\nimport {cssLink} from 'app/client/ui2018/links';\nimport {dom, styled} from 'grainjs';\nimport {AutomaticHelpToolInfo} from \"app/client/ui/Tools\";\n\nlet prevCardClose: (() => void)|null = null;\n\n// Open a popup with a card introducing this example, if the user hasn't dismissed it in the past.\nexport function showExampleCard(\n  example: IExampleInfo, toolInfo: AutomaticHelpToolInfo\n) {\n  const {elem: btnElem, markAsSeen, reopen} = toolInfo;\n\n  // Close the example card.\n  function close() {\n    prevCardClose = null;\n    collapseAndRemoveCard(cardElem, btnElem.getBoundingClientRect());\n    markAsSeen();\n  }\n\n  const card = example.welcomeCard;\n  if (!card) { return null; }\n  const cardElem = cssCard(\n    cssImage({src: example.imgUrl}),\n    cssBody(\n      cssTitle(card.title),\n      cssInfo(card.text),\n      cssButtons(\n        cssLinkBtn(cssLinkIcon('Page'), card.tutorialName,\n          {href: example.tutorialUrl, target: '_blank'},\n        ),\n        // TODO: Add a link to the overview video (as popup or to a support page that shows the\n        // video). Also include a 'Video' icon.\n        // cssLinkBtn(cssLinkIcon('Video'), 'Grist Video Tour'),\n      )\n    ),\n    cssCloseButton(cssBigIcon('CrossBig'),\n      dom.on('click', close),\n      testId('example-card-close'),\n    ),\n    testId('example-card'),\n  );\n  document.body.appendChild(cardElem);\n\n  // When reopening, open the card smoothly, for a nicer-looking effect.\n  if (reopen) {\n    expandCard(cardElem, btnElem.getBoundingClientRect());\n  }\n\n  prevCardClose?.();\n  prevCardClose = () => disposeCard(cardElem);\n}\n\nfunction disposeCard(cardElem: HTMLElement) {\n  dom.domDispose(cardElem);\n  cardElem.remove();\n}\n\n// When closing the card, collapse it visually into the button that can open it again, to hint to\n// the user where to find that button. Remove the card after the animation.\nfunction collapseAndRemoveCard(card: HTMLElement, collapsedRect: DOMRect) {\n  const watcher = new TransitionWatcher(card);\n  watcher.onDispose(() => disposeCard(card));\n  collapseCard(card, collapsedRect);\n}\n\n// Implements the collapsing animation by simply setting a scale transform with a suitable origin.\nfunction collapseCard(card: HTMLElement, collapsedRect: DOMRect) {\n  const rect = card.getBoundingClientRect();\n  const originX = (collapsedRect.left + collapsedRect.width / 2) - rect.left;\n  const originY = (collapsedRect.top + collapsedRect.height / 2) - rect.top;\n  Object.assign(card.style, {\n    transform: `scale(${collapsedRect.width / rect.width}, ${collapsedRect.height / rect.height})`,\n    transformOrigin: `${originX}px ${originY}px`,\n    opacity: '0',\n  });\n}\n\n// To expand the card visually, we reverse the process by collapsing it first with transitions\n// disabled, then resetting properties to their defaults with transitions enabled again.\nfunction expandCard(card: HTMLElement, collapsedRect: DOMRect) {\n  prepareForTransition(card, () => collapseCard(card, collapsedRect));\n  Object.assign(card.style, {\n    transform: '',\n    opacity: '',\n    visibility: 'visible',\n  });\n}\n\n\nconst cssCard = styled('div', `\n  position: absolute;\n  left: 24px;\n  bottom: 24px;\n  margin-right: 24px;\n  max-width: 624px;\n  padding: 32px 56px 32px 32px;\n  background-color: ${theme.popupBg};\n  box-shadow: 0 2px 18px 0 ${theme.popupInnerShadow}, 0 0 1px 0 ${theme.popupOuterShadow};\n  display: flex;\n  overflow: hidden;\n  transition-property: opacity, transform;\n  transition-duration: 0.5s;\n  transition-timing-func: ease-in;\n  --title-font-size: ${vars.headerControlFontSize};\n\n  @media ${mediaXSmall} {\n    & {\n      flex-direction: column;\n      padding: 32px;\n      --title-font-size: 18px;\n    }\n  }\n`);\n\nconst cssImage = styled('img', `\n  flex: none;\n  width: 180px;\n  height: 140px;\n  margin: 0 16px 0 -8px;\n  @media ${mediaXSmall} {\n    & {\n      margin: auto;\n    }\n  }\n`);\n\nconst cssBody = styled('div', `\n  color: ${theme.text};\n  min-width: 0px;\n`);\n\nconst cssTitle = styled('div', `\n  color: ${theme.text};\n  font-size: var(--title-font-size);\n  font-weight: ${vars.headerControlTextWeight};\n  margin-bottom: 16px;\n`);\n\nconst cssInfo = styled('div', `\n  margin: 16px 0 24px 0;\n  line-height: 1.6;\n`);\n\nexport const cssButtons = styled('div', `\n  display: flex;\n`);\n\nexport const cssLinkBtn = styled(cssLink, `\n  &:not(:last-child) {\n    margin-right: 32px;\n  }\n`);\n\nexport const cssLinkIcon = styled(icon, `\n  margin-right: 8px;\n  margin-top: -2px;\n`);\n\nexport const cssCloseButton = styled('div', `\n  position: absolute;\n  top: 8px;\n  right: 8px;\n  padding: 4px;\n  border-radius: 4px;\n  cursor: pointer;\n  --icon-color: ${theme.popupCloseButtonFg};\n\n  &:hover {\n    background-color: ${theme.hover};\n  }\n`);\n\nexport const cssBigIcon = styled(icon, `\n  padding: 12px;\n`);\n","import {allCommands} from 'app/client/components/commands';\nimport {makeT} from 'app/client/lib/localization';\nimport {IRowContextMenu} from 'app/client/ui/RowContextMenu';\nimport {menuDivider, menuItemCmd} from 'app/client/ui2018/menus';\nimport {dom} from 'grainjs';\n\nconst t = makeT('FieldContextMenu');\n\nexport interface IFieldContextMenu {\n  disableModify: boolean;\n  isReadonly: boolean;\n}\n\nexport function FieldContextMenu(_rowOptions: IRowContextMenu, fieldOptions: IFieldContextMenu) {\n  const {disableModify, isReadonly} = fieldOptions;\n  const disableForReadonlyColumn = dom.cls('disabled', disableModify || isReadonly);\n  return [\n    menuItemCmd(allCommands.contextMenuCut, t('Cut'), disableForReadonlyColumn),\n    menuItemCmd(allCommands.contextMenuCopy, t('Copy')),\n    menuItemCmd(allCommands.contextMenuPaste, t('Paste'), disableForReadonlyColumn),\n    menuDivider(),\n    menuItemCmd(allCommands.clearCardFields, t('Clear field'), disableForReadonlyColumn),\n    menuItemCmd(allCommands.hideCardFields, t('Hide field')),\n    menuDivider(),\n    menuItemCmd(allCommands.copyLink, t('Copy anchor link')),\n  ];\n}\n","import {makeT} from 'app/client/lib/localization';\nimport { allCommands } from 'app/client/components/commands';\nimport { ViewFieldRec } from 'app/client/models/entities/ViewFieldRec';\nimport { testId, theme } from 'app/client/ui2018/cssVars';\nimport { icon } from 'app/client/ui2018/icons';\nimport { menuDivider, menuItem, menuItemCmd } from 'app/client/ui2018/menus';\nimport { Sort } from 'app/common/SortSpec';\nimport { dom, DomElementArg, styled } from 'grainjs';\nimport isEqual = require('lodash/isEqual');\n\nconst t = makeT('GridViewMenus');\n\ninterface IView {\n  addNewColumn: () => void;\n  showColumn: (colId: number, atIndex: number) => void;\n}\n\ninterface IViewSection {\n  viewFields: any;\n  hiddenColumns: any;\n}\n\n/**\n * Creates a menu to add a new column. Should be used only when there are hidden columns to display,\n * otherwise there is no need for this menu.\n */\nexport function ColumnAddMenu(gridView: IView, viewSection: IViewSection) {\n  return [\n    menuItem(() => gridView.addNewColumn(), t(\"Add Column\")),\n    menuDivider(),\n    ...viewSection.hiddenColumns().map((col: any) => menuItem(\n      () => {\n        gridView.showColumn(col.id(), viewSection.viewFields().peekLength);\n        // .then(() => gridView.scrollPaneRight());\n      }, t(\"Show column {{- label}}\", {label: col.label()})))\n  ];\n}\nexport interface IMultiColumnContextMenu {\n  // For multiple selection, true/false means the value applies to all columns, 'mixed' means it's\n  // true for some columns, but not all.\n  numColumns: number;\n  numFrozen: number;\n  disableModify: boolean|'mixed';  // If the columns are read-only. Mixed for multiple columns where some are read-only.\n  isReadonly: boolean;\n  isRaw: boolean;\n  isFiltered: boolean;            // If this view shows a proper subset of all rows in the table.\n  isFormula: boolean|'mixed';\n  columnIndices: number[];\n  totalColumnCount: number;\n  disableFrozenMenu: boolean;\n}\n\ninterface IColumnContextMenu extends IMultiColumnContextMenu {\n  filterOpenFunc: () => void;\n  sortSpec: Sort.SortSpec;\n  colId: number;\n}\n\nexport function calcFieldsCondition(fields: ViewFieldRec[], condition: (f: ViewFieldRec) => boolean): boolean|\"mixed\" {\n  return fields.every(condition) ? true : (fields.some(condition) ? \"mixed\" : false);\n}\n\nexport function ColumnContextMenu(options: IColumnContextMenu) {\n  const { disableModify, filterOpenFunc, colId, sortSpec, isReadonly } = options;\n\n  const disableForReadonlyColumn = dom.cls('disabled', Boolean(disableModify) || isReadonly);\n\n  const addToSortLabel = getAddToSortLabel(sortSpec, colId);\n\n  return [\n    menuItemCmd(allCommands.fieldTabOpen, t(\"Column Options\")),\n    menuItem(filterOpenFunc, t(\"Filter Data\")),\n    menuDivider({style: 'margin-bottom: 0;'}),\n    cssRowMenuItem(\n      customMenuItem(\n        allCommands.sortAsc.run,\n        dom('span', t(\"Sort\"), {style: 'flex: 1  0 auto; margin-right: 8px;'},\n            testId('sort-label')),\n        icon('Sort', dom.style('transform', 'scaley(-1)')),\n        'A-Z',\n        dom.style('flex', ''),\n        cssCustomMenuItem.cls('-selected', Sort.containsOnly(sortSpec, colId, Sort.ASC)),\n        testId('sort-asc'),\n      ),\n      customMenuItem(\n        allCommands.sortDesc.run,\n        icon('Sort'),\n        'Z-A',\n        cssCustomMenuItem.cls('-selected', Sort.containsOnly(sortSpec, colId, Sort.DESC)),\n        testId('sort-dsc'),\n      ),\n      testId('sort'),\n    ),\n    addToSortLabel ? [\n      cssRowMenuItem(\n        customMenuItem(\n          allCommands.addSortAsc.run,\n          cssRowMenuLabel(addToSortLabel, testId('add-to-sort-label')),\n          icon('Sort', dom.style('transform', 'scaley(-1)')),\n          'A-Z',\n          cssCustomMenuItem.cls('-selected', Sort.contains(sortSpec, colId, Sort.ASC)),\n          testId('add-to-sort-asc'),\n        ),\n        customMenuItem(\n          allCommands.addSortDesc.run,\n          icon('Sort'),\n          'Z-A',\n          cssCustomMenuItem.cls('-selected', Sort.contains(sortSpec, colId, Sort.DESC)),\n          testId('add-to-sort-dsc'),\n        ),\n        testId('add-to-sort'),\n      ),\n    ] : null,\n    menuDivider({style: 'margin-bottom: 0; margin-top: 0;'}),\n    menuItem(allCommands.sortFilterTabOpen.run, t(\"More sort options ...\"), testId('more-sort-options')),\n    menuDivider({style: 'margin-top: 0;'}),\n    menuItemCmd(allCommands.renameField, t(\"Rename column\"), disableForReadonlyColumn),\n    freezeMenuItemCmd(options),\n    menuDivider(),\n    MultiColumnMenu((options.disableFrozenMenu = true, options)),\n    testId('column-menu'),\n  ];\n}\n\n/**\n * Note about available options. There is a difference between clearing values (writing empty\n * string, which makes cells blank, including Numeric cells) and converting a column to an empty\n * column (i.e. column with empty formula; in this case a Numeric column becomes all 0s today).\n *\n * We offer both options if data columns are selected. If only formulas, only the second option\n * makes sense.\n */\nexport function MultiColumnMenu(options: IMultiColumnContextMenu) {\n  const disableForReadonlyColumn = dom.cls('disabled', Boolean(options.disableModify) || options.isReadonly);\n  const disableForReadonlyView = dom.cls('disabled', options.isReadonly);\n  const num: number = options.numColumns;\n  const nameClearColumns = options.isFiltered ?\n    t('Reset {{count}} entire columns', {count: num}) :\n    t('Reset {{count}} columns', {count: num});\n  const nameDeleteColumns = t('Delete {{count}} columns', {count: num});\n  const nameHideColumns = t('Hide {{count}} columns', {count: num});\n  const frozenMenu = options.disableFrozenMenu ? null : freezeMenuItemCmd(options);\n  return [\n    frozenMenu ? [frozenMenu, menuDivider()]: null,\n    // Offered only when selection includes formula columns, and converts only those.\n    (options.isFormula ?\n      menuItemCmd(allCommands.convertFormulasToData, t(\"Convert formula to data\"),\n        disableForReadonlyColumn) : null),\n\n    // With data columns selected, offer an additional option to clear out selected cells.\n    (options.isFormula !== true ?\n      menuItemCmd(allCommands.clearValues, t(\"Clear values\"), disableForReadonlyColumn) : null),\n\n    (!options.isRaw ? menuItemCmd(allCommands.hideFields, nameHideColumns, disableForReadonlyView) : null),\n    menuItemCmd(allCommands.clearColumns, nameClearColumns, disableForReadonlyColumn),\n    menuItemCmd(allCommands.deleteFields, nameDeleteColumns, disableForReadonlyColumn),\n\n    menuDivider(),\n    menuItemCmd(allCommands.insertFieldBefore, t(\"Insert column to the left\"), disableForReadonlyView),\n    menuItemCmd(allCommands.insertFieldAfter, t(\"Insert column to the right\"), disableForReadonlyView)\n  ];\n}\n\nexport function freezeAction(options: IMultiColumnContextMenu): { text: string; numFrozen: number; } | null {\n /**\n   * When user clicks last column - don't offer freezing\n   * When user clicks on a normal column - offer him to freeze all the columns to the\n   * left (inclusive).\n   * When user clicks on a frozen column - offer him to unfreeze all the columns to the\n   * right (inclusive)\n   * When user clicks on a set of columns then:\n   * - If the set of columns contains the last columns that are frozen - offer unfreezing only those columns\n   * - If the set of columns is right after the frozen columns or spans across - offer freezing only those columns\n   *\n   * All of the above are a single command - toggle freeze\n   */\n\n  const length = options.numColumns;\n\n  // make some assertions - number of columns selected should always be > 0\n  if (length === 0) { return null; }\n\n  const indices = options.columnIndices;\n  const firstColumnIndex = indices[0];\n  const lastColumnIndex = indices[indices.length - 1];\n  const numFrozen = options.numFrozen;\n\n  // if set has last column in it - don't offer freezing\n  if (lastColumnIndex == options.totalColumnCount - 1) {\n    return null;\n  }\n\n  const isNormalColumn = length === 1 && (firstColumnIndex + 1) > numFrozen;\n  const isFrozenColumn = length === 1 && (firstColumnIndex+ 1) <= numFrozen;\n  const isSet = length > 1;\n  const isLastFrozenSet = isSet && lastColumnIndex + 1 === numFrozen;\n  const isFirstNormalSet = isSet && firstColumnIndex === numFrozen;\n  const isSpanSet = isSet && firstColumnIndex <= numFrozen && lastColumnIndex >= numFrozen;\n\n  let text = '';\n\n  if (!isSet) {\n    if (isNormalColumn) {\n      // text to show depends on what user selected and how far are we from\n      // last frozen column\n\n      // if user clicked the first column or a column just after frozen set\n      if (firstColumnIndex === 0 || firstColumnIndex === numFrozen) {\n        text = t('Freeze {{count}} columns', {count: 1});\n      } else {\n        // else user clicked any other column that is farther, offer to freeze\n        // proper number of column\n        const properNumber = firstColumnIndex - numFrozen + 1;\n        text = numFrozen ?\n          t('Freeze {{count}} more columns', {count: properNumber}) :\n          t('Freeze {{count}} columns', {count: properNumber});\n      }\n      return {\n        text,\n        numFrozen : firstColumnIndex + 1\n      };\n    } else if (isFrozenColumn) {\n      // when user clicked last column in frozen set - offer to unfreeze this column\n      if (firstColumnIndex + 1 === numFrozen) {\n        text = t('Unfreeze {{count}} columns', {count: 1});\n      } else {\n        // else user clicked column that is not the last in a frozen set\n        // offer to unfreeze proper number of columns\n        const properNumber = numFrozen - firstColumnIndex;\n        text = properNumber === numFrozen ?\n          t('Unfreeze all columns') :\n          t('Unfreeze {{count}} columns', {count: properNumber});\n      }\n      return {\n        text,\n        numFrozen : indices[0]\n      };\n    } else {\n      return null;\n    }\n  } else {\n    if (isLastFrozenSet) {\n      text = t('Unfreeze {{count}} columns', {count: length});\n      return {\n        text,\n        numFrozen : numFrozen - length\n      };\n    } else if (isFirstNormalSet) {\n      text = t('Freeze {{count}} columns', {count: length});\n      return {\n        text,\n        numFrozen : numFrozen + length\n      };\n    } else if (isSpanSet) {\n      const toFreeze = lastColumnIndex + 1 - numFrozen;\n      text = t('Freeze {{count}} more columns', {count: toFreeze});\n      return {\n        text,\n        numFrozen : numFrozen + toFreeze\n      };\n    }  else {\n      return null;\n    }\n  }\n}\n\nfunction freezeMenuItemCmd(options: IMultiColumnContextMenu) {\n  // calculate action available for this options\n  const toggle = freezeAction(options);\n  // if we can't offer freezing - don't create a menu at all\n  // this shouldn't happen - as current design offers some action on every column\n  if (!toggle) { return null; }\n  // create menu item if we have something to offer\n  return menuItemCmd(allCommands.toggleFreeze, toggle.text);\n}\n\n// Returns 'Add to sort' is there are columns in the sort spec but colId is not part of it. Returns\n// undefined if colId is the only column in the spec. Otherwise returns `Sorted (#N)` where #N is\n// the position (1 based) of colId in the spec.\nfunction getAddToSortLabel(sortSpec: Sort.SortSpec, colId: number): string|undefined {\n  const columnsInSpec = sortSpec.map((n) =>Sort.getColRef(n));\n  if (sortSpec.length !== 0 && !isEqual(columnsInSpec, [colId])) {\n    const index = columnsInSpec.indexOf(colId);\n    if (index > -1) {\n      return t(\"Sorted (#{{count}})\", {count: index + 1});\n    } else {\n      return t(\"Add to sort\");\n    }\n  }\n}\n\nconst cssRowMenuItem = styled((...args: DomElementArg[]) => dom('li', {tabindex: '-1'}, ...args), `\n  display: flex;\n  outline: none;\n`);\n\nconst cssRowMenuLabel = styled('div', `\n  margin-right: 8px;\n  flex: 1 0 auto;\n`);\n\nconst cssCustomMenuItem = styled('div', `\n  padding: 8px 8px;\n  display: flex;\n  &:not(:hover) {\n    background-color: ${theme.menuBg};\n    color: ${theme.menuItemFg};\n    --icon-color: ${theme.menuItemFg};\n  }\n  &:last-of-type {\n    padding-right: 24px;\n    flex: 0 0 auto;\n  }\n  &:first-of-type {\n    padding-left: 24px;\n    flex: 1 0 auto;\n  }\n  &-selected, &-selected:not(:hover) {\n    background-color: ${theme.menuItemSelectedBg};\n    color: ${theme.menuItemSelectedFg};\n    --icon-color: ${theme.menuItemSelectedFg};\n  }\n`);\n\nfunction customMenuItem(action: () => void, ...args: DomElementArg[]) {\n  const element: HTMLElement = cssCustomMenuItem(\n    ...args,\n    dom.on('click', () => action()),\n  );\n  return element;\n}\n","import { theme } from \"app/client/ui2018/cssVars\";\nimport { icon } from \"app/client/ui2018/icons\";\nimport { dom, DomArg, IDisposableOwner, styled } from \"grainjs\";\n\n/**\n * Creates a toggle button - little square button with a dropdown icon inside, used\n * by a context menu for a row inside a grid, a card inside a cardlist and column name.\n */\nexport function menuToggle(obs: IDisposableOwner, ...args: DomArg[]) {\n  const contextMenu = cssMenuToggle(\n    icon('Dropdown', dom.cls('menu_toggle_icon')),\n    ...args\n  );\n  return contextMenu;\n}\n\nconst cssMenuToggle = styled('div.menu_toggle', `\n  background: ${theme.menuToggleBg};\n  cursor: pointer;\n  --icon-color: ${theme.menuToggleFg};\n  border: 1px solid ${theme.menuToggleBorder};\n  border-radius: 4px;\n  &:hover  {\n    --icon-color: ${theme.menuToggleHoverFg};\n    border-color: ${theme.menuToggleHoverFg};\n  }\n  &:active  {\n    --icon-color: ${theme.menuToggleActiveFg};\n    border-color: ${theme.menuToggleActiveFg};\n  }\n  & > .menu_toggle_icon {\n    display: block; /* don't create a line */\n  }\n`);\n","import { theme, vars } from 'app/client/ui2018/cssVars';\nimport {textarea} from 'app/client/ui/inputs';\nimport {cssTextInput} from 'app/client/ui2018/editableLabel';\nimport {IInputOptions, input, Observable, styled} from 'grainjs';\n\n\nexport const cssRenamePopup = styled('div', `\n  display: flex;\n  flex-direction: column;\n  min-width: 280px;\n  padding: 16px;\n  background-color: ${theme.popupBg};\n  border-radius: 2px;\n  outline: none;\n`);\n\nexport const cssLabel = styled('label', `\n  color: ${theme.text};\n  font-size: ${vars.xsmallFontSize};\n  font-weight: ${vars.bigControlTextWeight};\n  text-transform: uppercase;\n  margin: 0 0 8px 0;\n  &:not(:first-child) {\n    margin-top: 16px;\n  }\n`);\n\nconst cssInputWithIcon = styled('div', `\n  position: relative;\n  display: flex;\n  flex-direction: column;\n`);\n\nexport const cssInput = styled((\n  obs: Observable<string>,\n  opts: IInputOptions,\n  ...args) => input(obs, opts, cssTextInput.cls(''), ...args), `\n  text-overflow: ellipsis;\n  color: ${theme.inputFg};\n  background-color: transparent;\n  &:disabled {\n    color: ${theme.inputDisabledFg};\n    background-color: ${theme.inputDisabledBg};\n    pointer-events: none;\n  }\n  &::placeholder {\n    color: ${theme.inputPlaceholderFg};\n  }\n  .${cssInputWithIcon.className} > &:disabled {\n    padding-right: 28px;\n  }\n`);\n\nexport const cssTextArea = styled(textarea, `\n  color: ${theme.inputFg};\n  background-color: ${theme.mainPanelBg};\n  border: 1px solid ${theme.inputBorder};\n  width: 100%;\n  padding: 3px 6px;\n  outline: none;\n  max-width: 100%;\n  min-width: calc(280px - 16px*2);\n  max-height: 500px;\n  min-height: calc(3em * 1.5);\n  resize: none;\n  border-radius: 3px;\n  &::placeholder {\n    color: ${theme.inputPlaceholderFg};\n  }\n\n  &[readonly] {\n    background-color: ${theme.inputDisabledBg};\n    color: ${theme.inputDisabledFg};\n  }\n`);\n","import { allCommands } from 'app/client/components/commands';\nimport { makeT } from 'app/client/lib/localization';\nimport { menuDivider, menuItemCmd } from 'app/client/ui2018/menus';\nimport { dom } from 'grainjs';\n\nconst t = makeT('RowContextMenu');\n\nexport interface IRowContextMenu {\n  disableInsert: boolean;\n  disableDelete: boolean;\n  isViewSorted: boolean;\n  numRows: number;\n}\n\nexport function RowContextMenu({ disableInsert, disableDelete, isViewSorted, numRows }: IRowContextMenu) {\n  const result: Element[] = [];\n  if (isViewSorted) {\n    // When the view is sorted, any newly added records get shifts instantly at the top or\n    // bottom. It could be very confusing for users who might expect the record to stay above or\n    // below the active row. Thus in this case we show a single `insert row` command.\n    result.push(\n      menuItemCmd(allCommands.insertRecordAfter, t(\"Insert row\"),\n        dom.cls('disabled', disableInsert)),\n    );\n  } else {\n    result.push(\n      menuItemCmd(allCommands.insertRecordBefore, t(\"Insert row above\"),\n        dom.cls('disabled', disableInsert)),\n      menuItemCmd(allCommands.insertRecordAfter, t(\"Insert row below\"),\n        dom.cls('disabled', disableInsert)),\n    );\n  }\n  result.push(\n    menuItemCmd(allCommands.duplicateRows, t('Duplicate rows', { count: numRows }),\n      dom.cls('disabled', disableInsert || numRows === 0)),\n  );\n  result.push(\n    menuDivider(),\n    // TODO: should show `Delete ${num} rows` when multiple are selected\n    menuItemCmd(allCommands.deleteRecords, t(\"Delete\"),\n      dom.cls('disabled', disableDelete)),\n  );\n  result.push(\n    menuDivider(),\n    menuItemCmd(allCommands.copyLink, t(\"Copy anchor link\")));\n  return result;\n}\n","import {colors, theme, vars} from 'app/client/ui2018/cssVars';\nimport {icon} from 'app/client/ui2018/icons';\nimport {input, styled} from 'grainjs';\nimport {cssMenuItem} from 'popweasel';\n\n// Styled elements used for rendering a user, e.g. in the UserManager, Billing, etc.\n// There is a general structure, but enough small variation that there is no helper at this point.\n//\n//   cssMemberListItem(\n//     cssMemberImage(\n//       createUserImage(getFullUser(member), 'large')\n//     ),\n//     cssMemberText(\n//       cssMemberPrimary(NAME),\n//       cssMemberSecondary(EMAIL),\n//       cssMemberType(DESCRIPTION),\n//     )\n//   )\n\nexport const cssMemberListItem = styled('div', `\n  display: flex;\n  width: 460px;\n  min-height: 64px;\n  margin: 0 auto;\n  padding: 12px 0;\n`);\n\nexport const cssMemberImage = styled('div', `\n  width: 40px;\n  height: 40px;\n  margin: 0 4px;\n  border-radius: 20px;\n  background-color: ${colors.lightGreen};\n  background-size: cover;\n\n  .${cssMemberListItem.className}-removed & {\n    opacity: 0.4;\n  }\n`);\n\nexport const cssMemberText = styled('div', `\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  margin: 2px 12px;\n  flex: 1 1 0;\n  min-width: 0px;\n  font-size: ${vars.mediumFontSize};\n\n  .${cssMemberListItem.className}-removed & {\n    opacity: 0.4;\n  }\n`);\n\nexport const cssMemberPrimary = styled('span', `\n  font-weight: bold;\n  color: ${theme.text};\n  padding: 2px 0;\n\n  .${cssMenuItem.className}-sel & {\n    color: ${theme.menuItemSelectedFg};\n  }\n`);\n\nexport const cssMemberSecondary = styled('span', `\n  color: ${theme.lightText};\n  /* the following just undo annoying bootstrap styles that apply to all labels */\n  margin: 0px;\n  font-weight: normal;\n  padding: 2px 0;\n  white-space: nowrap;\n\n  .${cssMenuItem.className}-sel & {\n    color: ${theme.menuItemSelectedFg};\n  }\n`);\n\nexport const cssMemberType = styled('span', `\n  color: ${theme.lightText};\n  /* the following just undo annoying bootstrap styles that apply to all labels */\n  margin: 0px;\n  font-weight: normal;\n  padding: 2px 0;\n  white-space: nowrap;\n\n  .${cssMenuItem.className}-sel & {\n    color: ${theme.menuItemSelectedFg};\n  }\n`);\n\nexport const cssMemberTypeProblem = styled('span', `\n  color: ${theme.errorText};\n  /* the following just undo annoying bootstrap styles that apply to all labels */\n  margin: 0px;\n  font-weight: normal;\n  padding: 2px 0;\n  white-space: nowrap;\n\n  .${cssMenuItem.className}-sel & {\n    color: ${theme.menuItemSelectedFg};\n  }\n`);\n\nexport const cssMemberBtn = styled('div', `\n  width: 16px;\n  height: 16px;\n  cursor: pointer;\n\n  &-disabled {\n    opacity: 0.3;\n    cursor: default;\n  }\n`);\n\nexport const cssRemoveIcon = styled(icon, `\n  background-color: ${theme.lightText};\n  margin: 12px 0;\n`);\n\nexport const cssEmailInputContainer = styled('div', `\n  position: relative;\n  display: flex;\n  height: 42px;\n  padding: 0 3px;\n  margin: 16px 63px;\n  border: 1px solid ${theme.inputBorder};\n  border-radius: 3px;\n  font-size: ${vars.mediumFontSize};\n  outline: none;\n\n  &-green {\n    border: 1px solid ${theme.inputValid};\n  }\n`);\n\nexport const cssEmailInput = styled(input, `\n  color: ${theme.inputFg};\n  background-color: ${theme.inputBg};\n  flex: 1 1 0;\n  font-size: ${vars.mediumFontSize};\n  font-family: ${vars.fontFamily};\n  outline: none;\n  border: none;\n\n  &::placeholder {\n    color: ${theme.inputPlaceholderFg};\n  }\n`);\n\nexport const cssMailIcon = styled(icon, `\n  margin: 12px 8px 12px 13px;\n  background-color: ${theme.lightText};\n`);\n","import {get as getBrowserGlobals} from 'app/client/lib/browserGlobals';\nimport {waitObs} from 'app/common/gutil';\nimport {Disposable, dom, DomElementArg} from 'grainjs';\nimport ko from 'knockout';\n\nexport interface Player {\n  playVideo(): void;\n  pauseVideo(): void;\n  stopVideo(): void;\n  mute(): void;\n  unMute(): void;\n  setVolume(volume: number): void;\n  getCurrentTime(): number;\n}\n\nexport interface PlayerOptions {\n  height?: string;\n  width?: string;\n  origin?: string;\n  playerVars?: PlayerVars;\n  onPlayerReady?(player: Player): void\n  onPlayerStateChange?(player: Player, event: PlayerStateChangeEvent): void;\n}\n\nexport interface PlayerVars {\n  controls?: 0 | 1;\n  disablekb?: 0 | 1;\n  fs?: 0 | 1;\n  iv_load_policy?: 1 | 3;\n  modestbranding?: 0 | 1;\n}\n\nexport interface PlayerStateChangeEvent {\n  data: PlayerState;\n}\n\nexport enum PlayerState {\n  Unstarted = -1,\n  Ended = 0,\n  Playing = 1,\n  Paused = 2,\n  Buffering = 3,\n  VideoCued = 5,\n}\n\nconst G = getBrowserGlobals('document', 'window');\n\n/**\n * Wrapper component for the YouTube IFrame Player API.\n *\n * Fetches the JavaScript code for the API if needed, and creates an iframe that\n * points to a YouTube video with the specified id.\n *\n * For more documentation, see https://developers.google.com/youtube/iframe_api_reference.\n */\nexport class YouTubePlayer extends Disposable {\n  private _domArgs: DomElementArg[];\n  private _isLoading: ko.Observable<boolean> = ko.observable(true);\n  private _playerId = `youtube-player-${this._videoId}`;\n  private _player: Player;\n\n  constructor(\n    private _videoId: string,\n    private _options: PlayerOptions,\n    ...domArgs: DomElementArg[]\n  ) {\n    super();\n\n    this._domArgs = domArgs;\n\n    if (!G.window.YT) {\n      const tag = document.createElement('script');\n\n      tag.src = 'https://www.youtube.com/iframe_api';\n      const firstScriptTag = document.getElementsByTagName('script')[0];\n      firstScriptTag?.parentNode?.insertBefore(tag, firstScriptTag);\n\n      G.window.onYouTubeIframeAPIReady = () => this._handleYouTubeIframeAPIReady();\n    } else {\n      setTimeout(() => this._handleYouTubeIframeAPIReady(), 0);\n    }\n  }\n\n  public isLoading() {\n    return this._isLoading();\n  }\n\n  public isLoaded() {\n    return waitObs(this._isLoading, (val) => !val);\n  }\n\n  public play() {\n    this._player.playVideo();\n  }\n\n  public setVolume(volume: number) {\n    this._player.setVolume(volume);\n  }\n\n  public getCurrentTime(): number {\n    return this._player.getCurrentTime();\n  }\n\n  public buildDom() {\n    return dom('div', {id: this._playerId}, ...this._domArgs);\n  }\n\n  private _handleYouTubeIframeAPIReady() {\n    const {onPlayerReady, onPlayerStateChange, playerVars, ...otherOptions} = this._options;\n    this._player = new G.window.YT.Player(this._playerId, {\n      videoId: this._videoId,\n      playerVars,\n      events: {\n        onReady: () => {\n          this._isLoading(false);\n          onPlayerReady?.(this._player);\n        },\n        onStateChange: (event: PlayerStateChangeEvent) =>\n          onPlayerStateChange?.(this._player, event),\n      },\n      ...otherOptions,\n    });\n  }\n}\n","/**\n * This module implements context menu to be shown on contextmenu event (most commonly associated\n * with right+click, but could varies slightly depending on platform, ie: mac support ctrl+click as\n * well).\n *\n * To prevent the default context menu to show everywhere else (including on the top of your custom\n * context menu) dont forget to prevent it by including below line at the root of the dom:\n *   `dom.on('contextmenu', ev => ev.preventDefault())`\n */\nimport { Disposable, dom, DomArg, DomContents, Holder } from \"grainjs\";\nimport { cssMenuElem, registerMenuOpen } from 'app/client/ui2018/menus';\nimport { IOpenController, Menu } from 'popweasel';\n\nexport type IContextMenuContentFunc = (ctx: ContextMenuController) => DomContents;\n\nclass ContextMenuController extends Disposable implements IOpenController {\n  private _content: HTMLElement;\n  constructor(private _event: MouseEvent, contentFunc: IContextMenuContentFunc) {\n    super();\n\n    setTimeout(() => this._updatePosition(), 0);\n\n    // Create content and add to the dom but keep hidden until menu gets positioned\n    const menu = Menu.create(null, this, [contentFunc(this)], {\n      menuCssClass: cssMenuElem.className + ' grist-floating-menu'\n    });\n    const content = this._content = menu.content;\n    content.style.visibility = 'hidden';\n    document.body.appendChild(content);\n\n    // Prevents arrow to move the cursor while menu is open.\n    dom.onKeyElem(content, 'keydown', {\n      ArrowLeft: (ev) => ev.stopPropagation(),\n      ArrowRight: (ev) => ev.stopPropagation()\n      // UP and DOWN are already handle by the menu to navigate the menu)\n    });\n\n    // On click anywhere on the page (outside popup content), close it.\n    const onClick = (evt: MouseEvent) => {\n      const target: Node|null = evt.target as Node;\n      if (target && !content.contains(target)) {\n        this.close();\n      }\n    };\n    this.autoDispose(dom.onElem(document, 'contextmenu', onClick, {useCapture: true}));\n    this.autoDispose(dom.onElem(document, 'click', onClick, {useCapture: true}));\n\n    // Cleanup involves removing the element.\n    this.onDispose(() => {\n      dom.domDispose(content);\n      content.remove();\n    });\n\n    registerMenuOpen(this);\n  }\n\n  public close() {\n    this.dispose();\n  }\n  public setOpenClass() {}\n\n  // IOpenController expects a trigger elem but context menu has no trigger. Let's return body for\n  // now. As of time of writing the trigger elem is only used by popweasel when certain options are\n  // enabled, ie: strectToSelector, parentSelectoToMark.\n  // TODO: make a PR on popweasel to support using Menu with no trigger element.\n  public getTriggerElem() { return document.body; }\n  public update() {}\n\n  private _updatePosition() {\n    const content = this._content;\n    const ev = this._event;\n    const rect = content.getBoundingClientRect();\n    // position menu on the right of the cursor if it can fit, on the left otherwise\n    content.style.left = ((ev.pageX + rect.width < window.innerWidth) ? ev.pageX : ev.pageX - rect.width) + 'px';\n    // position menu below the cursor if it can fit, otherwise fit at the bottom of the screen\n    content.style.bottom = Math.max(window.innerHeight - (ev.pageY + rect.height), 0) + 'px';\n    // show content\n    content.style.visibility = '';\n  }\n}\n\n/**\n * Show a context menu on contextmenu.\n */\nexport function contextMenu(contentFunc: IContextMenuContentFunc): DomArg {\n  return (elem) => {\n    const holder = Holder.create(null);\n    dom.autoDisposeElem(elem, holder);\n    dom.onElem(elem, 'contextmenu', (ev) => {\n      ev.preventDefault();\n      ev.stopPropagation();\n      ContextMenuController.create(holder, ev, contentFunc);\n    });\n  };\n}\n","/**\n * This is a temporary <input> element. The intended usage is to create is when needed (e.g. when\n * some \"rename\" option is chosen), and provide methods to save and to close.\n *\n * It calls save() on Enter and on blur, which should return a Promise. On successful save, and on\n * Escape, it calls close(), which should destroy the <input>.\n */\n\nimport {reportError} from 'app/client/models/AppModel';\nimport {theme} from 'app/client/ui2018/cssVars';\nimport {dom, DomArg, styled} from 'grainjs';\n\nexport interface ITransientInputOptions {\n  initialValue: string;\n  save(value: string): Promise<void>|any;\n  close(): void;\n}\n\nexport function transientInput({initialValue, save, close}: ITransientInputOptions,\n                               ...args: Array<DomArg<HTMLInputElement>>) {\n  let lastSave: string = initialValue;\n\n  async function onSave(explicitSave: boolean) {\n    try {\n      if (explicitSave || input.value !== lastSave) {\n        lastSave = input.value;\n        await save(input.value);\n      }\n      close();\n    } catch (err) {\n      reportError(err);\n      delayedFocus();\n    }\n  }\n\n  function delayedFocus() {\n    setTimeout(() => { input.focus(); input.select(); }, 10);\n  }\n\n  const input = cssInput({type: 'text', placeholder: 'Enter name'},\n    dom.prop('value', initialValue),\n    dom.on('blur', () => onSave(false)),\n    dom.onKeyDown({\n      Enter: () => onSave(true),\n      Escape: () => close(),\n    }),\n    ...args,\n  );\n  delayedFocus();\n  return input;\n}\n\nconst cssInput = styled('input', `\n  background-color: transparent;\n  color: ${theme.inputFg};\n\n  &::placeholder {\n    color: ${theme.inputPlaceholderFg};\n  }\n`);\n","/**\n * Internal and DB representation of permission bits. These may be set to on, off, or omitted.\n *\n * In DB, permission sets are represented as strings of the form '[+<bits>][-<bits>]' where <bits>\n * is a string of C,R,U,D,S characters, each appearing at most once; or the special values 'all'\n * or 'none'. Note that empty string is also valid, and corresponds to the PermissionSet {}.\n */\n// tslint:disable:no-namespace\n\nimport fromPairs = require('lodash/fromPairs');\nimport mapValues = require('lodash/mapValues');\n\n\n// A PermissionValue is the result of evaluating rules. It provides a definitive answer.\nexport type PermissionValue = \"allow\" | \"deny\";\n\n// A MixedPermissionValue is the result of evaluating rules without a record. If some rules\n// require a record, and some records may be allowed and some denied, the result is \"mixed\".\nexport type MixedPermissionValue = PermissionValue | \"mixed\";\n\n// Similar to MixedPermissionValue, but if permission for a table depend on columns and NOT on\n// rows, the result is \"mixedColumns\" rather than \"mixed\", which allows some optimizations.\nexport type TablePermissionValue = MixedPermissionValue | \"mixedColumns\";\n\n// PartialPermissionValue is only used transiently while evaluating rules without a record.\nexport type PartialPermissionValue = PermissionValue | \"allowSome\" | \"denySome\" | \"mixed\" | \"\";\n\n/**\n * Internal representation of a set of permission bits.\n */\nexport interface PermissionSet<T = PermissionValue> {\n  read: T;\n  create: T;\n  update: T;\n  delete: T;\n  schemaEdit: T;\n}\n\n// Some shorter type aliases.\nexport type PartialPermissionSet = PermissionSet<PartialPermissionValue>;\nexport type MixedPermissionSet = PermissionSet<MixedPermissionValue>;\nexport type TablePermissionSet = PermissionSet<TablePermissionValue>;\n\nconst PERMISSION_BITS: {[letter: string]: keyof PermissionSet} = {\n  R: 'read',\n  C: 'create',\n  U: 'update',\n  D: 'delete',\n  S: 'schemaEdit',\n};\n\nconst ALL_PERMISSION_BITS = \"CRUDS\";\n\nexport const ALL_PERMISSION_PROPS: Array<keyof PermissionSet> =\n  Array.from(ALL_PERMISSION_BITS, ch => PERMISSION_BITS[ch]);\n\nconst ALIASES: {[key: string]: string} = {\n  all: '+CRUDS',\n  none: '-CRUDS',\n};\nconst REVERSE_ALIASES = fromPairs(Object.entries(ALIASES).map(([alias, value]) => [value, alias]));\n\n// Comes in useful for initializing unset PermissionSets.\nexport function emptyPermissionSet(): PartialPermissionSet {\n  return {read: \"\", create: \"\", update: \"\", delete: \"\", schemaEdit: \"\"};\n}\n\n/**\n * Convert a short string representation to internal.\n */\nexport function parsePermissions(permissionsText: string): PartialPermissionSet {\n  if (ALIASES.hasOwnProperty(permissionsText)) {\n    permissionsText = ALIASES[permissionsText];\n  }\n  const pset: PartialPermissionSet = emptyPermissionSet();\n  let value: PartialPermissionValue = \"\";\n  for (const ch of permissionsText) {\n    if (ch === '+') {\n      value = \"allow\";\n    } else if (ch === '-') {\n      value = \"deny\";\n    } else if (!PERMISSION_BITS.hasOwnProperty(ch) || value === \"\") {\n      throw new Error(`Invalid permissions specification ${JSON.stringify(permissionsText)}`);\n    } else {\n      const prop = PERMISSION_BITS[ch];\n      pset[prop] = value;\n    }\n  }\n  return pset;\n}\n\n/**\n * Convert an internal representation of permission bits to a short string. Note that there should\n * be no values other then \"allow\" and \"deny\", since anything else will NOT be included.\n */\nexport function permissionSetToText(permissionSet: Partial<PartialPermissionSet>): string {\n  let add = \"\";\n  let remove = \"\";\n  for (const ch of ALL_PERMISSION_BITS) {\n    const prop: keyof PermissionSet = PERMISSION_BITS[ch];\n    const value = permissionSet[prop];\n    if (value === \"allow\") {\n      add += ch;\n    } else if (value === \"deny\") {\n      remove += ch;\n    }\n  }\n  const perm = (add ? \"+\" + add : \"\") + (remove ? \"-\" + remove : \"\");\n  return REVERSE_ALIASES[perm] || perm;\n}\n\n\n/**\n * Replace allow/deny with allowSome/denySome to indicate dependence on rows.\n */\nexport function makePartialPermissions(pset: PartialPermissionSet): PartialPermissionSet {\n  return mapValues(pset, val => (val === \"allow\" ? \"allowSome\" : (val === \"deny\" ? \"denySome\" : val)));\n}\n\n/**\n * Combine PartialPermissions. Earlier rules win. Note that allowAll|denyAll|mixed are final\n * results (further permissions can't change them), but allowSome|denySome may be changed by\n * further rules into either allowAll|denyAll or mixed.\n *\n * Note that this logic satisfies associative property: (a + b) + c == a + (b + c).\n */\nfunction combinePartialPermission(a: PartialPermissionValue, b: PartialPermissionValue): PartialPermissionValue {\n  if (!a) { return b; }\n  if (!b) { return a; }\n  // If the first is uncertain, the second may keep it unchanged, or make certain, or finalize as mixed.\n  if (a === 'allowSome') { return (b === 'allowSome' || b === 'allow') ? b : 'mixed'; }\n  if (a === 'denySome') { return (b === 'denySome' || b === 'deny') ? b : 'mixed'; }\n  // If the first is certain, it's not affected by the second.\n  return a;\n}\n\n/**\n * Combine PartialPermissionSets.\n */\nexport function mergePartialPermissions(a: PartialPermissionSet, b: PartialPermissionSet): PartialPermissionSet {\n  return mergePermissions([a, b], ([_a, _b]) => combinePartialPermission(_a, _b));\n}\n\n/**\n * Merge a list of PermissionSets by combining individual bits.\n */\nexport function mergePermissions<T, U>(psets: Array<PermissionSet<T>>, combine: (bits: T[]) => U\n): PermissionSet<U> {\n  const result: Partial<PermissionSet<U>> = {};\n  for (const prop of ALL_PERMISSION_PROPS) {\n    result[prop] = combine(psets.map(p => p[prop]));\n  }\n  return result as PermissionSet<U>;\n}\n\n/**\n * Convert a PartialPermissionSet to MixedPermissionSet by replacing any remaining uncertain bits\n * with 'denyAll'. When rules are properly combined it should never be needed because the\n * hard-coded fallback rules should finalize all bits.\n */\nexport function toMixed(pset: PartialPermissionSet): MixedPermissionSet {\n  return mergePermissions([pset], ([bit]) => (bit === 'allow' || bit === 'mixed' ? bit : 'deny'));\n}\n\n/**\n * Check if PermissionSet may only add permissions, only remove permissions, or may do either.\n * A rule that neither adds nor removes permissions is treated as mixed.\n */\nexport function summarizePermissionSet(pset: PartialPermissionSet): MixedPermissionValue {\n  let sign = '';\n  for (const key of Object.keys(pset) as Array<keyof PartialPermissionSet>) {\n    const pWithSome = pset[key];\n    // \"Some\" postfix is not significant for summarization.\n    const p = pWithSome === 'allowSome' ? 'allow' : (pWithSome === 'denySome' ? 'deny' : pWithSome);\n    if (!p || p === sign) { continue; }\n    if (!sign) {\n      sign = p;\n      continue;\n    }\n    sign = 'mixed';\n  }\n  return (sign === 'allow' || sign === 'deny') ? sign : 'mixed';\n}\n\n/**\n * Summarize whether a set of permissions are all 'allow', all 'deny', or other ('mixed').\n */\nexport function summarizePermissions(perms: MixedPermissionValue[]): MixedPermissionValue {\n  if (perms.length === 0) { return 'mixed'; }\n  const perm = perms[0];\n  return perms.some(p => p !== perm) ? 'mixed' : perm;\n}\n\n\nfunction isEmpty(permissions: PartialPermissionSet): boolean {\n  return Object.values(permissions).every(v => v === \"\");\n}\n\n\n/**\n * Divide up a PartialPermissionSet into two: one containing only the 'schemaEdit' permission bit,\n * and the other containing everything else. Empty parts will be returned as undefined, except\n * when both are empty, in which case nonSchemaEdit will be returned as an empty permission set.\n */\nexport function splitSchemaEditPermissionSet(permissions: PartialPermissionSet):\n    {schemaEdit?: PartialPermissionSet, nonSchemaEdit?: PartialPermissionSet} {\n\n  const schemaEdit = {...emptyPermissionSet(), schemaEdit: permissions.schemaEdit};\n  const nonSchemaEdit: PartialPermissionSet = {...permissions, schemaEdit: \"\"};\n  return {\n    schemaEdit: !isEmpty(schemaEdit) ? schemaEdit : undefined,\n    nonSchemaEdit: !isEmpty(nonSchemaEdit) || isEmpty(schemaEdit) ? nonSchemaEdit : undefined,\n  };\n}\n","import {parsePermissions, permissionSetToText, splitSchemaEditPermissionSet} from 'app/common/ACLPermissions';\nimport {AclRuleProblem} from 'app/common/ActiveDocAPI';\nimport {DocData} from 'app/common/DocData';\nimport {AclMatchFunc, ParsedAclFormula, RulePart, RuleSet, UserAttributeRule} from 'app/common/GranularAccessClause';\nimport {getSetMapValue, isNonNullish} from 'app/common/gutil';\nimport {MetaRowRecord} from 'app/common/TableData';\nimport {decodeObject} from 'app/plugin/objtypes';\nimport sortBy = require('lodash/sortBy');\n\nexport type ILogger = Pick<Console, 'log'|'debug'|'info'|'warn'|'error'>;\n\nconst defaultMatchFunc: AclMatchFunc = () => true;\n\nexport const SPECIAL_RULES_TABLE_ID = '*SPECIAL';\n\n// This is the hard-coded default RuleSet that's added to any user-created default rule.\nconst DEFAULT_RULE_SET: RuleSet = {\n  tableId: '*',\n  colIds: '*',\n  body: [{\n    aclFormula: \"user.Access in [EDITOR, OWNER]\",\n    matchFunc:  (input) => ['editors', 'owners'].includes(String(input.user.Access)),\n    permissions: parsePermissions('all'),\n    permissionsText: 'all',\n  }, {\n    aclFormula: \"user.Access in [VIEWER]\",\n    matchFunc:  (input) => ['viewers'].includes(String(input.user.Access)),\n    permissions: parsePermissions('+R-CUDS'),\n    permissionsText: '+R',\n  }, {\n    aclFormula: \"\",\n    matchFunc: defaultMatchFunc,\n    permissions: parsePermissions('none'),\n    permissionsText: 'none',\n  }],\n};\n\n// Check if the given resource is the special \"SchemaEdit\" resource, which only exists as a\n// frontend representation.\nexport function isSchemaEditResource(resource: {tableId: string, colIds: string}): boolean {\n  return resource.tableId === SPECIAL_RULES_TABLE_ID && resource.colIds === 'SchemaEdit';\n}\n\nconst SPECIAL_RULE_SETS: Record<string, RuleSet> = {\n  SchemaEdit: {\n    tableId: SPECIAL_RULES_TABLE_ID,\n    colIds: ['SchemaEdit'],\n    body: [{\n      aclFormula: \"user.Access in [EDITOR, OWNER]\",\n      matchFunc:  (input) => ['editors', 'owners'].includes(String(input.user.Access)),\n      permissions: parsePermissions('+S'),\n      permissionsText: '+S',\n    }, {\n      aclFormula: \"\",\n      matchFunc: defaultMatchFunc,\n      permissions: parsePermissions('-S'),\n      permissionsText: '-S',\n    }],\n  },\n  AccessRules: {\n    tableId: SPECIAL_RULES_TABLE_ID,\n    colIds: ['AccessRules'],\n    body: [{\n      aclFormula: \"user.Access in [OWNER]\",\n      matchFunc:  (input) => ['owners'].includes(String(input.user.Access)),\n      permissions: parsePermissions('+R'),\n      permissionsText: '+R',\n    }, {\n      aclFormula: \"\",\n      matchFunc: defaultMatchFunc,\n      permissions: parsePermissions('-R'),\n      permissionsText: '-R',\n    }],\n  },\n  FullCopies: {\n    tableId: SPECIAL_RULES_TABLE_ID,\n    colIds: ['FullCopies'],\n    body: [{\n      aclFormula: \"user.Access in [OWNER]\",\n      matchFunc:  (input) => ['owners'].includes(String(input.user.Access)),\n      permissions: parsePermissions('+R'),\n      permissionsText: '+R',\n    }, {\n      aclFormula: \"\",\n      matchFunc: defaultMatchFunc,\n      permissions: parsePermissions('-R'),\n      permissionsText: '-R',\n    }],\n  },\n  SeedRule: {\n    tableId: SPECIAL_RULES_TABLE_ID,\n    colIds: ['SeedRule'],\n    body: [],\n  }\n};\n\n// If the user-created rules become dysfunctional, we can swap in this emergency set.\n// It grants full access to owners, and no access to anyone else.\nconst EMERGENCY_RULE_SET: RuleSet = {\n  tableId: '*',\n  colIds: '*',\n  body: [{\n    aclFormula: \"user.Access in [OWNER]\",\n    matchFunc:  (input) => ['owners'].includes(String(input.user.Access)),\n    permissions: parsePermissions('all'),\n    permissionsText: 'all',\n  }, {\n    aclFormula: \"\",\n    matchFunc: defaultMatchFunc,\n    permissions: parsePermissions('none'),\n    permissionsText: 'none',\n  }],\n};\n\nexport class ACLRuleCollection {\n  // Store error if one occurs while reading rules.  Rules are replaced with emergency rules\n  // in this case.\n  public ruleError: Error|undefined;\n\n  // In the absence of rules, some checks are skipped. For now this is important to maintain all\n  // existing behavior. TODO should make sure checking access against default rules is equivalent\n  // and efficient.\n  private _haveRules = false;\n\n  // Map of tableId to list of column RuleSets (those with colIds other than '*')\n  // Includes also SPECIAL_RULES_TABLE_ID.\n  private _columnRuleSets = new Map<string, RuleSet[]>();\n\n  // Maps 'tableId:colId' to one of the RuleSets in the list _columnRuleSets.get(tableId).\n  private _tableColumnMap = new Map<string, RuleSet>();\n\n  // Rules for SPECIAL_RULES_TABLE_ID \"columns\".\n  private _specialRuleSets = new Map<string, RuleSet>();\n\n  // Map of tableId to the single default RuleSet for the table (colIds of '*')\n  private _tableRuleSets = new Map<string, RuleSet>();\n\n  // The default RuleSet (tableId '*', colIds '*')\n  private _defaultRuleSet: RuleSet = DEFAULT_RULE_SET;\n\n  // List of all tableIds mentioned in rules.\n  private _tableIds: string[] = [];\n\n  // Maps name to the corresponding UserAttributeRule.\n  private _userAttributeRules = new Map<string, UserAttributeRule>();\n\n  // Whether there are ANY user-defined rules.\n  public haveRules(): boolean {\n    return this._haveRules;\n  }\n\n  // Return the RuleSet for \"tableId:colId\", or undefined if there isn't one for this column.\n  public getColumnRuleSet(tableId: string, colId: string): RuleSet|undefined {\n    if (tableId === SPECIAL_RULES_TABLE_ID) { return this._specialRuleSets.get(colId); }\n    return this._tableColumnMap.get(`${tableId}:${colId}`);\n  }\n\n  // Return all RuleSets for \"tableId:<any colId>\", not including \"tableId:*\".\n  public getAllColumnRuleSets(tableId: string): RuleSet[] {\n    return this._columnRuleSets.get(tableId) || [];\n  }\n\n  // Return the RuleSet for \"tableId:*\".\n  public getTableDefaultRuleSet(tableId: string): RuleSet|undefined {\n    return this._tableRuleSets.get(tableId);\n  }\n\n  // Return the RuleSet for \"*:*\".\n  public getDocDefaultRuleSet(): RuleSet {\n    return this._defaultRuleSet;\n  }\n\n  // Return the list of all tableId mentions in ACL rules.\n  public getAllTableIds(): string[] {\n    return this._tableIds;\n  }\n\n  // Returns a Map of user attribute name to the corresponding UserAttributeRule.\n  public getUserAttributeRules(): Map<string, UserAttributeRule> {\n    return this._userAttributeRules;\n  }\n\n  /**\n   * Update granular access from DocData.\n   */\n  public async update(docData: DocData, options: ReadAclOptions) {\n    const {ruleSets, userAttributes} = this._safeReadAclRules(docData, options);\n\n    // Build a map of user characteristics rules.\n    const userAttributeMap = new Map<string, UserAttributeRule>();\n    for (const userAttr of userAttributes) {\n      userAttributeMap.set(userAttr.name, userAttr);\n    }\n\n    // Build maps of ACL rules.\n    const colRuleSets = new Map<string, RuleSet[]>();\n    const tableColMap = new Map<string, RuleSet>();\n    const tableRuleSets = new Map<string, RuleSet>();\n    const tableIds = new Set<string>();\n    let defaultRuleSet: RuleSet = DEFAULT_RULE_SET;\n\n    // Collect special rules, combining them with corresponding defaults.\n    const specialRuleSets = new Map<string, RuleSet>(Object.entries(SPECIAL_RULE_SETS));\n    for (const ruleSet of ruleSets) {\n      if (ruleSet.tableId === SPECIAL_RULES_TABLE_ID) {\n        const specialType = String(ruleSet.colIds);\n        const specialDefault = specialRuleSets.get(specialType);\n        if (!specialDefault) {\n          // Log that we are seeing an invalid rule, but don't fail.\n          // (Historically, older versions of the Grist app will attempt to\n          // open newer documents).\n          options.log.error(`Invalid rule for ${ruleSet.tableId}:${ruleSet.colIds}`);\n        } else {\n          specialRuleSets.set(specialType, {...ruleSet, body: [...ruleSet.body, ...specialDefault.body]});\n        }\n      } else if (options.pullOutSchemaEdit && ruleSet.tableId === '*' && ruleSet.colIds === '*') {\n        // If pullOutSchemaEdit is requested, we move out rules with SchemaEdit permissions from\n        // the default resource into the ficticious \"*SPECIAL:SchemaEdit\" resource. This is used\n        // in the frontend only, to present those rules in a separate section.\n        const schemaParts = ruleSet.body.map(part => splitSchemaEditRulePart(part).schemaEdit).filter(isNonNullish);\n\n        if (schemaParts.length > 0) {\n          const specialType = 'SchemaEdit';\n          const specialDefault = specialRuleSets.get(specialType)!;\n          specialRuleSets.set(specialType, {\n            tableId: SPECIAL_RULES_TABLE_ID,\n            colIds: ['SchemaEdit'],\n            body: [...schemaParts, ...specialDefault.body]\n          });\n        }\n      }\n    }\n\n    // Insert the special rule sets into colRuleSets.\n    for (const ruleSet of specialRuleSets.values()) {\n      getSetMapValue(colRuleSets, SPECIAL_RULES_TABLE_ID, () => []).push(ruleSet);\n    }\n\n    this._haveRules = (ruleSets.length > 0);\n    for (const ruleSet of ruleSets) {\n      if (ruleSet.tableId === '*') {\n        if (ruleSet.colIds === '*') {\n          // If pullOutSchemaEdit is requested, skip the SchemaEdit rules for the default resource;\n          // those got pulled out earlier into the fictitious \"*SPECIAL:SchemaEdit\" resource.\n          const body = options.pullOutSchemaEdit ?\n            ruleSet.body.map(part => splitSchemaEditRulePart(part).nonSchemaEdit).filter(isNonNullish) :\n            ruleSet.body;\n\n          defaultRuleSet = {\n            ...ruleSet,\n            body: [...body, ...DEFAULT_RULE_SET.body],\n          };\n        } else {\n          // tableId of '*' cannot list particular columns.\n          throw new Error(`Invalid rule for tableId ${ruleSet.tableId}, colIds ${ruleSet.colIds}`);\n        }\n      } else if (ruleSet.tableId === SPECIAL_RULES_TABLE_ID) {\n        // Skip, since we handled these separately earlier.\n      } else if (ruleSet.colIds === '*') {\n        tableIds.add(ruleSet.tableId);\n        if (tableRuleSets.has(ruleSet.tableId)) {\n          throw new Error(`Invalid duplicate default rule for ${ruleSet.tableId}`);\n        }\n        tableRuleSets.set(ruleSet.tableId, ruleSet);\n      } else {\n        tableIds.add(ruleSet.tableId);\n        getSetMapValue(colRuleSets, ruleSet.tableId, () => []).push(ruleSet);\n        for (const colId of ruleSet.colIds) {\n          tableColMap.set(`${ruleSet.tableId}:${colId}`, ruleSet);\n        }\n      }\n    }\n\n    // Update GranularAccess state.\n    this._columnRuleSets = colRuleSets;\n    this._tableColumnMap = tableColMap;\n    this._tableRuleSets = tableRuleSets;\n    this._defaultRuleSet = defaultRuleSet;\n    this._tableIds = [...tableIds];\n    this._userAttributeRules = userAttributeMap;\n    this._specialRuleSets = specialRuleSets;\n  }\n\n  /**\n   * Check that all references to table and column IDs in ACL rules are valid.\n   */\n  public checkDocEntities(docData: DocData) {\n    const problems = this.findRuleProblems(docData);\n    if (problems.length === 0) { return; }\n    throw new Error(problems[0].comment);\n  }\n\n  /**\n   * Enumerate rule problems caused by table and column IDs that are not valid.\n   * Problems include:\n   *   - Rules for a table that does not exist\n   *   - Rules for columns that include a column that does not exist\n   *   - User attributes links to a column that does not exist\n   */\n  public findRuleProblems(docData: DocData): AclRuleProblem[] {\n    const problems: AclRuleProblem[] = [];\n    const tablesTable = docData.getMetaTable('_grist_Tables');\n    const columnsTable = docData.getMetaTable('_grist_Tables_column');\n\n    // Collect valid tableIds and check rules against those.\n    const validTableIds = new Set(tablesTable.getColValues('tableId'));\n    const invalidTables = this.getAllTableIds().filter(t => !validTableIds.has(t));\n    if (invalidTables.length > 0) {\n      problems.push({\n        tables: {\n          tableIds: invalidTables,\n        },\n        comment: `Invalid tables in rules: ${invalidTables.join(', ')}`,\n      });\n    }\n\n    // Collect valid columns, grouped by tableRef (rowId of table record).\n    const validColumns = new Map<number, Set<string>>();   // Map from tableRef to set of colIds.\n    const colTableRefs = columnsTable.getColValues('parentId');\n    for (const [i, colId] of columnsTable.getColValues('colId').entries()) {\n      getSetMapValue(validColumns, colTableRefs[i], () => new Set()).add(colId);\n    }\n\n    // For each valid table, check that any explicitly mentioned columns are valid.\n    for (const tableId of this.getAllTableIds()) {\n      if (!validTableIds.has(tableId)) { continue; }\n      const tableRef = tablesTable.findRow('tableId', tableId);\n      const validTableCols = validColumns.get(tableRef);\n      for (const ruleSet of this.getAllColumnRuleSets(tableId)) {\n        if (Array.isArray(ruleSet.colIds)) {\n          const invalidColIds = ruleSet.colIds.filter(c => !validTableCols?.has(c));\n          if (invalidColIds.length > 0) {\n            problems.push({\n              columns: {\n                tableId,\n                colIds: invalidColIds,\n              },\n              comment: `Invalid columns in rules for table ${tableId}: ${invalidColIds.join(', ')}`,\n            });\n          }\n        }\n      }\n    }\n\n    // Check for valid tableId/lookupColId combinations in UserAttribute rules.\n    const invalidUAColumns: string[] = [];\n    const names: string[] = [];\n    for (const rule of this.getUserAttributeRules().values()) {\n      const tableRef = tablesTable.findRow('tableId', rule.tableId);\n      const colRef = columnsTable.findMatchingRowId({parentId: tableRef, colId: rule.lookupColId});\n      if (!colRef) {\n        invalidUAColumns.push(`${rule.tableId}.${rule.lookupColId}`);\n        names.push(rule.name);\n      }\n    }\n    if (invalidUAColumns.length > 0) {\n      problems.push({\n        userAttributes: {\n          invalidUAColumns,\n          names,\n        },\n        comment: `Invalid columns in User Attribute rules: ${invalidUAColumns.join(', ')}`,\n      });\n    }\n    return problems;\n  }\n\n  private _safeReadAclRules(docData: DocData, options: ReadAclOptions): ReadAclResults {\n    try {\n      this.ruleError = undefined;\n      return readAclRules(docData, options);\n    } catch (e) {\n      this.ruleError = e;  // Report the error indirectly.\n      return {ruleSets: [EMERGENCY_RULE_SET], userAttributes: []};\n    }\n  }\n}\n\nexport interface ReadAclOptions {\n  log: ILogger;     // For logging warnings during rule processing.\n  compile?: (parsed: ParsedAclFormula) => AclMatchFunc;\n  // If true, call addHelperCols to add helper columns of restricted columns to rule sets.\n  // Used in the server for extra filtering, but not in the client, because:\n  // 1. They would show in the UI\n  // 2. They would be saved back after editing, causing them to accumulate\n  includeHelperCols?: boolean;\n\n  // If true, rules with 'schemaEdit' permission are moved out of the '*:*' resource into a\n  // fictitious '*SPECIAL:SchemaEdit' resource. This is used only on the client, to present\n  // schemaEdit as a separate checkbox. Such rules are saved back to the '*:*' resource.\n  pullOutSchemaEdit?: boolean;\n}\n\nexport interface ReadAclResults {\n  ruleSets: RuleSet[];\n  userAttributes: UserAttributeRule[];\n}\n\n/**\n * For each column in colIds, return the colIds of any hidden helper columns it has,\n * i.e. display columns of references, and conditional formatting rule columns.\n */\nfunction getHelperCols(docData: DocData, tableId: string, colIds: string[], log: ILogger): string[] {\n  const tablesTable = docData.getMetaTable('_grist_Tables');\n  const columnsTable = docData.getMetaTable('_grist_Tables_column');\n  const fieldsTable = docData.getMetaTable('_grist_Views_section_field');\n\n  const tableRef = tablesTable.findRow('tableId', tableId);\n  if (!tableRef) {\n    return [];\n  }\n\n  const result: string[] = [];\n  for (const colId of colIds) {\n    const [column] = columnsTable.filterRecords({parentId: tableRef, colId});\n    if (!column) {\n      continue;\n    }\n\n    function addColsFromRefs(colRefs: unknown) {\n      if (!Array.isArray(colRefs)) {\n        return;\n      }\n      for (const colRef of colRefs) {\n        if (typeof colRef !== 'number') {\n          continue;\n        }\n        const extraCol = columnsTable.getRecord(colRef);\n        if (!extraCol) {\n          continue;\n        }\n        if (extraCol.colId.startsWith(\"gristHelper_\") && extraCol.parentId === tableRef) {\n          result.push(extraCol.colId);\n        } else {\n          log.error(`Invalid helper column ${extraCol.colId} of ${tableId}:${colId}`);\n        }\n      }\n    }\n\n    function addColsFromMetaRecord(rec: MetaRowRecord<'_grist_Tables_column' | '_grist_Views_section_field'>) {\n      addColsFromRefs([rec.displayCol]);\n      addColsFromRefs(decodeObject(rec.rules));\n    }\n\n    addColsFromMetaRecord(column);\n    for (const field of fieldsTable.filterRecords({colRef: column.id})) {\n      addColsFromMetaRecord(field);\n    }\n  }\n  return result;\n}\n\n\n/**\n * Parse all ACL rules in the document from DocData into a list of RuleSets and of\n * UserAttributeRules. This is used by both client-side code and server-side.\n */\nfunction readAclRules(docData: DocData, {log, compile, includeHelperCols}: ReadAclOptions): ReadAclResults {\n  const resourcesTable = docData.getMetaTable('_grist_ACLResources');\n  const rulesTable = docData.getMetaTable('_grist_ACLRules');\n\n  const ruleSets: RuleSet[] = [];\n  const userAttributes: UserAttributeRule[] = [];\n\n  // Group rules by resource first, ordering by rulePos. Each group will become a RuleSet.\n  const rulesByResource = new Map<number, Array<MetaRowRecord<'_grist_ACLRules'>>>();\n  for (const ruleRecord of sortBy(rulesTable.getRecords(), 'rulePos')) {\n    getSetMapValue(rulesByResource, ruleRecord.resource, () => []).push(ruleRecord);\n  }\n\n  for (const [resourceId, rules] of rulesByResource.entries()) {\n    const resourceRec = resourcesTable.getRecord(resourceId);\n    if (!resourceRec) {\n      throw new Error(`ACLRule ${rules[0].id} refers to an invalid ACLResource ${resourceId}`);\n      continue;\n    }\n    if (!resourceRec.tableId || !resourceRec.colIds) {\n      // This should only be the case for the old-style default rule/resource, which we\n      // intentionally ignore and skip.\n      continue;\n    }\n    const tableId = resourceRec.tableId;\n    const colIds = resourceRec.colIds === '*' ? '*' : resourceRec.colIds.split(',');\n\n    if (includeHelperCols && Array.isArray(colIds)) {\n      colIds.push(...getHelperCols(docData, tableId, colIds, log));\n    }\n\n    const body: RulePart[] = [];\n    for (const rule of rules) {\n      if (rule.userAttributes) {\n        if (tableId !== '*' || colIds !== '*') {\n          throw new Error(`ACLRule ${rule.id} invalid; user attributes must be on the default resource`);\n        }\n        const parsed = JSON.parse(String(rule.userAttributes));\n        // TODO: could perhaps use ts-interface-checker here.\n        if (!(parsed && typeof parsed === 'object' &&\n          [parsed.name, parsed.tableId, parsed.lookupColId, parsed.charId]\n          .every(p => p && typeof p === 'string'))) {\n          throw new Error(`User attribute rule ${rule.id} is invalid`);\n        }\n        parsed.origRecord = rule;\n        userAttributes.push(parsed as UserAttributeRule);\n      } else if (body.length > 0 && !body[body.length - 1].aclFormula) {\n        throw new Error(`ACLRule ${rule.id} invalid because listed after default rule`);\n      } else if (rule.aclFormula && !rule.aclFormulaParsed) {\n        throw new Error(`ACLRule ${rule.id} invalid because missing its parsed formula`);\n      } else {\n        const aclFormulaParsed = rule.aclFormula && JSON.parse(String(rule.aclFormulaParsed));\n        body.push({\n          origRecord: rule,\n          aclFormula: String(rule.aclFormula),\n          matchFunc: rule.aclFormula ? compile?.(aclFormulaParsed) : defaultMatchFunc,\n          memo: rule.memo,\n          permissions: parsePermissions(String(rule.permissionsText)),\n          permissionsText: String(rule.permissionsText),\n        });\n      }\n    }\n    const ruleSet: RuleSet = {tableId, colIds, body};\n    ruleSets.push(ruleSet);\n  }\n  return {ruleSets, userAttributes};\n}\n\n\n/**\n * In the UI, we present SchemaEdit rules in a separate section, even though in reality they live\n * as schemaEdit permission bits among the rules for the default resource. This function splits a\n * RulePart into two: one containing the schemaEdit permission bit, and the other containing the\n * other bits. If either part is empty, it will be returned as undefined, but if both are empty,\n * nonSchemaEdit will be included as a rule with empty permission bits.\n *\n * It's possible for both parts to be non-empty (for rules created before the updated UI), in\n * which case the schemaEdit one will have a fake origRecord, to cause it to be saved as a new\n * record when saving.\n */\nfunction splitSchemaEditRulePart(rulePart: RulePart): {schemaEdit?: RulePart, nonSchemaEdit?: RulePart} {\n  const p = splitSchemaEditPermissionSet(rulePart.permissions);\n  let schemaEdit: RulePart|undefined;\n  let nonSchemaEdit: RulePart|undefined;\n  if (p.schemaEdit) {\n    schemaEdit = {...rulePart,\n      permissions: p.schemaEdit,\n      permissionsText: permissionSetToText(p.schemaEdit),\n    };\n  }\n  if (p.nonSchemaEdit) {\n    nonSchemaEdit = {...rulePart,\n      permissions: p.nonSchemaEdit,\n      permissionsText: permissionSetToText(p.nonSchemaEdit),\n    };\n  }\n  if (schemaEdit && nonSchemaEdit) {\n    schemaEdit.origRecord = {id: -1} as MetaRowRecord<'_grist_ACLRules'>;\n  }\n  return {schemaEdit, nonSchemaEdit};\n}\n","/**\n * Basic definitions of types needed for ActionBundles.\n * See also EncActionBundle for how these are packaged for encryption.\n */\n\nimport {ApplyUAOptions} from 'app/common/ActiveDocAPI';\nimport {DocAction, UserAction} from 'app/common/DocActions';\nimport {RowCounts} from 'app/common/DocUsage';\n\n// Metadata about the action.\nexport interface ActionInfo {\n  time: number;       // Milliseconds since epoch.\n  user: string;\n  inst: string;\n  desc?: string;\n  otherId: number;\n  linkId: number;\n}\n\n// Envelope contains information about recipients. In EncActionBundle, it's augmented with\n// information about the symmetric key that encrypts this envelope's contents.\nexport interface Envelope {\n  recipients: string[];       // sorted array of recipient instanceIds\n}\n\n// EnvContent packages arbitrary content with the index of the envelope to which it belongs.\nexport type EnvContent<Content> = [number, Content];\n\n// ActionBundle contains actions arranged into envelopes, i.e. split up by sets of recipients.\n// Note that different Envelopes contain different sets of recipients (which may overlap however).\n// ActionBundle is what gets encrypted/decrypted and then sent between hub and instance.\nexport interface ActionBundle {\n  actionNum: number;\n  actionHash: string|null;        // a checksum of bundle, (not including actionHash and other parts).\n  parentActionHash: string|null;  // a checksum of the parent action bundle, if there is one.\n  envelopes: Envelope[];\n  info: EnvContent<ActionInfo>;           // Should be in the envelope addressed to all peers.\n  stored: Array<EnvContent<DocAction>>;\n  calc: Array<EnvContent<DocAction>>;\n}\n\nexport function getEnvContent<Content>(items: Array<EnvContent<Content>>): Content[] {\n  return items.map((item) => item[1]);\n}\n\n// ======================================================================\n// Types for ActionBundles used locally inside an instance.\n\n// Local action received from the browser, that is not yet applied. It is usually one UserAction,\n// but when multiple actions are sent by the browser in one call, they will form one bundle.\nexport interface UserActionBundle {\n  info: ActionInfo;\n  userActions: UserAction[];\n  options?: ApplyUAOptions;\n}\n\n// ActionBundle as received from the sandbox. It does not have some action metadata, but does have\n// undo information and a retValue for each input UserAction. Note that it is satisfied by the\n// ActionBundle structure defined in sandbox/grist/action_obj.py.\nexport interface SandboxActionBundle {\n  envelopes: Envelope[];\n  stored: Array<EnvContent<DocAction>>;\n  direct: Array<EnvContent<boolean>>;\n  calc: Array<EnvContent<DocAction>>;\n  undo: Array<EnvContent<DocAction>>;   // Inverse actions for all 'stored' actions.\n  retValues: any[];                     // Contains retValue for each of userActions.\n  rowCount: RowCounts;\n  // Mapping of keys (hashes of request args) to all unique requests made in a round of calculation\n  requests?: Record<string, SandboxRequest>;\n}\n\n// Represents a unique call to the Python REQUEST function\nexport interface SandboxRequest {\n  url: string;\n  method: string;\n  body?: string;\n  params: Record<string, string> | null;\n  headers: Record<string, string> | null;\n  deps: unknown;  // pass back to the sandbox unchanged in the response\n}\n\n// Local action that's been applied. It now has an actionNum, and includes doc actions packaged\n// into envelopes, as well as undo, and userActions, which allow rebasing.\nexport interface LocalActionBundle extends ActionBundle {\n  userActions: UserAction[];\n\n  // Inverse actions for all 'stored' actions. These aren't shared and not split by envelope.\n  // Applying 'undo' is governed by EDIT rather than READ permissions, so we always apply all undo\n  // actions. (It is the result of applying 'undo' that may be addressed to different recipients).\n  undo: DocAction[];\n}\n","import mapValues = require('lodash/mapValues');\nimport {BulkColValues, ColInfo, ColInfoWithId, ColValues, DocAction} from \"./DocActions\";\n\n// TODO this replaces modelUtil's ActionDispatcher and bulkActionExpand. Those should be removed.\n\n/**\n * Helper class which provides a `dispatchAction` method that dispatches DocActions received from\n * the server to methods `this.on{ActionType}`, e.g. `this.onUpdateRecord`.\n *\n * Implementation methods `on*` are called with the action as the first argument, and with\n * the action arguments as additional method arguments, for convenience.\n *\n * Methods for bulk actions may be implemented directly, or will iterate through each record in\n * the action, and call the single-record methods for each one.\n */\nexport abstract class ActionDispatcher {\n  public dispatchAction(action: DocAction): void {\n    // In node 6 testing, this switch is 5+ times faster than looking up \"on\"+action[0].\n    const a: any[] = action;\n    switch (action[0]) {\n      case \"AddRecord\":        return this.onAddRecord       (action, a[1], a[2], a[3]);\n      case \"UpdateRecord\":     return this.onUpdateRecord    (action, a[1], a[2], a[3]);\n      case \"RemoveRecord\":     return this.onRemoveRecord    (action, a[1], a[2]);\n      case \"BulkAddRecord\":    return this.onBulkAddRecord   (action, a[1], a[2], a[3]);\n      case \"BulkUpdateRecord\": return this.onBulkUpdateRecord(action, a[1], a[2], a[3]);\n      case \"BulkRemoveRecord\": return this.onBulkRemoveRecord(action, a[1], a[2]);\n      case \"ReplaceTableData\": return this.onReplaceTableData(action, a[1], a[2], a[3]);\n      case \"AddColumn\":        return this.onAddColumn       (action, a[1], a[2], a[3]);\n      case \"RemoveColumn\":     return this.onRemoveColumn    (action, a[1], a[2]);\n      case \"RenameColumn\":     return this.onRenameColumn    (action, a[1], a[2], a[3]);\n      case \"ModifyColumn\":     return this.onModifyColumn    (action, a[1], a[2], a[3]);\n      case \"AddTable\":         return this.onAddTable        (action, a[1], a[2]);\n      case \"RemoveTable\":      return this.onRemoveTable     (action, a[1]);\n      case \"RenameTable\":      return this.onRenameTable     (action, a[1], a[2]);\n      default: throw new Error(`Received unknown action ${action[0]}`);\n    }\n  }\n\n  protected abstract onAddRecord(action: DocAction, tableId: string, rowId: number, colValues: ColValues): void;\n  protected abstract onUpdateRecord(action: DocAction, tableId: string, rowId: number, colValues: ColValues): void;\n  protected abstract onRemoveRecord(action: DocAction, tableId: string, rowId: number): void;\n\n  // If not overridden, these will make multiple calls to single-record action methods.\n  protected onBulkAddRecord(action: DocAction, tableId: string, rowIds: number[], colValues: BulkColValues): void {\n    for (let i = 0; i < rowIds.length; i++) {\n      this.onAddRecord(action, tableId, rowIds[i], mapValues(colValues, (values) => values[i]));\n    }\n  }\n  protected onBulkUpdateRecord(action: DocAction, tableId: string, rowIds: number[], colValues: BulkColValues): void {\n    for (let i = 0; i < rowIds.length; i++) {\n      this.onUpdateRecord(action, tableId, rowIds[i], mapValues(colValues, (values) => values[i]));\n    }\n  }\n  protected onBulkRemoveRecord(action: DocAction, tableId: string, rowIds: number[]) {\n    for (const r of rowIds) {\n      this.onRemoveRecord(action, tableId, r);\n    }\n  }\n\n  protected abstract onReplaceTableData(\n    action: DocAction, tableId: string, rowIds: number[], colValues: BulkColValues): void;\n\n  protected abstract onAddColumn(action: DocAction, tableId: string, colId: string, colInfo: ColInfo): void;\n  protected abstract onRemoveColumn(action: DocAction, tableId: string, colId: string): void;\n  protected abstract onRenameColumn(action: DocAction, tableId: string, oldColId: string, newColId: string): void;\n  protected abstract onModifyColumn(action: DocAction, tableId: string, colId: string, colInfo: ColInfo): void;\n\n  protected abstract onAddTable(action: DocAction, tableId: string, columns: ColInfoWithId[]): void;\n  protected abstract onRemoveTable(action: DocAction, tableId: string): void;\n  protected abstract onRenameTable(action: DocAction, oldTableId: string, newTableId: string): void;\n}\n","import {getEnvContent, LocalActionBundle} from 'app/common/ActionBundle';\nimport {ActionSummary, ColumnDelta, createEmptyActionSummary,\n        createEmptyTableDelta, defunctTableName, LabelDelta, TableDelta} from 'app/common/ActionSummary';\nimport {DocAction} from 'app/common/DocActions';\nimport * as Action from 'app/common/DocActions';\nimport {arrayExtend} from 'app/common/gutil';\nimport {CellDelta} from 'app/common/TabularDiff';\nimport fromPairs = require('lodash/fromPairs');\nimport keyBy = require('lodash/keyBy');\nimport sortBy = require('lodash/sortBy');\nimport toPairs = require('lodash/toPairs');\nimport values = require('lodash/values');\n\n/**\n * The default maximum number of rows in a single bulk change that will be recorded\n * individually.  Bulk changes that touch more than this number of rows\n * will be summarized only by the number of rows touched.\n */\nconst MAXIMUM_INLINE_ROWS = 10;\n\n/**\n * Options when producing an action summary.\n */\nexport interface ActionSummaryOptions {\n  maximumInlineRows?: number;       // Overrides the maximum number of rows in a\n                                    // single bulk change that will be recorded individually.\n  alwaysPreserveColIds?: string[];  // If set, all cells in these columns are preserved\n                                    // regardless of maximumInlineRows setting.\n}\n\nclass ActionSummarizer {\n\n  constructor(private _options?: ActionSummaryOptions) {}\n\n  /** add information about an action based on the forward direction */\n  public addForwardAction(summary: ActionSummary, act: DocAction) {\n    const tableId = act[1];\n    if (Action.isAddTable(act)) {\n      summary.tableRenames.push([null, tableId]);\n      for (const info of act[2]) {\n        this._forTable(summary, tableId).columnRenames.push([null, info.id]);\n      }\n    } else if (Action.isRenameTable(act)) {\n      this._addRename(summary.tableRenames, [tableId, act[2]]);\n    } else if (Action.isRenameColumn(act)) {\n      this._addRename(this._forTable(summary, tableId).columnRenames, [act[2], act[3]]);\n    } else if (Action.isAddColumn(act)) {\n      this._forTable(summary, tableId).columnRenames.push([null, act[2]]);\n    } else if (Action.isRemoveColumn(act)) {\n      this._forTable(summary, tableId).columnRenames.push([act[2], null]);\n    } else if (Action.isAddRecord(act)) {\n      const td = this._forTable(summary, tableId);\n      td.addRows.push(act[2]);\n      this._addRow(td, act[2], act[3], 1);\n    } else if (Action.isUpdateRecord(act)) {\n      const td = this._forTable(summary, tableId);\n      td.updateRows.push(act[2]);\n      this._addRow(td, act[2], act[3], 1);\n    } else if (Action.isBulkAddRecord(act)) {\n      const td = this._forTable(summary, tableId);\n      arrayExtend(td.addRows, act[2]);\n      this._addRows(tableId, td, act[2], act[3], 1);\n    } else if (Action.isBulkUpdateRecord(act)) {\n      const td = this._forTable(summary, tableId);\n      arrayExtend(td.updateRows, act[2]);\n      this._addRows(tableId, td, act[2], act[3], 1);\n    } else if (Action.isReplaceTableData(act)) {\n      const td = this._forTable(summary, tableId);\n      arrayExtend(td.addRows, act[2]);\n      this._addRows(tableId, td, act[2], act[3], 1);\n    }\n  }\n\n  /** add information about an action based on undo information */\n  public addReverseAction(summary: ActionSummary, act: DocAction) {\n    const tableId = act[1];\n    if (Action.isAddTable(act)) { // undoing, so this is a table removal\n      summary.tableRenames.push([tableId, null]);\n      for (const info of act[2]) {\n        this._forTable(summary, tableId).columnRenames.push([info.id, null]);\n      }\n    } else if (Action.isAddRecord(act)) { // undoing, so this is a record removal\n      const td = this._forTable(summary, tableId);\n      td.removeRows.push(act[2]);\n      this._addRow(td, act[2], act[3], 0);\n    } else if (Action.isUpdateRecord(act)) { // undoing, so this is reversal of a record update\n      const td = this._forTable(summary, tableId);\n      this._addRow(td, act[2], act[3], 0);\n    } else if (Action.isBulkAddRecord(act)) { // undoing, this may be reversing a table delete\n      const td = this._forTable(summary, tableId);\n      arrayExtend(td.removeRows, act[2]);\n      this._addRows(tableId, td, act[2], act[3], 0);\n    } else if (Action.isBulkUpdateRecord(act)) { // undoing, so this is reversal of a bulk record update\n      const td = this._forTable(summary, tableId);\n      arrayExtend(td.updateRows, act[2]);\n      this._addRows(tableId, td, act[2], act[3], 0);\n    } else if (Action.isRenameTable(act)) { // undoing - sometimes renames only in undo info\n      this._addRename(summary.tableRenames, [act[2], tableId]);\n    } else if (Action.isRenameColumn(act)) { // undoing - sometimes renames only in undo info\n      this._addRename(this._forTable(summary, tableId).columnRenames, [act[3], act[2]]);\n    } else if (Action.isReplaceTableData(act)) { // undoing\n      const td = this._forTable(summary, tableId);\n      arrayExtend(td.removeRows, act[2]);\n      this._addRows(tableId, td, act[2], act[3], 0);\n    }\n  }\n\n  /** helper function to access summary changes for a specific table by name */\n  private _forTable(summary: ActionSummary, tableId: string): TableDelta {\n    return summary.tableDeltas[tableId] || (summary.tableDeltas[tableId] = createEmptyTableDelta());\n  }\n\n  /** helper function to access summary changes for a specific cell by rowId and colId */\n  private _forCell(td: TableDelta, rowId: number, colId: string): CellDelta {\n    const cd = td.columnDeltas[colId] || (td.columnDeltas[colId] = {});\n    return cd[rowId] || (cd[rowId] = [null, null]);\n  }\n\n  /**\n   * helper function to store detailed cell changes for a single row.\n   * Direction parameter is 0 if values are prior values of cells, 1 if values are new values.\n   */\n  private _addRow(td: TableDelta, rowId: number, colValues: Action.ColValues,\n                direction: 0|1) {\n    for (const [colId, colChanges] of toPairs(colValues)) {\n      const cell = this._forCell(td, rowId, colId);\n      cell[direction] = [colChanges];\n    }\n  }\n\n  /** helper function to store detailed cell changes for a set of rows */\n  private _addRows(tableId: string, td: TableDelta, rowIds: number[],\n                 colValues: Action.BulkColValues, direction: 0|1) {\n    const maximumInlineRows = this._options?.maximumInlineRows || MAXIMUM_INLINE_ROWS;\n    const limitRows: boolean = rowIds.length > maximumInlineRows && !tableId.startsWith(\"_grist_\");\n    let selectedRows: Array<[number, number]> = [];\n    if (limitRows) {\n      // if many rows, just take some from start and one from end as examples\n      selectedRows = [...rowIds.slice(0, maximumInlineRows - 1).entries()];\n      selectedRows.push([rowIds.length - 1, rowIds[rowIds.length - 1]]);\n    }\n\n    const alwaysPreserveColIds = new Set(this._options?.alwaysPreserveColIds || []);\n    for (const [colId, colChanges] of toPairs(colValues)) {\n      const addCellToSummary = (rowId: number, idx: number) => {\n        const cell = this._forCell(td, rowId, colId);\n        cell[direction] = [colChanges[idx]];\n      };\n      if (!limitRows || alwaysPreserveColIds.has(colId)) {\n        rowIds.forEach(addCellToSummary);\n      } else {\n        selectedRows.forEach(([idx, rowId]) => addCellToSummary(rowId, idx));\n      }\n    }\n  }\n\n  /** add a rename to a list, avoiding duplicates */\n  private _addRename(renames: LabelDelta[], rename: LabelDelta) {\n    if (renames.find(r => r[0] === rename[0] && r[1] === rename[1])) { return; }\n    renames.push(rename);\n  }\n}\n\n/**\n * Summarize the tabular changes that a LocalActionBundle results in, in a form\n * that will be suitable for composition.\n */\nexport function summarizeAction(body: LocalActionBundle, options?: ActionSummaryOptions): ActionSummary {\n  return summarizeStoredAndUndo(getEnvContent(body.stored), body.undo, options);\n}\n\nexport function summarizeStoredAndUndo(stored: DocAction[], undo: DocAction[],\n                                       options?: ActionSummaryOptions): ActionSummary {\n  const summarizer = new ActionSummarizer(options);\n  const summary = createEmptyActionSummary();\n  for (const act of stored) {\n    summarizer.addForwardAction(summary, act);\n  }\n  for (const act of Array.from(undo).reverse()) {\n    summarizer.addReverseAction(summary, act);\n  }\n  // Name tables consistently, by their ultimate name, now we know it.\n  for (const renames of summary.tableRenames) {\n    const pre = renames[0];\n    let post = renames[1];\n    if (pre === null) { continue; }\n    if (post === null) { post = defunctTableName(pre); }\n    if (summary.tableDeltas[pre]) {\n      summary.tableDeltas[post] = summary.tableDeltas[pre];\n      delete summary.tableDeltas[pre];\n    }\n  }\n  for (const td of values(summary.tableDeltas)) {\n    // Name columns consistently, by their ultimate name, now we know it.\n    for (const renames of td.columnRenames) {\n      const pre = renames[0];\n      let post = renames[1];\n      if (pre === null) { continue; }\n      if (post === null) { post = defunctTableName(pre); }\n      if (td.columnDeltas[pre]) {\n        td.columnDeltas[post] = td.columnDeltas[pre];\n        delete td.columnDeltas[pre];\n      }\n    }\n    // remove any duplicates that crept in\n    td.addRows = Array.from(new Set(td.addRows));\n    td.updateRows = Array.from(new Set(td.updateRows));\n    td.removeRows = Array.from(new Set(td.removeRows));\n  }\n  return summary;\n}\n\n/**\n * Once we can produce an ActionSummary for each LocalActionBundle, it is useful to be able\n * to compose them.  Take the case of an ActionSummary pair, part 1 and part 2.  NameMerge\n * is an internal structure to help merging table/column name changes across two parts.\n */\ninterface NameMerge {\n  dead1: Set<string>;  /** anything of this name in part 1 should be removed from merge */\n  dead2: Set<string>;  /** anything of this name in part 2 should be removed from merge */\n  rename1: Map<string, string>;  /** replace these names in part 1 */\n  rename2: Map<string, string>;  /** replace these names in part 2 */\n  merge: LabelDelta[]; /** a merged list of adds/removes/renames for the result */\n}\n\n/**\n * Looks at a pair of name change lists (could be tables or columns) and figures out what\n * changes would need to be made to a data structure keyed on those names in order to key\n * it consistently on final names.\n */\nfunction planNameMerge(names1: LabelDelta[], names2: LabelDelta[]): NameMerge {\n  const result: NameMerge = {\n    dead1: new Set(),\n    dead2: new Set(),\n    rename1: new Map<string, string>(),\n    rename2: new Map<string, string>(),\n    merge: new Array<LabelDelta>(),\n  };\n  const names1ByFinalName: {[name: string]: LabelDelta} = keyBy(names1, p => p[1]!);\n  const names2ByInitialName: {[name: string]: LabelDelta} = keyBy(names2, p => p[0]!);\n  for (const [before1, after1] of names1) {\n    if (!after1) {\n      if (!before1) { throw new Error(\"invalid name change found\"); }\n      // Table/column was deleted in part 1.\n      result.dead1.add(before1);\n      result.merge.push([before1, null]);\n      continue;\n    }\n    // At this point, we know the table/column existed at end of part 1.\n    const pair2 = names2ByInitialName[after1];\n    if (!pair2) {\n      // Table/column's name was stable in part 2, so only change was in part 1.\n      result.merge.push([before1, after1]);\n      continue;\n    }\n    const after2 = pair2[1];\n    if (!after2) {\n      // Table/column was deleted in part 2.\n      result.dead2.add(after1);\n      if (before1) {\n        // Table/column existed prior to part 1, so we need to expose its history.\n        result.dead1.add(before1);\n        result.merge.push([before1, null]);\n      } else {\n        // Table/column did not exist prior to part 1, so we erase it from history.\n        result.dead1.add(after1);\n        result.dead2.add(defunctTableName(after1));\n      }\n      continue;\n    }\n    // It we made it this far, our table/column exists after part 2.  Any information\n    // keyed to its name in part 1 will need to be rekeyed to its final name.\n    result.rename1.set(after1, after2);\n    result.merge.push([before1, after2]);\n  }\n  // Look through part 2 for any changes not already covered.\n  for (const [before2, after2] of names2) {\n    if (!before2 && !after2) { throw new Error(\"invalid name change found\"); }\n    if (before2 && names1ByFinalName[before2]) { continue; }  // Already handled\n    result.merge.push([before2, after2]);\n    // If table/column is renamed in part 2, and name was stable in part 1,\n    // rekey any information about it in part 1.\n    if (before2 && after2) { result.rename1.set(before2, after2); }\n  }\n  // For neatness, sort the merge order. Not essential.\n  result.merge = sortBy(result.merge, ([a, b]) => [a || \"\", b || \"\"]);\n  return result;\n}\n\n/**\n * Re-key nested data to match name changes / removals.  Needs to be done a little carefully\n * since it is perfectly possible for names to be swapped or shuffled.\n *\n * Entries may be TableDeltas in the case of table renames or ColumnDeltas for column renames.\n *\n * @param entries: a dictionary of nested data - TableDeltas for tables, ColumnDeltas for columns.\n * @param dead: a set of keys to remove from the dictionary.\n * @param rename: changes of names to apply to the dictionary.\n */\nfunction renameAndDelete<T>(entries: {[name: string]: T}, dead: Set<string>,\n                            rename: Map<string, string>) {\n  // Remove all entries marked as dead.\n  for (const key of dead) { delete entries[key]; }\n  // Move all entries that are going to be renamed out to a cache temporarily.\n  const cache: {[name: string]: any} = {};\n  for (const key of rename.keys()) {\n    if (entries[key]) {\n      cache[key] = entries[key];\n      delete entries[key];\n    }\n  }\n  // Move all renamed entries back in with their new names.\n  for (const [key, val] of rename.entries()) { if (cache[key]) { entries[val] = cache[key]; } }\n}\n\n/**\n * Apply planned name changes to a pair of entries, and return a merged entry incorporating\n * their composition.\n *\n * @param names: the planned name changes as calculated by planNameMerge()\n * @param entries1: the first dictionary of nested data keyed on the names\n * @param entries2: test second dictionary of nested data keyed on the names\n * @param mergeEntry: a function to apply any further corrections needed to the entries\n *\n */\nfunction mergeNames<T>(names: NameMerge,\n                       entries1: {[name: string]: T},\n                       entries2: {[name: string]: T},\n                       mergeEntry: (e1: T, e2: T) => T): {[name: string]: T} {\n  // Update the keys of the entries1 and entries2 dictionaries to be consistent.\n  renameAndDelete(entries1, names.dead1, names.rename1);\n  renameAndDelete(entries2, names.dead2, names.rename2);\n\n  // Prepare the composition of the two dictionaries.\n  const entries = entries2;                   // Start with the second dictionary.\n  for (const key of Object.keys(entries1)) {  // Add material from the first.\n    const e1 = entries1[key];\n    if (!entries[key]) { entries[key] = e1;  continue; }  // No overlap - just add and move on.\n    entries[key] = mergeEntry(e1, entries[key]);          // Recursive merge if overlap.\n  }\n  return entries;\n}\n\n/**\n * Track whether a specific row was added, removed or updated.\n */\ninterface RowChange {\n  added: boolean;\n  removed: boolean;\n  updated: boolean;\n}\n\n/** RowChange for each row in a table */\nexport interface RowChanges {\n  [rowId: number]: RowChange;\n}\n\n\n/**\n * This is used when we hit a cell that we know has changed but don't know its\n * value due to it being part of a bulk input.  This produces a cell that\n * represents the unknowns.\n */\nfunction bulkCellFor(rc: RowChange|undefined): CellDelta|undefined {\n  if (!rc) { return undefined; }\n  const result: CellDelta = [null, null];\n  if (rc.removed || rc.updated) { result[0] = '?'; }\n  if (rc.added || rc.updated) { result[1] = '?'; }\n  return result;\n}\n\n/**\n * Merge changes that apply to a particular column.\n *\n * @param present1: affected rows in part 1\n * @param present2: affected rows in part 2\n * @param e1: cached cell values for the column in part 1\n * @param e2: cached cell values for the column in part 2\n */\nfunction mergeColumn(present1: RowChanges, present2: RowChanges,\n                     e1: ColumnDelta, e2: ColumnDelta): ColumnDelta {\n  for (const key of (Object.keys(present1) as unknown as number[])) {\n    let v1 = e1[key];\n    let v2 = e2[key];\n    if (!v1 && !v2) { continue; }\n    v1 = v1 || bulkCellFor(present1[key]);\n    v2 = v2 || bulkCellFor(present2[key]);\n    if (!v2)    { e2[key] = e1[key]; continue; }\n    if (!v1[1]) { continue; }  // Deleted row.\n    e2[key] = [v1[0], v2[1]];  // Change is from initial value in e1 to final value in e2.\n  }\n  return e2;\n}\n\n\n/** Put list of numbers in ascending order, with duplicates removed. */\nfunction uniqueAndSorted(lst: number[]) {\n  return [...new Set(lst)].sort((a, b) => a - b);\n}\n\n/** For each row changed, figure out whether it was added/removed/updated */\n/** TODO: need for this method suggests maybe a better core representation for this info */\nfunction getRowChanges(e: TableDelta): RowChanges {\n  const all = new Set([...e.addRows, ...e.removeRows, ...e.updateRows]);\n  const added = new Set(e.addRows);\n  const removed = new Set(e.removeRows);\n  const updated = new Set(e.updateRows);\n  return fromPairs([...all].map(x => {\n    return [x, {added: added.has(x),\n                removed: removed.has(x),\n                updated: updated.has(x)}] as [number, RowChange];\n  }));\n}\n\n/**\n * Merge changes that apply to a particular table.  For updating addRows and removeRows, care is\n * needed, since it is fine to remove and add the same rowId within a single summary -- this is just\n * rowId reuse.  It needs to be tracked so we know lifetime of rows though.\n */\nfunction mergeTable(e1: TableDelta,  e2: TableDelta): TableDelta {\n  // First, sort out any changes to names of columns.\n  const names = planNameMerge(e1.columnRenames, e2.columnRenames);\n  mergeNames(names, e1.columnDeltas, e2.columnDeltas,\n             mergeColumn.bind(null,\n                              getRowChanges(e1),\n                              getRowChanges(e2)));\n  e2.columnRenames = names.merge;\n  // All the columnar data is now merged.  What remains is to merge the summary lists of rowIds\n  // that we maintain.\n  const addRows1 = new Set(e1.addRows);       // Non-transient rows we have clearly added.\n  const removeRows2 = new Set(e2.removeRows); // Non-transient rows we have clearly removed.\n  const transients = e1.addRows.filter(x => removeRows2.has(x));\n  e2.addRows = uniqueAndSorted([...e2.addRows, ...e1.addRows.filter(x => !removeRows2.has(x))]);\n  e2.removeRows = uniqueAndSorted([...e2.removeRows.filter(x => !addRows1.has(x)), ...e1.removeRows]);\n  e2.updateRows = uniqueAndSorted([...e1.updateRows.filter(x => !removeRows2.has(x)),\n                                   ...e2.updateRows.filter(x => !addRows1.has(x))]);\n  // Remove all traces of transients (rows that were created and destroyed) from history.\n  for (const cols of values(e2.columnDeltas)) {\n    for (const key of transients) { delete cols[key]; }\n  }\n  return e2;\n}\n\n/** Finally, merge a pair of summaries. */\nexport function concatenateSummaryPair(sum1: ActionSummary, sum2: ActionSummary): ActionSummary {\n  const names = planNameMerge(sum1.tableRenames, sum2.tableRenames);\n  const rowChanges = mergeNames(names, sum1.tableDeltas, sum2.tableDeltas, mergeTable);\n  const sum: ActionSummary = {\n    tableRenames: names.merge,\n    tableDeltas: rowChanges\n  };\n  return sum;\n}\n\n/** Generalize to merging a list of summaries. */\nexport function concatenateSummaries(sums: ActionSummary[]): ActionSummary {\n  if (sums.length === 0) { return createEmptyActionSummary(); }\n  let result = sums[0];\n  for (let i = 1; i < sums.length; i++) {\n    result = concatenateSummaryPair(result, sums[i]);\n  }\n  return result;\n}\n","import {ActionGroup} from 'app/common/ActionGroup';\nimport {BulkAddRecord, CellValue, TableDataAction, UserAction} from 'app/common/DocActions';\nimport {FormulaProperties} from 'app/common/GranularAccessClause';\nimport {UIRowId} from 'app/common/TableData';\nimport {FetchUrlOptions, UploadResult} from 'app/common/uploads';\nimport {DocStateComparison, PermissionData, UserAccessData} from 'app/common/UserAPI';\nimport {ParseOptions} from 'app/plugin/FileParserAPI';\nimport {AccessTokenOptions, AccessTokenResult} from 'app/plugin/GristAPI';\nimport {IMessage} from 'grain-rpc';\n\nexport interface ApplyUAOptions {\n  desc?: string;      // Overrides the description of the action.\n  otherId?: number;   // For undo/redo; the actionNum of the original action to which it applies.\n  linkId?: number;    // For bundled actions, actionNum of the previous action in the bundle.\n  parseStrings?: boolean;  // If true, parses string values in some actions based on the column\n}\n\nexport interface ApplyUAExtendedOptions extends ApplyUAOptions {\n  bestEffort?: boolean; // If set, action may be applied in part if it cannot be applied completely.\n  fromOwnHistory?: boolean; // If set, action is confirmed to be a redo/undo taken from history, from\n                            // an action marked as being by the current user.\n  oldestSource?: number;  // If set, gives the timestamp of the oldest source the undo/redo\n                          // action was built from, expressed as number of milliseconds\n                          // elapsed since January 1, 1970 00:00:00 UTC\n  attachment?: boolean;   // If set, allow actions on attachments.\n}\n\nexport interface ApplyUAResult {\n  actionNum: number;      // number of the action that got recorded.\n  retValues: any[];       // array of return values, one for each of the passed-in user actions.\n  isModification: boolean; // true if document was modified.\n}\n\nexport interface DataSourceTransformed {\n  // Identifies the upload, which may include multiple files.\n  uploadId: number;\n\n  // For each file in the upload, the transform rules for that file.\n  transforms: TransformRuleMap[];\n}\n\nexport interface TransformRuleMap {\n  [origTableName: string]: TransformRule;\n}\n\n// Special values for import destinations; null means \"new table\", \"\" means skip table.\n// Both special options exposed as consts.\nexport const NEW_TABLE = null;\nexport const SKIP_TABLE = \"\";\nexport type DestId = string | typeof NEW_TABLE | typeof SKIP_TABLE;\n\n/**\n * How to import data into an existing table or a new one.\n */\nexport interface TransformRule {\n  /**\n   * The destination table for the transformed data. If null, the data is imported into a new table.\n   */\n  destTableId: DestId;\n  /**\n   * The list of columns to update (existing or new columns).\n   */\n  destCols: TransformColumn[];\n  /**\n   * The list of columns to read from the source table (just the headers name).\n   */\n  sourceCols: string[];\n}\n\n/**\n * Existing or new column to update. It is created based on the temporary table that was imported.\n */\nexport interface TransformColumn {\n  /**\n   * Label of the column to update. For new table it is the same name as the source column.\n   */\n  label: string;\n  /**\n   * Column id to update (null for a new table).\n   */\n  colId: string|null;\n  /**\n   * Type of the column (important for new columns).\n   */\n  type: string;\n  /**\n   * Formula to apply to the target column.\n   */\n  formula: string;\n  /**\n   * Widget options when we need to create a column (copied from the source).\n   */\n  widgetOptions: string;\n}\n\nexport interface ImportResult {\n  options: ParseOptions;\n  tables: ImportTableResult[];\n}\n\nexport interface ImportTableResult {\n  hiddenTableId: string;\n  uploadFileIndex: number;      // Index into upload.files array, for the file responsible for this table.\n  origTableName: string;\n  transformSectionRef: number;\n  destTableId: string|null;\n}\n\nexport interface ImportOptions {\n  parseOptions?: ParseOptions;         // Options for parsing the source file.\n  mergeOptionMaps?: MergeOptionsMap[]; // Options for merging fields, indexed by uploadFileIndex.\n}\n\nexport interface MergeOptionsMap {\n  // Map of original GristTable name of imported table to its merge options, if any.\n  [origTableName: string]: MergeOptions|undefined;\n}\n\nexport interface MergeOptions {\n  mergeCols: string[];          // Columns to use as merge keys for incremental imports.\n  mergeStrategy: MergeStrategy; // Determines how matched records should be merged between 2 tables.\n}\n\nexport interface MergeStrategy {\n  type: 'replace-with-nonblank-source' | 'replace-all-fields' | 'replace-blank-fields-only';\n}\n\n/**\n * Represents a query for Grist data. The tableId is required. An empty set of filters indicates\n * the full table. Examples:\n *    {tableId: \"Projects\", filters: {}}\n *    {tableId: \"Employees\", filters: {Status: [\"Active\"], Dept: [\"Sales\", \"HR\"]}}\n */\ninterface BaseQuery {\n  tableId: string;\n  filters: QueryFilters;\n}\n\n/**\n * Query that can only be used on the client side.\n * Allows filtering with more complex operations.\n */\nexport interface ClientQuery extends BaseQuery {\n  operations: {\n    [colId: string]: QueryOperation;\n  };\n}\n\nexport type FilterColValues = Pick<ClientQuery, \"filters\" | \"operations\">;\n\n/**\n * Query intended to be sent to a server.\n */\nexport interface ServerQuery extends BaseQuery {\n  // Queries to server for onDemand tables will set a limit to avoid bringing down the browser.\n  limit?: number;\n}\n\n/**\n * Type of the filters option to queries.\n */\nexport interface QueryFilters {\n  // TODO: check if \"any\" can be replaced with \"CellValue\".\n  [colId: string]: any[];\n}\n\n// - in: value should be contained in filters array\n// - intersects: value should be a list with some overlap with filters array\n// - empty: value should be falsy (e.g. null) or an empty list, filters is ignored\nexport type QueryOperation = \"in\" | \"intersects\" | \"empty\";\n\n/**\n * Results of fetching a table. Includes the table data you would\n * expect. May now also include attachment metadata referred to in the table\n * data. Attachment data is expressed as a BulkAddRecord, since it is\n * not a complete table, just selected rows. Attachment data is\n * currently included in fetches when (1) granular access control is\n * in effect, and (2) the user is neither an owner nor someone with\n * read access to the entire document, and (3) there is an attachment\n * column in the fetched table. This is exactly what the standard\n * Grist client needs, but in future it might be desirable to give\n * more control over this behavior.\n */\nexport interface TableFetchResult {\n  tableData: TableDataAction;\n  attachments?: BulkAddRecord;\n}\n\n/**\n * Response from useQuerySet(). A query returns data AND creates a subscription to receive\n * DocActions that affect this data. The querySubId field identifies this subscription, and must\n * be used in a disposeQuerySet() call to unsubscribe.\n */\nexport interface QueryResult extends TableFetchResult {\n  querySubId: number;     // ID of the subscription, to use with disposeQuerySet.\n}\n\n/**\n * Result of a fork operation, with newly minted ids.\n * For a document with docId XXXXX and urlId UUUUU, the fork will have a\n * docId of XXXXX~FORKID[~USERID] and a urlId of UUUUU~FORKID[~USERID].\n */\nexport interface ForkResult {\n  forkId: string;\n  docId: string;\n  urlId: string;\n}\n\n/**\n * An extension of PermissionData to cover not just users with whom a document is shared,\n * but also users mentioned in the document (in user attribute tables), and suggested\n * example users. This is for use in the \"View As\" feature of the access rules page.\n */\nexport interface PermissionDataWithExtraUsers extends PermissionData {\n  attributeTableUsers: UserAccessData[];\n  exampleUsers: UserAccessData[];\n}\n\n/**\n * Basic metadata about a table returned by `getAclResources()`.\n */\nexport interface AclTableDescription {\n  title: string;  // Raw data widget title\n  colIds: string[];  // IDs of all columns in table\n  groupByColLabels: string[] | null;  // Labels of groupby columns for summary tables, or null.\n}\n\nexport interface AclResources {\n  tables: {[tableId: string]: AclTableDescription};\n  problems: AclRuleProblem[];\n}\n\nexport interface AclRuleProblem {\n  tables?: {\n    tableIds: string[],\n  };\n  columns?: {\n    tableId: string,\n    colIds: string[],\n  };\n  userAttributes?: {\n    invalidUAColumns: string[],\n    names: string[],\n  }\n  comment: string;\n}\n\nexport function getTableTitle(table: AclTableDescription): string {\n  let {title} = table;\n  if (table.groupByColLabels) {\n    title += ' ' + summaryGroupByDescription(table.groupByColLabels);\n  }\n  return title;\n}\n\nexport function summaryGroupByDescription(groupByColumnLabels: string[]): string {\n  return `[${groupByColumnLabels.length ? 'by ' + groupByColumnLabels.join(\", \") : \"Totals\"}]`;\n}\n\n//// Types for autocomplete suggestions\n\n// Suggestion may be a string, or a tuple [funcname, argSpec, isGrist], where:\n//  - funcname (e.g. \"DATEADD\") will be auto-completed with \"(\", AND linked to Grist\n//    documentation.\n//  - argSpec (e.g. \"(start_date, days=0, ...)\") is to be shown as autocomplete caption.\n//  - isGrist is no longer used\ntype ISuggestion = string | [string, string, boolean];\n\n// Suggestion paired with an optional example value to show on the right\nexport type ISuggestionWithValue = [ISuggestion, string | null];\n\nexport interface ActiveDocAPI {\n  /**\n   * Closes a document, and unsubscribes from its userAction events.\n   */\n  closeDoc(): Promise<void>;\n\n  /**\n   * Fetches a particular table from the data engine to return to the client.\n   */\n  fetchTable(tableId: string): Promise<TableFetchResult>;\n\n  /**\n   * Fetches the generated Python code for this document. (TODO rename this misnomer.)\n   */\n  fetchTableSchema(): Promise<string>;\n\n  /**\n   * Makes a query (documented elsewhere) and subscribes to it, so that the client receives\n   * docActions that affect this query's results. The subscription remains functional even when\n   * tables or columns get renamed.\n   */\n  useQuerySet(query: ServerQuery): Promise<QueryResult>;\n\n  /**\n   * Removes the subscription to a Query, identified by QueryResult.querySubId, so that the\n   * client stops receiving docActions relevant only to that query.\n   */\n  disposeQuerySet(querySubId: number): Promise<void>;\n\n  /**\n   * Applies an array of user actions to the document.\n   */\n  applyUserActions(actions: UserAction[], options?: ApplyUAOptions): Promise<ApplyUAResult>;\n\n  /**\n   * A variant of applyUserActions where actions are passed in by ids (actionNum, actionHash)\n   * rather than by value.\n   */\n  applyUserActionsById(actionNums: number[], actionHashes: string[],\n                       undo: boolean, options?: ApplyUAOptions): Promise<ApplyUAResult>;\n\n  /**\n   * Imports files, removes previously created temporary hidden tables and creates the new ones.\n   */\n  importFiles(dataSource: DataSourceTransformed,\n              parseOptions: ParseOptions, prevTableIds: string[]): Promise<ImportResult>;\n\n  /**\n   * Finishes import files, creates the new tables, and cleans up temporary hidden tables and uploads.\n   */\n  finishImportFiles(dataSource: DataSourceTransformed, prevTableIds: string[],\n                    options: ImportOptions): Promise<ImportResult>;\n\n  /**\n   * Cancels import files, cleans up temporary hidden tables and uploads.\n   */\n  cancelImportFiles(uploadId: number, prevTableIds: string[]): Promise<void>;\n\n  /**\n   * Returns a diff of changes that will be applied to the destination table from `transformRule`\n   * if the data from `hiddenTableId` is imported with the specified `mergeOptions`.\n   */\n   generateImportDiff(hiddenTableId: string, transformRule: TransformRule,\n                      mergeOptions: MergeOptions): Promise<DocStateComparison>;\n\n  /**\n   * Saves attachments from a given upload and creates an entry for them in the database. It\n   * returns the list of rowIds for the rows created in the _grist_Attachments table.\n   */\n  addAttachments(uploadId: number): Promise<number[]>;\n\n  /**\n   * Returns up to n columns in the document, or a specific table, which contain the given values.\n   * Columns are returned ordered from best to worst based on an estimate for number of matches.\n   */\n  findColFromValues(values: any[], n: number, optTableId?: string): Promise<number[]>;\n\n  /**\n   * Returns cell value with an error message (traceback) for one invalid formula cell.\n   */\n  getFormulaError(tableId: string, colId: string, rowId: number): Promise<CellValue>;\n\n  /**\n   * Fetch content at a url.\n   */\n  fetchURL(url: string, options?: FetchUrlOptions): Promise<UploadResult>;\n\n  /**\n   * Find and return a list of auto-complete suggestions that start with `txt`, when editing a\n   * formula in table `tableId` and column `columnId`.\n   */\n  autocomplete(txt: string, tableId: string, columnId: string, rowId: UIRowId): Promise<ISuggestionWithValue[]>;\n\n  /**\n   * Removes the current instance from the doc.\n   */\n  removeInstanceFromDoc(): Promise<void>;\n\n  /**\n   * Get recent actions in ActionGroup format with summaries included.\n   */\n  getActionSummaries(): Promise<ActionGroup[]>;\n\n  /**\n   *  Initiates user actions bandling for undo.\n   */\n  startBundleUserActions(): Promise<void>;\n\n  /**\n   *  Stopes user actions bandling for undo.\n   */\n  stopBundleUserActions(): Promise<void>;\n\n  /**\n   * Forward a grain-rpc message to a given plugin.\n   */\n  forwardPluginRpc(pluginId: string, msg: IMessage): Promise<any>;\n\n  /**\n   * Reload documents plugins.\n   */\n  reloadPlugins(): Promise<void>;\n\n  /**\n   * Immediately close the document and data engine, to be reloaded from scratch, and cause all\n   * browser clients to reopen it.\n   */\n  reloadDoc(): Promise<void>;\n\n  /**\n   * Prepare a fork of the document, and return the id(s) of the fork.\n   */\n  fork(): Promise<ForkResult>;\n\n  /**\n   * Check if an ACL formula is valid. If not, will throw an error with an explanation.\n   */\n  checkAclFormula(text: string): Promise<FormulaProperties>;\n\n  /**\n   * Get a token for out-of-band access to the document.\n   */\n  getAccessToken(options: AccessTokenOptions): Promise<AccessTokenResult>;\n\n  /**\n   * Returns the full set of tableIds, with the list of colIds for each table. This is intended\n   * for editing ACLs. It is only available to users who can edit ACLs, and lists all resources\n   * regardless of rules that may block access to them.\n   */\n  getAclResources(): Promise<AclResources>;\n\n  /**\n   * Wait for document to finish initializing.\n   */\n  waitForInitialization(): Promise<void>;\n\n  /**\n   * Get users that are worth proposing to \"View As\" for access control purposes.\n   */\n  getUsersForViewAs(): Promise<PermissionDataWithExtraUsers>;\n}\n","import { BulkColValues, ColValues, DocAction, isSchemaAction,\n         TableDataAction, UserAction } from 'app/common/DocActions';\n\nconst ACTION_TYPES = new Set([\n  'AddRecord', 'BulkAddRecord', 'UpdateRecord', 'BulkUpdateRecord',\n  'RemoveRecord', 'BulkRemoveRecord'\n]);\n\n/**\n * The result of processing a UserAction.\n */\nexport interface ProcessedAction {\n  stored: DocAction[];\n  undo: DocAction[];\n  retValues: any;\n}\n\n/**\n * A minimal interface for interpreting UserActions in the context of\n * some current state. We need to know the next free rowId for each\n * table, and also the current state of cells. This interface was\n * abstracted from the initial implementation of on-demand tables.\n */\nexport interface AlternateStorage {\n  getNextRowId(tableId: string): Promise<number>;\n  fetchActionData(tableId: string, rowIds: number[],\n                  colIds?: string[]): Promise<TableDataAction>;\n}\n\n/**\n * Handle converting UserActions to DocActions for tables stored\n * in some way that is not handled by the regular data engine.\n */\nexport class AlternateActions {\n\n  constructor(private _storage: AlternateStorage) {}\n\n  /**\n   * This may be overridden to allow mixing two different storage mechanisms.\n   * The implementation of on-demand tables does this.\n   */\n  public usesAlternateStorage(tableId: string): boolean {\n    return true;\n  }\n\n  /**\n   * Convert a UserAction into stored and undo DocActions as well as return values.\n   */\n  public processUserAction(action: UserAction): Promise<ProcessedAction> {\n    const a = action.map(item => item as any);\n    switch (a[0]) {\n      case \"ApplyUndoActions\": return this._doApplyUndoActions(a[1]);\n      case \"AddRecord\":        return this._doAddRecord       (a[1], a[2], a[3]);\n      case \"BulkAddRecord\":    return this._doBulkAddRecord   (a[1], a[2], a[3]);\n      case \"UpdateRecord\":     return this._doUpdateRecord    (a[1], a[2], a[3]);\n      case \"BulkUpdateRecord\": return this._doBulkUpdateRecord(a[1], a[2], a[3]);\n      case \"RemoveRecord\":     return this._doRemoveRecord    (a[1], a[2]);\n      case \"BulkRemoveRecord\": return this._doBulkRemoveRecord(a[1], a[2]);\n      default: throw new Error(`Received unknown action ${action[0]}`);\n    }\n  }\n\n  /**\n   * Splits an array of UserActions into two separate arrays of normal and onDemand actions.\n   */\n  public splitByStorage(actions: UserAction[]): [UserAction[], UserAction[]] {\n    const normal: UserAction[] = [];\n    const onDemand: UserAction[] = [];\n    actions.forEach(a => {\n      // Check that the actionType can be applied without the sandbox and also that the action\n      // is on a data table.\n      const isOnDemandAction = ACTION_TYPES.has(a[0] as string);\n      const isDataTableAction = typeof a[1] === 'string' && !a[1].startsWith('_grist_');\n      if (a[0] === 'ApplyUndoActions') {\n        // Split actions inside the undo action array.\n        const [undoNormal, undoOnDemand] = this.splitByStorage(a[1] as UserAction[]);\n        if (undoNormal.length > 0) {\n          normal.push(['ApplyUndoActions', undoNormal]);\n        }\n        if (undoOnDemand.length > 0) {\n          onDemand.push(['ApplyUndoActions', undoOnDemand]);\n        }\n      } else if (isDataTableAction && isOnDemandAction && this.usesAlternateStorage(a[1] as string)) {\n        // Check whether the tableId belongs to an onDemand table.\n        onDemand.push(a);\n      } else {\n        normal.push(a);\n      }\n    });\n    return [normal, onDemand];\n  }\n\n  /**\n   * Check if an action represents a schema change on an onDemand table.\n   */\n  public isSchemaAction(docAction: DocAction): boolean {\n   return isSchemaAction(docAction) && this.usesAlternateStorage(docAction[1]);\n  }\n\n  private async _doApplyUndoActions(actions: DocAction[]) {\n    const undo: DocAction[] = [];\n    for (const a of actions) {\n      const converted = await this.processUserAction(a);\n      undo.concat(converted.undo);\n    }\n    return {\n      stored: actions,\n      undo,\n      retValues: null\n    };\n  }\n\n  private async _doAddRecord(\n    tableId: string,\n    rowId: number|null,\n    colValues: ColValues\n  ): Promise<ProcessedAction> {\n    if (rowId === null) {\n      rowId = await this._storage.getNextRowId(tableId);\n    }\n    // Set the manualSort to be the same as the rowId. This forces new rows to always be added\n    // at the end of the table.\n    colValues.manualSort = rowId;\n    return {\n      stored: [['AddRecord', tableId, rowId, colValues]],\n      undo: [['RemoveRecord', tableId, rowId]],\n      retValues: rowId\n    };\n  }\n\n  private async _doBulkAddRecord(\n    tableId: string,\n    rowIds: Array<number|null>,\n    colValues: BulkColValues\n  ): Promise<ProcessedAction> {\n\n    // When unset, we will set the rowId values to count up from the greatest\n    // values already in the table.\n    if (rowIds[0] === null) {\n      const nextRowId = await this._storage.getNextRowId(tableId);\n      for (let i = 0; i < rowIds.length; i++) {\n        rowIds[i] = nextRowId + i;\n      }\n    }\n    // Set the manualSort values to be the same as the rowIds. This forces new rows to always be\n    // added at the end of the table.\n    colValues.manualSort = rowIds;\n    return {\n      stored: [['BulkAddRecord', tableId, rowIds as number[], colValues]],\n      undo: [['BulkRemoveRecord', tableId, rowIds as number[]]],\n      retValues: rowIds\n    };\n  }\n\n  private async _doUpdateRecord(\n    tableId: string,\n    rowId: number,\n    colValues: ColValues\n  ): Promise<ProcessedAction> {\n    const [, , oldRowIds, oldColValues] =\n      await this._storage.fetchActionData(tableId, [rowId], Object.keys(colValues));\n    return {\n      stored: [['UpdateRecord', tableId, rowId, colValues]],\n      undo: [['BulkUpdateRecord', tableId, oldRowIds, oldColValues]],\n      retValues: null\n    };\n  }\n\n  private async _doBulkUpdateRecord(\n    tableId: string,\n    rowIds: number[],\n    colValues: BulkColValues\n  ): Promise<ProcessedAction> {\n    const [, , oldRowIds, oldColValues] =\n      await this._storage.fetchActionData(tableId, rowIds, Object.keys(colValues));\n    return {\n      stored: [['BulkUpdateRecord', tableId, rowIds, colValues]],\n      undo: [['BulkUpdateRecord', tableId, oldRowIds, oldColValues]],\n      retValues: null\n    };\n  }\n\n  private async _doRemoveRecord(tableId: string, rowId: number): Promise<ProcessedAction> {\n    const [, , oldRowIds, oldColValues] = await this._storage.fetchActionData(tableId, [rowId]);\n    return {\n      stored: [['RemoveRecord', tableId, rowId]],\n      undo: [['BulkAddRecord', tableId, oldRowIds, oldColValues]],\n      retValues: null\n    };\n  }\n\n  private async _doBulkRemoveRecord(tableId: string, rowIds: number[]): Promise<ProcessedAction> {\n    const [, , oldRowIds, oldColValues] = await this._storage.fetchActionData(tableId, rowIds);\n    return {\n      stored: [['BulkRemoveRecord', tableId, rowIds]],\n      undo: [['BulkAddRecord', tableId, oldRowIds, oldColValues]],\n      retValues: null\n    };\n  }\n}\n","/**\n * This mirrors action definitions from sandbox/grist/actions.py\n */\n\n// Some definitions have moved to be part of plugin API.\nimport { BulkColValues, CellValue, RowRecord } from 'app/plugin/GristData';\nexport type { BulkColValues, CellValue, RowRecord };\n\n// Part of a special CellValue used for comparisons, embedding several versions of a CellValue.\nexport interface AllCellVersions {\n  parent: CellValue;\n  remote: CellValue;\n  local: CellValue;\n}\nexport type CellVersions = Partial<AllCellVersions>;\n\nexport type AddRecord = ['AddRecord', string, number, ColValues];\nexport type BulkAddRecord = ['BulkAddRecord', string, number[], BulkColValues];\nexport type RemoveRecord = ['RemoveRecord', string, number];\nexport type BulkRemoveRecord = ['BulkRemoveRecord', string, number[]];\nexport type UpdateRecord = ['UpdateRecord', string, number, ColValues];\nexport type BulkUpdateRecord = ['BulkUpdateRecord', string, number[], BulkColValues];\n\nexport type ReplaceTableData = ['ReplaceTableData', string, number[], BulkColValues];\n\n// This is the format in which data comes when we fetch a table from the sandbox.\nexport type TableDataAction = ['TableData', string, number[], BulkColValues];\n\nexport type AddColumn = ['AddColumn', string, string, ColInfo];\nexport type RemoveColumn = ['RemoveColumn', string, string];\nexport type RenameColumn = ['RenameColumn', string, string, string];\nexport type ModifyColumn = ['ModifyColumn', string, string, Partial<ColInfo>];\n\nexport type AddTable = ['AddTable', string, ColInfoWithId[]];\nexport type RemoveTable = ['RemoveTable', string];\nexport type RenameTable = ['RenameTable', string, string];\n\nexport type DocAction = (\n  AddRecord |\n  BulkAddRecord |\n  RemoveRecord |\n  BulkRemoveRecord |\n  UpdateRecord |\n  BulkUpdateRecord |\n  ReplaceTableData |\n  TableDataAction |\n  AddColumn |\n  RemoveColumn |\n  RenameColumn |\n  ModifyColumn |\n  AddTable |\n  RemoveTable |\n  RenameTable\n);\n\n// type guards for convenience - see:\n//   https://www.typescriptlang.org/docs/handbook/advanced-types.html#user-defined-type-guards\nexport function isAddRecord(act: DocAction): act is AddRecord { return act[0] === 'AddRecord'; }\nexport function isBulkAddRecord(act: DocAction): act is BulkAddRecord { return act[0] === 'BulkAddRecord'; }\nexport function isRemoveRecord(act: DocAction): act is RemoveRecord { return act[0] === 'RemoveRecord'; }\nexport function isBulkRemoveRecord(act: DocAction): act is BulkRemoveRecord { return act[0] === 'BulkRemoveRecord'; }\nexport function isUpdateRecord(act: DocAction): act is UpdateRecord { return act[0] === 'UpdateRecord'; }\nexport function isBulkUpdateRecord(act: DocAction): act is BulkUpdateRecord { return act[0] === 'BulkUpdateRecord'; }\n\nexport function isReplaceTableData(act: DocAction): act is ReplaceTableData { return act[0] === 'ReplaceTableData'; }\n\nexport function isAddColumn(act: DocAction): act is AddColumn { return act[0] === 'AddColumn'; }\nexport function isRemoveColumn(act: DocAction): act is RemoveColumn { return act[0] === 'RemoveColumn'; }\nexport function isRenameColumn(act: DocAction): act is RenameColumn { return act[0] === 'RenameColumn'; }\nexport function isModifyColumn(act: DocAction): act is ModifyColumn { return act[0] === 'ModifyColumn'; }\n\nexport function isAddTable(act: DocAction): act is AddTable { return act[0] === 'AddTable'; }\nexport function isRemoveTable(act: DocAction): act is RemoveTable { return act[0] === 'RemoveTable'; }\nexport function isRenameTable(act: DocAction): act is RenameTable { return act[0] === 'RenameTable'; }\n\n\nconst SCHEMA_ACTIONS = new Set(['AddTable', 'RemoveTable', 'RenameTable', 'AddColumn',\n  'RemoveColumn', 'RenameColumn', 'ModifyColumn']);\n\nconst DATA_ACTIONS = new Set(['AddRecord', 'RemoveRecord', 'UpdateRecord', 'BulkAddRecord',\n  'BulkRemoveRecord', 'BulkUpdateRecord', 'ReplaceTableData', 'TableData']);\n\n/**\n * Determines whether a given action is a schema action or not.\n */\nexport function isSchemaAction(action: DocAction):\n    action is AddTable | RemoveTable | RenameTable | AddColumn | RemoveColumn | RenameColumn | ModifyColumn {\n  return SCHEMA_ACTIONS.has(action[0]);\n}\n\nexport function isDataAction(action: DocAction|UserAction):\n    action is AddRecord | RemoveRecord | UpdateRecord |\n              BulkAddRecord | BulkRemoveRecord | BulkUpdateRecord |\n              ReplaceTableData | TableDataAction {\n  return DATA_ACTIONS.has(String(action[0]));\n}\n\n/**\n * Returns the tableId from the action.\n */\nexport function getTableId(action: DocAction): string {\n  return action[1];   // It happens to always be in the same position in the action tuple.\n}\n\nexport interface TableDataActionSet {\n  [tableId: string]: TableDataAction;\n}\n\n// Helper types used in the definitions above.\n\nexport interface ColValues { [colId: string]: CellValue; }\nexport interface ColInfoMap { [colId: string]: ColInfo; }\n\nexport interface ColInfo {\n  type: string;\n  isFormula: boolean;\n  formula: string;\n}\n\nexport interface ColInfoWithId extends ColInfo {\n  id: string;\n}\n\n// Multiple records in column-oriented format, i.e. same as BulkColValues but with a mandatory\n// 'id' column. This is preferred over TableDataAction in external APIs.\nexport interface TableColValues {\n  id: number[];\n  [colId: string]: CellValue[];\n}\n\n// Multiple records in record-oriented format\nexport interface TableRecordValues {\n  records: TableRecordValue[];\n}\n\nexport interface TableRecordValue {\n  id: number | string;\n  fields: {\n    [colId: string]: CellValue\n  };\n}\n\n// Both UserActions and DocActions are represented as [ActionName, ...actionArgs].\n// TODO I think it's better to represent DocAction as a Buffer containing the marshalled action.\n\nexport type UserAction = Array<string|number|object|boolean|null|undefined>;\n\n// Actions that trigger formula calculations in the data engine\nexport const CALCULATING_USER_ACTIONS = new Set(['Calculate', 'UpdateCurrentTime', 'RespondToRequests']);\n\nexport function getNumRows(action: DocAction): number {\n  return !isDataAction(action) ? 0\n    : Array.isArray(action[2]) ? action[2].length\n    : 1;\n}\n\n// Convert from TableColValues (used by DocStorage and external APIs) to TableDataAction (used\n// mainly by the sandbox).\nexport function toTableDataAction(tableId: string, colValues: TableColValues): TableDataAction {\n  const colData = {...colValues};   // Make a copy to avoid changing passed-in arguments.\n  const rowIds: number[] = colData.id;\n  delete (colData as BulkColValues).id;\n  return ['TableData', tableId, rowIds, colData];\n}\n\n// Convert from TableDataAction (used mainly by the sandbox) to TableColValues (used by DocStorage\n// and external APIs).\n// Also accepts a TableDataAction nested as a tableData member of a larger structure,\n// for convenience in dealing with the result of fetches.\nexport function fromTableDataAction(tableData: TableDataAction|{tableData: TableDataAction}): TableColValues {\n  const data = ('tableData' in tableData) ? tableData.tableData : tableData;\n  const rowIds: number[] = data[2];\n  const colValues: BulkColValues = data[3];\n  return {id: rowIds, ...colValues};\n}\n\n/**\n * Convert a list of rows into an object with columns of values, used for\n * BulkAddRecord/BulkUpdateRecord actions.\n */\nexport function getColValues(records: Partial<RowRecord>[]): BulkColValues {\n  const colIdSet = new Set<string>();\n  for (const r of records) {\n    for (const c of Object.keys(r)) {\n      if (c !== 'id') {\n        colIdSet.add(c);\n      }\n    }\n  }\n  const result: BulkColValues = {};\n  for (const colId of colIdSet) {\n    result[colId] = records.map(r => r[colId]!);\n  }\n  return result;\n}\n\n/**\n * Extract the col ids mentioned in a record-related DocAction as a list\n * (even if the action is not a bulk action). Returns undefined if no col ids\n * mentioned.\n */\nexport function getColIdsFromDocAction(docActions: RemoveRecord | BulkRemoveRecord | AddRecord |\n  BulkAddRecord | UpdateRecord | BulkUpdateRecord | ReplaceTableData |\n  TableDataAction): string[] | undefined {\n  if (docActions[3]) { return Object.keys(docActions[3]); }\n  return undefined;\n}\n\n/**\n * Extract column values for a particular column as CellValue[] from a\n * record-related DocAction. Undefined if absent.\n */\nexport function getColValuesFromDocAction(docAction: RemoveRecord | BulkRemoveRecord | AddRecord |\n  BulkAddRecord | UpdateRecord | BulkUpdateRecord | ReplaceTableData |\n  TableDataAction, colId: string): CellValue[]|undefined {\n  const colValues = docAction[3];\n  if (!colValues) { return undefined; }\n  const cellValues = colValues[colId];\n  if (!cellValues) { return undefined; }\n  if (Array.isArray(docAction[2])) {\n    return cellValues as CellValue[];\n  } else {\n    return [cellValues as CellValue];\n  }\n}\n","/**\n * DocData maintains all underlying data for a Grist document, knows how to load it,\n * subscribes to actions which change it, and forwards those actions to individual tables.\n * It also provides the interface to apply actions to data.\n */\nimport {DocumentSettings} from 'app/common/DocumentSettings';\nimport {safeJsonParse} from 'app/common/gutil';\nimport {schema, SchemaTypes} from 'app/common/schema';\nimport fromPairs = require('lodash/fromPairs');\nimport groupBy = require('lodash/groupBy');\nimport {ActionDispatcher} from './ActionDispatcher';\nimport {TableFetchResult} from './ActiveDocAPI';\nimport {\n  BulkColValues, ColInfo, ColInfoWithId, ColValues, DocAction,\n  RowRecord, TableDataAction\n} from './DocActions';\nimport {ColTypeMap, MetaRowRecord, MetaTableData, TableData} from './TableData';\n\ntype FetchTableFunc = (tableId: string) => Promise<TableFetchResult>;\n\nexport class DocData extends ActionDispatcher {\n  private _tables: Map<string, TableData> = new Map();\n\n  private _fetchTableFunc: (tableId: string) => Promise<TableDataAction>;\n\n  /**\n   * If metaTableData is not supplied, then any tables needed should be loaded manually,\n   * using syncTable(). All column types will be set to Any, which will affect default\n   * values.\n   */\n  constructor(fetchTableFunc: FetchTableFunc, metaTableData: {[tableId: string]: TableDataAction} | null) {\n    super();\n    // Wrap fetchTableFunc slightly to handle any extra attachment data that\n    // may come along for the ride.\n    this._fetchTableFunc = async (tableId: string) => {\n      const {tableData, attachments} = await fetchTableFunc(tableId);\n      if (attachments) {\n        // Back-end doesn't keep track of which attachments we already have,\n        // so there may be duplicates of rows we already have - but happily\n        // BulkAddRecord overwrites duplicates now.\n        this.receiveAction(attachments);\n      }\n      return tableData;\n    };\n    if (metaTableData === null) { return; }\n    // Create all meta tables, and populate data we already have.\n    for (const tableId in schema) {\n      if (schema.hasOwnProperty(tableId)) {\n        const colTypes: ColTypeMap = (schema as any)[tableId];\n        this._tables.set(tableId, this.createTableData(tableId, metaTableData[tableId], colTypes));\n      }\n    }\n\n    // Build a map from tableRef to [columnRecords]\n    const colsByTable = groupBy(this._tables.get('_grist_Tables_column')!.getRecords(), 'parentId');\n    for (const t of this._tables.get('_grist_Tables')!.getRecords()) {\n      const tableId = t.tableId as string;\n      const colRecords: RowRecord[] = colsByTable[t.id] || [];\n      const colTypes = fromPairs(colRecords.map(c => [c.colId, c.type]));\n      this._tables.set(tableId, this.createTableData(tableId, null, colTypes));\n    }\n  }\n\n  /**\n   * Creates a new TableData object. A derived class may override to return an object derived from TableData.\n   */\n  public createTableData(tableId: string, tableData: TableDataAction|null, colTypes: ColTypeMap): TableData {\n    return new (tableId in schema ? MetaTableData : TableData)(tableId, tableData, colTypes);\n  }\n\n  /**\n   * Returns the TableData object for the requested table.\n   */\n  public getTable(tableId: string): TableData|undefined {\n    return this._tables.get(tableId);\n  }\n\n  public async requireTable(tableId: string): Promise<TableData> {\n    await this.fetchTable(tableId);\n    const td = this._tables.get(tableId);\n    if (!td) {\n      throw new Error(`could not fetch table: ${tableId}`);\n    }\n    return td;\n  }\n\n  /**\n   * Like getTable, but the result knows about the types of its records\n   */\n  public getMetaTable<TableId extends keyof SchemaTypes>(tableId: TableId): MetaTableData<TableId> {\n    return this.getTable(tableId) as any;\n  }\n\n  /**\n   * Returns an unsorted list of all tableIds in this doc, including both metadata and user tables.\n   */\n  public getTables(): ReadonlyMap<string, TableData> {\n    return this._tables;\n  }\n\n  /**\n   * Fetches the data for tableId if needed, and returns a promise that is fulfilled when the data\n   * is loaded.\n   */\n  public fetchTable(tableId: string, force?: boolean): Promise<void> {\n    const table = this._tables.get(tableId);\n    if (!table) { throw new Error(`DocData.fetchTable: unknown table ${tableId}`); }\n    return (!table.isLoaded || force) ? table.fetchData(this._fetchTableFunc) : Promise.resolve();\n  }\n\n  /**\n   * Fetches the data for tableId unconditionally, and without knowledge of its metadata.\n   * Columns will be assumed to have type 'Any'.\n   */\n  public async syncTable(tableId: string): Promise<void> {\n    const tableData = await this._fetchTableFunc(tableId);\n    const colTypes = fromPairs(Object.keys(tableData[3]).map(c => [c, 'Any']));\n    colTypes.id = 'Any';\n    this._tables.set(tableId, this.createTableData(tableId, tableData, colTypes));\n  }\n\n  /**\n   * Handles an action received from the server, by forwarding it to the appropriate TableData\n   * object.\n   */\n  public receiveAction(action: DocAction): void {\n    // Look up TableData before processing the action in case we rename or remove it.\n    const tableId: string = action[1];\n    const table = this._tables.get(tableId);\n\n    this.dispatchAction(action);\n\n    // Forward all actions to per-table TableData objects.\n    if (table) {\n      table.receiveAction(action);\n    }\n  }\n\n  public docInfo(): MetaRowRecord<'_grist_DocInfo'> {\n    const docInfoTable = this.getMetaTable('_grist_DocInfo');\n    return docInfoTable.getRecord(1)!;\n  }\n\n  public docSettings(): DocumentSettings {\n    return safeJsonParse(this.docInfo().documentSettings, {});\n  }\n\n  // ---- The following methods implement ActionDispatcher interface ----\n\n  protected onAddTable(action: DocAction, tableId: string, columns: ColInfoWithId[]): void {\n    const colTypes = fromPairs(columns.map(c => [c.id, c.type]));\n    this._tables.set(tableId, this.createTableData(tableId, null, colTypes));\n  }\n\n  protected onRemoveTable(action: DocAction, tableId: string): void {\n    this._tables.delete(tableId);\n  }\n\n  protected onRenameTable(action: DocAction, oldTableId: string, newTableId: string): void {\n    const table = this._tables.get(oldTableId);\n    if (table) {\n      this._tables.set(newTableId, table);\n      this._tables.delete(oldTableId);\n    }\n  }\n\n  // tslint:disable:no-empty\n  protected onAddRecord(action: DocAction, tableId: string, rowId: number, colValues: ColValues): void {}\n  protected onUpdateRecord(action: DocAction, tableId: string, rowId: number, colValues: ColValues): void {}\n  protected onRemoveRecord(action: DocAction, tableId: string, rowId: number): void {}\n\n  protected onBulkAddRecord(action: DocAction, tableId: string, rowIds: number[], colValues: BulkColValues): void {}\n  protected onBulkUpdateRecord(action: DocAction, tableId: string, rowIds: number[], colValues: BulkColValues): void {}\n  protected onBulkRemoveRecord(action: DocAction, tableId: string, rowIds: number[]) {}\n\n  protected onReplaceTableData(action: DocAction, tableId: string, rowIds: number[], colValues: BulkColValues): void {}\n\n  protected onAddColumn(action: DocAction, tableId: string, colId: string, colInfo: ColInfo): void {}\n  protected onRemoveColumn(action: DocAction, tableId: string, colId: string): void {}\n  protected onRenameColumn(action: DocAction, tableId: string, oldColId: string, newColId: string): void {}\n  protected onModifyColumn(action: DocAction, tableId: string, colId: string, colInfo: ColInfo): void {}\n}\n","export interface DocumentUsage {\n  rowCount?: RowCounts;\n  dataSizeBytes?: number;\n  attachmentsSizeBytes?: number;\n}\n\nexport interface RowCounts {\n  total: number;\n  [tableRef: number]: number;\n}\n\nexport type DataLimitStatus = 'approachingLimit' | 'gracePeriod' | 'deleteOnly' | null;\n\ntype DocUsageOrPending = {\n  [Metric in keyof Required<DocumentUsage>]: Required<DocumentUsage>[Metric] | 'pending'\n}\n\nexport interface DocUsageSummary extends DocUsageOrPending {\n  dataLimitStatus: DataLimitStatus;\n}\n\n// Count of non-removed documents in an org, grouped by data limit status.\nexport type OrgUsageSummary = Record<NonNullable<DataLimitStatus>, number>;\n\ntype FilteredDocUsage = {\n  [Metric in keyof DocUsageOrPending]: DocUsageOrPending[Metric] | 'hidden'\n}\n\nexport interface FilteredDocUsageSummary extends FilteredDocUsage {\n  dataLimitStatus: DataLimitStatus;\n}\n\n// Ratio of usage at which we start telling users that they're approaching limits.\nexport const APPROACHING_LIMIT_RATIO = 0.9;\n\n/**\n * Computes a ratio of `usage` to `limit`, if possible. Returns 0 if `usage` or `limit`\n * is invalid or undefined.\n */\nexport function getUsageRatio(usage: number | undefined, limit: number | undefined): number {\n  if (!isEnforceableLimit(limit) || usage === undefined || usage < 0) {\n    // Treat undefined or invalid values as having 0 usage.\n    return 0;\n  }\n\n  return usage / limit;\n}\n\n/**\n * Returns an empty org usage summary with values initialized to 0.\n */\n export function createEmptyOrgUsageSummary(): OrgUsageSummary {\n  return {\n    approachingLimit: 0,\n    gracePeriod: 0,\n    deleteOnly: 0,\n  };\n}\n\n/**\n * Returns true if `limit` is defined and is a valid, positive number.\n */\nfunction isEnforceableLimit(limit: number | undefined): limit is number {\n  return limit !== undefined && limit > 0;\n}\n","import {PartialPermissionSet} from 'app/common/ACLPermissions';\nimport {CellValue, RowRecord} from 'app/common/DocActions';\nimport {MetaRowRecord} from 'app/common/TableData';\nimport {Role} from './roles';\n\nexport interface RuleSet {\n  tableId: '*' | string;\n  colIds: '*' | string[];\n  // The default permissions for this resource, if set, are represented by a RulePart with\n  // aclFormula of \"\", which must be the last element of body.\n  body: RulePart[];\n}\n\nexport interface RulePart {\n  origRecord?: MetaRowRecord<'_grist_ACLRules'>;  // Original record used to create this RulePart.\n  aclFormula: string;\n  permissions: PartialPermissionSet;\n  permissionsText: string;        // The text version of PermissionSet, as stored.\n\n  // Compiled version of aclFormula.\n  matchFunc?: AclMatchFunc;\n\n  // Optional memo, currently extracted from comment in formula.\n  memo?: string;\n}\n\n// Light wrapper for reading records or user attributes.\nexport interface InfoView {\n  get(key: string): CellValue;\n  toJSON(): {[key: string]: any};\n}\n\n// As InfoView, but also supporting writing.\nexport interface InfoEditor {\n  get(key: string): CellValue;\n  set(key: string, val: CellValue): this;\n  toJSON(): {[key: string]: any};\n}\n\n// Represents user info, which may include properties which are themselves RowRecords.\nexport interface UserInfo {\n  Name: string | null;\n  Email: string | null;\n  Access: Role | null;\n  Origin: string | null;\n  LinkKey: Record<string, string | undefined>;\n  UserID: number | null;\n  UserRef: string | null;\n  SessionID: string | null;\n  [attributes: string]: unknown;\n  toJSON(): {[key: string]: any};\n}\n\n/**\n * Input into the AclMatchFunc. Compiled formulas evaluate AclMatchInput to produce a boolean.\n */\nexport interface AclMatchInput {\n  user: UserInfo;\n  rec?: InfoView;\n  newRec?: InfoView;\n  docId?: string;\n}\n\n/**\n * The actual boolean function that can evaluate a request. The result of compiling ParsedAclFormula.\n */\nexport type AclMatchFunc = (input: AclMatchInput) => boolean;\n\n/**\n * Representation of a parsed ACL formula.\n */\ntype PrimitiveCellValue = number|string|boolean|null;\nexport type ParsedAclFormula = [string, ...(ParsedAclFormula|PrimitiveCellValue)[]];\n\n/**\n * Observations about a formula.\n */\nexport interface FormulaProperties {\n  hasRecOrNewRec?: boolean;\n  usedColIds?: string[];\n}\n\nexport interface UserAttributeRule {\n  origRecord?: RowRecord;         // Original record used to create this UserAttributeRule.\n  name: string;       // Should be unique among UserAttributeRules.\n  tableId: string;    // Table in which to look up an existing attribute.\n  lookupColId: string;  // Column in tableId in which to do the lookup.\n  charId: string;     // Attribute to look up, possibly a path. E.g. 'Email' or 'office.city'.\n}\n\n/**\n * Check some key facts about the formula.\n */\nexport function getFormulaProperties(formula: ParsedAclFormula) {\n  const result: FormulaProperties = {};\n  if (usesRec(formula)) { result.hasRecOrNewRec = true; }\n  const colIds = new Set<string>();\n  collectRecColIds(formula, colIds);\n  result.usedColIds = Array.from(colIds);\n  return result;\n}\n\n/**\n * Check whether a formula mentions `rec` or `newRec`.\n */\nexport function usesRec(formula: ParsedAclFormula): boolean {\n  if (!Array.isArray(formula)) { throw new Error('expected a list'); }\n  if (isRecOrNewRec(formula)) {\n    return true;\n  }\n  return formula.some(el => {\n    if (!Array.isArray(el)) { return false; }\n    return usesRec(el);\n  });\n}\n\nfunction isRecOrNewRec(formula: ParsedAclFormula|PrimitiveCellValue): boolean {\n  return Array.isArray(formula) &&\n    formula[0] === 'Name' &&\n    (formula[1] === 'rec' || formula[1] === 'newRec');\n}\n\nfunction collectRecColIds(formula: ParsedAclFormula, colIds: Set<string>): void {\n  if (!Array.isArray(formula)) { throw new Error('expected a list'); }\n  if (formula[0] === 'Attr' && isRecOrNewRec(formula[1])) {\n    const colId = formula[2];\n    colIds.add(String(colId));\n    return;\n  }\n  formula.forEach(el => Array.isArray(el) && collectRecColIds(el, colIds));\n}\n","/**\n * TableData maintains a single table's data.\n */\nimport {ActionDispatcher} from 'app/common/ActionDispatcher';\nimport {\n  BulkAddRecord, BulkColValues, CellValue, ColInfo, ColInfoWithId, ColValues, DocAction,\n        isSchemaAction, ReplaceTableData, RowRecord, TableDataAction} from 'app/common/DocActions';\nimport {getDefaultForType} from 'app/common/gristTypes';\nimport {arrayRemove, arraySplice, getDistinctValues} from 'app/common/gutil';\nimport {SchemaTypes} from \"app/common/schema\";\nimport isEqual = require('lodash/isEqual');\nimport fromPairs = require('lodash/fromPairs');\n\nexport interface ColTypeMap { [colId: string]: string; }\n\n// This is the row ID used in the client, but it's helpful to have available in some common code\n// as well, which is why it's declared in app/common. Note that for data actions and stored data,\n// 'new' is not used.\nexport type UIRowId = number | 'new';\n\ntype UIRowFunc<T> = (rowId: UIRowId) => T;\n\ninterface ColData {\n  colId: string;\n  type: string;\n  defl: any;\n  values: CellValue[];\n}\n\nexport interface SingleCell {\n  tableId: string;\n  colId: string;\n  rowId: number;\n}\n\n/**\n * An interface for a table with rows that may be skipped.\n */\nexport interface SkippableRows {\n  // If there may be skippable rows, return a function to test rowIds for keeping.\n  getKeepFunc(): undefined | UIRowFunc<boolean>;\n  // Get a special row id which represents a skipped sequence of rows.\n  getSkipRowId(): number;\n}\n\n/**\n * TableData class to maintain a single table's data.\n *\n * In the browser's memory, table data needs a representation that's reasonably compact. We\n * represent it as column-wise arrays. (An early hope was to allow use of TypedArrays, but since\n * types can be mixed, those are not used.)\n */\nexport class TableData extends ActionDispatcher implements SkippableRows {\n  private _tableId: string;\n  private _isLoaded: boolean = false;\n  private _fetchPromise?: Promise<void>;\n\n  // Storage of the underlying data. Each column is an array, all of the same length. Includes\n  // 'id' column, containing a reference to _rowIdCol.\n  private _columns: Map<string, ColData> = new Map();\n\n  // Array of all ColData objects, omitting 'id'.\n  private _colArray: ColData[] = [];\n\n  // The `id` column is direct reference to the 'id' column, and contains row ids.\n  private _rowIdCol: number[] = [];\n\n  // Maps row id to index in the arrays in _columns. I.e. it's the inverse of _rowIdCol.\n  private _rowMap: Map<number, number> = new Map();\n\n  constructor(tableId: string, tableData: TableDataAction|null, colTypes: ColTypeMap) {\n    super();\n    this._tableId = tableId;\n\n    // Initialize all columns to empty arrays, while nothing is yet loaded.\n    for (const colId in colTypes) {\n      if (colTypes.hasOwnProperty(colId)) {\n        const type = colTypes[colId];\n        const defl = getDefaultForType(type);\n        const colData: ColData = { colId, type, defl, values: [] };\n        this._columns.set(colId, colData);\n        this._colArray.push(colData);\n      }\n    }\n    this._columns.set('id', {colId: 'id', type: 'Id', defl: 0, values: this._rowIdCol});\n\n    if (tableData) {\n      this.loadData(tableData);\n    }\n    // TODO: We should probably unload big sets of data when no longer needed. This can be left for\n    // when we support loading only parts of a table.\n  }\n\n  /**\n   * Fetch data (as long as a fetch is not in progress), and load it in memory when done.\n   * Returns a promise that's resolved when data finishes loading, and isLoaded becomes true.\n   */\n  public fetchData(fetchFunc: (tableId: string) => Promise<TableDataAction>): Promise<void> {\n    if (!this._fetchPromise) {\n      this._fetchPromise = fetchFunc(this._tableId).then(data => {\n        this._fetchPromise = undefined;\n        this.loadData(data);\n      });\n    }\n    return this._fetchPromise;\n  }\n\n  /**\n   * Populates the data for this table. Returns the array of old rowIds that were loaded before.\n   */\n  public loadData(tableData: TableDataAction|ReplaceTableData): number[] {\n    const rowIds: number[] = tableData[2];\n    const colValues: BulkColValues = tableData[3];\n    const oldRowIds: number[] = this._rowIdCol.slice(0);\n\n    reassignArray(this._rowIdCol, rowIds);\n    for (const colData of this._colArray) {\n      const values = colData.colId === 'id' ? rowIds : colValues[colData.colId];\n      // If colId is missing from tableData, use an array of default values. Note that reusing\n      // default value like this is only OK because all default values we use are primitive.\n      reassignArray(colData.values, values || this._rowIdCol.map(() => colData.defl));\n    }\n\n    this._rowMap.clear();\n    for (let i = 0; i < rowIds.length; i++) {\n      this._rowMap.set(rowIds[i], i);\n    }\n\n    this._isLoaded = true;\n    return oldRowIds;\n  }\n\n  // Used by QuerySet to load new rows for onDemand tables.\n  public loadPartial(data: TableDataAction): void {\n    // Add the new rows, reusing BulkAddData code.\n    const rowIds: number[] = data[2];\n    this.onBulkAddRecord(data, data[1], rowIds, data[3]);\n\n    // Mark the table as loaded.\n    this._isLoaded = true;\n  }\n\n  // Used by QuerySet to remove unused rows for onDemand tables when a QuerySet is disposed.\n  public unloadPartial(rowIds: number[]): void {\n    // Remove the unneeded rows, reusing BulkRemoveRecord code.\n    this.onBulkRemoveRecord(['BulkRemoveRecord', this.tableId, rowIds], this.tableId, rowIds);\n  }\n\n  /**\n   * Read-only tableId.\n   */\n  public get tableId(): string { return this._tableId; }\n\n  /**\n   * Boolean flag for whether the data for this table is already loaded.\n   */\n  public get isLoaded(): boolean { return this._isLoaded; }\n\n  /**\n   * The number of records loaded in this table.\n   */\n  public numRecords(): number { return this._rowIdCol.length; }\n\n  /**\n   * Returns the specified value from this table.\n   */\n  public getValue(rowId: UIRowId, colId: string): CellValue|undefined {\n    const colData = this._columns.get(colId);\n    const index = this._rowMap.get(rowId as number);    // rowId of 'new' will not be found.\n    return colData && index !== undefined ? colData.values[index] : undefined;\n  }\n\n  public hasRowId(rowId: number): boolean {\n    return this._rowMap.has(rowId);\n  }\n\n  /**\n   * Returns the index of the given rowId, if it exists, in the same unstable order that's\n   * returned by getRowIds() and getColValues().\n   */\n  public getRowIdIndex(rowId: UIRowId): number|undefined {\n    return this._rowMap.get(rowId as number);\n  }\n\n  /**\n   * Given a column name, returns a function that takes a rowId and returns the value for that\n   * column of that row. The returned function is faster than getValue() calls.\n   */\n  public getRowPropFunc(colId: string): UIRowFunc<CellValue|undefined> {\n    const colData = this._columns.get(colId);\n    if (!colData) { return () => undefined; }\n    const values = colData.values;\n    const rowMap = this._rowMap;\n    return (rowId: UIRowId) => values[rowMap.get(rowId as number)!];\n  }\n\n  // By default, no rows are skippable, all are kept.\n  public getKeepFunc(): undefined | UIRowFunc<boolean> {\n    return undefined;\n  }\n\n  // By default, no special row id for skip rows is needed.\n  public getSkipRowId(): number {\n    throw new Error('no skip row id defined');\n  }\n\n  /**\n   * Returns the list of all rowIds in this table, in unspecified and unstable order. Equivalent\n   * to getColValues('id').\n   */\n  public getRowIds(): ReadonlyArray<number> {\n    return this._rowIdCol;\n  }\n\n  /**\n   * Sort and returns the list of all rowIds in this table.\n   */\n  public getSortedRowIds(): number[] {\n    return this._rowIdCol.slice(0).sort((a, b) => a - b);\n  }\n\n  /**\n   * Returns true if cells may contain multiple versions (e.g. in diffs).\n   */\n  public mayHaveVersions() {\n    return false;\n  }\n\n  /**\n   * Returns the list of colIds in this table, including 'id'.\n   */\n  public getColIds(): string[] {\n    return Array.from(this._columns.keys());\n  }\n\n  /**\n   * Returns an unsorted list of all values in the given column. With no intervening actions,\n   * all arrays returned by getColValues() and getRowIds() are parallel to each other, i.e. the\n   * values at the same index correspond to the same record.\n   */\n  public getColValues(colId: string): ReadonlyArray<CellValue>|undefined {\n    const colData = this._columns.get(colId);\n    return colData ? colData.values : undefined;\n  }\n\n  /**\n   * Returns a limited-sized set of distinct values from a column. If count is given, limits how many\n   * distinct values are returned.\n   */\n  public getDistinctValues(colId: string, count: number = Infinity): Set<CellValue>|undefined {\n    const valColumn = this.getColValues(colId);\n    if (!valColumn) { return undefined; }\n    return getDistinctValues(valColumn, count);\n  }\n\n  /**\n   * Return data in TableDataAction form ['TableData', tableId, [...rowIds], {...}]\n   * Optionally takes a list of row ids to return data from. If a row id is\n   * not actually present in the table, a row of nulls will be returned for it.\n   */\n  public getTableDataAction(desiredRowIds?: number[],\n                            colIds?: string[]): TableDataAction {\n    colIds = colIds || this.getColIds();\n    const colIdSet = new Set<string>(colIds);\n    const rowIds = desiredRowIds || this.getRowIds();\n    let bulkColValues: {[colId: string]: CellValue[]};\n    const colArray = this._colArray.filter(({colId}) => colIdSet.has(colId));\n    if (desiredRowIds) {\n      const len = rowIds.length;\n      bulkColValues = {};\n      for (const colId of colIds) { bulkColValues[colId] = Array(len); }\n      for (let i = 0; i < len; i++) {\n        const index = this._rowMap.get(rowIds[i]);\n        for (const {colId, values} of colArray) {\n          const value = (index === undefined) ? null : values[index];\n          bulkColValues[colId][i] = value;\n        }\n      }\n    } else {\n      bulkColValues = fromPairs(\n        colIds\n          .filter(colId => colId !== 'id')\n          .map(colId => [colId, this.getColValues(colId)! as CellValue[]]));\n    }\n    return ['TableData',\n            this.tableId,\n            rowIds as number[],\n            bulkColValues];\n  }\n\n  public getBulkAddRecord(desiredRowIds?: number[]): BulkAddRecord {\n    const tableData = this.getTableDataAction(desiredRowIds?.sort((a, b) => a - b));\n    return [\n      'BulkAddRecord', tableData[1], tableData[2], tableData[3],\n    ];\n  }\n\n  /**\n   * Returns the given columns type, if the column exists, or undefined otherwise.\n   */\n  public getColType(colId: string): string|undefined {\n    const colData = this._columns.get(colId);\n    return colData ? colData.type : undefined;\n  }\n\n  /**\n   * Builds and returns a record object for the given rowId.\n   */\n  public getRecord(rowId: number): undefined | RowRecord {\n    const index = this._rowMap.get(rowId);\n    if (index === undefined) { return undefined; }\n    const ret: RowRecord = { id: this._rowIdCol[index] };\n    for (const colData of this._colArray) {\n      ret[colData.colId] = colData.values[index];\n    }\n    return ret;\n  }\n\n  /**\n   * Builds and returns the list of all records on this table, in unspecified and unstable order.\n   */\n  public getRecords(): RowRecord[] {\n    const records: RowRecord[] = this._rowIdCol.map((id) => ({ id }));\n    for (const {colId, values} of this._colArray) {\n      for (let i = 0; i < records.length; i++) {\n        records[i][colId] = values[i];\n      }\n    }\n    return records;\n  }\n\n  public filterRowIds(properties: {[key: string]: any}): number[] {\n    return this._filterRowIndices(properties).map(i => this._rowIdCol[i]);\n  }\n\n  /**\n   * Builds and returns the list of records in this table that match the given properties object.\n   * Properties may include 'id' and any table columns. Returned records are not sorted.\n   */\n  public filterRecords(properties: {[key: string]: any}): RowRecord[] {\n    const rowIndices: number[] = this._filterRowIndices(properties);\n\n    // Convert the array of indices to an array of RowRecords.\n    const records: RowRecord[] = rowIndices.map(i => ({id: this._rowIdCol[i]}));\n    for (const {colId, values} of this._colArray) {\n      for (let i = 0; i < records.length; i++) {\n        records[i][colId] = values[rowIndices[i]];\n      }\n    }\n    return records;\n  }\n\n  /**\n   * Returns the rowId in the table where colValue is found in the column with the given colId.\n   */\n  public findRow(colId: string, colValue: any): number {\n    const colData = this._columns.get(colId);\n    if (!colData) {\n      return 0;\n    }\n    const index = colData.values.indexOf(colValue);\n    return index < 0 ? 0 : this._rowIdCol[index];\n  }\n\n  /**\n   * Returns the first rowId matching the given filters, or 0 if no match. If there are multiple\n   * matches, it is unspecified which will be returned.\n   */\n  public findMatchingRowId(properties: {[key: string]: CellValue | undefined}): number {\n    const props = Object.keys(properties).map(p => ({col: this._columns.get(p)!, value: properties[p]}));\n    if (!props.every((p) => p.col)) {\n      return 0;\n    }\n    return this._rowIdCol.find((id, i) =>\n      props.every((p) => isEqual(p.col.values[i], p.value))\n    ) || 0;\n  }\n\n  /**\n   * Applies a DocAction received from the server; returns true, or false if it was skipped.\n   */\n  public receiveAction(action: DocAction): boolean {\n    if (this._isLoaded || isSchemaAction(action)) {\n      this.dispatchAction(action);\n      return true;\n    }\n    return false;\n  }\n\n  // ---- The following methods implement ActionDispatcher interface ----\n\n  protected onAddRecord(action: DocAction, tableId: string, rowId: number, colValues: ColValues): void {\n    if (this._rowMap.get(rowId) !== undefined) {\n      // If adding a record that already exists, act like an update.\n      // We rely on this behavior for distributing attachment\n      // metadata.\n      this.onUpdateRecord(action, tableId, rowId, colValues);\n      return;\n    }\n    const index: number = this._rowIdCol.length;\n    this._rowMap.set(rowId, index);\n    this._rowIdCol[index] = rowId;\n    for (const {colId, defl, values} of this._colArray) {\n      values[index] = colValues.hasOwnProperty(colId) ? colValues[colId] : defl;\n    }\n  }\n\n  protected onBulkAddRecord(action: DocAction, tableId: string, rowIds: number[], colValues: BulkColValues): void {\n    let destIndex: number = this._rowIdCol.length;\n    for (let i = 0; i < rowIds.length; i++) {\n      const srcIndex = this._rowMap.get(rowIds[i]);\n      if (srcIndex !== undefined) {\n        // If adding a record that already exists, act like an update.\n        // We rely on this behavior for distributing attachment\n        // metadata.\n        for (const colId in colValues) {\n          if (colValues.hasOwnProperty(colId)) {\n            const colData = this._columns.get(colId);\n            if (colData) {\n              colData.values[srcIndex] = colValues[colId][i];\n            }\n          }\n        }\n      } else {\n        this._rowMap.set(rowIds[i], destIndex);\n        this._rowIdCol[destIndex] = rowIds[i];\n        for (const {colId, defl, values} of this._colArray) {\n          values[destIndex] = colValues.hasOwnProperty(colId) ? colValues[colId][i] : defl;\n        }\n        destIndex++;\n      }\n    }\n  }\n\n  protected onRemoveRecord(action: DocAction, tableId: string, rowId: number): void {\n    // Note that in this implementation, delete + undo will reorder the storage and the ordering\n    // of rows returned getRowIds() and similar methods.\n    const index = this._rowMap.get(rowId);\n    if (index !== undefined) {\n      const last: number = this._rowIdCol.length - 1;\n      // We keep the column-wise arrays dense by moving the last element into the freed-up spot.\n      for (const {values} of this._columns.values()) {    // This adjusts _rowIdCol too.\n        values[index] = values[last];\n        values.pop();\n      }\n      this._rowMap.set(this._rowIdCol[index], index);\n      this._rowMap.delete(rowId);\n    }\n  }\n\n  protected onUpdateRecord(action: DocAction, tableId: string, rowId: number, colValues: ColValues): void {\n    const index = this._rowMap.get(rowId);\n    if (index !== undefined) {\n      for (const colId in colValues) {\n        if (colValues.hasOwnProperty(colId)) {\n          const colData = this._columns.get(colId);\n          if (colData) {\n            colData.values[index] = colValues[colId];\n          }\n        }\n      }\n    }\n  }\n\n  protected onBulkUpdateRecord(action: DocAction, tableId: string, rowIds: number[], colValues: BulkColValues): void {\n    for (let i = 0; i < rowIds.length; i++) {\n      const index = this._rowMap.get(rowIds[i]);\n      if (index !== undefined) {\n        for (const colId in colValues) {\n          if (colValues.hasOwnProperty(colId)) {\n            const colData = this._columns.get(colId);\n            if (colData) {\n              colData.values[index] = colValues[colId][i];\n            }\n          }\n        }\n      }\n    }\n  }\n\n  protected onReplaceTableData(action: DocAction, tableId: string, rowIds: number[], colValues: BulkColValues): void {\n    this.loadData(action as ReplaceTableData);\n  }\n\n  protected onAddColumn(action: DocAction, tableId: string, colId: string, colInfo: ColInfo): void {\n    if (this._columns.has(colId)) { return; }\n    const type = colInfo.type;\n    const defl = getDefaultForType(type);\n    const colData: ColData = { colId, type, defl, values: this._rowIdCol.map(() => defl) };\n    this._columns.set(colId, colData);\n    this._colArray.push(colData);\n  }\n\n  protected onRemoveColumn(action: DocAction, tableId: string, colId: string): void {\n    const colData = this._columns.get(colId);\n    if (!colData) { return; }\n    this._columns.delete(colId);\n    arrayRemove(this._colArray, colData);\n  }\n\n  protected onRenameColumn(action: DocAction, tableId: string, oldColId: string, newColId: string): void {\n    const colData = this._columns.get(oldColId);\n    if (colData) {\n      colData.colId = newColId;\n      this._columns.set(newColId, colData);\n      this._columns.delete(oldColId);\n    }\n  }\n\n  protected onModifyColumn(action: DocAction, tableId: string, oldColId: string, colInfo: ColInfo): void {\n    const colData = this._columns.get(oldColId);\n    if (colData && colInfo.hasOwnProperty('type')) {\n      colData.type = colInfo.type;\n      colData.defl = getDefaultForType(colInfo.type);\n    }\n  }\n\n  protected onRenameTable(action: DocAction, oldTableId: string, newTableId: string): void {\n    this._tableId = newTableId;\n  }\n\n  protected onAddTable(action: DocAction, tableId: string, columns: ColInfoWithId[]): void {\n    // A table processing its own addition is a noop\n  }\n\n  protected onRemoveTable(action: DocAction, tableId: string): void {\n    // Stop dispatching actions if we've been deleted. We might also want to clean up in the future.\n    this._isLoaded = false;\n  }\n\n  private _filterRowIndices(properties: {[key: string]: any}): number[] {\n    const rowIndices: number[] = [];\n    // Array of {col: arrayOfColValues, value: valueToMatch}\n    const props = Object.keys(properties).map(p => ({col: this._columns.get(p)!, value: properties[p]}));\n    this._rowIdCol.forEach((id, i) => {\n      // Collect the indices of the matching rows.\n      if (props.every((p) => isEqual(p.col.values[i], p.value))) {\n        rowIndices.push(i);\n      }\n    });\n    return rowIndices;\n  }\n}\n\n// A type safe record of a meta table with types as defined in schema.ts\n// '&' is used because declaring the id field and the index signature in one block gives a syntax error.\n// The second part is basically equivalent to SchemaTypes[TableId]\n// but TS sees that as incompatible with RowRecord and doesn't allow simple overrides in MetaTableData.\nexport type MetaRowRecord<TableId extends keyof SchemaTypes> =\n  { id: number } &\n  { [ColId in keyof SchemaTypes[TableId]]: SchemaTypes[TableId][ColId] & CellValue };\n\ntype MetaColId<TableId extends keyof SchemaTypes> = keyof MetaRowRecord<TableId> & string;\n\n/**\n * Behaves the same as TableData, but uses SchemaTypes for type safety of its columns.\n */\nexport class MetaTableData<TableId extends keyof SchemaTypes> extends TableData {\n  constructor(tableId: TableId, tableData: TableDataAction | null, colTypes: ColTypeMap) {\n    super(tableId, tableData, colTypes);\n  }\n\n  public getValue<ColId extends MetaColId<TableId>>(rowId: number, colId: ColId):\n    MetaRowRecord<TableId>[ColId] | undefined {\n    return super.getValue(rowId, colId) as any;\n  }\n\n  public getRecords(): Array<MetaRowRecord<TableId>> {\n    return super.getRecords() as any;\n  }\n\n  public getRecord(rowId: number): MetaRowRecord<TableId> | undefined {\n    return super.getRecord(rowId) as any;\n  }\n\n  public filterRecords(properties: Partial<MetaRowRecord<TableId>>): Array<MetaRowRecord<TableId>> {\n    return super.filterRecords(properties) as any;\n  }\n\n  public findMatchingRowId(properties: Partial<MetaRowRecord<TableId>>): number {\n    return super.findMatchingRowId(properties);\n  }\n\n  public getRowPropFunc<ColId extends MetaColId<TableId>>(\n    colId: ColId\n  ): UIRowFunc<MetaRowRecord<TableId>[ColId]> {\n    return super.getRowPropFunc(colId as any) as any;\n  }\n\n  public getColValues<ColId extends MetaColId<TableId>>(\n    colId: ColId\n  ): ReadonlyArray<MetaRowRecord<TableId>[ColId]> {\n    return super.getColValues(colId) as any;\n  }\n\n  public findRow<ColId extends MetaColId<TableId>>(\n    colId: ColId, colValue: MetaRowRecord<TableId>[ColId]\n  ): number {\n    return super.findRow(colId, colValue);\n  }\n}\n\nfunction reassignArray<T>(targetArray: T[], sourceArray: T[]): void {\n  targetArray.length = 0;\n  arraySplice(targetArray, 0, sourceArray);\n}\n","/*** THIS FILE IS AUTO-GENERATED BY core/sandbox/gen_js_schema.py ***/\n\nimport { GristObjCode } from \"app/plugin/GristData\";\n\n// tslint:disable:object-literal-key-quotes\n\nexport const SCHEMA_VERSION = 39;\n\nexport const schema = {\n\n  \"_grist_DocInfo\": {\n    docId               : \"Text\",\n    peers               : \"Text\",\n    basketId            : \"Text\",\n    schemaVersion       : \"Int\",\n    timezone            : \"Text\",\n    documentSettings    : \"Text\",\n  },\n\n  \"_grist_Tables\": {\n    tableId             : \"Text\",\n    primaryViewId       : \"Ref:_grist_Views\",\n    summarySourceTable  : \"Ref:_grist_Tables\",\n    onDemand            : \"Bool\",\n    rawViewSectionRef   : \"Ref:_grist_Views_section\",\n  },\n\n  \"_grist_Tables_column\": {\n    parentId            : \"Ref:_grist_Tables\",\n    parentPos           : \"PositionNumber\",\n    colId               : \"Text\",\n    type                : \"Text\",\n    widgetOptions       : \"Text\",\n    isFormula           : \"Bool\",\n    formula             : \"Text\",\n    label               : \"Text\",\n    description         : \"Text\",\n    untieColIdFromLabel : \"Bool\",\n    summarySourceCol    : \"Ref:_grist_Tables_column\",\n    displayCol          : \"Ref:_grist_Tables_column\",\n    visibleCol          : \"Ref:_grist_Tables_column\",\n    rules               : \"RefList:_grist_Tables_column\",\n    recalcWhen          : \"Int\",\n    recalcDeps          : \"RefList:_grist_Tables_column\",\n  },\n\n  \"_grist_Imports\": {\n    tableRef            : \"Ref:_grist_Tables\",\n    origFileName        : \"Text\",\n    parseFormula        : \"Text\",\n    delimiter           : \"Text\",\n    doublequote         : \"Bool\",\n    escapechar          : \"Text\",\n    quotechar           : \"Text\",\n    skipinitialspace    : \"Bool\",\n    encoding            : \"Text\",\n    hasHeaders          : \"Bool\",\n  },\n\n  \"_grist_External_database\": {\n    host                : \"Text\",\n    port                : \"Int\",\n    username            : \"Text\",\n    dialect             : \"Text\",\n    database            : \"Text\",\n    storage             : \"Text\",\n  },\n\n  \"_grist_External_table\": {\n    tableRef            : \"Ref:_grist_Tables\",\n    databaseRef         : \"Ref:_grist_External_database\",\n    tableName           : \"Text\",\n  },\n\n  \"_grist_TableViews\": {\n    tableRef            : \"Ref:_grist_Tables\",\n    viewRef             : \"Ref:_grist_Views\",\n  },\n\n  \"_grist_TabItems\": {\n    tableRef            : \"Ref:_grist_Tables\",\n    viewRef             : \"Ref:_grist_Views\",\n  },\n\n  \"_grist_TabBar\": {\n    viewRef             : \"Ref:_grist_Views\",\n    tabPos              : \"PositionNumber\",\n  },\n\n  \"_grist_Pages\": {\n    viewRef             : \"Ref:_grist_Views\",\n    indentation         : \"Int\",\n    pagePos             : \"PositionNumber\",\n  },\n\n  \"_grist_Views\": {\n    name                : \"Text\",\n    type                : \"Text\",\n    layoutSpec          : \"Text\",\n  },\n\n  \"_grist_Views_section\": {\n    tableRef            : \"Ref:_grist_Tables\",\n    parentId            : \"Ref:_grist_Views\",\n    parentKey           : \"Text\",\n    title               : \"Text\",\n    description         : \"Text\",\n    defaultWidth        : \"Int\",\n    borderWidth         : \"Int\",\n    theme               : \"Text\",\n    options             : \"Text\",\n    chartType           : \"Text\",\n    layoutSpec          : \"Text\",\n    filterSpec          : \"Text\",\n    sortColRefs         : \"Text\",\n    linkSrcSectionRef   : \"Ref:_grist_Views_section\",\n    linkSrcColRef       : \"Ref:_grist_Tables_column\",\n    linkTargetColRef    : \"Ref:_grist_Tables_column\",\n    embedId             : \"Text\",\n    rules               : \"RefList:_grist_Tables_column\",\n  },\n\n  \"_grist_Views_section_field\": {\n    parentId            : \"Ref:_grist_Views_section\",\n    parentPos           : \"PositionNumber\",\n    colRef              : \"Ref:_grist_Tables_column\",\n    width               : \"Int\",\n    widgetOptions       : \"Text\",\n    displayCol          : \"Ref:_grist_Tables_column\",\n    visibleCol          : \"Ref:_grist_Tables_column\",\n    filter              : \"Text\",\n    rules               : \"RefList:_grist_Tables_column\",\n  },\n\n  \"_grist_Validations\": {\n    formula             : \"Text\",\n    name                : \"Text\",\n    tableRef            : \"Int\",\n  },\n\n  \"_grist_REPL_Hist\": {\n    code                : \"Text\",\n    outputText          : \"Text\",\n    errorText           : \"Text\",\n  },\n\n  \"_grist_Attachments\": {\n    fileIdent           : \"Text\",\n    fileName            : \"Text\",\n    fileType            : \"Text\",\n    fileSize            : \"Int\",\n    fileExt             : \"Text\",\n    imageHeight         : \"Int\",\n    imageWidth          : \"Int\",\n    timeDeleted         : \"DateTime\",\n    timeUploaded        : \"DateTime\",\n  },\n\n  \"_grist_Triggers\": {\n    tableRef            : \"Ref:_grist_Tables\",\n    eventTypes          : \"ChoiceList\",\n    isReadyColRef       : \"Ref:_grist_Tables_column\",\n    actions             : \"Text\",\n    label               : \"Text\",\n    memo                : \"Text\",\n    enabled             : \"Bool\",\n  },\n\n  \"_grist_ACLRules\": {\n    resource            : \"Ref:_grist_ACLResources\",\n    permissions         : \"Int\",\n    principals          : \"Text\",\n    aclFormula          : \"Text\",\n    aclColumn           : \"Ref:_grist_Tables_column\",\n    aclFormulaParsed    : \"Text\",\n    permissionsText     : \"Text\",\n    rulePos             : \"PositionNumber\",\n    userAttributes      : \"Text\",\n    memo                : \"Text\",\n  },\n\n  \"_grist_ACLResources\": {\n    tableId             : \"Text\",\n    colIds              : \"Text\",\n  },\n\n  \"_grist_ACLPrincipals\": {\n    type                : \"Text\",\n    userEmail           : \"Text\",\n    userName            : \"Text\",\n    groupName           : \"Text\",\n    instanceId          : \"Text\",\n  },\n\n  \"_grist_ACLMemberships\": {\n    parent              : \"Ref:_grist_ACLPrincipals\",\n    child               : \"Ref:_grist_ACLPrincipals\",\n  },\n\n  \"_grist_Filters\": {\n    viewSectionRef      : \"Ref:_grist_Views_section\",\n    colRef              : \"Ref:_grist_Tables_column\",\n    filter              : \"Text\",\n    pinned              : \"Bool\",\n  },\n\n  \"_grist_Cells\": {\n    tableRef            : \"Ref:_grist_Tables\",\n    colRef              : \"Ref:_grist_Tables_column\",\n    rowId               : \"Int\",\n    root                : \"Bool\",\n    parentId            : \"Ref:_grist_Cells\",\n    type                : \"Int\",\n    content             : \"Text\",\n    userRef             : \"Text\",\n  },\n\n};\n\nexport interface SchemaTypes {\n\n  \"_grist_DocInfo\": {\n    docId: string;\n    peers: string;\n    basketId: string;\n    schemaVersion: number;\n    timezone: string;\n    documentSettings: string;\n  };\n\n  \"_grist_Tables\": {\n    tableId: string;\n    primaryViewId: number;\n    summarySourceTable: number;\n    onDemand: boolean;\n    rawViewSectionRef: number;\n  };\n\n  \"_grist_Tables_column\": {\n    parentId: number;\n    parentPos: number;\n    colId: string;\n    type: string;\n    widgetOptions: string;\n    isFormula: boolean;\n    formula: string;\n    label: string;\n    description: string;\n    untieColIdFromLabel: boolean;\n    summarySourceCol: number;\n    displayCol: number;\n    visibleCol: number;\n    rules: [GristObjCode.List, ...number[]]|null;\n    recalcWhen: number;\n    recalcDeps: [GristObjCode.List, ...number[]]|null;\n  };\n\n  \"_grist_Imports\": {\n    tableRef: number;\n    origFileName: string;\n    parseFormula: string;\n    delimiter: string;\n    doublequote: boolean;\n    escapechar: string;\n    quotechar: string;\n    skipinitialspace: boolean;\n    encoding: string;\n    hasHeaders: boolean;\n  };\n\n  \"_grist_External_database\": {\n    host: string;\n    port: number;\n    username: string;\n    dialect: string;\n    database: string;\n    storage: string;\n  };\n\n  \"_grist_External_table\": {\n    tableRef: number;\n    databaseRef: number;\n    tableName: string;\n  };\n\n  \"_grist_TableViews\": {\n    tableRef: number;\n    viewRef: number;\n  };\n\n  \"_grist_TabItems\": {\n    tableRef: number;\n    viewRef: number;\n  };\n\n  \"_grist_TabBar\": {\n    viewRef: number;\n    tabPos: number;\n  };\n\n  \"_grist_Pages\": {\n    viewRef: number;\n    indentation: number;\n    pagePos: number;\n  };\n\n  \"_grist_Views\": {\n    name: string;\n    type: string;\n    layoutSpec: string;\n  };\n\n  \"_grist_Views_section\": {\n    tableRef: number;\n    parentId: number;\n    parentKey: string;\n    title: string;\n    description: string;\n    defaultWidth: number;\n    borderWidth: number;\n    theme: string;\n    options: string;\n    chartType: string;\n    layoutSpec: string;\n    filterSpec: string;\n    sortColRefs: string;\n    linkSrcSectionRef: number;\n    linkSrcColRef: number;\n    linkTargetColRef: number;\n    embedId: string;\n    rules: [GristObjCode.List, ...number[]]|null;\n  };\n\n  \"_grist_Views_section_field\": {\n    parentId: number;\n    parentPos: number;\n    colRef: number;\n    width: number;\n    widgetOptions: string;\n    displayCol: number;\n    visibleCol: number;\n    filter: string;\n    rules: [GristObjCode.List, ...number[]]|null;\n  };\n\n  \"_grist_Validations\": {\n    formula: string;\n    name: string;\n    tableRef: number;\n  };\n\n  \"_grist_REPL_Hist\": {\n    code: string;\n    outputText: string;\n    errorText: string;\n  };\n\n  \"_grist_Attachments\": {\n    fileIdent: string;\n    fileName: string;\n    fileType: string;\n    fileSize: number;\n    fileExt: string;\n    imageHeight: number;\n    imageWidth: number;\n    timeDeleted: number;\n    timeUploaded: number;\n  };\n\n  \"_grist_Triggers\": {\n    tableRef: number;\n    eventTypes: [GristObjCode.List, ...string[]]|null;\n    isReadyColRef: number;\n    actions: string;\n    label: string;\n    memo: string;\n    enabled: boolean;\n  };\n\n  \"_grist_ACLRules\": {\n    resource: number;\n    permissions: number;\n    principals: string;\n    aclFormula: string;\n    aclColumn: number;\n    aclFormulaParsed: string;\n    permissionsText: string;\n    rulePos: number;\n    userAttributes: string;\n    memo: string;\n  };\n\n  \"_grist_ACLResources\": {\n    tableId: string;\n    colIds: string;\n  };\n\n  \"_grist_ACLPrincipals\": {\n    type: string;\n    userEmail: string;\n    userName: string;\n    groupName: string;\n    instanceId: string;\n  };\n\n  \"_grist_ACLMemberships\": {\n    parent: number;\n    child: number;\n  };\n\n  \"_grist_Filters\": {\n    viewSectionRef: number;\n    colRef: number;\n    filter: string;\n    pinned: boolean;\n  };\n\n  \"_grist_Cells\": {\n    tableRef: number;\n    colRef: number;\n    rowId: number;\n    root: boolean;\n    parentId: number;\n    type: number;\n    content: string;\n    userRef: string;\n  };\n\n}\n","/**\n * Clipboard component manages the copy/cut/paste events by capturing these events from the browser,\n * managing their state, and exposing an API to other components to get/set the data.\n *\n * Because of a lack of standardization of ClipboardEvents between browsers, the way Clipboard\n * captures the events is by creating a hidden textarea element that's always focused with some text\n * selected. Here is a good write-up of this:\n * https://www.lucidchart.com/techblog/2014/12/02/definitive-guide-copying-pasting-javascript/\n *\n * When ClipboardEvent is detected, Clipboard captures the event and calls the corresponding\n * copy/cut/paste/input command actions, which will get called on the appropriate component.\n *\n * Usage:\n *    Components need to register copy/cut/paste actions with command.js:\n *      .copy() should return @pasteObj (defined below).\n *      .paste(plainText, [cutSelection]) should take a plainText value and an optional cutSelection\n *      parameter which will specify the selection that should be cleared as part of paste.\n *      .input(char) should take a single input character and will be called when the user types a\n *      visible character (useful if component wants to interpret typing into a cell, for example).\n */\n\n/**\n * Paste object that should be returned by implementation of `copy`.\n *\n * @typedef pasteObj {{\n *    docName: string,\n *    tableId: string,\n *    data:    object,\n *    selection: object\n * }}\n */\n\n\n\n/* global window, document */\n\nvar {getHumanKey, isMac} = require('app/client/components/commands');\nvar {copyToClipboard, readDataFromClipboard} = require('app/client/lib/clipboardUtils');\nvar {FocusLayer} = require('app/client/lib/FocusLayer');\nvar {makeT} = require('app/client/lib/localization');\n\nvar {tsvDecode} = require('app/common/tsvFormat');\nvar {ShortcutKey, ShortcutKeyContent} = require('app/client/ui/ShortcutKey');\nvar {confirmModal} = require('app/client/ui2018/modals');\nvar {styled} = require('grainjs');\n\nvar commands = require('./commands');\nvar dom = require('../lib/dom');\nvar Base = require('./Base');\nvar tableUtil = require('../lib/tableUtil');\n\nconst t = makeT('Clipboard');\n\nfunction Clipboard(app) {\n  Base.call(this, null);\n  this._app = app;\n  this.copypasteField = this.autoDispose(dom('textarea.copypaste.mousetrap', ''));\n  this.timeoutId = null;\n\n  this.onEvent(this.copypasteField, 'input', function(elem, event) {\n    var value = elem.value;\n    elem.value = '';\n    commands.allCommands.input.run(value);\n    return false;\n  });\n  this.onEvent(this.copypasteField, 'copy',  this._onCopy);\n  this.onEvent(this.copypasteField, 'cut',   this._onCut);\n  this.onEvent(this.copypasteField, 'paste', this._onPaste);\n\n  document.body.appendChild(this.copypasteField);\n\n  FocusLayer.create(this, {\n    defaultFocusElem: this.copypasteField,\n    allowFocus: allowFocus,\n    onDefaultFocus: () => {\n      this.copypasteField.value = ' ';\n      this.copypasteField.select();\n      this._app.trigger('clipboard_focus');\n    },\n    onDefaultBlur: () => {\n      this._app.trigger('clipboard_blur');\n    },\n  });\n\n  // Expose the grabber as a global to allow upload from tests to explicitly restore focus\n  window.gristClipboardGrabFocus = () => FocusLayer.grabFocus();\n\n  // Some bugs may prevent Clipboard from re-grabbing focus. To limit the impact of such bugs on\n  // the user, recover from a bad state in mousedown events. (At the moment of this comment, all\n  // such known bugs are fixed.)\n  this.onEvent(window, 'mousedown', (ev) => {\n    if (!document.activeElement || document.activeElement === document.body) {\n      FocusLayer.grabFocus();\n    }\n  });\n\n  // In the event of a cut a callback is provided by the viewsection that is the target of the cut.\n  // When called it returns the additional removal action needed for a cut.\n  this._cutCallback = null;\n  // The plaintext content of the cut callback. Used to verify that we are pasting the results\n  // of the cut, rather than new data from outside.\n  this._cutData = null;\n\n  this.autoDispose(commands.createGroup(Clipboard.commands, this, true));\n}\nBase.setBaseFor(Clipboard);\n\nClipboard.commands = {\n  contextMenuCopy: function() { this._doContextMenuCopy(); },\n  contextMenuCut: function() { this._doContextMenuCut(); },\n  contextMenuPaste: function() { this._doContextMenuPaste(); },\n};\n\n/**\n * Internal helper fired on `copy` events. If a callback was registered from a component, calls the\n * callback to get selection data and puts it on the clipboard.\n */\nClipboard.prototype._onCopy = function(elem, event) {\n  event.preventDefault();\n\n  let pasteObj = commands.allCommands.copy.run();\n\n  this._setCBdata(pasteObj, event.originalEvent.clipboardData);\n};\n\nClipboard.prototype._doContextMenuCopy = function() {\n  let pasteObj = commands.allCommands.copy.run();\n\n  this._copyToClipboard(pasteObj, 'copy');\n};\n\nClipboard.prototype._onCut = function(elem, event) {\n  event.preventDefault();\n\n  let pasteObj = commands.allCommands.cut.run();\n\n  this._setCBdata(pasteObj, event.originalEvent.clipboardData);\n};\n\nClipboard.prototype._doContextMenuCut = function() {\n  let pasteObj = commands.allCommands.cut.run();\n\n  this._copyToClipboard(pasteObj, 'cut');\n};\n\nClipboard.prototype._setCBdata = function(pasteObj, clipboardData) {\n  if (!pasteObj) { return; }\n\n  const plainText = tableUtil.makePasteText(pasteObj.data, pasteObj.selection);\n  clipboardData.setData('text/plain', plainText);\n  const htmlText = tableUtil.makePasteHtml(pasteObj.data, pasteObj.selection);\n  clipboardData.setData('text/html', htmlText);\n\n  this._setCutCallback(pasteObj, plainText);\n};\n\nClipboard.prototype._copyToClipboard = async function(pasteObj, action) {\n  if (!pasteObj) { return; }\n\n  const plainText = tableUtil.makePasteText(pasteObj.data, pasteObj.selection);\n  let data;\n  if (typeof ClipboardItem === 'function') {\n    const htmlText = tableUtil.makePasteHtml(pasteObj.data, pasteObj.selection);\n    // eslint-disable-next-line no-undef\n    data = new ClipboardItem({\n      // eslint-disable-next-line no-undef\n      'text/plain': new Blob([plainText], {type: 'text/plain'}),\n      // eslint-disable-next-line no-undef\n      'text/html': new Blob([htmlText], {type: 'text/html'}),\n    });\n  } else {\n    data = plainText;\n  }\n\n  try {\n    await copyToClipboard(data);\n  } catch {\n    showUnavailableMenuCommandModal(action);\n    return;\n  }\n\n  this._setCutCallback(pasteObj, plainText);\n};\n\n/**\n * Sets the cut callback from the `pasteObj` if one exists. Otherwise clears the\n * cut callback.\n *\n * The callback is called on paste, and only if the pasted data matches the `cutData`\n * that was cut from within Grist. The callback handles removal of the data that was\n * cut.\n */\nClipboard.prototype._setCutCallback = function(pasteObj, cutData) {\n  if (pasteObj.cutCallback) {\n    this._cutCallback = pasteObj.cutCallback;\n    this._cutData = cutData;\n  } else {\n    this._cutCallback = null;\n    this._cutData = null;\n  }\n};\n\n/**\n * Internal helper fired on `paste` events. If a callback was registered from a component, calls the\n * callback with data from the clipboard.\n */\nClipboard.prototype._onPaste = function(elem, event) {\n  event.preventDefault();\n  const cb = event.originalEvent.clipboardData;\n  const plainText = cb.getData('text/plain');\n  const htmlText = cb.getData('text/html');\n  const pasteData = getPasteData(plainText, htmlText);\n  this._doPaste(pasteData, plainText);\n};\n\nvar FOCUS_TARGET_TAGS = {\n  'INPUT': true,\n  'TEXTAREA': true,\n  'SELECT': true,\n  'IFRAME': true,\n};\n\nClipboard.prototype._doContextMenuPaste = async function() {\n  let clipboardItem;\n  try {\n    clipboardItem = (await readDataFromClipboard())?.[0];\n  } catch {\n    showUnavailableMenuCommandModal('paste');\n    return;\n  }\n  const plainText = await getTextFromClipboardItem(clipboardItem, 'text/plain');\n  const htmlText = await getTextFromClipboardItem(clipboardItem, 'text/html');\n  const pasteData = getPasteData(plainText, htmlText);\n  this._doPaste(pasteData, plainText);\n};\n\nClipboard.prototype._doPaste = function(pasteData, plainText) {\n  console.log(this._cutData, plainText, this._cutCallback);\n  if (this._cutData === plainText) {\n    if (this._cutCallback) {\n      // Cuts should only be possible on the first paste after a cut and only if the data being\n      // pasted matches the data that was cut.\n      commands.allCommands.paste.run(pasteData, this._cutCallback);\n    }\n  } else {\n    this._cutData = null;\n    commands.allCommands.paste.run(pasteData, null);\n  }\n  // The cut callback should only be usable once so it needs to be cleared after every paste.\n  this._cutCallback = null;\n}\n\n/**\n * Returns data formatted as a 2D array of strings, suitable for pasting within Grist.\n *\n * Grist stores both text/html and text/plain when copying data. When pasting back, we first\n * check if text/html exists (should exist for Grist and other spreadsheet software), and fall\n * back to text/plain otherwise.\n */\nfunction getPasteData(plainText, htmlText) {\n  try {\n    return tableUtil.parsePasteHtml(htmlText);\n  } catch (e) {\n    if (plainText === '' || plainText.charCodeAt(0) === 0xFEFF) {\n      return [['']];\n    } else {\n      return tsvDecode(plainText.replace(/\\r\\n?/g, \"\\n\").trimEnd());\n    }\n  }\n}\n\n/**\n * Returns clipboard data of the given `type` from `clipboardItem` as text.\n *\n * Returns an empty string if `clipboardItem` is nullish or no data exists\n * for the given `type`.\n */\nasync function getTextFromClipboardItem(clipboardItem, type) {\n  if (!clipboardItem) { return ''; }\n\n  try {\n    return (await clipboardItem.getType(type)).text();\n  } catch {\n    // No clipboard data exists for the MIME type.\n    return '';\n  }\n}\n\n/**\n * Helper to determine if the currently active element deserves to keep its own focus, and capture\n * copy-paste events. Besides inputs and textareas, any element can be marked to be a valid\n * copy-paste target by adding 'clipboard_focus' class to it.\n */\nfunction allowFocus(elem) {\n  return elem && (FOCUS_TARGET_TAGS.hasOwnProperty(elem.tagName) ||\n    elem.hasAttribute(\"tabindex\") ||\n    elem.classList.contains('clipboard_focus'));\n}\n\nClipboard.allowFocus = allowFocus;\n\nfunction showUnavailableMenuCommandModal(action) {\n  let keys;\n  switch (action) {\n    case 'cut': {\n      keys = 'Mod+X'\n      break;\n    }\n    case 'copy': {\n      keys = 'Mod+C'\n      break;\n    }\n    case 'paste': {\n      keys = 'Mod+V'\n      break;\n    }\n    default: {\n      throw new Error(`Clipboard: unrecognized action ${action}`);\n    }\n  }\n\n  confirmModal(\n    t(\"Unavailable Command\"),\n    t(\"Got it\"),\n    () => {},\n    {\n      explanation: cssModalContent(\n        t(\n          'The {{action}} menu command is not available in this browser. You can still {{action}}' +\n          ' by using the keyboard shortcut {{shortcut}}.',\n          {\n            action,\n            shortcut: ShortcutKey(ShortcutKeyContent(getHumanKey(keys, isMac))),\n          }\n        ),\n      ),\n      hideCancel: true,\n    },\n  );\n}\n\nmodule.exports = Clipboard;\n\nconst cssModalContent = styled('div', `\n  line-height: 18px;\n`);\n","const _             = require('underscore');\nconst ko            = require('knockout');\n\nconst dom           = require('app/client/lib/dom');\nconst kd            = require('app/client/lib/koDom');\nconst koDomScrolly  = require('app/client/lib/koDomScrolly');\nconst {renderAllRows} = require('app/client/components/Printing');\nconst {isNarrowScreen} = require('app/client/ui2018/cssVars');\n\nrequire('app/client/lib/koUtil'); // Needed for subscribeInit.\n\nconst Base          = require('./Base');\nconst BaseView      = require('./BaseView');\nconst selector      = require('./CellSelector');\nconst {CopySelection} = require('./CopySelection');\nconst RecordLayout  = require('./RecordLayout');\nconst commands      = require('./commands');\nconst tableUtil     = require('../lib/tableUtil');\nconst {FieldContextMenu} = require('../ui/FieldContextMenu');\nconst {RowContextMenu} = require('../ui/RowContextMenu');\nconst {parsePasteForView} = require(\"./BaseView2\");\nconst {descriptionInfoTooltip} = require(\"../ui/tooltips\");\n\n\n/**\n * DetailView component implements a list of record layouts.\n */\nfunction DetailView(gristDoc, viewSectionModel) {\n  BaseView.call(this, gristDoc, viewSectionModel, { 'addNewRow': true });\n\n  this.cellSelector = selector.CellSelector.create(this, this);\n\n  this.viewFields = gristDoc.docModel.viewFields;\n  this._isSingle = (this.viewSection.parentKey.peek() === 'single');\n\n  //--------------------------------------------------\n  // Create and attach the DOM for the view.\n  this.recordLayout = this.autoDispose(RecordLayout.create({\n    viewSection: this.viewSection,\n    buildFieldDom: this.buildFieldDom.bind(this),\n    buildRowContextMenu : this.buildRowContextMenu.bind(this),\n    buildFieldContextMenu : this.buildFieldContextMenu.bind(this),\n    resizeCallback: () => {\n      if (!this._isSingle) {\n        this.scrolly().updateSize();\n        // Keep the cursor in view if the scrolly height resets.\n        // TODO: Ideally the original position should be kept in scroll view.\n        this.scrolly().scrollRowIntoView(this.cursor.rowIndex.peek());\n      }\n    }\n  }));\n\n  this.scrolly = this.autoDispose(ko.computed(() => {\n    if (!this.recordLayout.isEditingLayout() && !this._isSingle) {\n      return koDomScrolly.getInstance(this.viewData);\n    }\n  }));\n\n  // Reset scrolly heights when record theme changes, since it affects heights.\n  this.autoDispose(this.viewSection.themeDef.subscribe(() => {\n    var scrolly = this.scrolly();\n    if (scrolly) {\n      setTimeout(function() { scrolly.resetHeights(); }, 0);\n    }\n  }));\n\n  this.layoutBoxIdx = ko.observable(0);\n\n  //--------------------------------------------------\n  if (this._isSingle) {\n    this.detailRecord = this.autoDispose(this.tableModel.createFloatingRowModel());\n    this._updateFloatingRow();\n    this.autoDispose(this.cursor.rowIndex.subscribe(this._updateFloatingRow, this));\n    this.autoDispose(this.viewData.subscribe(this._updateFloatingRow, this));\n  } else {\n    this.detailRecord = null;\n  }\n\n  //--------------------------------------------------\n  // Construct DOM\n  this.scrollPane = null;\n  this.viewPane = this.autoDispose(this.buildDom());\n\n  //--------------------------------------------------\n  // Set up DOM event handling.\n  this._twoLastFieldIdsSelected = [null, null];\n\n  // Clicking on a detail field selects that field.\n  this.onEvent(this.viewPane, 'mousedown', '.g_record_detail_el', function(elem, event) {\n    this.viewSection.hasFocus(true);\n    var rowModel = this.recordLayout.getContainingRow(elem, this.viewPane);\n    var field = this.recordLayout.getContainingField(elem, this.viewPane);\n    commands.allCommands.setCursor.run(rowModel, field);\n    this._twoLastFieldIdsSelected.unshift(field.id());\n    this._twoLastFieldIdsSelected.pop();\n  });\n\n  // Double-clicking on a field also starts editing the field.\n  this.onEvent(this.viewPane, 'dblclick', '.g_record_detail_el', function(elem, event) {\n    this.activateEditorAtCursor();\n  });\n\n  // We authorize single click only on the value to avoid conflict with tooltip\n  this.onEvent(this.viewPane, 'click', '.g_record_detail_value', function(elem, event) {\n    var field = this.recordLayout.getContainingField(elem, this.viewPane);\n    if (\n      this._twoLastFieldIdsSelected[0] === this._twoLastFieldIdsSelected[1]\n      && !isNarrowScreen()\n      && this._canSingleClick(field)\n    ) {\n      this.activateEditorAtCursor();\n    }\n  });\n\n  //--------------------------------------------------\n  // Instantiate CommandGroups for the different modes.\n  this.autoDispose(commands.createGroup(DetailView.generalCommands, this, this.viewSection.hasFocus));\n  this.autoDispose(commands.createGroup(DetailView.fieldCommands, this, this.viewSection.hasFocus));\n  const hasSelection = this.autoDispose(ko.pureComputed(() =>\n    !this.cellSelector.isCurrentSelectType('') || this.copySelection()));\n  this.autoDispose(commands.createGroup(DetailView.selectionCommands, this, hasSelection));\n}\nBase.setBaseFor(DetailView);\n_.extend(DetailView.prototype, BaseView.prototype);\n\n\nDetailView.prototype.onTableLoaded = function() {\n  BaseView.prototype.onTableLoaded.call(this);\n  this._updateFloatingRow();\n\n  const scrolly = this.scrolly();\n  if (scrolly) {\n    scrolly.scrollToSavedPos(this.viewSection.lastScrollPos);\n  }\n};\n\nDetailView.prototype._updateFloatingRow = function() {\n  if (this.detailRecord) {\n    this.viewData.setFloatingRowModel(this.detailRecord, this.cursor.rowIndex.peek());\n  }\n};\n\n/**\n * DetailView commands.\n */\nDetailView.generalCommands = {\n  cursorUp: function() { this.cursor.fieldIndex(this.cursor.fieldIndex() - 1); },\n  cursorDown: function() { this.cursor.fieldIndex(this.cursor.fieldIndex() + 1); },\n  pageUp: function() { this.cursor.rowIndex(this.cursor.rowIndex() - 1); },\n  pageDown: function() { this.cursor.rowIndex(this.cursor.rowIndex() + 1); },\n  copy: function() { return this.copy(this.getSelection()); },\n  cut: function() { return this.cut(this.getSelection()); },\n  paste: function(pasteObj, cutCallback) {\n    return this.gristDoc.docData.bundleActions(null, () => this.paste(pasteObj, cutCallback));\n  },\n\n  editLayout: function() {\n    if (this.scrolly()) {\n      this.scrolly().scrollRowIntoView(this.cursor.rowIndex());\n    }\n    this.recordLayout.editLayout(this.cursor.rowIndex());\n  },\n};\n\nDetailView.fieldCommands = {\n  clearCardFields: function() { this._clearCardFields(); },\n  hideCardFields: function() { this._hideCardFields(); },\n};\n\nDetailView.selectionCommands = {\n  clearCopySelection: function() { this._clearCopySelection(); },\n  cancel: function() { this._clearSelection(); }\n};\n\n//----------------------------------------------------------------------\n\n\nDetailView.prototype.selectedRows = function() {\n  if (!this._isAddRow()) {\n    return [this.viewData.getRowId(this.cursor.rowIndex())];\n  }\n  return [];\n};\n\nDetailView.prototype.deleteRows = async function(rowIds) {\n const index = this.cursor.rowIndex();\n  try {\n    await BaseView.prototype.deleteRows.call(this, rowIds);\n  } finally {\n    this.cursor.rowIndex(index);\n  }\n};\n\n/**\n * Pastes the provided data at the current cursor.\n *\n * @param {Array} data - Array of arrays of data to be pasted. Each array represents a row.\n * i.e.  [[\"1-1\", \"1-2\", \"1-3\"],\n *        [\"2-1\", \"2-2\", \"2-3\"]]\n * @param {Function} cutCallback - If provided returns the record removal action needed\n *  for a cut.\n */\nDetailView.prototype.paste = async function(data, cutCallback) {\n  let pasteData = data[0][0];\n  let field = this.viewSection.viewFields().at(this.cursor.fieldIndex());\n  let isCompletePaste = (data.length === 1 && data[0].length === 1);\n\n  const richData = await parsePasteForView([[pasteData]], [field], this.gristDoc);\n  if (_.isEmpty(richData)) {\n    return;\n  }\n\n  // Array containing the paste action to which the cut action will be added if it exists.\n  const rowId = this.viewData.getRowId(this.cursor.rowIndex());\n  const action = (rowId === 'new') ? ['BulkAddRecord', [null], richData] :\n    ['BulkUpdateRecord', [rowId], richData];\n  const cursorPos = this.cursor.getCursorPos();\n\n  return this.sendPasteActions(isCompletePaste ? cutCallback : null,\n    this.prepTableActions([action]))\n    .then(results => {\n      // If a row was added, get its rowId from the action results.\n      const addRowId = (action[0] === 'BulkAddRecord' ? results[0][0] : null);\n      // Restore the cursor to the right rowId, even if it jumped.\n      this.cursor.setCursorPos({rowId: cursorPos.rowId === 'new' ? addRowId : cursorPos.rowId});\n      commands.allCommands.clearCopySelection.run();\n    });\n};\n\n/**\n * Returns a selection of the selected rows and cols.  In the case of DetailView this will just\n * be one row and one column as multiple cell selection is not supported.\n *\n * @returns {Object} CopySelection\n */\nDetailView.prototype.getSelection = function() {\n  return new CopySelection(\n    this.tableModel.tableData,\n    [this.viewData.getRowId(this.cursor.rowIndex())],\n    [this.viewSection.viewFields().at(this.cursor.fieldIndex())],\n    {}\n  );\n};\n\nDetailView.prototype.buildRowContextMenu = function(row) {\n  const rowOptions = this._getRowContextMenuOptions(row);\n  return RowContextMenu(rowOptions);\n}\n\nDetailView.prototype.buildFieldContextMenu = function(row) {\n  const rowOptions = this._getRowContextMenuOptions(row);\n  const fieldOptions = this._getFieldContextMenuOptions();\n  return FieldContextMenu(rowOptions, fieldOptions);\n}\n\n/**\n * Builds the DOM for the given field of the given row.\n * @param {MetaRowModel|String} field: Model for the field to render. For a new field being added,\n *    this may instead be an object with {isNewField:true, colRef, label, value}.\n * @param {DataRowModel} row: The record of data from which to render the given field.\n */\nDetailView.prototype.buildFieldDom = function(field, row) {\n  var self = this;\n  if (field.isNewField) {\n    return dom('div.g_record_detail_el.flexitem',\n      kd.cssClass(function() { return 'detail_theme_field_' + self.viewSection.themeDef(); }),\n      dom('div.g_record_detail_label_container',\n        dom('div.g_record_detail_label', kd.text(field.label)),\n        kd.scope(field.description, desc => desc ? descriptionInfoTooltip(desc, \"colmun\") : null)\n      ),\n      dom('div.g_record_detail_value'),\n    );\n  }\n\n  var isCellSelected = ko.pureComputed(function() {\n    return this.cursor.fieldIndex() === (field && field._index()) &&\n      this.cursor.rowIndex() === (row && row._index());\n  }, this);\n  var isCellActive = ko.pureComputed(function() {\n    return this.viewSection.hasFocus() && isCellSelected();\n  }, this);\n\n  // Whether the cell is part of an active copy-paste operation.\n  var isCopyActive = ko.computed(function() {\n    return self.copySelection() &&\n      self.copySelection().isCellSelected(row.getRowId(), field.colId());\n  });\n\n  this.autoDispose(isCellSelected.subscribe(yesNo => {\n    if (yesNo) {\n      var layoutBox = dom.findAncestor(fieldDom, '.layout_hbox');\n      this.layoutBoxIdx(_.indexOf(layoutBox.parentElement.childNodes, layoutBox));\n    }\n  }));\n  var fieldBuilder = this.fieldBuilders.at(field._index());\n  var fieldDom = dom('div.g_record_detail_el.flexitem',\n    dom.autoDispose(isCellSelected),\n    dom.autoDispose(isCellActive),\n    kd.cssClass(function() { return 'detail_theme_field_' + self.viewSection.themeDef(); }),\n    dom('div.g_record_detail_label_container',\n      dom('div.g_record_detail_label', kd.text(field.displayLabel)),\n      kd.scope(field.description, desc => desc ? descriptionInfoTooltip(desc, \"column\") : null)\n    ),\n    dom('div.g_record_detail_value',\n      kd.toggleClass('scissors', isCopyActive),\n      kd.toggleClass('record-add', row._isAddRow),\n      dom.autoDispose(isCopyActive),\n      fieldBuilder.buildDomWithCursor(row, isCellActive, isCellSelected)\n    )\n  );\n  return fieldDom;\n};\n\nDetailView.prototype.buildDom = function() {\n  return dom('div.flexvbox.flexitem',\n    // Add .detailview_single when showing a single card or while editing layout.\n    kd.toggleClass('detailview_single',\n      () => this._isSingle || this.recordLayout.isEditingLayout()),\n    // Add a marker class that editor is active - used for hiding context menu toggle.\n    kd.toggleClass('detailview_layout_editor', this.recordLayout.isEditingLayout),\n    kd.maybe(this.recordLayout.isEditingLayout, () => {\n      const rowId = this.viewData.getRowId(this.recordLayout.editIndex.peek());\n      const record = this.getRenderedRowModel(rowId);\n      return dom(\n        this.recordLayout.buildLayoutDom(record, true),\n        kd.cssClass(() => 'detail_theme_record_' + this.viewSection.themeDef()),\n        kd.cssClass('detailview_record_' + this.viewSection.parentKey.peek()),\n      );\n    }),\n    kd.maybe(() => !this.recordLayout.isEditingLayout(), () => {\n      if (!this._isSingle) {\n        return this.scrollPane = dom('div.detailview_scroll_pane.flexitem',\n          kd.scrollChildIntoView(this.cursor.rowIndex),\n          dom.onDispose(() => {\n            // Save the previous scroll values to the section.\n            if (this.scrolly()) {\n              this.viewSection.lastScrollPos = this.scrolly().getScrollPos();\n            }\n          }),\n          koDomScrolly.scrolly(this.viewData, {fitToWidth: true},\n            row => this.makeRecord(row)),\n\n          kd.maybe(this._isPrinting, () =>\n            renderAllRows(this.tableModel, this.sortedRows.getKoArray().peek(), row =>\n              this.makeRecord(row))\n          ),\n        );\n      } else {\n        return dom(\n          this.makeRecord(this.detailRecord),\n          kd.domData('itemModel', this.detailRecord),\n          kd.hide(() => this.cursor.rowIndex() === null)\n        );\n      }\n    }),\n  );\n};\n\n/** @inheritdoc */\nDetailView.prototype.buildTitleControls = function() {\n  // Hide controls if this is a card list section, or if the section has a scroll cursor link, since\n  // the controls can be confusing in this case.\n  // Note that the controls should still be visible with a filter link.\n  const showControls = ko.computed(() => {\n    if (!this._isSingle || this.recordLayout.layoutEditor()) { return false; }\n    const linkingState = this.viewSection.linkingState();\n    return !(linkingState && Boolean(linkingState.cursorPos));\n  });\n  return dom('div',\n    dom.autoDispose(showControls),\n\n    kd.toggleClass('record-layout-editor', this.recordLayout.layoutEditor),\n    kd.maybe(this.recordLayout.layoutEditor, (editor) => editor.buildEditorDom()),\n\n    kd.maybe(showControls, () => dom('div.grist-single-record__menu.flexhbox.flexnone',\n      dom('div.grist-single-record__menu__count.flexitem',\n        // Total should not include the add record row\n        kd.text(() => this._isAddRow() ? 'Add record' :\n          `${this.cursor.rowIndex() + 1} of ${this.getLastDataRowIndex() + 1}`)\n      ),\n      dom('div.btn-group.btn-group-xs',\n        dom('div.btn.btn-default.detail-left',\n          dom('span.glyphicon.glyphicon-chevron-left'),\n          dom.on('click', () => { this.cursor.rowIndex(this.cursor.rowIndex() - 1); }),\n          kd.toggleClass('disabled', () => this.cursor.rowIndex() === 0)\n        ),\n        dom('div.btn.btn-default.detail-right',\n          dom('span.glyphicon.glyphicon-chevron-right'),\n          dom.on('click', () => { this.cursor.rowIndex(this.cursor.rowIndex() + 1); }),\n          kd.toggleClass('disabled', () => this.cursor.rowIndex() >= this.viewData.all().length - 1)\n        )\n      ),\n      dom('div.btn-group.btn-group-xs.detail-add-grp',\n        dom('div.btn.btn-default.detail-add-btn',\n          dom('span.glyphicon.glyphicon-plus'),\n          dom.on('click', () => {\n            let addRowIndex = this.viewData.getRowIndex('new');\n            this.cursor.rowIndex(addRowIndex);\n          }),\n          kd.toggleClass('disabled', () => this.viewData.getRowId(this.cursor.rowIndex()) === 'new')\n        )\n      )\n    ))\n  );\n};\n\n\n/** @inheritdoc */\nDetailView.prototype.onResize = function() {\n  var scrolly = this.scrolly();\n  if (scrolly) {\n    scrolly.scheduleUpdateSize();\n  }\n};\n\n/** @inheritdoc */\nDetailView.prototype.onRowResize = function(rowModels) {\n  var scrolly = this.scrolly();\n  if (scrolly) {\n    scrolly.resetItemHeights(rowModels);\n  }\n};\n\nDetailView.prototype.makeRecord = function(record) {\n  return dom(\n    this.recordLayout.buildLayoutDom(record),\n    kd.cssClass(() => 'detail_theme_record_' + this.viewSection.themeDef()),\n    this.comparison ? kd.cssClass(() => {\n      const rowType = this.extraRows.getRowType(record.id());\n      return rowType && `diff-${rowType}` || '';\n    }) : null,\n    kd.toggleClass('active', () => (this.cursor.rowIndex() === record._index() && this.viewSection.hasFocus())),\n    kd.toggleClass('selected', () => (this.cursor.rowIndex() === record._index()  && !this.viewSection.hasFocus())),\n    // 'detailview_record_single' or 'detailview_record_detail' doesn't need to be an observable,\n    // since a change to parentKey would cause a separate call to makeRecord.\n    kd.cssClass('detailview_record_' + this.viewSection.parentKey.peek())\n  );\n};\n\n/**\n * Extends BaseView getRenderedRowModel. Called to obtain the rowModel for the given rowId.\n * Returns the rowModel if it is rendered in the current view type, otherwise returns null.\n */\nDetailView.prototype.getRenderedRowModel = function(rowId) {\n  if (this.detailRecord) {\n    return this.detailRecord.getRowId() === rowId ? this.detailRecord : null;\n  } else {\n    return this.viewData.getRowModel(rowId);\n  }\n};\n\n/**\n * Returns a boolean indicating whether the given index is the index of the add row.\n * Index defaults to the current index of the cursor.\n */\nDetailView.prototype._isAddRow = function(index = this.cursor.rowIndex()) {\n  return this.viewData.getRowId(index) === 'new';\n};\n\nDetailView.prototype.scrollToCursor = function(sync = true) {\n  if (!this.scrollPane) { return Promise.resolve(); }\n  return kd.doScrollChildIntoView(this.scrollPane, this.cursor.rowIndex(), sync);\n}\n\nDetailView.prototype._duplicateRows = async function() {\n  const addRowIds = await BaseView.prototype._duplicateRows.call(this);\n  this.setCursorPos({rowId: addRowIds[0]})\n}\n\nDetailView.prototype._canSingleClick = function(field) {\n  // we can't simple click if :\n  // - the field is a formula\n  // - the field is toggle (switch or checkbox)\n  if (\n    field.column().isRealFormula() || field.column().hasTriggerFormula()\n    || (\n      field.column().pureType() === \"Bool\"\n      && [\"Switch\", \"CheckBox\"].includes(field.column().visibleColFormatter().widgetOpts.widget)\n    )\n  ) {\n    return false;\n  }\n  return true;\n};\n\nDetailView.prototype._clearCardFields = function() {\n  const {isFormula} = this._getFieldContextMenuOptions();\n  if (isFormula === true) {\n    this.activateEditorAtCursor({init: ''});\n  } else {\n    const clearAction = tableUtil.makeDeleteAction(this.getSelection());\n    if (clearAction) {\n      this.gristDoc.docData.sendAction(clearAction);\n    }\n  }\n};\n\nDetailView.prototype._hideCardFields = function() {\n  const selection = this.getSelection();\n  const actions = selection.fields.map(field => ['RemoveRecord', field.id()]);\n  return this.gristDoc.docModel.viewFields.sendTableActions(\n    actions,\n    `Hide fields ${actions.map(a => a[1]).join(', ')} ` +\n      `from ${this.tableModel.tableData.tableId}.`\n  );\n}\n\nDetailView.prototype._clearSelection = function() {\n  this.copySelection(null);\n  this.cellSelector.setToCursor();\n};\n\nDetailView.prototype._clearCopySelection = function() {\n  this.copySelection(null);\n};\n\nDetailView.prototype._getRowContextMenuOptions = function(row) {\n  return {\n    disableInsert: Boolean(\n      this.gristDoc.isReadonly.get() ||\n      this.viewSection.disableAddRemoveRows() ||\n      this.tableModel.tableMetaRow.onDemand()\n    ),\n    disableDelete: Boolean(\n      this.gristDoc.isReadonly.get() ||\n      this.viewSection.disableAddRemoveRows() ||\n      row._isAddRow()\n    ),\n    isViewSorted: this.viewSection.activeSortSpec.peek().length > 0,\n    numRows: this.getSelection().rowIds.length,\n  };\n}\n\nDetailView.prototype._getFieldContextMenuOptions = function() {\n  const selection = this.getSelection();\n  return {\n    disableModify: Boolean(selection.fields[0]?.disableModify.peek()),\n    isReadonly: this.gristDoc.isReadonly.get() || this.isPreview,\n    isFormula: Boolean(selection.fields[0]?.column.peek().isRealFormula.peek()),\n  };\n}\n\nmodule.exports = DetailView;\n","var dispose = require('../lib/dispose');\nvar dom = require('../lib/dom');\nvar ValidationPanel = require('./ValidationPanel');\n\n/**\n * Document level configuration settings.\n * @param {Object}    options.gristDoc   A reference to the GristDoc object\n * @param {Function}  docName            A knockout observable containing a String\n */\nfunction DocConfigTab(options, docName) {\n  this.gristDoc = options.gristDoc;\n\n  // Panel to configure validation rules.\n  this.validationPanel = this.autoDispose(ValidationPanel.create({gristDoc: this.gristDoc}));\n\n  this.autoDispose(\n    this.gristDoc.addOptionsTab(\n      'Validate Data',\n      dom('span.glyphicon.glyphicon-check'),\n      this.buildValidationsConfigDomObj(),\n      { 'shortLabel': 'Valid' }\n    )\n  );\n}\ndispose.makeDisposable(DocConfigTab);\n\nDocConfigTab.prototype.buildValidationsConfigDomObj = function() {\n  return [{\n    'buildDom': this.validationPanel.buildDom.bind(this.validationPanel),\n    'keywords': ['document', 'validations', 'rules', 'validate']\n  }];\n};\n\nmodule.exports = DocConfigTab;\n","/* globals $, window */\n\nconst _         = require('underscore');\nconst ko        = require('knockout');\nconst debounce = require('lodash/debounce');\n\nconst gutil             = require('app/common/gutil');\nconst BinaryIndexedTree = require('app/common/BinaryIndexedTree');\nconst {Sort} = require('app/common/SortSpec');\n\nconst dom           = require('../lib/dom');\nconst kd            = require('../lib/koDom');\nconst kf            = require('../lib/koForm');\nconst koDomScrolly  = require('../lib/koDomScrolly');\nconst tableUtil     = require('../lib/tableUtil');\nconst {addToSort, sortBy}   = require('../lib/sortUtil');\n\nconst commands      = require('./commands');\nconst viewCommon    = require('./viewCommon');\nconst Base          = require('./Base');\nconst BaseView      = require('./BaseView');\nconst selector      = require('./CellSelector');\nconst {CopySelection} = require('./CopySelection');\nconst {SelectionSummary} = require('./SelectionSummary');\nconst koUtil      = require('app/client/lib/koUtil');\nconst convert       = require('color-convert');\n\nconst {renderAllRows} = require('app/client/components/Printing');\nconst {reportWarning} = require('app/client/models/errors');\nconst {reportUndo} = require('app/client/components/modals');\n\nconst {onDblClickMatchElem} = require('app/client/lib/dblclick');\n\n// Grist UI Components\nconst {dom: grainjsDom, Holder, Computed} = require('grainjs');\nconst {closeRegisteredMenu, menu} = require('../ui2018/menus');\nconst {calcFieldsCondition} = require('../ui/GridViewMenus');\nconst {ColumnAddMenu, ColumnContextMenu, MultiColumnMenu, freezeAction} = require('../ui/GridViewMenus');\nconst {RowContextMenu} = require('../ui/RowContextMenu');\n\nconst {setPopupToCreateDom} = require('popweasel');\nconst {CellContextMenu} = require('app/client/ui/CellContextMenu');\nconst {testId, isNarrowScreen} = require('app/client/ui2018/cssVars');\nconst {contextMenu} = require('app/client/ui/contextMenu');\nconst {mouseDragMatchElem} = require('app/client/ui/mouseDrag');\nconst {menuToggle} = require('app/client/ui/MenuToggle');\nconst {descriptionInfoTooltip, showTooltip} = require('app/client/ui/tooltips');\nconst {parsePasteForView} = require(\"./BaseView2\");\nconst {NEW_FILTER_JSON} = require('app/client/models/ColumnFilter');\nconst {CombinedStyle} = require(\"app/client/models/Styles\");\nconst {buildRenameColumn} = require('app/client/ui/ColumnTitle');\nconst {makeT} = require('app/client/lib/localization');\n\nconst t = makeT('GridView');\n\n// A threshold for interpreting a motionless click as a click rather than a drag.\n// Anything longer than this time (in milliseconds) should be interpreted as a drag\n// even if there is no movement.\n// This is relevant for distinguishing clicking an already-selected column in order\n// to rename it, and starting to drag that column and then deciding to leave it where\n// it was.\nconst SHORT_CLICK_IN_MS = 500;\n\n// size of the plus width ()\nconst PLUS_WIDTH = 40;\n// size of the row number field (we assume 4rem)\nconst ROW_NUMBER_WIDTH = 52;\n\n/**\n * GridView component implements the view of a grid of cells.\n */\nfunction GridView(gristDoc, viewSectionModel, isPreview = false) {\n  BaseView.call(this, gristDoc, viewSectionModel, { isPreview, 'addNewRow': true });\n\n  this.viewSection = viewSectionModel;\n\n  //--------------------------------------------------\n  // Observables local to this view\n\n  // Some observables/variables used for select and drag/drop\n  this.dragX = ko.observable(0); // x coord of mouse during drag mouse down\n  this.dragY = ko.observable(0); // ^ for y coord\n  this.rowShadowAdjust = 0; // pixel dist from mouse click y-coord and the clicked row's top offset\n  this.colShadowAdjust = 0; // ^ for x-coord and clicked col's left offset\n  this.scrollLeft = ko.observable(0);\n  this.isScrolledLeft = this.autoDispose(ko.computed(() => this.scrollLeft() > 0));\n  this.scrollTop = ko.observable(0);\n  this.isScrolledTop = this.autoDispose(ko.computed(() => this.scrollTop() > 0));\n\n  this.cellSelector = selector.CellSelector.create(this, this);\n\n  if (!isPreview) {\n    // Disable summaries in import previews, for now.\n    this.selectionSummary = SelectionSummary.create(this,\n      this.cellSelector, this.tableModel.tableData, this.sortedRows, this.viewSection.viewFields);\n  }\n\n  this.colMenuTargets = {}; // Reference from column ref to its menu target dom\n\n  this.selectedColumns = this.autoDispose(ko.pureComputed(() => {\n    const result = this.viewSection.viewFields().all().filter((field, index) => {\n      // During column removal or restoring (with undo), some columns fields\n      // might be disposed.\n      if (field.isDisposed() || field.column().isDisposed()) { return false; }\n      return this.cellSelector.containsCol(index);\n    });\n    return result;\n  }));\n\n  // Cache of column right offsets, used to determine the col select range\n  this.colRightOffsets = this.autoDispose(ko.computed(() => {\n    let fields = this.viewSection.viewFields();\n    let tree = new BinaryIndexedTree();\n    tree.fillFromValues(fields.all().map(field => field.widthDef()));\n    return tree;\n  }));\n\n  // Create observable holding current rowIndex that the view should be scrolled to.\n  // We will always notify, because we want to scroll to the row even when only the\n  // column is changed (in situation when the row is not visible).\n  this.visibleRowIndex = ko.observable(this.cursor.rowIndex()).extend({notify: 'always'});\n  // Create grain's Computed with current cursor position (we need it to examine position\n  // before the change and after).\n  this.currentPosition = Computed.create(this, (use) => ({\n    rowIndex : use(this.cursor.rowIndex),\n    fieldIndex : use(this.cursor.fieldIndex)\n  }));\n  // Add listener, and check if the cursor is indeed changed, if so, update the row\n  // and scroll it into view (using kd.scrollChildIntoView in buildDom function).\n  this.autoDispose(this.currentPosition.addListener((cur, prev) => {\n    if (cur.rowIndex !== prev.rowIndex || cur.fieldIndex !== prev.fieldIndex) {\n      this.visibleRowIndex(cur.rowIndex);\n    }\n  }));\n\n  this.autoDispose(this.cursor.fieldIndex.subscribe(idx => {\n    // If there are some frozen columns.\n    if (this.numFrozen.peek() && idx < this.numFrozen.peek()) { return; }\n\n    const offset = this.colRightOffsets.peek().getSumTo(idx);\n\n    const rowNumsWidth = this._cornerDom.clientWidth;\n    const viewWidth = this.scrollPane.clientWidth - rowNumsWidth;\n    const fieldWidth = this.colRightOffsets.peek().getValue(idx) + 1; // +1px border\n\n    // Left and right pixel edge of 'viewport', starting from edge of row nums.\n    const frozenWidth = this.frozenWidth.peek();\n    const leftEdge = this.scrollPane.scrollLeft + frozenWidth;\n    const rightEdge = leftEdge + (viewWidth - frozenWidth);\n\n    //If cell doesn't fit onscreen, scroll to fit\n    const scrollShift = offset - gutil.clamp(offset, leftEdge, rightEdge - fieldWidth);\n    this.scrollPane.scrollLeft = this.scrollPane.scrollLeft + scrollShift;\n  }));\n\n  this.isPreview = isPreview;\n\n  // Some observables for the scroll markers that show that the view is cut off on a side.\n  this.scrollShadow = {\n    left: this.isScrolledLeft,\n    top: this.isScrolledTop\n  };\n\n  //--------------------------------------------------\n  // Set up row and column context menus.\n  this.ctxMenuHolder = Holder.create(this);\n\n  //--------------------------------------------------\n  // Set frozen columns variables\n\n  // keep track of the width for this component\n  this.width = ko.observable(0);\n  // helper for clarity\n  this.numFrozen = this.viewSection.numFrozen;\n  // calculate total width of all frozen columns\n  this.frozenWidth = this.autoDispose(ko.pureComputed(() => this.colRightOffsets().getSumTo(this.numFrozen())));\n  // show frozenLine when have some frozen columns and not scrolled left\n  this.frozenLine = this.autoDispose(ko.pureComputed(() => this.numFrozen() && !this.isScrolledLeft()));\n  // even if some columns are frozen, we still want to move them left\n  // when screen is too narrow - here we will calculate how much space\n  // is needed to move all the frozen columns left in order to show some\n  // unfrozen columns to user (by default we will try to show at least one not\n  // frozen column and a plus button)\n  this.frozenOffset = this.autoDispose(ko.computed(() => {\n    // get the last field\n    const fields = this.viewSection.viewFields().all();\n    const lastField = fields[fields.length-1];\n    // get the last field width (or zero - grid can have zero columns)\n    const revealWidth = lastField ? lastField.widthDef() : 0;\n    // calculate the offset: start from zero, then move all left to hide frozen columns,\n    // then to right to fill whole width, then to left to reveal last column and plus button\n    const initialOffset = -this.frozenWidth() - ROW_NUMBER_WIDTH + this.width() - revealWidth - PLUS_WIDTH;\n    // Final check - we actually don't want to have\n    // the split (between frozen and normal columns) be moved left too far,\n    // it should stop at the middle of the available grid space (whole width - row number width).\n    // This can happen when last column is too wide, and we are not able to show it in a full width.\n    // To calculate the middle point: hide all frozen columns (by moving them maximum to the left)\n    // and then move them to right by half width of the section.\n    const middleOffset = -this.frozenWidth() - ROW_NUMBER_WIDTH + this.width() / 2;\n    // final offset is the bigger number of those two (offsets are negative - so take\n    // the number that is closer to 0)\n    const offset = Math.floor(Math.max(initialOffset, middleOffset));\n    // offset must be negative (we are moving columns left), if we ended up moving\n    // frozen columns to the right, don't move them at all\n    return offset > 0 ? 0 : Math.abs(offset);\n  }));\n  // observable for left scroll - but return left only when columns are frozen\n  // this will be used to move frozen border alongside with the scrollpane\n  this.frozenScrollOffset = this.autoDispose(ko.computed(() => this.numFrozen() ? this.scrollLeft() : 0));\n  // observable that will indicate if shadow is needed on top of frozen columns\n  this.frozenShadow = this.autoDispose(ko.computed(() => {\n    return this.numFrozen() && this.frozenOffset() && this.isScrolledLeft();\n  }));\n  // calculate column right offsets\n  this.frozenPositions = this.autoDispose(this.viewSection.viewFields().map(function(field){\n    return ko.pureComputed(() => this.colRightOffsets().getSumTo(field._index()));\n  }, this));\n  // calculate frozen state for all columns\n  this.frozenMap = this.autoDispose(this.viewSection.viewFields().map(function(field){\n    return ko.pureComputed(() => field._index() < this.numFrozen());\n  }, this));\n\n  // Holds column index that is hovered, works only in full-edit formula mode.\n  this.hoverColumn = ko.observable(-1);\n\n  // Checks if there is active formula editor for a column in this table.\n  this.editingFormula = ko.pureComputed(() => {\n    const isEditing = this.gristDoc.docModel.editingFormula();\n    if (!isEditing) { return false; }\n    return this.viewSection.viewFields().all().some(field => field.editingFormula());\n  });\n\n  // Debounced method to change current hover column, this is needed\n  // as mouse when moved from field to field will switch the hover-column\n  // observable from current index to -1 and then immediately back to current index.\n  // With debounced version, call to set -1 that is followed by call to set back to the field index\n  // will be discarded.\n  this.changeHover = debounce((index) => {\n    if (this.isDisposed()) { return; }\n    if (this.editingFormula()) {\n      this.hoverColumn(index);\n    }\n  }, 0);\n\n  //--------------------------------------------------\n  // Create and attach the DOM for the view.\n\n  this.isColSelected = this.autoDispose(this.viewSection.viewFields().map(function(field) {\n    return this._createColSelectedObs(field);\n  }, this));\n  this.header = null;\n  this._cornerDom = null;\n  // dom for adding new column - used by freeze calculation\n  this._modField = null;\n  this.scrollPane = null;\n  this.viewPane = this.autoDispose(this.buildDom());\n  this.attachSelectorHandlers();\n  this.scrolly = koDomScrolly.getInstance(this.viewData);\n\n  //--------------------------------------------------\n  // Set up DOM event handling.\n  onDblClickMatchElem(this.scrollPane, '.field:not(.column_name)', () => this.activateEditorAtCursor());\n  if (!this.isPreview) {\n    grainjsDom.onMatchElem(this.scrollPane, '.field:not(.column_name)', 'contextmenu', (ev, elem) => this.onCellContextMenu(ev, elem), {useCapture: true});\n  }\n  this.onEvent(this.scrollPane, 'scroll', this.onScroll);\n\n  //--------------------------------------------------\n  // Command group implementing all grid level commands (except cancel)\n  this.autoDispose(commands.createGroup(GridView.gridCommands, this, this.viewSection.hasFocus));\n  // Cancel command is registered conditionally, only when there is an active\n  // cell selection. This command is also used by Raw Data Views, to close the Grid popup.\n  const hasSelection = this.autoDispose(ko.pureComputed(() =>\n    !this.cellSelector.isCurrentSelectType('') || this.copySelection()));\n  this.autoDispose(commands.createGroup(GridView.selectionCommands, this, hasSelection));\n\n  // Timer to allow short, otherwise non-actionable clicks on column names to trigger renaming.\n  this._colClickTime = 0;  // Units: milliseconds.\n}\nBase.setBaseFor(GridView);\n_.extend(GridView.prototype, BaseView.prototype);\n\n\n\n// ======================================================================================\n// GRID-LEVEL COMMANDS\n\n// Moved out of all commands to support Raw Data Views (which use this command to close\n// the Grid popup).\nGridView.selectionCommands = {\n  clearCopySelection: function() { this._clearCopySelection(); },\n  cancel: function() { this.clearSelection(); }\n}\n\nGridView.gridCommands = {\n  cursorUp: function() {\n    // This conditional exists so that when users have the cursor in the top row but are not\n    // scrolled to the top i.e. in the case of a tall row, pressing up again will scroll the\n    // pane to the top.\n    if (this.cursor.rowIndex() === 0) {\n      this.scrollPane.scrollTop = 0;\n    }\n    this.cursor.rowIndex(this.cursor.rowIndex() - 1);\n  },\n  shiftDown: function() {\n    this._shiftSelect(1, this.cellSelector.row.end, selector.COL, this.getLastDataRowIndex());\n  },\n  shiftUp: function() {\n    this._shiftSelect(-1, this.cellSelector.row.end, selector.COL, this.getLastDataRowIndex());\n  },\n  shiftRight: function() {\n    this._shiftSelect(1, this.cellSelector.col.end, selector.ROW,\n                      this.viewSection.viewFields().peekLength - 1);\n  },\n  shiftLeft: function() {\n    this._shiftSelect(-1, this.cellSelector.col.end, selector.ROW,\n                      this.viewSection.viewFields().peekLength - 1);\n  },\n  ctrlShiftDown: function () {\n    this._shiftSelectUntilContent(selector.COL, 1, this.cellSelector.row.end, this.getLastDataRowIndex());\n  },\n  ctrlShiftUp: function () {\n    this._shiftSelectUntilContent(selector.COL, -1, this.cellSelector.row.end, this.getLastDataRowIndex());\n  },\n  ctrlShiftRight: function () {\n    this._shiftSelectUntilContent(selector.ROW, 1, this.cellSelector.col.end,\n      this.viewSection.viewFields().peekLength - 1);\n  },\n  ctrlShiftLeft: function () {\n    this._shiftSelectUntilContent(selector.ROW, -1, this.cellSelector.col.end,\n      this.viewSection.viewFields().peekLength - 1);\n  },\n  fillSelectionDown: function() { this.fillSelectionDown(); },\n  selectAll: function() { this.selectAll(); },\n\n  fieldEditSave: function() { this.cursor.rowIndex(this.cursor.rowIndex() + 1); },\n  // Re-define editField after fieldEditSave to make it take precedence for the Enter key.\n  editField: function() { closeRegisteredMenu(); this.scrollToCursor(true); this.activateEditorAtCursor(); },\n\n  insertFieldBefore: function() { this.insertColumn(this.cursor.fieldIndex()); },\n  insertFieldAfter: function() { this.insertColumn(this.cursor.fieldIndex() + 1); },\n  renameField: function() { this.renameColumn(this.cursor.fieldIndex()); },\n  hideFields: function() { this.hideFields(this.getSelection()); },\n  deleteFields: function() {\n    const selection = this.getSelection();\n    const count = selection.colIds.length;\n    this.deleteColumns(selection).then((result) => {\n      if (result !== false) {\n        reportUndo(this.gristDoc, `You deleted ${count} column${count > 1 ? 's' : ''}.`);\n      }\n    });\n  },\n  clearValues: function() { this.clearValues(this.getSelection()); },\n  clearColumns: function() { this._clearColumns(this.getSelection()); },\n  convertFormulasToData: function() { this._convertFormulasToData(this.getSelection()); },\n  copy: function() { return this.copy(this.getSelection()); },\n  cut: function() { return this.cut(this.getSelection()); },\n  paste: async function(pasteObj, cutCallback) {\n    await this.gristDoc.docData.bundleActions(null, () => this.paste(pasteObj, cutCallback));\n    await this.scrollToCursor(false);\n  },\n  sortAsc: function() {\n    sortBy(this.viewSection.activeSortSpec, this.currentColumn().getRowId(), Sort.ASC);\n  },\n  sortDesc: function() {\n    sortBy(this.viewSection.activeSortSpec, this.currentColumn().getRowId(), Sort.DESC);\n  },\n  addSortAsc: function() {\n    addToSort(this.viewSection.activeSortSpec, this.currentColumn().getRowId(), Sort.ASC);\n  },\n  addSortDesc: function() {\n    addToSort(this.viewSection.activeSortSpec, this.currentColumn().getRowId(), Sort.DESC);\n  },\n  toggleFreeze: function() {\n    // get column selection\n    const selection = this.getSelection();\n    // convert it menu option\n    const options = this._getColumnMenuOptions(selection);\n    // generate action that is available for freeze toggle\n    const action = freezeAction(options);\n    // if no action, do nothing\n    if (!action) { return; }\n    // if grist document is in readonly - simply change the value\n    // without saving\n    if (this.gristDoc.isReadonly.get()) {\n      this.viewSection.rawNumFrozen(action.numFrozen);\n      return;\n    }\n    this.viewSection.rawNumFrozen.setAndSave(action.numFrozen);\n  }\n};\n\nGridView.prototype.onTableLoaded = function() {\n  BaseView.prototype.onTableLoaded.call(this);\n  this.onScroll();\n\n  // Initialize scroll position.\n  this.scrollPane.scrollLeft = this.viewSection.lastScrollPos.scrollLeft;\n  this.scrolly.scrollToSavedPos(this.viewSection.lastScrollPos);\n};\n\n/**\n * Update the bounds of the cell selector's selected range for Shift+Direction keyboard shortcuts.\n * @param {integer} step - amount to increase/decrease the select bound\n * @param {Observable} selectObs - observable to change\n * @exemptType {Selector type string} - selector type to noop on\n     IE: Shift + Up/Down should noop if columns are selected. And vice versa for rows.\n * @param {integer} maxVal - maximum value allowed for the selectObs\n **/\nGridView.prototype._shiftSelect = function(step, selectObs, exemptType, maxVal) {\n  console.assert(exemptType === selector.ROW || exemptType === selector.COL);\n  if (this.cellSelector.isCurrentSelectType(exemptType)) return;\n  if (this.cellSelector.isCurrentSelectType(selector.NONE)) {\n    this.cellSelector.currentSelectType(selector.CELL);\n  }\n  var newVal = gutil.clamp(selectObs() + step, 0, maxVal);\n  selectObs(newVal);\n};\n\nGridView.prototype._shiftSelectUntilContent = function(type, direction, selectObs, maxVal) {\n  const selection = {\n    colStart: this.cellSelector.col.start(),\n    colEnd: this.cellSelector.col.end(),\n    rowStart: this.cellSelector.row.start(),\n    rowEnd: this.cellSelector.row.end(),\n  };\n\n  const steps = this._stepsToContent(type, direction, selection, maxVal);\n  if (steps > 0) { this._shiftSelect(direction * steps, selectObs, type, maxVal); }\n}\n\nGridView.prototype._stepsToContent = function (type, direction, selection, maxVal) {\n  const {colEnd: colEnd, rowEnd: rowEnd} = selection;\n  let selectionData;\n\n  const cursorCol = this.cursor.fieldIndex();\n  const cursorRow = this.cursor.rowIndex();\n\n  if (type === selector.ROW && direction > 0) {\n    if (colEnd + 1 > maxVal) { return 0; }\n\n    selectionData = this._selectionData({colStart: colEnd, colEnd: maxVal, rowStart: cursorRow, rowEnd: cursorRow});\n  } else if (type === selector.ROW && direction < 0) {\n    if (colEnd - 1 < 0) { return 0; }\n\n    selectionData = this._selectionData({colStart: 0, colEnd, rowStart: cursorRow, rowEnd: cursorRow});\n  } else if (type === selector.COL && direction > 0) {\n    if (rowEnd + 1 > maxVal) { return 0; }\n\n    selectionData = this._selectionData({colStart: cursorCol, colEnd: cursorCol, rowStart: rowEnd, rowEnd: maxVal});\n  } else if (type === selector.COL && direction < 0) {\n    if (rowEnd - 1 > maxVal) { return 0; }\n\n    selectionData = this._selectionData({colStart: cursorCol, colEnd: cursorCol, rowStart: 0, rowEnd});\n  }\n\n  const {fields, rowIndices} = selectionData;\n  if (type === selector.ROW && direction < 0) {\n    // When moving selection left, we step through fields in reverse order.\n    fields.reverse();\n  }\n  if (type === selector.COL && direction < 0) {\n    // When moving selection up, we step through rows in reverse order.\n    rowIndices.reverse();\n  }\n\n  const colValuesByIndex = {};\n  for (const field of fields) {\n    const displayColId = field.displayColModel.peek().colId.peek();\n    colValuesByIndex[field._index()] = this.tableModel.tableData.getColValues(displayColId);\n  }\n\n  let steps = 0;\n\n  if (type === selector.ROW) {\n    const rowIndex = rowIndices[0];\n    const isLastColEmpty = this._isCellValueEmpty(colValuesByIndex[colEnd][rowIndex]);\n    const isNextColEmpty = this._isCellValueEmpty(colValuesByIndex[colEnd + direction][rowIndex]);\n    const shouldStopOnEmptyValue = !isLastColEmpty && !isNextColEmpty;\n    for (let i = 1; i < fields.length; i++) {\n      const hasEmptyValues = this._isCellValueEmpty(colValuesByIndex[fields[i]._index()][rowIndex]);\n      if (hasEmptyValues && shouldStopOnEmptyValue) {\n        return steps;\n      } else if (!hasEmptyValues && !shouldStopOnEmptyValue) {\n        return steps + 1;\n      }\n\n      steps += 1;\n    }\n  } else {\n    const colValues = colValuesByIndex[fields[0]._index()];\n    const isLastRowEmpty = this._isCellValueEmpty(colValues[rowIndices[0]]);\n    const isNextRowEmpty = this._isCellValueEmpty(colValues[rowIndices[1]]);\n    const shouldStopOnEmptyValue = !isLastRowEmpty && !isNextRowEmpty;\n    for (let i = 1; i < rowIndices.length; i++) {\n      const hasEmptyValues = this._isCellValueEmpty(colValues[rowIndices[i]]);\n      if (hasEmptyValues && shouldStopOnEmptyValue) {\n        return steps;\n      } else if (!hasEmptyValues && !shouldStopOnEmptyValue) {\n        return steps + 1;\n      }\n\n      steps += 1;\n    }\n  }\n\n  return steps;\n}\n\nGridView.prototype._selectionData = function({colStart, colEnd, rowStart, rowEnd}) {\n  const fields = [];\n  for (let i = colStart; i <= colEnd; i++) {\n    const field = this.viewSection.viewFields().at(i);\n    if (!field) { continue; }\n\n    fields.push(field);\n  }\n\n  const rowIndices = [];\n  for (let i = rowStart; i <= rowEnd; i++) {\n    const rowId = this.viewData.getRowId(i);\n    if (!rowId) { continue; }\n\n    rowIndices.push(this.tableModel.tableData.getRowIdIndex(rowId));\n  }\n\n  return {fields, rowIndices};\n}\n\nGridView.prototype._isCellValueEmpty = function(value) {\n  return value === null || value === undefined || value === '' || value === 'false';\n}\n\n/**\n * Pastes the provided data at the current cursor.\n *\n * TODO: Handle the edge case where more columns are pasted than available.\n *\n * @param {Array} data - Array of arrays of data to be pasted. Each array represents a row.\n * i.e.  [[\"1-1\", \"1-2\", \"1-3\"],\n *        [\"2-1\", \"2-2\", \"2-3\"]]\n * @param {Function} cutCallback - If provided returns the record removal action needed for\n *  a cut.\n */\nGridView.prototype.paste = async function(data, cutCallback) {\n  // TODO: If pasting into columns by which this view is sorted, rows may jump. It is still better\n  // to allow it, but we should \"freeze\" the affected rows to prevent them from jumping, until the\n  // user re-applies the sort manually. (This is a particularly bad experience when rows get\n  // dispersed by the sorting after paste.) We do attempt to keep the cursor in the same row as\n  // before even if it jumped. Note when addressing it: currently selected rows should be treated\n  // as frozen (and get marked as unsorted if necessary) for any update even if the update comes\n  // from a different peer.\n\n  // convert row-wise data to column-wise so that it better resembles a user action\n  let pasteData = _.unzip(data);\n  let pasteHeight = pasteData[0].length;\n  let pasteWidth = pasteData.length;\n  // figure out the size of the paste area\n  let outputHeight = Math.max(gutil.roundDownToMultiple(this.cellSelector.rowCount(), pasteHeight), pasteHeight);\n  let outputWidth = Math.max(gutil.roundDownToMultiple(this.cellSelector.colCount(), pasteWidth), pasteWidth);\n  // get the row ids that cover the paste\n  let topIndex = this.cellSelector.rowLower();\n  let updateRowIndices = _.range(topIndex, topIndex + outputHeight);\n  let updateRowIds = updateRowIndices.map(r => this.viewData.getRowId(r));\n  // get the col ids that cover the paste\n  let leftIndex = this.cellSelector.colLower();\n  let updateColIndices = _.range(leftIndex, leftIndex + outputWidth);\n\n  pasteData = gutil.growMatrix(pasteData, updateColIndices.length, updateRowIds.length);\n\n  let fields = this.viewSection.viewFields().peek();\n  let pasteFields = updateColIndices.map(i => fields[i] || null);\n\n  const richData = await parsePasteForView(pasteData, pasteFields, this.gristDoc);\n  let actions = this._createBulkActionsFromPaste(updateRowIds, richData);\n\n  if (actions.length > 0) {\n    let cursorPos = this.cursor.getCursorPos();\n    return this.sendPasteActions(cutCallback, actions)\n    .then(results => {\n      // If rows were added, get their rowIds from the action results.\n      let addRowIds = (actions[0][0] === 'BulkAddRecord' ? results[0] : []);\n      console.assert(addRowIds.length <= updateRowIds.length,\n        `Unexpected number of added rows: ${addRowIds.length} of ${updateRowIds.length}`);\n      let newRowIds = updateRowIds.slice(0, updateRowIds.length - addRowIds.length)\n        .concat(addRowIds);\n\n      // Restore the cursor to the right rowId, even if it jumped.\n      this.cursor.setCursorPos({rowId: cursorPos.rowId === 'new' ? addRowIds[0] : cursorPos.rowId});\n\n      // Restore the selection if it would select the correct rows.\n      let topRowIndex = this.viewData.getRowIndex(newRowIds[0]);\n      if (newRowIds.every((r, i) => r === this.viewData.getRowId(topRowIndex + i))) {\n        this.cellSelector.selectArea(topRowIndex, leftIndex,\n          topRowIndex + outputHeight - 1, leftIndex + outputWidth - 1);\n      }\n\n      commands.allCommands.clearCopySelection.run();\n    });\n  }\n};\n\n/**\n * Given a matrix of values, and an array of colIds and rowId targets, this function returns\n * an array of user actions needed to update the targets to the values in the matrix\n * @param {Array} rowIds - An array of numbers, 'new' or null corresponding to the row ids will\n * be updated or added. Numerical (proper) rowIds must come before special ones.\n * @param {Object<string, Array<string>} bulkUpdate - Object from colId to array of column values.\n */\nGridView.prototype._createBulkActionsFromPaste = function(rowIds, bulkUpdate) {\n  if (_.isEmpty(bulkUpdate)) {\n    return [];\n  }\n\n  let addRows = rowIds.filter(rowId => rowId === null || rowId === 'new').length;\n  let updateRows = rowIds.length - addRows;\n\n  let actions = [];\n  if (addRows > 0) {\n    actions.push(['BulkAddRecord', gutil.arrayRepeat(addRows, null),\n      _.mapObject(bulkUpdate, values => values.slice(-addRows))\n    ]);\n  }\n  if (updateRows > 0) {\n    actions.push(['BulkUpdateRecord', rowIds.slice(0, updateRows),\n      _.mapObject(bulkUpdate, values => values.slice(0, updateRows))\n    ]);\n  }\n  return this.prepTableActions(actions);\n};\n\n/**\n * Fills currently selected grid with the contents of the top row in that selection.\n */\nGridView.prototype.fillSelectionDown = function() {\n  var rowLower = this.cellSelector.rowLower();\n  var rowIds = _.times(this.cellSelector.rowCount(), i => this.viewData.getRowId(rowLower + i));\n\n  if (rowIds.length <= 1) {\n    return;\n  }\n\n  var colLower = this.cellSelector.colLower();\n  var fields = this.viewSection.viewFields().peek();\n  var colIds = _.times(this.cellSelector.colCount(), i => {\n    if (!fields[colLower + i].column().isFormula()) {\n      return fields[colLower + i].colId();\n    }\n  }).filter(colId => colId);\n\n  var colInfo = _.object(colIds, colIds.map(colId => {\n     var val = this.tableModel.tableData.getValue(rowIds[0], colId);\n     return rowIds.map(() => val);\n  }));\n\n  this.tableModel.sendTableAction([\"BulkUpdateRecord\", rowIds, colInfo]);\n};\n\n\n\n\n/**\n * Returns a CopySelection of the selected rows and cols\n * @returns {Object} CopySelection\n */\nGridView.prototype.getSelection = function() {\n  let rowIds = [], fields = [], rowStyle = {}, colStyle = {};\n  let colStart = this.cellSelector.colLower();\n  let colEnd = this.cellSelector.colUpper();\n  let rowStart = this.cellSelector.rowLower();\n  let rowEnd = this.cellSelector.rowUpper();\n\n  // If there is no selection, just copy/paste the cursor cell\n  if (this.cellSelector.isCurrentSelectType(selector.NONE)) {\n    rowStart = rowEnd = this.cursor.rowIndex();\n    colStart = colEnd = this.cursor.fieldIndex();\n  }\n\n  // Get all the cols if rows are selected, and viceversa\n  if (this.cellSelector.isCurrentSelectType(selector.ROW)) {\n    colStart = 0;\n    colEnd = this.viewSection.viewFields().peekLength - 1;\n  } else if(this.cellSelector.isCurrentSelectType(selector.COL)) {\n    rowStart = 0;\n    rowEnd = this.getLastDataRowIndex();\n  }\n\n  // Start or end will be null if no fields are visible.\n  if (colStart !== null && colEnd !== null) {\n    for(var i = colStart; i <= colEnd; i++) {\n      let field = this.viewSection.viewFields().at(i);\n      fields.push(field);\n      colStyle[field.colId()] = this._getColStyle(i);\n    }\n  }\n\n  var rowId;\n  for(var j = rowStart; j <= rowEnd; j++) {\n    rowId = this.viewData.getRowId(j);\n    rowIds.push(rowId);\n    rowStyle[rowId] = this._getRowStyle(j);\n  }\n  return new CopySelection(this.tableModel.tableData, rowIds, fields, {\n    rowStyle: rowStyle,\n    colStyle: colStyle\n  });\n};\n\n/**\n * Deselects the currently selected cells.\n */\nGridView.prototype.clearSelection = function() {\n  this.copySelection(null); // Unset the selection observable\n  this.cellSelector.setToCursor();\n};\n\n/**\n * Given a selection object, sets all cells referred to by the selection to the empty string. If\n * only formula columns are selected, only open the formula editor to the empty formula.\n * @param {CopySelection} selection\n */\nGridView.prototype.clearValues = function(selection) {\n  const options = this._getColumnMenuOptions(selection);\n  if (options.isFormula === true) {\n    this.activateEditorAtCursor({ init: ''});\n  } else {\n    let clearAction = tableUtil.makeDeleteAction(selection);\n    if (clearAction) {\n      this.gristDoc.docData.sendAction(clearAction);\n    }\n  }\n};\n\nGridView.prototype._clearColumns = function(selection) {\n  const fields = selection.fields;\n  return this.gristDoc.clearColumns(fields.map(f => f.colRef.peek()));\n};\n\nGridView.prototype._convertFormulasToData = function(selection) {\n  // Convert all isFormula columns to data, including empty columns. This is sometimes useful\n  // (e.g. since a truly empty column undergoes a conversion on first data entry, which may be\n  // prevented by ACL rules).\n  const fields = selection.fields.filter(f => f.column.peek().isFormula.peek());\n  if (!fields.length) { return null; }\n  return this.gristDoc.convertIsFormula(fields.map(f => f.colRef.peek()), {toFormula: false});\n};\n\nGridView.prototype.selectAll = function() {\n  this.cellSelector.selectArea(0, 0, this.getLastDataRowIndex(),\n    this.viewSection.viewFields().peekLength - 1);\n};\n\n\n// End of actions\n\n\n\n// ======================================================================================\n// GRIDVIEW PRIMITIVES (for manipulating grid, rows/cols, selections)\n\n\n/**\n * Assigns the cursor.rowIndex and cursor.fieldIndex observable to the correct row/column/cell\n * depending on the supplied dom element.\n * @param {DOM element} elem - extract the col/row index from the element\n * @param {Selector.ROW/COL/CELL} elemType - denotes whether the clicked element was\n *                                           a row header, col header or cell\n */\nGridView.prototype.assignCursor = function(elem, elemType) {\n  // Change focus before running command so that the correct viewsection's cursor is moved.\n  this.viewSection.hasFocus(true);\n\n  try {\n    let row = this.domToRowModel(elem, elemType);\n    let col = this.domToColModel(elem, elemType);\n    commands.allCommands.setCursor.run(row, col);\n  } catch(e) {\n    console.error(e);\n    console.error(\"GridView.assignCursor expects a row/col header, or cell as an input.\");\n  }\n\n  /* CellSelector already updates the selection whenever rowIndex/fieldIndex is changed, but\n   * since those observables don't currently notify subscribers when an unchanged value is\n   * written, there are cases where the selection doesn't get updated. For example, when doing\n   * a click and drag to select cells and then clicking the \"selected\" cell that's outlined in\n   * green, the row/column numbers remain highlighted as if they are still selected, while\n   * GridView indicates the cells are not selected. This causes bugs that range from the\n   * aformentioned visual discrepancy to incorrect copy/paste behavior due to out-of-date\n   * selection ranges.\n   *\n   * We address this by calling setToCursor here unconditionally, but another possible approach\n   * might be to extend rowIndex/fieldIndex to always notify their subscribers. Always notifying\n   * currently introduces some bugs, and we'd also need to check that it doesn't cause too\n   * much unnecessary UI recomputation elsewhere, so in the interest of time we use the first\n   * approach. */\n  this.cellSelector.setToCursor(elemType);\n};\n\n/**\n * Schedules cursor assignment to happen at end of tick. Calling `preventAssignCursor()` before\n * prevents assignment to happen. This was added to prevent cursor assignment on a `context click`\n * on a cell that is already selected.\n */\nGridView.prototype.scheduleAssignCursor = function(elem, elemType) {\n  this._assignCursorTimeoutId = setTimeout(() => {\n    this.assignCursor(elem, elemType);\n    this._assignCursorTimeoutId = null;\n  }, 0);\n}\n\n/**\n * See `scheduleAssignCursor()` for doc.\n */\nGridView.prototype.preventAssignCursor = function() {\n  clearTimeout(this._assignCursorTimeoutId);\n  this._assignCursorTimeoutId = null;\n}\n\nGridView.prototype.selectedRows = function() {\n  const selection = this.getSelection();\n  return _.without(selection.rowIds, 'new');\n};\n\nGridView.prototype.deleteRows = async function(rowIds) {\n  const saved = this.cursor.getCursorPos();\n  this.cursor.setLive(false);\n  try {\n    await BaseView.prototype.deleteRows.call(this, rowIds);\n  } finally {\n    this.cursor.setCursorPos(saved);\n    this.cursor.setLive(true);\n    this.clearSelection();\n  }\n};\n\nGridView.prototype.addNewColumn = function() {\n  this.insertColumn(this.viewSection.viewFields().peekLength)\n .then(() => this.scrollPaneRight());\n};\n\nGridView.prototype.insertColumn = async function(index) {\n  const pos = tableUtil.fieldInsertPositions(this.viewSection.viewFields(), index)[0];\n  var action = ['AddColumn', null, {\"_position\": pos}];\n  await this.gristDoc.docData.bundleActions('Insert column', async () => {\n    const colInfo = await this.tableModel.sendTableAction(action);\n    if (!this.viewSection.isRaw.peek()){\n      const fieldInfo = {\n        colRef: colInfo.colRef,\n        parentPos: pos,\n        parentId: this.viewSection.id.peek()\n      };\n      await this.gristDoc.docModel.viewFields.sendTableAction(['AddRecord', null, fieldInfo]);\n    }\n  });\n  this.selectColumn(index);\n  this.currentEditingColumnIndex(index);\n};\n\nGridView.prototype.renameColumn = function(index) {\n  this.currentEditingColumnIndex(index);\n};\n\nGridView.prototype.scrollPaneRight = function() {\n  this.scrollPane.scrollLeft = this.scrollPane.scrollWidth;\n};\n\nGridView.prototype.selectColumn = function(colIndex) {\n  this.cursor.fieldIndex(colIndex);\n  this.cellSelector.currentSelectType(selector.COL);\n};\n\nGridView.prototype.showColumn = function(colId, index) {\n  let fieldPos = tableUtil.fieldInsertPositions(this.viewSection.viewFields(), index, 1)[0];\n  let colInfo = {\n    parentId: this.viewSection.id(),\n    colRef: colId,\n    parentPos: fieldPos\n  };\n  return this.gristDoc.docModel.viewFields.sendTableAction(['AddRecord', null, colInfo])\n  .then(() => this.selectColumn(index))\n  .then(() => this.scrollPaneRight());\n};\n\n// TODO: Replace alerts with custom notifications\nGridView.prototype.deleteColumns = function(selection) {\n  var fields = selection.fields;\n  if (fields.length === this.viewSection.viewFields().peekLength) {\n    reportWarning(\"You can't delete all the columns on the grid.\", {\n      key: 'delete-all-columns',\n    });\n    return Promise.resolve(false);\n  }\n  let actions = fields.filter(col => !col.disableModify()).map(col => ['RemoveColumn', col.colId()]);\n  if (actions.length > 0) {\n    return this.tableModel.sendTableActions(actions, `Removed columns ${actions.map(a => a[1]).join(', ')} ` +\n      `from ${this.tableModel.tableData.tableId}.`).then(() => this.clearSelection());\n  }\n  return Promise.resolve(false);\n};\n\nGridView.prototype.hideFields = function(selection) {\n  var actions = selection.fields.map(field => ['RemoveRecord', field.id()]);\n  return this.gristDoc.docModel.viewFields.sendTableActions(actions, `Hide columns ${actions.map(a => a[1]).join(', ')} ` +\n  `from ${this.tableModel.tableData.tableId}.`);\n};\n\nGridView.prototype.moveColumns = function(oldIndices, newIndex) {\n  if (oldIndices.length === 0) return;\n  if (oldIndices[0] === newIndex || oldIndices[0] + 1 === newIndex) return;\n\n  var newPositions = tableUtil.fieldInsertPositions(this.viewSection.viewFields(), newIndex,\n                                                    oldIndices.length);\n  var vsfRowIds = oldIndices.map(function(i) {\n    return this.viewSection.viewFields().at(i).id();\n  }, this);\n  var colInfo = { 'parentPos': newPositions };\n  var vsfAction = ['BulkUpdateRecord', vsfRowIds, colInfo];\n  var viewFieldsTable =  this.gristDoc.docModel.viewFields;\n  var numCols = oldIndices.length;\n  const newPos = newIndex < this.cellSelector.colLower() ? newIndex : newIndex - numCols;\n  viewFieldsTable.sendTableAction(vsfAction).then(() => {\n    this.cursor.fieldIndex(newPos);\n    this.cellSelector.currentSelectType(selector.COL);\n    this.cellSelector.col.start(newPos);\n    this.cellSelector.col.end(newPos + numCols - 1);\n  });\n};\n\nGridView.prototype.moveRows = function(oldIndices, newIndex) {\n  if (oldIndices.length === 0) return;\n  if (oldIndices[0] === newIndex || oldIndices[0] + 1 === newIndex) return;\n\n  var newPositions = this._getRowInsertPos(newIndex, oldIndices.length);\n  var rowIds = oldIndices.map(function(i) {\n    return this.viewData.getRowId(i);\n  }, this);\n  var colInfo = { 'manualSort': newPositions };\n  var action = ['BulkUpdateRecord', rowIds, colInfo];\n  var numRows = oldIndices.length;\n  const newPos = newIndex < this.cellSelector.rowLower() ? newIndex : newIndex - numRows;\n  this.tableModel.sendTableAction(action).then(() => {\n    this.cursor.rowIndex(newPos);\n    this.cellSelector.currentSelectType(selector.ROW);\n    this.cellSelector.row.start(newPos);\n    this.cellSelector.row.end(newPos + numRows - 1);\n  });\n};\n\n\n// ======================================================================================\n// MISC HELPERS\n\n\n/**\n *  Returns the row index of the row whose top offset is closest to and\n *  no greater than given y-position.\n *  param{yCoord}: The mouse y-position (including any scroll top amount).\n *  Assumes that scrolly.rowOffsetTree is up to date.\n *  See the given examples in GridView.getMousePosCol.\n **/\nGridView.prototype.getMousePosRow = function (yCoord) {\n  var headerOffset = this.header.getBoundingClientRect().bottom;\n  return this.scrolly.rowOffsetTree.getIndex(yCoord - headerOffset);\n};\n\n/**\n *  Returns the row index of the row whose top offset is closest to and\n *  no greater than given y-position excluding addRows.\n *  param{yCoord}: The mouse y-position on the screen.\n **/\nGridView.prototype.currentMouseRow = function(yCoord) {\n  return Math.min(this.getMousePosRow(this.scrollTop() + yCoord), this.getLastDataRowIndex());\n};\n\n/**\n *  Returns the column index of the column whose left position is closest to and\n *  no greater than given x-position.\n *  param{xCoord}: The mouse x-position (absolute position on a page).\n *  Grid scroll offset and frozen columns are taken into account.\n *  Assumes that this.colRightOffsets is up to date\n *  In the following examples, let * denote the current mouse position.\n *      * |0____|1____|2____|3____|       Returns 0\n *        |0__*_|1____|2____|3____|       Returns 0\n *        |0____|1__*_|2____|3____|       Returns 1\n *        |0____|1____|2__*_|3____|       Returns 2\n *        |0____|1____|2____|3__*_|       Returns 3\n *        |0____|1____|2____|3____| *     Returns 4\n *\n * For frozen columns and a scrolled view:\n *      * |0____|1____|..5|6____|         Returns 0\n *        |0__*_|1____|..5|6____|         Returns 0\n *        |0____|1__*_|..5|6____|         Returns 1\n *        |0____|1____|*.5|6____|         Returns 5\n *        |0____|1____|..5|6__*_|         Returns 6\n *        |0____|1____|..5|6____| *       Returns 6\n **/\nGridView.prototype.getMousePosCol = function (mouseX) {\n  const scrollLeft = this.scrollLeft();\n  // Offset to left edge of gridView viewports\n  const headerOffset = this._cornerDom.getBoundingClientRect().right;\n  // Convert mouse x to grid x (not including scroll yet).\n  // GridX now has x position as if the grid pane is covering\n  // the whole screen, it still can be scrolled, so 0px is not equal to A column yet.\n  const gridX = mouseX - headerOffset;\n  // Total width of frozen columns (if zero, no frozen column set)\n  const frozenWidth = this.frozenWidth.peek();\n  // Frozen columns can be scrolled also, but not more then frozenOffset.\n  const frozenScroll = Math.min(this.frozenOffset.peek(), scrollLeft);\n  // If gridX is in frozen section or outside. Frozen section can be scrolled also\n  // on narrow screens so take this into account.\n  const inFrozen = this.numFrozen.peek() && gridX <= (frozenWidth - frozenScroll);\n  // If grid x (mouse converted to grid pane coordinates) is in frozen area\n  // we need to use frozenScroll value (how much frozen area is scrolled),\n  // but if it is outside we want to take the scroll offset into account.\n  // Here we wil calculate where exactly is mouse (over which column),\n  // to do that, we will pretend that nothing is scrolled - so we need\n  // to move gridX a little to the right, either by grid offset (how much whole grid\n  // is scrolled to the left) or a frozen set offset (how much frozen columns\n  // are scrolled to the left).\n  const scrollX = gridX + (inFrozen ? frozenScroll : scrollLeft);\n  return this.colRightOffsets.peek().getIndex(scrollX);\n};\n\n// Used for styling the paste data the same way the col/row is styled in the GridView.\nGridView.prototype._getRowStyle = function(rowIndex) {\n  return { 'height': this.scrolly.rowOffsetTree.getValue(rowIndex) + 'px' };\n};\n\nGridView.prototype._getColStyle = function(colIndex) {\n  return { 'width' : this.viewSection.viewFields().at(colIndex).widthPx() };\n};\n\n// TODO: for now lets just assume you are clicking on a .field, .row, or .column\nGridView.prototype.domToRowModel = function(elem, elemType) {\n  switch (elemType) {\n    case selector.COL:\n      return undefined;\n    case selector.ROW: // row > row num: row has record model\n      return ko.utils.domData.get(elem.parentNode, 'itemModel');\n    case selector.NONE:\n    case selector.CELL: // cell: row > .record > .field, row holds row model\n      return ko.utils.domData.get(elem.parentNode.parentNode, 'itemModel');\n    default:\n      throw Error(\"Unknown elemType in domToRowModel:\" + elemType);\n  }\n};\n\nGridView.prototype.domToColModel = function(elem, elemType) {\n  switch (elemType) {\n    case selector.ROW:\n      return undefined;\n    case selector.NONE:\n    case selector.CELL: // cell: .field has col model\n    case selector.COL:  // col:  .column_name I think\n      return ko.utils.domData.get(elem, 'itemModel');\n    default:\n      throw Error(\"Unknown elemType in domToRowModel\");\n  }\n};\n\n// ======================================================================================\n// DOM STUFF\n\n/**\n * Recalculate various positioning variables.\n */\n//TODO : is this necessary? make passive. Also this could be removed soon I think\nGridView.prototype.onScroll = function() {\n  var pane = this.scrollPane;\n  this.scrollLeft(pane.scrollLeft);\n  this.scrollTop(pane.scrollTop);\n  this.width(pane.clientWidth);\n};\n\n\nGridView.prototype.buildDom = function() {\n  var self = this;\n  var data = this.viewData;\n  var v = this.viewSection;\n  var editIndex = this.currentEditingColumnIndex;\n\n  //each row has toggle classes on these props, so grab them once to save on lookups\n  let vHorizontalGridlines = v.optionsObj.prop('horizontalGridlines');\n  let vVerticalGridlines   = v.optionsObj.prop('verticalGridlines');\n  let vZebraStripes        = v.optionsObj.prop('zebraStripes');\n\n  var renameCommands = {\n    nextField: function() {\n      if (editIndex() === v.viewFields().peekLength - 1) {\n        // Turn off editing if we're on the last field.\n        editIndex(-1);\n      } else {\n        editIndex(editIndex() + 1);\n        self.selectColumn(editIndex.peek());\n      }\n    },\n    prevField: function() {\n      editIndex(editIndex() - 1);\n      self.selectColumn(editIndex.peek());\n    }\n  };\n\n  return dom(\n    'div.gridview_data_pane.flexvbox',\n    // offset for frozen columns - how much move them to the left\n    kd.style('--frozen-offset', this.frozenOffset),\n    // total width of frozen columns\n    kd.style('--frozen-width', this.frozenWidth),\n    // Corner, bars and shadows\n    // Corner and shadows (so it's fixed to the grid viewport)\n    self._cornerDom = dom(\n      'div.gridview_data_corner_overlay',\n      dom.on('click', () => this.selectAll()),\n    ),\n    dom('div.scroll_shadow_top', kd.show(this.scrollShadow.top)),\n    dom('div.scroll_shadow_left',\n      kd.show(this.scrollShadow.left),\n      // pass current scroll position\n      kd.style('--frozen-scroll-offset', this.frozenScrollOffset)),\n    dom('div.frozen_line', kd.show(this.frozenLine)),\n    dom('div.gridview_header_backdrop_left'), //these hide behind the actual headers to keep them from flashing\n    dom('div.gridview_header_backdrop_top'),\n    // When there are frozen columns, right border for number row will not be visible (as actually there is no border,\n    // it comes from the first cell in the grid) making a gap between row-number and actual column. So when we scroll\n    // the content of the scrolled columns will be visible to the user (as there is blank space there).\n    // This line fills the gap. NOTE that we are using number here instead of a boolean.\n    dom('div.gridview_left_border', kd.show(this.numFrozen),\n      kd.style(\"left\", ROW_NUMBER_WIDTH + 'px')\n    ),\n    // left shadow that will be visible on top of frozen columns\n    dom('div.scroll_shadow_frozen', kd.show(this.frozenShadow)),\n    // When cursor leaves the GridView, remove hover immediately (without debounce).\n    // This guards mouse leaving gridView from the top, as leaving from bottom or left, right, is\n    // guarded on the row level.\n    dom.on(\"mouseleave\", () => !this.isDisposed() && this.hoverColumn(-1)),\n    // Drag indicators\n    self.colLine = dom(\n      'div.col_indicator_line',\n      kd.show(function() { return self.cellSelector.isCurrentDragType(selector.COL); }),\n      kd.style('left', self.cellSelector.col.linePos)\n    ),\n    self.colShadow = dom(\n      'div.column_shadow',\n      kd.show(function() { return self.cellSelector.isCurrentDragType(selector.COL); }),\n      kd.style('left', function() { return (self.dragX() - self.colShadowAdjust) + 'px'; })\n    ),\n    self.rowLine = dom(\n      'div.row_indicator_line',\n      kd.show(function() { return self.cellSelector.isCurrentDragType(selector.ROW); }),\n      kd.style('top', self.cellSelector.row.linePos)\n    ),\n    self.rowShadow = dom(\n      'div.row_shadow',\n      kd.show(function() { return self.cellSelector.isCurrentDragType(selector.ROW); }),\n      kd.style('top', function() { return (self.dragY() - self.rowShadowAdjust) + 'px'; })\n    ),\n\n    self.scrollPane =\n    dom('div.grid_view_data.gridview_data_scroll.show_scrollbar',\n      kd.scrollChildIntoView(self.visibleRowIndex),\n      dom.onDispose(() => {\n        // Save the previous scroll values to the section.\n        self.viewSection.lastScrollPos = _.extend({\n          scrollLeft: self.scrollPane.scrollLeft\n        }, self.scrolly.getScrollPos());\n      }),\n\n      // COL HEADER BOX\n      dom('div.gridview_stick-top.flexhbox',   // Sticks to top, flexbox makes child enclose its contents\n        dom('div.gridview_corner_spacer'),\n\n        self.header = dom('div.gridview_data_header.flexhbox', // main header, flexbox floats contents onto a line\n\n          dom('div.column_names.record',\n            kd.style('minWidth', '100%'),\n            kd.style('borderLeftWidth', v.borderWidthPx),\n            kd.foreach(v.viewFields(), field => {\n              const isEditingLabel = koUtil.withKoUtils(ko.pureComputed({\n                read: () => {\n                  const goodIndex = () => editIndex() === field._index();\n                  const isReadonly = () => this.gristDoc.isReadonlyKo() || self.isPreview;\n                  const isSummary = () => Boolean(field.column().disableEditData());\n                  return goodIndex() && !isReadonly() && !isSummary();\n                },\n                write: val => {\n                  if (val) {\n                    // Turn on editing.\n                    editIndex(field._index());\n                  } else {\n                    // Turn off editing only if it wasn't changed to another field (e.g. by tabbing).\n                    const isCurrent = editIndex.peek() === field._index.peek();\n                    if (isCurrent) {\n                      editIndex(-1);\n                    }\n                  }\n                }\n              }).extend({ rateLimit: 0 })).onlyNotifyUnequal();\n\n              let filterTriggerCtl;\n              const isTooltip = ko.pureComputed(() =>\n                self.editingFormula() &&\n                ko.unwrap(self.hoverColumn) === field._index()\n              );\n\n              const headerTextColor = ko.computed(() => field.headerTextColor() || '');\n              const headerFillColor = ko.computed(() => field.headerFillColor() || '');\n              const headerFontBold = ko.computed(() => field.headerFontBold());\n              const headerFontItalic = ko.computed(() => field.headerFontItalic());\n              const headerFontUnderline = ko.computed(() => field.headerFontUnderline());\n              const headerFontStrikethrough = ko.computed(() => field.headerFontStrikethrough());\n\n              return dom(\n                'div.column_name.field',\n                dom.autoDispose(headerTextColor),\n                dom.autoDispose(headerFillColor),\n                dom.autoDispose(headerFontBold),\n                dom.autoDispose(headerFontItalic),\n                dom.autoDispose(headerFontUnderline),\n                dom.autoDispose(headerFontStrikethrough),\n                kd.style('--grist-header-color', headerTextColor),\n                kd.style('--grist-header-background-color', headerFillColor),\n                kd.toggleClass('font-bold', headerFontBold),\n                kd.toggleClass('font-italic', headerFontItalic),\n                kd.toggleClass('font-underline', headerFontUnderline),\n                kd.toggleClass('font-strikethrough', headerFontStrikethrough),\n                kd.style('--frozen-position', () => ko.unwrap(this.frozenPositions.at(field._index()))),\n                kd.toggleClass(\"frozen\", () => ko.unwrap(this.frozenMap.at(field._index()))),\n                dom.autoDispose(isEditingLabel),\n                dom.autoDispose(isTooltip),\n                dom.testId(\"GridView_columnLabel\"),\n                (el) => {\n                  const tooltip = new HoverColumnTooltip(el);\n                  return [\n                     dom.autoDispose(tooltip),\n                     dom.autoDispose(isTooltip.subscribe((show) => {\n                      if (show) {\n                        tooltip.show(t(`Click to insert`) + ` $${field.origCol.peek().colId.peek()}`);\n                      } else {\n                        tooltip.hide();\n                      }\n                    })),\n                  ]\n                },\n                kd.style('width', field.widthPx),\n                kd.style('borderRightWidth', v.borderWidthPx),\n                viewCommon.makeResizable(field.width, {shouldSave: !this.gristDoc.isReadonly.get()}),\n                kd.toggleClass('selected', () => ko.unwrap(this.isColSelected.at(field._index()))),\n                dom.on('contextmenu', ev => {\n                  // This is a little hack to position the menu the same way as with a click\n                  ev.preventDefault();\n                  const btn = ev.currentTarget.querySelector('.g-column-menu-btn');\n                  if (btn) { btn.click(); }\n                }),\n                dom('div.g-column-label',\n                  kd.scope(field.description, desc => desc ? descriptionInfoTooltip(desc, \"column\") : null),\n                  dom.on('mousedown', ev => isEditingLabel() ? ev.stopPropagation() : true),\n                  // We are using editableLabel here, but we don't use it for editing.\n                  kf.editableLabel(self.isPreview ? field.label : field.displayLabel, ko.observable(false)),\n                  kd.scope(field.description, desc => desc ? dom('div.g-column-label-spacer') : null),\n                  buildRenameColumn({\n                    field,\n                    isEditing: isEditingLabel,\n                    optCommands: renameCommands\n                  }),\n                ),\n                self._showTooltipOnHover(field, isTooltip),\n                self.isPreview ? null : menuToggle(null,\n                  kd.cssClass('g-column-main-menu'),\n                  kd.cssClass('g-column-menu-btn'),\n                  // Prevent mousedown on the dropdown triangle from initiating column drag.\n                  dom.on('mousedown', () => false),\n                  // Select the column if it's not part of a multiselect.\n                  dom.on('click', (ev) => this.maybeSelectColumn(ev.currentTarget.parentNode, field)),\n                  (elem) => {\n                    filterTriggerCtl = setPopupToCreateDom(\n                      elem,\n                      ctl => this._columnFilterMenu(ctl, field, {showAllFiltersButton: true}),\n                      {\n                        attach: 'body',\n                        placement: 'bottom-start',\n                        boundaries: 'viewport',\n                        trigger: [],\n                      }\n                    );\n                  },\n                  menu(ctl => this.columnContextMenu(ctl, this.getSelection(), field, filterTriggerCtl)),\n                  testId('column-menu-trigger'),\n                ),\n                dom('div.selection'),\n              );\n            }),\n            this.isPreview ? null : kd.maybe(() => !this.gristDoc.isReadonlyKo(), () => (\n              this._modField = dom('div.column_name.mod-add-column.field',\n                '+',\n                kd.style(\"width\", PLUS_WIDTH + 'px'),\n                dom.on('click', ev => {\n                  // If there are no hidden columns, clicking the plus just adds a new column.\n                  // If there are hidden columns, display a dropdown menu.\n                  if (this.viewSection.hiddenColumns().length === 0) {\n                    ev.stopImmediatePropagation(); // Don't open the menu defined below\n                    this.addNewColumn();\n                  }\n                }),\n                menu((ctl => ColumnAddMenu(this, this.viewSection)))\n              )\n            ))\n          )\n        ) //end hbox\n      ), // END COL HEADER BOX\n\n      koDomScrolly.scrolly(data, { paddingBottom: 80, paddingRight: 28 }, renderRow),\n\n      kd.maybe(this._isPrinting, () =>\n        renderAllRows(this.tableModel, this.sortedRows.getKoArray().peek(), renderRow)\n      ),\n    ) // end scrollpane\n  );// END MAIN VIEW BOX\n\n  function renderRow(row) {\n    // TODO. There are several ways to implement a cursor; similar concerns may arise\n    // when implementing selection and cell editor.\n    // (1) Class on 'div.field.field_clip'. Fewest elements, seems possibly best for\n    //     performance. Problem is: it's impossible to get cursor exactly right with a\n    //     one-sided border. Attaching a cursor as additional element inside the cell\n    //     truncates the cursor to the cell's inside because of 'overflow: hidden'.\n    // (2) 'div.field' with 'div.field_clip' inside, on which a class is toggled. This\n    //     works well. The only concern is whether this slows down rendering. Would be\n    //     good to measure and compare rendering speed.\n    //     Related: perhaps the fastest rendering would be for a table.\n    // (3) Separate element attached to the row, absolutely positioned at left\n    //     position and width of the selected cell. This works too. Requires\n    //     maintaining a list of leftOffsets (or measuring the cell's), and feels less\n    //     clean and more complicated than (2).\n\n    // IsRowActive and isCellActive are a significant optimization. IsRowActive is called\n    // for all rows when cursor.rowIndex changes, but the value only changes for two of the\n    // rows. IsCellActive is only subscribed to columns for the active row. This way, when\n    // the cursor moves, there are (rows+2*columns) calls rather than rows*columns.\n    var isRowActive = ko.computed(() => row._index() === self.cursor.rowIndex());\n\n    const computedFlags = ko.pureComputed(() => {\n      return self.viewSection.rulesColsIds().map(colRef => {\n        if (row.cells[colRef]) { return row.cells[colRef]() || false; }\n        return false;\n      });\n    });\n\n    const computedRule = koUtil.withKoUtils(ko.pureComputed(() => {\n      if (row._isAddRow() || !row.id()) { return null; }\n      const flags = computedFlags();\n      if (flags.length === 0) { return null; }\n      const styles = self.viewSection.rulesStyles() || [];\n      return { style : new CombinedStyle(styles, flags) };\n    }, this).extend({deferred: true}));\n\n    const fillColor = buildStyleOption(self, computedRule, 'fillColor');\n    const zebraColor = ko.pureComputed(() => calcZebra(fillColor()));\n    const textColor = buildStyleOption(self, computedRule, 'textColor');\n    const fontBold = buildStyleOption(self, computedRule, 'fontBold');\n    const fontItalic = buildStyleOption(self, computedRule, 'fontItalic');\n    const fontUnderline = buildStyleOption(self, computedRule, 'fontUnderline');\n    const fontStrikethrough = buildStyleOption(self, computedRule, 'fontStrikethrough');\n\n    return dom('div.gridview_row',\n      dom.autoDispose(isRowActive),\n      dom.autoDispose(computedFlags),\n      dom.autoDispose(computedRule),\n      dom.autoDispose(textColor),\n      dom.autoDispose(fillColor),\n      dom.autoDispose(zebraColor),\n      dom.autoDispose(fontBold),\n      dom.autoDispose(fontItalic),\n      dom.autoDispose(fontUnderline),\n      dom.autoDispose(fontStrikethrough),\n\n      kd.toggleClass('link_selector_row', () => self.isLinkSource() && isRowActive()),\n\n      // rowid dom\n      dom('div.gridview_data_row_num',\n        kd.style(\"width\", ROW_NUMBER_WIDTH + 'px'),\n        dom('div.gridview_data_row_info',\n          kd.toggleClass('linked_dst', () => {\n            const myRowId = row.id();\n            const linkedRowId = self.linkedRowId();\n            // Must ensure that linkedRowId is not null to avoid drawing on rows whose\n            // row ids are null.\n            return linkedRowId && linkedRowId === myRowId;\n          })\n        ),\n        kd.text(function() { return row._index() + 1; }),\n\n        kd.scope(row._validationFailures, function(failures) {\n          if (!row._isAddRow() && failures.length > 0) {\n            return dom('div.validation_error_number', failures.length,\n              kd.attr('title', function() {\n                return \"Validation failed: \" +\n                  failures.map(function(val) { return val.name(); }).join(\", \");\n              })\n            );\n          }\n        }),\n        dom.on('contextmenu', ev => {\n          // This is a little hack to position the menu the same way as with a click,\n          // the same hack as on a column menu.\n          ev.preventDefault();\n          ev.currentTarget.querySelector('.menu_toggle').click();\n        }),\n        self.isPreview ? null : menuToggle(null,\n          dom.on('click', ev => self.maybeSelectRow(ev.currentTarget.parentNode, row.getRowId())),\n          menu((ctx) => {\n            ctx.autoDispose(isRowActive.subscribe(() => ctx.close()));\n            return self.rowContextMenu();\n          }, { trigger: ['click'] }),\n          // Prevent mousedown on the dropdown triangle from initiating row drag.\n          dom.on('mousedown', () => false),\n          testId('row-menu-trigger'),\n        ),\n        kd.toggleClass('selected', () =>\n          !row._isAddRow() && self.cellSelector.isRowSelected(row._index())),\n      ),\n      dom('div.record',\n        kd.toggleClass('record-add', row._isAddRow),\n        kd.style('borderLeftWidth', v.borderWidthPx),\n        kd.style('borderBottomWidth', v.borderWidthPx),\n        kd.toggleClass('font-bold', fontBold),\n        kd.toggleClass('font-underline', fontUnderline),\n        kd.toggleClass('font-italic', fontItalic),\n        kd.toggleClass('font-strikethrough', fontStrikethrough),\n        kd.style('--grist-row-rule-background-color', fillColor),\n        kd.style('--grist-row-rule-background-color-zebra', zebraColor),\n        kd.style('--grist-row-color', textColor),\n        //These are grabbed from v.optionsObj at start of GridView buildDom\n        kd.toggleClass('record-hlines', vHorizontalGridlines),\n        kd.toggleClass('record-vlines', vVerticalGridlines),\n        kd.toggleClass('record-zebra', vZebraStripes),\n        // even by 1-indexed rownum, so +1 (makes more sense for user-facing display stuff)\n        kd.toggleClass('record-even', () => (row._index()+1) % 2 === 0 ),\n        dom.on(\"mouseleave\", (ev) => {\n          // Leave only when leaving record row.\n          if (!ev.relatedTarget || !ev.relatedTarget.classList.contains(\"record\")){\n            self.changeHover(-1);\n          }\n        }),\n        self.isPreview ? null : contextMenu((ctx) => {\n          // We need to close the menu when the row is removed, but the dom of the row is not\n          // disposed when the record is removed (this is probably due to how scrolly work). Hence,\n          // we need to subscribe to `isRowActive` to close the menu.\n          ctx.autoDispose(isRowActive.subscribe(() => ctx.close()));\n          return self.cellContextMenu();\n        }),\n        self.comparison ? kd.cssClass(() => {\n          const rowType = self.extraRows.getRowType(row.id());\n          return rowType && `diff-${rowType}` || '';\n        }) : null,\n\n        kd.foreach(v.viewFields(), function(field) {\n          // Whether the cell has a cursor (possibly in an inactive view section).\n          var isCellSelected = ko.computed(() =>\n            isRowActive() && field._index() === self.cursor.fieldIndex());\n\n          // Whether the cell is active: has the cursor in the active section.\n          var isCellActive = ko.computed(() => isCellSelected() && v.hasFocus());\n\n          // Whether the cell is part of an active copy-paste operation.\n          var isCopyActive = ko.computed(function() {\n            return self.copySelection() &&\n              self.copySelection().isCellSelected(row.id(), field.colId());\n          });\n          var fieldBuilder = self.fieldBuilders.at(field._index());\n          var isSelected = ko.computed(() => {\n            return !row._isAddRow() &&\n              !self.cellSelector.isCurrentSelectType(selector.NONE) &&\n              ko.unwrap(self.isColSelected.at(field._index())) &&\n              self.cellSelector.isRowSelected(row._index());\n          });\n\n          var isTooltip = ko.pureComputed(() =>\n            self.editingFormula() &&\n            ko.unwrap(self.hoverColumn) === field._index()\n          );\n\n          return dom(\n            'div.field',\n            kd.style('--frozen-position', () => ko.unwrap(self.frozenPositions.at(field._index()))),\n            kd.toggleClass(\"frozen\", () => ko.unwrap(self.frozenMap.at(field._index()))),\n            kd.toggleClass('scissors', isCopyActive),\n            dom.autoDispose(isCopyActive),\n            dom.autoDispose(isCellSelected),\n            dom.autoDispose(isCellActive),\n            dom.autoDispose(isSelected),\n            self._showTooltipOnHover(field, isTooltip),\n            kd.style('width', field.widthPx),\n            //TODO: Ensure that fields in a row resize when\n            //a cell in that row becomes larger\n            kd.style('borderRightWidth', v.borderWidthPx),\n\n            kd.toggleClass('selected', isSelected),\n            fieldBuilder.buildDomWithCursor(row, isCellActive, isCellSelected),\n            dom('div.selection'),\n          );\n        })\n      )\n    );\n  }\n};\n\n/** @inheritdoc */\nGridView.prototype.onResize = function() {\n  const activeFieldBuilder = this.activeFieldBuilder();\n  let height = null;\n  if (isNarrowScreen()) {\n    height = window.outerHeight;\n  }\n  if (activeFieldBuilder && activeFieldBuilder.isEditorActive()) {\n    // When the editor is active, the common case for a resize is if the virtual keyboard is being\n    // shown on mobile device. In that case, we need to scroll active cell into view, and need to\n    // do it synchronously, to allow repositioning the editor to it in response to the same event.\n    this.scrolly.updateSize(height);\n    this.scrolly.scrollRowIntoView(this.cursor.rowIndex.peek());\n  } else {\n    this.scrolly.scheduleUpdateSize(height);\n  }\n  this.width(this.scrollPane.clientWidth)\n};\n\n/** @inheritdoc */\nGridView.prototype.onRowResize = function(rowModels) {\n  this.scrolly.resetItemHeights(rowModels);\n};\n\nGridView.prototype.onLinkFilterChange = function(rowId) {\n  BaseView.prototype.onLinkFilterChange.call(this, rowId);\n  this.clearSelection();\n};\n\nGridView.prototype.onCellContextMenu = function(ev, elem) {\n  let row = this.domToRowModel(elem, selector.CELL);\n  let col = this.domToColModel(elem, selector.CELL);\n\n  if (this.cellSelector.containsCell(row._index(), col._index())) {\n    // contextmenu event could be preceded by a mousedown event (ie: when ctrl+click on\n    // mac) which triggers a cursor assignment that we need to prevent.\n    this.preventAssignCursor();\n  } else {\n    this.assignCursor(elem, selector.NONE);\n  }\n}\n\n// ======================================================================================\n// SELECTOR STUFF\n\n/**\n * Returns a pure computed boolean that determines whether the given column is selected.\n * @param {view field object} col - the column to create an observable for\n **/\nGridView.prototype._createColSelectedObs = function(col) {\n  return ko.pureComputed(function() {\n    return this.cellSelector.isCurrentSelectType(selector.ROW) ||\n           gutil.between(col._index(), this.cellSelector.col.start(),\n                         this.cellSelector.col.end());\n  }, this);\n};\n\n// Callbacks for mouse events for the selector object\n\nGridView.prototype.cellMouseDown = function(elem, event) {\n  let col = this.domToColModel(elem, selector.CELL);\n  if (this.hoverColumn() === col._index()) {\n    return this._tooltipMouseDown(elem, selector.CELL);\n  }\n\n  if (event.shiftKey) {\n    // Change focus before running command so that the correct viewsection's cursor is moved.\n    this.viewSection.hasFocus(true);\n    let row = this.domToRowModel(elem, selector.CELL);\n    this.cellSelector.selectArea(this.cursor.rowIndex(), this.cursor.fieldIndex(),\n                                 row._index(), col._index());\n  } else {\n    this.assignCursor(elem, selector.NONE);\n  }\n};\n\nGridView.prototype.colMouseDown = function(elem, event) {\n  let col = this.domToColModel(elem, selector.COL);\n  if (this.hoverColumn() === col._index()) {\n    return this._tooltipMouseDown(elem, selector.COL);\n  }\n\n  this._colClickTime = Date.now();\n  this.assignCursor(elem, selector.COL);\n  // Clicking the column header selects all rows except the add row.\n  this.cellSelector.row.end(this.getLastDataRowIndex());\n};\n\nGridView.prototype._tooltipMouseDown = function(elem, elemType) {\n  let row = this.domToRowModel(elem, elemType);\n  let col = this.domToColModel(elem, elemType);\n  // FormulaEditor.ts overrides this command to insert the column id of the clicked column.\n  commands.allCommands.setCursor.run(row, col);\n};\n\nGridView.prototype.rowMouseDown = function(elem, event) {\n  if (event.shiftKey) {\n    this.cellSelector.currentSelectType(selector.ROW);\n    this.cellSelector.row.end(this.currentMouseRow(event.pageY));\n  } else {\n    this.assignCursor(elem, selector.ROW);\n  }\n};\n\nGridView.prototype.rowMouseMove = function(event) {\n  this.cellSelector.row.end(this.currentMouseRow(event.pageY));\n};\n\nGridView.prototype.colMouseMove = function(event) {\n  if (this.editingFormula()) { return; }\n\n  var currentCol = Math.min(this.getMousePosCol(event.pageX),\n                            this.viewSection.viewFields().peekLength - 1);\n  this.cellSelector.col.end(currentCol);\n};\n\nGridView.prototype.cellMouseMove = function(event) {\n  if (this.editingFormula()) { return; }\n\n  this.colMouseMove(event);\n  this.rowMouseMove(event);\n  // Maintain single cells cannot be selected invariant\n  if (this.cellSelector.onlyCellSelected(this.cursor.rowIndex(), this.cursor.fieldIndex())) {\n    this.cellSelector.currentSelectType(selector.NONE);\n  } else {\n    this.cellSelector.currentSelectType(selector.CELL);\n  }\n};\n\nGridView.prototype.createSelector = function() {\n  this.cellSelector = new selector.CellSelector(this);\n};\n\n// buildDom needs some of the row/col/cell selector observables to exist beforehand\n// but we can't attach any of the mouse handlers in the Selector class until the\n// dom elements exist so we attach the selector handlers separately from instantiation\nGridView.prototype.attachSelectorHandlers = function () {\n  const ignoreEvent = (event, elem) => (\n    event.button !== 0 ||\n    event.target.classList.contains('ui-resizable-handle') ||\n    // This is a bit of a hack to prevent dragging when there's an open column menu\n    // TODO: disable dragging when there is an open cell context menu as well\n    !this.ctxMenuHolder.isEmpty()\n  );\n\n  this.autoDispose(mouseDragMatchElem(this.viewPane, '.gridview_data_row_num', (event, elem) => {\n    if (!ignoreEvent(event, elem)) {\n      if (!this.cellSelector.isSelected(elem, selector.ROW)) {\n        this.rowMouseDown(elem, event);\n        return {\n          onMove: (ev) => this.rowMouseMove(ev),\n          onStop: (ev) => {},\n        };\n      } else if (!this.viewSection.disableDragRows()) {\n        this.styleRowDragElements(elem, event);\n        return {\n          onMove: (ev) => this.dragRows(ev),\n          onStop: (ev) => this.dropRows(),\n        };\n      }\n    }\n  }));\n\n  // Trigger on column headings but not on the add column button\n  this.autoDispose(mouseDragMatchElem(this.viewPane, '.column_name.field:not(.mod-add-column)', (event, elem) => {\n    if (!ignoreEvent(event, elem)) {\n      if (!this.cellSelector.isSelected(elem, selector.COL)) {\n        this.colMouseDown(elem, event);\n        return {\n          onMove: (ev) => this.colMouseMove(ev),\n          onStop: (ev) => {},\n        };\n      } else {\n        this.styleColDragElements(elem, event);\n        return {\n          onMove: (ev) => this.dragCols(ev),\n          onStop: (ev) => this.dropCols(),\n        };\n      }\n    }\n  }));\n\n  this.autoDispose(mouseDragMatchElem(this.scrollPane, '.field:not(.column_name)', (event, elem) => {\n    if (!ignoreEvent(event, elem)) {\n      // TODO: should always enable\n      if (!this.cellSelector.isSelected(elem, selector.CELL)) {\n        this.cellMouseDown(elem, event);\n        return {\n          onMove: (ev) => this.cellMouseMove(ev),\n          onStop: (ev) => {},\n        }\n      } else { // TODO: if true above, this will never come into play.\n        this.scheduleAssignCursor(elem, selector.NONE);\n        return {\n          onMove: (ev) => {},\n          onStop: (ev) => { this.cellSelector.currentDragType(selector.NONE); },\n        };\n      }\n    }\n  }));\n}\n\n// End of Selector stuff\n\n// ============================================================================\n// DRAGGING LOGIC\n\nGridView.prototype.styleRowDragElements = function(elem, event) {\n  var rowStart = this.cellSelector.rowLower();\n  var rowEnd = this.cellSelector.rowUpper();\n  var shadowHeight = this.scrolly.rowOffsetTree.getCumulativeValueRange(rowStart, rowEnd+1);\n  var shadowTop = (this.header.getBoundingClientRect().height +\n                   this.scrolly.rowOffsetTree.getSumTo(rowStart) - this.scrollTop());\n\n  this.rowLine.style.top = shadowTop + 'px';\n  this.rowShadow.style.top = shadowTop + 'px';\n  this.rowShadow.style.height = shadowHeight + 'px';\n  this.rowShadowAdjust = event.pageY - shadowTop;\n  this.cellSelector.currentDragType(selector.ROW);\n  this.cellSelector.row.dropIndex(this.cellSelector.rowLower());\n};\n\nGridView.prototype.styleColDragElements = function(elem, event) {\n  this._colClickTime = Date.now();\n  var colStart = this.cellSelector.colLower();\n  var colEnd = this.cellSelector.colUpper();\n  var shadowWidth = this.colRightOffsets.peek().getCumulativeValueRange(colStart, colEnd+1);\n  var viewDataNumsWidth = $('.gridview_corner_spacer').width();\n  var shadowLeft = (viewDataNumsWidth + this.colRightOffsets.peek().getSumTo(colStart) - this.scrollLeft());\n\n  this.colLine.style.left = shadowLeft + 'px';\n  this.colShadow.style.left = shadowLeft + 'px';\n  this.colShadow.style.width = shadowWidth + 'px';\n  this.colShadowAdjust = event.pageX - shadowLeft;\n  this.cellSelector.currentDragType(selector.COL);\n  this.cellSelector.col.dropIndex(this.cellSelector.colLower());\n};\n\n/**\n * GridView.dragRows/dragCols update the row/col shadow and row/col indicator line on mousemove events.\n * Rules for determining where the indicator line should show while dragging cols/rows:\n * 0) The indicator line should not appear after the special add-row.\n * 1) If the mouse position is within the selected range -> the indicator line should show\n *    at the left offset of the start of the select range\n * 2) If the mouse position comes after the select range -> increment the computed dropIndex by 1\n * 3) If the last col/row is in the select range, the indicator line should be clamped to the start of the\n *    select range.\n **/\nGridView.prototype.dragRows = function(event) {\n  var dropIndex = Math.min(this.getMousePosRow(event.pageY + this.scrollTop()),\n                           this.getLastDataRowIndex());\n  if (this.cellSelector.containsRow(dropIndex)) {\n    dropIndex = this.cellSelector.rowLower();\n  } else if (dropIndex > this.cellSelector.rowUpper()) {\n    dropIndex += 1;\n  }\n  if (this.cellSelector.rowUpper() === this.viewData.peekLength - 1) {\n    dropIndex = Math.min(dropIndex, this.cellSelector.rowLower());\n  }\n\n  var linePos = this.scrolly.rowOffsetTree.getSumTo(dropIndex) +\n               this.header.getBoundingClientRect().height - this.scrollTop();\n  this.cellSelector.row.linePos(linePos + 'px');\n  this.cellSelector.row.dropIndex(dropIndex);\n  this.dragY(event.pageY);\n};\n\nGridView.prototype.dragCols = function(event) {\n  let dropIndex = Math.min(this.getMousePosCol(event.pageX),\n                           this.viewSection.viewFields().peekLength - 1);\n  if (this.cellSelector.containsCol(dropIndex)) {\n    dropIndex = this.cellSelector.colLower();\n  } else if (dropIndex > this.cellSelector.colUpper()) {\n    dropIndex += 1;\n  }\n  if (this.cellSelector.colUpper() === this.viewSection.viewFields().peekLength - 1) {\n    dropIndex = Math.min(dropIndex, this.cellSelector.colLower());\n  }\n\n  const viewDataNumsWidth = $('.gridview_corner_spacer').width();\n  let linePos = viewDataNumsWidth + this.colRightOffsets.peek().getSumTo(dropIndex);\n  // If there are frozen columns and dropIndex (column index) is inside the frozen set.\n  const frozenCount = this.numFrozen();\n  const inFrozen = frozenCount > 0 && dropIndex < frozenCount;\n  const scrollLeft = this.scrollLeft();\n  // Move line left by the number of pixels the frozen set is scrolled.\n  if (inFrozen) {\n    linePos -= Math.min(this.frozenOffset.peek(), scrollLeft);\n  } else {\n    // Else move left by the whole amount.\n    linePos -= scrollLeft;\n  }\n  this.cellSelector.col.linePos(linePos + 'px');\n  this.cellSelector.col.dropIndex(dropIndex);\n  this.dragX(event.pageX);\n};\n\nGridView.prototype.dropRows = function() {\n  var oldIndices = _.range(this.cellSelector.rowLower(), this.cellSelector.rowUpper() + 1);\n  this.moveRows(oldIndices, this.cellSelector.row.dropIndex());\n  this.cellSelector.currentDragType(selector.NONE);\n};\n\nGridView.prototype.dropCols = function() {\n  var oldIndices = _.range(this.cellSelector.colLower(), this.cellSelector.colUpper() + 1);\n  const idx = this.cellSelector.col.dropIndex();\n  this.moveColumns(oldIndices, idx);\n  // If this was a short click on a single already-selected column that results in no\n  // column movement, propose renaming the column.\n  if (Date.now() - this._colClickTime < SHORT_CLICK_IN_MS && oldIndices.length === 1 &&\n      idx === oldIndices[0]) {\n    commands.allCommands.renameField.run();\n  }\n  this._colClickTime = 0;\n  this.cellSelector.currentDragType(selector.NONE);\n};\n\n// End of Dragging logic\n\n\n// ===========================================================================\n// CONTEXT MENUS\n\nGridView.prototype.columnContextMenu = function(ctl, copySelection, field, filterTriggerCtl) {\n  const selectedColIds = copySelection.colIds;\n  this.ctxMenuHolder.autoDispose(ctl);\n  const options = this._getColumnMenuOptions(copySelection);\n\n  if (selectedColIds.length > 1 && selectedColIds.includes(field.column().colId())) {\n    return MultiColumnMenu(options);\n  } else {\n    return ColumnContextMenu({\n      filterOpenFunc: () => filterTriggerCtl.open(),\n      sortSpec: this.gristDoc.viewModel.activeSection.peek().activeSortSpec.peek(),\n      colId: field.column.peek().id.peek(),\n      ...options,\n    });\n  }\n};\n\nGridView.prototype._getColumnMenuOptions = function(copySelection) {\n  return {\n    columnIndices: copySelection.fields.map(f => f._index()),\n    totalColumnCount : this.viewSection.viewFields.peek().peekLength,\n    numColumns: copySelection.fields.length,\n    numFrozen: this.viewSection.numFrozen.peek(),\n    disableModify: calcFieldsCondition(copySelection.fields, f => f.disableModify.peek()),\n    isReadonly: this.gristDoc.isReadonly.get() || this.isPreview,\n    isRaw: this.viewSection.isRaw(),\n    isFiltered: this.isFiltered(),\n    isFormula: calcFieldsCondition(copySelection.fields, f => f.column.peek().isRealFormula.peek()),\n  };\n}\n\nGridView.prototype._columnFilterMenu = function(ctl, field, options) {\n  this.ctxMenuHolder.autoDispose(ctl);\n  const filterInfo = this.viewSection.filters()\n    .find(({fieldOrColumn}) => fieldOrColumn.origCol().origColRef() === field.column().origColRef());\n  if (!filterInfo.isFiltered.peek()) {\n    // This is a new filter - initialize its spec and pin it.\n    this.viewSection.setFilter(filterInfo.fieldOrColumn.origCol().origColRef(), {\n      filter: NEW_FILTER_JSON,\n      pinned: true,\n    });\n  }\n  return this.createFilterMenu(ctl, filterInfo, options);\n};\n\nGridView.prototype.maybeSelectColumn = function (elem, field) {\n  // Change focus before running command so that the correct viewsection's cursor is moved.\n  this.viewSection.hasFocus(true);\n  const selectedColIds = this.getSelection().colIds;\n  if (selectedColIds.length > 1 && selectedColIds.includes(field.column().colId())) {\n    return; // No need to select the column because it's included in the multi-selection\n  }\n  this.assignCursor(elem, selector.COL);\n};\n\nGridView.prototype.maybeSelectRow = function(elem, rowId) {\n  // Change focus before running command so that the correct viewsection's cursor is moved.\n  this.viewSection.hasFocus(true);\n  // If the clicked row was not already in the selection, move the selection to the row.\n  if (!this.getSelection().rowIds.includes(rowId)) {\n    this.assignCursor(elem, selector.ROW);\n  }\n};\n\nGridView.prototype.rowContextMenu = function() {\n  return RowContextMenu(this._getRowContextMenuOptions());\n};\n\nGridView.prototype._getRowContextMenuOptions = function() {\n  return {\n    disableInsert: Boolean(this.gristDoc.isReadonly.get() || this.viewSection.disableAddRemoveRows() || this.tableModel.tableMetaRow.onDemand()),\n    disableDelete: Boolean(this.gristDoc.isReadonly.get() || this.viewSection.disableAddRemoveRows() || this.getSelection().onlyAddRowSelected()),\n    isViewSorted: this.viewSection.activeSortSpec.peek().length > 0,\n    numRows: this.getSelection().rowIds.length,\n  };\n};\n\nGridView.prototype.cellContextMenu = function() {\n  return CellContextMenu(\n    this._getRowContextMenuOptions(),\n    this._getColumnMenuOptions(this.getSelection())\n  );\n};\n\n// End Context Menus\n\nGridView.prototype.scrollToCursor = function(sync = true) {\n  return kd.doScrollChildIntoView(this.scrollPane, this.cursor.rowIndex(), sync);\n}\n\nGridView.prototype._duplicateRows = async function() {\n  const addRowIds = await BaseView.prototype._duplicateRows.call(this);\n  // Highlight duplicated rows if the grid is not sorted (or the sort doesn't affect rowIndex).\n  const topRowIndex = this.viewData.getRowIndex(addRowIds[0]);\n  // Set row on the first record added.\n  this.setCursorPos({rowId: addRowIds[0]});\n  // Highlight inserted area (if we inserted rows in correct order)\n  if (addRowIds.every((r, i) => r === this.viewData.getRowId(topRowIndex + i))) {\n    this.cellSelector.selectArea(topRowIndex, 0,\n      topRowIndex + addRowIds.length - 1, this.viewSection.viewFields().peekLength - 1);\n  }\n}\n\nGridView.prototype._clearCopySelection = function() {\n  this.copySelection(null);\n};\n\nGridView.prototype._showTooltipOnHover = function(field, isShowingTooltip) {\n  return [\n    kd.toggleClass(\"hover-column\", isShowingTooltip),\n    dom.on('mouseenter', () => {\n      this.changeHover(field._index());\n    }),\n    dom.on('mousedown', (ev) => {\n      if (isShowingTooltip()) {\n        ev.preventDefault();\n      }\n    }),\n  ];\n};\n\nfunction buildStyleOption(owner, computedRule, optionName) {\n  return ko.computed(() => {\n    if (owner.isDisposed()) { return null; }\n    const rule = computedRule();\n    if (!rule || !rule.style) { return ''; }\n    return rule.style[optionName] || '';\n  });\n}\n\n// Helper to show tooltip over column selection in the full edit mode.\nclass HoverColumnTooltip {\n  constructor(el) {\n    this.el = el;\n  }\n  show(text) {\n    this.hide();\n    this.tooltip = showTooltip(this.el, () => dom(\"span\", text, testId(\"column-formula-tooltip\")))\n  }\n  hide() {\n    if (this.tooltip ) {\n      this.tooltip.close();\n      this.tooltip = null;\n    }\n  }\n  dispose() {\n    this.hide();\n  }\n}\n\n// Simple function that calculates good color for zebra stripes.\nfunction calcZebra(hex) {\n  if (!hex || hex.length !== 7) { return hex; }\n  // HSL: [HUE, SATURATION, LIGHTNESS]\n  const hsl = convert.hex.hsl(hex.substr(1));\n  // For bright color, we will make it darker. Value was picked by hand, to\n  // produce #f8f8f8f out of #ffffff.\n  if (hsl[2] > 50) { hsl[2] -= 2.6; }\n  // For darker color, we will make it brighter. Value was picked by hand to look\n  // good for the darkest colors in our palette.\n  else if (hsl[2] > 1) { hsl[2] += 11; }\n  // For very dark colors\n  else { hsl[2] += 16; }\n  return `#${convert.hsl.hex(hsl)}`;\n}\n\nmodule.exports = GridView;\n","/**\n * Module for displaying a record of user data in a two-dimentional editable layout.\n */\n\n\n// TODO:\n// 1. Consider a way to upgrade a file to add layoutSpec column to the ViewSections meta table.\n//    Plan: add docInfo schemaVersion field.\n//          when opening a file, let the sandbox check the version and check if loaded metadata matches the schema.\n//          sandbox should return doc-version, current-version, and match status.\n//          if current-version != doc_version [AND mismatch] (this is optional, let's think if we\n//              want that), then\n//            Sandbox creates new temp document\n//            Replays action log into it.\n//            Renames it over the old document. [Would be nice to ask the user first]\n//            Reopen document\n// 1. [LATER] Create RecordLayout file with APIs to support more efficient big list of laid-out\n//    records (so that a single RecordLayout can maintain many Layout instances).\n// 2. [LATER] Allow dragging in boxes from the view config.\n// 3. [LATER] Allow creating new field and inserting at the bottom.\n// 4. [LATER] Allow selecting existing field from context menu and inserting.\n// 5. [LATER] Add interface to Layout to tab forward and back, left, right, up, down, and use that in\n//    detail view.\n// 6. [LATER] Implement saving and loading of widths in the layout spec.\n\nvar _ = require('underscore');\nvar ko = require('knockout');\nvar Promise = require('bluebird');\n\nvar gutil = require('app/common/gutil');\nvar dispose = require('../lib/dispose');\nvar dom = require('../lib/dom');\nvar {Delay} = require('../lib/Delay');\nvar kd = require('../lib/koDom');\nvar {makeT} = require('../lib/localization');\nvar Layout = require('./Layout');\nvar RecordLayoutEditor = require('./RecordLayoutEditor');\nvar commands = require('./commands');\nvar {menuToggle} = require('app/client/ui/MenuToggle');\nvar {menu} = require('../ui2018/menus');\nvar {testId} = require('app/client/ui2018/cssVars');\nvar {contextMenu} = require('app/client/ui/contextMenu');\n\nconst t = makeT('RecordLayout');\n\n/**\n * Construct a RecordLayout.\n * @param {MetaRowModel} options.viewSection: The model for the viewSection represented.\n * @param {Function} options.buildFieldDom: Function called with (viewField) that should\n *    return the DOM for that field.\n * @param {Function} options.resizeCallback: Optional function called with no arguments when\n *    the RecordLayout is modified in a way that may require resizing.\n */\nfunction RecordLayout(options) {\n  this.viewSection = options.viewSection;\n  this.buildFieldDom = options.buildFieldDom;\n  this.buildRowContextMenu = options.buildRowContextMenu;\n  this.buildFieldContextMenu = options.buildFieldContextMenu;\n  this.isEditingLayout = ko.observable(false);\n  this.editIndex = ko.observable(0);\n  this.layoutEditor = ko.observable(null);    // RecordLayoutEditor when one is active.\n\n  if (options.resizeCallback) {\n    this._resizeCallback = options.resizeCallback;\n    this._delayedResize = this.autoDispose(Delay.create());\n  }\n\n  // Observable object that will be rebuilt whenever the list of viewFields changes.\n  this.fieldsById = this.autoDispose(ko.computed(function() {\n    return _.indexBy(this.viewSection.viewFields().all(),\n      function(field) { return field.getRowId(); });\n  }, this));\n\n  // Update the stored layoutSpecObj with any missing fields that are present in viewFields.\n  this.layoutSpec = this.autoDispose(ko.computed(function() {\n    if (this.viewSection.isDisposed()) { return null; }\n    return RecordLayout.updateLayoutSpecWithFields(\n      this.viewSection.layoutSpecObj(), this.viewSection.viewFields().all());\n  }, this).extend({rateLimit: 0})); // layoutSpecObj and viewFields should be updated together.\n  this.autoDispose(this.layoutSpec.subscribe(() => this.resizeCallback()));\n\n  // TODO: We may want a context menu for each record, but the previous implementation wasn't\n  // working, and was creating a separate context menu for each row, which is very expensive. A\n  // better approach is to create a single context menu for the view section, as GridView does.\n}\ndispose.makeDisposable(RecordLayout);\n\n\nRecordLayout.prototype.resizeCallback = function() {\n  // Note that while editing layout, scrolly is hidden, and resizeCallback is unhelpful. We rely\n  // on explicit resizing when isEditLayout is reset.\n  if (!this.isDisposed() && this._delayedResize && !this.isEditingLayout.peek()) {\n    this._delayedResize.schedule(0, this._resizeCallback);\n  }\n};\n\nRecordLayout.prototype.getField = function(fieldRowId) {\n  // If fieldRowId is a string which includes \":\", then it's actually \"colRef:label:value\"\n  // placeholder that we use when adding a new field. If so, return a special object with the fields\n  // available. Note that virtual tables also produces string fieldRowId but they have no \":\".\n  if (typeof fieldRowId === 'string' && fieldRowId.includes(':')) {\n    var parts = gutil.maxsplit(fieldRowId, \":\", 2);\n    return {\n      isNewField: true,        // To make it easy to distinguish from a ViewField MetaRowModel\n      colRef: parseInt(parts[0], 10),\n      label: parts[1],\n      value: parts[2]\n    };\n  }\n  return this.fieldsById()[fieldRowId];\n};\n\n\n/**\n * Sets the layout to being edited.\n */\nRecordLayout.prototype.editLayout = function(rowIndex) {\n  this.editIndex(rowIndex);\n  this.isEditingLayout(true);\n};\n\n/**\n * Ends layout editing, without updating the layout on the server.\n */\nRecordLayout.prototype.onEditLayoutCancel = function(layoutSpec) {\n  this.isEditingLayout(false);\n  // Call resizeCallback here, since it's possible that theme was also changed (and auto-saved)\n  // even though the layout itself was reverted.\n  this.resizeCallback();\n};\n\n/**\n * Ends layout editing, and saves the given layoutSpec to the server.\n */\nRecordLayout.prototype.onEditLayoutSave = async function(layoutSpec) {\n  try {\n    await this.saveLayoutSpec(layoutSpec);\n  } finally {\n    this.isEditingLayout(false);\n    this.resizeCallback();\n  }\n};\n\n/**\n * If there is no layout saved, we can create a default layout just from the list of fields for\n * this view section. By default we just arrange them into a list of rows, two fields per row.\n */\nRecordLayout.updateLayoutSpecWithFields = function(spec, viewFields) {\n  // We use tmpLayout as a way to manipulate the layout before we get a final spec from it.\n  var tmpLayout = Layout.Layout.create(spec, function(leafId) { return dom('div'); });\n\n  var specFieldIds = tmpLayout.getAllLeafIds();\n  var viewFieldIds = viewFields.map(function(f) { return f.getRowId(); });\n\n  // For any stale fields (no longer among viewFields), remove them from tmpLayout.\n  _.difference(specFieldIds, viewFieldIds).forEach(function(leafId) {\n    tmpLayout.getLeafBox(leafId).dispose();\n  });\n\n  // For all fields that should be in the spec but aren't, add them to tmpLayout. We maintain a\n  // two-column layout, so add a new row, or a second box to the last row if it's a leaf.\n  _.difference(viewFieldIds, specFieldIds).forEach(function(leafId) {\n    var newBox = tmpLayout.buildLayoutBox({ leaf: leafId });\n    var rows = tmpLayout.rootBox().childBoxes.peek();\n    if (rows.length >= 1 && _.last(rows).isLeaf()) {\n      // Add a new child to the last row.\n      _.last(rows).addChild(newBox, true);\n    } else {\n      // Add a new row.\n      tmpLayout.rootBox().addChild(newBox, true);\n    }\n  });\n\n  spec = tmpLayout.getLayoutSpec();\n  tmpLayout.dispose();\n  return spec;\n};\n\n/**\n * Saves the layout spec as build by the user. This is quite involved, because it may need to\n * remove fields as well as create fields and possibly new columns. And it needs the results of\n * these operations to update the spec before saving it.\n */\nRecordLayout.prototype.saveLayoutSpec = async function(layoutSpec) {\n  // The layout hasn't actually changed. Skip the rest to avoid creating no-op actions (the\n  // resulting no-op undo would be particularly confusing).\n  if (JSON.stringify(layoutSpec) === this.viewSection.layoutSpec.peek()) {\n    return;\n  }\n\n  const docModel = this.viewSection._table.docModel;\n  const docData = docModel.docData;\n  const tableId = this.viewSection.table().tableId();\n  const getField = fieldRef => this.getField(fieldRef);\n  const addColAction = [\"AddColumn\", null, {}];\n\n  // Build a set of fieldRefs (i.e. rowIds) that are currently stored. Also build a map of colRef\n  // to fieldRef, so that we can restore a field that got removed and re-added (as a colRef).\n  var origRefs = [];\n  var colRefToFieldRef = new Map();\n  this.viewSection.viewFields().all().forEach(f => {\n    origRefs.push(f.getRowId());\n    colRefToFieldRef.set(f.colRef(), f.getRowId());\n  });\n\n  // Initialize leaf index counter and num cols to be added counter.\n  var nextPos = 0;\n  var addColNum = 0;\n\n  // Initialize arrays to keep track of existing field refs and their updated positions.\n  var existingRefs = [];\n  var existingPositions = [];\n\n  // Initialize arrays to keep track of added fields for existing but hidden columns.\n  var hiddenColRefs = [];\n  var hiddenCallbacks = [];\n  var hiddenPositions = [];\n\n  // Initialize arrays to keep track of newly added columns.\n  var addedCallbacks = [];\n  var addedPositions = [];\n\n  // Recursively process all layoutBoxes in the spec. Sets up bookkeeping arrays for\n  // existing fields and added fields for new/hidden cols from which the action bundle will\n  // be created.\n  function processBox(spec) {\n    // \"empty\" is a temporary placeholder used by LayoutEditor, and not a valid leaf.\n    if (spec.leaf && spec.leaf !== \"empty\") {\n      let pos = nextPos++;\n      let field = getField(spec.leaf);\n      let updateLeaf = ref => { spec.leaf = ref; };\n      if (!field.isNewField) {\n        // Existing field.\n        existingRefs.push(field.getRowId());\n        existingPositions.push(pos);\n      } else if (colRefToFieldRef.has(field.colRef)) {\n        // Existing field that got removed and re-added.\n        let fieldRef = colRefToFieldRef.get(field.colRef);\n        existingRefs.push(fieldRef);\n        existingPositions.push(pos);\n        updateLeaf(fieldRef);\n      } else if (Number.isNaN(field.colRef)) {\n        // We need to add a new column AND field.\n        addColNum++;\n        addedCallbacks.push(updateLeaf);\n        addedPositions.push(pos);\n      } else {\n        // We need to add a field for an existing column.\n        hiddenColRefs.push(field.colRef);\n        hiddenCallbacks.push(updateLeaf);\n        hiddenPositions.push(pos);\n      }\n    }\n    if (spec.children) {\n      spec.children.map(processBox);\n    }\n  }\n  processBox(layoutSpec);\n\n  // Combine data for item which require both new columns and new fields and only new fields,\n  // with items which require new columns first.\n  let callbacks = addedCallbacks.concat(hiddenCallbacks);\n  let positions = addedPositions.concat(hiddenPositions);\n\n  // Use separate copies of addColAction, since sendTableActions modified each in-place.\n  let addActions = gutil.arrayRepeat(addColNum, 0).map(() => addColAction.slice());\n\n  await docData.bundleActions(t(\"Updating record layout.\"), () => {\n    return Promise.try(() => {\n      return addColNum > 0 ? docModel.dataTables[tableId].sendTableActions(addActions) : [];\n    })\n    .then(results => {\n      let colRefs = results.map(r => r.colRef).concat(hiddenColRefs);\n      const addFieldNum = colRefs.length;\n      // Add fields for newly added columns and previously hidden columns.\n      return addFieldNum > 0 ?\n        docModel.viewFields.sendTableAction([\"BulkAddRecord\", gutil.arrayRepeat(addFieldNum, null), {\n          parentId: gutil.arrayRepeat(addFieldNum, this.viewSection.getRowId()),\n          colRef: colRefs,\n          parentPos: positions\n        }]) : [];\n    })\n    .each((fieldRef, i) => {\n      // Call the stored callback for each fieldRef, which each set the correct layoutSpec leaf\n      // to the newly obtained fieldRef.\n      callbacks[i](fieldRef);\n    })\n    .then(addedRefs => {\n      let actions = [];\n\n      // Records present before that were not present after editing must be removed.\n      let finishedRefs = new Set(existingRefs.concat(addedRefs));\n      let removed = origRefs.filter(fieldRef => !finishedRefs.has(fieldRef));\n      if (removed.length > 0) {\n        actions.push([\"BulkRemoveRecord\", \"_grist_Views_section_field\", removed]);\n      }\n\n      // Positions must be updated for fields which were not added/removed.\n      if (existingRefs.length > 0) {\n        actions.push([\"BulkUpdateRecord\", \"_grist_Views_section_field\", existingRefs, {\n          \"parentPos\": existingPositions\n        }]);\n      }\n\n      // And update the layoutSpecObj itself.\n      actions.push([\"UpdateRecord\", \"_grist_Views_section\", this.viewSection.getRowId(), {\n        \"layoutSpec\": JSON.stringify(layoutSpec)\n      }]);\n\n      return docData.sendActions(actions);\n    })\n  });\n};\n\n/**\n * Builds the Layout dom for a single record.\n */\nRecordLayout.prototype.buildLayoutDom = function(row, optCreateEditor) {\n  const createEditor = Boolean(optCreateEditor && !this.layoutEditor.peek());\n\n  const layout = Layout.Layout.create(this.layoutSpec(), (fieldRowId) =>\n    dom('div.g_record_layout_leaf.flexhbox.flexauto',\n      this.buildFieldDom(this.getField(fieldRowId), row),\n      (createEditor ?\n        kd.maybe(this.layoutEditor, editor => editor.buildLeafDom()) :\n        null\n      )\n    )\n  );\n\n  const sub = this.layoutSpec.subscribe((spec) => { layout.buildLayout(spec, createEditor); });\n\n  if (createEditor) {\n    this.layoutEditor(RecordLayoutEditor.create(this, layout));\n  }\n\n  return dom('div.g_record_detail.flexauto',\n    dom.autoDispose(layout),\n    dom.autoDispose(sub),\n    createEditor ? dom.onDispose(() => {\n      this.layoutEditor.peek().dispose();\n      this.layoutEditor(null);\n    }) : null,\n    // enables field context menu anywhere on the card\n    contextMenu(() => this.buildFieldContextMenu(row)),\n    dom('div.detail_row_num',\n      kd.text(() => (row._index() + 1)),\n      dom.on('contextmenu', ev => {\n        // This is a little hack to position the menu the same way as with a click,\n        // the same hack as on a column menu.\n        ev.preventDefault();\n        // prevent 2nd context menu to show up\n        ev.stopPropagation();\n        ev.currentTarget.querySelector('.menu_toggle').click();\n      }),\n      menuToggle(null,\n        dom.on('click', () => {\n          this.viewSection.hasFocus(true);\n          commands.allCommands.setCursor.run(row);\n        }),\n        menu(() => this.buildRowContextMenu(row)),\n        testId('card-menu-trigger')\n      )\n    ),\n    dom('div.g_record_detail_inner', layout.rootElem)\n  );\n};\n\n/**\n * Returns the viewField row model for the field that the given DOM element belongs to.\n */\nRecordLayout.prototype.getContainingField = function(elem, optContainer) {\n  return this.getField(Layout.Layout.getContainingBox(elem, optContainer).leafId());\n};\n\n/**\n * Returns the RowModel for the record that the given DOM element belongs to.\n */\nRecordLayout.prototype.getContainingRow = function(elem, optContainer) {\n  var itemElem = dom.findAncestor(elem, optContainer, '.g_record_detail');\n  return ko.utils.domData.get(itemElem, 'itemModel');\n};\n\nmodule.exports = RecordLayout;\n","var _ = require('underscore');\nvar BackboneEvents = require('backbone').Events;\n\nvar dispose = require('app/client/lib/dispose');\nvar {makeT} = require('app/client/lib/localization');\nvar commands = require('./commands');\nvar LayoutEditor = require('./LayoutEditor');\n\nconst t = makeT('RecordLayoutEditor');\nconst {basicButton, cssButton, primaryButton} = require('app/client/ui2018/buttons');\nconst {icon} = require('app/client/ui2018/icons');\nconst {menu, menuDivider, menuItem} = require('app/client/ui2018/menus');\nconst {testId} = require('app/client/ui2018/cssVars');\nconst {dom, Observable, styled} = require('grainjs');\n\n//----------------------------------------------------------------------\n\n/**\n * An extension of LayoutEditor which includes commands and the option for a callback function.\n *\n * Used by RecordLayout.js\n *\n * @param {layoutSpec} observable - An observable evaluating to the original layoutSpec of the layout.\n * @param {optResizeCallback} Function - An optional function to be called after every resize during\n *  layout editing.\n */\nfunction RecordLayoutEditor(recordLayout, layout, optResizeCallback) {\n  this.recordLayout = recordLayout;\n  this.layout = layout;\n  this.layoutEditor = this.autoDispose(LayoutEditor.LayoutEditor.create(layout));\n  this._hiddenColumns = this.autoDispose(Observable.create(null, this.getHiddenColumns()));\n\n  this.listenTo(layout, 'layoutChanged', function() {\n    this._hiddenColumns.set(this.getHiddenColumns());\n  });\n\n  if (optResizeCallback) {\n    this.listenTo(layout, 'layoutChanged', optResizeCallback);\n    this.listenTo(layout, 'layoutResized', optResizeCallback);\n  }\n\n  // Command group implementing the commands available while editing the layout.\n  this.autoDispose(commands.createGroup(RecordLayoutEditor.editLayoutCommands, this, true));\n}\ndispose.makeDisposable(RecordLayoutEditor);\n_.extend(RecordLayoutEditor.prototype, BackboneEvents);\n\n\n/**\n * Commands active while editing the record layout.\n */\nRecordLayoutEditor.editLayoutCommands = {\n  accept: function() {\n    this.recordLayout.onEditLayoutSave(this.layout.getLayoutSpec());\n  },\n  cancel: function() {\n    this.layout.buildLayout(this.recordLayout.layoutSpec());\n    this.recordLayout.onEditLayoutCancel();\n  },\n};\n\n/**\n * Returns the list of columns that are not included in the current layout.\n */\nRecordLayoutEditor.prototype.getHiddenColumns = function() {\n  var included = new Set(this.layout.getAllLeafIds().map(function(leafId) {\n    var f = this.recordLayout.getField(leafId);\n    return f.isNewField ? f.colRef : f.colRef.peek();\n  }, this));\n  return this.recordLayout.viewSection.table().columns().all().filter(function(col) {\n    return !included.has(col.getRowId()) && !col.isHiddenCol();\n  });\n};\n\nRecordLayoutEditor.prototype._addField = function(leafId) {\n  var newBox = this.layout.buildLayoutBox({ leaf: leafId });\n  var rows = this.layout.rootBox().childBoxes.peek();\n  if (rows.length >= 1 && _.last(rows).isLeaf()) {\n    // Add a new child to the last row.\n    _.last(rows).addChild(newBox, true);\n  } else {\n    // Add a new row.\n    this.layout.rootBox().addChild(newBox, true);\n  }\n};\n\nRecordLayoutEditor.prototype.buildEditorDom = function() {\n  const addNewField = () => { this._addField(':New_Field:'); };\n  const showField = (col) => {\n    // Use setTimeout, since showing a field synchronously removes it from the list, which would\n    // prevent the menu from closing if we don't let the event to run its course.\n    setTimeout(() => this._addField(col.getRowId() + ':' + col.label()), 0);\n  };\n\n  return cssControls(\n    basicButton(t('Add Field'), cssCollapseIcon('Collapse'),\n      menu((ctl) => [\n        menuItem(() => addNewField(), t('Create New Field')),\n        dom.maybe((use) => use(this._hiddenColumns).length > 0,\n          () => menuDivider()),\n        dom.forEach(this._hiddenColumns, (col) =>\n          menuItem(() => showField(col), t(\"Show field {{- label}}\", {label:col.label()}))\n        ),\n        testId('edit-layout-add-menu'),\n      ]),\n    ),\n\n    dom('div.flexauto', {style: 'margin-left: 8px'}),\n    this.buildFinishButtons(),\n    testId('edit-layout-controls'),\n  );\n};\n\nRecordLayoutEditor.prototype.buildFinishButtons = function() {\n  return [\n    primaryButton(t('Save Layout'),\n      dom.on('click', () => commands.allCommands.accept.run()),\n    ),\n    basicButton(t('Cancel'),\n      dom.on('click', () => commands.allCommands.cancel.run()),\n      {style: 'margin-left: 8px'},\n    ),\n  ];\n}\n\nRecordLayoutEditor.prototype.buildLeafDom = function() {\n  return dom('div.layout_grabbable.g_record_layout_editing',\n    dom('div.g_record_delete_field.glyphicon.glyphicon-eye-close',\n      dom.on('mousedown', (ev) => ev.stopPropagation()),\n      dom.on('click', (ev, elem) => {\n        ev.preventDefault();\n        ev.stopPropagation();\n        const box = this.layoutEditor.getBoxFromElement(elem);\n        this.layoutEditor.removeContainingBox(box);\n      })\n    )\n  );\n};\n\nconst cssControls = styled('div', `\n  display: flex;\n  align-items: flex-start;\n\n  & > .${cssButton.className} {\n    white-space: nowrap;\n    overflow: hidden;\n  }\n`);\n\nconst cssCollapseIcon = styled(icon, `\n  margin: -3px -2px -2px 2px;\n`);\n\nmodule.exports = RecordLayoutEditor;\n","/* global $ */\nvar ko = require('knockout');\nvar dispose = require('../lib/dispose');\nvar dom = require('../lib/dom');\nvar kd = require('../lib/koDom');\nvar kf = require('../lib/koForm');\nvar AceEditor = require('./AceEditor');\nvar {makeT} = require('app/client/lib/localization');\n\nconst t = makeT('ValidationPanel');\n\n/**\n * Document level configuration settings.\n * @param {Object}    options.gristDoc   A reference to the GristDoc object\n * @param {Function}  docName            A knockout observable containing a String\n */\nfunction ValidationPanel(options) {\n  this.gristDoc = options.gristDoc;\n\n  this.validationsTable = this.gristDoc.docModel.validations;\n  this.validations = this.autoDispose(this.validationsTable.createAllRowsModel('id'));\n\n  this.docTables = this.autoDispose(\n    this.gristDoc.docModel.tables.createAllRowsModel('tableId'));\n\n  this.tableChoices = this.autoDispose(this.docTables.map(function(table) {\n    return { label: table.tableId, value: table.id() };\n  }));\n}\ndispose.makeDisposable(ValidationPanel);\n\n\nValidationPanel.prototype.onAddRule = function() {\n  this.validationsTable.sendTableAction([\"AddRecord\", null, {\n    tableRef: this.docTables.at(0).id(),\n    name: t(\"Rule {{length}}\", {length: this.validations.peekLength + 1}),\n    formula: \"\"\n  }])\n  .then(function() {\n    $('.validation_formula').last().find(\"input\").focus();\n  });\n};\n\nValidationPanel.prototype.onDeleteRule = function(rowId) {\n  this.validationsTable.sendTableAction([\"RemoveRecord\", rowId]);\n};\n\nValidationPanel.prototype.buildDom = function() {\n  return [\n    kf.row(\n      1, kf.label('Validations'),\n      1, kf.buttonGroup(\n        kf.button(this.onAddRule.bind(this), 'Add Rule', dom.testId(\"Validation_addRule\"))\n      )\n    ),\n    dom('div',\n      dom.testId(\"Validation_rules\"),\n      kd.foreach(this.validations, validation => {\n        var editor = AceEditor.create({ observable: validation.formula });\n        var editorUpToDate = ko.observable(true);\n        return dom('div.validation',\n          dom.autoDispose(editor),\n          dom('div.validation_title.flexhbox',\n            dom('div.validation_name', kf.editableLabel(validation.name)),\n            dom('div.flexitem'),\n            dom('div.validation_trash.glyphicon.glyphicon-remove',\n              dom.on('click', this.onDeleteRule.bind(this, validation.id()))\n            )\n          ),\n          kf.row(\n            1, dom('div.glyphicon.glyphicon-tag.config_icon'),\n            8, kf.label('Table'),\n            9, kf.select(validation.tableRef, this.tableChoices)\n          ),\n          dom('div.kf_elem.validation_formula', editor.buildDom(aceObj => {\n            editor.attachSaveCommand();\n            aceObj.on('change', () => {\n              // Monitor whether the value mismatch is reflected by editorDiff\n              if ((editor.getValue() === validation.formula()) !== editorUpToDate()) {\n                editorUpToDate(!editorUpToDate());\n              }\n            });\n            aceObj.removeAllListeners('blur');\n          })),\n          kf.row(\n            2, '',\n            1, kf.buttonGroup(\n              kf.button(() => editor.writeObservable(),\n                'Apply', { title: t(\"Update formula (Shift+Enter)\")},\n                kd.toggleClass('disabled', editorUpToDate)\n              )\n            )\n          )\n        );\n      })\n    )\n  ];\n};\n\nmodule.exports = ValidationPanel;\n","/* global $ */\n\nvar koDom = require('../lib/koDom');\n\n/**\n * This adds `.isFlex` option to JQuery's $.ui.resizable to make it work better with flexbox.\n * Specifically, when resizing to the left, JQuery adjusts both `width` and `left` properties. If\n * the element is part of a flexbox, it's wrong to adjust `left`. This widget adds `.isFlex`\n * option: when set to true, the `left` (also `top`) adjustments get ignored.\n */\nvar _respectSize = $.ui.resizable.prototype._respectSize;\n$.ui.resizable.prototype._respectSize = function() {\n  var data = _respectSize.apply(this, arguments);\n  if (this.options.isFlex) {\n    console.log(\"Ignoring left, top\");\n    data.left = data.top = undefined;\n  }\n  return data;\n};\n\n/**\n * When used as an argument to dom() function, makes the containing element resizable, with the\n * size written into the given observable. If the observable has a .save() method, it's called\n * by default when the resize is complete (to save the new size to the server).\n * @param {Object} options.enabled: An observable, a constant, or a function for a computed\n *      observable. The value is treated as a boolean, and determined whether resizable\n *      functionality is enabled.\n * @param {String} options.handles: Same as for jqueryui's `resizable`, e.g. 'e' to resize right\n *      edge (east), 'w' to resize left edge (west).\n * @param {Function} options.stop: Additional callback to call when resizing stops.\n * @param {Boolean} options.isFlex: If true, will avoid changing 'left' when resizing the left edge.\n * @param {Number} options.minWidth: The minimum width the element can be resized to.\n *      Defaults to 10 (JQuery default).\n * @param {Boolean} options.shouldSave: Whether .save() on `widthObservable` should be called.\n *      Defaults to true.\n */\nfunction makeResizable(widthObservable, options) {\n  options = options || {};\n  function onEvent(e, ui) {\n    widthObservable(ui.size.width);\n    if (e.type === 'resizestop') {\n      if (options.stop) {\n        options.stop(e, ui);\n      }\n      if (widthObservable.save && options.shouldSave !== false) {\n        widthObservable.save();\n      }\n    }\n  }\n\n  return function(elem) {\n    $(elem).resizable({\n      handles: options.handles || 'e',\n      resize: onEvent,\n      stop: onEvent,\n      isFlex: options.isFlex,\n      minWidth: options.minWidth || 10\n    });\n\n    if (options.hasOwnProperty('enabled')) {\n      koDom.setBinding(elem, options.enabled, function(elem, value) {\n        if (value) {\n          $(elem).resizable('enable');\n        } else {\n          $(elem).resizable('disable').removeClass('ui-state-disabled');\n        }\n      });\n    }\n  };\n}\nexports.makeResizable = makeResizable;\n","/**\n * Scrolly is a class that allows scrolling a very long list of rows by rendering only those\n * that are visible. Note that the elements rendered by scrolly should have box-sizing set to\n * border-box.\n */\n\n\n\nvar _ = require('underscore');\nvar ko = require('knockout');\nvar assert = require('assert');\nvar gutil = require('app/common/gutil');\nvar BinaryIndexedTree = require('app/common/BinaryIndexedTree');\nvar {Delay} = require('./Delay');\nvar dispose = require('./dispose');\nvar kd = require('./koDom');\nvar dom = require('./dom');\n\n/**\n * Use the browser globals in a way that allows replacing them with mocks in tests.\n */\nvar G = require('./browserGlobals').get('window', '$');\n\n/**\n * Scrolly may contain multiple panes scrolling in parallel (e.g. for row numbers). The UI for\n * each pane consists of two nested pieces: a scrollDiv and a blockDiv. The scrollDiv is very tall\n * and mostly empty; the blockDiv contains the actual rendered rows, and is absolutely positioned\n * inside its scrollDiv.\n */\nfunction ScrollyPane(scrolly, paneIndex, container, options, itemCreateFunc) {\n  this.scrolly = scrolly;\n  this.paneIndex = paneIndex;\n  this.container = container;\n  this.itemCreateFunc = itemCreateFunc;\n  this.preparedRows = [];\n\n  _.extend(this.scrolly.options, options);\n\n  this.container.appendChild(\n    this.scrollDiv = dom(\n      'div.scrolly_outer',\n      kd.style('height', this.scrolly.totalHeightPx),\n      this.blockDiv = dom(\n        'div',\n        kd.style('position', 'absolute'),\n        kd.style('top', this.scrolly.blockTopPx),\n        kd.style('width', options.fitToWidth ? '100%' : ''),\n        kd.style('padding-right', options.paddingRight + 'px')\n      )\n    )\n  );\n\n  ko.utils.domNodeDisposal.addDisposeCallback(container, () => {\n    this.scrolly.destroyPane(this);\n    // Delete all members, to break cycles.\n    for (var k in this) {\n      delete this[k];\n    }\n  });\n\n  G.$(this.container).on('scroll', () => this.scrolly.onScroll(this) );\n}\n\n/**\n * Prepares the DOM for rows in scrolly's [begin, end) range, reusing currently active rows as\n * much as possible. New rows are saved in this.preparedRows, and also added to the end of\n * blockDiv so that they may be measured.\n */\nScrollyPane.prototype.prepareNewRows = function() {\n  var i, item, row,\n    begin = this.scrolly.begin,\n    count = this.scrolly.end - begin,\n    array = this.scrolly.data.peek(),\n    prevItemModels = this.scrolly.activeItemModels,\n    prevRows = this.preparedRows;\n\n  if (prevRows.length > 0) {\n    // Skip this check if there are no rows, maybe we just added this pane.\n    assert.equal(prevRows.length, prevItemModels.length,\n             \"Rows and models not in sync: \" + prevRows.length + \"!=\" + prevItemModels.length);\n  }\n\n  this.preparedRows = [];\n\n  // Reuse any reusable old rows. They must be tied to an active model.\n  for (i = 0; i < prevRows.length; i++) {\n    row = prevRows[i];\n    item = prevItemModels[i];\n    if (item._index() === null) {\n      ko.removeNode(row);\n    } else {\n      var relIndex = item._index() - begin;\n      assert(relIndex >= 0 && relIndex < count, \"prepareNewRows saw out-of-range model\");\n      this.preparedRows[relIndex] = row;\n    }\n  }\n\n  // Create any missing rows.\n  for (i = 0; i < count; i++) {\n    if (!this.preparedRows[i]) {\n      item = array[begin + i];\n      assert(item, \"ScrollyPane item missing at index \" + (begin + i));\n      item._rowHeightPx(\"\");    // Mark this row as in need of measuring.\n      row = this.itemCreateFunc(item);\n      kd.style('height', item._rowHeightPx)(row);\n      ko.utils.domData.set(row, \"itemModel\", item);\n      this.preparedRows[i] = row;\n      // The row may not end up at the end of blockDiv, but we need to add it to the document in\n      // order to measure it. We'll move it to the right place in arrangePreparedRows().\n      this.blockDiv.appendChild(row);\n    }\n  }\n};\n\n/**\n * Returns the measured height of the given prepared row.\n */\nScrollyPane.prototype.measurePreparedRow = function(rowIndex) {\n  var row = this.preparedRows[rowIndex];\n  var rect = row.getBoundingClientRect();\n  return rect.bottom - rect.top;\n};\n\n/**\n * Update the DOM with the prepared rows in the correct order.\n */\nScrollyPane.prototype.arrangePreparedRows = function() {\n  // Note that everything that was in blockDiv previously is now either gone or is in\n  // preparedRows. So placing all preparedRows into blockDiv automatically removes them from their\n  // old positions.\n  //\n  // For a slight speedup in rendering, we try to avoid removing and reinserting rows\n  // unnecessarily, as that slows down subsequent rendering. We could try harder, by finding the\n  // longest common subsequence, but that's quite a bit harder.\n  for (var i = 0; i < this.preparedRows.length; i++) {\n    var row = this.preparedRows[i];\n    var current = this.blockDiv.childNodes[i];\n    if (row !== current) {\n      this.blockDiv.insertBefore(row, current);\n    }\n  }\n};\n\n//----------------------------------------------------------------------\n\n/**\n * The Scrolly class is used internally to manage the state of the scrolly. It keeps track of the\n * data items being rendered, of the heights of all rows (including cumulative heights, in a\n * BinaryIndexedTree), and various other counts and positions.\n *\n * The actual DOM elements are managed by ScrollyPane class. There may be more than one instance,\n * if there are multiple panes scrolling together (e.g. for row numbers).\n */\nfunction Scrolly(dataModel) {\n  // In the constructor we only initialize the parts shared by all ScrollyPanes.\n  this.data = dataModel;\n  this.numRows = 0;\n  this.options = {\n    paddingBottom: 0\n  };\n\n  this.panes = [];\n\n  // The items currently rendered. Same as this.data._itemModels, but we manage it manually\n  // to maintain the invariant that rendered DOM elements match this.activeItemModels.\n  this.activeItemModels = [];\n\n  // Data structure to store row heights and cumulative offsets of all rows.\n  this.rowHeights = [];\n  this.rowOffsetTree = new BinaryIndexedTree();\n  // TODO: Reconsider row height for rendering layouts / other tall elements in a scrolly.\n  this.minRowHeight = 23;   // In pixels. Rows will be forced to be at least this tall.\n\n  this.numBuffered = 1;     // How many rows to render outside the visible area.\n  this.numRendered = 1;     // Total rows to render.\n\n  this.begin = 0;       // Index of the first rendered row\n  this.end = 0;         // Index of the row after the last rendered one\n\n  this.scrollTop = 0;   // The scrollTop position of all panes.\n  this.shownHeight = 0; // The clientHeight of all panes.\n  this.blockBottom = 0; // Bottom of the rendered block, i.e. rowOffsetTree.getSumTo(this.end)\n\n  // Top in px of the rendered block; rowOffsetTree.getSumTo(this.begin)\n  this.blockTop = ko.observable(0);\n  this.blockTopPx = ko.computed(function() { return this.blockTop() + 'px'; }, this);\n\n  // The height of the scrolly_outer div\n  this.totalHeight = ko.observable(0);\n  this.totalHeightPx = ko.computed(function() { return this.totalHeight() + 'px'; }, this);\n\n  // Subscribe to data changes, and initialize with the current data.\n  this.subscription = this.autoDispose(\n    this.data.subscribe(this.onDataSplice, this, 'spliceChange'));\n\n  // The delayedUpdateSize helper is used by scheduleUpdateSize.\n  this.delayedUpdateSize = this.autoDispose(Delay.create());\n\n  // Initialize with the current data.\n  var array = this.data.all();\n  this.onDataSplice({ array: array, start: 0, added: array.length, deleted: [] });\n\n  //T198: Scrolly should have its own handler to remove, so that when removing handlers it does not\n  //remove other's handler.\n  let onResize = () => {\n    this.scheduleUpdateSize();\n  };\n\n  G.$(G.window).on('resize.scrolly', onResize);\n\n  this.autoDisposeCallback(() => G.$(G.window).off('resize.scrolly', onResize));\n\n}\nexports.Scrolly = Scrolly;\n\ndispose.makeDisposable(Scrolly);\n\n\nScrolly.prototype.debug = function() {\n  console.log(\"Scrolly: numRows \" + this.numRows + \"; panes \" + this.panes.length +\n              \"; numRendered \" + this.numRendered + \" [\" + this.begin + \", \" + this.end + \")\" +\n              \"; block at \" + this.blockTop() + \" of \" + this.totalHeight() +\n              \"; scrolled to \" + this.scrollTop + \"; shownHeight \" + this.shownHeight);\n  console.assert(this.numRows, this.data.peekLength,\n               \"Wrong numRows; data is \" + this.data.peekLength);\n  console.assert(this.numRows, this.rowHeights.length,\n               \"Wrong rowHeights size \" + this.rowHeights.length);\n  console.assert(this.numRows, this.rowOffsetTree.size(),\n               \"Wrong rowOffsetTree size \" + this.rowOffsetTree.size());\n  var count = Math.min(this.numRendered, this.numRows);\n  console.assert(this.end - this.begin, count,\n               \"Wrong range size \" + (this.end - this.begin));\n  console.assert(this.activeItemModels.length, count,\n               \"Wrong activeItemModels.size \" + this.activeItemModels.length);\n\n  var expectedHeight = this.blockBottom - this.blockTop();\n  if (count > 0) {\n    for (var p = 0; p < this.panes.length; p++) {\n      var topRow = this.panes[p].preparedRows[0].getBoundingClientRect();\n      var bottomRow = _.last(this.panes[p].preparedRows).getBoundingClientRect();\n      var blockHeight = bottomRow.bottom - topRow.top;\n      if (blockHeight !== expectedHeight) {\n        console.warn(\"Scrolly render pane #%d %dpx bigger from expected (%dpx per row). Ensure items have no margins\",\n          p, blockHeight - expectedHeight, (blockHeight - expectedHeight) / count);\n      }\n    }\n  }\n};\n\n/**\n * Helper that returns the Scrolly object currently associate with the given LazyArrayModel. It\n * feels a bit wrong that the model knows about its user, but a LazyArrayModel generally only\n * supports a single user (e.g. a single Scrolly), so it makes sense.\n */\nfunction getInstance(dataModel) {\n  if (!dataModel._scrollyObj) {\n    dataModel._scrollyObj = Scrolly.create(dataModel);\n    dataModel._scrollyObj.autoDisposeCallback(() => delete dataModel._scrollyObj);\n  }\n  return dataModel._scrollyObj;\n}\nexports.getInstance = getInstance;\n\n/**\n * Adds a new pane that scrolls as part of this Scrolly object. This call itself does no\n * rendering of the pane.\n */\nScrolly.prototype.addPane = function(containerElem, options, itemCreateFunc) {\n  var pane = new ScrollyPane(this, this.panes.length, containerElem, options, itemCreateFunc);\n  this.panes.push(pane);\n  this.scheduleUpdateSize();\n};\n\n/**\n * Tells Scrolly to call updateSize after things have had a chance to render.\n */\nScrolly.prototype.scheduleUpdateSize = function(overrideHeight) {\n  if (!this.isDisposed() && !this.delayedUpdateSize.isPending()) {\n    this.delayedUpdateSize.schedule(0, this.updateSize.bind(this, overrideHeight), this);\n  }\n};\n\n/**\n * Measures the size of the panes and adjusts Scrolly parameters for how many rows to render.\n * This should be called as soon as all Scrolly panes have been attached to the Document, and any\n * time their outer size changes.\n * Pass in an overrideHeight to use instead of the current height of the panes.\n */\nScrolly.prototype.updateSize = function(overrideHeight) {\n  this.resetHeights();\n  this.shownHeight = Math.max(0, Math.max.apply(null, this.panes.map(function(pane) {\n    return pane.container.clientHeight;\n  })));\n\n  // Update counts of rows that are shown.\n  var numVisible = Math.max(1, Math.ceil((overrideHeight ?? this.shownHeight) / this.minRowHeight));\n  this.numBuffered = 5;\n  this.numRendered = numVisible + 2 * this.numBuffered;\n\n  // Re-render everything.\n  this._updateRange();\n  this.render();\n  this.syncScrollPosition();\n};\n\n/**\n * Called whenever any pane got scrolled. It syncs up all panes to the same scrollTop.\n */\nScrolly.prototype.onScroll = function(pane) {\n  this.scrollTo(pane.container.scrollTop);\n};\n\n/**\n * Actively scroll all panes to the given scrollTop position, adjusting what is rendered as\n * necessary.\n */\nScrolly.prototype.scrollTo = function(top) {\n  if (top === this.scrollTop) {\n    return;\n  }\n\n  this.scrollTop = top;\n  this.syncScrollPosition();\n\n  if (this.blockTop() <= top && this.blockBottom >= top + this.shownHeight) {\n    // Nothing needs to be re-rendered.\n    //console.log(\"scrollTo(%s): all elements already shown\", top);\n    return;\n  }\n\n  // If we are scrolled to the bottom, restore our bottom position at the end. This happens\n  // in particular when reloading a page scrolled to the bottom. This is in no way general; it's\n  // just particularly easy to come across.\n  var atEnd = (top + this.shownHeight >= this.panes[0].container.scrollHeight);\n\n  this._updateRange();\n  // Do the magic.\n  this.render();\n\n  // If we were scrolled to the bottom, stay that way.\n  if (atEnd) {\n    this.scrollTop = this.panes[0].container.scrollHeight - this.shownHeight;\n  }\n\n  // Sometimes render() affects scrollTop of some panes; restore it to what we want by always\n  // calling syncScrollPosition() once more after render.\n  this.syncScrollPosition();\n};\n\n/**\n * Called when the underlying data array changes.\n */\nScrolly.prototype.onDataSplice = function(splice) {\n  // We may need to adjust which rows are shown, but render does all the work of figuring out what\n  // changed and needs re-rendering.\n  this.numRows = this.data.peekLength;\n\n  // Update rowHeights: reproduce the splice, inserting minRowHeights for the new rows.\n  this.rowHeights.splice(splice.start, splice.deleted.length);\n  gutil.arraySplice(this.rowHeights, splice.start,\n    gutil.arrayRepeat(splice.added, this.minRowHeight));\n\n  // And rebuild the rowOffsetTree.\n  this.rowOffsetTree.fillFromValues(this.rowHeights);\n  this.totalHeight(this.rowOffsetTree.getTotal() + this.options.paddingBottom);\n\n  this._updateRange();\n\n  this.scheduleUpdateSize();\n};\n\n/**\n * Set all panes to the common scroll position.\n */\nScrolly.prototype.syncScrollPosition = function() {\n  // Note that setting scrollTop triggers more scroll events, but those get ignored in onScroll\n  // because top === this.scrollTop.\n  var top = this.scrollTop;\n  for (var p = 0; p < this.panes.length; p++) {\n    // Reading .scrollTop may cause a synchronous reflow, so may be worse than setting it.\n    this.panes[p].container.scrollTop = top;\n  }\n};\n\n/**\n * Creates a new item model. There is one for each rendered row. This uses the lazyArray to create\n * the model, but adds a _rowHeightPx observable, used for controlling the row height.\n */\nScrolly.prototype.createItemModel = function() {\n  var item = this.data.makeItemModel();\n  item._rowHeightPx = ko.observable(\"\");\n  return item;\n};\n\n/**\n * Render rows in [begin, end) range, reusing any currently rendered rows as much as possible.\n */\nScrolly.prototype.render = function() {\n  //var startTime = Date.now();\n  // console.log(\"Scrolly render (top \" + this.scrollTop + \"): [\" + this.begin + \", \" +\n  //            this.end + \") = \" + (this.end - this.begin) + \" rows\");\n\n  // Invariant: all panes contain DOM elements parallel to this.activeItemModels.\n  // At the end, this.activeItemModels and DOM in panes represent the range [begin, end).\n  var i, p, item, index, delta,\n    count = this.end - this.begin,\n    array = this.data.peek(),\n    freeList = [];\n\n  assert(this.end <= array.length, \"Scrolly render() exceeds data length of \" + array.length);\n\n  // If scrolling up, we may adjust heights of rows, pushing down the row at scrollTop.\n  // If that happens, we will adjust scrollTop correspondingly.\n  var rowAtScrollTop = this.rowOffsetTree.getIndex(this.scrollTop);\n  var sumToScrollTop = this.rowOffsetTree.getSumTo(rowAtScrollTop);\n\n  // Place out-of-range itemModels into a free list.\n  for (i = 0; i < this.activeItemModels.length; i++) {\n    item = this.activeItemModels[i];\n    index = item._index();\n    if (index === null || index < this.begin || index >= this.end) {\n      freeList.push(item);\n    }\n  }\n\n  // Go through the models we need, and fill any missing ones.\n  for (i = 0, index = this.begin; i < count; i++, index++) {\n    if (!array[index]) {\n      // Use the freeList if possible, or create a new model otherwise.\n      item = freeList.shift() || this.createItemModel();\n      this.data.setItemModel(item, index);\n      // Unset the explicit height so that we can measure what it would naturally be.\n      item._rowHeightPx(\"\");\n    }\n  }\n\n  // Unset anything else in the free list.\n  for (i = 0; i < freeList.length; i++) {\n    this.data.unsetItemModel(freeList[i]);\n  }\n\n  // Prepare DOM in all panes. This ensures that there is a DOM element for each active item.\n  // If prepareNewRows creates new DOM, it will unset _rowHeightPx, to mark it for measuring.\n  for (p = 0; p < this.panes.length; p++) {\n    this.panes[p].prepareNewRows();\n  }\n\n  // Measure the rows, and use the max across panes to update the stored heights.\n  // Note: this involves a reflow.\n  for (i = 0, index = this.begin; i < count; i++, index++) {\n    item = array[index];\n    if (item._rowHeightPx.peek() === \"\") {\n      var height = this.minRowHeight;\n      for (p = 0; p < this.panes.length; p++) {\n        height = Math.max(height, this.panes[p].measurePreparedRow(i));\n      }\n      height = Math.round(height);\n\n      delta = height - this.rowHeights[index];\n      if (delta !== 0) {\n        this.rowHeights[index] = height;\n        this.rowOffsetTree.addValue(index, delta);\n      }\n    }\n  }\n\n  // Set back the explicit heights of the rows. This is separate from the loop above to make sure\n  // we don't trigger additional reflows while measuring rows.\n  for (i = 0, index = this.begin; i < count; i++, index++) {\n    item = array[index];\n    item._rowHeightPx(this.rowHeights[index] + 'px');\n  }\n\n  // Render the new rows in the new order in each pane.\n  for (p = 0; p < this.panes.length; p++) {\n    this.panes[p].arrangePreparedRows();\n  }\n\n  // Save the current activeItemModels.\n  this.activeItemModels = array.slice(this.begin, this.end);\n  // console.log(\"activeItemModels now \" + this.activeItemModels.length);\n  // console.log(\"rows in panes now are \" + this.panes.map(\n  //             function(p) { return p.blockDiv.childNodes.length; }).join(\", \"));\n\n  // Update heights and positions of the scrolling pane parts.\n  this.totalHeight(this.rowOffsetTree.getTotal() + this.options.paddingBottom);\n  this.blockTop(this.rowOffsetTree.getSumTo(this.begin));\n  this.blockBottom = this.rowOffsetTree.getSumTo(this.end);\n\n  // Adjust scrollTop if previously-shown top moved because of newly-rendered rows above.\n  delta = this.rowOffsetTree.getSumTo(rowAtScrollTop) - sumToScrollTop;\n  if (delta !== 0) {\n    //console.log(\"Adjusting scroll position by \" + delta);\n    this.scrollTop += delta;\n    this.syncScrollPosition();\n  }\n\n  // this.debug();\n\n  // Report after timeout, to include the browser rendering time.\n  //var midTime = Date.now();\n  //setTimeout(function() {\n  //  var endTime = Date.now();\n  //  console.log(\"Scrolly render took \" + (midTime - startTime) + \" + \" +\n  //              (endTime - midTime) + \" = \" + (endTime - startTime) + \" ms\");\n  //}, 0);\n};\n\n\n/**\n * Re-measure the given array of rows. Re-measures all rows if no array is given.\n */\nScrolly.prototype.resetHeights = function(optRowIndexList) {\n  var array = this.data.peek();\n  if (optRowIndexList) {\n    for (var i = 0; i < optRowIndexList.length; i++) {\n      var index = optRowIndexList[i];\n      var item = array[index];\n      if (item) {\n        item._rowHeightPx(\"\");\n      }\n    }\n  } else {\n    this.activeItemModels.forEach(function(item) {\n      item._rowHeightPx(\"\");\n    });\n  }\n  this.render();\n};\n\n/**\n * Re-measure the given array of items.\n * @param {Array[ItemModel]} items: The affected models (as returned by this.createItemModel).\n */\nScrolly.prototype.resetItemHeights = function(items) {\n  if (!this.isDisposed()) {\n    items.forEach(item => item._rowHeightPx(\"\"));\n    this.render();\n  }\n};\n\n/**\n * Scrolls to the position in pixels returned by calcPosition() function. The argument is a\n * function because after the initial re-render, some rows may get re-measured and require\n * an adjustment to the pixel position. So calcPosition() actually gets called twice.\n */\nScrolly.prototype.scrollToPosition = function(calcPosition) {\n  var scrollTop = calcPosition();\n  this.scrollTo(scrollTop);\n\n  // Repeat in case rows got re-measured during rendering and ended up being below the fold.\n  // We only may need to scroll a bit further, we should never have to re-render.\n  scrollTop = calcPosition();\n  if (scrollTop !== this.scrollTop) {\n    this.scrollTop = scrollTop;\n    this.syncScrollPosition();\n  }\n};\n\n/**\n * Scrolls the given row into view.\n */\nScrolly.prototype.scrollRowIntoView = function(rowIndex) {\n  this.scrollToPosition(() => {\n    var top = this.rowOffsetTree.getSumTo(rowIndex);\n    var bottom = top + this.rowHeights[rowIndex];\n    // 43 = 23px to adjust for header, + 20px space\n    return gutil.clamp(this.scrollTop, bottom - this.shownHeight + 43, top - 10);\n  });\n};\n\n/**\n * Takes a scroll position object, as stored in the section model, and scrolls to the saved\n * position.\n * @param {Integer} scrollPos.rowIndex: The index of the row to be scrolled to.\n * @param {Integer} scrollPos.offset: The pixel distance of the scroll from the top of the row.\n */\nScrolly.prototype.scrollToSavedPos = function(scrollPos) {\n  this.scrollToPosition(() => this.rowOffsetTree.getSumTo(scrollPos.rowIndex) + scrollPos.offset);\n};\n\n\n/**\n * Returns an object with the index of the first visible row in the view pane, and the\n * scroll offset from the top of that row.\n * Useful for recording the current state of the scrolly for later re-initialization.\n *\n * NOTE: There is a compelling case to scroll to the cursor after scrolling to the previous\n * scroll position in either the case where rows are added/rearranged/removed, or simply in\n * all cases. While this would likely prevent confusion in case changes push the cursor out\n * of view, the case that the user scrolled away from the cursor intentionally should also be\n * considered.\n */\nScrolly.prototype.getScrollPos = function() {\n  var rowIndex = this.rowOffsetTree.getIndex(this.scrollTop);\n  return {\n    rowIndex: rowIndex,\n    offset: this.scrollTop - this.rowOffsetTree.getSumTo(rowIndex)\n  };\n};\n\n/**\n * Destroys a scrolly pane.\n */\nScrolly.prototype.destroyPane = function(pane) {\n  // When the last pane is removed, destroy the scrolly.\n  gutil.arrayRemove(this.panes, pane);\n  if (this.panes.length === 0) {\n    this.dispose();\n  }\n};\n\n/**\n * Updates indexes of rows to render.\n */\nScrolly.prototype._updateRange = function() {\n  // If we are scrolled from the top, start at the first visible row with some buffer.\n  const begin = this.rowOffsetTree.getIndex(this.scrollTop) - this.numBuffered;\n  this.begin = gutil.clamp(begin, 0, this.numRows - this.numRendered);\n  this.end = gutil.clamp(this.begin + this.numRendered, 0, this.numRows);\n}\n\n//----------------------------------------------------------------------\n\n/**\n * Creates a virtual scrolling interface attached to a LazyArray. Multiple scrolly() calls used\n * with the same `data` array will create parallel scrolling panes (e.g. row numbers and data\n * scrolling together).\n *\n * The DOM for items is created using `itemCreateFunc`. As the user scrolls\n * around, the item models are assigned to different items, and the DOM is moved around the page,\n * to minimize rendering. This is intended to be used with koModel.mappedLazyArray.\n *\n * @param {LazyModelArray} data A LazyModelArray instance.\n * @param {Object} options - Supported options include:\n *    paddingBottom {number} - Number of pixels to add to bottom of scrolly\n *    paddingRight {number} - Number of pixels to add to right of scrolly\n *    fitToWidth {bool} - Whether the scrolly holds a list of layouts\n * @param {Function} itemCreateFunc A function called as `itemCreateFunc(item)` for a number of\n *    item models (which can get assigned to different items in `data`). Must return a single\n *    Node (not a DocumentFragment or null).\n */\nfunction scrolly(data, options, itemCreateFunc) {\n  assert.equal(typeof itemCreateFunc, 'function');\n  options = options || {};\n  return function(elem) {\n    var scrollyObj = getInstance(data);\n    scrollyObj.addPane(elem, options, itemCreateFunc);\n    ko.utils.domData.set(elem, \"scrolly\", scrollyObj);\n  };\n}\nexports.scrolly = scrolly;\n","var _ = require('underscore');\nvar ko = require('knockout');\nvar dispose = require('../lib/dispose');\nvar BaseRowModel = require('./BaseRowModel');\nvar modelUtil = require('./modelUtil');\nvar BackboneEvents = require('backbone').Events;\n\n/**\n * MetaRowModel is a RowModel for built-in (Meta) tables. It takes a list of field names, and an\n * additional constructor called with (docModel, tableModel) arguments (and `this` context), which\n * can add arbitrary additional properties to this RowModel.\n */\nfunction MetaRowModel(tableModel, fieldNames, rowConstructor, rowId) {\n  var colNames = ['id'].concat(fieldNames);\n  BaseRowModel.call(this, tableModel, colNames);\n  this._rowId = rowId;\n\n  // MetaTableModel#_createRowModelItem creates lightweight objects that all reference the same MetaRowModel but are slightly different.\n  // We don't derive from BackboneEvents directly so that the lightweight objects created share the same Events object even though they are distinct.\n  this.events = this.autoDisposeWith('stopListening', BackboneEvents);\n\n  // Changes to true when this row gets deleted. This also likely means that this model is about\n  // to get disposed, except for a floating row model.\n  this._isDeleted = ko.observable(false);\n\n  // Populate all fields. Note that MetaRowModels are never get reassigned after construction.\n  this._fields.forEach(function(colName) {\n    this._assignColumn(colName);\n  }, this);\n\n  // Customize the MetaRowModel with a custom additional constructor.\n  if (rowConstructor) {\n    rowConstructor.call(this, tableModel.docModel, tableModel);\n  }\n}\ndispose.makeDisposable(MetaRowModel);\n_.extend(MetaRowModel.prototype, BaseRowModel.prototype);\n\nMetaRowModel.prototype._assignColumn = function(colName) {\n  if (this.hasOwnProperty(colName)) {\n    this[colName].assign(this._table.tableData.getValue(this._rowId, colName));\n  }\n};\n\n//----------------------------------------------------------------------\n\n/**\n * MetaRowModel.Floater is an object designed to look like a MetaRowModel. It contains observables\n * that mirror some particular MetaRowModel. The MetaRowModel currently being mirrored is the one\n * corresponding to the value of `rowIdObs`.\n *\n * Mirrored fields are computed observables that support reading, writing, and saving.\n */\nMetaRowModel.Floater = function(tableModel, rowIdObs) {\n  this._table = tableModel;\n  this.rowIdObs = rowIdObs;\n  // Note that ._index isn't supported because it doesn't make sense for a floating row model.\n\n  this._underlyingRowModel = this.autoDispose(ko.computed(function() {\n    return tableModel.getRowModel(rowIdObs());\n  }));\n\n  _.each(this._underlyingRowModel(), function(propValue, propName) {\n    if (ko.isObservable(propValue)) {\n      // Forward read/write calls to the observable on the currently-active underlying model.\n      this[propName] = this.autoDispose(ko.pureComputed({\n        owner: this,\n        read: function() { return this._underlyingRowModel()[propName](); },\n        write: function(val) { this._underlyingRowModel()[propName](val); }\n      }));\n\n      // If the underlying observable supports saving, forward save calls too.\n      if (propValue.saveOnly) {\n          modelUtil.addSaveInterface(this[propName], (value =>\n            this._underlyingRowModel()[propName].saveOnly(value)));\n      }\n    }\n  }, this);\n};\ndispose.makeDisposable(MetaRowModel.Floater);\n\n\nmodule.exports = MetaRowModel;\n","/**\n * MetaTableModel maintains the model for a built-in table, with MetaRowModels. It provides\n * access to individual row models, as well as to collections of rows in that table.\n */\n\n\nvar _ = require('underscore');\nvar ko = require('knockout');\nvar dispose = require('../lib/dispose');\nvar MetaRowModel = require('./MetaRowModel');\nvar TableModel = require('./TableModel');\nvar rowset = require('./rowset');\nvar assert = require('assert');\nvar gutil = require('app/common/gutil');\n\n/**\n * MetaTableModel maintains observables for one table's rows. It accepts a list of fields to\n * include into each RowModel, and an additional constructor to call when constructing RowModels.\n * It exposes all rows, as well as groups of rows, as observable collections.\n */\nfunction MetaTableModel(docModel, tableData, fields, rowConstructor) {\n  TableModel.call(this, docModel, tableData);\n\n  this._fields = fields;\n  this._rowConstructor = rowConstructor;\n\n  // Start out with empty list of row models. It's populated in loadData().\n  this.rowModels = [];\n\n  // It is possible for a new rowModel to be deleted and replaced with a new one for the same\n  // rowId. To allow a computed() to depend on the row version, we keep a permanent observable\n  // \"version\" associated with each rowId, which is incremented any time a rowId is replaced.\n  this._rowModelVersions = [];\n\n  // Whenever rowNotify is triggered, also send the action to all row RowModels that we maintain.\n  this.listenTo(this, 'rowNotify', function(rows, action) {\n    assert(rows !== rowset.ALL, \"Unexpected schema action on a metadata table\");\n    for (let r of rows) {\n      if (this.rowModels[r]) {\n        this.rowModels[r].dispatchAction(action);\n      }\n    }\n  });\n}\ndispose.makeDisposable(MetaTableModel);\n_.extend(MetaTableModel.prototype, TableModel.prototype);\n\n/**\n * This is called from DocModel as soon as all the MetaTableModel objects have been created.\n */\nMetaTableModel.prototype.loadData = function() {\n  // Whereas user-defined tables may not be initially loaded, MetaTableModels should only exist\n  // for built-in tables, which *should* already be loaded (and should never be reloaded).\n  assert(this.tableData.isLoaded, \"MetaTableModel: tableData not yet loaded\");\n\n  // Create and populate the array mapping rowIds to RowModels.\n  this.getAllRows().forEach(function(rowId) {\n    this._createRowModel(rowId);\n  }, this);\n};\n\n/**\n * Returns an existing or a blank row. Used for `recordRef` descriptor in DocModel.\n *\n * A computed() that uses getRowModel() may not realize if a rowId gets deleted and later re-used\n * for another row. If optDependOnVersion is set, then a dependency on the row version gets\n * created automatically. It is only relevant when the computed is pure and may not get updated\n * when the row is deleted; in that case lacking such dependency may cause subtle rare bugs.\n */\nMetaTableModel.prototype.getRowModel = function(rowId, optDependOnVersion) {\n  const rowIdModel = this.rowModels[rowId];\n  const r = rowIdModel || this.getEmptyRowModel();\n  if (optDependOnVersion) {\n    // Versions are never deleted, so even if the rowModel is deleted, we still have its version\n    // in this list.\n    const version = this._rowModelVersions[rowId];\n    if (version) {\n      // Subscribe to updates for rowModel at rowId.\n      version();\n    } else {\n      // It shouldn't happen, but maybe it would be better to add an empty version observable at rowId.\n      // If it happens, it means we tried to get non existing row (row that wasn't created previously).\n    }\n  }\n  return r;\n};\n\n/**\n * Returns the RowModel to use for invalid rows.\n */\nMetaTableModel.prototype.getEmptyRowModel = function() {\n  return this._createRowModel(0);\n};\n\n/**\n * Private helper to create a MetaRowModel for the given rowId. For public use, there are\n * getRowModel(rowId) and createFloatingRowModel(rowIdObs).\n */\nMetaTableModel.prototype._createRowModel = function(rowId) {\n  if (!this.rowModels[rowId]) {\n    // When creating a new row, we create new MetaRowModels which use observables. If\n    // _createRowModel is called from within the evaluation of a computed(), we do NOT want that\n    // computed to subscribe to observables used by individual MetaRowModels.\n    ko.ignoreDependencies(() => {\n      this.rowModels[rowId] = MetaRowModel.create(this, this._fields, this._rowConstructor, rowId);\n\n      // Whenever a rowModel is created, increment its version number.\n      let inc = this._rowModelVersions[rowId] || (this._rowModelVersions[rowId] = ko.observable(0));\n      inc(inc.peek() + 1);\n    });\n  }\n  return this.rowModels[rowId];\n};\n\n\n/**\n * Returns a MetaRowModel-like object tied to an observable rowId. When the observable changes,\n * the fields of the returned model start reflecting the values for the new rowId. See also\n * MetaRowModel.Floater docs.\n *\n * There should be very few such floating rows. If you ever want a set, you should be using\n * createAllRowsModel() or createRowGroupModel().\n *\n * @param {ko.observable} rowIdObs: observable that evaluates to a rowId.\n */\nMetaTableModel.prototype.createFloatingRowModel = function(rowIdObs) {\n  return MetaRowModel.Floater.create(this, rowIdObs);\n};\n\n/**\n * Override TableModel's _process_RemoveRecord to also remove our reference to this row model.\n */\nMetaTableModel.prototype._process_RemoveRecord = function(action, tableId, rowId) {\n  TableModel.prototype._process_RemoveRecord.apply(this, arguments);\n  this._deleteRowModel(rowId);\n};\n\n/**\n * Clean up the RowModel for a row when it's deleted by an action from the server.\n */\nMetaTableModel.prototype._deleteRowModel = function(rowId) {\n  this.rowModels[rowId]._isDeleted(true);\n  this.rowModels[rowId].dispose();\n  delete this.rowModels[rowId];\n};\n\n/**\n * We have to remember to override Bulk versions too.\n */\nMetaTableModel.prototype._process_BulkRemoveRecord = function(action, tableId, rowIds) {\n  TableModel.prototype._process_BulkRemoveRecord.apply(this, arguments);\n  rowIds.forEach(rowId => this._deleteRowModel(rowId));\n};\n\n/**\n * Override TableModel's _process_AddRecord to also add a row model for the given rowId.\n */\nMetaTableModel.prototype._process_AddRecord = function(action, tableId, rowId, columnValues) {\n  this._createRowModel(rowId);\n  TableModel.prototype._process_AddRecord.apply(this, arguments);\n};\n\n/**\n * We have to remember to override Bulk versions too.\n */\nMetaTableModel.prototype._process_BulkAddRecord = function(action, tableId, rowIds, columns) {\n  rowIds.forEach(rowId => this._createRowModel(rowId));\n  TableModel.prototype._process_BulkAddRecord.apply(this, arguments);\n};\n\n/**\n * Override TableModel's applySchemaAction to assert that there are NO metadata schema changes.\n */\nMetaTableModel.prototype.applySchemaAction = function(action) {\n  throw new Error(\"No schema actions should apply to metadata\");\n};\n\n/**\n * Returns a new observable array (koArray) of MetaRowModels for all the rows in this table,\n * sorted by the given column. It is the caller's responsibility to dispose this array.\n * @param {string} sortColId: Column ID by which to sort.\n */\nMetaTableModel.prototype.createAllRowsModel = function(sortColId) {\n  return this._createRowSetModel(this, sortColId);\n};\n\n/**\n * Returns a new observable array (koArray) of MetaRowModels matching the given `groupValue`.\n * It is the caller's responsibility to dispose this array.\n * @param {String|Number} groupValue - The group value to match.\n * @param {String} options.groupBy  - RowModel field by which to group.\n * @param {String} options.sortBy   - RowModel field by which to sort.\n */\nMetaTableModel.prototype.createRowGroupModel = function(groupValue, options) {\n  var grouping = this.getRowGrouping(options.groupBy);\n  return this._createRowSetModel(grouping.getGroup(groupValue), options.sortBy);\n};\n\n/**\n * Helper that returns a new observable koArray of MetaRowModels subscribed to the given\n * rowSource, and sorted by the given column. It is the caller's responsibility to dispose it.\n */\nMetaTableModel.prototype._createRowSetModel = function(rowSource, sortColId) {\n  var getter = this.tableData.getRowPropFunc(sortColId);\n  var sortedRowSet = rowset.SortedRowSet.create(null, function(r1, r2) {\n    return gutil.nativeCompare(getter(r1), getter(r2));\n  });\n  sortedRowSet.subscribeTo(rowSource);\n\n  // When the returned value is disposed, dispose the underlying SortedRowSet too.\n  var ret = this._createRowModelArray(sortedRowSet.getKoArray());\n  ret.autoDispose(sortedRowSet);\n  return ret;\n};\n\n/**\n * Helper which takes an observable array (koArray) of rowIds, and returns a new koArray of\n * objects having those RowModels as prototypes, and with an additional `_index` observable to\n * contain their index in the array. The index is kept correct as the array changes.\n *\n * TODO: this needs a unittest.\n */\nMetaTableModel.prototype._createRowModelArray = function(rowIdArray) {\n  var ret = rowIdArray.map(this._createRowModelItem, this);\n  ret.subscribe(function(splice) {\n    var arr = splice.array, i;\n    for (i = 0; i < splice.deleted.length; i++) {\n      splice.deleted[i]._index(null);\n    }\n    var delta = splice.added - splice.deleted.length;\n    if (delta !== 0) {\n      for (i = splice.start + splice.added; i < arr.length; i++) {\n        arr[i]._index(i);\n      }\n    }\n  }, null, 'spliceChange');\n  return ret;\n};\n\n/**\n * Creates and returns a RowModel with its own `_index` observable.\n */\nMetaTableModel.prototype._createRowModelItem = function(rowId, index) {\n  var rowModel = this._createRowModel(rowId);\n  assert.ok(rowModel, \"MetaTableModel._createRowModelItem called for invalid rowId \" + rowId);\n  var ret = Object.create(rowModel);    // New object, with rowModel as its prototype.\n  ret._index = ko.observable(index);    // New _index observable overrides the existing one.\n  return ret;\n};\n\nmodule.exports = MetaTableModel;\n","/**\n * Implements a binary indexed tree, aka Fenwick tree. See\n * http://en.wikipedia.org/wiki/Fenwick_tree\n */\nfunction BinaryIndexedTree(optSize) {\n  this.tree = [];\n  if (optSize > 0) {\n    this.tree.length = optSize;\n    for (var i = 0; i < optSize; i++) {\n      this.tree[i] = 0;\n    }\n    // The last valid index rounded down to the nearest power of 2.\n    this.mask = mostSignificantOne(this.tree.length - 1);\n  }\n}\n\n/**\n * Returns a number that contains only the least significant one in `num`.\n * @param {Number} num - Positive integer.\n * @returns {Number} The least significant one in `num`, e.g. for 10110, returns 00010.\n */\nfunction leastSignificantOne(num) {\n  return num & (-num);\n}\nBinaryIndexedTree.leastSignificantOne = leastSignificantOne;\n\n\n/**\n * Strips the least significant one from `num`.\n * @param {Number} num - Positive integer.\n * @returns {Number} `num` with the least significant one removed, e.g. for 10110, returns 10100.\n */\nfunction stripLeastSignificantOne(num) {\n  return num & (num - 1);\n}\nBinaryIndexedTree.stripLeastSignificantOne = stripLeastSignificantOne;\n\n\nfunction mostSignificantOne(num) {\n  if (num === 0) {\n    return 0;\n  }\n  var msb = 1;\n  while ((num >>>= 1)) {\n    msb <<= 1;\n  }\n  return msb;\n}\nBinaryIndexedTree.mostSignificantOne = mostSignificantOne;\n\n/**\n * Converts in-place an array of cumulative values to the original values.\n * @param {Array<number>} values - Array of cumulative values, or partial sums.\n * @returns {Array<number>} - same `values` array, with elements replaced by deltas.\n *      E.g. [1,3,6,10] is converted to [1,2,3,4].\n */\nfunction cumulToValues(values) {\n  for (var i = values.length - 1; i >= 1; i--) {\n    values[i] -= values[i - 1];\n  }\n  return values;\n}\nBinaryIndexedTree.cumulToValues = cumulToValues;\n\n\n/**\n * Converts in-place an array of values to cumulative values, or partial sums.\n * @param {Array<number>} values - Array of numerical values.\n * @returns {Array<number>} - same `values` array, with elements replaced by partial sums.\n *      E.g. [1,2,3,4] is converted to [1,3,6,10].\n */\nfunction valuesToCumul(values) {\n  for (var i = 1; i < values.length; i++) {\n    values[i] += values[i - 1];\n  }\n  return values;\n}\nBinaryIndexedTree.valuesToCumul = valuesToCumul;\n\n\n/**\n * @returns {Number} length of the tree.\n */\nBinaryIndexedTree.prototype.size = function() {\n  return this.tree.length;\n};\n\n\n/**\n * Converts the BinaryIndexedTree to a cumulative array.\n * Takes time linear in the size of the array.\n * @returns {Array<number>} - array with each element a partial sum.\n */\nBinaryIndexedTree.prototype.toCumulativeArray = function() {\n  var cumulValues = [this.tree[0]];\n  var len = cumulValues.length = this.tree.length;\n  for (var i = 1; i < len; i++) {\n    cumulValues[i] = this.tree[i] + cumulValues[stripLeastSignificantOne(i)];\n  }\n  return cumulValues;\n};\n\n\n/**\n * Converts the BinaryIndexedTree to an array of individual values.\n * Takes time linear in the size of the array.\n * @returns {Array<number>} - array with each element containing the value that was inserted.\n */\nBinaryIndexedTree.prototype.toValueArray = function() {\n  return cumulToValues(this.toCumulativeArray());\n};\n\n\n/**\n * Creates a tree from an array of cumulative values.\n * Takes time linear in the size of the array.\n * @param {Array<number>} - array with each element a partial sum.\n */\nBinaryIndexedTree.prototype.fillFromCumulative = function(cumulValues) {\n  var len = this.tree.length = cumulValues.length;\n  if (len > 0) {\n    this.tree[0] = cumulValues[0];\n    for (var i = 1; i < len; i++) {\n      this.tree[i] = cumulValues[i] - cumulValues[stripLeastSignificantOne(i)];\n    }\n    // The last valid index rounded down to the nearest power of 2.\n    this.mask = mostSignificantOne(this.tree.length - 1);\n  } else {\n    this.mask = 0;\n  }\n};\n\n\n/**\n * Creates a tree from an array of individual values.\n * Takes time linear in the size of the array.\n * @param {Array<number>} - array with each element containing the value to insert.\n */\nBinaryIndexedTree.prototype.fillFromValues = function(values) {\n  this.fillFromCumulative(valuesToCumul(values.slice()));\n};\n\n\n/**\n * Reads the cumulative value at the given index. Takes time O(log(index)).\n * @param {Number} index - index in the array.\n * @returns {Number} - cumulative values up to and including `index`.\n */\nBinaryIndexedTree.prototype.getCumulativeValue = function(index) {\n  var sum = this.tree[0];\n  while (index > 0) {\n    sum += this.tree[index];\n    index = stripLeastSignificantOne(index);\n  }\n  return sum;\n};\n\n/**\n * Reads the cumulative value from start(inclusive) to end(exclusive). Takes time O(log(end)).\n * @param {Number} start - start index\n * @param {Number} end - end index\n * @returns {Number} - cumulative values between start(inclusive) and end(exclusive)\n */\nBinaryIndexedTree.prototype.getCumulativeValueRange = function(start, end) {\n  return this.getSumTo(end) - this.getSumTo(start);\n};\n\n/**\n * Returns the sum of values up to the given index. Takes time O(log(index)).\n * @param {Number} index - index in the array.\n * @returns {Number} - cumulative values up to but not including `index`.\n */\nBinaryIndexedTree.prototype.getSumTo = function(index) {\n  return (index > 0 ? this.getCumulativeValue(index - 1) : 0);\n};\n\n\n/**\n * Returns the total of all values in the tree. Takes time O(log(N)).\n * @returns {Number} - sum of all values.\n */\nBinaryIndexedTree.prototype.getTotal = function() {\n  return this.getCumulativeValue(this.tree.length - 1);\n};\n\n\n/**\n * Reads a single value at the given index. Takes time O(log(index)).\n * @param {Number} index - index in the array.\n * @returns {Number} - the value that was inserted at `index`.\n */\nBinaryIndexedTree.prototype.getValue = function(index) {\n  var value = this.tree[index];\n  if (index > 0) {\n    var parent = stripLeastSignificantOne(index);\n    index--;\n    while (index !== parent) {\n      value -= this.tree[index];\n      index = stripLeastSignificantOne(index);\n    }\n  }\n  return value;\n};\n\n\n/**\n * Updates a value at an index. Takes time O(log(table size)).\n * @param {Number} index - index in the array.\n * @param {Number} delta - value to add to the previous value at `index`.\n */\nBinaryIndexedTree.prototype.addValue = function(index, delta) {\n  if (index === 0) {\n    this.tree[0] += delta;\n  } else {\n    while (index < this.tree.length) {\n      this.tree[index] += delta;\n      index += leastSignificantOne(index);\n    }\n  }\n};\n\n\n/**\n * Sets a value at an index. Takes time O(log(table size)).\n * @param {Number} index - index in the array.\n * @param {Number} value - new value to set at `index`.\n */\nBinaryIndexedTree.prototype.setValue = function(index, value) {\n  this.addValue(index, value - this.getValue(index));\n};\n\n\n/**\n * Given a cumulative value, finds the first element whose inclusion reaches the value.\n * E.g. for values [1,2,3,4] (cumulative [1,3,6,10]), getIndex(3) = 1, getIndex(3.1) = 2.\n * @param {Number} cumulValue - cumulative value to exceed.\n * @returns {Number} index - the first index such that getCumulativeValue(index) >= cumulValue.\n *    If cumulValue is too large, return one more than the highest valid index.\n */\nBinaryIndexedTree.prototype.getIndex = function(cumulValue) {\n  if (this.tree.length === 0 || this.tree[0] >= cumulValue) {\n    return 0;\n  }\n  var index = 0;\n  var mask = this.mask;\n  var sum = this.tree[0];\n  while (mask !== 0) {\n    var testIndex = index + mask;\n    if (testIndex < this.tree.length && sum + this.tree[testIndex] < cumulValue) {\n      index = testIndex;\n      sum += this.tree[index];\n    }\n    mask >>>= 1;\n  }\n  return index + 1;\n};\n\nmodule.exports = BinaryIndexedTree;\n"],"names":["t","makeT","ACLUsersPopup","Disposable","constructor","pageModel","fetch","this","_fetchData","super","isInitialized","Observable","allUsers","_shareUsers","_attributeTableUsers","_exampleUsers","_currentUser","permissionData","isDisposed","init","users","_showExampleUsers","push","userOverride","get","user","appModel","currentValidUser","map","access","filter","email","id","attributeTableUsers","exampleUsers","set","getUsers","elem","options","setPopupToCreateDom","ctl","buildExampleUserRow","_buildUserRow","isExampleUser","cssMenuWrap","cssMenu","dom","menuCssClass","cssUsers","cls","cssHeader","length","el","setTimeout","focus","Escape","close","defaultMenuOptions","menu","load","catch","cssMenuHeader","menuItemLink","name","testId","_viewAs","doc","currentDoc","gristDoc","waitGrainObs","docComm","getUsersForViewAs","opt","class","cssUserItem","className","cssRole","resetDocPage","extraState","docPage","isPrefork","async","forkResult","fork","Error","window","location","assign","urlState","makeUrl","urlId","setHref","styled","theme","vars","omit","parsePasteForView","data","fields","result","actions","thisDocIdHash","getDocIdHash","forEach","col","idx","field","colRec","column","isRealFormula","disableEditData","parser","createValueParser","x","typeMatches","colType","docIdHash","colRef","targetType","type","docIdMatches","isFullReferencingType","sourceColRec","docModel","columns","getRowModel","sourceType","getRowId","colInfo","visibleCol","widgetOptions","JSON","stringify","widgetOptionsJson","colId","v","hasOwnProperty","rawValue","displayValue","docData","sendActions","ROW","COL","CELL","NONE","CellSelector","view","row","start","end","linePos","dropIndex","currentSelectType","currentDragType","autoDispose","cursor","rowIndex","subscribe","setToCursor","fieldIndex","elemType","colIndex","containsCol","containsRow","between","handlerName","domToRowModel","domToColModel","_index","containsCell","console","error","isCurrentSelectType","isColSelected","isRowSelected","_isCurrentType","Math","min","max","colUpper","colLower","rowUpper","rowLower","rowStartIdx","colStartIdx","rowEndIdx","colEndIdx","colCount","rowCount","currentType","assert","indexOf","CopySelection","tableData","rowIds","colIds","f","colRefs","displayColIds","displayColModel","rowStyle","colStyle","i","formatter","_fmtGetter","getRowPropFunc","_rawGetter","fmtGetter","rowId","formatAny","rawGetter","includes","noop","debounce","isEqual","flatMap","G","WidgetFrame","DisposableWithEvents","_options","_rpc","Rpc","queueOutgoingUntilReadyMessage","setSendMessage","msg","_iframe","contentWindow","postMessage","listener","_onMessage","bind","addEventListener","onDispose","removeEventListener","configure","source","listenTo","check","attach","api","registerImpl","impl","accessChecker","Proxy","target","methodName","arguments","throwError","wrapObject","unregisterImpl","handler","registerFunc","args","callRemote","callRemoteFunc","fullUrl","url","urlObj","URL","searchParams","append","String","readonly","href","urlWithAccess","onElem","src","event","mdest","mtype","MsgType","trigger","receiveMessage","MinimumLevel","_minimum","GristDocAPIImpl","_doc","docId","fetchTable","tableId","applyUserActions","desc","getAccessToken","readOnly","defaultAccess","_accessMap","Map","level","method","has","minimum","require","GristViewImpl","_baseView","_visibleColumns","sortedRows","getKoArray","peek","getter","tableModel","typeInfo","extractInfoFromColType","r","reencodeAsAny","getValue","viewSection","allowSelectBy","selectedRows","hiddenCols","hiddenColumns","c","mappings","mappedColumns","Set","Object","values","WidgetAPIImpl","_section","activeCustomOptions","key","value","BaseEventSource","frame","_ready","RecordNotifier","_debounced","_update","state","table","getCursorPos","dataChange","_notify","ConfigNotifier","_accessLevel","_currentConfig","Computed","use","obs","addListener","cur","prev","settings","accessLevel","TableNotifier","_updateMapping","viewFields","mappingsChange","CustomSectionAPIImpl","_currentAccess","_promptCallback","hasCustomOptions","requiredAccess","columnsToMap","defaults","viewSectionModel","_customDef","customDef","_emptyWidgetPage","getGristConfig","homeUrl","autoDisposeCallback","_customSection","dispose","_foundPlugin","_foundSection","extend","notify","pluginId","_updatePluginInstance","sectionId","_updateCustomSection","commands","createGroup","_commands","hasFocus","viewPane","_buildDom","_frame","_pluginInstance","docPluginManager","pluginsList","find","p","definition","CustomSectionElement","element","classList","add","mode","showPlugin","showPluginNotification","showSectionNotification","showPluginContent","_mode","_url","_access","_buildIFrame","buildNotification","isReadonly","desiredAccessLevel","baseUrl","exposeAPI","_promptAccess","useEvents","create","iframe","timer","disposed","clearInterval","document","activeElement","setInterval","stop","onFrameFocus","closeRegisteredMenu","CustomView","editOptions","err","message","UserError","prototype","aclSelect","optionArray","cssSelect","buttonArrow","cssSelectArrow","select","colors","cssSelectCls","icon","cssColListWidget","cssColItem","cssColId","cssNewColItem","cssColItemIcon","aclFormulaEditor","editorElem","editor","gristTheme","enableCustomCss","aceTheme","appearance","setTheme","themeListener","setAceTheme","setOptions","enableLiveAutocompletion","maxLines","renderer","setShowGutter","setPadding","setScrollMargin","$blockScrolling","Infinity","setReadOnly","setFontSize","setHighlightActiveLine","session","getSession","setMode","setTabSize","setUseWrapMode","showPlaceholder","initialValue","scroller","appendChild","cssAcePlaceholder","placeholder","on","setupAceEditorCompletions","getSuggestions","prefix","suggestion","setValue","save","addCommand","bindKey","win","mac","exec","blur","removeCommands","customiseEditor","cssConditionInputAce","useCapture","destroy","cancel","cssMemoInput","PERMISSION_BIT_ORDER","next","pvalue","makePermissionSet","bits","makeValue","pset","bit","tick","show","menuIcon","cssMenuIconSpace","cssPermissions","cssBit","cssMenuItem","menuItem","cssMenuItemContent","cssMenuItemDetails","AccessRules","_ruleCollection","ACLRuleCollection","_tableRules","obsArray","_docDefaultRuleSet","_specialRulesWithDefault","_specialRulesSeparate","_userAttrRules","_errorMessage","_ruleProblems","_aclResources","_aclUsersPopup","ACLUsers","docPageModel","_ruleStatus","defRuleSet","tableRules","specialRulesWithDefault","specialRulesSeparate","userAttr","ruleStatus","getChangedStatus","getAllTableIds","getUserAttributeRules","size","tr","u","_savingEnabled","s","_userAttrChoices","rules","ruleIndex","rule","entries","getValidColIds","getTable","tableActionEmitter","_onChange","_updateDocAccessData","update","e","allTableIds","Array","from","keys","sort","userAttrRules","userAttrChoices","aclResources","Promise","all","log","pullOutSchemaEdit","getAclResources","tables","problems","TableRules","getAllColumnRuleSets","getTableDefaultRuleSet","withDefaultRules","separateRules","SpecialRules","filterRuleSets","filterRuleSet","DefaultObsRuleSet","getDocDefaultRuleSet","ObsUserAttributeRule","resourcesTable","getMetaTable","rulesTable","resourceSync","syncRecords","flatten","getResources","resource","serializeResource","defaultResourceRowId","rowIdMap","newRules","getRules","resourceRowId","resourceRec","resourceKey","aclFormula","permissionsText","rulePos","memo","getRule","userAttributes","lastGoodRulePos","lastGoodIndex","pos","step","k","rulesSync","userActions","reportError","cssOuter","behavioralPromptsManager","attachTip","hideArrow","cssAddTableRow","bigBasicButton","disabled","bigPrimaryButton","cssDropdownIcon","style","menuItemAsync","_addTableRules","getTableTitle","some","_addUserAttributes","attachPopup","placement","cssConditionError","ruleProblems","cssSection","cssRuleProblems","buildRuleProblemsDom","shadowScroll","cssSectionHeading","cssTableRounded","cssTableHeaderRow","cssCell1","cssCell","cssColHeaderCell","cssCell4","cssColumnGroup","cssCellIcon","buildUserAttrDom","buildDom","cssSeedRule","buildCheckBoxes","cssCell2","cssCellIconWithMargins","ruleSet","buildRuleSetDom","buttons","problem","_addButtonsForMissingTables","tableIds","_addButtonsForMissingColumns","names","_addButtonsForMisconfiguredUserAttributes","button","removeItem","text","checkAclFormula","exemptColIds","tableColIds","validColIds","invalidColIds","join","isHiddenCol","getCustomRules","body","addDefaultRules","getSeedRules","title","cssRemoveIcon","remove","display","removeColRules","columnRuleSets","ruleColIds","getColIdList","removeColId","_accessRules","_colRuleSets","_defRuleSet","_columnRuleSets","_haveColumnRules","cols","_defaultRuleSet","rs","_createColumnObsRuleSet","d","Boolean","getColIds","addRuleParts","foldEveryoneRule","removeTableRules","cssTableName","cssIconButton","_addColumnRuleSet","_addDefaultRuleSet","buildColumnRuleSets","buildErrors","formulaError","seen","allow","deny","mixed","sign","summarizePermissions","counterSign","owner","accessRules","initialColIds","ColumnObsRuleSet","hasOnlyBuiltInRules","SpecialSchemaObsRuleSet","SpecialObsRuleSet","ObsRuleSet","_ruleSet","_body","parts","part","ObsRulePart","isEmpty","removeRuleSet","getRulePart","cssTableRow","buildResourceDom","cssRuleBody","buildRulePartDom","hasDefaultCondition","addRulePart","rulePart","beforeRule","content","isNew","splice","newParts","oldParts","myEveryonePart","newEveryonePart","reverse","getFirst","permissions","isBuiltIn","hasEmptyCondition","every","isBuiltInOrEmpty","_initialColIds","_colIds","checkTableColumns","baseRuleStatus","selectBox","matches","editing","newColId","onWrite","addColId","unusedColIds","used","tabIndex","ev","relatedTarget","defaultLabel","onBlur","aclColumnList","_getValidColIdsList","cssCenterContent","cssDefaultLabel","schemaEditRules","formula","specialRuleProperties","description","availableBits","FullCopies","SeedRule","SchemaEdit","_isExpanded","props","isNonStandard","_createIsNonStandardObs","isChecked","_createIsCheckedObs","cssRuleDescription","cssCheckbox","_buildDomWarning","_allowEveryone","val","builtInRules","makeRulePart","_allowEditors","_userAttr","_name","_tableId","_lookupColId","lookupColId","_charId","charId","_validColIds","_userAttrError","userAttrError","index","removeUserAttributes","cssCellContent","cssInput","currentTheme","_setUserAttr","choice","completer","showPopup","label","fullCharId","trim","strippedCharId","startsWith","substring","spec","prop","_getUserAttrError","origRecord","test","_rulePart","_aclFormula","_completions","_permissions","_checkPending","_formulaError","_formulaProperties","aclFormulaParsed","parse","getAclFormulaProperties","_memo","_showMemoEditor","_error","_warnInvalidColIds","usedColIds","isLastCondition","emptyPerms","wide","cssRulePartAndMemo","_isNonFirstBuiltIn","_setAclFormula","isSoleCondition","a","b","slice","toUpperCase","empty","allowAll","denyAll","setPermissions","sanityCheck","capitalize","ps","permissionSet","psetDescription","permissionsWidget","getAvailableBits","_memoEditor","removeRulePart","cssMemoColumnGroup","cssMemoIcon","_e","aclMemoEditor","Enter","_ev","unwrap","getFirstBuiltIn","allValid","invalid","newRecords","uniqueId","oldRecords","getRecords","newRecordMap","removedRecords","addedRecords","updatedRecords","newRec","updated","isNonNullish","getColChanges","pairs","colIdSet","before","after","rec","concat","observableArray","item","ruleSets","textInput","gristNotify","ActionLog","_pending","_loaded","_showAllTables","_loading","_gristDoc","_displayStack","_selectedTableId","viewModel","section","activeSection","_buildLogDom","ag","_setupFilters","at","otherAg","otherId","actionNum","isUndo","fromSelf","peekLength","prevAction","prevState","unshift","sum","txt","act","_renderTableSchemaChanges","_renderColumnSchemaChanges","tdiff","cells","koDom","_showForTable","_renderTableName","header","diff","_renderCell","_selectCell","filt","tableFilters","renames","actionSummary","tableRenames","newName","affectedTableIds","tableName","_loadActionSummaries","koForm","checkbox","foreach","timestamp","time","timeFormat","Date","renderTabularDiffs","cssClass","_hasSelectedTable","toggleClass","getActionSummaries","pushAction","top","cell","pre","post","split","replace","scope","pair","_renderSchemaChange","tableDeltas","columnRenames","findIndex","action","tableRename","td","removeRows","columnRename","getTableModel","viewRow","tableMetaRow","primaryView","viewId","openDocPage","viewSections","moveToCursorPos","hljs","registerLanguage","CodeEditorPanel","_schema","_denied","_onSchemaAction","schema","highlightBlock","fetchTableSchema","match","CursorMonitor","store","_restored","_store","StorageWrapper","userId","app","topAppModel","appObs","currentUser","_key","_whenDocumentLoadsRestorePosition","_whenCursorHasChangedStoreInMemory","clear","cursorPosition","_storePosition","hasCustomNav","_abortRestore","activeViewId","oneTimeListener","currentView","_doRestorePosition","position","_readPosition","collapsed","activeCollapsedSections","recursiveMoveToCursorPos","lastPosition","read","_storage","storage","now","setItem","getItem","setImmediate","DocComm","_comm","openResponse","_docId","_notifier","_wrapMethod","useQuerySet","disposeQuerySet","applyUserActionsById","importFiles","finishImportFiles","cancelImportFiles","generateImportDiff","addAttachments","findColFromValues","getFormulaError","fetchURL","autocomplete","removeInstanceFromDoc","startBundleUserActions","stopBundleUserActions","forwardPluginRpc","reloadPlugins","reloadDoc","waitForInitialization","changeUrlIdEmitter","Emitter","_forkPromise","_isClosed","_setOpenResponse","m","isActionFromThisDoc","_shutdown","clientId","_clientId","docFD","_docFD","path","docUrl","docWorkerUrl","getDocWorkerUrl","addUserActions","_callMethod","_callDocMethod","_doForkDoc","closeDoc","warn","releaseDocConnection","useDocConnection","slowNotification","_doCallMethod","shouldFork","forkAndUpdateUrl","_makeRequest","reportMessage","openDoc","emit","toCursor","Drafts","CursorAdapter","StorageAdapter","notification","NotificationAdapter","tooltip","TooltipAdapter","EditorAdapter","when","emitter","cellCancelled","modified","showUndoDiscard","pressed","draft","goToCell","activate","setState","disappeared","activated","hasDraftFor","showContinueDraft","cellModified","_","scheduleClose","cellSaved","click","_memory","equals","_hadAction","_holder","Holder","notifier","createUserMessage","styledNotification","discardNotification","_tooltip","_scheduled","origClose","clearTimeout","editorDom","activeEditor","getDom","clb","showTooltip","styledTooltip","preventDefault","tooltipCloseButton","cellPosition","mholder","MultiHolder","changeEmitter","currentState","wasModified","cancelEmitter","saveEmitter","rebuildEditor","Number","POSITIVE_INFINITY","activateEditorAtCursor","EditorMonitor","EditMemoryStorage","_listenToReload","updateValue","lastEdit","readValue","_entry","_timestamp","_storageKey","entry","ex","fromPairs","invert","escapeCharDict","invertedEscapeCharDict","buildParseOptionsForm","doUpdate","doCancel","items","visible","optionsMap","cssParseOptionForm","cssParseOption","cssParseOptionName","escapeChars","unescapeChars","cssInputText","onInput","optionToInput","cssModalButtons","unchanged","input","toggleCustomized","info","customizedColumns","delete","Importer","_importSourceElem","_createPreview","_docComm","_optionsScreenHolder","_mergeOptions","_parseOptions","_sourceInfoArray","_sourceInfoSelected","_sourceInfoHolder","_formulaEditorHolder","_previewViewSection","isLoadingSection","transformSection","_isDeleted","_isLoadingDiff","_lastGenImportDiffPromise","_debouncedUpdateDiff","_updateDiff","leading","trailing","_hasScheduledDiffUpdate","_destTables","visibleTableIds","getObservable","_transformFields","_transformColImportOptions","_makeImportOptionsForCol","_unmatchedFieldsMap","sources","unmatched","destTableId","labels","importSource","_screen","PluginScreen","_resetImportDiffState","uploadResult","plugin","handle","renderPlugin","importSourceStub","getImportSource","removeRenderTarget","renderSpinner","kind","files","File","sizeLimit","_fetchFromDrive","multiple","CancelledError","_cancelImport","GDriveUrlNotSupported","renderError","_uploadResult","_reImport","sectionRef","sourceInfo","genImporterViewPromise","sendAction","hiddenTableId","lastGenImporterViewPromise","transformSectionRef","viewSectionRef","activeSectionId","upload","transforms","file","_createTransformRuleMap","uploadId","_file","_createMergeOptionsMap","uploadFileIndex","origTableName","_createTransformRule","_getMergeOptionsForSource","transformFields","sourceFields","sourceSection","destCols","sourceCols","mergeOptions","updateExistingRecords","mergeCols","mergeStrategy","si","parseOptions","NUM_ROWS","importResult","_getTransformedDataSource","_getHiddenTableIds","_getPrimaryViewSection","_getSectionByRef","selectedView","_prepareMergeOptions","_renderMain","hasInvalidMergeCols","_validateImportConfiguration","mergeOptionMaps","_getMergeOptionMaps","primaryViewId","dataTables","isValid","selectedSourceInfo","rightElement","cssModalHeader","cssModalTitle","cssStaticHeader","isMerging","comparison","genImportDiffPromise","_cancelPendingDiffRequests","SCHEMA","_buildModalTitle","cssActionLink","cssLinkIcon","_renderParseOptions","selectTab","_updateImportDiff","tabs","cssTableList","destId","_resetTableMergeOptions","_updateTransformSection","isSelected","unmatchedCount","cssTabItem","cssBorderBottom","not","cssTabItemContent","cssFileTypeIcon","origName","pop","getSourceFileExtension","cssTableLine","cssTableSource","getSourceDescription","overflowTooltip","count","cssError","hoverTooltip","previewAndConfig","configSection","showLoader","previewSection","isSkipTable","isMergeTable","selectIfDestIs","cssDestination","onClickChangeDestTo","showRightPanel","onClickShowView","holder","cssConfigAndPreview","cssConfigPanel","cssConfigLeft","cssTitle","cssDestinationWrapper","destTable","cssDetailsIcon","cssConfigRight","cssNavigation","cssFlexBaseline","cssDestinationTableSecondary","cssNavigationIcon","cssSlash","cssColumnMappingNav","cssMergeOptions","cssMergeOptionsToggle","owner2","cssMergeOptionsMessage","multiSelect","owner1","cssColumnMatchHeader","fromKo","isCustomFormula","cssColumnMatchRow","cssDestinationFieldLabel","cssIcon180","owner3","isCustom","_buildCustomFormula","_buildSourceSelector","transformCol","matched","_setColumnFormula","clearColumns","cssPreviewColumn","cssPreviewSpinner","cssOptions","list","dt","cssWarningText","WARNING","cssOverlay","gridView","cssPreviewGrid","cssImportButtons","cssImportButtonsLine","_maybeFinishImport","piles","cssUnmatchedFieldsList","cssUnmatchedFields","cssUnmatchedFieldsIntro","cssUnmatchedIcon","cssContainer","cssPreviewWrapper","cssTabsWrapper","_addFocusLayer","render","fullscreen","fullbody","gristCol","refTable","refTableId","visibleColId","visibleColModel","isRefDest","pureType","sourceField","sourceCol","sourceId","sourceLabel","others","menuDivider","container","FocusLayer","defaultFocusElem","allowFocus","onDefaultFocus","transformColRef","customized","keepType","sendTableAction","isFormula","refElem","onSave","vsi","viewInstance","editRow","moveEditRowToCursor","editorHolder","editingFormula","canDetach","setupCleanup","_setupFormulaEditorCleanup","updateColValues","_saveEdit","saveEdit","off","anyOtherColumns","possibleSources","myFormula","anyOther","_makeImportOptionsMenu","selectedSource","importOptions","selectedSourceText","selectedOption","cssSelected","otherColsOptions","formulaOption","selectOption","_activateFormulaEditor","selectMenuElement","newFormula","cssGreenIcon","selectMenu","codeOptions","cssFieldFormula","anotherScreen","showImportDialog","noClickAway","noEscapeKey","_buildStaticTitle","itemUrl","code","googleAuthorizationCode","permError","cssPreview","textButton","makeTestId","DuplicateTableModal","_newTableName","_includeData","_saveDisabled","_use","saveDisabled","_duplicateTable","cssWarning","cssWarningIcon","link","newTableName","includeData","buildRenameWidget","vs","cssTitleContainer","ctrl","tableRec","isSummary","summarySourceTable","tableNameDef","groupDesc","inputTableName","inputWidgetTitle","inputWidgetPlaceholder","defaultWidgetTitle","inputWidgetDesc","disableSave","newWidgetTitle","newWidgetDesc","modalCtl","ModalControl","saveTableName","saveOnly","saveWidgetTitle","newTitle","saveWidgetDesc","isRawView","widgetInput","isWidgetTitleEmpty","inputEl","tableInput","cancelled","myCommands","accept","descInput","cursorUp","selectionStart","cursorDown","commandGroup","pauseMousetrap","tableNameHidden","updateOnKey","widgetNameHidden","cssButtons","primaryButton","workInProgress","basicButton","Enter$","ctrlKey","metaKey","initialFocus","buildWidgetRenamePopup","boundaries","stopPropagation","descriptionInfoTooltip","cssButton","DataTables","_rowCount","currentDocUsage","usage","_rowCountFormatter","Intl","NumberFormat","_tables","rawDataTables","rawSummaryTables","cssList","cssItem","cssLeft","cssTableTypeIcon","cssMiddle","cssTitleRow","cssTableTitle","_tableTitle","cssDetailsRow","cssTableIdWrapper","cssHoverWrapper","cssUpperCase","cssTableId","stopImmediatePropagation","showTransientTooltip","copyToClipboard","setTestState","clipboard","_tableRows","cssRight","_menuItems","rawViewSection","rawViewSectionRef","isSummaryTable","buildTableName","isHidden","_removeTable","visibleTables","menuText","onSuccess","saveModal","_ctl","duplicateTableModal","saveFunc","response","width","duplicateTable","raw_section_id","confirmModal","formattedTableName","rowCounts","cssTableRowsWrapper","cssLoadingDots","cssTableRows","format","cssLine","DocumentUsage","_docPageModel","_currentDoc","_currentDocUsage","_currentOrg","currentOrg","_currentProduct","currentProduct","_dataLimitStatus","dataLimitStatus","_dataSizeBytes","dataSizeBytes","_attachmentsSizeBytes","attachmentsSizeBytes","_rowMetricOptions","product","maxRows","features","baseMaxRowsPerDocument","maxValue","currentValue","total","maximumValue","unit","shouldHideLimits","formatValue","_dataSizeMetricOptions","dataSize","maxSize","baseMaxDataSizePerDocument","DEFAULT_MAX_ROWS","tooltipContentFunc","GristTooltips","toFixed","_attachmentsSizeMetricOptions","attachmentsSize","baseMaxAttachmentsBytesPerDocument","_areAllMetricsPending","hasNonPendingMetrics","metric","_isAccessDenied","isLoading","workspace","org","isPublicUser","hasHiddenMetrics","cssSpinner","_buildMessage","_buildMetrics","isAccessDenied","buildMessage","status","buildLimitStatusMessage","disableRawDataLink","buildUpgradeMessage","showUpgradeModal","cssUsageMetrics","metrics","buildUsageMetric","buildRawDataPageLink","gracePeriodDays","canUpgrade","variant","onUpgrade","upgradeLinkText","linkText","capitalizeFirstWord","onClick","cssUnderlinedLink","setLinkUrl","domArgs","cssUsageMetric","cssMetricName","withInfoTooltip","cssOverflowableText","n","toString","ratioUsed","percentUsed","floor","cssProgressBarContainer","cssProgressBarFill","buildUsageProgressBar","cssWarningMessage","cssIcon","cssLightlyBoldedText","mediaXSmall","viewSectionMenu","anyFilter","activeFilters","displaySaveObs","filterSpecChanged","activeSortJson","isSaved","bundleActions","saveFilters","doSave","revert","revertFilters","doRevert","showExpandIcon","isNarrowScreenObs","maximizedSectionId","externalSectionId","isRaw","cssFilterMenuWrapper","cssFilterIconWrapper","cssFilterIcon","cssSectionSaveButtonsWrapper","cssSaveTextButton","cssRevertIconButton","cssRevertIcon","makeSortPanel","cssLabel","FilterConfig","menuOptions","parentKey","color","cssMenuInfoHeader","cssMenuText","cssSpacer","cssMenuIconWrapper","makeCustomOptions","displaySave","cssSaveButtonsRow","cssSaveButton","toggle","cssDotsIconWrapper","cursorRow","isAddRow","viewData","contextMenu","menuItemCmd","allCommands","viewRec","isSinglePage","params","anchorUrlState","getAnchorLinkForSection","hash","popup","rawUrl","dontRemoveSection","viewLayout","layout","getAllLeafIds","expandedSectionCount","pushUrl","getCsvLink","download","getXlsxActiveViewLink","makeViewLayoutMenu","cssExpandIconWrapper","cssSmallIcon","SortConfig","clsOldUI","cssIconWrapper","buildCollapsedSectionDom","sectionRowId","cssMiniSection","typeComputed","cssDragHandle","cssSigmaIcon","titleDef","makeCollapsedLayoutMenu","buildViewSectionDom","isResizing","draggable","focusable","selectedBySectionTitle","linkSrcSectionRef","linkSrcSection","cssViewLeaf","cssViewLeafInactive","cssDragIcon","isReadonlyKo","buildWidgetTitle","cssTestClick","buildTitleControls","cssResizing","disableEditing","isTruncated","selectionSummary","mediaSmall","Signal","_listeners","WeakSet","_emitter","first","rest","signal","compute","disposable","listen","selector","last","distinct","stateHandler","_beforeHandler","emitted","LayoutTray","drag","drop","hovering","over","dragging","CollapsedLayout","active","externalLeaf","ExternalLeaf","buildLayout","collapsedSections","_registerCommands","leafId","addBox","removeFromLayout","topPoint","_rootElement","parentElement","getBoundingClientRect","flag","pipe","mouseEvent","dragMove","clientY","savedSections","boxes","box","selected","getBox","detach","cssCollapsedTray","syncHover","CollapsedDropZone","collapseSection","layoutEditor","saveLayoutSpec","expandSection","activeCollapsedSectionId","deleteCollapsedSection","removeViewSection","currentSpec","layoutSpecObj","validSections","leaf","model","pushedLeaf","_animation","_lastIndex","ok","EmptyLeaf","obsRects","cssVirtualZone","root","_isAnimating","_lastTarget","contains","_calculate","underMouse","_removeDropZone","_insertDropTarget","parentRect","rects","lineOffset","height","rootElement","offsetTop","CollapsedLeaf","left","right","offsetLeft","VRect","offsetWidth","leftRoot","rightRoot","TargetLeaf","_start","insert","_stop","ArrayHolder","_boxes","l","leafIds","leafs","removed","release","cssLayout","justStarted","isDragging","dragged","floater","downX","downY","HTMLElement","closest","findDraggable","MiniFloater","$","mouseMoveListener","mouseUpListener","clientX","dragEnd","abs","dragStart","onMove","line","Leaf","_onHover","monitorDrop","myIndex","cssEmptyBox","cssProbe","resolve","_content","_hiddenViewInstance","_indexWhenDragged","_detached","_viewInstance","_buildHidden","instance","previous","buildContentDom","cssBox","node","detachNode","myElement","clone","cssHidden","cssMiniFloater","multipleLeaves","fromEvents","_drop","updateTargets","miniDrag","triggerUserEditStart","dropTargeter","removeTargetHints","triggerUserEditStop","dropped","externalEditor","activeTarget","buildLayoutBox","isChild","addChild","isAfter","addSibling","_replaceFloater","droppedBox","otherSection","doRemoveBox","period","overEditor","lastContent","lastTransform","lastX","lastY","leafContent","newContent","cssFloaterWrapper","transform","mouseOffsetX","mouseOffsetY","currentContent","_array","obj","offset","cssRow","viewSectionTypes","record","GridView","detail","DetailView","chart","ChartView","single","custom","ViewSectionHelper","_instance","Cons","getInstanceConstructor","ViewLayout","previousSectionId","layoutSaveDelay","Delay","_freeze","_savePending","views","viewSectionObs","computedArray","compArr","layoutSpec","_updateLayoutSpecWithSections","rateLimit","Layout","_buildLeafContent","rebuildLayout","schedule","LayoutEditor","layoutTray","resizeEmitter","_onResize","_maybeFocusInSection","propertyName","isNarrowScreen","onResize","rootElem","classActive","cssLayoutBox","classInactive","forEachBox","getLeafBox","deleteSection","nextSection","_otherSection","prevSection","printSection","printViewSection","sortFilterMenuOpen","_openSortFilterMenu","maximizeActiveSection","_maximizeActiveSection","maximized","maximizedLeaf","mainBoxInPopup","miniBoxInPopup","cssVFull","cssLayoutWrapper","buildPopup","cssCloseButton","promise","specs","getLayoutSpec","setAndSave","viewSectionRowId","oldTray","replaceLayout","activeSectionBox","maximize","tmpLayout","specFieldIds","viewSectionIds","missingLeafs","collapsedLeafs","newBox","rows","rootBox","childBoxes","lastRow","isLeaf","addToSpec","inst","delta","sectionIds","currentIndex","mod","layoutBox","getContainingBox","leafBoxDom","querySelector","RawDataPage","_lightboxVisible","emptyView","rowModels","cursorMonitor","cssPage","RawDataPopup","_close","_viewSection","_onClose","cssSectionWrapper","sortBy","UndoStack","_undoChain","PromiseChain","isDisabled","_stack","_pointer","_linkMap","undoDisabledObs","redoDisabledObs","undoState","isUndoDisabled","isRedoDisabled","otherIndex","linkId","setDefault","_sendAction","actionGroups","_findActionBundle","cursorPos","op","actionHash","prevNums","queue","group","DocPluginManager","localPlugins","_untrustedContentOrigin","_clientScope","pluginInstance","PluginInstance","components","manifest","safeBrowser","SafeBrowser","rpc","registerForwarder","forwardCall","call","forwardMessage","receiveAction","ColumnCache","_tableData","_cachedColIndexes","_invalidateCache","dataLoadedEmitter","_clearCache","calc","getSetMapValue","colValues","ColumnACIndexes","_columnCache","_buildColACIndex","getRowIds","valColumn","getColValues","cleanText","normalizeText","itemCompare","ACIndex","ACIndexImpl","localeCompare","nativeCompare","TableData","columnTypes","columnACIndexes","_columnErrorCounts","oldRowIds","loadData","loadPartial","unloadPartial","countIf","isRaisedException","optDesc","applied","DocData","metaTableData","sendActionsEmitter","sendActionsDoneEmitter","_bundlesPending","_nextDesc","_lastActionNum","_bundleSender","BundleSender","_virtualTablesFunc","colTypes","optTableId","prepareResolve","preparePromise","triggerFinalize","triggerFinalizePromise","completionPromise","_lastBundlePromise","_triggerBundleFinalize","prepare","_shouldIncludeInBundle","shouldIncludeInBundle","finalize","doBundleActions","callback","nestInActiveBundle","bundlingInfo","startBundlingActions","bluebird","_sendActionsImpl","then","retValues","tableActions","sendTableActions","eventData","_actions","_getSendPromise","isModification","_sendPromise","ret","createACLRuleRec","createColumnRec","refRecord","parentId","jsonObservable","recordSet","summarySource","summarySourceCol","hasTriggerFormula","origColRef","origCol","isTransforming","gristTypes","extractTypeFromColType","_displayColModel","displayCol","saveDisplayFormula","displayColRef","disableModifyBase","disableModify","getReferencedTableId","visibleColFormatter","formatterForRec","cleanParse","behavior","chatHistory","messages","conversationId","uuid","vcol","widgetOpts","visibleColType","visibleColWidgetOpts","docSettings","docInfoRow","documentSettingsJson","createDocInfoRec","documentSettings","defaultViewId","tab","allTabs","viewRef","newDefaultViewId","page","visibleDocPages","createFilterRec","activeFilter","modelUtil","customComputed","createPageRec","isCensored","isSpecial","showDocTourTable","showDocTutorialTable","primaryTable","isTableHidden","createTabBarRec","createTableRec","validations","summarySourceColRefs","primaryTableId","groupByColumns","tableColor","luminosity","seed","disableAddRemoveRows","supportsManualSort","MANUALSORT","savingComputed","write","setter","fieldWithDefault","createValidationRec","removeRule","rulesCols","newStyles","rulesStyles","debug","ViewFieldConfig","_field","_docModel","selectedFields","multiselect","sameWidgets","widgets","UserType","widget","allSame","fillColor","textColor","commonOptions","newOptions","optionList","common","extendObservable","objObservable","allEmpty","wrap","alignment","savableOptions","headerStyle","hasRenames","config","actionOptions","arr","ifNotSet","same","cacheKey","createViewFieldRec","widthDef","defaultWidth","widthPx","displayLabel","_editingFormula","formulaCssClass","useColOptions","_fieldOrColumn","visibleColRef","addSaveInterface","fieldRef","_widgetOptionsStr","opts","fontBold","fontUnderline","fontItalic","fontStrikethrough","headerTextColor","headerFillColor","headerFontBold","headerFontUnderline","headerFontItalic","headerFontStrikethrough","rulesList","refListRecords","rulesColsIds","hasRules","addEmptyRule","useCol","createViewRec","tabBarItem","tabBar","allSections","koUtil","observableWithDefault","firstLeaf","children","getFirstLeaf","_isActiveSectionGone","gone","identity","mapValues","pickBy","LinkingState","linkConfig","srcSection","srcCol","srcColId","tgtSection","tgtCol","tgtColId","_srcSection","_srcCol","_srcColId","_srcTableModel","srcTableData","operation","isRefListType","filterColValues","_srcCustomFilter","_srcCellFilter","_simpleFilter","summary","detailSource","gutil","isSubset","isSummaryOf","filters","operations","srcRowId","activeRowId","srcValue","isDirectSummary","isListType","_filterColValues","srcValueFunc","_makeSrcCellGetter","getDefaultColValues","linkingState","valuesFunc","srcCellGetter","isSrcRefList","isList","toKo","srcRowModel","createFloatingRowModel","srcCellObs","createViewSectionRec","linkedSections","defaultOptions","verticalGridlines","horizontalGridlines","zebraStripes","customView","numFrozen","optionsObj","customViewDefaults","widgetDef","customDefObj","columnsMapping","selectedColumns","columnsBehavior","columnsType","columnsAllIsFormula","customValue","saveCustomDef","themeDef","chartTypeDef","chartType","tableRef","widgetTypeDesc","isVirtual","borderWidthPx","borderWidth","_savedFilters","_unsavedFilters","savedFiltersByColRef","viewFieldsByColRef","savedFilter","pinned","unsavedFilter","fieldOrColumn","isFiltered","isPinned","pinnedActiveFilters","showNestedFilteringPopup","updatedFilters","removedFilterIds","newFilters","arrayRepeat","setFilter","filterInfo","newFilter","newPinned","revertFilter","sortColRefs","activeSortSpec","sortRef","colModel","Sort","activeDisplaySortSpec","directionalColRef","effectiveColRef","included","linkSrcCol","linkSrcColRef","linkTargetCol","linkTargetColRef","_linkingState","linkingFilter","lastCursorPos","lastScrollPos","scrollLeft","isSorted","disableDragRows","rawNumFrozen","request","mapping","ColumnToMap","colMap","widgetCol","allowMultiple","mappedCol","isArray","cId","canByMapped","selectedColumn","rawSection","isCollapsed","createCellRec","hidden","parent","properContent","optionJson","userName","timeCreated","timeUpdated","resolved","resolvedBy","rowModel","groupByField","groupBy","computedAutoDispose","createRowGroupModel","pure","rowIdObs","rowsIdObs","ids","DocModel","docInfo","_metaTableModel","pages","dataTablesByRef","createAllRowsModel","isTutorialFork","trunkAccess","_metaTables","allTables","_createAllTablesArray","_createVisibleTablesArray","_createRawDataTablesArray","_createRawSummaryTablesArray","koArray","syncedKoArray","subscribeForEach","_onAddTable","_onRemoveTable","allPages","menuPages","pagesToShow","pagePos","following","firstOutside","indentation","hide","hasDocTour","isTutorial","rowConstructor","tid","dtm","newTableId","createTablesArray","isHiddenTable","isTutorialTable","tablesModel","filterFunc","_row","rowSource","rowset","FilteredRowSource","subscribeTo","_createRowSetModel","tablesData","DocHistorySubTab","StringUnion","DocHistory","_actionLog","_subTab","guard","cssSubTabs","buttonSelect","subTab","_buildSnapshots","origUrlId","idParts","snapshotId","compareUrlId","compare","compareSnapshotId","snapshot","compareDocId","snapshots","snapshotsDenied","getDocAPI","getSnapshots","cssSnapshotDenied","snapshotList","lastModified","prevSnapshot","cssSnapshot","cssSnapshotTime","cssSnapshotCard","cssDatePart","cssMenuDots","setLink","menuAnnotate","parentSelectorToMark","range","tourSingleton","startOnBoarding","onFinishCB","OnBoardingPopupsCtl","isTourActive","OnBoardingError","ctlIndex","_messages","_onFinishCB","_arrowEl","ArrowContainer","svg","_openPopupCtl","_showOverlay","_move","Mousetrap","movement","maybeClose","newIndex","skip","delay","showHasModal","_showHasModal","_showHasPopup","_finish","_buildPopupContent","popper","adjacentPadding","cropPadding","_getAdjacentPadding","modifiers","padding","getComputedStyle","paddingBottom","paddingTop","paddingLeft","paddingRight","endsWith","_overlay","Container","tabindex","ContentWrapper","cssBody","_buildFooter","ArrowLeft","ArrowRight","nSteps","isLastStep","isFirstStep","Footer","ProgressBar","Dot","Buttons","Overlay","removeChild","sideSelectorChunk","side","IconList","startDocTour","docTour","linkUrl","linkIcon","locationValue","sameDocumentUrlState","validLinkUrl","makeDocTour","invalidDocTour","_gristDocTour","outerHTML","exposeDocTour","image","_text","classes","_title","DocTutorial","FloatingPopup","minimizable","stopClickPropagationOnMove","_appModel","_currentFork","forks","_docData","_slides","_currentSlideIndex","tutorial","lastSlideIndex","_saveCurrentSlidePositionDebounced","_saveCurrentSlidePosition","_loadSlides","_reloadSlides","currentDocTitle","slides","slideIndex","slide","innerHTML","slideContent","boxContent","cssTryItOutBox","tagName","_openLightbox","_initializeImages","cssPopupFooter","numSlides","isFirstSlide","isLastSlide","cssFooterButtonsLeft","cssPopupFooterButton","_restartTutorial","cssProgressBar","cssProgressBarDot","slideTitle","closeOnClick","_changeSlide","cssFooterButtonsRight","_previousSlide","_finishTutorial","_nextSlide","imageUrls","walkTokens","token","depth","sanitizeHTML","currentOptions","currentSlideIndex","percentComplete","updateDoc","full","tutorialForkIdDigest","tutorialTrunkIdDigest","trunkId","lastVisitedOrg","lastVisitedOrgDomain","getWelcomeHomeUrl","docApi","sourceDocId","resetTutorialMetadata","modalOptions","backerDomArgs","imgs","querySelectorAll","img","setHoverTooltip","flip","boundariesElement","modal","cssFullScreenModal","cssModalCloseButton","cssModalContent","cssModalImage","DocSettingsPage","_docInfo","_timezone","timezone","_locale","_currency","_engine","_setEngine","canChangeEngine","getSupportedEngineChoices","cssDataRow","buildTZAutocomplete","buildLocaleSelect","defaultCurrencyLabel","currency","span","currentDocId","forceReload","reload","cssBeta","primaryButtonLink","_doSetEngine","locale","localeList","toLowerCase","propertyCompare","acIndex","textObs","localeCode","valueObs","_value","gristConfig","supportEngines","DocDataCache","_altActions","AlternateActions","results","userAction","processedAction","processUserAction","storedAction","stored","requireTable","getTableDataAction","_counterForUndoActions","VirtualTableData","_ext","ext","cache","initialActions","fetchData","fetchAll","_sendTableActionsCore","isUser","afterEdit","_editor","sync","afterAnySchemaChange","undo","getRecord","getRecordNew","patch","hasTableIds","newTable","beforeEdit","docAction","getUndoStack","rowIdHint","_doUndo","actionGroup","VirtualTable","_owner","lazySync","maxWait","registerVirtualTable","setExt","schemaChange","pick","without","WEBHOOK_COLUMNS","choices","choiceOptions","WEBHOOK_VIEW_FIELDS","WebhookExternalTable","_docApi","parentPos","saveableFields","webhooks","getWebhooks","_initalizeWebhookList","indices","_mapWebhookValues","recId","_removeWebhook","updates","updateRows","t2","webhookId","_updateWebhook","addsAndUpdates","addRows","notes","_addWebhook","_getErrorString","enabled","rowMap","toRemove","webhook","removeAll","details","userError","_prepareFields","addWebhook","updateWebhook","removeWebhook","eventTypes","WebhookPage","_webhookExternalTable","cssControlRow","reset","flushWebhooks","reportSuccess","flushWebhook","webhookSummary","WelcomeTour","enter","ShortcutKey","ShortcutKeyContent","equal","creatorPanel","ref","addNew","share","TopBarButtonIcon","helpCenter","GreyIcon","templateLibrary","homePage","cssInlineIcon","cloneDeepWith","RightPanelTool","GristDoc","openDocResponse","plugins","fieldEditorHolder","userOrgPrefs","getUserOrgPrefsObs","formulaPopup","_lastOwnActionGroup","_rightPanelTabs","_rightPanelTool","_showGristTour","getUserOrgPrefObs","_seenDocTours","_rawSectionOptions","_docTutorialHolder","_isRickRowing","_showBackgroundVideoPlayer","_backgroundVideoPlayerHolder","_disableAutoStartingTours","querySetManager","QuerySet","QuerySetManager","getUntrustedContentOrigin","clientScope","findRow","_activeContent","externalContent","currentPageName","isDeleted","openPopup","_getCursorPosFromHash","isTourOrTutorialActive","rickRow","YouTubePlayer","origin","getMainOrgUrl","playerVars","controls","disablekb","fs","iv_load_policy","modestbranding","onPlayerStateChange","_player","cssYouTubePlayer","_waitForView","showTip","forceShow","hideDontShowTips","markAsSeen","showOnMobile","playRickRollVideo","finalizeAnchor","disable","isStartingTourOrTutorial","hasActiveTourOrTutorial","shouldStartTutorial","shouldStartDocTour","_shouldAutoStartDocTour","shouldStartWelcomeTour","welcomeTour","_shouldAutoStartWelcomeTour","avoidReload","createPreview","preview","importSourceElems","ImportSourceElement","importMenuItems","forkIfNeeded","reduce","acc","progress","createProgressIndicator","byteString","onProgress","percent","setProgress","pickAndUploadSource","importFromFile","importSourceElem","imports","err1","gdrivePlugin","err2","selectAndImport","importSources","_undoStack","_docHistory","_discussionPanel","_onSendActionsStart","_onSendActionsEnd","sendUndoAction","redo","sendRedoAction","setCursor","onSetCursorPos","comm","onDocUserAction","onDocUsageMessage","onDocChatter","_handleTriggerQueueOverflowMessage","DocConfigTab","rightPanelTool","_getToolContent","getLoadingDonePromise","currentPosition","undef","draftMonitor","editorMonitor","iconElem","contentObj","isMaximized","isPopup","cssViewContentPane","cssStopRickRowingButton","cssCloseIcon","cssBackgroundVideo","tool","fieldModel","setCursorPos","desiredSection","_switchToSectionId","optActionGroup","schemaUpdated","docActions","len","internal","updateCurrentDocUsage","docUsage","bundleChanges","DataTableModelWithDiff","_promptForName","tableInfo","viewName","res","addWidgetToPageImpl","_maybeShowEditCardLayoutTip","summarize","_ensureOneNumericSeries","saveLink","dataSource","tableRowModel","newVal","oldVal","freezeUntil","_replaceViewSection","setSectionViewFieldsFromArray","viewField","mapColIdToColumn","targetColRef","targetTable","targetCol","srcSectionRef","srcColRef","selectBy","recalcWhen","RecalcWhen","recalcDeps","toFormula","noRecalc","_getDocApiDownloadParams","getDownloadCsvUrl","getDownloadXlsxUrl","numRecords","filterRowIds","setAsActiveSection","silent","controller","_getTableData","isSrcSummary","srcTable","query","filterCol","filterColId","getFilterFunc","waitObs","tb","popupSection","backgroundVideoPlayer","isLoaded","play","setVolume","volume","condition","afterthought","sectionToCheck","singleWait","buildMenu","selectedWidgetType","hasSeenTip","rightPanelOpen","run","editLayoutButton","popupOptions","invokePrompt","sectionTheme","sectionTitle","sectionCreationResult","newSection","newLayoutSpec","isNumericOnly","isNumericLike","newField","createNotification","canUserClose","badgeCounter","expireSec","anchorApplied","fadeInAndOut","keyframes","LayoutBox","parentBox","observable","isVBox","computed","isHBox","child","flexSize","_parentBeingDisposed","removeFromParent","self","needDynamic","makeStatic","fillWindow","isLastChild","domData","sourceLayoutBox","parentNode","siblings","childBox","optNextSibling","_addChild","lowerBox","vbox","hbox","setRoot","takeLeafFrom","rescaleFlexSizes","grandchildBoxes","arraySplice","_removeChildBox","minSize","apply","valueOrFunc","isObservable","isKoArray","optContainer","boxElem","findAncestor","utils","boxSpec","createLeafFunc","optFillWindow","_leafIdMap","getLeafIdMap","cb","optContext","iter","setChildren","oldRootBox","_getBoxSpec","HelperBox","scalePerFlexUnit","nextSiblings","origNextSizes","origSize","sumAll","sumPrev","sumNext","Floater","lastMouseEvent","sourceBox","rect","onMouseMove","DropOverlay","overlayElem","overlayRect","hBorder","vBorder","targetElem","borderTopWidth","borderBottomWidth","borderLeftWidth","borderRightWidth","y","getFrac","down","minValue","DropTargeter","targetsDom","currentBox","currentAffinity","delayedInsertion","transition","removeNode","affinity","overlay","prevTargetBox","upDown","isAffinityUpDown","isAffinityAfter","targetParts","getSiblingBox","isFirstChild","pTop","pHeight","pLeft","pWidth","totalHeight","singleHeight","outerRect","innerRect","triggerInsertion","dropOverlay","onInsertBox","measuringBox","transitionPromise","trashDelay","originalBox","targetBox","makeResizable","boundMouseDown","handleMouseDown","boundMouseMove","handleMouseMove","boundMouseUp","handleMouseUp","initialMouseDown","lastTriggered","unmakeResizable","setAttribute","resizable","helperObj","isWidth","handles","onResizeStart","resize","onResizeMove","ui","originalSize","allSiblings","adder","newSize","snap","siblingsFactor","newSizes","onInitialMouseMove","accelerateInsertion","resizeLayoutBox","finally","onMouseUp","emptyNode","isDomDetached","startDragBox","isPending","isTrashed","hoverBox","getAffinity","updateTargetHints","inserterFunc","transitionPromiseResolve","reject","prevRect","prevFlexGrow","flexGrow","targetRect","resizeLayoutBoxSmoothly","distance","endEdge","multipleOf","round","sizeRect","collapse","opacity","rectDesc","startRect","endRect","timeout","_openModalCtl","_importerContent","_fullscreen","_fullbody","inlineElement","addRenderTarget","renderContent","cssModalBody","ctlOwner","cssModalOverrides","sectionElem","triggerPrint","onOff","prefersDarkModeObs","pause","prepareToPrint","sub1","sub2","afterPrintCallback","debugPrinting","finishPrinting","prefersDarkMode","print","renderAllRows","renderRow","html","SelectionSummary","_cellSelector","_sortedRows","_viewFields","_colTotalCount","_rowTotalCount","includesNewRow","_rowRange","begin","_colRange","_summary","_delayedRecalc","_onSpliceChange","onRowNotify","_onRowNotify","_scheduleRecalc","isNarrow","cssSummary","clickToCopy","cssSummaryPart","cssLabelText","cssCopyIcon","doCopy","rowRange","ALL","rowArray","rowIdSet","_recalc","colRange","cellCount","countNumeric","countNonEmpty","sumFormatter","rowIndices","getRowIdIndex","effectiveColType","displayColId","isNumeric","isEmptyList","sumValue","getStub","pluginInstances","definitions","contributions","onDblClickMatchElem","_elem","lastTapTime","lastTapElem","currentTime","tapLength","sameElem","guessTimezone","moment","URLSearchParams","search","tz","guess","HomePluginManager","safePython","unsafeNode","safeHome","forwarder","NotAvailableForwarder","getTimeFromNow","utcDateISO","fromNow","HomeModelImpl","_app","pageType","currentPage","ws","currentWSId","workspaces","loading","available","singleWorkspace","trashWorkspaces","templateWorkspaces","currentWS","currentWSPinnedDocs","docs","w","featuredTemplates","templates","otherSites","orgs","public","newDocWorkspace","destWS","roles","showIntro","wss","isSupportWorkspace","shouldShowAddNewTip","_userOrgPrefs","currentSort","prefs","SortPref","docMenuSort","_saveUserOrgPref","ViewPref","docMenuView","userWorkspaces","numDocs","pinnedDocs","getViewPrefDefault","viewSettings","makeLocalViewSettings","_updateWorkspaces","pluginManager","refreshOrgUsage","_checkForDuplicates","newWorkspace","renameWorkspace","forever","deleteWorkspace","softDeleteWorkspace","undeleteWorkspace","workspaceId","newUnsavedDoc","newDoc","renameDoc","deleteDoc","softDeleteDoc","undeleteDoc","pin","pinDoc","unpinDoc","moveDoc","promises","_fetchWorkspaces","_maybeFetchTemplates","isLongerThan","trashWss","templateWss","nonSupportWss","currentFeatures","maxWorkspacesPerOrg","orgId","forRemoved","getOrgWorkspaces","removedAt","templateOrg","onlyFeatured","getTemplates","updateOrg","home","wsId","localStorageObs","workspaceName","getWorkspaceInfo","ownerName","isHome","isDefault","CellContextMenu","rowOptions","colOptions","disableInsert","disableDelete","isViewSorted","disableForReadonlyColumn","disableForReadonlyView","numCols","numColumns","nameClearColumns","nameDeleteColumns","numRows","nameDeleteRows","nameClearCells","COMMENTS","buildRenameColumn","isEditing","optCommands","editedLabel","editedDesc","hasChange","cantSave","saveColumnLabel","newLabel","saveColumnDesc","newDesc","nextField","prevField","labelInput","showDesc","lastFocus","rememberFocus","cssColLabelBlock","cssAddDescription","buildColumnRenamePopup","triggerElem","open","docList","docListContent","docMenu","listHeader","docListHeader","templatesHeaderWrap","templatesHeader","featuredTemplatesHeader","otherSitesHeader","allDocsTemplates","docBlock","templatesDocBlock","otherSitesBlock","otherSitesButtons","siteButton","docHeaderIcon","pinnedDocsIcon","featuredTemplatesIcon","templatesHeaderIcon","otherSitesHeaderIcon","docBlockHeader","docBlockHeaderLink","templateBlockHeader","wsLeft","docRowWrapper","docRowLink","docLeft","docName","docPinIcon","docPublicIcon","docEditorInput","docRowUpdatedAt","docMenuTrigger","moveDocModalBody","moveDocListItem","moveDocListText","moveDocListHintText","spinner","prefSelectors","sortSelector","upgradeButton","upgradeCard","prevCardClose","showExampleCard","example","toolInfo","btnElem","reopen","card","welcomeCard","cardElem","cssCard","cssImage","imgUrl","cssInfo","cssLinkBtn","tutorialName","tutorialUrl","cssBigIcon","collapsedRect","disposeCard","collapseCard","collapseAndRemoveCard","visibility","expandCard","originX","originY","transformOrigin","FieldContextMenu","_rowOptions","fieldOptions","ColumnAddMenu","addNewColumn","showColumn","calcFieldsCondition","ColumnContextMenu","filterOpenFunc","sortSpec","addToSortLabel","columnsInSpec","getAddToSortLabel","cssRowMenuItem","customMenuItem","cssCustomMenuItem","cssRowMenuLabel","freezeMenuItemCmd","MultiColumnMenu","disableFrozenMenu","num","nameHideColumns","frozenMenu","freezeAction","columnIndices","firstColumnIndex","lastColumnIndex","totalColumnCount","isNormalColumn","isFrozenColumn","isSet","isFirstNormalSet","isSpanSet","toFreeze","properNumber","menuToggle","cssMenuToggle","cssRenamePopup","cssInputWithIcon","cssTextInput","cssTextArea","RowContextMenu","cssMemberListItem","cssMemberImage","cssMemberText","cssMemberPrimary","cssMemberSecondary","cssMemberType","cssMemberTypeProblem","cssMemberBtn","cssEmailInputContainer","cssEmailInput","cssMailIcon","PlayerState","_videoId","_isLoading","_playerId","_domArgs","YT","_handleYouTubeIframeAPIReady","tag","createElement","firstScriptTag","getElementsByTagName","insertBefore","onYouTubeIframeAPIReady","playVideo","getCurrentTime","onPlayerReady","otherOptions","Player","videoId","events","onReady","onStateChange","ContextMenuController","_event","contentFunc","_updatePosition","Menu","cssMenuElem","evt","registerMenuOpen","pageX","innerWidth","bottom","innerHeight","pageY","transientInput","lastSave","explicitSave","delayedFocus","PERMISSION_BITS","R","C","U","D","S","ALL_PERMISSION_BITS","ALL_PERMISSION_PROPS","ch","ALIASES","none","REVERSE_ALIASES","alias","emptyPermissionSet","schemaEdit","parsePermissions","permissionSetToText","perm","makePartialPermissions","mergePartialPermissions","mergePermissions","_a","_b","combinePartialPermission","psets","combine","toMixed","summarizePermissionSet","pWithSome","perms","splitSchemaEditPermissionSet","nonSchemaEdit","defaultMatchFunc","SPECIAL_RULES_TABLE_ID","DEFAULT_RULE_SET","matchFunc","Access","isSchemaEditResource","SPECIAL_RULE_SETS","EMERGENCY_RULE_SET","_haveRules","_tableColumnMap","_specialRuleSets","_tableRuleSets","_tableIds","_userAttributeRules","_safeReadAclRules","userAttributeMap","colRuleSets","tableColMap","tableRuleSets","defaultRuleSet","specialRuleSets","specialType","specialDefault","schemaParts","splitSchemaEditRulePart","findRuleProblems","comment","tablesTable","columnsTable","validTableIds","invalidTables","validColumns","colTableRefs","validTableCols","invalidUAColumns","findMatchingRowId","ruleError","compile","includeHelperCols","rulesByResource","ruleRecord","resourceId","getHelperCols","parsed","readAclRules","fieldsTable","addColsFromRefs","extraCol","addColsFromMetaRecord","filterRecords","getEnvContent","ActionDispatcher","onAddRecord","onUpdateRecord","onRemoveRecord","onBulkAddRecord","onBulkUpdateRecord","onBulkRemoveRecord","onReplaceTableData","onAddColumn","onRemoveColumn","onRenameColumn","onModifyColumn","onAddTable","onRemoveTable","onRenameTable","keyBy","toPairs","ActionSummarizer","_forTable","_addRename","_addRow","arrayExtend","_addRows","cd","columnDeltas","direction","colChanges","_forCell","maximumInlineRows","limitRows","alwaysPreserveColIds","addCellToSummary","rename","summarizeAction","summarizeStoredAndUndo","summarizer","addForwardAction","addReverseAction","planNameMerge","names1","names2","dead1","dead2","rename1","rename2","merge","names1ByFinalName","names2ByInitialName","before1","after1","pair2","after2","before2","renameAndDelete","dead","mergeNames","entries1","entries2","mergeEntry","e1","bulkCellFor","rc","added","mergeColumn","present1","present2","e2","v1","v2","uniqueAndSorted","lst","getRowChanges","mergeTable","addRows1","removeRows2","transients","concatenateSummaryPair","sum1","sum2","rowChanges","concatenateSummaries","sums","NEW_TABLE","SKIP_TABLE","groupByColLabels","summaryGroupByDescription","groupByColumnLabels","ACTION_TYPES","_doApplyUndoActions","_doAddRecord","_doBulkAddRecord","_doUpdateRecord","_doBulkUpdateRecord","_doRemoveRecord","_doBulkRemoveRecord","normal","onDemand","isOnDemandAction","isDataTableAction","undoNormal","undoOnDemand","splitByStorage","usesAlternateStorage","converted","getNextRowId","manualSort","nextRowId","oldColValues","fetchActionData","isAddRecord","isBulkAddRecord","isBulkRemoveRecord","isUpdateRecord","isBulkUpdateRecord","isReplaceTableData","isAddColumn","isRemoveColumn","isRenameColumn","isAddTable","isRenameTable","SCHEMA_ACTIONS","DATA_ACTIONS","isSchemaAction","isDataAction","getTableId","CALCULATING_USER_ACTIONS","getNumRows","toTableDataAction","colData","fromTableDataAction","records","getColIdsFromDocAction","getColValuesFromDocAction","cellValues","fetchTableFunc","_fetchTableFunc","attachments","createTableData","colsByTable","colRecords","force","dispatchAction","safeJsonParse","oldTableId","oldColId","APPROACHING_LIMIT_RATIO","getUsageRatio","limit","isEnforceableLimit","getFormulaProperties","usesRec","hasRecOrNewRec","collectRecColIds","isRecOrNewRec","_isLoaded","_columns","_colArray","_rowIdCol","_rowMap","defl","getDefaultForType","fetchFunc","_fetchPromise","reassignArray","getDistinctValues","desiredRowIds","bulkColValues","colArray","properties","_filterRowIndices","colValue","destIndex","srcIndex","arrayRemove","MetaTableData","targetArray","sourceArray","SCHEMA_VERSION","peers","basketId","schemaVersion","untieColIdFromLabel","origFileName","parseFormula","delimiter","doublequote","escapechar","quotechar","skipinitialspace","encoding","hasHeaders","host","port","username","dialect","database","databaseRef","tabPos","filterSpec","embedId","outputText","errorText","fileIdent","fileName","fileType","fileSize","fileExt","imageHeight","imageWidth","timeDeleted","timeUploaded","isReadyColRef","principals","aclColumn","userEmail","groupName","instanceId","userRef","getHumanKey","isMac","readDataFromClipboard","tsvDecode","Base","tableUtil","Clipboard","copypasteField","timeoutId","onEvent","_onCopy","_onCut","_onPaste","onDefaultBlur","gristClipboardGrabFocus","grabFocus","_cutCallback","_cutData","setBaseFor","contextMenuCopy","_doContextMenuCopy","contextMenuCut","_doContextMenuCut","contextMenuPaste","_doContextMenuPaste","pasteObj","copy","_setCBdata","originalEvent","clipboardData","_copyToClipboard","cut","plainText","makePasteText","selection","setData","htmlText","makePasteHtml","_setCutCallback","ClipboardItem","Blob","showUnavailableMenuCommandModal","cutData","cutCallback","getData","pasteData","getPasteData","_doPaste","FOCUS_TARGET_TAGS","parsePasteHtml","charCodeAt","trimEnd","getTextFromClipboardItem","clipboardItem","getType","hasAttribute","explanation","shortcut","hideCancel","paste","module","exports","ko","kd","koDomScrolly","BaseView","RecordLayout","cellSelector","_isSingle","recordLayout","buildFieldDom","buildRowContextMenu","buildFieldContextMenu","resizeCallback","scrolly","updateSize","scrollRowIntoView","isEditingLayout","getInstance","resetHeights","layoutBoxIdx","detailRecord","_updateFloatingRow","scrollPane","_twoLastFieldIdsSelected","getContainingRow","getContainingField","_canSingleClick","generalCommands","fieldCommands","hasSelection","pureComputed","copySelection","selectionCommands","onTableLoaded","scrollToSavedPos","setFloatingRowModel","pageUp","pageDown","getSelection","editLayout","clearCardFields","_clearCardFields","hideCardFields","_hideCardFields","clearCopySelection","_clearCopySelection","_clearSelection","_isAddRow","deleteRows","isCompletePaste","richData","sendPasteActions","prepTableActions","addRowId","_getRowContextMenuOptions","_getFieldContextMenuOptions","isNewField","isCellSelected","isCellActive","isCopyActive","yesNo","fieldDom","childNodes","fieldBuilder","fieldBuilders","buildDomWithCursor","maybe","editIndex","getRenderedRowModel","buildLayoutDom","makeRecord","scrollChildIntoView","getScrollPos","fitToWidth","_isPrinting","showControls","buildEditorDom","getLastDataRowIndex","addRowIndex","getRowIndex","scheduleUpdateSize","onRowResize","resetItemHeights","rowType","extraRows","getRowType","scrollToCursor","doScrollChildIntoView","_duplicateRows","addRowIds","clearAction","makeDeleteAction","isPreview","ValidationPanel","validationPanel","addOptionsTab","buildValidationsConfigDomObj","makeDisposable","BinaryIndexedTree","kf","addToSort","viewCommon","convert","reportWarning","reportUndo","grainjsDom","mouseDragMatchElem","NEW_FILTER_JSON","CombinedStyle","dragX","dragY","rowShadowAdjust","colShadowAdjust","isScrolledLeft","scrollTop","isScrolledTop","colMenuTargets","colRightOffsets","tree","fillFromValues","visibleRowIndex","getSumTo","rowNumsWidth","_cornerDom","clientWidth","viewWidth","fieldWidth","frozenWidth","leftEdge","rightEdge","scrollShift","clamp","scrollShadow","ctxMenuHolder","frozenLine","frozenOffset","lastField","revealWidth","initialOffset","middleOffset","frozenScrollOffset","frozenShadow","frozenPositions","frozenMap","hoverColumn","changeHover","_createColSelectedObs","_modField","attachSelectorHandlers","onMatchElem","onCellContextMenu","onScroll","gridCommands","_colClickTime","buildStyleOption","computedRule","optionName","clearSelection","shiftDown","_shiftSelect","shiftUp","shiftRight","shiftLeft","ctrlShiftDown","_shiftSelectUntilContent","ctrlShiftUp","ctrlShiftRight","ctrlShiftLeft","fillSelectionDown","selectAll","fieldEditSave","editField","insertFieldBefore","insertColumn","insertFieldAfter","renameField","renameColumn","hideFields","deleteFields","deleteColumns","clearValues","_clearColumns","convertFormulasToData","_convertFormulasToData","sortAsc","currentColumn","ASC","sortDesc","DESC","addSortAsc","addSortDesc","toggleFreeze","_getColumnMenuOptions","selectObs","exemptType","maxVal","colStart","colEnd","rowStart","rowEnd","steps","_stepsToContent","selectionData","cursorCol","_selectionData","colValuesByIndex","isLastColEmpty","_isCellValueEmpty","isNextColEmpty","shouldStopOnEmptyValue","hasEmptyValues","isLastRowEmpty","isNextRowEmpty","unzip","pasteHeight","pasteWidth","outputHeight","roundDownToMultiple","outputWidth","topIndex","updateRowIds","leftIndex","updateColIndices","growMatrix","pasteFields","_createBulkActionsFromPaste","newRowIds","topRowIndex","selectArea","bulkUpdate","mapObject","times","object","_getColStyle","j","_getRowStyle","convertIsFormula","assignCursor","scheduleAssignCursor","_assignCursorTimeoutId","preventAssignCursor","saved","setLive","scrollPaneRight","fieldInsertPositions","fieldInfo","selectColumn","currentEditingColumnIndex","scrollWidth","fieldPos","moveColumns","oldIndices","newPositions","vsfAction","viewFieldsTable","newPos","moveRows","_getRowInsertPos","getMousePosRow","yCoord","headerOffset","rowOffsetTree","getIndex","currentMouseRow","getMousePosCol","mouseX","gridX","frozenScroll","scrollX","pane","vHorizontalGridlines","vVerticalGridlines","vZebraStripes","renameCommands","ROW_NUMBER_WIDTH","colLine","isCurrentDragType","colShadow","rowLine","rowShadow","isEditingLabel","withKoUtils","onlyNotifyUnequal","filterTriggerCtl","isTooltip","HoverColumnTooltip","shouldSave","btn","currentTarget","editableLabel","_showTooltipOnHover","maybeSelectColumn","_columnFilterMenu","showAllFiltersButton","columnContextMenu","PLUS_WIDTH","isRowActive","computedFlags","flags","styles","deferred","zebraColor","hex","hsl","substr","calcZebra","isLinkSource","myRowId","linkedRowId","_validationFailures","failures","attr","maybeSelectRow","ctx","rowContextMenu","cellContextMenu","activeFieldBuilder","outerHeight","isEditorActive","onLinkFilterChange","cellMouseDown","_tooltipMouseDown","shiftKey","colMouseDown","rowMouseDown","rowMouseMove","colMouseMove","currentCol","cellMouseMove","onlyCellSelected","createSelector","ignoreEvent","onStop","styleRowDragElements","dragRows","dropRows","styleColDragElements","dragCols","dropCols","shadowHeight","getCumulativeValueRange","shadowTop","shadowWidth","shadowLeft","frozenCount","inFrozen","selectedColIds","createFilterMenu","onlyAddRowSelected","isShowingTooltip","RecordLayoutEditor","_resizeCallback","_delayedResize","fieldsById","indexBy","updateLayoutSpecWithFields","getField","fieldRowId","maxsplit","parseInt","onEditLayoutCancel","onEditLayoutSave","viewFieldIds","difference","_table","addColAction","origRefs","colRefToFieldRef","nextPos","addColNum","existingRefs","existingPositions","hiddenColRefs","hiddenCallbacks","hiddenPositions","addedCallbacks","addedPositions","updateLeaf","isNaN","processBox","callbacks","positions","addActions","try","addFieldNum","each","addedRefs","finishedRefs","optCreateEditor","createEditor","buildLeafDom","sub","itemElem","BackboneEvents","optResizeCallback","_hiddenColumns","getHiddenColumns","editLayoutCommands","_addField","addNewField","showField","cssControls","cssCollapseIcon","buildFinishButtons","getBoxFromElement","removeContainingBox","AceEditor","validationsTable","docTables","tableChoices","onAddRule","onDeleteRule","buttonGroup","validation","editorUpToDate","aceObj","attachSaveCommand","removeAllListeners","writeObservable","_respectSize","isFlex","widthObservable","minWidth","setBinding","removeClass","ScrollyPane","paneIndex","itemCreateFunc","preparedRows","scrollDiv","totalHeightPx","blockDiv","blockTopPx","domNodeDisposal","addDisposeCallback","destroyPane","Scrolly","dataModel","panes","activeItemModels","rowHeights","minRowHeight","numBuffered","numRendered","shownHeight","blockBottom","blockTop","subscription","onDataSplice","delayedUpdateSize","array","deleted","_scrollyObj","prepareNewRows","prevItemModels","prevRows","relIndex","_rowHeightPx","measurePreparedRow","arrangePreparedRows","current","expectedHeight","topRow","blockHeight","addPane","containerElem","overrideHeight","clientHeight","numVisible","ceil","_updateRange","syncScrollPosition","scrollTo","atEnd","scrollHeight","getTotal","createItemModel","makeItemModel","freeList","rowAtScrollTop","sumToScrollTop","shift","setItemModel","unsetItemModel","addValue","optRowIndexList","scrollToPosition","calcPosition","scrollPos","scrollyObj","BaseRowModel","MetaRowModel","fieldNames","colNames","_rowId","autoDisposeWith","_fields","colName","_assignColumn","_underlyingRowModel","propValue","propName","TableModel","MetaTableModel","_rowConstructor","_rowModelVersions","getAllRows","_createRowModel","optDependOnVersion","getEmptyRowModel","version","ignoreDependencies","inc","_process_RemoveRecord","_deleteRowModel","_process_BulkRemoveRecord","_process_AddRecord","columnValues","_process_BulkAddRecord","applySchemaAction","sortColId","groupValue","grouping","getRowGrouping","getGroup","sortedRowSet","SortedRowSet","r1","r2","_createRowModelArray","rowIdArray","_createRowModelItem","optSize","mask","mostSignificantOne","leastSignificantOne","stripLeastSignificantOne","msb","cumulToValues","valuesToCumul","toCumulativeArray","cumulValues","toValueArray","fillFromCumulative","getCumulativeValue","cumulValue","testIndex"],"sourceRoot":""}