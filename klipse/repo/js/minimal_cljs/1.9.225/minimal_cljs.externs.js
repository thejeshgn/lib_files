/**********************************************************************
 * Extern for cljs
 * Generated by http://jmmk.github.io/javascript-externs-generator
 **********************************************************************/
var cljs = {
  "core": {
    "_STAR_clojurescript_version_STAR_": {},
    "_STAR_unchecked_if_STAR_": {},
    "_STAR_target_STAR_": {},
    "_STAR_ns_STAR_": {},
    "_STAR_out_STAR_": {},
    "_STAR_assert_STAR_": {},
    "_STAR_print_fn_STAR_": function () {},
    "_STAR_print_err_fn_STAR_": function () {},
    "set_print_fn_BANG_": function () {},
    "set_print_err_fn_BANG_": function () {},
    "_STAR_flush_on_newline_STAR_": {},
    "_STAR_print_newline_STAR_": {},
    "_STAR_print_readably_STAR_": {},
    "_STAR_print_meta_STAR_": {},
    "_STAR_print_dup_STAR_": {},
    "_STAR_print_length_STAR_": {},
    "_STAR_print_level_STAR_": {},
    "_STAR_loaded_libs_STAR_": {},
    "pr_opts": function () {},
    "enable_console_print_BANG_": function () {},
    "truth_": function () {},
    "not_native": {},
    "identical_QMARK_": function () {},
    "nil_QMARK_": function () {},
    "array_QMARK_": function () {},
    "number_QMARK_": function () {},
    "not": function () {},
    "some_QMARK_": function () {},
    "object_QMARK_": function () {},
    "string_QMARK_": function () {},
    "char_QMARK_": function () {},
    "any_QMARK_": function () {},
    "native_satisfies_QMARK_": function () {},
    "is_proto_": function () {},
    "_STAR_main_cli_fn_STAR_": {},
    "type": function () {},
    "missing_protocol": function () {},
    "type__GT_str": function () {},
    "load_file": function () {},
    "ITER_SYMBOL": {},
    "CHAR_MAP": {
      "]": {},
      "'": {},
      "=": {},
      "\"": {},
      "!": {},
      "*": {},
      "%": {},
      "|": {},
      "~": {},
      "/": {},
      "\\": {},
      "-": {},
      "?": {},
      "&": {},
      ":": {},
      "<": {},
      "{": {},
      "}": {},
      "[": {},
      "#": {},
      "^": {},
      "+": {},
      "@": {},
      ">": {}
    },
    "DEMUNGE_MAP": {
      "_RBRACE_": {},
      "_COLON_": {},
      "_BANG_": {},
      "_QMARK_": {},
      "_BSLASH_": {},
      "_SLASH_": {},
      "_PERCENT_": {},
      "_PLUS_": {},
      "_SHARP_": {},
      "_LBRACE_": {},
      "_BAR_": {},
      "_LBRACK_": {},
      "_EQ_": {},
      "_": {},
      "_TILDE_": {},
      "_RBRACK_": {},
      "_GT_": {},
      "_SINGLEQUOTE_": {},
      "_CIRCA_": {},
      "_AMPERSAND_": {},
      "_DOUBLEQUOTE_": {},
      "_CARET_": {},
      "_LT_": {},
      "_STAR_": {}
    },
    "DEMUNGE_PATTERN": {},
    "system_time": function () {},
    "make_array": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$applyTo": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "aclone": function () {},
    "array": function () {},
    "aget": {
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$applyTo": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "aset": {
      "cljs$core$IFn$_invoke$arity$3": function () {},
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$applyTo": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "alength": function () {},
    "into_array": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "js_invoke": {
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$maxFixedArity": {},
      "cljs$lang$applyTo": function () {}
    },
    "Fn": {
      "function": {}
    },
    "IFn": function () {},
    "_invoke": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$3": function () {},
      "cljs$core$IFn$_invoke$arity$4": function () {},
      "cljs$core$IFn$_invoke$arity$5": function () {},
      "cljs$core$IFn$_invoke$arity$6": function () {},
      "cljs$core$IFn$_invoke$arity$7": function () {},
      "cljs$core$IFn$_invoke$arity$8": function () {},
      "cljs$core$IFn$_invoke$arity$9": function () {},
      "cljs$core$IFn$_invoke$arity$10": function () {},
      "cljs$core$IFn$_invoke$arity$11": function () {},
      "cljs$core$IFn$_invoke$arity$12": function () {},
      "cljs$core$IFn$_invoke$arity$13": function () {},
      "cljs$core$IFn$_invoke$arity$14": function () {},
      "cljs$core$IFn$_invoke$arity$15": function () {},
      "cljs$core$IFn$_invoke$arity$16": function () {},
      "cljs$core$IFn$_invoke$arity$17": function () {},
      "cljs$core$IFn$_invoke$arity$18": function () {},
      "cljs$core$IFn$_invoke$arity$19": function () {},
      "cljs$core$IFn$_invoke$arity$20": function () {},
      "cljs$core$IFn$_invoke$arity$21": function () {},
      "cljs$core$IFn$_invoke$arity$22": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "ICloneable": function () {},
    "_clone": function () {},
    "ICounted": {
      "null": {}
    },
    "_count": {
      "null": function () {}
    },
    "IEmptyableCollection": function () {},
    "_empty": function () {},
    "ICollection": function () {},
    "_conj": function () {},
    "IIndexed": function () {},
    "_nth": {
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$3": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "ASeq": function () {},
    "ISeq": function () {},
    "_first": function () {},
    "_rest": function () {},
    "INext": function () {},
    "_next": function () {},
    "ILookup": function () {},
    "_lookup": {
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$3": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "IAssociative": function () {},
    "_contains_key_QMARK_": function () {},
    "_assoc": function () {},
    "IMap": function () {},
    "_dissoc": function () {},
    "IMapEntry": function () {},
    "_key": function () {},
    "_val": function () {},
    "ISet": function () {},
    "_disjoin": function () {},
    "IStack": function () {},
    "_peek": function () {},
    "_pop": function () {},
    "IVector": function () {},
    "_assoc_n": function () {},
    "IDeref": function () {},
    "_deref": function () {},
    "IDerefWithTimeout": function () {},
    "_deref_with_timeout": function () {},
    "IMeta": {
      "function": {}
    },
    "_meta": {
      "function": function () {}
    },
    "IWithMeta": function () {},
    "_with_meta": function () {},
    "IReduce": function () {},
    "_reduce": {
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$3": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "IKVReduce": function () {},
    "_kv_reduce": function () {},
    "IEquiv": {
      "number": {},
      "_": {}
    },
    "_equiv": {
      "number": function () {},
      "_": function () {}
    },
    "IHash": {
      "_": {}
    },
    "_hash": {
      "_": function () {}
    },
    "ISeqable": function () {},
    "_seq": function () {},
    "ISequential": function () {},
    "IList": function () {},
    "IRecord": function () {},
    "IReversible": function () {},
    "_rseq": function () {},
    "ISorted": function () {},
    "_sorted_seq": function () {},
    "_sorted_seq_from": function () {},
    "_entry_key": function () {},
    "_comparator": function () {},
    "IWriter": function () {},
    "_write": function () {},
    "_flush": function () {},
    "IPrintWithWriter": function () {},
    "_pr_writer": function () {},
    "IPending": function () {},
    "_realized_QMARK_": function () {},
    "IWatchable": function () {},
    "_notify_watches": function () {},
    "_add_watch": function () {},
    "_remove_watch": function () {},
    "IEditableCollection": function () {},
    "_as_transient": function () {},
    "ITransientCollection": function () {},
    "_conj_BANG_": function () {},
    "_persistent_BANG_": function () {},
    "ITransientAssociative": function () {},
    "_assoc_BANG_": function () {},
    "ITransientMap": function () {},
    "_dissoc_BANG_": function () {},
    "ITransientVector": function () {},
    "_assoc_n_BANG_": function () {},
    "_pop_BANG_": function () {},
    "ITransientSet": function () {},
    "_disjoin_BANG_": function () {},
    "IComparable": function () {},
    "_compare": function () {},
    "IChunk": function () {},
    "_drop_first": function () {},
    "IChunkedSeq": function () {},
    "_chunked_first": function () {},
    "_chunked_rest": function () {},
    "IChunkedNext": function () {},
    "_chunked_next": function () {},
    "INamed": function () {},
    "_name": function () {},
    "_namespace": function () {},
    "IAtom": function () {},
    "IReset": function () {},
    "_reset_BANG_": function () {},
    "ISwap": function () {},
    "_swap_BANG_": {
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$3": function () {},
      "cljs$core$IFn$_invoke$arity$4": function () {},
      "cljs$core$IFn$_invoke$arity$5": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "IVolatile": function () {},
    "_vreset_BANG_": function () {},
    "IIterable": function () {},
    "_iterator": function () {},
    "StringBufferWriter": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {}
    },
    "__GT_StringBufferWriter": function () {},
    "pr_str_STAR_": function () {},
    "int_rotate_left": function () {},
    "imul": function () {},
    "m3_seed": {},
    "m3_C1": {},
    "m3_C2": {},
    "m3_mix_K1": function () {},
    "m3_mix_H1": function () {},
    "m3_fmix": function () {},
    "m3_hash_int": function () {},
    "m3_hash_unencoded_chars": function () {},
    "string_hash_cache": {},
    "string_hash_cache_count": {},
    "hash_string_STAR_": function () {},
    "add_to_string_hash_cache": function () {},
    "hash_string": function () {},
    "hash": function () {},
    "hash_combine": function () {},
    "instance_QMARK_": function () {},
    "symbol_QMARK_": function () {},
    "hash_symbol": function () {},
    "compare_symbols": function () {},
    "Symbol": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {}
    },
    "__GT_Symbol": function () {},
    "symbol": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "Var": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {}
    },
    "__GT_Var": function () {},
    "var_QMARK_": function () {},
    "iterable_QMARK_": function () {},
    "clone": function () {},
    "cloneable_QMARK_": function () {},
    "seq": function () {},
    "first": function () {},
    "rest": function () {},
    "next": function () {},
    "_EQ_": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$applyTo": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "ES6Iterator": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {}
    },
    "__GT_ES6Iterator": function () {},
    "es6_iterator": function () {},
    "ES6IteratorSeq": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {}
    },
    "__GT_ES6IteratorSeq": function () {},
    "es6_iterator_seq": function () {},
    "mix_collection_hash": function () {},
    "hash_ordered_coll": function () {},
    "empty_ordered_hash": {},
    "hash_unordered_coll": function () {},
    "empty_unordered_hash": {},
    "Inst": function () {},
    "inst_ms_STAR_": function () {},
    "inst_ms": function () {},
    "inst_QMARK_": function () {},
    "inc": function () {},
    "Reduced": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {}
    },
    "__GT_Reduced": function () {},
    "reduced": function () {},
    "reduced_QMARK_": function () {},
    "ensure_reduced": function () {},
    "unreduced": function () {},
    "deref": function () {},
    "ci_reduce": {
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$3": function () {},
      "cljs$core$IFn$_invoke$arity$4": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "array_reduce": {
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$3": function () {},
      "cljs$core$IFn$_invoke$arity$4": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "counted_QMARK_": function () {},
    "indexed_QMARK_": function () {},
    "_indexOf": {
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$3": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "_lastIndexOf": {
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$3": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "IndexedSeqIterator": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {}
    },
    "__GT_IndexedSeqIterator": function () {},
    "IndexedSeq": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {}
    },
    "__GT_IndexedSeq": function () {},
    "prim_seq": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "array_seq": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "RSeq": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {}
    },
    "__GT_RSeq": function () {},
    "second": function () {},
    "ffirst": function () {},
    "nfirst": function () {},
    "fnext": function () {},
    "nnext": function () {},
    "last": function () {},
    "conj": {
      "cljs$core$IFn$_invoke$arity$0": function () {},
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$applyTo": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "empty": function () {},
    "accumulating_seq_count": function () {},
    "count": function () {},
    "linear_traversal_nth": {
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$3": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "nth": {
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$3": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "nthrest": function () {},
    "get": {
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$3": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "assoc": {
      "cljs$core$IFn$_invoke$arity$3": function () {},
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$applyTo": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "dissoc": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$applyTo": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "fn_QMARK_": function () {},
    "MetaFn": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {}
    },
    "__GT_MetaFn": function () {},
    "with_meta": function () {},
    "meta": function () {},
    "peek": function () {},
    "pop": function () {},
    "disj": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$applyTo": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "empty_QMARK_": function () {},
    "coll_QMARK_": function () {},
    "set_QMARK_": function () {},
    "associative_QMARK_": function () {},
    "sequential_QMARK_": function () {},
    "sorted_QMARK_": function () {},
    "reduceable_QMARK_": function () {},
    "map_QMARK_": function () {},
    "record_QMARK_": function () {},
    "vector_QMARK_": function () {},
    "chunked_seq_QMARK_": function () {},
    "js_obj": {
      "cljs$core$IFn$_invoke$arity$0": function () {},
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$applyTo": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "js_keys": function () {},
    "js_delete": function () {},
    "array_copy": function () {},
    "array_copy_downward": function () {},
    "lookup_sentinel": {},
    "false_QMARK_": function () {},
    "true_QMARK_": function () {},
    "boolean_QMARK_": function () {},
    "undefined_QMARK_": function () {},
    "seq_QMARK_": function () {},
    "seqable_QMARK_": function () {},
    "boolean$": function () {},
    "ifn_QMARK_": function () {},
    "integer_QMARK_": function () {},
    "int_QMARK_": function () {},
    "pos_int_QMARK_": function () {},
    "neg_int_QMARK_": function () {},
    "nat_int_QMARK_": function () {},
    "contains_QMARK_": function () {},
    "find": function () {},
    "distinct_QMARK_": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$applyTo": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "compare": function () {},
    "compare_indexed": {
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$4": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "fn__GT_comparator": function () {},
    "sort": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "sort_by": {
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$3": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "seq_reduce": {
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$3": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "shuffle": function () {},
    "reduce": {
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$3": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "reduce_kv": function () {},
    "identity": function () {},
    "completing": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "transduce": {
      "cljs$core$IFn$_invoke$arity$3": function () {},
      "cljs$core$IFn$_invoke$arity$4": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "_PLUS_": {
      "cljs$core$IFn$_invoke$arity$0": function () {},
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$applyTo": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "_": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$applyTo": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "_STAR_": {
      "cljs$core$IFn$_invoke$arity$0": function () {},
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$applyTo": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "_SLASH_": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$applyTo": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "_LT_": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$applyTo": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "_LT__EQ_": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$applyTo": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "_GT_": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$applyTo": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "_GT__EQ_": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$applyTo": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "dec": function () {},
    "max": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$applyTo": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "min": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$applyTo": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "byte$": function () {},
    "char$": function () {},
    "short$": function () {},
    "float$": function () {},
    "double$": function () {},
    "unchecked_byte": function () {},
    "unchecked_char": function () {},
    "unchecked_short": function () {},
    "unchecked_float": function () {},
    "unchecked_double": function () {},
    "unchecked_add": {
      "cljs$core$IFn$_invoke$arity$0": function () {},
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$applyTo": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "unchecked_add_int": {
      "cljs$core$IFn$_invoke$arity$0": function () {},
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$applyTo": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "unchecked_dec": function () {},
    "unchecked_dec_int": function () {},
    "unchecked_divide_int": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$applyTo": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "unchecked_inc": function () {},
    "unchecked_inc_int": function () {},
    "unchecked_multiply": {
      "cljs$core$IFn$_invoke$arity$0": function () {},
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$applyTo": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "unchecked_multiply_int": {
      "cljs$core$IFn$_invoke$arity$0": function () {},
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$applyTo": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "unchecked_negate": function () {},
    "unchecked_negate_int": function () {},
    "unchecked_remainder_int": function () {},
    "unchecked_subtract": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$applyTo": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "unchecked_subtract_int": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$applyTo": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "fix": function () {},
    "int$": function () {},
    "unchecked_int": function () {},
    "long$": function () {},
    "unchecked_long": function () {},
    "booleans": function () {},
    "bytes": function () {},
    "chars": function () {},
    "shorts": function () {},
    "ints": function () {},
    "floats": function () {},
    "doubles": function () {},
    "longs": function () {},
    "js_mod": function () {},
    "mod": function () {},
    "quot": function () {},
    "rem": function () {},
    "bit_xor": {
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$applyTo": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "bit_and": {
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$applyTo": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "bit_or": {
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$applyTo": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "bit_and_not": {
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$applyTo": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "bit_clear": function () {},
    "bit_flip": function () {},
    "bit_not": function () {},
    "bit_set": function () {},
    "bit_test": function () {},
    "bit_shift_left": function () {},
    "bit_shift_right": function () {},
    "bit_shift_right_zero_fill": function () {},
    "unsigned_bit_shift_right": function () {},
    "bit_count": function () {},
    "_EQ__EQ_": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$applyTo": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "pos_QMARK_": function () {},
    "zero_QMARK_": function () {},
    "neg_QMARK_": function () {},
    "nthnext": function () {},
    "str": {
      "cljs$core$IFn$_invoke$arity$0": function () {},
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$applyTo": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "subs": {
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$3": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "equiv_sequential": function () {},
    "hash_coll": function () {},
    "hash_imap": function () {},
    "hash_iset": function () {},
    "extend_object_BANG_": function () {},
    "List": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {},
      "EMPTY": {
        "meta": {},
        "cljs$lang$protocol_mask$partition0$": {},
        "cljs$lang$protocol_mask$partition1$": {},
        "toString": function () {},
        "equiv": function () {},
        "indexOf": {
          "cljs$core$IFn$_invoke$arity$1": function () {},
          "cljs$core$IFn$_invoke$arity$2": function () {}
        },
        "lastIndexOf": {
          "cljs$core$IFn$_invoke$arity$1": function () {},
          "cljs$core$IFn$_invoke$arity$2": function () {}
        },
        "cljs$core$IMeta$_meta$arity$1": function () {},
        "cljs$core$ICloneable$_clone$arity$1": function () {},
        "cljs$core$INext$_next$arity$1": function () {},
        "cljs$core$ICounted$_count$arity$1": function () {},
        "cljs$core$IStack$_peek$arity$1": function () {},
        "cljs$core$IStack$_pop$arity$1": function () {},
        "cljs$core$IHash$_hash$arity$1": function () {},
        "cljs$core$IEquiv$_equiv$arity$2": function () {},
        "cljs$core$IEmptyableCollection$_empty$arity$1": function () {},
        "cljs$core$IReduce$_reduce$arity$2": function () {},
        "cljs$core$IReduce$_reduce$arity$3": function () {},
        "cljs$core$ISeq$_first$arity$1": function () {},
        "cljs$core$ISeq$_rest$arity$1": function () {},
        "cljs$core$ISeqable$_seq$arity$1": function () {},
        "cljs$core$IWithMeta$_with_meta$arity$2": function () {},
        "cljs$core$ICollection$_conj$arity$2": function () {},
        "cljs$core$IPrintWithWriter$": {},
        "cljs$core$IPrintWithWriter$_pr_writer$arity$3": function () {}
      }
    },
    "__GT_List": function () {},
    "list_QMARK_": function () {},
    "EmptyList": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {}
    },
    "__GT_EmptyList": function () {},
    "reversible_QMARK_": function () {},
    "rseq": function () {},
    "reverse": function () {},
    "list": {
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$maxFixedArity": {},
      "cljs$lang$applyTo": function () {}
    },
    "Cons": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {}
    },
    "__GT_Cons": function () {},
    "cons": function () {},
    "hash_keyword": function () {},
    "compare_keywords": function () {},
    "Keyword": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {}
    },
    "__GT_Keyword": function () {},
    "keyword_QMARK_": function () {},
    "keyword_identical_QMARK_": function () {},
    "symbol_identical_QMARK_": function () {},
    "namespace": function () {},
    "ident_QMARK_": function () {},
    "simple_ident_QMARK_": function () {},
    "qualified_ident_QMARK_": function () {},
    "simple_symbol_QMARK_": function () {},
    "qualified_symbol_QMARK_": function () {},
    "simple_keyword_QMARK_": function () {},
    "qualified_keyword_QMARK_": function () {},
    "keyword": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "LazySeq": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {}
    },
    "__GT_LazySeq": function () {},
    "ChunkBuffer": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {}
    },
    "__GT_ChunkBuffer": function () {},
    "chunk_buffer": function () {},
    "ArrayChunk": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {}
    },
    "__GT_ArrayChunk": function () {},
    "array_chunk": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$3": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "ChunkedCons": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {}
    },
    "__GT_ChunkedCons": function () {},
    "chunk_cons": function () {},
    "chunk_append": function () {},
    "chunk": function () {},
    "chunk_first": function () {},
    "chunk_rest": function () {},
    "chunk_next": function () {},
    "to_array": function () {},
    "to_array_2d": function () {},
    "int_array": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "long_array": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "double_array": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "object_array": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "bounded_count": function () {},
    "spread": function () {},
    "concat": {
      "cljs$core$IFn$_invoke$arity$0": function () {},
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$applyTo": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "list_STAR_": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$3": function () {},
      "cljs$core$IFn$_invoke$arity$4": function () {},
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$applyTo": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "transient$": function () {},
    "persistent_BANG_": function () {},
    "conj_BANG_": {
      "cljs$core$IFn$_invoke$arity$0": function () {},
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$applyTo": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "assoc_BANG_": {
      "cljs$core$IFn$_invoke$arity$3": function () {},
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$applyTo": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "dissoc_BANG_": {
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$applyTo": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "pop_BANG_": function () {},
    "disj_BANG_": {
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$applyTo": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "apply_to": function () {},
    "apply": {
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$3": function () {},
      "cljs$core$IFn$_invoke$arity$4": function () {},
      "cljs$core$IFn$_invoke$arity$5": function () {},
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$applyTo": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "vary_meta": {
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$3": function () {},
      "cljs$core$IFn$_invoke$arity$4": function () {},
      "cljs$core$IFn$_invoke$arity$5": function () {},
      "cljs$core$IFn$_invoke$arity$6": function () {},
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$applyTo": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "not_EQ_": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$applyTo": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "not_empty": function () {},
    "nil_iter": function () {},
    "StringIter": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {}
    },
    "__GT_StringIter": function () {},
    "string_iter": function () {},
    "ArrayIter": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {}
    },
    "__GT_ArrayIter": function () {},
    "array_iter": function () {},
    "INIT": {},
    "START": {},
    "SeqIter": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {}
    },
    "__GT_SeqIter": function () {},
    "seq_iter": function () {},
    "iter": function () {},
    "lazy_transformer": function () {},
    "Stepper": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {}
    },
    "__GT_Stepper": function () {},
    "stepper": function () {},
    "MultiStepper": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {}
    },
    "__GT_MultiStepper": function () {},
    "multi_stepper": {
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$3": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "LazyTransformer": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {},
      "create": function () {},
      "createMulti": function () {}
    },
    "__GT_LazyTransformer": function () {},
    "sequence": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$applyTo": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "every_QMARK_": function () {},
    "not_every_QMARK_": function () {},
    "some": function () {},
    "not_any_QMARK_": function () {},
    "even_QMARK_": function () {},
    "odd_QMARK_": function () {},
    "complement": function () {},
    "constantly": function () {},
    "comp": {
      "cljs$core$IFn$_invoke$arity$0": function () {},
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$3": function () {},
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$applyTo": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "partial": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$3": function () {},
      "cljs$core$IFn$_invoke$arity$4": function () {},
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$applyTo": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "fnil": {
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$3": function () {},
      "cljs$core$IFn$_invoke$arity$4": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "map_indexed": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "keep": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "Atom": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {}
    },
    "__GT_Atom": function () {},
    "atom": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$applyTo": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "reset_BANG_": function () {},
    "swap_BANG_": {
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$3": function () {},
      "cljs$core$IFn$_invoke$arity$4": function () {},
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$applyTo": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "compare_and_set_BANG_": function () {},
    "set_validator_BANG_": function () {},
    "get_validator": function () {},
    "Volatile": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {}
    },
    "__GT_Volatile": function () {},
    "volatile_BANG_": function () {},
    "volatile_QMARK_": function () {},
    "vreset_BANG_": function () {},
    "keep_indexed": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "every_pred": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$3": function () {},
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$applyTo": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "some_fn": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$3": function () {},
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$applyTo": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "map": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$3": function () {},
      "cljs$core$IFn$_invoke$arity$4": function () {},
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$applyTo": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "take": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "drop": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "drop_last": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "take_last": function () {},
    "drop_while": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "cycle": function () {},
    "split_at": function () {},
    "repeat": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "replicate": function () {},
    "repeatedly": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "iterate": function () {},
    "interleave": {
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$applyTo": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "interpose": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "flatten1": function () {},
    "mapcat": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$applyTo": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "filter": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "remove": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "tree_seq": function () {},
    "flatten": function () {},
    "into": {
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$3": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "mapv": {
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$3": function () {},
      "cljs$core$IFn$_invoke$arity$4": function () {},
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$applyTo": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "filterv": function () {},
    "partition": {
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$3": function () {},
      "cljs$core$IFn$_invoke$arity$4": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "get_in": {
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$3": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "assoc_in": function () {},
    "update_in": {
      "cljs$core$IFn$_invoke$arity$3": function () {},
      "cljs$core$IFn$_invoke$arity$4": function () {},
      "cljs$core$IFn$_invoke$arity$5": function () {},
      "cljs$core$IFn$_invoke$arity$6": function () {},
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$applyTo": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "update": {
      "cljs$core$IFn$_invoke$arity$3": function () {},
      "cljs$core$IFn$_invoke$arity$4": function () {},
      "cljs$core$IFn$_invoke$arity$5": function () {},
      "cljs$core$IFn$_invoke$arity$6": function () {},
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$applyTo": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "VectorNode": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {}
    },
    "__GT_VectorNode": function () {},
    "pv_fresh_node": function () {},
    "pv_aget": function () {},
    "pv_aset": function () {},
    "pv_clone_node": function () {},
    "tail_off": function () {},
    "new_path": function () {},
    "push_tail": function () {},
    "vector_index_out_of_bounds": function () {},
    "first_array_for_longvec": function () {},
    "unchecked_array_for": function () {},
    "array_for": function () {},
    "do_assoc": function () {},
    "pop_tail": function () {},
    "RangedIterator": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {}
    },
    "__GT_RangedIterator": function () {},
    "ranged_iterator": function () {},
    "PersistentVector": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {},
      "EMPTY_NODE": {
        "edit": {},
        "arr": {}
      },
      "EMPTY": {
        "meta": {},
        "cnt": {},
        "shift": {},
        "root": {
          "edit": {},
          "arr": {}
        },
        "tail": {},
        "__hash": {},
        "cljs$lang$protocol_mask$partition0$": {},
        "cljs$lang$protocol_mask$partition1$": {},
        "toString": function () {},
        "equiv": function () {},
        "indexOf": {
          "cljs$core$IFn$_invoke$arity$1": function () {},
          "cljs$core$IFn$_invoke$arity$2": function () {}
        },
        "lastIndexOf": {
          "cljs$core$IFn$_invoke$arity$1": function () {},
          "cljs$core$IFn$_invoke$arity$2": function () {}
        },
        "cljs$core$ILookup$_lookup$arity$2": function () {},
        "cljs$core$ILookup$_lookup$arity$3": function () {},
        "cljs$core$IKVReduce$_kv_reduce$arity$3": function () {},
        "cljs$core$IIndexed$_nth$arity$2": function () {},
        "cljs$core$IIndexed$_nth$arity$3": function () {},
        "cljs$core$IVector$_assoc_n$arity$3": function () {},
        "cljs$core$IIterable$": {},
        "cljs$core$IIterable$_iterator$arity$1": function () {},
        "cljs$core$IMeta$_meta$arity$1": function () {},
        "cljs$core$ICloneable$_clone$arity$1": function () {},
        "cljs$core$ICounted$_count$arity$1": function () {},
        "cljs$core$IMapEntry$_key$arity$1": function () {},
        "cljs$core$IMapEntry$_val$arity$1": function () {},
        "cljs$core$IStack$_peek$arity$1": function () {},
        "cljs$core$IStack$_pop$arity$1": function () {},
        "cljs$core$IReversible$_rseq$arity$1": function () {},
        "cljs$core$IHash$_hash$arity$1": function () {},
        "cljs$core$IEquiv$_equiv$arity$2": function () {},
        "cljs$core$IEditableCollection$_as_transient$arity$1": function () {},
        "cljs$core$IEmptyableCollection$_empty$arity$1": function () {},
        "cljs$core$IReduce$_reduce$arity$2": function () {},
        "cljs$core$IReduce$_reduce$arity$3": function () {},
        "cljs$core$IAssociative$_assoc$arity$3": function () {},
        "cljs$core$ISeqable$_seq$arity$1": function () {},
        "cljs$core$IWithMeta$_with_meta$arity$2": function () {},
        "cljs$core$ICollection$_conj$arity$2": function () {},
        "call": {
          "cljs$core$IFn$_invoke$arity$2": function () {},
          "cljs$core$IFn$_invoke$arity$3": function () {}
        },
        "apply": function () {},
        "cljs$core$IFn$_invoke$arity$1": function () {},
        "cljs$core$IFn$_invoke$arity$2": function () {},
        "cljs$core$IPrintWithWriter$": {},
        "cljs$core$IPrintWithWriter$_pr_writer$arity$3": function () {},
        "cljs$core$IComparable$": {},
        "cljs$core$IComparable$_compare$arity$2": function () {}
      },
      "fromArray": function () {}
    },
    "__GT_PersistentVector": function () {},
    "vec": function () {},
    "vector": {
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$maxFixedArity": {},
      "cljs$lang$applyTo": function () {}
    },
    "ChunkedSeq": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {}
    },
    "__GT_ChunkedSeq": function () {},
    "chunked_seq": {
      "cljs$core$IFn$_invoke$arity$3": function () {},
      "cljs$core$IFn$_invoke$arity$4": function () {},
      "cljs$core$IFn$_invoke$arity$5": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "Subvec": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {}
    },
    "__GT_Subvec": function () {},
    "build_subvec": function () {},
    "subvec": {
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$3": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "tv_ensure_editable": function () {},
    "tv_editable_root": function () {},
    "tv_editable_tail": function () {},
    "tv_push_tail": function () {},
    "tv_pop_tail": function () {},
    "unchecked_editable_array_for": function () {},
    "TransientVector": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {}
    },
    "__GT_TransientVector": function () {},
    "PersistentQueueIter": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {}
    },
    "__GT_PersistentQueueIter": function () {},
    "PersistentQueueSeq": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {}
    },
    "__GT_PersistentQueueSeq": function () {},
    "PersistentQueue": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {},
      "EMPTY": {
        "meta": {},
        "count": {},
        "front": {},
        "rear": {
          "meta": {},
          "cnt": {},
          "shift": {},
          "root": {
            "edit": {},
            "arr": {}
          },
          "tail": {},
          "__hash": {},
          "cljs$lang$protocol_mask$partition0$": {},
          "cljs$lang$protocol_mask$partition1$": {},
          "toString": function () {},
          "equiv": function () {},
          "indexOf": {
            "cljs$core$IFn$_invoke$arity$1": function () {},
            "cljs$core$IFn$_invoke$arity$2": function () {}
          },
          "lastIndexOf": {
            "cljs$core$IFn$_invoke$arity$1": function () {},
            "cljs$core$IFn$_invoke$arity$2": function () {}
          },
          "cljs$core$ILookup$_lookup$arity$2": function () {},
          "cljs$core$ILookup$_lookup$arity$3": function () {},
          "cljs$core$IKVReduce$_kv_reduce$arity$3": function () {},
          "cljs$core$IIndexed$_nth$arity$2": function () {},
          "cljs$core$IIndexed$_nth$arity$3": function () {},
          "cljs$core$IVector$_assoc_n$arity$3": function () {},
          "cljs$core$IIterable$": {},
          "cljs$core$IIterable$_iterator$arity$1": function () {},
          "cljs$core$IMeta$_meta$arity$1": function () {},
          "cljs$core$ICloneable$_clone$arity$1": function () {},
          "cljs$core$ICounted$_count$arity$1": function () {},
          "cljs$core$IMapEntry$_key$arity$1": function () {},
          "cljs$core$IMapEntry$_val$arity$1": function () {},
          "cljs$core$IStack$_peek$arity$1": function () {},
          "cljs$core$IStack$_pop$arity$1": function () {},
          "cljs$core$IReversible$_rseq$arity$1": function () {},
          "cljs$core$IHash$_hash$arity$1": function () {},
          "cljs$core$IEquiv$_equiv$arity$2": function () {},
          "cljs$core$IEditableCollection$_as_transient$arity$1": function () {},
          "cljs$core$IEmptyableCollection$_empty$arity$1": function () {},
          "cljs$core$IReduce$_reduce$arity$2": function () {},
          "cljs$core$IReduce$_reduce$arity$3": function () {},
          "cljs$core$IAssociative$_assoc$arity$3": function () {},
          "cljs$core$ISeqable$_seq$arity$1": function () {},
          "cljs$core$IWithMeta$_with_meta$arity$2": function () {},
          "cljs$core$ICollection$_conj$arity$2": function () {},
          "call": {
            "cljs$core$IFn$_invoke$arity$2": function () {},
            "cljs$core$IFn$_invoke$arity$3": function () {}
          },
          "apply": function () {},
          "cljs$core$IFn$_invoke$arity$1": function () {},
          "cljs$core$IFn$_invoke$arity$2": function () {},
          "cljs$core$IPrintWithWriter$": {},
          "cljs$core$IPrintWithWriter$_pr_writer$arity$3": function () {},
          "cljs$core$IComparable$": {},
          "cljs$core$IComparable$_compare$arity$2": function () {}
        },
        "__hash": {},
        "cljs$lang$protocol_mask$partition0$": {},
        "cljs$lang$protocol_mask$partition1$": {},
        "toString": function () {},
        "equiv": function () {},
        "indexOf": {
          "cljs$core$IFn$_invoke$arity$1": function () {},
          "cljs$core$IFn$_invoke$arity$2": function () {}
        },
        "lastIndexOf": {
          "cljs$core$IFn$_invoke$arity$1": function () {},
          "cljs$core$IFn$_invoke$arity$2": function () {}
        },
        "cljs$core$IIterable$": {},
        "cljs$core$IIterable$_iterator$arity$1": function () {},
        "cljs$core$IMeta$_meta$arity$1": function () {},
        "cljs$core$ICloneable$_clone$arity$1": function () {},
        "cljs$core$ICounted$_count$arity$1": function () {},
        "cljs$core$IStack$_peek$arity$1": function () {},
        "cljs$core$IStack$_pop$arity$1": function () {},
        "cljs$core$IHash$_hash$arity$1": function () {},
        "cljs$core$IEquiv$_equiv$arity$2": function () {},
        "cljs$core$IEmptyableCollection$_empty$arity$1": function () {},
        "cljs$core$ISeq$_first$arity$1": function () {},
        "cljs$core$ISeq$_rest$arity$1": function () {},
        "cljs$core$ISeqable$_seq$arity$1": function () {},
        "cljs$core$IWithMeta$_with_meta$arity$2": function () {},
        "cljs$core$ICollection$_conj$arity$2": function () {},
        "cljs$core$IPrintWithWriter$": {},
        "cljs$core$IPrintWithWriter$_pr_writer$arity$3": function () {}
      }
    },
    "__GT_PersistentQueue": function () {},
    "NeverEquiv": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {}
    },
    "__GT_NeverEquiv": function () {},
    "never_equiv": {
      "cljs$lang$protocol_mask$partition0$": {},
      "cljs$lang$protocol_mask$partition1$": {},
      "equiv": function () {},
      "cljs$core$IEquiv$_equiv$arity$2": function () {}
    },
    "equiv_map": function () {},
    "scan_array": function () {},
    "obj_map_compare_keys": function () {},
    "obj_map__GT_hash_map": function () {},
    "obj_clone": function () {},
    "ObjMap": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {},
      "EMPTY": {
        "meta": {},
        "keys": {},
        "strobj": {},
        "update_count": {},
        "__hash": {},
        "cljs$lang$protocol_mask$partition0$": {},
        "cljs$lang$protocol_mask$partition1$": {},
        "toString": function () {},
        "equiv": function () {},
        "cljs$core$ILookup$_lookup$arity$2": function () {},
        "cljs$core$ILookup$_lookup$arity$3": function () {},
        "cljs$core$IKVReduce$_kv_reduce$arity$3": function () {},
        "cljs$core$IMeta$_meta$arity$1": function () {},
        "cljs$core$ICounted$_count$arity$1": function () {},
        "cljs$core$IHash$_hash$arity$1": function () {},
        "cljs$core$IEquiv$_equiv$arity$2": function () {},
        "cljs$core$IEditableCollection$_as_transient$arity$1": function () {},
        "cljs$core$IEmptyableCollection$_empty$arity$1": function () {},
        "cljs$core$IMap$_dissoc$arity$2": function () {},
        "cljs$core$IAssociative$_assoc$arity$3": function () {},
        "cljs$core$IAssociative$_contains_key_QMARK_$arity$2": function () {},
        "cljs$core$ISeqable$_seq$arity$1": function () {},
        "cljs$core$IWithMeta$_with_meta$arity$2": function () {},
        "cljs$core$ICollection$_conj$arity$2": function () {},
        "call": {
          "cljs$core$IFn$_invoke$arity$2": function () {},
          "cljs$core$IFn$_invoke$arity$3": function () {}
        },
        "apply": function () {},
        "cljs$core$IFn$_invoke$arity$1": function () {},
        "cljs$core$IFn$_invoke$arity$2": function () {},
        "cljs$core$IPrintWithWriter$": {},
        "cljs$core$IPrintWithWriter$_pr_writer$arity$3": function () {}
      },
      "HASHMAP_THRESHOLD": {},
      "fromObject": function () {}
    },
    "__GT_ObjMap": function () {},
    "RecordIter": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {}
    },
    "__GT_RecordIter": function () {},
    "ES6EntriesIterator": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {}
    },
    "__GT_ES6EntriesIterator": function () {},
    "es6_entries_iterator": function () {},
    "ES6SetEntriesIterator": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {}
    },
    "__GT_ES6SetEntriesIterator": function () {},
    "es6_set_entries_iterator": function () {},
    "array_index_of_nil_QMARK_": function () {},
    "array_index_of_keyword_QMARK_": function () {},
    "array_index_of_symbol_QMARK_": function () {},
    "array_index_of_identical_QMARK_": function () {},
    "array_index_of_equiv_QMARK_": function () {},
    "array_index_of": function () {},
    "array_map_index_of": function () {},
    "array_extend_kv": function () {},
    "array_map_extend_kv": function () {},
    "PersistentArrayMapSeq": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {}
    },
    "__GT_PersistentArrayMapSeq": function () {},
    "persistent_array_map_seq": function () {},
    "PersistentArrayMapIterator": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {}
    },
    "__GT_PersistentArrayMapIterator": function () {},
    "PersistentArrayMap": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {},
      "EMPTY": {
        "meta": {},
        "cnt": {},
        "arr": {},
        "__hash": {},
        "cljs$lang$protocol_mask$partition0$": {},
        "cljs$lang$protocol_mask$partition1$": {},
        "toString": function () {},
        "equiv": function () {},
        "keys": function () {},
        "entries": function () {},
        "values": function () {},
        "has": function () {},
        "get": function () {},
        "forEach": function () {},
        "cljs$core$ILookup$_lookup$arity$2": function () {},
        "cljs$core$ILookup$_lookup$arity$3": function () {},
        "cljs$core$IKVReduce$_kv_reduce$arity$3": function () {},
        "cljs$core$IIterable$": {},
        "cljs$core$IIterable$_iterator$arity$1": function () {},
        "cljs$core$IMeta$_meta$arity$1": function () {},
        "cljs$core$ICloneable$_clone$arity$1": function () {},
        "cljs$core$ICounted$_count$arity$1": function () {},
        "cljs$core$IHash$_hash$arity$1": function () {},
        "cljs$core$IEquiv$_equiv$arity$2": function () {},
        "cljs$core$IEditableCollection$_as_transient$arity$1": function () {},
        "cljs$core$IEmptyableCollection$_empty$arity$1": function () {},
        "cljs$core$IReduce$_reduce$arity$2": function () {},
        "cljs$core$IReduce$_reduce$arity$3": function () {},
        "cljs$core$IMap$_dissoc$arity$2": function () {},
        "cljs$core$IAssociative$_assoc$arity$3": function () {},
        "cljs$core$IAssociative$_contains_key_QMARK_$arity$2": function () {},
        "cljs$core$ISeqable$_seq$arity$1": function () {},
        "cljs$core$IWithMeta$_with_meta$arity$2": function () {},
        "cljs$core$ICollection$_conj$arity$2": function () {},
        "call": {
          "cljs$core$IFn$_invoke$arity$2": function () {},
          "cljs$core$IFn$_invoke$arity$3": function () {}
        },
        "apply": function () {},
        "cljs$core$IFn$_invoke$arity$1": function () {},
        "cljs$core$IFn$_invoke$arity$2": function () {},
        "cljs$core$IPrintWithWriter$": {},
        "cljs$core$IPrintWithWriter$_pr_writer$arity$3": function () {}
      },
      "HASHMAP_THRESHOLD": {},
      "fromArray": function () {}
    },
    "__GT_PersistentArrayMap": function () {},
    "TransientArrayMap": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {}
    },
    "__GT_TransientArrayMap": function () {},
    "array__GT_transient_hash_map": function () {},
    "Box": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {}
    },
    "__GT_Box": function () {},
    "key_test": function () {},
    "mask": function () {},
    "clone_and_set": {
      "cljs$core$IFn$_invoke$arity$3": function () {},
      "cljs$core$IFn$_invoke$arity$5": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "remove_pair": function () {},
    "bitmap_indexed_node_index": function () {},
    "bitpos": function () {},
    "edit_and_set": {
      "cljs$core$IFn$_invoke$arity$4": function () {},
      "cljs$core$IFn$_invoke$arity$6": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "inode_kv_reduce": function () {},
    "NodeIterator": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {}
    },
    "__GT_NodeIterator": function () {},
    "BitmapIndexedNode": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {},
      "EMPTY": {
        "edit": {},
        "bitmap": {},
        "arr": {},
        "ensure_editable": function () {},
        "inode_without_BANG_": function () {},
        "edit_and_remove_pair": function () {},
        "inode_seq": function () {},
        "kv_reduce": function () {},
        "inode_lookup": function () {},
        "inode_assoc_BANG_": function () {},
        "inode_assoc": function () {},
        "inode_find": function () {},
        "inode_without": function () {},
        "cljs$core$IIterable$": {},
        "cljs$core$IIterable$_iterator$arity$1": function () {}
      }
    },
    "__GT_BitmapIndexedNode": function () {},
    "pack_array_node": function () {},
    "ArrayNodeIterator": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {}
    },
    "__GT_ArrayNodeIterator": function () {},
    "ArrayNode": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {}
    },
    "__GT_ArrayNode": function () {},
    "hash_collision_node_find_index": function () {},
    "HashCollisionNode": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {}
    },
    "__GT_HashCollisionNode": function () {},
    "create_node": {
      "cljs$core$IFn$_invoke$arity$6": function () {},
      "cljs$core$IFn$_invoke$arity$7": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "NodeSeq": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {}
    },
    "__GT_NodeSeq": function () {},
    "create_inode_seq": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$3": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "ArrayNodeSeq": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {}
    },
    "__GT_ArrayNodeSeq": function () {},
    "create_array_node_seq": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$4": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "HashMapIter": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {}
    },
    "__GT_HashMapIter": function () {},
    "PersistentHashMap": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {},
      "EMPTY": {
        "meta": {},
        "cnt": {},
        "root": {},
        "has_nil_QMARK_": {},
        "nil_val": {},
        "__hash": {},
        "cljs$lang$protocol_mask$partition0$": {},
        "cljs$lang$protocol_mask$partition1$": {},
        "toString": function () {},
        "equiv": function () {},
        "keys": function () {},
        "entries": function () {},
        "values": function () {},
        "has": function () {},
        "get": function () {},
        "forEach": function () {},
        "cljs$core$ILookup$_lookup$arity$2": function () {},
        "cljs$core$ILookup$_lookup$arity$3": function () {},
        "cljs$core$IKVReduce$_kv_reduce$arity$3": function () {},
        "cljs$core$IIterable$": {},
        "cljs$core$IIterable$_iterator$arity$1": function () {},
        "cljs$core$IMeta$_meta$arity$1": function () {},
        "cljs$core$ICloneable$_clone$arity$1": function () {},
        "cljs$core$ICounted$_count$arity$1": function () {},
        "cljs$core$IHash$_hash$arity$1": function () {},
        "cljs$core$IEquiv$_equiv$arity$2": function () {},
        "cljs$core$IEditableCollection$_as_transient$arity$1": function () {},
        "cljs$core$IEmptyableCollection$_empty$arity$1": function () {},
        "cljs$core$IMap$_dissoc$arity$2": function () {},
        "cljs$core$IAssociative$_assoc$arity$3": function () {},
        "cljs$core$IAssociative$_contains_key_QMARK_$arity$2": function () {},
        "cljs$core$ISeqable$_seq$arity$1": function () {},
        "cljs$core$IWithMeta$_with_meta$arity$2": function () {},
        "cljs$core$ICollection$_conj$arity$2": function () {},
        "call": {
          "cljs$core$IFn$_invoke$arity$2": function () {},
          "cljs$core$IFn$_invoke$arity$3": function () {}
        },
        "apply": function () {},
        "cljs$core$IFn$_invoke$arity$1": function () {},
        "cljs$core$IFn$_invoke$arity$2": function () {},
        "cljs$core$IPrintWithWriter$": {},
        "cljs$core$IPrintWithWriter$_pr_writer$arity$3": function () {}
      },
      "fromArray": function () {},
      "fromArrays": function () {}
    },
    "__GT_PersistentHashMap": function () {},
    "TransientHashMap": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {}
    },
    "__GT_TransientHashMap": function () {},
    "tree_map_seq_push": function () {},
    "PersistentTreeMapSeq": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {}
    },
    "__GT_PersistentTreeMapSeq": function () {},
    "create_tree_map_seq": function () {},
    "balance_left": function () {},
    "balance_right": function () {},
    "balance_left_del": function () {},
    "balance_right_del": function () {},
    "tree_map_kv_reduce": function () {},
    "BlackNode": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {}
    },
    "__GT_BlackNode": function () {},
    "RedNode": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {}
    },
    "__GT_RedNode": function () {},
    "tree_map_add": function () {},
    "tree_map_append": function () {},
    "tree_map_remove": function () {},
    "tree_map_replace": function () {},
    "PersistentTreeMap": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {},
      "EMPTY": {
        "comp": function () {},
        "tree": {},
        "cnt": {},
        "meta": {},
        "__hash": {},
        "cljs$lang$protocol_mask$partition0$": {},
        "cljs$lang$protocol_mask$partition1$": {},
        "forEach": function () {},
        "get": function () {},
        "entries": function () {},
        "toString": function () {},
        "keys": function () {},
        "values": function () {},
        "equiv": function () {},
        "entry_at": function () {},
        "has": function () {},
        "cljs$core$ILookup$_lookup$arity$2": function () {},
        "cljs$core$ILookup$_lookup$arity$3": function () {},
        "cljs$core$IKVReduce$_kv_reduce$arity$3": function () {},
        "cljs$core$IMeta$_meta$arity$1": function () {},
        "cljs$core$ICloneable$_clone$arity$1": function () {},
        "cljs$core$ICounted$_count$arity$1": function () {},
        "cljs$core$IReversible$_rseq$arity$1": function () {},
        "cljs$core$IHash$_hash$arity$1": function () {},
        "cljs$core$IEquiv$_equiv$arity$2": function () {},
        "cljs$core$IEmptyableCollection$_empty$arity$1": function () {},
        "cljs$core$IMap$_dissoc$arity$2": function () {},
        "cljs$core$IAssociative$_assoc$arity$3": function () {},
        "cljs$core$IAssociative$_contains_key_QMARK_$arity$2": function () {},
        "cljs$core$ISeqable$_seq$arity$1": function () {},
        "cljs$core$IWithMeta$_with_meta$arity$2": function () {},
        "cljs$core$ICollection$_conj$arity$2": function () {},
        "call": {
          "cljs$core$IFn$_invoke$arity$2": function () {},
          "cljs$core$IFn$_invoke$arity$3": function () {}
        },
        "apply": function () {},
        "cljs$core$IFn$_invoke$arity$1": function () {},
        "cljs$core$IFn$_invoke$arity$2": function () {},
        "cljs$core$ISorted$_sorted_seq$arity$2": function () {},
        "cljs$core$ISorted$_sorted_seq_from$arity$3": function () {},
        "cljs$core$ISorted$_entry_key$arity$2": function () {},
        "cljs$core$ISorted$_comparator$arity$1": function () {},
        "cljs$core$IPrintWithWriter$": {},
        "cljs$core$IPrintWithWriter$_pr_writer$arity$3": function () {}
      }
    },
    "__GT_PersistentTreeMap": function () {},
    "hash_map": {
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$maxFixedArity": {},
      "cljs$lang$applyTo": function () {}
    },
    "array_map": {
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$maxFixedArity": {},
      "cljs$lang$applyTo": function () {}
    },
    "obj_map": {
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$maxFixedArity": {},
      "cljs$lang$applyTo": function () {}
    },
    "sorted_map": {
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$maxFixedArity": {},
      "cljs$lang$applyTo": function () {}
    },
    "sorted_map_by": {
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$maxFixedArity": {},
      "cljs$lang$applyTo": function () {}
    },
    "KeySeq": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {}
    },
    "__GT_KeySeq": function () {},
    "keys": function () {},
    "key": function () {},
    "ValSeq": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {}
    },
    "__GT_ValSeq": function () {},
    "vals": function () {},
    "val": function () {},
    "merge": {
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$maxFixedArity": {},
      "cljs$lang$applyTo": function () {}
    },
    "merge_with": {
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$maxFixedArity": {},
      "cljs$lang$applyTo": function () {}
    },
    "select_keys": function () {},
    "HashSetIter": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {}
    },
    "__GT_HashSetIter": function () {},
    "PersistentHashSet": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {},
      "EMPTY": {
        "meta": {},
        "hash_map": {
          "meta": {},
          "cnt": {},
          "arr": {},
          "__hash": {},
          "cljs$lang$protocol_mask$partition0$": {},
          "cljs$lang$protocol_mask$partition1$": {},
          "toString": function () {},
          "equiv": function () {},
          "keys": function () {},
          "entries": function () {},
          "values": function () {},
          "has": function () {},
          "get": function () {},
          "forEach": function () {},
          "cljs$core$ILookup$_lookup$arity$2": function () {},
          "cljs$core$ILookup$_lookup$arity$3": function () {},
          "cljs$core$IKVReduce$_kv_reduce$arity$3": function () {},
          "cljs$core$IIterable$": {},
          "cljs$core$IIterable$_iterator$arity$1": function () {},
          "cljs$core$IMeta$_meta$arity$1": function () {},
          "cljs$core$ICloneable$_clone$arity$1": function () {},
          "cljs$core$ICounted$_count$arity$1": function () {},
          "cljs$core$IHash$_hash$arity$1": function () {},
          "cljs$core$IEquiv$_equiv$arity$2": function () {},
          "cljs$core$IEditableCollection$_as_transient$arity$1": function () {},
          "cljs$core$IEmptyableCollection$_empty$arity$1": function () {},
          "cljs$core$IReduce$_reduce$arity$2": function () {},
          "cljs$core$IReduce$_reduce$arity$3": function () {},
          "cljs$core$IMap$_dissoc$arity$2": function () {},
          "cljs$core$IAssociative$_assoc$arity$3": function () {},
          "cljs$core$IAssociative$_contains_key_QMARK_$arity$2": function () {},
          "cljs$core$ISeqable$_seq$arity$1": function () {},
          "cljs$core$IWithMeta$_with_meta$arity$2": function () {},
          "cljs$core$ICollection$_conj$arity$2": function () {},
          "call": {
            "cljs$core$IFn$_invoke$arity$2": function () {},
            "cljs$core$IFn$_invoke$arity$3": function () {}
          },
          "apply": function () {},
          "cljs$core$IFn$_invoke$arity$1": function () {},
          "cljs$core$IFn$_invoke$arity$2": function () {},
          "cljs$core$IPrintWithWriter$": {},
          "cljs$core$IPrintWithWriter$_pr_writer$arity$3": function () {}
        },
        "__hash": {},
        "cljs$lang$protocol_mask$partition0$": {},
        "cljs$lang$protocol_mask$partition1$": {},
        "toString": function () {},
        "equiv": function () {},
        "keys": function () {},
        "entries": function () {},
        "values": function () {},
        "has": function () {},
        "forEach": function () {},
        "cljs$core$ILookup$_lookup$arity$2": function () {},
        "cljs$core$ILookup$_lookup$arity$3": function () {},
        "cljs$core$IIterable$": {},
        "cljs$core$IIterable$_iterator$arity$1": function () {},
        "cljs$core$IMeta$_meta$arity$1": function () {},
        "cljs$core$ICloneable$_clone$arity$1": function () {},
        "cljs$core$ICounted$_count$arity$1": function () {},
        "cljs$core$IHash$_hash$arity$1": function () {},
        "cljs$core$IEquiv$_equiv$arity$2": function () {},
        "cljs$core$IEditableCollection$_as_transient$arity$1": function () {},
        "cljs$core$IEmptyableCollection$_empty$arity$1": function () {},
        "cljs$core$ISet$_disjoin$arity$2": function () {},
        "cljs$core$ISeqable$_seq$arity$1": function () {},
        "cljs$core$IWithMeta$_with_meta$arity$2": function () {},
        "cljs$core$ICollection$_conj$arity$2": function () {},
        "call": {
          "cljs$core$IFn$_invoke$arity$2": function () {},
          "cljs$core$IFn$_invoke$arity$3": function () {}
        },
        "apply": function () {},
        "cljs$core$IFn$_invoke$arity$1": function () {},
        "cljs$core$IFn$_invoke$arity$2": function () {},
        "cljs$core$IPrintWithWriter$": {},
        "cljs$core$IPrintWithWriter$_pr_writer$arity$3": function () {}
      },
      "fromArray": function () {}
    },
    "__GT_PersistentHashSet": function () {},
    "TransientHashSet": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {}
    },
    "__GT_TransientHashSet": function () {},
    "PersistentTreeSet": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {},
      "EMPTY": {
        "meta": {},
        "tree_map": {
          "comp": function () {},
          "tree": {},
          "cnt": {},
          "meta": {},
          "__hash": {},
          "cljs$lang$protocol_mask$partition0$": {},
          "cljs$lang$protocol_mask$partition1$": {},
          "forEach": function () {},
          "get": function () {},
          "entries": function () {},
          "toString": function () {},
          "keys": function () {},
          "values": function () {},
          "equiv": function () {},
          "entry_at": function () {},
          "has": function () {},
          "cljs$core$ILookup$_lookup$arity$2": function () {},
          "cljs$core$ILookup$_lookup$arity$3": function () {},
          "cljs$core$IKVReduce$_kv_reduce$arity$3": function () {},
          "cljs$core$IMeta$_meta$arity$1": function () {},
          "cljs$core$ICloneable$_clone$arity$1": function () {},
          "cljs$core$ICounted$_count$arity$1": function () {},
          "cljs$core$IReversible$_rseq$arity$1": function () {},
          "cljs$core$IHash$_hash$arity$1": function () {},
          "cljs$core$IEquiv$_equiv$arity$2": function () {},
          "cljs$core$IEmptyableCollection$_empty$arity$1": function () {},
          "cljs$core$IMap$_dissoc$arity$2": function () {},
          "cljs$core$IAssociative$_assoc$arity$3": function () {},
          "cljs$core$IAssociative$_contains_key_QMARK_$arity$2": function () {},
          "cljs$core$ISeqable$_seq$arity$1": function () {},
          "cljs$core$IWithMeta$_with_meta$arity$2": function () {},
          "cljs$core$ICollection$_conj$arity$2": function () {},
          "call": {
            "cljs$core$IFn$_invoke$arity$2": function () {},
            "cljs$core$IFn$_invoke$arity$3": function () {}
          },
          "apply": function () {},
          "cljs$core$IFn$_invoke$arity$1": function () {},
          "cljs$core$IFn$_invoke$arity$2": function () {},
          "cljs$core$ISorted$_sorted_seq$arity$2": function () {},
          "cljs$core$ISorted$_sorted_seq_from$arity$3": function () {},
          "cljs$core$ISorted$_entry_key$arity$2": function () {},
          "cljs$core$ISorted$_comparator$arity$1": function () {},
          "cljs$core$IPrintWithWriter$": {},
          "cljs$core$IPrintWithWriter$_pr_writer$arity$3": function () {}
        },
        "__hash": {},
        "cljs$lang$protocol_mask$partition0$": {},
        "cljs$lang$protocol_mask$partition1$": {},
        "toString": function () {},
        "equiv": function () {},
        "keys": function () {},
        "entries": function () {},
        "values": function () {},
        "has": function () {},
        "forEach": function () {},
        "cljs$core$ILookup$_lookup$arity$2": function () {},
        "cljs$core$ILookup$_lookup$arity$3": function () {},
        "cljs$core$IMeta$_meta$arity$1": function () {},
        "cljs$core$ICloneable$_clone$arity$1": function () {},
        "cljs$core$ICounted$_count$arity$1": function () {},
        "cljs$core$IReversible$_rseq$arity$1": function () {},
        "cljs$core$IHash$_hash$arity$1": function () {},
        "cljs$core$IEquiv$_equiv$arity$2": function () {},
        "cljs$core$IEmptyableCollection$_empty$arity$1": function () {},
        "cljs$core$ISet$_disjoin$arity$2": function () {},
        "cljs$core$ISeqable$_seq$arity$1": function () {},
        "cljs$core$IWithMeta$_with_meta$arity$2": function () {},
        "cljs$core$ICollection$_conj$arity$2": function () {},
        "call": {
          "cljs$core$IFn$_invoke$arity$2": function () {},
          "cljs$core$IFn$_invoke$arity$3": function () {}
        },
        "apply": function () {},
        "cljs$core$IFn$_invoke$arity$1": function () {},
        "cljs$core$IFn$_invoke$arity$2": function () {},
        "cljs$core$ISorted$_sorted_seq$arity$2": function () {},
        "cljs$core$ISorted$_sorted_seq_from$arity$3": function () {},
        "cljs$core$ISorted$_entry_key$arity$2": function () {},
        "cljs$core$ISorted$_comparator$arity$1": function () {},
        "cljs$core$IPrintWithWriter$": {},
        "cljs$core$IPrintWithWriter$_pr_writer$arity$3": function () {}
      }
    },
    "__GT_PersistentTreeSet": function () {},
    "set_from_indexed_seq": function () {},
    "set": function () {},
    "hash_set": {
      "cljs$core$IFn$_invoke$arity$0": function () {},
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$applyTo": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "sorted_set": {
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$maxFixedArity": {},
      "cljs$lang$applyTo": function () {}
    },
    "sorted_set_by": {
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$maxFixedArity": {},
      "cljs$lang$applyTo": function () {}
    },
    "replace": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "distinct": {
      "cljs$core$IFn$_invoke$arity$0": function () {},
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "butlast": function () {},
    "name": function () {},
    "zipmap": function () {},
    "max_key": {
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$3": function () {},
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$applyTo": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "min_key": {
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$3": function () {},
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$applyTo": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "ArrayList": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {}
    },
    "__GT_ArrayList": function () {},
    "array_list": function () {},
    "partition_all": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$3": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "take_while": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "mk_bound_fn": function () {},
    "subseq": {
      "cljs$core$IFn$_invoke$arity$3": function () {},
      "cljs$core$IFn$_invoke$arity$5": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "rsubseq": {
      "cljs$core$IFn$_invoke$arity$3": function () {},
      "cljs$core$IFn$_invoke$arity$5": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "RangeIterator": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {}
    },
    "__GT_RangeIterator": function () {},
    "Range": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {}
    },
    "__GT_Range": function () {},
    "range": {
      "cljs$core$IFn$_invoke$arity$0": function () {},
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$3": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "take_nth": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "split_with": function () {},
    "partition_by": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "frequencies": function () {},
    "reductions": {
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$3": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "juxt": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$3": function () {},
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$applyTo": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "dorun": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "doall": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "regexp_QMARK_": function () {},
    "re_matches": function () {},
    "re_find": function () {},
    "re_seq": function () {},
    "re_pattern": function () {},
    "pr_sequential_writer": function () {},
    "write_all": {
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$maxFixedArity": {},
      "cljs$lang$applyTo": function () {}
    },
    "string_print": function () {},
    "flush": function () {},
    "char_escapes": {
      "\"": {},
      "\\": {},
      "\b": {},
      "\f": {},
      "\n": {},
      "\r": {},
      "\t": {}
    },
    "quote_string": function () {},
    "print_meta_QMARK_": function () {},
    "pr_writer_impl": function () {},
    "pr_writer": function () {},
    "pr_seq_writer": function () {},
    "pr_sb_with_opts": function () {},
    "pr_str_with_opts": function () {},
    "prn_str_with_opts": function () {},
    "pr_with_opts": function () {},
    "newline": {
      "cljs$core$IFn$_invoke$arity$0": function () {},
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "pr_str": {
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$maxFixedArity": {},
      "cljs$lang$applyTo": function () {}
    },
    "prn_str": {
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$maxFixedArity": {},
      "cljs$lang$applyTo": function () {}
    },
    "pr": {
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$maxFixedArity": {},
      "cljs$lang$applyTo": function () {}
    },
    "print": {
      "cljs$lang$maxFixedArity": {},
      "cljs$lang$applyTo": function () {},
      "cljs$core$IFn$_invoke$arity$variadic": function () {}
    },
    "print_str": {
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$maxFixedArity": {},
      "cljs$lang$applyTo": function () {}
    },
    "println": {
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$maxFixedArity": {},
      "cljs$lang$applyTo": function () {}
    },
    "println_str": {
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$maxFixedArity": {},
      "cljs$lang$applyTo": function () {}
    },
    "prn": {
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$maxFixedArity": {},
      "cljs$lang$applyTo": function () {}
    },
    "print_map": function () {},
    "alter_meta_BANG_": {
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$maxFixedArity": {},
      "cljs$lang$applyTo": function () {}
    },
    "reset_meta_BANG_": function () {},
    "add_watch": function () {},
    "remove_watch": function () {},
    "gensym_counter": {},
    "gensym": {
      "cljs$core$IFn$_invoke$arity$0": function () {},
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "fixture1": {},
    "fixture2": {},
    "Delay": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {}
    },
    "__GT_Delay": function () {},
    "delay_QMARK_": function () {},
    "force": function () {},
    "realized_QMARK_": function () {},
    "preserving_reduced": function () {},
    "cat": function () {},
    "dedupe": {
      "cljs$core$IFn$_invoke$arity$0": function () {},
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "random_sample": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "Eduction": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {}
    },
    "__GT_Eduction": function () {},
    "eduction": {
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$maxFixedArity": {},
      "cljs$lang$applyTo": function () {}
    },
    "run_BANG_": function () {},
    "IEncodeJS": function () {},
    "_clj__GT_js": function () {},
    "_key__GT_js": function () {},
    "key__GT_js": function () {},
    "clj__GT_js": function () {},
    "IEncodeClojure": function () {},
    "_js__GT_clj": function () {},
    "js__GT_clj": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$applyTo": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "memoize": function () {},
    "trampoline": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$applyTo": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "rand": {
      "cljs$core$IFn$_invoke$arity$0": function () {},
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "rand_int": function () {},
    "rand_nth": function () {},
    "group_by": function () {},
    "make_hierarchy": function () {},
    "_global_hierarchy": {},
    "get_global_hierarchy": function () {},
    "swap_global_hierarchy_BANG_": {
      "cljs$core$IFn$_invoke$arity$variadic": function () {},
      "cljs$lang$maxFixedArity": {},
      "cljs$lang$applyTo": function () {}
    },
    "isa_QMARK_": {
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$3": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "parents": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "ancestors": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "descendants": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "derive": {
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$3": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "underive": {
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$3": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "reset_cache": function () {},
    "prefers_STAR_": function () {},
    "dominates": function () {},
    "find_and_cache_best_method": function () {},
    "IMultiFn": function () {},
    "_reset": function () {},
    "_add_method": function () {},
    "_remove_method": function () {},
    "_prefer_method": function () {},
    "_get_method": function () {},
    "_methods": function () {},
    "_prefers": function () {},
    "_default_dispatch_val": function () {},
    "_dispatch_fn": function () {},
    "throw_no_method_error": function () {},
    "MultiFn": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {}
    },
    "__GT_MultiFn": function () {},
    "remove_all_methods": function () {},
    "remove_method": function () {},
    "prefer_method": function () {},
    "methods$": function () {},
    "get_method": function () {},
    "prefers": function () {},
    "default_dispatch_val": function () {},
    "dispatch_fn": function () {},
    "IUUID": function () {},
    "UUID": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {}
    },
    "__GT_UUID": function () {},
    "uuid": function () {},
    "random_uuid": function () {},
    "uuid_QMARK_": function () {},
    "pr_writer_ex_info": function () {},
    "ExceptionInfo": function () {},
    "ex_info": {
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$core$IFn$_invoke$arity$3": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "ex_data": function () {},
    "ex_message": function () {},
    "ex_cause": function () {},
    "comparator": function () {},
    "special_symbol_QMARK_": function () {},
    "test": function () {},
    "TaggedLiteral": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {}
    },
    "__GT_TaggedLiteral": function () {},
    "tagged_literal_QMARK_": function () {},
    "tagged_literal": function () {},
    "js_reserved_arr": {},
    "js_reserved": {},
    "js_reserved_QMARK_": function () {},
    "demunge_pattern": function () {},
    "munge_str": function () {},
    "munge": function () {},
    "demunge_str": function () {},
    "demunge": function () {},
    "ns_lookup": function () {},
    "Namespace": {
      "getBasis": function () {},
      "cljs$lang$type": {},
      "cljs$lang$ctorStr": {},
      "cljs$lang$ctorPrWriter": function () {}
    },
    "__GT_Namespace": function () {},
    "NS_CACHE": {},
    "find_ns_obj_STAR_": function () {},
    "find_ns_obj": function () {},
    "ns_interns_STAR_": function () {},
    "create_ns": {
      "cljs$core$IFn$_invoke$arity$1": function () {},
      "cljs$core$IFn$_invoke$arity$2": function () {},
      "cljs$lang$maxFixedArity": {}
    },
    "find_ns": function () {},
    "find_macros_ns": function () {},
    "ns_name": function () {}
  }
};
cljs.core.StringBufferWriter.prototype = {
  "cljs$core$IWriter$_write$arity$2": function () {},
  "cljs$core$IWriter$_flush$arity$1": function () {}
};
cljs.core.Symbol.prototype = {
  "toString": function () {},
  "equiv": function () {},
  "cljs$core$IEquiv$_equiv$arity$2": function () {},
  "call": function () {},
  "apply": function () {},
  "cljs$core$IFn$_invoke$arity$1": function () {},
  "cljs$core$IFn$_invoke$arity$2": function () {},
  "cljs$core$IMeta$_meta$arity$1": function () {},
  "cljs$core$IWithMeta$_with_meta$arity$2": function () {},
  "cljs$core$IHash$_hash$arity$1": function () {},
  "cljs$core$INamed$_name$arity$1": function () {},
  "cljs$core$INamed$_namespace$arity$1": function () {},
  "cljs$core$IPrintWithWriter$_pr_writer$arity$3": function () {},
  "cljs$core$IComparable$": function () {},
  "cljs$core$IComparable$_compare$arity$2": function () {}
};
cljs.core.Var.prototype = {
  "isMacro": function () {},
  "toString": function () {},
  "cljs$core$IDeref$_deref$arity$1": function () {},
  "cljs$core$IMeta$_meta$arity$1": function () {},
  "cljs$core$IWithMeta$_with_meta$arity$2": function () {},
  "cljs$core$IEquiv$_equiv$arity$2": function () {},
  "cljs$core$IHash$_hash$arity$1": function () {},
  "cljs$core$Fn$": function () {},
  "call": function () {},
  "apply": function () {},
  "cljs$core$IFn$_invoke$arity$0": function () {},
  "cljs$core$IFn$_invoke$arity$1": function () {},
  "cljs$core$IFn$_invoke$arity$2": function () {},
  "cljs$core$IFn$_invoke$arity$3": function () {},
  "cljs$core$IFn$_invoke$arity$4": function () {},
  "cljs$core$IFn$_invoke$arity$5": function () {},
  "cljs$core$IFn$_invoke$arity$6": function () {},
  "cljs$core$IFn$_invoke$arity$7": function () {},
  "cljs$core$IFn$_invoke$arity$8": function () {},
  "cljs$core$IFn$_invoke$arity$9": function () {},
  "cljs$core$IFn$_invoke$arity$10": function () {},
  "cljs$core$IFn$_invoke$arity$11": function () {},
  "cljs$core$IFn$_invoke$arity$12": function () {},
  "cljs$core$IFn$_invoke$arity$13": function () {},
  "cljs$core$IFn$_invoke$arity$14": function () {},
  "cljs$core$IFn$_invoke$arity$15": function () {},
  "cljs$core$IFn$_invoke$arity$16": function () {},
  "cljs$core$IFn$_invoke$arity$17": function () {},
  "cljs$core$IFn$_invoke$arity$18": function () {},
  "cljs$core$IFn$_invoke$arity$19": function () {},
  "cljs$core$IFn$_invoke$arity$20": function () {},
  "cljs$core$IFn$_invoke$arity$21": function () {},
  "cljs$core$IPrintWithWriter$": function () {},
  "cljs$core$IPrintWithWriter$_pr_writer$arity$3": function () {}
};
cljs.core.ES6Iterator.prototype = {
  "next": function () {}
};
cljs.core.ES6IteratorSeq.prototype = {
  "cljs$core$ISeqable$_seq$arity$1": function () {},
  "cljs$core$ISeq$_first$arity$1": function () {},
  "cljs$core$ISeq$_rest$arity$1": function () {},
  "cljs$core$IPrintWithWriter$": function () {},
  "cljs$core$IPrintWithWriter$_pr_writer$arity$3": function () {}
};
cljs.core.Reduced.prototype = {
  "cljs$core$IDeref$_deref$arity$1": function () {}
};
cljs.core.IndexedSeqIterator.prototype = {
  "hasNext": function () {},
  "next": function () {}
};
cljs.core.IndexedSeq.prototype = {
  "toString": function () {},
  "equiv": function () {},
  "indexOf": function () {},
  "lastIndexOf": function () {},
  "cljs$core$IIndexed$_nth$arity$2": function () {},
  "cljs$core$IIndexed$_nth$arity$3": function () {},
  "cljs$core$IIterable$": function () {},
  "cljs$core$IIterable$_iterator$arity$1": function () {},
  "cljs$core$IMeta$_meta$arity$1": function () {},
  "cljs$core$ICloneable$_clone$arity$1": function () {},
  "cljs$core$INext$_next$arity$1": function () {},
  "cljs$core$ICounted$_count$arity$1": function () {},
  "cljs$core$IReversible$_rseq$arity$1": function () {},
  "cljs$core$IHash$_hash$arity$1": function () {},
  "cljs$core$IEquiv$_equiv$arity$2": function () {},
  "cljs$core$IEmptyableCollection$_empty$arity$1": function () {},
  "cljs$core$IReduce$_reduce$arity$2": function () {},
  "cljs$core$IReduce$_reduce$arity$3": function () {},
  "cljs$core$ISeq$_first$arity$1": function () {},
  "cljs$core$ISeq$_rest$arity$1": function () {},
  "cljs$core$ISeqable$_seq$arity$1": function () {},
  "cljs$core$IWithMeta$_with_meta$arity$2": function () {},
  "cljs$core$ICollection$_conj$arity$2": function () {},
  "cljs$core$IPrintWithWriter$": function () {},
  "cljs$core$IPrintWithWriter$_pr_writer$arity$3": function () {}
};
cljs.core.RSeq.prototype = {
  "toString": function () {},
  "equiv": function () {},
  "indexOf": function () {},
  "lastIndexOf": function () {},
  "cljs$core$IMeta$_meta$arity$1": function () {},
  "cljs$core$ICloneable$_clone$arity$1": function () {},
  "cljs$core$INext$_next$arity$1": function () {},
  "cljs$core$ICounted$_count$arity$1": function () {},
  "cljs$core$IHash$_hash$arity$1": function () {},
  "cljs$core$IEquiv$_equiv$arity$2": function () {},
  "cljs$core$IEmptyableCollection$_empty$arity$1": function () {},
  "cljs$core$IReduce$_reduce$arity$2": function () {},
  "cljs$core$IReduce$_reduce$arity$3": function () {},
  "cljs$core$ISeq$_first$arity$1": function () {},
  "cljs$core$ISeq$_rest$arity$1": function () {},
  "cljs$core$ISeqable$_seq$arity$1": function () {},
  "cljs$core$IWithMeta$_with_meta$arity$2": function () {},
  "cljs$core$ICollection$_conj$arity$2": function () {},
  "cljs$core$IPrintWithWriter$": function () {},
  "cljs$core$IPrintWithWriter$_pr_writer$arity$3": function () {}
};
cljs.core.MetaFn.prototype = {
  "cljs$core$IMeta$_meta$arity$1": function () {},
  "cljs$core$IWithMeta$_with_meta$arity$2": function () {},
  "cljs$core$Fn$": function () {},
  "call": function () {},
  "apply": function () {},
  "cljs$core$IFn$_invoke$arity$0": function () {},
  "cljs$core$IFn$_invoke$arity$1": function () {},
  "cljs$core$IFn$_invoke$arity$2": function () {},
  "cljs$core$IFn$_invoke$arity$3": function () {},
  "cljs$core$IFn$_invoke$arity$4": function () {},
  "cljs$core$IFn$_invoke$arity$5": function () {},
  "cljs$core$IFn$_invoke$arity$6": function () {},
  "cljs$core$IFn$_invoke$arity$7": function () {},
  "cljs$core$IFn$_invoke$arity$8": function () {},
  "cljs$core$IFn$_invoke$arity$9": function () {},
  "cljs$core$IFn$_invoke$arity$10": function () {},
  "cljs$core$IFn$_invoke$arity$11": function () {},
  "cljs$core$IFn$_invoke$arity$12": function () {},
  "cljs$core$IFn$_invoke$arity$13": function () {},
  "cljs$core$IFn$_invoke$arity$14": function () {},
  "cljs$core$IFn$_invoke$arity$15": function () {},
  "cljs$core$IFn$_invoke$arity$16": function () {},
  "cljs$core$IFn$_invoke$arity$17": function () {},
  "cljs$core$IFn$_invoke$arity$18": function () {},
  "cljs$core$IFn$_invoke$arity$19": function () {},
  "cljs$core$IFn$_invoke$arity$20": function () {},
  "cljs$core$IFn$_invoke$arity$21": function () {}
};
cljs.core.List.prototype = {
  "toString": function () {},
  "equiv": function () {},
  "indexOf": function () {},
  "lastIndexOf": function () {},
  "cljs$core$IMeta$_meta$arity$1": function () {},
  "cljs$core$ICloneable$_clone$arity$1": function () {},
  "cljs$core$INext$_next$arity$1": function () {},
  "cljs$core$ICounted$_count$arity$1": function () {},
  "cljs$core$IStack$_peek$arity$1": function () {},
  "cljs$core$IStack$_pop$arity$1": function () {},
  "cljs$core$IHash$_hash$arity$1": function () {},
  "cljs$core$IEquiv$_equiv$arity$2": function () {},
  "cljs$core$IEmptyableCollection$_empty$arity$1": function () {},
  "cljs$core$IReduce$_reduce$arity$2": function () {},
  "cljs$core$IReduce$_reduce$arity$3": function () {},
  "cljs$core$ISeq$_first$arity$1": function () {},
  "cljs$core$ISeq$_rest$arity$1": function () {},
  "cljs$core$ISeqable$_seq$arity$1": function () {},
  "cljs$core$IWithMeta$_with_meta$arity$2": function () {},
  "cljs$core$ICollection$_conj$arity$2": function () {},
  "cljs$core$IPrintWithWriter$": function () {},
  "cljs$core$IPrintWithWriter$_pr_writer$arity$3": function () {}
};
cljs.core.EmptyList.prototype = {
  "toString": function () {},
  "equiv": function () {},
  "indexOf": function () {},
  "lastIndexOf": function () {},
  "cljs$core$IMeta$_meta$arity$1": function () {},
  "cljs$core$ICloneable$_clone$arity$1": function () {},
  "cljs$core$INext$_next$arity$1": function () {},
  "cljs$core$ICounted$_count$arity$1": function () {},
  "cljs$core$IStack$_peek$arity$1": function () {},
  "cljs$core$IStack$_pop$arity$1": function () {},
  "cljs$core$IHash$_hash$arity$1": function () {},
  "cljs$core$IEquiv$_equiv$arity$2": function () {},
  "cljs$core$IEmptyableCollection$_empty$arity$1": function () {},
  "cljs$core$IReduce$_reduce$arity$2": function () {},
  "cljs$core$IReduce$_reduce$arity$3": function () {},
  "cljs$core$ISeq$_first$arity$1": function () {},
  "cljs$core$ISeq$_rest$arity$1": function () {},
  "cljs$core$ISeqable$_seq$arity$1": function () {},
  "cljs$core$IWithMeta$_with_meta$arity$2": function () {},
  "cljs$core$ICollection$_conj$arity$2": function () {},
  "cljs$core$IPrintWithWriter$": function () {},
  "cljs$core$IPrintWithWriter$_pr_writer$arity$3": function () {}
};
cljs.core.Cons.prototype = {
  "toString": function () {},
  "equiv": function () {},
  "indexOf": function () {},
  "lastIndexOf": function () {},
  "cljs$core$IMeta$_meta$arity$1": function () {},
  "cljs$core$ICloneable$_clone$arity$1": function () {},
  "cljs$core$INext$_next$arity$1": function () {},
  "cljs$core$IHash$_hash$arity$1": function () {},
  "cljs$core$IEquiv$_equiv$arity$2": function () {},
  "cljs$core$IEmptyableCollection$_empty$arity$1": function () {},
  "cljs$core$IReduce$_reduce$arity$2": function () {},
  "cljs$core$IReduce$_reduce$arity$3": function () {},
  "cljs$core$ISeq$_first$arity$1": function () {},
  "cljs$core$ISeq$_rest$arity$1": function () {},
  "cljs$core$ISeqable$_seq$arity$1": function () {},
  "cljs$core$IWithMeta$_with_meta$arity$2": function () {},
  "cljs$core$ICollection$_conj$arity$2": function () {},
  "cljs$core$IPrintWithWriter$": function () {},
  "cljs$core$IPrintWithWriter$_pr_writer$arity$3": function () {}
};
cljs.core.Keyword.prototype = {
  "toString": function () {},
  "equiv": function () {},
  "cljs$core$IEquiv$_equiv$arity$2": function () {},
  "call": function () {},
  "apply": function () {},
  "cljs$core$IFn$_invoke$arity$1": function () {},
  "cljs$core$IFn$_invoke$arity$2": function () {},
  "cljs$core$IHash$_hash$arity$1": function () {},
  "cljs$core$INamed$_name$arity$1": function () {},
  "cljs$core$INamed$_namespace$arity$1": function () {},
  "cljs$core$IPrintWithWriter$_pr_writer$arity$3": function () {},
  "cljs$core$IComparable$": function () {},
  "cljs$core$IComparable$_compare$arity$2": function () {}
};
cljs.core.LazySeq.prototype = {
  "toString": function () {},
  "equiv": function () {},
  "sval": function () {},
  "indexOf": function () {},
  "lastIndexOf": function () {},
  "cljs$core$IMeta$_meta$arity$1": function () {},
  "cljs$core$INext$_next$arity$1": function () {},
  "cljs$core$IHash$_hash$arity$1": function () {},
  "cljs$core$IEquiv$_equiv$arity$2": function () {},
  "cljs$core$IEmptyableCollection$_empty$arity$1": function () {},
  "cljs$core$IPending$_realized_QMARK_$arity$1": function () {},
  "cljs$core$IReduce$_reduce$arity$2": function () {},
  "cljs$core$IReduce$_reduce$arity$3": function () {},
  "cljs$core$ISeq$_first$arity$1": function () {},
  "cljs$core$ISeq$_rest$arity$1": function () {},
  "cljs$core$ISeqable$_seq$arity$1": function () {},
  "cljs$core$IWithMeta$_with_meta$arity$2": function () {},
  "cljs$core$ICollection$_conj$arity$2": function () {},
  "cljs$core$IPrintWithWriter$": function () {},
  "cljs$core$IPrintWithWriter$_pr_writer$arity$3": function () {}
};
cljs.core.ChunkBuffer.prototype = {
  "add": function () {},
  "chunk": function () {},
  "cljs$core$ICounted$_count$arity$1": function () {}
};
cljs.core.ArrayChunk.prototype = {
  "cljs$core$ICounted$_count$arity$1": function () {},
  "cljs$core$IIndexed$_nth$arity$2": function () {},
  "cljs$core$IIndexed$_nth$arity$3": function () {},
  "cljs$core$IChunk$": function () {},
  "cljs$core$IChunk$_drop_first$arity$1": function () {},
  "cljs$core$IReduce$_reduce$arity$2": function () {},
  "cljs$core$IReduce$_reduce$arity$3": function () {}
};
cljs.core.ChunkedCons.prototype = {
  "toString": function () {},
  "equiv": function () {},
  "indexOf": function () {},
  "lastIndexOf": function () {},
  "cljs$core$IMeta$_meta$arity$1": function () {},
  "cljs$core$INext$_next$arity$1": function () {},
  "cljs$core$IHash$_hash$arity$1": function () {},
  "cljs$core$IEquiv$_equiv$arity$2": function () {},
  "cljs$core$IEmptyableCollection$_empty$arity$1": function () {},
  "cljs$core$ISeq$_first$arity$1": function () {},
  "cljs$core$ISeq$_rest$arity$1": function () {},
  "cljs$core$ISeqable$_seq$arity$1": function () {},
  "cljs$core$IChunkedSeq$_chunked_first$arity$1": function () {},
  "cljs$core$IChunkedSeq$_chunked_rest$arity$1": function () {},
  "cljs$core$IWithMeta$_with_meta$arity$2": function () {},
  "cljs$core$ICollection$_conj$arity$2": function () {},
  "cljs$core$IChunkedNext$_chunked_next$arity$1": function () {},
  "cljs$core$IPrintWithWriter$": function () {},
  "cljs$core$IPrintWithWriter$_pr_writer$arity$3": function () {}
};
cljs.core.StringIter.prototype = {
  "hasNext": function () {},
  "next": function () {},
  "remove": function () {}
};
cljs.core.ArrayIter.prototype = {
  "hasNext": function () {},
  "next": function () {},
  "remove": function () {}
};
cljs.core.SeqIter.prototype = {
  "hasNext": function () {},
  "next": function () {},
  "remove": function () {}
};
cljs.core.Stepper.prototype = {
  "step": function () {}
};
cljs.core.MultiStepper.prototype = {
  "hasNext": function () {},
  "next": function () {},
  "step": function () {}
};
cljs.core.LazyTransformer.prototype = {
  "indexOf": function () {},
  "lastIndexOf": function () {},
  "cljs$core$IMeta$_meta$arity$1": function () {},
  "cljs$core$INext$_next$arity$1": function () {},
  "cljs$core$IHash$_hash$arity$1": function () {},
  "cljs$core$IEquiv$_equiv$arity$2": function () {},
  "cljs$core$IEmptyableCollection$_empty$arity$1": function () {},
  "cljs$core$ISeq$_first$arity$1": function () {},
  "cljs$core$ISeq$_rest$arity$1": function () {},
  "cljs$core$ISeqable$_seq$arity$1": function () {},
  "cljs$core$IWithMeta$_with_meta$arity$2": function () {},
  "cljs$core$ICollection$_conj$arity$2": function () {},
  "cljs$core$IPrintWithWriter$": function () {},
  "cljs$core$IPrintWithWriter$_pr_writer$arity$3": function () {}
};
cljs.core.Atom.prototype = {
  "equiv": function () {},
  "cljs$core$IEquiv$_equiv$arity$2": function () {},
  "cljs$core$IDeref$_deref$arity$1": function () {},
  "cljs$core$IMeta$_meta$arity$1": function () {},
  "cljs$core$IWatchable$_notify_watches$arity$3": function () {},
  "cljs$core$IWatchable$_add_watch$arity$3": function () {},
  "cljs$core$IWatchable$_remove_watch$arity$2": function () {},
  "cljs$core$IHash$_hash$arity$1": function () {},
  "cljs$core$IPrintWithWriter$": function () {},
  "cljs$core$IPrintWithWriter$_pr_writer$arity$3": function () {}
};
cljs.core.Volatile.prototype = {
  "cljs$core$IVolatile$": function () {},
  "cljs$core$IVolatile$_vreset_BANG_$arity$2": function () {},
  "cljs$core$IDeref$_deref$arity$1": function () {},
  "cljs$core$IPrintWithWriter$": function () {},
  "cljs$core$IPrintWithWriter$_pr_writer$arity$3": function () {}
};
cljs.core.RangedIterator.prototype = {
  "hasNext": function () {},
  "next": function () {}
};
cljs.core.PersistentVector.prototype = {
  "toString": function () {},
  "equiv": function () {},
  "indexOf": function () {},
  "lastIndexOf": function () {},
  "cljs$core$ILookup$_lookup$arity$2": function () {},
  "cljs$core$ILookup$_lookup$arity$3": function () {},
  "cljs$core$IKVReduce$_kv_reduce$arity$3": function () {},
  "cljs$core$IIndexed$_nth$arity$2": function () {},
  "cljs$core$IIndexed$_nth$arity$3": function () {},
  "cljs$core$IVector$_assoc_n$arity$3": function () {},
  "cljs$core$IIterable$": function () {},
  "cljs$core$IIterable$_iterator$arity$1": function () {},
  "cljs$core$IMeta$_meta$arity$1": function () {},
  "cljs$core$ICloneable$_clone$arity$1": function () {},
  "cljs$core$ICounted$_count$arity$1": function () {},
  "cljs$core$IMapEntry$_key$arity$1": function () {},
  "cljs$core$IMapEntry$_val$arity$1": function () {},
  "cljs$core$IStack$_peek$arity$1": function () {},
  "cljs$core$IStack$_pop$arity$1": function () {},
  "cljs$core$IReversible$_rseq$arity$1": function () {},
  "cljs$core$IHash$_hash$arity$1": function () {},
  "cljs$core$IEquiv$_equiv$arity$2": function () {},
  "cljs$core$IEditableCollection$_as_transient$arity$1": function () {},
  "cljs$core$IEmptyableCollection$_empty$arity$1": function () {},
  "cljs$core$IReduce$_reduce$arity$2": function () {},
  "cljs$core$IReduce$_reduce$arity$3": function () {},
  "cljs$core$IAssociative$_assoc$arity$3": function () {},
  "cljs$core$ISeqable$_seq$arity$1": function () {},
  "cljs$core$IWithMeta$_with_meta$arity$2": function () {},
  "cljs$core$ICollection$_conj$arity$2": function () {},
  "call": function () {},
  "apply": function () {},
  "cljs$core$IFn$_invoke$arity$1": function () {},
  "cljs$core$IFn$_invoke$arity$2": function () {},
  "cljs$core$IPrintWithWriter$": function () {},
  "cljs$core$IPrintWithWriter$_pr_writer$arity$3": function () {},
  "cljs$core$IComparable$": function () {},
  "cljs$core$IComparable$_compare$arity$2": function () {}
};
cljs.core.ChunkedSeq.prototype = {
  "toString": function () {},
  "equiv": function () {},
  "indexOf": function () {},
  "lastIndexOf": function () {},
  "cljs$core$IMeta$_meta$arity$1": function () {},
  "cljs$core$INext$_next$arity$1": function () {},
  "cljs$core$IHash$_hash$arity$1": function () {},
  "cljs$core$IEquiv$_equiv$arity$2": function () {},
  "cljs$core$IEmptyableCollection$_empty$arity$1": function () {},
  "cljs$core$IReduce$_reduce$arity$2": function () {},
  "cljs$core$IReduce$_reduce$arity$3": function () {},
  "cljs$core$ISeq$_first$arity$1": function () {},
  "cljs$core$ISeq$_rest$arity$1": function () {},
  "cljs$core$ISeqable$_seq$arity$1": function () {},
  "cljs$core$IChunkedSeq$_chunked_first$arity$1": function () {},
  "cljs$core$IChunkedSeq$_chunked_rest$arity$1": function () {},
  "cljs$core$IWithMeta$_with_meta$arity$2": function () {},
  "cljs$core$ICollection$_conj$arity$2": function () {},
  "cljs$core$IChunkedNext$_chunked_next$arity$1": function () {},
  "cljs$core$IPrintWithWriter$": function () {},
  "cljs$core$IPrintWithWriter$_pr_writer$arity$3": function () {}
};
cljs.core.Subvec.prototype = {
  "toString": function () {},
  "equiv": function () {},
  "indexOf": function () {},
  "lastIndexOf": function () {},
  "cljs$core$ILookup$_lookup$arity$2": function () {},
  "cljs$core$ILookup$_lookup$arity$3": function () {},
  "cljs$core$IKVReduce$_kv_reduce$arity$3": function () {},
  "cljs$core$IIndexed$_nth$arity$2": function () {},
  "cljs$core$IIndexed$_nth$arity$3": function () {},
  "cljs$core$IVector$_assoc_n$arity$3": function () {},
  "cljs$core$IMeta$_meta$arity$1": function () {},
  "cljs$core$ICloneable$_clone$arity$1": function () {},
  "cljs$core$ICounted$_count$arity$1": function () {},
  "cljs$core$IStack$_peek$arity$1": function () {},
  "cljs$core$IStack$_pop$arity$1": function () {},
  "cljs$core$IReversible$_rseq$arity$1": function () {},
  "cljs$core$IHash$_hash$arity$1": function () {},
  "cljs$core$IEquiv$_equiv$arity$2": function () {},
  "cljs$core$IEmptyableCollection$_empty$arity$1": function () {},
  "cljs$core$IReduce$_reduce$arity$2": function () {},
  "cljs$core$IReduce$_reduce$arity$3": function () {},
  "cljs$core$IAssociative$_assoc$arity$3": function () {},
  "cljs$core$ISeqable$_seq$arity$1": function () {},
  "cljs$core$IWithMeta$_with_meta$arity$2": function () {},
  "cljs$core$ICollection$_conj$arity$2": function () {},
  "call": function () {},
  "apply": function () {},
  "cljs$core$IFn$_invoke$arity$1": function () {},
  "cljs$core$IFn$_invoke$arity$2": function () {},
  "cljs$core$IPrintWithWriter$": function () {},
  "cljs$core$IPrintWithWriter$_pr_writer$arity$3": function () {},
  "cljs$core$IComparable$": function () {},
  "cljs$core$IComparable$_compare$arity$2": function () {}
};
cljs.core.TransientVector.prototype = {
  "cljs$core$ITransientCollection$_conj_BANG_$arity$2": function () {},
  "cljs$core$ITransientCollection$_persistent_BANG_$arity$1": function () {},
  "cljs$core$ITransientAssociative$_assoc_BANG_$arity$3": function () {},
  "cljs$core$ITransientVector$_assoc_n_BANG_$arity$3": function () {},
  "cljs$core$ITransientVector$_pop_BANG_$arity$1": function () {},
  "cljs$core$ICounted$_count$arity$1": function () {},
  "cljs$core$IIndexed$_nth$arity$2": function () {},
  "cljs$core$IIndexed$_nth$arity$3": function () {},
  "cljs$core$ILookup$_lookup$arity$2": function () {},
  "cljs$core$ILookup$_lookup$arity$3": function () {},
  "call": function () {},
  "apply": function () {},
  "cljs$core$IFn$_invoke$arity$1": function () {},
  "cljs$core$IFn$_invoke$arity$2": function () {}
};
cljs.core.PersistentQueueIter.prototype = {
  "hasNext": function () {},
  "next": function () {},
  "remove": function () {}
};
cljs.core.PersistentQueueSeq.prototype = {
  "toString": function () {},
  "equiv": function () {},
  "indexOf": function () {},
  "lastIndexOf": function () {},
  "cljs$core$IMeta$_meta$arity$1": function () {},
  "cljs$core$IHash$_hash$arity$1": function () {},
  "cljs$core$IEquiv$_equiv$arity$2": function () {},
  "cljs$core$IEmptyableCollection$_empty$arity$1": function () {},
  "cljs$core$ISeq$_first$arity$1": function () {},
  "cljs$core$ISeq$_rest$arity$1": function () {},
  "cljs$core$ISeqable$_seq$arity$1": function () {},
  "cljs$core$IWithMeta$_with_meta$arity$2": function () {},
  "cljs$core$ICollection$_conj$arity$2": function () {},
  "cljs$core$IPrintWithWriter$": function () {},
  "cljs$core$IPrintWithWriter$_pr_writer$arity$3": function () {}
};
cljs.core.PersistentQueue.prototype = {
  "toString": function () {},
  "equiv": function () {},
  "indexOf": function () {},
  "lastIndexOf": function () {},
  "cljs$core$IIterable$": function () {},
  "cljs$core$IIterable$_iterator$arity$1": function () {},
  "cljs$core$IMeta$_meta$arity$1": function () {},
  "cljs$core$ICloneable$_clone$arity$1": function () {},
  "cljs$core$ICounted$_count$arity$1": function () {},
  "cljs$core$IStack$_peek$arity$1": function () {},
  "cljs$core$IStack$_pop$arity$1": function () {},
  "cljs$core$IHash$_hash$arity$1": function () {},
  "cljs$core$IEquiv$_equiv$arity$2": function () {},
  "cljs$core$IEmptyableCollection$_empty$arity$1": function () {},
  "cljs$core$ISeq$_first$arity$1": function () {},
  "cljs$core$ISeq$_rest$arity$1": function () {},
  "cljs$core$ISeqable$_seq$arity$1": function () {},
  "cljs$core$IWithMeta$_with_meta$arity$2": function () {},
  "cljs$core$ICollection$_conj$arity$2": function () {},
  "cljs$core$IPrintWithWriter$": function () {},
  "cljs$core$IPrintWithWriter$_pr_writer$arity$3": function () {}
};
cljs.core.NeverEquiv.prototype = {
  "equiv": function () {},
  "cljs$core$IEquiv$_equiv$arity$2": function () {}
};
cljs.core.ObjMap.prototype = {
  "toString": function () {},
  "equiv": function () {},
  "cljs$core$ILookup$_lookup$arity$2": function () {},
  "cljs$core$ILookup$_lookup$arity$3": function () {},
  "cljs$core$IKVReduce$_kv_reduce$arity$3": function () {},
  "cljs$core$IMeta$_meta$arity$1": function () {},
  "cljs$core$ICounted$_count$arity$1": function () {},
  "cljs$core$IHash$_hash$arity$1": function () {},
  "cljs$core$IEquiv$_equiv$arity$2": function () {},
  "cljs$core$IEditableCollection$_as_transient$arity$1": function () {},
  "cljs$core$IEmptyableCollection$_empty$arity$1": function () {},
  "cljs$core$IMap$_dissoc$arity$2": function () {},
  "cljs$core$IAssociative$_assoc$arity$3": function () {},
  "cljs$core$IAssociative$_contains_key_QMARK_$arity$2": function () {},
  "cljs$core$ISeqable$_seq$arity$1": function () {},
  "cljs$core$IWithMeta$_with_meta$arity$2": function () {},
  "cljs$core$ICollection$_conj$arity$2": function () {},
  "call": function () {},
  "apply": function () {},
  "cljs$core$IFn$_invoke$arity$1": function () {},
  "cljs$core$IFn$_invoke$arity$2": function () {},
  "cljs$core$IPrintWithWriter$": function () {},
  "cljs$core$IPrintWithWriter$_pr_writer$arity$3": function () {}
};
cljs.core.RecordIter.prototype = {
  "hasNext": function () {},
  "next": function () {},
  "remove": function () {}
};
cljs.core.ES6EntriesIterator.prototype = {
  "next": function () {}
};
cljs.core.ES6SetEntriesIterator.prototype = {
  "next": function () {}
};
cljs.core.PersistentArrayMapSeq.prototype = {
  "toString": function () {},
  "equiv": function () {},
  "indexOf": function () {},
  "lastIndexOf": function () {},
  "cljs$core$IMeta$_meta$arity$1": function () {},
  "cljs$core$INext$_next$arity$1": function () {},
  "cljs$core$ICounted$_count$arity$1": function () {},
  "cljs$core$IHash$_hash$arity$1": function () {},
  "cljs$core$IEquiv$_equiv$arity$2": function () {},
  "cljs$core$IEmptyableCollection$_empty$arity$1": function () {},
  "cljs$core$IReduce$_reduce$arity$2": function () {},
  "cljs$core$IReduce$_reduce$arity$3": function () {},
  "cljs$core$ISeq$_first$arity$1": function () {},
  "cljs$core$ISeq$_rest$arity$1": function () {},
  "cljs$core$ISeqable$_seq$arity$1": function () {},
  "cljs$core$IWithMeta$_with_meta$arity$2": function () {},
  "cljs$core$ICollection$_conj$arity$2": function () {},
  "cljs$core$IPrintWithWriter$": function () {},
  "cljs$core$IPrintWithWriter$_pr_writer$arity$3": function () {}
};
cljs.core.PersistentArrayMapIterator.prototype = {
  "hasNext": function () {},
  "next": function () {}
};
cljs.core.PersistentArrayMap.prototype = {
  "toString": function () {},
  "equiv": function () {},
  "keys": function () {},
  "entries": function () {},
  "values": function () {},
  "has": function () {},
  "get": function () {},
  "forEach": function () {},
  "cljs$core$ILookup$_lookup$arity$2": function () {},
  "cljs$core$ILookup$_lookup$arity$3": function () {},
  "cljs$core$IKVReduce$_kv_reduce$arity$3": function () {},
  "cljs$core$IIterable$": function () {},
  "cljs$core$IIterable$_iterator$arity$1": function () {},
  "cljs$core$IMeta$_meta$arity$1": function () {},
  "cljs$core$ICloneable$_clone$arity$1": function () {},
  "cljs$core$ICounted$_count$arity$1": function () {},
  "cljs$core$IHash$_hash$arity$1": function () {},
  "cljs$core$IEquiv$_equiv$arity$2": function () {},
  "cljs$core$IEditableCollection$_as_transient$arity$1": function () {},
  "cljs$core$IEmptyableCollection$_empty$arity$1": function () {},
  "cljs$core$IReduce$_reduce$arity$2": function () {},
  "cljs$core$IReduce$_reduce$arity$3": function () {},
  "cljs$core$IMap$_dissoc$arity$2": function () {},
  "cljs$core$IAssociative$_assoc$arity$3": function () {},
  "cljs$core$IAssociative$_contains_key_QMARK_$arity$2": function () {},
  "cljs$core$ISeqable$_seq$arity$1": function () {},
  "cljs$core$IWithMeta$_with_meta$arity$2": function () {},
  "cljs$core$ICollection$_conj$arity$2": function () {},
  "call": function () {},
  "apply": function () {},
  "cljs$core$IFn$_invoke$arity$1": function () {},
  "cljs$core$IFn$_invoke$arity$2": function () {},
  "cljs$core$IPrintWithWriter$": function () {},
  "cljs$core$IPrintWithWriter$_pr_writer$arity$3": function () {}
};
cljs.core.TransientArrayMap.prototype = {
  "cljs$core$ICounted$_count$arity$1": function () {},
  "cljs$core$ILookup$_lookup$arity$2": function () {},
  "cljs$core$ILookup$_lookup$arity$3": function () {},
  "cljs$core$ITransientCollection$_conj_BANG_$arity$2": function () {},
  "cljs$core$ITransientCollection$_persistent_BANG_$arity$1": function () {},
  "cljs$core$ITransientAssociative$_assoc_BANG_$arity$3": function () {},
  "cljs$core$ITransientMap$_dissoc_BANG_$arity$2": function () {}
};
cljs.core.NodeIterator.prototype = {
  "advance": function () {},
  "hasNext": function () {},
  "next": function () {},
  "remove": function () {}
};
cljs.core.BitmapIndexedNode.prototype = {
  "ensure_editable": function () {},
  "inode_without_BANG_": function () {},
  "edit_and_remove_pair": function () {},
  "inode_seq": function () {},
  "kv_reduce": function () {},
  "inode_lookup": function () {},
  "inode_assoc_BANG_": function () {},
  "inode_assoc": function () {},
  "inode_find": function () {},
  "inode_without": function () {},
  "cljs$core$IIterable$": function () {},
  "cljs$core$IIterable$_iterator$arity$1": function () {}
};
cljs.core.ArrayNodeIterator.prototype = {
  "hasNext": function () {},
  "next": function () {},
  "remove": function () {}
};
cljs.core.ArrayNode.prototype = {
  "ensure_editable": function () {},
  "inode_without_BANG_": function () {},
  "inode_seq": function () {},
  "kv_reduce": function () {},
  "inode_lookup": function () {},
  "inode_assoc_BANG_": function () {},
  "inode_assoc": function () {},
  "inode_find": function () {},
  "inode_without": function () {},
  "cljs$core$IIterable$": function () {},
  "cljs$core$IIterable$_iterator$arity$1": function () {}
};
cljs.core.HashCollisionNode.prototype = {
  "ensure_editable": function () {},
  "inode_without_BANG_": function () {},
  "inode_seq": function () {},
  "kv_reduce": function () {},
  "inode_lookup": function () {},
  "inode_assoc_BANG_": function () {},
  "inode_assoc": function () {},
  "ensure_editable_array": function () {},
  "inode_find": function () {},
  "inode_without": function () {},
  "cljs$core$IIterable$": function () {},
  "cljs$core$IIterable$_iterator$arity$1": function () {}
};
cljs.core.NodeSeq.prototype = {
  "toString": function () {},
  "equiv": function () {},
  "indexOf": function () {},
  "lastIndexOf": function () {},
  "cljs$core$IMeta$_meta$arity$1": function () {},
  "cljs$core$IHash$_hash$arity$1": function () {},
  "cljs$core$IEquiv$_equiv$arity$2": function () {},
  "cljs$core$IEmptyableCollection$_empty$arity$1": function () {},
  "cljs$core$IReduce$_reduce$arity$2": function () {},
  "cljs$core$IReduce$_reduce$arity$3": function () {},
  "cljs$core$ISeq$_first$arity$1": function () {},
  "cljs$core$ISeq$_rest$arity$1": function () {},
  "cljs$core$ISeqable$_seq$arity$1": function () {},
  "cljs$core$IWithMeta$_with_meta$arity$2": function () {},
  "cljs$core$ICollection$_conj$arity$2": function () {},
  "cljs$core$IPrintWithWriter$": function () {},
  "cljs$core$IPrintWithWriter$_pr_writer$arity$3": function () {}
};
cljs.core.ArrayNodeSeq.prototype = {
  "toString": function () {},
  "equiv": function () {},
  "indexOf": function () {},
  "lastIndexOf": function () {},
  "cljs$core$IMeta$_meta$arity$1": function () {},
  "cljs$core$IHash$_hash$arity$1": function () {},
  "cljs$core$IEquiv$_equiv$arity$2": function () {},
  "cljs$core$IEmptyableCollection$_empty$arity$1": function () {},
  "cljs$core$IReduce$_reduce$arity$2": function () {},
  "cljs$core$IReduce$_reduce$arity$3": function () {},
  "cljs$core$ISeq$_first$arity$1": function () {},
  "cljs$core$ISeq$_rest$arity$1": function () {},
  "cljs$core$ISeqable$_seq$arity$1": function () {},
  "cljs$core$IWithMeta$_with_meta$arity$2": function () {},
  "cljs$core$ICollection$_conj$arity$2": function () {},
  "cljs$core$IPrintWithWriter$": function () {},
  "cljs$core$IPrintWithWriter$_pr_writer$arity$3": function () {}
};
cljs.core.HashMapIter.prototype = {
  "hasNext": function () {},
  "next": function () {},
  "remove": function () {}
};
cljs.core.PersistentHashMap.prototype = {
  "toString": function () {},
  "equiv": function () {},
  "keys": function () {},
  "entries": function () {},
  "values": function () {},
  "has": function () {},
  "get": function () {},
  "forEach": function () {},
  "cljs$core$ILookup$_lookup$arity$2": function () {},
  "cljs$core$ILookup$_lookup$arity$3": function () {},
  "cljs$core$IKVReduce$_kv_reduce$arity$3": function () {},
  "cljs$core$IIterable$": function () {},
  "cljs$core$IIterable$_iterator$arity$1": function () {},
  "cljs$core$IMeta$_meta$arity$1": function () {},
  "cljs$core$ICloneable$_clone$arity$1": function () {},
  "cljs$core$ICounted$_count$arity$1": function () {},
  "cljs$core$IHash$_hash$arity$1": function () {},
  "cljs$core$IEquiv$_equiv$arity$2": function () {},
  "cljs$core$IEditableCollection$_as_transient$arity$1": function () {},
  "cljs$core$IEmptyableCollection$_empty$arity$1": function () {},
  "cljs$core$IMap$_dissoc$arity$2": function () {},
  "cljs$core$IAssociative$_assoc$arity$3": function () {},
  "cljs$core$IAssociative$_contains_key_QMARK_$arity$2": function () {},
  "cljs$core$ISeqable$_seq$arity$1": function () {},
  "cljs$core$IWithMeta$_with_meta$arity$2": function () {},
  "cljs$core$ICollection$_conj$arity$2": function () {},
  "call": function () {},
  "apply": function () {},
  "cljs$core$IFn$_invoke$arity$1": function () {},
  "cljs$core$IFn$_invoke$arity$2": function () {},
  "cljs$core$IPrintWithWriter$": function () {},
  "cljs$core$IPrintWithWriter$_pr_writer$arity$3": function () {}
};
cljs.core.TransientHashMap.prototype = {
  "conj_BANG_": function () {},
  "assoc_BANG_": function () {},
  "without_BANG_": function () {},
  "persistent_BANG_": function () {},
  "cljs$core$ICounted$_count$arity$1": function () {},
  "cljs$core$ILookup$_lookup$arity$2": function () {},
  "cljs$core$ILookup$_lookup$arity$3": function () {},
  "cljs$core$ITransientCollection$_conj_BANG_$arity$2": function () {},
  "cljs$core$ITransientCollection$_persistent_BANG_$arity$1": function () {},
  "cljs$core$ITransientAssociative$_assoc_BANG_$arity$3": function () {},
  "cljs$core$ITransientMap$_dissoc_BANG_$arity$2": function () {}
};
cljs.core.PersistentTreeMapSeq.prototype = {
  "toString": function () {},
  "equiv": function () {},
  "indexOf": function () {},
  "lastIndexOf": function () {},
  "cljs$core$IMeta$_meta$arity$1": function () {},
  "cljs$core$ICounted$_count$arity$1": function () {},
  "cljs$core$IHash$_hash$arity$1": function () {},
  "cljs$core$IEquiv$_equiv$arity$2": function () {},
  "cljs$core$IEmptyableCollection$_empty$arity$1": function () {},
  "cljs$core$IReduce$_reduce$arity$2": function () {},
  "cljs$core$IReduce$_reduce$arity$3": function () {},
  "cljs$core$ISeq$_first$arity$1": function () {},
  "cljs$core$ISeq$_rest$arity$1": function () {},
  "cljs$core$ISeqable$_seq$arity$1": function () {},
  "cljs$core$IWithMeta$_with_meta$arity$2": function () {},
  "cljs$core$ICollection$_conj$arity$2": function () {},
  "cljs$core$IPrintWithWriter$": function () {},
  "cljs$core$IPrintWithWriter$_pr_writer$arity$3": function () {}
};
cljs.core.BlackNode.prototype = {
  "lastIndexOf": function () {},
  "indexOf": function () {},
  "add_right": function () {},
  "redden": function () {},
  "blacken": function () {},
  "add_left": function () {},
  "replace": function () {},
  "balance_left": function () {},
  "balance_right": function () {},
  "remove_left": function () {},
  "kv_reduce": function () {},
  "remove_right": function () {},
  "cljs$core$ILookup$_lookup$arity$2": function () {},
  "cljs$core$ILookup$_lookup$arity$3": function () {},
  "cljs$core$IIndexed$_nth$arity$2": function () {},
  "cljs$core$IIndexed$_nth$arity$3": function () {},
  "cljs$core$IVector$_assoc_n$arity$3": function () {},
  "cljs$core$IMeta$_meta$arity$1": function () {},
  "cljs$core$ICounted$_count$arity$1": function () {},
  "cljs$core$IMapEntry$_key$arity$1": function () {},
  "cljs$core$IMapEntry$_val$arity$1": function () {},
  "cljs$core$IStack$_peek$arity$1": function () {},
  "cljs$core$IStack$_pop$arity$1": function () {},
  "cljs$core$IHash$_hash$arity$1": function () {},
  "cljs$core$IEquiv$_equiv$arity$2": function () {},
  "cljs$core$IEmptyableCollection$_empty$arity$1": function () {},
  "cljs$core$IReduce$_reduce$arity$2": function () {},
  "cljs$core$IReduce$_reduce$arity$3": function () {},
  "cljs$core$IAssociative$_assoc$arity$3": function () {},
  "cljs$core$ISeqable$_seq$arity$1": function () {},
  "cljs$core$IWithMeta$_with_meta$arity$2": function () {},
  "cljs$core$ICollection$_conj$arity$2": function () {},
  "call": function () {},
  "apply": function () {},
  "cljs$core$IFn$_invoke$arity$1": function () {},
  "cljs$core$IFn$_invoke$arity$2": function () {},
  "cljs$core$IPrintWithWriter$": function () {},
  "cljs$core$IPrintWithWriter$_pr_writer$arity$3": function () {}
};
cljs.core.RedNode.prototype = {
  "lastIndexOf": function () {},
  "indexOf": function () {},
  "add_right": function () {},
  "redden": function () {},
  "blacken": function () {},
  "add_left": function () {},
  "replace": function () {},
  "balance_left": function () {},
  "balance_right": function () {},
  "remove_left": function () {},
  "kv_reduce": function () {},
  "remove_right": function () {},
  "cljs$core$ILookup$_lookup$arity$2": function () {},
  "cljs$core$ILookup$_lookup$arity$3": function () {},
  "cljs$core$IIndexed$_nth$arity$2": function () {},
  "cljs$core$IIndexed$_nth$arity$3": function () {},
  "cljs$core$IVector$_assoc_n$arity$3": function () {},
  "cljs$core$IMeta$_meta$arity$1": function () {},
  "cljs$core$ICounted$_count$arity$1": function () {},
  "cljs$core$IMapEntry$_key$arity$1": function () {},
  "cljs$core$IMapEntry$_val$arity$1": function () {},
  "cljs$core$IStack$_peek$arity$1": function () {},
  "cljs$core$IStack$_pop$arity$1": function () {},
  "cljs$core$IHash$_hash$arity$1": function () {},
  "cljs$core$IEquiv$_equiv$arity$2": function () {},
  "cljs$core$IEmptyableCollection$_empty$arity$1": function () {},
  "cljs$core$IReduce$_reduce$arity$2": function () {},
  "cljs$core$IReduce$_reduce$arity$3": function () {},
  "cljs$core$IAssociative$_assoc$arity$3": function () {},
  "cljs$core$ISeqable$_seq$arity$1": function () {},
  "cljs$core$IWithMeta$_with_meta$arity$2": function () {},
  "cljs$core$ICollection$_conj$arity$2": function () {},
  "call": function () {},
  "apply": function () {},
  "cljs$core$IFn$_invoke$arity$1": function () {},
  "cljs$core$IFn$_invoke$arity$2": function () {},
  "cljs$core$IPrintWithWriter$": function () {},
  "cljs$core$IPrintWithWriter$_pr_writer$arity$3": function () {}
};
cljs.core.PersistentTreeMap.prototype = {
  "forEach": function () {},
  "get": function () {},
  "entries": function () {},
  "toString": function () {},
  "keys": function () {},
  "values": function () {},
  "equiv": function () {},
  "entry_at": function () {},
  "has": function () {},
  "cljs$core$ILookup$_lookup$arity$2": function () {},
  "cljs$core$ILookup$_lookup$arity$3": function () {},
  "cljs$core$IKVReduce$_kv_reduce$arity$3": function () {},
  "cljs$core$IMeta$_meta$arity$1": function () {},
  "cljs$core$ICloneable$_clone$arity$1": function () {},
  "cljs$core$ICounted$_count$arity$1": function () {},
  "cljs$core$IReversible$_rseq$arity$1": function () {},
  "cljs$core$IHash$_hash$arity$1": function () {},
  "cljs$core$IEquiv$_equiv$arity$2": function () {},
  "cljs$core$IEmptyableCollection$_empty$arity$1": function () {},
  "cljs$core$IMap$_dissoc$arity$2": function () {},
  "cljs$core$IAssociative$_assoc$arity$3": function () {},
  "cljs$core$IAssociative$_contains_key_QMARK_$arity$2": function () {},
  "cljs$core$ISeqable$_seq$arity$1": function () {},
  "cljs$core$IWithMeta$_with_meta$arity$2": function () {},
  "cljs$core$ICollection$_conj$arity$2": function () {},
  "call": function () {},
  "apply": function () {},
  "cljs$core$IFn$_invoke$arity$1": function () {},
  "cljs$core$IFn$_invoke$arity$2": function () {},
  "cljs$core$ISorted$_sorted_seq$arity$2": function () {},
  "cljs$core$ISorted$_sorted_seq_from$arity$3": function () {},
  "cljs$core$ISorted$_entry_key$arity$2": function () {},
  "cljs$core$ISorted$_comparator$arity$1": function () {},
  "cljs$core$IPrintWithWriter$": function () {},
  "cljs$core$IPrintWithWriter$_pr_writer$arity$3": function () {}
};
cljs.core.KeySeq.prototype = {
  "toString": function () {},
  "equiv": function () {},
  "indexOf": function () {},
  "lastIndexOf": function () {},
  "cljs$core$IMeta$_meta$arity$1": function () {},
  "cljs$core$INext$_next$arity$1": function () {},
  "cljs$core$IHash$_hash$arity$1": function () {},
  "cljs$core$IEquiv$_equiv$arity$2": function () {},
  "cljs$core$IEmptyableCollection$_empty$arity$1": function () {},
  "cljs$core$IReduce$_reduce$arity$2": function () {},
  "cljs$core$IReduce$_reduce$arity$3": function () {},
  "cljs$core$ISeq$_first$arity$1": function () {},
  "cljs$core$ISeq$_rest$arity$1": function () {},
  "cljs$core$ISeqable$_seq$arity$1": function () {},
  "cljs$core$IWithMeta$_with_meta$arity$2": function () {},
  "cljs$core$ICollection$_conj$arity$2": function () {},
  "cljs$core$IPrintWithWriter$": function () {},
  "cljs$core$IPrintWithWriter$_pr_writer$arity$3": function () {}
};
cljs.core.ValSeq.prototype = {
  "toString": function () {},
  "equiv": function () {},
  "indexOf": function () {},
  "lastIndexOf": function () {},
  "cljs$core$IMeta$_meta$arity$1": function () {},
  "cljs$core$INext$_next$arity$1": function () {},
  "cljs$core$IHash$_hash$arity$1": function () {},
  "cljs$core$IEquiv$_equiv$arity$2": function () {},
  "cljs$core$IEmptyableCollection$_empty$arity$1": function () {},
  "cljs$core$IReduce$_reduce$arity$2": function () {},
  "cljs$core$IReduce$_reduce$arity$3": function () {},
  "cljs$core$ISeq$_first$arity$1": function () {},
  "cljs$core$ISeq$_rest$arity$1": function () {},
  "cljs$core$ISeqable$_seq$arity$1": function () {},
  "cljs$core$IWithMeta$_with_meta$arity$2": function () {},
  "cljs$core$ICollection$_conj$arity$2": function () {},
  "cljs$core$IPrintWithWriter$": function () {},
  "cljs$core$IPrintWithWriter$_pr_writer$arity$3": function () {}
};
cljs.core.HashSetIter.prototype = {
  "hasNext": function () {},
  "next": function () {},
  "remove": function () {}
};
cljs.core.PersistentHashSet.prototype = {
  "toString": function () {},
  "equiv": function () {},
  "keys": function () {},
  "entries": function () {},
  "values": function () {},
  "has": function () {},
  "forEach": function () {},
  "cljs$core$ILookup$_lookup$arity$2": function () {},
  "cljs$core$ILookup$_lookup$arity$3": function () {},
  "cljs$core$IIterable$": function () {},
  "cljs$core$IIterable$_iterator$arity$1": function () {},
  "cljs$core$IMeta$_meta$arity$1": function () {},
  "cljs$core$ICloneable$_clone$arity$1": function () {},
  "cljs$core$ICounted$_count$arity$1": function () {},
  "cljs$core$IHash$_hash$arity$1": function () {},
  "cljs$core$IEquiv$_equiv$arity$2": function () {},
  "cljs$core$IEditableCollection$_as_transient$arity$1": function () {},
  "cljs$core$IEmptyableCollection$_empty$arity$1": function () {},
  "cljs$core$ISet$_disjoin$arity$2": function () {},
  "cljs$core$ISeqable$_seq$arity$1": function () {},
  "cljs$core$IWithMeta$_with_meta$arity$2": function () {},
  "cljs$core$ICollection$_conj$arity$2": function () {},
  "call": function () {},
  "apply": function () {},
  "cljs$core$IFn$_invoke$arity$1": function () {},
  "cljs$core$IFn$_invoke$arity$2": function () {},
  "cljs$core$IPrintWithWriter$": function () {},
  "cljs$core$IPrintWithWriter$_pr_writer$arity$3": function () {}
};
cljs.core.TransientHashSet.prototype = {
  "cljs$core$ITransientCollection$_conj_BANG_$arity$2": function () {},
  "cljs$core$ITransientCollection$_persistent_BANG_$arity$1": function () {},
  "cljs$core$ITransientSet$_disjoin_BANG_$arity$2": function () {},
  "cljs$core$ICounted$_count$arity$1": function () {},
  "cljs$core$ILookup$_lookup$arity$2": function () {},
  "cljs$core$ILookup$_lookup$arity$3": function () {},
  "call": function () {},
  "apply": function () {},
  "cljs$core$IFn$_invoke$arity$1": function () {},
  "cljs$core$IFn$_invoke$arity$2": function () {}
};
cljs.core.PersistentTreeSet.prototype = {
  "toString": function () {},
  "equiv": function () {},
  "keys": function () {},
  "entries": function () {},
  "values": function () {},
  "has": function () {},
  "forEach": function () {},
  "cljs$core$ILookup$_lookup$arity$2": function () {},
  "cljs$core$ILookup$_lookup$arity$3": function () {},
  "cljs$core$IMeta$_meta$arity$1": function () {},
  "cljs$core$ICloneable$_clone$arity$1": function () {},
  "cljs$core$ICounted$_count$arity$1": function () {},
  "cljs$core$IReversible$_rseq$arity$1": function () {},
  "cljs$core$IHash$_hash$arity$1": function () {},
  "cljs$core$IEquiv$_equiv$arity$2": function () {},
  "cljs$core$IEmptyableCollection$_empty$arity$1": function () {},
  "cljs$core$ISet$_disjoin$arity$2": function () {},
  "cljs$core$ISeqable$_seq$arity$1": function () {},
  "cljs$core$IWithMeta$_with_meta$arity$2": function () {},
  "cljs$core$ICollection$_conj$arity$2": function () {},
  "call": function () {},
  "apply": function () {},
  "cljs$core$IFn$_invoke$arity$1": function () {},
  "cljs$core$IFn$_invoke$arity$2": function () {},
  "cljs$core$ISorted$_sorted_seq$arity$2": function () {},
  "cljs$core$ISorted$_sorted_seq_from$arity$3": function () {},
  "cljs$core$ISorted$_entry_key$arity$2": function () {},
  "cljs$core$ISorted$_comparator$arity$1": function () {},
  "cljs$core$IPrintWithWriter$": function () {},
  "cljs$core$IPrintWithWriter$_pr_writer$arity$3": function () {}
};
cljs.core.ArrayList.prototype = {
  "add": function () {},
  "size": function () {},
  "clear": function () {},
  "isEmpty": function () {},
  "toArray": function () {}
};
cljs.core.RangeIterator.prototype = {
  "hasNext": function () {},
  "next": function () {}
};
cljs.core.Range.prototype = {
  "toString": function () {},
  "equiv": function () {},
  "indexOf": function () {},
  "lastIndexOf": function () {},
  "cljs$core$IIndexed$_nth$arity$2": function () {},
  "cljs$core$IIndexed$_nth$arity$3": function () {},
  "cljs$core$IIterable$": function () {},
  "cljs$core$IIterable$_iterator$arity$1": function () {},
  "cljs$core$IMeta$_meta$arity$1": function () {},
  "cljs$core$ICloneable$_clone$arity$1": function () {},
  "cljs$core$INext$_next$arity$1": function () {},
  "cljs$core$ICounted$_count$arity$1": function () {},
  "cljs$core$IHash$_hash$arity$1": function () {},
  "cljs$core$IEquiv$_equiv$arity$2": function () {},
  "cljs$core$IEmptyableCollection$_empty$arity$1": function () {},
  "cljs$core$IReduce$_reduce$arity$2": function () {},
  "cljs$core$IReduce$_reduce$arity$3": function () {},
  "cljs$core$ISeq$_first$arity$1": function () {},
  "cljs$core$ISeq$_rest$arity$1": function () {},
  "cljs$core$ISeqable$_seq$arity$1": function () {},
  "cljs$core$IWithMeta$_with_meta$arity$2": function () {},
  "cljs$core$ICollection$_conj$arity$2": function () {},
  "cljs$core$IPrintWithWriter$": function () {},
  "cljs$core$IPrintWithWriter$_pr_writer$arity$3": function () {}
};
cljs.core.Delay.prototype = {
  "cljs$core$IDeref$_deref$arity$1": function () {},
  "cljs$core$IPending$_realized_QMARK_$arity$1": function () {}
};
cljs.core.Eduction.prototype = {
  "indexOf": function () {},
  "lastIndexOf": function () {},
  "cljs$core$ISeqable$_seq$arity$1": function () {},
  "cljs$core$IReduce$_reduce$arity$2": function () {},
  "cljs$core$IReduce$_reduce$arity$3": function () {},
  "cljs$core$IPrintWithWriter$_pr_writer$arity$3": function () {}
};
cljs.core.MultiFn.prototype = {
  "call": function () {},
  "apply": function () {},
  "cljs$core$IFn$_invoke$arity$0": function () {},
  "cljs$core$IFn$_invoke$arity$1": function () {},
  "cljs$core$IFn$_invoke$arity$2": function () {},
  "cljs$core$IFn$_invoke$arity$3": function () {},
  "cljs$core$IFn$_invoke$arity$4": function () {},
  "cljs$core$IFn$_invoke$arity$5": function () {},
  "cljs$core$IFn$_invoke$arity$6": function () {},
  "cljs$core$IFn$_invoke$arity$7": function () {},
  "cljs$core$IFn$_invoke$arity$8": function () {},
  "cljs$core$IFn$_invoke$arity$9": function () {},
  "cljs$core$IFn$_invoke$arity$10": function () {},
  "cljs$core$IFn$_invoke$arity$11": function () {},
  "cljs$core$IFn$_invoke$arity$12": function () {},
  "cljs$core$IFn$_invoke$arity$13": function () {},
  "cljs$core$IFn$_invoke$arity$14": function () {},
  "cljs$core$IFn$_invoke$arity$15": function () {},
  "cljs$core$IFn$_invoke$arity$16": function () {},
  "cljs$core$IFn$_invoke$arity$17": function () {},
  "cljs$core$IFn$_invoke$arity$18": function () {},
  "cljs$core$IFn$_invoke$arity$19": function () {},
  "cljs$core$IFn$_invoke$arity$20": function () {},
  "cljs$core$IFn$_invoke$arity$21": function () {},
  "cljs$core$IMultiFn$_prefer_method$arity$3": function () {},
  "cljs$core$IMultiFn$_default_dispatch_val$arity$1": function () {},
  "cljs$core$IMultiFn$_remove_method$arity$2": function () {},
  "cljs$core$IMultiFn$_methods$arity$1": function () {},
  "cljs$core$IMultiFn$_prefers$arity$1": function () {},
  "cljs$core$IMultiFn$_dispatch_fn$arity$1": function () {},
  "cljs$core$IMultiFn$_add_method$arity$3": function () {},
  "cljs$core$IMultiFn$_reset$arity$1": function () {},
  "cljs$core$IMultiFn$_get_method$arity$2": function () {},
  "cljs$core$INamed$_name$arity$1": function () {},
  "cljs$core$INamed$_namespace$arity$1": function () {},
  "cljs$core$IHash$_hash$arity$1": function () {}
};
cljs.core.UUID.prototype = {
  "cljs$core$IUUID$": function () {},
  "toString": function () {},
  "equiv": function () {},
  "cljs$core$IEquiv$_equiv$arity$2": function () {},
  "cljs$core$IPrintWithWriter$_pr_writer$arity$3": function () {},
  "cljs$core$IHash$_hash$arity$1": function () {},
  "cljs$core$IComparable$_compare$arity$2": function () {}
};
cljs.core.ExceptionInfo.prototype = {
  "cljs$core$IPrintWithWriter$": function () {},
  "cljs$core$IPrintWithWriter$_pr_writer$arity$3": function () {},
  "toString": function () {}
};
cljs.core.TaggedLiteral.prototype = {
  "toString": function () {},
  "cljs$core$IEquiv$_equiv$arity$2": function () {},
  "cljs$core$IHash$_hash$arity$1": function () {},
  "cljs$core$ILookup$_lookup$arity$2": function () {},
  "cljs$core$ILookup$_lookup$arity$3": function () {},
  "cljs$core$IPrintWithWriter$_pr_writer$arity$3": function () {}
};
cljs.core.Namespace.prototype = {
  "findInternedVar": function () {},
  "getName": function () {},
  "toString": function () {},
  "cljs$core$IEquiv$_equiv$arity$2": function () {},
  "cljs$core$IHash$_hash$arity$1": function () {}
};
/**********************************************************************
 * End Generated Extern for cljs
/**********************************************************************/
