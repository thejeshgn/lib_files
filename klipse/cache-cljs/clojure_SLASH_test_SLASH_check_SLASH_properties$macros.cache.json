["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$clojure.test.check.properties$macros","~:imports",null,"~:requires",["^ ","~$gen","~$clojure.test.check.generators","^:","^:"],"~:uses",null,"~:defs",["^ ","~$binding-gens",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","~$clojure.test.check.properties","~:line",42,"~:column",8,"~:end-line",42,"~:end-column",20,"~:private",true,"~:arglists",["~#list",["~$quote",["^H",[["~$bindings"]]]]]],"^F",true,"^5","~$clojure.test.check.properties$macros/binding-gens","~:variadic",false,"^@","clojure/test/check/properties.cljc","^E",20,"~:method-params",["^H",[["^J"]]],"~:protocol-impl",null,"~:arglists-meta",["^H",[null,null]],"^C",1,"^B",42,"^D",42,"~:max-fixed-arity",1,"~:fn-var",true,"^G",["^H",["^I",["^H",[["^J"]]]]]],"~$for-all",["^ ","^>",null,"^?",["^ ","^@","^A","^E",18,"~:top-fn",["^ ","^L",true,"^P",3,"^M",[["^H",["~$&form","~$&env","^J","~$body"]]],"^G",["^H",[["^T","^U","^J","~$&","^V"]]],"^O",["^H",[null]]],"^C",11,"^B",46,"~:macro",true,"^D",46,"^G",["^H",["^I",["^H",[["^J","~$&","^V"]]]]],"~:doc","Macro sugar for `for-all*`. `for-all` lets you name the parameter\n  and use them in expression, without wrapping them in a lambda. Like\n  `for-all*`, it returns a property.\n\n  Examples\n\n  (for-all [a gen/int\n            b gen/int]\n    (>= (+ a b) a))\n  "],"^5","~$clojure.test.check.properties$macros/for-all","^L",true,"^@","clojure/test/check/properties.cljc","^E",18,"^S",["^ ","^L",true,"^P",3,"^M",[["^H",["^T","^U","^J","^V"]]],"^G",["^H",[["^T","^U","^J","~$&","^V"]]],"^O",["^H",[null]]],"^M",[["^H",["^T","^U","^J","^V"]]],"^N",null,"^O",["^H",[null]],"^C",1,"^B",46,"^W",true,"^D",46,"^P",3,"^Q",true,"^G",["^H",[["^T","^U","^J","~$&","^V"]]],"^X","Macro sugar for `for-all*`. `for-all` lets you name the parameter\n  and use them in expression, without wrapping them in a lambda. Like\n  `for-all*`, it returns a property.\n\n  Examples\n\n  (for-all [a gen/int\n            b gen/int]\n    (>= (+ a b) a))\n  "],"~$apply-gen",["^ ","^>",null,"^?",["^ ","^@","^A","^B",13,"^C",8,"^D",13,"^E",17,"^F",true,"^G",["^H",["^I",["^H",[["~$function"]]]]]],"^F",true,"^5","~$clojure.test.check.properties$macros/apply-gen","^L",false,"^@","clojure/test/check/properties.cljc","^E",17,"^M",["^H",[["^["]]],"^N",null,"^O",["^H",[null,null]],"^C",1,"^B",13,"^D",13,"^P",1,"^Q",true,"^G",["^H",["^I",["^H",[["^["]]]]]],"~$for-all*",["^ ","^>",null,"^?",["^ ","^@","^A","^B",23,"^C",7,"^D",23,"^E",15,"^G",["^H",["^I",["^H",[["~$args","^["]]]]],"^X","Creates a property (properties are also generators). A property\n  is a generator that generates the result of applying the function\n  under test with the realized arguments. Once realized, the arguments\n  will be applied to `function` with `apply`.\n\n  Example:\n\n  (for-all* [gen/int gen/int] (fn [a b] (>= (+ a b) a)))\n  "],"^5","~$clojure.test.check.properties$macros/for-all*","^L",false,"^@","clojure/test/check/properties.cljc","^E",15,"^M",["^H",[["^12","^["]]],"^N",null,"^O",["^H",[null,null]],"^C",1,"^B",23,"^D",23,"^P",2,"^Q",true,"^G",["^H",["^I",["^H",[["^12","^["]]]]],"^X","Creates a property (properties are also generators). A property\n  is a generator that generates the result of applying the function\n  under test with the realized arguments. Once realized, the arguments\n  will be applied to `function` with `apply`.\n\n  Example:\n\n  (for-all* [gen/int gen/int] (fn [a b] (>= (+ a b) a)))\n  "],"~$binding-vars",["^ ","^>",null,"^?",["^ ","^@","^A","^B",38,"^C",8,"^D",38,"^E",20,"^F",true,"^G",["^H",["^I",["^H",[["^J"]]]]]],"^F",true,"^5","~$clojure.test.check.properties$macros/binding-vars","^L",false,"^@","clojure/test/check/properties.cljc","^E",20,"^M",["^H",[["^J"]]],"^N",null,"^O",["^H",[null,null]],"^C",1,"^B",38,"^D",38,"^P",1,"^Q",true,"^G",["^H",["^I",["^H",[["^J"]]]]]]],"~:require-macros",["^ "],"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:args","~$&","^V","^F","^12","~:ns","^5","^T","^L","^@","^6","^E","^S","^M","^=","^K","~$clojure.test.check.properties/for-all*","^R","^Z","^Y","^10","^O","~:function","^J","^C","^13","^11","^B","~:result","^W","^U","~$cljs.core/fn","^[","^D","^P","^G","^X","^15","^14","~:test"]],"~:order",["^19","^1<","^1=","^10","^F","^1:","^5","^@","^E","^C","^B","^D","^G","^X","^1?","^6","^Z","^[","^13","^11","^12","^15","^14","^J","^K","^=","^Y","^S","^W","^R","^L","^P","^M","^O","^T","^U","^V","~$&","^1;","^1>"]],"^X",null]