["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",["~$+","~$*","~$bit-xor","~$bit-or","~$bit-count","~$unsigned-bit-shift-right"]],"~:name","~$clojure.test.check.random","~:imports",null,"~:requires",["^ ","~$doubles","~$clojure.test.check.random.doubles","^>","^>","~$longs","~$clojure.test.check.random.longs","^@","^@"],"~:uses",["^ ","^7","^@","^5","^@","^8","^@","~$*","^@","^6","^@","~$+","^@"],"~:defs",["^ ","~$mix-gamma-const-1",["^ ","^9","~$clojure.test.check.random/mix-gamma-const-1","~:file","clojure/test/check/random.cljs","~:line",71,"~:column",1,"~:end-line",71,"~:end-column",33,"~:private",true,"~:meta",["^ ","^E","^:","^F",71,"^G",16,"^H",71,"^I",33,"^J",true]],"~$make-java-util-splittable-random",["^ ","~:protocol-inline",null,"^K",["^ ","^E","^:","^F",123,"^G",7,"^H",123,"^I",39,"~:arglists",["~#list",["~$quote",["^O",[["~$seed"]]]]]],"^9","~$clojure.test.check.random/make-java-util-splittable-random","~:variadic",false,"^E","clojure/test/check/random.cljs","^I",39,"~:method-params",["^O",[["^Q"]]],"~:protocol-impl",null,"~:arglists-meta",["^O",[null,null]],"^G",1,"^F",123,"^H",123,"~:max-fixed-arity",1,"~:fn-var",true,"^N",["^O",["^P",["^O",[["^Q"]]]]]],"~$rand-long",["^ ","^M",null,"^K",["^ ","^E","^:","^F",20,"^G",4,"^H",20,"^I",13,"~:protocol","~$clojure.test.check.random/IRandom","~:doc","Returns a random goog.math.Long based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument","^N",["^O",["^P",["^O",[["~$rng"]]]]]],"^Z","^[","^9","~$clojure.test.check.random/rand-long","^S",false,"^E","clojure/test/check/random.cljs","^I",13,"^T",["^O",[["^11"]]],"^U",null,"^V",["^O",[null,null]],"^G",1,"^F",19,"^H",20,"^W",1,"^X",true,"^N",["^O",["^P",["^O",[["^11"]]]]],"^10","Returns a random goog.math.Long based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument"],"~$mix-64",["^ ","^M",null,"^K",["^ ","^E","^:","^F",62,"^G",17,"^H",62,"^I",23,"^J",true,"^N",["^O",["^P",["^O",[["~$n"]]]]]],"^J",true,"^9","~$clojure.test.check.random/mix-64","^S",false,"^E","clojure/test/check/random.cljs","^I",23,"^T",["^O",[["~$n"]]],"^U",null,"^V",["^O",[null,null]],"^G",1,"^F",62,"^H",62,"^W",1,"^X",true,"^N",["^O",["^P",["^O",[["~$n"]]]]]],"~$golden-gamma",["^ ","^9","~$clojure.test.check.random/golden-gamma","^E","clojure/test/check/random.cljs","^F",120,"^G",1,"^H",120,"^I",28,"^J",true,"^K",["^ ","^E","^:","^F",120,"^G",16,"^H",120,"^I",28,"^J",true]],"~$mix-gamma-const-2",["^ ","^9","~$clojure.test.check.random/mix-gamma-const-2","^E","clojure/test/check/random.cljs","^F",72,"^G",1,"^H",72,"^I",33,"^J",true,"^K",["^ ","^E","^:","^F",72,"^G",16,"^H",72,"^I",33,"^J",true]],"~$mix-64-const-2",["^ ","^9","~$clojure.test.check.random/mix-64-const-2","^E","clojure/test/check/random.cljs","^F",60,"^G",1,"^H",60,"^I",30,"^J",true,"^K",["^ ","^E","^:","^F",60,"^G",16,"^H",60,"^I",30,"^J",true]],"~$bxoubsr",["^ ","^M",null,"^K",["^ ","^E","^:","^F",54,"^G",17,"^H",54,"^I",24,"^J",true,"^N",["^O",["^P",["^O",[["~$x","~$n"]]]]],"^10","Performs (-> x (unsigned-bit-shift-right n) (bit-xor x))."],"^J",true,"^9","~$clojure.test.check.random/bxoubsr","^S",false,"^E","clojure/test/check/random.cljs","^I",24,"^T",["^O",[["~$x","~$n"]]],"^U",null,"^V",["^O",[null,null]],"^G",1,"^F",54,"^H",54,"^W",2,"^X",true,"^N",["^O",["^P",["^O",[["~$x","~$n"]]]]],"^10","Performs (-> x (unsigned-bit-shift-right n) (bit-xor x))."],"~$make-random",["^ ","^M",null,"^K",["^ ","^E","^:","^F",140,"^G",7,"^H",140,"^I",18,"^N",["^O",["^P",["^O",[[],["^Q"]]]]],"^10","Given an optional integer (or goog.math.Long) seed, returns an\n  implementation of the IRandom protocol.","~:top-fn",["^ ","^S",false,"^W",1,"^T",["^O",[[],["^Q"]]],"^N",["^O",[[],["^Q"]]],"^V",["^O",[null,null]]]],"^9","~$clojure.test.check.random/make-random","^S",false,"^E","clojure/test/check/random.cljs","^I",18,"^1>",["^ ","^S",false,"^W",1,"^T",["^O",[[],["^Q"]]],"^N",["^O",[[],["^Q"]]],"^V",["^O",[null,null]]],"^T",["^O",[[],["^Q"]]],"^U",null,"^V",["^O",[null,null]],"^G",1,"^F",140,"^H",140,"^W",1,"^X",true,"^N",["^O",[[],["^Q"]]],"^10","Given an optional integer (or goog.math.Long) seed, returns an\n  implementation of the IRandom protocol."],"~$mix-gamma",["^ ","^M",null,"^K",["^ ","^E","^:","^F",75,"^G",17,"^H",75,"^I",26,"^J",true,"^N",["^O",["^P",["^O",[["~$n"]]]]]],"^J",true,"^9","~$clojure.test.check.random/mix-gamma","^S",false,"^E","clojure/test/check/random.cljs","^I",26,"^T",["^O",[["~$n"]]],"^U",null,"^V",["^O",[null,null]],"^G",1,"^F",75,"^H",75,"^W",1,"^X",true,"^N",["^O",["^P",["^O",[["~$n"]]]]]],"~$mix-gamma-const-3",["^ ","^9","~$clojure.test.check.random/mix-gamma-const-3","^E","clojure/test/check/random.cljs","^F",73,"^G",1,"^H",73,"^I",33,"^J",true,"^K",["^ ","^E","^:","^F",73,"^G",16,"^H",73,"^I",33,"^J",true]],"~$split-n",["^ ","^M",null,"^K",["^ ","^E","^:","^F",37,"^G",4,"^H",37,"^I",11,"^Z","^[","^10","Returns a collection of `n` RNGs, which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument","^N",["^O",["^P",["^O",[["^11","~$n"]]]]]],"^Z","^[","^9","~$clojure.test.check.random/split-n","^S",false,"^E","clojure/test/check/random.cljs","^I",11,"^T",["^O",[["^11","~$n"]]],"^U",null,"^V",["^O",[null,null]],"^G",1,"^F",19,"^H",37,"^W",2,"^X",true,"^N",["^O",["^P",["^O",[["^11","~$n"]]]]],"^10","Returns a collection of `n` RNGs, which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument"],"~$next-rng",["^ ","^9","~$clojure.test.check.random/next-rng","^E","clojure/test/check/random.cljs","^F",130,"^G",1,"^H",130,"^I",24,"^J",true,"^K",["^ ","^E","^:","^F",130,"^G",16,"^H",130,"^I",24,"^J",true]],"~$hex-long",["^ ","^M",null,"^K",["^ ","^E","^:","^F",49,"^G",17,"^H",49,"^I",25,"^J",true,"^N",["^O",["^P",["^O",[["~$s"]]]]],"^10","Helper for defining constants."],"^J",true,"^9","~$clojure.test.check.random/hex-long","^S",false,"^E","clojure/test/check/random.cljs","^I",25,"^T",["^O",[["~$s"]]],"^U",null,"^V",["^O",[null,null]],"^G",1,"^F",49,"^H",49,"^W",1,"^X",true,"^N",["^O",["^P",["^O",[["~$s"]]]]],"^10","Helper for defining constants."],"~$rand-double",["^ ","^M",null,"^K",["^ ","^E","^:","^F",25,"^G",4,"^H",25,"^I",15,"^Z","^[","^10","Returns a random double between 0.0 (inclusive) and 1.0 (exclusive)\n  based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument","^N",["^O",["^P",["^O",[["^11"]]]]]],"^Z","^[","^9","~$clojure.test.check.random/rand-double","^S",false,"^E","clojure/test/check/random.cljs","^I",15,"^T",["^O",[["^11"]]],"^U",null,"^V",["^O",[null,null]],"^G",1,"^F",19,"^H",25,"^W",1,"^X",true,"^N",["^O",["^P",["^O",[["^11"]]]]],"^10","Returns a random double between 0.0 (inclusive) and 1.0 (exclusive)\n  based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument"],"~$mix-64-const-1",["^ ","^9","~$clojure.test.check.random/mix-64-const-1","^E","clojure/test/check/random.cljs","^F",59,"^G",1,"^H",59,"^I",30,"^J",true,"^K",["^ ","^E","^:","^F",59,"^G",16,"^H",59,"^I",30,"^J",true]],"~$split",["^ ","^M",null,"^K",["^ ","^E","^:","^F",31,"^G",4,"^H",31,"^I",9,"^Z","^[","^10","Returns two new RNGs [rng1 rng2], which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument","^N",["^O",["^P",["^O",[["^11"]]]]]],"^Z","^[","^9","~$clojure.test.check.random/split","^S",false,"^E","clojure/test/check/random.cljs","^I",9,"^T",["^O",[["^11"]]],"^U",null,"^V",["^O",[null,null]],"^G",1,"^F",19,"^H",31,"^W",1,"^X",true,"^N",["^O",["^P",["^O",[["^11"]]]]],"^10","Returns two new RNGs [rng1 rng2], which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument"],"~$JavaUtilSplittableRandom",["^ ","~:num-fields",2,"~:protocols",["^4",["^["]],"^9","~$clojure.test.check.random/JavaUtilSplittableRandom","^E","clojure/test/check/random.cljs","^I",34,"~:type",true,"^G",10,"^F",91,"~:record",false,"^H",91,"~:skip-protocol-flag",null],"~$IRandom",["^ ","^K",["^ ","~:protocol-symbol",true,"^E","^:","^I",21,"^G",14,"^F",19,"~:protocol-info",["^ ","~:methods",["^ ","^Y",[["^11"]],"^1J",[["^11"]],"^1N",[["^11"]],"^1D",[["^11","~$n"]]]],"^H",19,"^10",null,"~:jsdoc",["^O",["@interface"]]],"^1X",true,"^9","^[","^E","clojure/test/check/random.cljs","^I",21,"^G",1,"^F",19,"^1Y",["^ ","^1Z",["^ ","^Y",[["^11"]],"^1J",[["^11"]],"^1N",[["^11"]],"^1D",[["^11","~$n"]]]],"~:info",null,"^H",19,"~:impls",["^4",["^1S"]],"^10",null,"^1[",["^O",["@interface"]]],"~$->JavaUtilSplittableRandom",["^ ","^M",null,"^K",["^ ","^1R",["^4",["^["]],"^E","^:","^I",34,"^G",10,"~:factory","~:positional","^F",91,"^H",91,"^N",["^O",["^P",["^O",[["~$gamma","~$state"]]]]],"^1V",null],"^1R",["^4",["^["]],"^9","~$clojure.test.check.random/->JavaUtilSplittableRandom","^S",false,"^E","clojure/test/check/random.cljs","^I",34,"^T",["^O",[["^25","^26"]]],"^U",null,"^V",["^O",[null,null]],"^G",1,"^23","^24","^F",91,"^H",91,"^W",2,"^X",true,"^N",["^O",["^P",["^O",[["^25","^26"]]]]],"^1V",null]],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~$x","^14","^R","^1?","^C","^1<","^1:","^L","^Y","^1O","^13","~:returned","^J","^[","^1X","^Z","^15","^11","^1I","^17","^1R","~:ns","^9","^S","^E","^I","^1>","^19","~:state","^T","^1;","^1=","^V","~:seed","^D","^12","^G","~:author","~$n","^1@","^:","^24","^1B","^23","^1K","^1Z","^1G","^1D","^F","^1Y","^1M","^26","^18","~$s","^1F","^Q","^H","^1H","^1J","^W","^1L","^1N","^16","^N","^1V","^10","^27","^1[","^1A","^1W","~:test","^1E","^25","^22","^1C"]],"~:order",["^[","^1X","^2<","^9","^E","^I","^G","^F","^1Y","^H","^N","^10","^1[","^2@","^:","^2?","^1W","^1Z","^Y","^1J","^1N","^1D","^11","~$n","^12","^Z","^1K","^1O","^1E","^1I","^J","^1H","~$s","^1<","^1;","~$x","^1M","^1L","^1:","^19","^14","^13","^D","^C","^18","^17","^1C","^1B","^1A","^1@","^25","^26","^27","^1R","^23","^1V","^22","^24","^16","^15","^2>","^R","^L","^Q","^2=","^2;","^1G","^1F","^1?","^1>","^1=","^S","^W","^T","^V"]],"^10","Purely functional and splittable pseudo-random number generators."]