["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$re-frame.interceptor","~:imports",null,"~:requires",["^ ","~$re-frame.interop","^;","~$re-frame.loggers","^<"],"~:uses",["^ ","~$console","^<","~$ratom?","^;","~$empty-queue","^;","~$debug-enabled?","^;"],"~:defs",["^ ","~$invoke-interceptors",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","^8","~:line",71,"~:column",8,"~:end-line",71,"~:end-column",27,"~:private",true,"~:arglists",["~#list",["~$quote",["^M",[["~$context","~$direction"]]]]],"~:doc","Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while it's `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement."],"^K",true,"^7","~$re-frame.interceptor/invoke-interceptors","~:variadic",false,"^F","re_frame/interceptor.cljc","^J",27,"~:method-params",["^M",[["^O","^P"]]],"~:protocol-impl",null,"~:arglists-meta",["^M",[null,null]],"^H",1,"^G",71,"^I",71,"~:max-fixed-arity",2,"~:fn-var",true,"^L",["^M",["^N",["^M",[["^O","^P"]]]]],"^Q","Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while it's `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement."],"~$assoc-coeffect",["^ ","^D",null,"^E",["^ ","^F","^8","^G",53,"^H",7,"^I",53,"^J",21,"^L",["^M",["^N",["^M",[["^O","~$key","~$value"]]]]]],"^7","~$re-frame.interceptor/assoc-coeffect","^S",false,"^F","re_frame/interceptor.cljc","^J",21,"^T",["^M",[["^O","^Z","^["]]],"^U",null,"^V",["^M",[null,null]],"^H",1,"^G",53,"^I",53,"^W",3,"^X",true,"^L",["^M",["^N",["^M",[["^O","^Z","^["]]]]]],"~$update-coeffect",["^ ","^D",null,"^E",["^ ","^F","^8","^G",57,"^H",7,"^I",57,"^J",22,"^L",["^M",["^N",["^M",[["^O","^Z","~$f","~$&","~$args"]]]]],"~:top-fn",["^ ","^S",true,"^W",3,"^T",[["^M",["^O","^Z","~$f","^12"]]],"^L",["^M",[["^O","^Z","~$f","~$&","^12"]]],"^V",["^M",[null]]]],"^7","~$re-frame.interceptor/update-coeffect","^S",true,"^F","re_frame/interceptor.cljc","^J",22,"^13",["^ ","^S",true,"^W",3,"^T",[["^M",["^O","^Z","~$f","^12"]]],"^L",["^M",[["^O","^Z","~$f","~$&","^12"]]],"^V",["^M",[null]]],"^T",[["^M",["^O","^Z","~$f","^12"]]],"^U",null,"^V",["^M",[null]],"^H",1,"^G",57,"^I",57,"^W",3,"^X",true,"^L",["^M",[["^O","^Z","~$f","~$&","^12"]]]],"~$invoke-interceptor-fn",["^ ","^D",null,"^E",["^ ","^F","^8","^G",64,"^H",8,"^I",64,"^J",29,"^K",true,"^L",["^M",["^N",["^M",[["^O","~$interceptor","^P"]]]]]],"^K",true,"^7","~$re-frame.interceptor/invoke-interceptor-fn","^S",false,"^F","re_frame/interceptor.cljc","^J",29,"^T",["^M",[["^O","^16","^P"]]],"^U",null,"^V",["^M",[null,null]],"^H",1,"^G",64,"^I",64,"^W",3,"^X",true,"^L",["^M",["^N",["^M",[["^O","^16","^P"]]]]]],"~$get-effect",["^ ","^D",null,"^E",["^ ","^F","^8","^G",30,"^H",7,"^I",30,"^J",17,"^L",["^M",["^N",["^M",[["^O"],["^O","^Z"],["^O","^Z","~$not-found"]]]]],"^13",["^ ","^S",false,"^W",3,"^T",["^M",[["^O"],["^O","^Z"],["^O","^Z","^19"]]],"^L",["^M",[["^O"],["^O","^Z"],["^O","^Z","^19"]]],"^V",["^M",[null,null,null]]]],"^7","~$re-frame.interceptor/get-effect","^S",false,"^F","re_frame/interceptor.cljc","^J",17,"^13",["^ ","^S",false,"^W",3,"^T",["^M",[["^O"],["^O","^Z"],["^O","^Z","^19"]]],"^L",["^M",[["^O"],["^O","^Z"],["^O","^Z","^19"]]],"^V",["^M",[null,null,null]]],"^T",["^M",[["^O"],["^O","^Z"],["^O","^Z","^19"]]],"^U",null,"^V",["^M",[null,null,null]],"^H",1,"^G",30,"^I",30,"^W",3,"^X",true,"^L",["^M",[["^O"],["^O","^Z"],["^O","^Z","^19"]]]],"~$->interceptor",["^ ","^D",null,"^E",["^ ","^F","^8","^G",16,"^H",7,"^I",16,"^J",20,"^L",["^M",["^N",["^M",[["~$&",["^ ","~:as","~$m","~:keys",["~$id","~$before","~$after"]]]]]]],"^Q","Create an interceptor from named arguments","^13",["^ ","^S",true,"^W",0,"^T",[["^M",[["^ ","^1<","~$m","^1=",["^1>","^1?","^1@"]]]]],"^L",["^M",[["~$&",["^ ","^1<","~$m","^1=",["^1>","^1?","^1@"]]]]],"^V",["^M",[null]]]],"^7","~$re-frame.interceptor/->interceptor","^S",true,"^F","re_frame/interceptor.cljc","^J",20,"^13",["^ ","^S",true,"^W",0,"^T",[["^M",[["^ ","^1<","~$m","^1=",["^1>","^1?","^1@"]]]]],"^L",["^M",[["~$&",["^ ","^1<","~$m","^1=",["^1>","^1?","^1@"]]]]],"^V",["^M",[null]]],"^T",[["^M",[["^ ","^1<","~$m","^1=",["^1>","^1?","^1@"]]]]],"^U",null,"^V",["^M",[null]],"^H",1,"^G",16,"^I",16,"^W",0,"^X",true,"^L",["^M",[["~$&",["^ ","^1<","~$m","^1=",["^1>","^1?","^1@"]]]]],"^Q","Create an interceptor from named arguments"],"~$get-coeffect",["^ ","^D",null,"^E",["^ ","^F","^8","^G",45,"^H",7,"^I",45,"^J",19,"^L",["^M",["^N",["^M",[["^O"],["^O","^Z"],["^O","^Z","^19"]]]]],"^13",["^ ","^S",false,"^W",3,"^T",["^M",[["^O"],["^O","^Z"],["^O","^Z","^19"]]],"^L",["^M",[["^O"],["^O","^Z"],["^O","^Z","^19"]]],"^V",["^M",[null,null,null]]]],"^7","~$re-frame.interceptor/get-coeffect","^S",false,"^F","re_frame/interceptor.cljc","^J",19,"^13",["^ ","^S",false,"^W",3,"^T",["^M",[["^O"],["^O","^Z"],["^O","^Z","^19"]]],"^L",["^M",[["^O"],["^O","^Z"],["^O","^Z","^19"]]],"^V",["^M",[null,null,null]]],"^T",["^M",[["^O"],["^O","^Z"],["^O","^Z","^19"]]],"^U",null,"^V",["^M",[null,null,null]],"^H",1,"^G",45,"^I",45,"^W",3,"^X",true,"^L",["^M",[["^O"],["^O","^Z"],["^O","^Z","^19"]]]],"~$execute",["^ ","^D",null,"^E",["^ ","^F","^8","^G",145,"^H",7,"^I",145,"^J",14,"^L",["^M",["^N",["^M",[["~$event-v","~$interceptors"]]]]],"^Q","Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of iterceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \"handle\n   the given event\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat anologous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \"prime\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded."],"^7","~$re-frame.interceptor/execute","^S",false,"^F","re_frame/interceptor.cljc","^J",14,"^T",["^M",[["^1E","^1F"]]],"^U",null,"^V",["^M",[null,null]],"^H",1,"^G",145,"^I",145,"^W",2,"^X",true,"^L",["^M",["^N",["^M",[["^1E","^1F"]]]]],"^Q","Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of iterceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \"handle\n   the given event\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat anologous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \"prime\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded."],"~$assoc-effect",["^ ","^D",null,"^E",["^ ","^F","^8","^G",39,"^H",7,"^I",39,"^J",19,"^L",["^M",["^N",["^M",[["^O","^Z","^["]]]]]],"^7","~$re-frame.interceptor/assoc-effect","^S",false,"^F","re_frame/interceptor.cljc","^J",19,"^T",["^M",[["^O","^Z","^["]]],"^U",null,"^V",["^M",[null,null]],"^H",1,"^G",39,"^I",39,"^W",3,"^X",true,"^L",["^M",["^N",["^M",[["^O","^Z","^["]]]]]],"~$enqueue",["^ ","^D",null,"^E",["^ ","^F","^8","^G",108,"^H",7,"^I",108,"^J",14,"^L",["^M",["^N",["^M",[["^O","^1F"]]]]],"^Q","Add a collection of `interceptors` to the end of `context's` execution `:queue`.\n  Returns the updated `context`.\n\n  In an advanced case, this function could allow an interceptor to add new\n  interceptors to the `:queue` of a context."],"^7","~$re-frame.interceptor/enqueue","^S",false,"^F","re_frame/interceptor.cljc","^J",14,"^T",["^M",[["^O","^1F"]]],"^U",null,"^V",["^M",[null,null]],"^H",1,"^G",108,"^I",108,"^W",2,"^X",true,"^L",["^M",["^N",["^M",[["^O","^1F"]]]]],"^Q","Add a collection of `interceptors` to the end of `context's` execution `:queue`.\n  Returns the updated `context`.\n\n  In an advanced case, this function could allow an interceptor to add new\n  interceptors to the `:queue` of a context."],"~$mandatory-interceptor-keys",["^ ","^7","~$re-frame.interceptor/mandatory-interceptor-keys","^F","re_frame/interceptor.cljc","^G",8,"^H",1,"^I",8,"^J",32,"^E",["^ ","^F","^8","^G",8,"^H",6,"^I",8,"^J",32],"~:tag","~$cljs.core/ISet"],"~$interceptor?",["^ ","^D",null,"^E",["^ ","^F","^8","^G",10,"^H",7,"^I",10,"^J",19,"^L",["^M",["^N",["^M",[["~$m"]]]]]],"^7","~$re-frame.interceptor/interceptor?","^S",false,"^F","re_frame/interceptor.cljc","^J",19,"^T",["^M",[["~$m"]]],"^U",null,"^V",["^M",[null,null]],"^H",1,"^G",10,"^I",10,"^W",1,"^X",true,"^L",["^M",["^N",["^M",[["~$m"]]]]]],"~$change-direction",["^ ","^D",null,"^E",["^ ","^F","^8","^G",131,"^H",8,"^I",131,"^J",24,"^K",true,"^L",["^M",["^N",["^M",[["^O"]]]]],"^Q","Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`"],"^K",true,"^7","~$re-frame.interceptor/change-direction","^S",false,"^F","re_frame/interceptor.cljc","^J",24,"^T",["^M",[["^O"]]],"^U",null,"^V",["^M",[null,null]],"^H",1,"^G",131,"^I",131,"^W",1,"^X",true,"^L",["^M",["^N",["^M",[["^O"]]]]],"^Q","Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`"],"^O",["^ ","^D",null,"^E",["^ ","^K",true,"^F","^8","^J",15,"^13",["^ ","^S",false,"^W",3,"^T",["^M",[["~$event","^1F"],["^1T","^1F","~$db"]]],"^L",["^M",[["^1T","^1F"],["^1T","^1F","^1U"]]],"^V",["^M",[null,null]]],"^H",8,"^G",120,"^I",120,"^L",["^M",["^N",["^M",[["^1T","^1F"],["^1T","^1F","^1U"]]]]],"^Q","Create a fresh context"],"^K",true,"^7","~$re-frame.interceptor/context","^S",false,"^F","re_frame/interceptor.cljc","^J",15,"^13",["^ ","^S",false,"^W",3,"^T",["^M",[["^1T","^1F"],["^1T","^1F","^1U"]]],"^L",["^M",[["^1T","^1F"],["^1T","^1F","^1U"]]],"^V",["^M",[null,null]]],"^T",["^M",[["^1T","^1F"],["^1T","^1F","^1U"]]],"^U",null,"^V",["^M",[null,null]],"^H",1,"^G",120,"^I",120,"^W",3,"^X",true,"^L",["^M",[["^1T","^1F"],["^1T","^1F","^1U"]]],"^Q","Create a fresh context"]],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["^1F","~$&","~:unnamed","^1V","^1:","^8","^1?","^C","^P","^1G","^Y","^K","^1A","~:db","^11","~:queue","^12","~:ns","^15","^7","^1<","^S","^18","^F","^R","^J","^16","^13","^Z","^1;","^1K","^T","^1U","^V","^H","^[","~$m","^14","^1=","~:event","~:after","^1B","^G","^1D","^1H","^10","^1J","~:id","~:effects","^1L","^1S","~:stack","^1P","^I","^1C","~:error","^1I","^1T","~:coeffects","^W","^1@","^1Q","^L","^1>","^1R","^19","^Q","^1E","~:before","~:test","^O","^17","^1M","~$f"]],"~:order",["^24","^23","^29","^1M","^21","^7","^F","^J","^H","^G","^I","^L","^Q","^2:","^8","^1L","^1Q","^1P","~$m","^1A","^13","^1;","^S","^W","^T","^V","^1<","^1=","^1>","^1?","^1@","~$&","^27","^1Z","^1:","^18","^O","^Z","^19","^25","^1I","^1H","^[","^1C","^1B","^28","^10","^Y","^14","^11","~$f","^12","^17","^K","^15","^16","^P","^20","^26","^R","^C","^1K","^1J","^1F","^1V","^1T","^1U","^22","^1[","^1S","^1R","^1G","^1D","^1E"]],"^Q",null]