["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",["~$bit-count"]],"~:name","~$clojure.test.check.random.longs.bit-count-impl","~:imports",null,"~:requires",null,"~:uses",null,"~:defs",["^ ","^5",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","^7","~:line",26,"~:column",7,"~:end-line",26,"~:end-column",16,"~:arglists",["~#list",["~$quote",["^D",[["~$x"]]]]],"~:doc","Returns a JS number (not a Long), the number of set bits in the\n  given Long."],"^6","~$clojure.test.check.random.longs.bit-count-impl/bit-count","~:variadic",false,"^>","clojure/test/check/random/longs/bit_count_impl.cljs","^B",16,"~:method-params",["^D",[["~$x"]]],"~:protocol-impl",null,"~:arglists-meta",["^D",[null,null]],"^@",1,"^?",26,"^A",26,"~:max-fixed-arity",1,"~:fn-var",true,"^C",["^D",["^E",["^D",[["~$x"]]]]],"^F","Returns a JS number (not a Long), the number of set bits in the\n  given Long."],"~$lookup",["^ ","^6","~$clojure.test.check.random.longs.bit-count-impl/lookup","^>","clojure/test/check/random/longs/bit_count_impl.cljs","^?",18,"^@",1,"^A",18,"^B",22,"~:private",true,"^=",["^ ","^>","^7","^?",18,"^@",16,"^A",18,"^B",22,"^P",true]]],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~$x","^5","^P","~:ns","^6","^>","^B","^N","^G","^@","~:author","^7","^?","^O","^A","^C","^F","~:test"]],"~:order",["^O","^P","^T","^6","^>","^B","^@","^?","^A","^C","^F","^V","^7","^U","^N","^G","^5","~$x"]],"^F",null]