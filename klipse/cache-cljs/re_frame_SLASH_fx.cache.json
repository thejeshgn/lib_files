["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$re-frame.fx","~:imports",null,"~:requires",["^ ","~$re-frame.interop","^;","~$re-frame.interceptor","^<","~$re-frame.events","^=","~$re-frame.registrar","^>","~$router","~$re-frame.router","^@","^@","~$events","^=","~$re-frame.loggers","^B","~$re-frame.db","^C"],"~:uses",["^ ","~$console","^B","~$app-db","^C","~$->interceptor","^<","~$set-timeout!","^;","~$get-handler","^>","~$clear-handlers","^>","~$register-handler","^>"],"~:defs",["^ ","~$do-fx",["^ ","~:meta",["^ ","~:file","^8","~:line",20,"~:column",6,"~:end-line",20,"~:end-column",11],"^7","~$re-frame.fx/do-fx","^O","re_frame/fx.cljc","^S",11,"^Q",1,"^P",20,"^R",20,"~:tag","~$any","~:doc","An interceptor which actions a `context's` (side) `:effects`.\n\n  For each key in the `:effects` map, call the `effects handler` previously\n  registered using `reg-fx`.\n\n  So, if `:effects` was:\n      {:dispatch  [:hello 42]\n       :db        {...}\n       :undo      \"set flag\"}\n  call the registered effects handlers for each of the map's keys:\n  `:dispatch`, `:undo` and `:db`."],"~$register",["^ ","^7","~$re-frame.fx/register","^O","re_frame/fx.cljc","^P",16,"^Q",1,"^R",16,"^S",14,"^N",["^ ","^O","^8","^P",16,"^Q",6,"^R",16,"^S",14],"^U","^V"],"~$kind",["^ ","^7","~$re-frame.fx/kind","^O","re_frame/fx.cljc","^P",14,"^Q",1,"^R",14,"^S",10,"^N",["^ ","^O","^8","^P",14,"^Q",6,"^R",14,"^S",10],"^U","~$cljs.core/Keyword"]],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["^[","^T","~:db","~:ns","^7","^8","^O","~:do-fx","^S","~:dispatch-n","~:deregister-event-handler","^Y","^Q","~:dispatch","^M","~:after","^P","~:id","~:effects","^R","~:error","~:arglists","^X","~:ms","^W","~:fx","^Z","~:test","~:dispatch-later"]],"~:order",["^1@","^[","^15","^7","^O","^S","^Q","^P","^R","^1>","^W","^1A","^8","^Z","^Y","^X","^1;","^16","^1:","^1<","^T","^M","^1B","^1?","^19","^1=","^17","^18","^14"]],"^W",null]