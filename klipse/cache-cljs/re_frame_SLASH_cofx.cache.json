["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$re-frame.cofx","~:imports",null,"~:requires",["^ ","~$re-frame.db","^;","~$re-frame.interceptor","^<","~$re-frame.registrar","^=","~$re-frame.loggers","^>"],"~:uses",["^ ","~$console","^>","~$app-db","^;","~$->interceptor","^<","~$get-handler","^=","~$clear-handlers","^=","~$register-handler","^="],"~:defs",["^ ","~$inject-cofx",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","^8","~:line",18,"~:column",7,"~:end-line",18,"~:end-column",18,"~:arglists",["~#list",["~$quote",["^P",[["~$id"],["^R","~$value"]]]]],"~:doc","Returns an interceptor which adds to a `context's` `:coeffects`.\n\n  `coeffects` are the input resources required by an event handler\n   to perform its job. The two most obvious ones are `db` and `event`.\n   But sometimes a handler might need other resources.\n\n   Perhaps a handler needs a random number or a GUID or the current datetime.\n   Perhaps it needs access to the connection to a DataScript database.\n\n   If the handler directly access these resources, it stops being as\n   pure. It immedaitely becomes harder to test, etc.\n\n   So the necessary resources are \"injected\" into the `coeffect` (map)\n   given the handler.\n\n   Given an `id`, and an optional value, lookup the registered coeffect\n   handler (previously registered via `reg-cofx`) and it with two arguments:\n   the current value of `:coeffects` and, optionally, the value. The registered handler\n   is expected to return a modified coeffect.\n   ","~:top-fn",["^ ","~:variadic",false,"~:max-fixed-arity",2,"~:method-params",["^P",[["^R"],["^R","^S"]]],"^O",["^P",[["^R"],["^R","^S"]]],"~:arglists-meta",["^P",[null,null]]]],"^7","~$re-frame.cofx/inject-cofx","^V",false,"^J","re_frame/cofx.cljc","^N",18,"^U",["^ ","^V",false,"^W",2,"^X",["^P",[["^R"],["^R","^S"]]],"^O",["^P",[["^R"],["^R","^S"]]],"^Y",["^P",[null,null]]],"^X",["^P",[["^R"],["^R","^S"]]],"~:protocol-impl",null,"^Y",["^P",[null,null]],"^L",1,"^K",18,"^M",18,"^W",2,"~:fn-var",true,"^O",["^P",[["^R"],["^R","^S"]]],"^T","Returns an interceptor which adds to a `context's` `:coeffects`.\n\n  `coeffects` are the input resources required by an event handler\n   to perform its job. The two most obvious ones are `db` and `event`.\n   But sometimes a handler might need other resources.\n\n   Perhaps a handler needs a random number or a GUID or the current datetime.\n   Perhaps it needs access to the connection to a DataScript database.\n\n   If the handler directly access these resources, it stops being as\n   pure. It immedaitely becomes harder to test, etc.\n\n   So the necessary resources are \"injected\" into the `coeffect` (map)\n   given the handler.\n\n   Given an `id`, and an optional value, lookup the registered coeffect\n   handler (previously registered via `reg-cofx`) and it with two arguments:\n   the current value of `:coeffects` and, optionally, the value. The registered handler\n   is expected to return a modified coeffect.\n   "],"~$inject-db",["^ ","^7","~$re-frame.cofx/inject-db","^J","re_frame/cofx.cljc","^K",66,"^L",1,"^M",66,"^N",15,"^I",["^ ","^J","^8","^K",66,"^L",6,"^M",66,"^N",15],"~:tag","~$any"],"~$register",["^ ","^7","~$re-frame.cofx/register","^J","re_frame/cofx.cljc","^K",13,"^L",1,"^M",13,"^N",14,"^I",["^ ","^J","^8","^K",13,"^L",6,"^M",13,"^N",14],"^13","^14"],"~$kind",["^ ","^7","~$re-frame.cofx/kind","^J","re_frame/cofx.cljc","^K",11,"^L",1,"^M",11,"^N",10,"^I",["^ ","^J","^8","^K",11,"^L",6,"^M",11,"^N",10],"^13","~$cljs.core/Keyword"]],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["^16","~:db","~:ns","^7","^V","^J","^N","^U","^X","^G","^Y","^L","^S","^K","^11","^Z","~:id","^18","^M","~:coeffects","^W","^12","^O","^R","~:cofx","^8","^15","^T","~:before","^17","~:test"]],"~:order",["^1A","^18","^1>","^7","^J","^N","^L","^K","^M","^O","^T","^1C","^8","^17","^16","^15","^Z","^U","^G","^V","^W","^X","^Y","^R","^S","^1?","^1@","^1B","^1=","^12","^11"]],"^T",null]