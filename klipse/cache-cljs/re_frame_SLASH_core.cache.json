["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$re-frame.core","~:imports",null,"~:requires",["^ ","~$re-frame.interop","^;","~$subs","~$re-frame.subs","~$set","~$clojure.set","~$cofx","~$re-frame.cofx","~$re-frame.interceptor","^B","~$fx","~$re-frame.fx","~$re-frame.events","^E","~$loggers","~$re-frame.loggers","^D","^D","~$re-frame.registrar","^H","~$interceptor","^B","~$router","~$re-frame.router","~$db","~$re-frame.db","~$registrar","^H","^K","^K","^?","^?","~$events","^E","~$re-frame.std-interceptors","^P","^G","^G","^=","^=","~$interop","^;","~$std-interceptors","^P","^A","^A","^M","^M"],"~:uses",["^ ","~$ctx-handler->interceptor","^P","~$fx-handler->interceptor","^P","~$db-handler->interceptor","^P"],"~:defs",["^ ","~$console",["^ ","^7","~$re-frame.core/console","~:file","re_frame/core.cljc","~:line",120,"~:column",1,"~:end-line",120,"~:end-column",13,"~:meta",["^ ","^Z","^8","^[",120,"^10",6,"^11",120,"^12",13]],"~$on-changes",["^ ","^7","~$re-frame.core/on-changes","^Z","re_frame/core.cljc","^[",44,"^10",1,"^11",44,"^12",16,"^13",["^ ","^Z","^8","^[",44,"^10",6,"^11",44,"^12",16]],"~$enrich",["^ ","^7","~$re-frame.core/enrich","^Z","re_frame/core.cljc","^[",41,"^10",1,"^11",41,"^12",12,"^13",["^ ","^Z","^8","^[",41,"^10",6,"^11",41,"^12",12]],"~$reg-sub-raw",["^ ","~:protocol-inline",null,"^13",["^ ","^Z","^8","^[",48,"^10",7,"^11",48,"^12",18,"~:arglists",["~#list",["~$quote",["^1;",[["~$query-id","~$handler-fn"]]]]],"~:doc","Associate a given `query id` with a given subscription handler function `handler-fn`\n   which is expected to take two arguments: app-db and query vector, and return\n   a `reaction`.\n\n  This is a low level, advanced function.  You should probably be using reg-sub\n  instead."],"^7","~$re-frame.core/reg-sub-raw","~:variadic",false,"^Z","re_frame/core.cljc","^12",18,"~:method-params",["^1;",[["^1=","^1>"]]],"~:protocol-impl",null,"~:arglists-meta",["^1;",[null,null]],"^10",1,"^[",48,"^11",48,"~:max-fixed-arity",2,"~:fn-var",true,"^1:",["^1;",["^1<",["^1;",[["^1=","^1>"]]]]],"^1?","Associate a given `query id` with a given subscription handler function `handler-fn`\n   which is expected to take two arguments: app-db and query vector, and return\n   a `reaction`.\n\n  This is a low level, advanced function.  You should probably be using reg-sub\n  instead."],"~$subscribe",["^ ","^7","~$re-frame.core/subscribe","^Z","re_frame/core.cljc","^[",59,"^10",1,"^11",59,"^12",15,"^13",["^ ","^Z","^8","^[",59,"^10",6,"^11",59,"^12",15]],"~$assoc-coeffect",["^ ","^7","~$re-frame.core/assoc-coeffect","^Z","re_frame/core.cljc","^[",35,"^10",1,"^11",35,"^12",20,"^13",["^ ","^Z","^8","^[",35,"^10",6,"^11",35,"^12",20]],"~$register-sub",["^ ","^19",null,"^13",["^ ","^Z","^8","^[",186,"^10",7,"^11",186,"^12",19,"^1:",["^1;",["^1<",["^1;",[["~$&","~$args"]]]]],"~:top-fn",["^ ","^1A",true,"^1E",0,"^1B",[["^1;",["^1L"]]],"^1:",["^1;",[["~$&","^1L"]]],"^1D",["^1;",[null]]]],"^7","~$re-frame.core/register-sub","^1A",true,"^Z","re_frame/core.cljc","^12",19,"^1M",["^ ","^1A",true,"^1E",0,"^1B",[["^1;",["^1L"]]],"^1:",["^1;",[["~$&","^1L"]]],"^1D",["^1;",[null]]],"^1B",[["^1;",["^1L"]]],"^1C",null,"^1D",["^1;",[null]],"^10",1,"^[",186,"^11",186,"^1E",0,"^1F",true,"^1:",["^1;",[["~$&","^1L"]]]],"~$remove-post-event-callback",["^ ","^19",null,"^13",["^ ","^Z","^8","^[",174,"^10",7,"^11",174,"^12",33,"^1:",["^1;",["^1<",["^1;",[["~$id"]]]]]],"^7","~$re-frame.core/remove-post-event-callback","^1A",false,"^Z","re_frame/core.cljc","^12",33,"^1B",["^1;",[["^1P"]]],"^1C",null,"^1D",["^1;",[null,null]],"^10",1,"^[",174,"^11",174,"^1E",1,"^1F",true,"^1:",["^1;",["^1<",["^1;",[["^1P"]]]]]],"~$path",["^ ","^7","~$re-frame.core/path","^Z","re_frame/core.cljc","^[",40,"^10",1,"^11",40,"^12",10,"^13",["^ ","^Z","^8","^[",40,"^10",6,"^11",40,"^12",10]],"~$reg-sub",["^ ","^7","~$re-frame.core/reg-sub","^Z","re_frame/core.cljc","^[",58,"^10",1,"^11",58,"^12",13,"^13",["^ ","^Z","^8","^[",58,"^10",6,"^11",58,"^12",13]],"~$make-restore-fn",["^ ","^19",null,"^13",["^ ","^Z","^8","^[",125,"^10",7,"^11",125,"^12",22,"^1:",["^1;",["^1<",["^1;",[[]]]]],"^1?","Checkpoints the state of re-frame and returns a function which, when\n  later called, will restore re-frame to that checkpointed state.\n\n  Checkpoint includes app-db, all registered handlers and all subscriptions.\n  "],"^7","~$re-frame.core/make-restore-fn","^1A",false,"^Z","re_frame/core.cljc","^12",22,"^1B",["^1;",[[]]],"^1C",null,"^1D",["^1;",[null,null]],"^10",1,"^[",125,"^11",125,"^1E",0,"^1F",true,"^1:",["^1;",["^1<",["^1;",[[]]]]],"^1?","Checkpoints the state of re-frame and returns a function which, when\n  later called, will restore re-frame to that checkpointed state.\n\n  Checkpoint includes app-db, all registered handlers and all subscriptions.\n  "],"~$clear-fx",["^ ","^7","~$re-frame.core/clear-fx","^Z","re_frame/core.cljc","^[",66,"^10",1,"^11",66,"^12",14,"^13",["^ ","^Z","^8","^[",66,"^10",6,"^11",66,"^12",14],"~:tag","~$any"],"~$get-effect",["^ ","^7","~$re-frame.core/get-effect","^Z","re_frame/core.cljc","^[",33,"^10",1,"^11",33,"^12",16,"^13",["^ ","^Z","^8","^[",33,"^10",6,"^11",33,"^12",16]],"~$reg-event-db",["^ ","^19",null,"^13",["^ ","^Z","^8","^[",77,"^10",7,"^11",77,"^12",19,"^1:",["^1;",["^1<",["^1;",[["^1P","~$db-handler"],["^1P","~$interceptors","^23"]]]]],"^1?","Register the given `id`, typically a keyword, with the combination of\n  `db-handler` and an interceptor chain.\n  `db-handler` is a function: (db event) -> db\n  `interceptors` is a collection of interceptors, possibly nested (needs flattening).\n  `db-handler` is wrapped in an interceptor and added to the end of the chain, so in the end\n   there is only a chain.\n   The necessary effects and coeffects handler are added to the front of the\n   interceptor chain.  These interceptors ensure that app-db is available and updated.","^1M",["^ ","^1A",false,"^1E",3,"^1B",["^1;",[["^1P","^23"],["^1P","^24","^23"]]],"^1:",["^1;",[["^1P","^23"],["^1P","^24","^23"]]],"^1D",["^1;",[null,null]]]],"^7","~$re-frame.core/reg-event-db","^1A",false,"^Z","re_frame/core.cljc","^12",19,"^1M",["^ ","^1A",false,"^1E",3,"^1B",["^1;",[["^1P","^23"],["^1P","^24","^23"]]],"^1:",["^1;",[["^1P","^23"],["^1P","^24","^23"]]],"^1D",["^1;",[null,null]]],"^1B",["^1;",[["^1P","^23"],["^1P","^24","^23"]]],"^1C",null,"^1D",["^1;",[null,null]],"^10",1,"^[",77,"^11",77,"^1E",3,"^1F",true,"^1:",["^1;",[["^1P","^23"],["^1P","^24","^23"]]],"^1?","Register the given `id`, typically a keyword, with the combination of\n  `db-handler` and an interceptor chain.\n  `db-handler` is a function: (db event) -> db\n  `interceptors` is a collection of interceptors, possibly nested (needs flattening).\n  `db-handler` is wrapped in an interceptor and added to the end of the chain, so in the end\n   there is only a chain.\n   The necessary effects and coeffects handler are added to the front of the\n   interceptor chain.  These interceptors ensure that app-db is available and updated."],"~$dispatch-sync",["^ ","^7","~$re-frame.core/dispatch-sync","^Z","re_frame/core.cljc","^[",21,"^10",1,"^11",21,"^12",19,"^13",["^ ","^Z","^8","^[",21,"^10",6,"^11",21,"^12",19]],"~$clear-event",["^ ","^7","~$re-frame.core/clear-event","^Z","re_frame/core.cljc","^[",75,"^10",1,"^11",75,"^12",17,"^13",["^ ","^Z","^8","^[",75,"^10",6,"^11",75,"^12",17],"^1Z","^1["],"~$->interceptor",["^ ","^7","~$re-frame.core/->interceptor","^Z","re_frame/core.cljc","^[",30,"^10",1,"^11",30,"^12",19,"^13",["^ ","^Z","^8","^[",30,"^10",6,"^11",30,"^12",19]],"~$set-loggers!",["^ ","^7","~$re-frame.core/set-loggers!","^Z","re_frame/core.cljc","^[",113,"^10",1,"^11",113,"^12",18,"^13",["^ ","^Z","^8","^[",113,"^10",6,"^11",113,"^12",18]],"~$inject-cofx",["^ ","^7","~$re-frame.core/inject-cofx","^Z","re_frame/core.cljc","^[",70,"^10",1,"^11",70,"^12",17,"^13",["^ ","^Z","^8","^[",70,"^10",6,"^11",70,"^12",17]],"~$get-coeffect",["^ ","^7","~$re-frame.core/get-coeffect","^Z","re_frame/core.cljc","^[",32,"^10",1,"^11",32,"^12",18,"^13",["^ ","^Z","^8","^[",32,"^10",6,"^11",32,"^12",18]],"~$debug",["^ ","^7","~$re-frame.core/debug","^Z","re_frame/core.cljc","^[",39,"^10",1,"^11",39,"^12",11,"^13",["^ ","^Z","^8","^[",39,"^10",6,"^11",39,"^12",11],"^1Z","^1["],"~$assoc-effect",["^ ","^7","~$re-frame.core/assoc-effect","^Z","re_frame/core.cljc","^[",34,"^10",1,"^11",34,"^12",18,"^13",["^ ","^Z","^8","^[",34,"^10",6,"^11",34,"^12",18]],"~$enqueue",["^ ","^7","~$re-frame.core/enqueue","^Z","re_frame/core.cljc","^[",31,"^10",1,"^11",31,"^12",13,"^13",["^ ","^Z","^8","^[",31,"^10",6,"^11",31,"^12",13]],"~$clear-cofx",["^ ","^7","~$re-frame.core/clear-cofx","^Z","re_frame/core.cljc","^[",71,"^10",1,"^11",71,"^12",16,"^13",["^ ","^Z","^8","^[",71,"^10",6,"^11",71,"^12",16],"^1Z","^1["],"~$reg-event-ctx",["^ ","^19",null,"^13",["^ ","^Z","^8","^[",99,"^10",7,"^11",99,"^12",20,"^1:",["^1;",["^1<",["^1;",[["^1P","~$handler"],["^1P","^24","^2K"]]]]],"^1M",["^ ","^1A",false,"^1E",3,"^1B",["^1;",[["^1P","^2K"],["^1P","^24","^2K"]]],"^1:",["^1;",[["^1P","^2K"],["^1P","^24","^2K"]]],"^1D",["^1;",[null,null]]]],"^7","~$re-frame.core/reg-event-ctx","^1A",false,"^Z","re_frame/core.cljc","^12",20,"^1M",["^ ","^1A",false,"^1E",3,"^1B",["^1;",[["^1P","^2K"],["^1P","^24","^2K"]]],"^1:",["^1;",[["^1P","^2K"],["^1P","^24","^2K"]]],"^1D",["^1;",[null,null]]],"^1B",["^1;",[["^1P","^2K"],["^1P","^24","^2K"]]],"^1C",null,"^1D",["^1;",[null,null]],"^10",1,"^[",99,"^11",99,"^1E",3,"^1F",true,"^1:",["^1;",[["^1P","^2K"],["^1P","^24","^2K"]]]],"~$reg-fx",["^ ","^7","~$re-frame.core/reg-fx","^Z","re_frame/core.cljc","^[",65,"^10",1,"^11",65,"^12",12,"^13",["^ ","^Z","^8","^[",65,"^10",6,"^11",65,"^12",12],"^1Z","^1["],"~$trim-v",["^ ","^7","~$re-frame.core/trim-v","^Z","re_frame/core.cljc","^[",42,"^10",1,"^11",42,"^12",12,"^13",["^ ","^Z","^8","^[",42,"^10",6,"^11",42,"^12",12],"^1Z","^1["],"~$clear-sub",["^ ","^7","~$re-frame.core/clear-sub","^Z","re_frame/core.cljc","^[",61,"^10",1,"^11",61,"^12",15,"^13",["^ ","^Z","^8","^[",61,"^10",6,"^11",61,"^12",15],"^1Z","^1["],"~$dispatch",["^ ","^7","~$re-frame.core/dispatch","^Z","re_frame/core.cljc","^[",20,"^10",1,"^11",20,"^12",14,"^13",["^ ","^Z","^8","^[",20,"^10",6,"^11",20,"^12",14]],"~$after",["^ ","^7","~$re-frame.core/after","^Z","re_frame/core.cljc","^[",43,"^10",1,"^11",43,"^12",11,"^13",["^ ","^Z","^8","^[",43,"^10",6,"^11",43,"^12",11]],"~$add-post-event-callback",["^ ","^19",null,"^13",["^ ","^Z","^8","^[",153,"^10",7,"^11",153,"^12",30,"^1:",["^1;",["^1<",["^1;",[["~$f"],["^1P","~$f"]]]]],"^1?","Registers a function `f` to be called after each event is processed\n   `f` will be called with two arguments:\n    - `event`: a vector. The event just processed.\n    - `queue`: a PersistentQueue, possibly empty, of events yet to be processed.\n\n   This is useful in advanced cases like:\n     - you are implementing a complex bootstrap pipeline\n     - you want to create your own handling infrastructure, with perhaps multiple\n       handlers for the one event, etc.  Hook in here.\n     - libraries providing 'isomorphic javascript' rendering on  Nodejs or Nashorn.\n\n  'id' is typically a keyword. Supplied at \"add time\" so it can subsequently\n  be used at \"remove time\" to get rid of the right callback.\n  ","^1M",["^ ","^1A",false,"^1E",2,"^1B",["^1;",[["~$f"],["^1P","~$f"]]],"^1:",["^1;",[["~$f"],["^1P","~$f"]]],"^1D",["^1;",[null,null]]]],"^7","~$re-frame.core/add-post-event-callback","^1A",false,"^Z","re_frame/core.cljc","^12",30,"^1M",["^ ","^1A",false,"^1E",2,"^1B",["^1;",[["~$f"],["^1P","~$f"]]],"^1:",["^1;",[["~$f"],["^1P","~$f"]]],"^1D",["^1;",[null,null]]],"^1B",["^1;",[["~$f"],["^1P","~$f"]]],"^1C",null,"^1D",["^1;",[null,null]],"^10",1,"^[",153,"^11",153,"^1E",2,"^1F",true,"^1:",["^1;",[["~$f"],["^1P","~$f"]]],"^1?","Registers a function `f` to be called after each event is processed\n   `f` will be called with two arguments:\n    - `event`: a vector. The event just processed.\n    - `queue`: a PersistentQueue, possibly empty, of events yet to be processed.\n\n   This is useful in advanced cases like:\n     - you are implementing a complex bootstrap pipeline\n     - you want to create your own handling infrastructure, with perhaps multiple\n       handlers for the one event, etc.  Hook in here.\n     - libraries providing 'isomorphic javascript' rendering on  Nodejs or Nashorn.\n\n  'id' is typically a keyword. Supplied at \"add time\" so it can subsequently\n  be used at \"remove time\" to get rid of the right callback.\n  "],"~$reg-cofx",["^ ","^7","~$re-frame.core/reg-cofx","^Z","re_frame/core.cljc","^[",69,"^10",1,"^11",69,"^12",14,"^13",["^ ","^Z","^8","^[",69,"^10",6,"^11",69,"^12",14],"^1Z","^1["],"~$reg-event-fx",["^ ","^19",null,"^13",["^ ","^Z","^8","^[",92,"^10",7,"^11",92,"^12",19,"^1:",["^1;",["^1<",["^1;",[["^1P","~$fx-handler"],["^1P","^24","^30"]]]]],"^1M",["^ ","^1A",false,"^1E",3,"^1B",["^1;",[["^1P","^30"],["^1P","^24","^30"]]],"^1:",["^1;",[["^1P","^30"],["^1P","^24","^30"]]],"^1D",["^1;",[null,null]]]],"^7","~$re-frame.core/reg-event-fx","^1A",false,"^Z","re_frame/core.cljc","^12",19,"^1M",["^ ","^1A",false,"^1E",3,"^1B",["^1;",[["^1P","^30"],["^1P","^24","^30"]]],"^1:",["^1;",[["^1P","^30"],["^1P","^24","^30"]]],"^1D",["^1;",[null,null]]],"^1B",["^1;",[["^1P","^30"],["^1P","^24","^30"]]],"^1C",null,"^1D",["^1;",[null,null]],"^10",1,"^[",92,"^11",92,"^1E",3,"^1F",true,"^1:",["^1;",[["^1P","^30"],["^1P","^24","^30"]]]],"~$register-handler",["^ ","^19",null,"^13",["^ ","^Z","^8","^[",181,"^10",7,"^11",181,"^12",23,"^1:",["^1;",["^1<",["^1;",[["~$&","^1L"]]]]],"^1M",["^ ","^1A",true,"^1E",0,"^1B",[["^1;",["^1L"]]],"^1:",["^1;",[["~$&","^1L"]]],"^1D",["^1;",[null]]]],"^7","~$re-frame.core/register-handler","^1A",true,"^Z","re_frame/core.cljc","^12",23,"^1M",["^ ","^1A",true,"^1E",0,"^1B",[["^1;",["^1L"]]],"^1:",["^1;",[["~$&","^1L"]]],"^1D",["^1;",[null]]],"^1B",[["^1;",["^1L"]]],"^1C",null,"^1D",["^1;",[null]],"^10",1,"^[",181,"^11",181,"^1E",0,"^1F",true,"^1:",["^1;",[["~$&","^1L"]]]],"~$clear-subscription-cache!",["^ ","^7","~$re-frame.core/clear-subscription-cache!","^Z","re_frame/core.cljc","^[",62,"^10",1,"^11",62,"^12",31,"^13",["^ ","^Z","^8","^[",62,"^10",6,"^11",62,"^12",31]]],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["^24","~$&","^2X","^1Q","^X","^14","^2R","^16","^18","^29","^1N","^2K","^1G","^1J","^1I","^1K","^2T","^1O","^15","^1R","^1T","^1L","^1V","^17","~:ns","~:warn","^2A","^7","^2E","^1A","^1X","^20","^22","^Z","^26","^12","^1M","^25","^1@","^27","^28","^2:","^1B","^2<","^1H","^2P","^2>","^30","^1D","^2N","^10","^21","^1=","^2I","^2L","^2@","^31","^[","^2B","^2D","^1Y","^2F","^2H","^2J","^2M","^33","^1>","^2;","^11","^2O","^2?","^2=","^2Q","^2S","^1W","^1E","^35","^2U","^1U","^23","^2W","^2Y","^Y","^1:","^1P","^1?","^2Z","^2[","~:test","^1S","^2G","^2C","^8","^32","^34","^2V","~$f"]],"~:order",["^2T","^39","^7","^Z","^12","^10","^[","^11","^1:","^1?","^3;","^8","^2S","^27","^26","^2;","^2:","^2G","^2F","^2A","^2@","^21","^20","^2E","^2D","^1J","^1I","^2C","^2B","^1S","^1R","^17","^16","^2P","^2O","^2V","^2U","^15","^14","^1@","^18","^1=","^1>","^1U","^1T","^1H","^1G","^2R","^2Q","^35","^34","^2N","^2M","^1Y","^1X","^2Z","^2Y","^2?","^2>","^2I","^2H","^29","^28","^25","^1M","^22","^1A","^1E","^1B","^1D","^1P","^23","^24","^31","^2[","^30","^2L","^2J","^2K","^2=","^2<","^Y","^X","^1W","^1V","^2X","^2W","~$f","^1Q","^1O","^33","^32","^1L","~$&","^3:","^1N","^1K"]],"^1?",null]