["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$clojure.test.check.clojure-test","~:imports",null,"~:requires",["^ ","~$ct","~$cljs.test","^:","^:","~$clojure.test.check.impl","^;"],"~:uses",["^ ","~$exception-like?","^;","~$get-current-time-millis","^;"],"~:defs",["^ ","~$report-trial",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","^6","~:line",149,"~:column",7,"~:end-line",149,"~:end-column",19,"~:arglists",["~#list",["~$quote",["^I",[["~$property-fun","~$so-far","~$num-tests"]]]]]],"^5","~$clojure.test.check.clojure-test/report-trial","~:variadic",false,"^C","clojure/test/check/clojure_test.cljc","^G",19,"~:method-params",["^I",[["^K","^L","^M"]]],"~:protocol-impl",null,"~:arglists-meta",["^I",[null,null]],"^E",1,"^D",149,"^F",149,"~:max-fixed-arity",3,"~:fn-var",true,"^H",["^I",["^J",["^I",[["^K","^L","^M"]]]]]],"~$*default-test-count*",["^ ","^5","~$clojure.test.check.clojure-test/*default-test-count*","^C","clojure/test/check/clojure_test.cljc","^D",23,"^E",1,"^F",23,"^G",36,"~:dynamic",true,"^B",["^ ","^C","^6","^D",23,"^E",16,"^F",23,"^G",36,"^W",true]],"~$*report-shrinking*",["^ ","^B",["^ ","^C","^6","^D",83,"^E",16,"^F",83,"^G",34,"^W",true],"^5","~$clojure.test.check.clojure-test/*report-shrinking*","^C","clojure/test/check/clojure_test.cljc","^G",34,"^E",1,"^W",true,"^D",83,"^F",83,"~:doc","If true, a verbose report of the property being tested, the\n  failing return value, and the arguments provoking that failure is emitted\n  prior to the start of the shrinking search."],"~$*report-trials*",["^ ","^B",["^ ","^C","^6","^D",65,"^E",16,"^F",65,"^G",31,"^W",true],"^5","~$clojure.test.check.clojure-test/*report-trials*","^C","clojure/test/check/clojure_test.cljc","^G",31,"^E",1,"^W",true,"^D",65,"^F",65,"^Z","Controls whether property trials should be reported via clojure.test/report.\n  Valid values include:\n\n  * false - no reporting of trials (default)\n  * a function - will be passed a clojure.test/report-style map containing\n  :clojure.test.check/property and :clojure.test.check/trial slots\n  * true - provides quickcheck-style trial reporting (dots) via\n  `trial-report-dots`\n\n  (Note that all reporting requires running `quick-check` within the scope of a\n  clojure.test run (via `test-ns`, `test-all-vars`, etc.)\n\n  Reporting functions offered by clojure.test.check include `trial-report-dots` and\n  `trial-report-periodic` (which prints more verbose trial progress information\n  every `*trial-report-period*` milliseconds."],"~$trial-report-dots",["^ ","^A",null,"^B",["^ ","^C","^6","^D",125,"^E",7,"^F",125,"^G",24,"^H",["^I",["^J",["^I",[[["~#cmap",[["^L","~$total"],"~:clojure.test.check.clojure-test/trial"]]]]]]],"^Z","Intended to be bound as the value of `*report-trials*`; will emit a single\n  dot every 1000 trials reported."],"^5","~$clojure.test.check.clojure-test/trial-report-dots","^O",false,"^C","clojure/test/check/clojure_test.cljc","^G",24,"^P",["^I",[["~$p__440"]]],"^Q",null,"^R",["^I",[null,null]],"^E",1,"^D",125,"^F",125,"^S",1,"^T",true,"^H",["^I",["^J",["^I",[[["^12",[["^L","^13"],"^14"]]]]]]],"^Z","Intended to be bound as the value of `*report-trials*`; will emit a single\n  dot every 1000 trials reported."],"~$assert-check",["^ ","^A",null,"^B",["^ ","^C","^6","^D",16,"^E",7,"^F",16,"^G",19,"^H",["^I",["^J",["^I",[[["^ ","~:as","~$m","~:keys",["~$result"]]]]]]]],"^5","~$clojure.test.check.clojure-test/assert-check","^O",false,"^C","clojure/test/check/clojure_test.cljc","^G",19,"^P",["^I",[["~$p__427"]]],"^Q",null,"^R",["^I",[null,null]],"^E",1,"^D",16,"^F",16,"^S",1,"^T",true,"^H",["^I",["^J",["^I",[[["^ ","^18","~$m","^19",["^1:"]]]]]]]],"~$with-test-out*",["^ ","^A",null,"^B",["^ ","^C","^6","^D",106,"^E",7,"^F",106,"^G",21,"^H",["^I",["^J",["^I",[["~$f"]]]]]],"^5","~$clojure.test.check.clojure-test/with-test-out*","^O",false,"^C","clojure/test/check/clojure_test.cljc","^G",21,"^P",["^I",[["~$f"]]],"^Q",null,"^R",["^I",[null,null]],"^E",1,"^D",106,"^F",106,"^S",1,"^T",true,"^H",["^I",["^J",["^I",[["~$f"]]]]]],"~$trial-report-periodic",["^ ","^A",null,"^B",["^ ","^C","^6","^D",110,"^E",7,"^F",110,"^G",28,"^H",["^I",["^J",["^I",[["~$m"]]]]],"^Z","Intended to be bound as the value of `*report-trials*`; will emit a verbose\n  status every `*trial-report-period*` milliseconds, like this one:\n\n  Passing trial 3286 / 5000 for (your-test-var-name-here) (:)"],"^5","~$clojure.test.check.clojure-test/trial-report-periodic","^O",false,"^C","clojure/test/check/clojure_test.cljc","^G",28,"^P",["^I",[["~$m"]]],"^Q",null,"^R",["^I",[null,null]],"^E",1,"^D",110,"^F",110,"^S",1,"^T",true,"^H",["^I",["^J",["^I",[["~$m"]]]]],"^Z","Intended to be bound as the value of `*report-trials*`; will emit a verbose\n  status every `*trial-report-period*` milliseconds, like this one:\n\n  Passing trial 3286 / 5000 for (your-test-var-name-here) (:)"],"~$get-property-name",["^ ","^A",null,"^B",["^ ","^C","^6","^D",102,"^E",8,"^F",102,"^G",25,"~:private",true,"^H",["^I",["^J",["^I",[[["^ ","^18","~$report-map","^K","~:clojure.test.check.clojure-test/property"]]]]]]],"^1B",true,"^5","~$clojure.test.check.clojure-test/get-property-name","^O",false,"^C","clojure/test/check/clojure_test.cljc","^G",25,"^P",["^I",[["~$p__435"]]],"^Q",null,"^R",["^I",[null,null]],"^E",1,"^D",102,"^F",102,"^S",1,"^T",true,"^H",["^I",["^J",["^I",[[["^ ","^18","^1C","^K","^1D"]]]]]]],"~$*trial-report-period*",["^ ","^B",["^ ","^C","^6","^D",89,"^E",16,"^F",89,"^G",37,"^W",true],"^5","~$clojure.test.check.clojure-test/*trial-report-period*","^C","clojure/test/check/clojure_test.cljc","^G",37,"^E",1,"^W",true,"^D",89,"^F",89,"^Z","Milliseconds between reports emitted by `trial-report-periodic`."],"~$process-options",["^ ","~:no-doc",true,"^A",null,"^B",["^ ","^C","^6","^D",25,"^E",7,"^F",25,"^G",22,"^H",["^I",["^J",["^I",[["~$options"]]]]],"^1J",true],"^5","~$clojure.test.check.clojure-test/process-options","^O",false,"^C","clojure/test/check/clojure_test.cljc","^G",22,"^P",["^I",[["^1K"]]],"^Q",null,"^R",["^I",[null,null]],"^E",1,"^D",25,"^F",25,"^S",1,"^T",true,"^H",["^I",["^J",["^I",[["^1K"]]]]]],"~$last-trial-report",["^ ","^5","~$clojure.test.check.clojure-test/last-trial-report","^C","clojure/test/check/clojure_test.cljc","^D",93,"^E",1,"^F",93,"^G",33,"^1B",true,"^B",["^ ","^C","^6","^D",93,"^E",16,"^F",93,"^G",33,"^1B",true]],"~$report-failure",["^ ","^A",null,"^B",["^ ","^C","^6","^D",155,"^E",7,"^F",155,"^G",21,"^H",["^I",["^J",["^I",[["^K","^1:","~$trial-number","~$failing-params"]]]]]],"^5","~$clojure.test.check.clojure-test/report-failure","^O",false,"^C","clojure/test/check/clojure_test.cljc","^G",21,"^P",["^I",[["^K","^1:","^1P","^1Q"]]],"^Q",null,"^R",["^I",[null,null]],"^E",1,"^D",155,"^F",155,"^S",4,"^T",true,"^H",["^I",["^J",["^I",[["^K","^1:","^1P","^1Q"]]]]]]],"~:require-macros",["^ ","^9","^:","^:","^:"],"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:clojure.test.check.clojure-test/params","^1K","^1R","^@","^U","^1N","^1J","^14","~:begin-test-var","^10","^15","~:begin-test","^1B","~:else","^L","^1>","^1H","~:ns","^5","^18","^1C","^C","~:num-tests","^1Q","^G","^1@","~:type","^1L","^1E","^Y","^E","~:bad-options","^X","~$m","^M","^[","~:fail","^19","^W","^D","^11","~:result","^N","^17","^1D","^6","^1=","~:expected","^1?","~:cljs.test/default","^F","~:clojure.test.check.clojure-test/shrinking","^1P","~:error","^1;","~:pass","^13","^1:","^H","^1A","^K","^1G","~:actual","^1I","^Z","^1M","^1O","~:test","^V","~:message","~$f"]],"~:order",["^23","^20","^24","^29","^2;","^27","^1:","^28","^22","^1;","^1Z","^5","^C","^G","^E","^D","^F","^H","^Z","^2:","^6","^17","^18","^19","~$m","^V","^W","^U","^1[","^1Y","^21","^1L","^1J","^1I","^1K","^10","^[","^Y","^X","^1H","^1G","^1N","^1B","^1M","^25","^1W","^1X","^1D","^1E","^1A","^K","^1C","^1>","^1=","~$f","^14","^1@","^1?","^15","^11","^L","^13","^26","^1V","^N","^@","^M","^1R","^1O","^1P","^1Q"]],"^Z",null]