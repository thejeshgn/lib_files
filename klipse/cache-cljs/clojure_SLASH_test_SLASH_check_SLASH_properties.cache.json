["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$clojure.test.check.properties","~:imports",null,"~:requires",["^ ","~$gen","~$clojure.test.check.generators","^:","^:"],"~:uses",null,"~:defs",["^ ","~$binding-gens",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","^6","~:line",42,"~:column",8,"~:end-line",42,"~:end-column",20,"~:private",true,"~:arglists",["~#list",["~$quote",["^G",[["~$bindings"]]]]]],"^E",true,"^5","~$clojure.test.check.properties/binding-gens","~:variadic",false,"^@","clojure/test/check/properties.cljc","^D",20,"~:method-params",["^G",[["^I"]]],"~:protocol-impl",null,"~:arglists-meta",["^G",[null,null]],"^B",1,"^A",42,"^C",42,"~:max-fixed-arity",1,"~:fn-var",true,"^F",["^G",["^H",["^G",[["^I"]]]]]],"~$for-all",["^ ","^>",null,"^?",["^ ","^@","^6","^D",18,"~:top-fn",["^ ","^K",true,"^O",3,"^L",[["^G",["~$&form","~$&env","^I","~$body"]]],"^F",["^G",[["^S","^T","^I","~$&","^U"]]],"^N",["^G",[null]]],"^B",11,"^A",46,"~:macro",true,"^C",46,"^F",["^G",["^H",["^G",[["^I","~$&","^U"]]]]],"~:doc","Macro sugar for `for-all*`. `for-all` lets you name the parameter\n  and use them in expression, without wrapping them in a lambda. Like\n  `for-all*`, it returns a property.\n\n  Examples\n\n  (for-all [a gen/int\n            b gen/int]\n    (>= (+ a b) a))\n  "],"^5","~$clojure.test.check.properties/for-all","^K",true,"^@","clojure/test/check/properties.cljc","^D",18,"^R",["^ ","^K",true,"^O",3,"^L",[["^G",["^S","^T","^I","^U"]]],"^F",["^G",[["^S","^T","^I","~$&","^U"]]],"^N",["^G",[null]]],"^L",[["^G",["^S","^T","^I","^U"]]],"^M",null,"^N",["^G",[null]],"^B",1,"^A",46,"^V",true,"^C",46,"^O",3,"^P",true,"^F",["^G",[["^S","^T","^I","~$&","^U"]]],"^W","Macro sugar for `for-all*`. `for-all` lets you name the parameter\n  and use them in expression, without wrapping them in a lambda. Like\n  `for-all*`, it returns a property.\n\n  Examples\n\n  (for-all [a gen/int\n            b gen/int]\n    (>= (+ a b) a))\n  "],"~$apply-gen",["^ ","^>",null,"^?",["^ ","^@","^6","^A",13,"^B",8,"^C",13,"^D",17,"^E",true,"^F",["^G",["^H",["^G",[["~$function"]]]]]],"^E",true,"^5","~$clojure.test.check.properties/apply-gen","^K",false,"^@","clojure/test/check/properties.cljc","^D",17,"^L",["^G",[["^Z"]]],"^M",null,"^N",["^G",[null,null]],"^B",1,"^A",13,"^C",13,"^O",1,"^P",true,"^F",["^G",["^H",["^G",[["^Z"]]]]]],"~$for-all*",["^ ","^>",null,"^?",["^ ","^@","^6","^A",23,"^B",7,"^C",23,"^D",15,"^F",["^G",["^H",["^G",[["~$args","^Z"]]]]],"^W","Creates a property (properties are also generators). A property\n  is a generator that generates the result of applying the function\n  under test with the realized arguments. Once realized, the arguments\n  will be applied to `function` with `apply`.\n\n  Example:\n\n  (for-all* [gen/int gen/int] (fn [a b] (>= (+ a b) a)))\n  "],"^5","~$clojure.test.check.properties/for-all*","^K",false,"^@","clojure/test/check/properties.cljc","^D",15,"^L",["^G",[["^11","^Z"]]],"^M",null,"^N",["^G",[null,null]],"^B",1,"^A",23,"^C",23,"^O",2,"^P",true,"^F",["^G",["^H",["^G",[["^11","^Z"]]]]],"^W","Creates a property (properties are also generators). A property\n  is a generator that generates the result of applying the function\n  under test with the realized arguments. Once realized, the arguments\n  will be applied to `function` with `apply`.\n\n  Example:\n\n  (for-all* [gen/int gen/int] (fn [a b] (>= (+ a b) a)))\n  "],"~$binding-vars",["^ ","^>",null,"^?",["^ ","^@","^6","^A",38,"^B",8,"^C",38,"^D",20,"^E",true,"^F",["^G",["^H",["^G",[["^I"]]]]]],"^E",true,"^5","~$clojure.test.check.properties/binding-vars","^K",false,"^@","clojure/test/check/properties.cljc","^D",20,"^L",["^G",[["^I"]]],"^M",null,"^N",["^G",[null,null]],"^B",1,"^A",38,"^C",38,"^O",1,"^P",true,"^F",["^G",["^H",["^G",[["^I"]]]]]]],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:args","~$&","^U","^[","^E","^11","~:ns","^5","^S","^K","^14","^@","^D","^R","^L","^=","^12","^Q","^Y","^N","~:function","^I","^B","^10","^A","~:result","^V","^T","~$cljs.core/fn","^Z","^C","^6","^J","^O","^F","^X","^W","^13","~:test"]],"~:order",["^18","^1:","^1;","^[","^E","^19","^5","^@","^D","^B","^A","^C","^F","^W","^1=","^6","^Y","^Z","^12","^10","^11","^14","^13","^I","^J","^=","^X","^R","^V","^Q","^K","^O","^L","^N","^S","^T","^U","~$&","^1<"]],"^W",null]