["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ ","~$reify-bool","~$clojure.math.macros"],"~:excludes",["~#set",["~$update"]],"~:name","~$clojure.math.combinatorics","~:imports",null,"~:requires",["^ ","~$goog.string.format","^<"],"~:uses",null,"~:defs",["^ ","~$expt-int",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","^9","~:line",507,"~:column",8,"~:end-line",507,"~:end-column",16,"~:private",true,"~:arglists",["~#list",["~$quote",["^I",[["~$base","~$pow"]]]]]],"^G",true,"^8","~$clojure.math.combinatorics/expt-int","~:variadic",false,"^B","clojure/math/combinatorics.cljc","^F",16,"~:method-params",["^I",[["^K","^L"]]],"~:protocol-impl",null,"~:arglists-meta",["^I",[null,null]],"^D",1,"^C",507,"^E",507,"~:max-fixed-arity",2,"~:fn-var",true,"^H",["^I",["^J",["^I",[["^K","^L"]]]]]],"~$permutation-index-duplicates",["^ ","^@",null,"^A",["^ ","^B","^9","^C",610,"^D",8,"^E",610,"^F",36,"^G",true,"^H",["^I",["^J",["^I",[["~$l"]]]]]],"^G",true,"^8","~$clojure.math.combinatorics/permutation-index-duplicates","^N",false,"^B","clojure/math/combinatorics.cljc","^F",36,"^O",["^I",[["~$l"]]],"^P",null,"^Q",["^I",[null,null]],"^D",1,"^C",610,"^E",610,"^R",1,"^S",true,"^H",["^I",["^J",["^I",[["~$l"]]]]]],"~$nth-combination",["^ ","^@",null,"^A",["^ ","^B","^9","^C",561,"^D",7,"^E",561,"^F",22,"^H",["^I",["^J",["^I",[["~$items","~$t","~$n"]]]]],"~:doc","The nth element of the sequence of t-combinations of items"],"^8","~$clojure.math.combinatorics/nth-combination","^N",false,"^B","clojure/math/combinatorics.cljc","^F",22,"^O",["^I",[["^W","~$t","~$n"]]],"^P",null,"^Q",["^I",[null,null]],"^D",1,"^C",561,"^E",561,"^R",3,"^S",true,"^H",["^I",["^J",["^I",[["^W","~$t","~$n"]]]]],"^X","The nth element of the sequence of t-combinations of items"],"~$partitions",["^ ","^@",null,"^A",["^ ","^B","^9","^C",905,"^D",7,"^E",905,"^F",17,"^H",["^I",["^J",["^I",[["^W","~$&","~$args"]]]]],"^X","All the lexicographic distinct partitions of items.\n    Optionally pass in :min and/or :max to specify inclusive bounds on the number of parts the items can be split into.","~:top-fn",["^ ","^N",true,"^R",1,"^O",[["^I",["^W","^["]]],"^H",["^I",[["^W","~$&","^["]]],"^Q",["^I",[null]]]],"^8","~$clojure.math.combinatorics/partitions","^N",true,"^B","clojure/math/combinatorics.cljc","^F",17,"^10",["^ ","^N",true,"^R",1,"^O",[["^I",["^W","^["]]],"^H",["^I",[["^W","~$&","^["]]],"^Q",["^I",[null]]],"^O",[["^I",["^W","^["]]],"^P",null,"^Q",["^I",[null]],"^D",1,"^C",905,"^E",905,"^R",1,"^S",true,"^H",["^I",[["^W","~$&","^["]]],"^X","All the lexicographic distinct partitions of items.\n    Optionally pass in :min and/or :max to specify inclusive bounds on the number of parts the items can be split into."],"~$all-different?",["^ ","^@",null,"^A",["^ ","^B","^9","^C",87,"^D",8,"^E",87,"^F",22,"^G",true,"^H",["^I",["^J",["^I",[["~$s"]]]]],"^X","Annoyingly, the built-in distinct? doesn't handle 0 args, so we need\nto write our own version that considers the empty-list to be distinct"],"^G",true,"^8","~$clojure.math.combinatorics/all-different?","^N",false,"^B","clojure/math/combinatorics.cljc","^F",22,"^O",["^I",[["~$s"]]],"^P",null,"^Q",["^I",[null,null]],"^D",1,"^C",87,"^E",87,"^R",1,"^S",true,"^H",["^I",["^J",["^I",[["~$s"]]]]],"^X","Annoyingly, the built-in distinct? doesn't handle 0 args, so we need\nto write our own version that considers the empty-list to be distinct"],"~$nth-permutation-duplicates",["^ ","^@",null,"^A",["^ ","^B","^9","^C",405,"^D",8,"^E",405,"^F",34,"^G",true,"^H",["^I",["^J",["^I",[["~$l","~$n"]]]]],"^X","Input should be a sorted sequential collection l of distinct items, \noutput is nth-permutation (0-based)"],"^G",true,"^8","~$clojure.math.combinatorics/nth-permutation-duplicates","^N",false,"^B","clojure/math/combinatorics.cljc","^F",34,"^O",["^I",[["~$l","~$n"]]],"^P",null,"^Q",["^I",[null,null]],"^D",1,"^C",405,"^E",405,"^R",2,"^S",true,"^H",["^I",["^J",["^I",[["~$l","~$n"]]]]],"^X","Input should be a sorted sequential collection l of distinct items, \noutput is nth-permutation (0-based)"],"~$count-permutations-from-frequencies",["^ ","^@",null,"^A",["^ ","^B","^9","^C",344,"^D",8,"^E",344,"^F",43,"^G",true,"^H",["^I",["^J",["^I",[["~$freqs"]]]]]],"^G",true,"^8","~$clojure.math.combinatorics/count-permutations-from-frequencies","^N",false,"^B","clojure/math/combinatorics.cljc","^F",43,"^O",["^I",[["^17"]]],"^P",null,"^Q",["^I",[null,null]],"^D",1,"^C",344,"^E",344,"^R",1,"^S",true,"^H",["^I",["^J",["^I",[["^17"]]]]]],"~$nth-combination-freqs",["^ ","^@",null,"^A",["^ ","^B","^9","^C",544,"^D",8,"^E",544,"^F",29,"^G",true,"^H",["^I",["^J",["^I",[["^17","~$t","~$n"]]]]],"^X","The nth element of the sequence of t-combinations of the multiset\nrepresented by freqs"],"^G",true,"^8","~$clojure.math.combinatorics/nth-combination-freqs","^N",false,"^B","clojure/math/combinatorics.cljc","^F",29,"^O",["^I",[["^17","~$t","~$n"]]],"^P",null,"^Q",["^I",[null,null]],"^D",1,"^C",544,"^E",544,"^R",3,"^S",true,"^H",["^I",["^J",["^I",[["^17","~$t","~$n"]]]]],"^X","The nth element of the sequence of t-combinations of the multiset\nrepresented by freqs"],"~$partitions-M",["^ ","^@",null,"^A",["^ ","^B","^9","^C",879,"^D",8,"^E",879,"^F",20,"^G",true,"^H",["^I",["^J",["^I",[["^W","~$&",["^ ","~$to","~:max","~$from","~:min"]]]]]],"^10",["^ ","^N",true,"^R",1,"^O",[["^I",["^W",["^ ","^1<","^1=","^1>","^1?"]]]],"^H",["^I",[["^W","~$&",["^ ","^1<","^1=","^1>","^1?"]]]],"^Q",["^I",[null]]]],"^G",true,"^8","~$clojure.math.combinatorics/partitions-M","^N",true,"^B","clojure/math/combinatorics.cljc","^F",20,"^10",["^ ","^N",true,"^R",1,"^O",[["^I",["^W",["^ ","^1<","^1=","^1>","^1?"]]]],"^H",["^I",[["^W","~$&",["^ ","^1<","^1=","^1>","^1?"]]]],"^Q",["^I",[null]]],"^O",[["^I",["^W",["^ ","^1<","^1=","^1>","^1?"]]]],"^P",null,"^Q",["^I",[null]],"^D",1,"^C",879,"^E",879,"^R",1,"^S",true,"^H",["^I",[["^W","~$&",["^ ","^1<","^1=","^1>","^1?"]]]]],"~$nth-permutation",["^ ","^@",null,"^A",["^ ","^B","^9","^C",424,"^D",7,"^E",424,"^F",22,"^H",["^I",["^J",["^I",[["^W","~$n"]]]]],"^X","(nth (permutations items)) but calculated more directly."],"^8","~$clojure.math.combinatorics/nth-permutation","^N",false,"^B","clojure/math/combinatorics.cljc","^F",22,"^O",["^I",[["^W","~$n"]]],"^P",null,"^Q",["^I",[null,null]],"^D",1,"^C",424,"^E",424,"^R",2,"^S",true,"^H",["^I",["^J",["^I",[["^W","~$n"]]]]],"^X","(nth (permutations items)) but calculated more directly."],"~$remove-nth",["^ ","^@",null,"^A",["^ ","^B","^9","^C",319,"^D",8,"^E",319,"^F",18,"^G",true,"^H",["^I",["^J",["^I",[["~$l","~$n"]]]]]],"^G",true,"^8","~$clojure.math.combinatorics/remove-nth","^N",false,"^B","clojure/math/combinatorics.cljc","^F",18,"^O",["^I",[["~$l","~$n"]]],"^P",null,"^Q",["^I",[null,null]],"^D",1,"^C",319,"^E",319,"^R",2,"^S",true,"^H",["^I",["^J",["^I",[["~$l","~$n"]]]]]],"~$n-take-k",["^ ","^@",null,"^A",["^ ","^B","^9","^C",468,"^D",8,"^E",468,"^F",16,"^G",true,"^H",["^I",["^J",["^I",[["~$n","~$k"]]]]]],"^G",true,"^8","~$clojure.math.combinatorics/n-take-k","^N",false,"^B","clojure/math/combinatorics.cljc","^F",16,"^O",["^I",[["~$n","~$k"]]],"^P",null,"^Q",["^I",[null,null]],"^D",1,"^C",468,"^E",468,"^R",2,"^S",true,"^H",["^I",["^J",["^I",[["~$n","~$k"]]]]]],"~$permutation-index-distinct",["^ ","^@",null,"^A",["^ ","^B","^9","^C",602,"^D",8,"^E",602,"^F",34,"^G",true,"^H",["^I",["^J",["^I",[["~$l"]]]]]],"^G",true,"^8","~$clojure.math.combinatorics/permutation-index-distinct","^N",false,"^B","clojure/math/combinatorics.cljc","^F",34,"^O",["^I",[["~$l"]]],"^P",null,"^Q",["^I",[null,null]],"^D",1,"^C",602,"^E",602,"^R",1,"^S",true,"^H",["^I",["^J",["^I",[["~$l"]]]]]],"~$partitions-H",["^ ","^@",null,"^A",["^ ","^B","^9","^C",728,"^D",8,"^E",728,"^F",20,"^G",true,"^H",["^I",["^J",["^I",[["^W","~$&","^["]]]]],"^10",["^ ","^N",true,"^R",1,"^O",[["^I",["^W","^["]]],"^H",["^I",[["^W","~$&","^["]]],"^Q",["^I",[null]]]],"^G",true,"^8","~$clojure.math.combinatorics/partitions-H","^N",true,"^B","clojure/math/combinatorics.cljc","^F",20,"^10",["^ ","^N",true,"^R",1,"^O",[["^I",["^W","^["]]],"^H",["^I",[["^W","~$&","^["]]],"^Q",["^I",[null]]],"^O",[["^I",["^W","^["]]],"^P",null,"^Q",["^I",[null]],"^D",1,"^C",728,"^E",728,"^R",1,"^S",true,"^H",["^I",[["^W","~$&","^["]]]],"~$growth-strings-H",["^ ","^@",null,"^A",["^ ","^B","^9","^C",658,"^D",8,"^E",658,"^F",24,"^G",true,"^H",["^I",["^J",["^I",[["~$n","~$r","~$s"],["~$n","~$a","~$b","~$r","~$s"]]]]],"^10",["^ ","^N",false,"^R",5,"^O",["^I",[["~$n","~$r","~$s"],["~$n","~$a","~$b","~$r","~$s"]]],"^H",["^I",[["~$n","~$r","~$s"],["~$n","~$a","~$b","~$r","~$s"]]],"^Q",["^I",[null,null]]]],"^G",true,"^8","~$clojure.math.combinatorics/growth-strings-H","^N",false,"^B","clojure/math/combinatorics.cljc","^F",24,"^10",["^ ","^N",false,"^R",5,"^O",["^I",[["~$n","~$r","~$s"],["~$n","~$a","~$b","~$r","~$s"]]],"^H",["^I",[["~$n","~$r","~$s"],["~$n","~$a","~$b","~$r","~$s"]]],"^Q",["^I",[null,null]]],"^O",["^I",[["~$n","~$r","~$s"],["~$n","~$a","~$b","~$r","~$s"]]],"^P",null,"^Q",["^I",[null,null]],"^D",1,"^C",658,"^E",658,"^R",5,"^S",true,"^H",["^I",[["~$n","~$r","~$s"],["~$n","~$a","~$b","~$r","~$s"]]]],"~$count-subsets-unmemoized",["^ ","^@",null,"^A",["^ ","^B","^9","^C",515,"^D",8,"^E",515,"^F",32,"^G",true,"^H",["^I",["^J",["^I",[["^W"]]]]]],"^G",true,"^8","~$clojure.math.combinatorics/count-subsets-unmemoized","^N",false,"^B","clojure/math/combinatorics.cljc","^F",32,"^O",["^I",[["^W"]]],"^P",null,"^Q",["^I",[null,null]],"^D",1,"^C",515,"^E",515,"^R",1,"^S",true,"^H",["^I",["^J",["^I",[["^W"]]]]]],"~$lex-partitions-H",["^ ","^@",null,"^A",["^ ","^B","^9","^C",709,"^D",8,"^E",709,"^F",24,"^G",true,"^H",["^I",["^J",["^I",[["~$N","~$&",["^ ","^1<","^1=","^1>","^1?"]]]]]],"^10",["^ ","^N",true,"^R",1,"^O",[["^I",["~$N",["^ ","^1<","^1=","^1>","^1?"]]]],"^H",["^I",[["~$N","~$&",["^ ","^1<","^1=","^1>","^1?"]]]],"^Q",["^I",[null]]]],"^G",true,"^8","~$clojure.math.combinatorics/lex-partitions-H","^N",true,"^B","clojure/math/combinatorics.cljc","^F",24,"^10",["^ ","^N",true,"^R",1,"^O",[["^I",["~$N",["^ ","^1<","^1=","^1>","^1?"]]]],"^H",["^I",[["~$N","~$&",["^ ","^1<","^1=","^1>","^1?"]]]],"^Q",["^I",[null]]],"^O",[["^I",["~$N",["^ ","^1<","^1=","^1>","^1?"]]]],"^P",null,"^Q",["^I",[null]],"^D",1,"^C",709,"^E",709,"^R",1,"^S",true,"^H",["^I",[["~$N","~$&",["^ ","^1<","^1=","^1>","^1?"]]]]],"~$nth-combination-distinct",["^ ","^@",null,"^A",["^ ","^B","^9","^C",530,"^D",8,"^E",530,"^F",32,"^G",true,"^H",["^I",["^J",["^I",[["^W","~$t","~$n"]]]]],"^X","The nth element of the sequence of t-combinations of items,\nwhere items is a collection of distinct elements"],"^G",true,"^8","~$clojure.math.combinatorics/nth-combination-distinct","^N",false,"^B","clojure/math/combinatorics.cljc","^F",32,"^O",["^I",[["^W","~$t","~$n"]]],"^P",null,"^Q",["^I",[null,null]],"^D",1,"^C",530,"^E",530,"^R",3,"^S",true,"^H",["^I",["^J",["^I",[["^W","~$t","~$n"]]]]],"^X","The nth element of the sequence of t-combinations of items,\nwhere items is a collection of distinct elements"],"~$drop-permutations",["^ ","^@",null,"^A",["^ ","^B","^9","^C",442,"^D",7,"^E",442,"^F",24,"^H",["^I",["^J",["^I",[["^W","~$n"]]]]],"^X","(drop n (permutations items)) but calculated more directly."],"^8","~$clojure.math.combinatorics/drop-permutations","^N",false,"^B","clojure/math/combinatorics.cljc","^F",24,"^O",["^I",[["^W","~$n"]]],"^P",null,"^Q",["^I",[null,null]],"^D",1,"^C",442,"^E",442,"^R",2,"^S",true,"^H",["^I",["^J",["^I",[["^W","~$n"]]]]],"^X","(drop n (permutations items)) but calculated more directly."],"~$factorial-numbers",["^ ","^@",null,"^A",["^ ","^B","^9","^C",307,"^D",8,"^E",307,"^F",25,"^G",true,"^H",["^I",["^J",["^I",[["~$n"]]]]],"^X","Input is a non-negative base 10 integer, output is the number in the\nfactorial number system (http://en.wikipedia.org/wiki/Factorial_number_system)\nexpressed as a list of 'digits'"],"^G",true,"^8","~$clojure.math.combinatorics/factorial-numbers","^N",false,"^B","clojure/math/combinatorics.cljc","^F",25,"^O",["^I",[["~$n"]]],"^P",null,"^Q",["^I",[null,null]],"^D",1,"^C",307,"^E",307,"^R",1,"^S",true,"^H",["^I",["^J",["^I",[["~$n"]]]]],"^X","Input is a non-negative base 10 integer, output is the number in the\nfactorial number system (http://en.wikipedia.org/wiki/Factorial_number_system)\nexpressed as a list of 'digits'"],"~$count-combinations",["^ ","^@",null,"^A",["^ ","^B","^9","^C",501,"^D",7,"^E",501,"^F",25,"^H",["^I",["^J",["^I",[["^W","~$t"]]]]],"^X","(count (combinations items t)) but computed more directly"],"^8","~$clojure.math.combinatorics/count-combinations","^N",false,"^B","clojure/math/combinatorics.cljc","^F",25,"^O",["^I",[["^W","~$t"]]],"^P",null,"^Q",["^I",[null,null]],"^D",1,"^C",501,"^E",501,"^R",2,"^S",true,"^H",["^I",["^J",["^I",[["^W","~$t"]]]]],"^X","(count (combinations items t)) but computed more directly"],"~$m5",["^ ","^@",null,"^A",["^ ","^B","^9","^C",833,"^D",8,"^E",833,"^F",10,"^G",true,"^H",["^I",["^J",["^I",[["~$n","~$m","~$f","~$c","~$u","~$v","~$a","~$b","~$l","~$r","~$s"]]]]]],"^G",true,"^8","~$clojure.math.combinatorics/m5","^N",false,"^B","clojure/math/combinatorics.cljc","^F",10,"^O",["^I",[["~$n","~$m","~$f","~$c","~$u","~$v","~$a","~$b","~$l","~$r","~$s"]]],"^P",null,"^Q",["^I",[null,null]],"^D",1,"^C",833,"^E",833,"^R",11,"^S",true,"^H",["^I",["^J",["^I",[["~$n","~$m","~$f","~$c","~$u","~$v","~$a","~$b","~$l","~$r","~$s"]]]]]],"~$cartesian-product",["^ ","^@",null,"^A",["^ ","^B","^9","^C",211,"^D",7,"^E",211,"^F",24,"^H",["^I",["^J",["^I",[["~$&","~$seqs"]]]]],"^X","All the ways to take one item from each sequence","^10",["^ ","^N",true,"^R",0,"^O",[["^I",["^20"]]],"^H",["^I",[["~$&","^20"]]],"^Q",["^I",[null]]]],"^8","~$clojure.math.combinatorics/cartesian-product","^N",true,"^B","clojure/math/combinatorics.cljc","^F",24,"^10",["^ ","^N",true,"^R",0,"^O",[["^I",["^20"]]],"^H",["^I",[["~$&","^20"]]],"^Q",["^I",[null]]],"^O",[["^I",["^20"]]],"^P",null,"^Q",["^I",[null]],"^D",1,"^C",211,"^E",211,"^R",0,"^S",true,"^H",["^I",[["~$&","^20"]]],"^X","All the ways to take one item from each sequence"],"~$format",["^ ","^8","~$clojure.math.combinatorics/format","^B","clojure/math/combinatorics.cljc","^C",17,"^D",10,"^E",17,"^F",21,"^A",["^ ","^B","^9","^C",17,"^D",15,"^E",17,"^F",21]],"~$permutations",["^ ","^@",null,"^A",["^ ","^B","^9","^C",283,"^D",7,"^E",283,"^F",19,"^H",["^I",["^J",["^I",[["^W"]]]]],"^X","All the distinct permutations of items, lexicographic by index \n(special handling for duplicate items)."],"^8","~$clojure.math.combinatorics/permutations","^N",false,"^B","clojure/math/combinatorics.cljc","^F",19,"^O",["^I",[["^W"]]],"^P",null,"^Q",["^I",[null,null]],"^D",1,"^C",283,"^E",283,"^R",1,"^S",true,"^H",["^I",["^J",["^I",[["^W"]]]]],"^X","All the distinct permutations of items, lexicographic by index \n(special handling for duplicate items)."],"~$initial-perm-numbers",["^ ","^@",null,"^A",["^ ","^B","^9","^C",356,"^D",8,"^E",356,"^F",28,"^G",true,"^H",["^I",["^J",["^I",[["^17"]]]]],"^X","Takes a sorted frequency map and returns how far into the sequence of\nlexicographic permutations you get by varying the first item"],"^G",true,"^8","~$clojure.math.combinatorics/initial-perm-numbers","^N",false,"^B","clojure/math/combinatorics.cljc","^F",28,"^O",["^I",[["^17"]]],"^P",null,"^Q",["^I",[null,null]],"^D",1,"^C",356,"^E",356,"^R",1,"^S",true,"^H",["^I",["^J",["^I",[["^17"]]]]],"^X","Takes a sorted frequency map and returns how far into the sequence of\nlexicographic permutations you get by varying the first item"],"~$count-subsets",["^ ","^@",null,"^A",["^ ","^B","^9","^C",523,"^D",7,"^E",523,"^F",20,"^H",["^I",["^J",["^I",[["^W"]]]]],"^X","(count (subsets items)) but computed more directly"],"^8","~$clojure.math.combinatorics/count-subsets","^N",false,"^B","clojure/math/combinatorics.cljc","^F",20,"^O",["^I",[["^W"]]],"^P",null,"^Q",["^I",[null,null]],"^D",1,"^C",523,"^E",523,"^R",1,"^S",true,"^H",["^I",["^J",["^I",[["^W"]]]]],"^X","(count (subsets items)) but computed more directly"],"~$factorial-numbers-with-duplicates",["^ ","^@",null,"^A",["^ ","^B","^9","^C",393,"^D",8,"^E",393,"^F",41,"^G",true,"^H",["^I",["^J",["^I",[["~$n","^17"]]]]],"^X","Input is a non-negative base 10 integer n, and a sorted frequency map freqs.\nOutput is a list of 'digits' in this wacky duplicate factorial number system"],"^G",true,"^8","~$clojure.math.combinatorics/factorial-numbers-with-duplicates","^N",false,"^B","clojure/math/combinatorics.cljc","^F",41,"^O",["^I",[["~$n","^17"]]],"^P",null,"^Q",["^I",[null,null]],"^D",1,"^C",393,"^E",393,"^R",2,"^S",true,"^H",["^I",["^J",["^I",[["~$n","^17"]]]]],"^X","Input is a non-negative base 10 integer n, and a sorted frequency map freqs.\nOutput is a list of 'digits' in this wacky duplicate factorial number system"],"~$init",["^ ","^@",null,"^A",["^ ","^B","^9","^C",651,"^D",8,"^E",651,"^F",12,"^G",true,"^H",["^I",["^J",["^I",[["~$n","~$s"]]]]]],"^G",true,"^8","~$clojure.math.combinatorics/init","^N",false,"^B","clojure/math/combinatorics.cljc","^F",12,"^O",["^I",[["~$n","~$s"]]],"^P",null,"^Q",["^I",[null,null]],"^D",1,"^C",651,"^E",651,"^R",2,"^S",true,"^H",["^I",["^J",["^I",[["~$n","~$s"]]]]]],"~$selections",["^ ","^@",null,"^A",["^ ","^B","^9","^C",231,"^D",7,"^E",231,"^F",17,"^H",["^I",["^J",["^I",[["^W","~$n"]]]]],"^X","All the ways of taking n (possibly the same) elements from the sequence of items"],"^8","~$clojure.math.combinatorics/selections","^N",false,"^B","clojure/math/combinatorics.cljc","^F",17,"^O",["^I",[["^W","~$n"]]],"^P",null,"^Q",["^I",[null,null]],"^D",1,"^C",231,"^E",231,"^R",2,"^S",true,"^H",["^I",["^J",["^I",[["^W","~$n"]]]]],"^X","All the ways of taking n (possibly the same) elements from the sequence of items"],"~$factorial",["^ ","^@",null,"^A",["^ ","^B","^9","^C",302,"^D",8,"^E",302,"^F",17,"^G",true,"^H",["^I",["^J",["^I",[["~$n"]]]]]],"^G",true,"^8","~$clojure.math.combinatorics/factorial","^N",false,"^B","clojure/math/combinatorics.cljc","^F",17,"^O",["^I",[["~$n"]]],"^P",null,"^Q",["^I",[null,null]],"^D",1,"^C",302,"^E",302,"^R",1,"^S",true,"^H",["^I",["^J",["^I",[["~$n"]]]]]],"~$dec-key",["^ ","^@",null,"^A",["^ ","^B","^9","^C",388,"^D",8,"^E",388,"^F",15,"^G",true,"^H",["^I",["^J",["^I",[["~$m","~$k"]]]]]],"^G",true,"^8","~$clojure.math.combinatorics/dec-key","^N",false,"^B","clojure/math/combinatorics.cljc","^F",15,"^O",["^I",[["~$m","~$k"]]],"^P",null,"^Q",["^I",[null,null]],"^D",1,"^C",388,"^E",388,"^R",2,"^S",true,"^H",["^I",["^J",["^I",[["~$m","~$k"]]]]]],"~$lex-permutations",["^ ","^@",null,"^A",["^ ","^G",true,"^B","^9","^F",24,"^D",8,"^C",255,"~:deprecated","1.3","^E",255,"^H",["^I",["^J",["^I",[["~$c"]]]]],"^X","DEPRECATED as a public function.\n\nIn prior versions of the combinatorics library, there were two similar functions: permutations and lex-permutations.  It was a source of confusion to know which to call.  Now, you can always call permutations.  When appropriate (i.e., when you pass in a sorted sequence of numbers), permutations will automatically call lex-permutations as a speed optimization."],"^G",true,"^8","~$clojure.math.combinatorics/lex-permutations","^N",false,"^B","clojure/math/combinatorics.cljc","^F",24,"^O",["^I",[["~$c"]]],"^P",null,"^Q",["^I",[null,null]],"^D",1,"^C",255,"^2E","1.3","^E",255,"^R",1,"^S",true,"^H",["^I",["^J",["^I",[["~$c"]]]]],"^X","DEPRECATED as a public function.\n\nIn prior versions of the combinatorics library, there were two similar functions: permutations and lex-permutations.  It was a source of confusion to know which to call.  Now, you can always call permutations.  When appropriate (i.e., when you pass in a sorted sequence of numbers), permutations will automatically call lex-permutations as a speed optimization."],"~$sorted-numbers?",["^ ","^@",null,"^A",["^ ","^B","^9","^C",267,"^D",8,"^E",267,"^F",23,"^G",true,"^H",["^I",["^J",["^I",[["~$s"]]]]],"^X","Returns true iff s is a sequence of numbers in non-decreasing order"],"^G",true,"^8","~$clojure.math.combinatorics/sorted-numbers?","^N",false,"^B","clojure/math/combinatorics.cljc","^F",23,"^O",["^I",[["~$s"]]],"^P",null,"^Q",["^I",[null,null]],"^D",1,"^C",267,"^E",267,"^R",1,"^S",true,"^H",["^I",["^J",["^I",[["~$s"]]]]],"^X","Returns true iff s is a sequence of numbers in non-decreasing order"],"~$index-combinations",["^ ","^@",null,"^A",["^ ","^B","^9","^C",95,"^D",8,"^E",95,"^F",26,"^G",true,"^H",["^I",["^J",["^I",[["~$n","~$cnt"]]]]]],"^G",true,"^8","~$clojure.math.combinatorics/index-combinations","^N",false,"^B","clojure/math/combinatorics.cljc","^F",26,"^O",["^I",[["~$n","^2J"]]],"^P",null,"^Q",["^I",[null,null]],"^D",1,"^C",95,"^E",95,"^R",2,"^S",true,"^H",["^I",["^J",["^I",[["~$n","^2J"]]]]]],"~$count-permutations",["^ ","^@",null,"^A",["^ ","^B","^9","^C",349,"^D",7,"^E",349,"^F",25,"^H",["^I",["^J",["^I",[["~$l"]]]]],"^X","Counts the number of distinct permutations of l"],"^8","~$clojure.math.combinatorics/count-permutations","^N",false,"^B","clojure/math/combinatorics.cljc","^F",25,"^O",["^I",[["~$l"]]],"^P",null,"^Q",["^I",[null,null]],"^D",1,"^C",349,"^E",349,"^R",1,"^S",true,"^H",["^I",["^J",["^I",[["~$l"]]]]],"^X","Counts the number of distinct permutations of l"],"~$vec-lex-permutations",["^ ","^@",null,"^A",["^ ","^B","^9","^C",252,"^D",8,"^E",252,"^F",28,"^G",true,"^H",["^I",["^J",["^I",[["~$v"]]]]]],"^G",true,"^8","~$clojure.math.combinatorics/vec-lex-permutations","^N",false,"^B","clojure/math/combinatorics.cljc","^F",28,"^O",["^I",[["~$v"]]],"^P",null,"^Q",["^I",[null,null]],"^D",1,"^C",252,"^E",252,"^R",1,"^S",true,"^H",["^I",["^J",["^I",[["~$v"]]]]]],"~$list-index",["^ ","^@",null,"^A",["^ ","^B","^9","^C",594,"^D",8,"^E",594,"^F",18,"^G",true,"^H",["^I",["^J",["^I",[["~$l","~$item"]]]]],"^X","The opposite of nth, i.e., from an item in a list, find the n"],"^G",true,"^8","~$clojure.math.combinatorics/list-index","^N",false,"^B","clojure/math/combinatorics.cljc","^F",18,"^O",["^I",[["~$l","^2Q"]]],"^P",null,"^Q",["^I",[null,null]],"^D",1,"^C",594,"^E",594,"^R",2,"^S",true,"^H",["^I",["^J",["^I",[["~$l","^2Q"]]]]],"^X","The opposite of nth, i.e., from an item in a list, find the n"],"~$combinations",["^ ","^@",null,"^A",["^ ","^B","^9","^C",180,"^D",7,"^E",180,"^F",19,"^H",["^I",["^J",["^I",[["^W","~$t"]]]]],"^X","All the unique ways of taking t different elements from items"],"^8","~$clojure.math.combinatorics/combinations","^N",false,"^B","clojure/math/combinatorics.cljc","^F",19,"^O",["^I",[["^W","~$t"]]],"^P",null,"^Q",["^I",[null,null]],"^D",1,"^C",180,"^E",180,"^R",2,"^S",true,"^H",["^I",["^J",["^I",[["^W","~$t"]]]]],"^X","All the unique ways of taking t different elements from items"],"~$count-combinations-unmemoized",["^ ","^@",null,"^A",["^ ","^B","^9","^C",493,"^D",8,"^E",493,"^F",37,"^G",true,"^H",["^I",["^J",["^I",[["^W","~$t"]]]]],"^X","We need an internal version that doesn't memoize each call to count-combinations-from-frequencies\nso that we can memoize over a series of calls."],"^G",true,"^8","~$clojure.math.combinatorics/count-combinations-unmemoized","^N",false,"^B","clojure/math/combinatorics.cljc","^F",37,"^O",["^I",[["^W","~$t"]]],"^P",null,"^Q",["^I",[null,null]],"^D",1,"^C",493,"^E",493,"^R",2,"^S",true,"^H",["^I",["^J",["^I",[["^W","~$t"]]]]],"^X","We need an internal version that doesn't memoize each call to count-combinations-from-frequencies\nso that we can memoize over a series of calls."],"~$iter-perm",["^ ","^@",null,"^A",["^ ","^B","^9","^C",237,"^D",8,"^E",237,"^F",17,"^G",true,"^H",["^I",["^J",["^I",[["~$v"]]]]]],"^G",true,"^8","~$clojure.math.combinatorics/iter-perm","^N",false,"^B","clojure/math/combinatorics.cljc","^F",17,"^O",["^I",[["~$v"]]],"^P",null,"^Q",["^I",[null,null]],"^D",1,"^C",237,"^E",237,"^R",1,"^S",true,"^H",["^I",["^J",["^I",[["~$v"]]]]]],"^7",["^ ","^@",null,"^A",["^ ","^B","^9","^C",645,"^D",8,"^E",645,"^F",14,"^G",true,"^H",["^I",["^J",["^I",[["~$vec","~$index","~$f"]]]]]],"^G",true,"^8","~$clojure.math.combinatorics/update","^N",false,"^B","clojure/math/combinatorics.cljc","^F",14,"^O",["^I",[["^2Y","^2Z","~$f"]]],"^P",null,"^Q",["^I",[null,null]],"^D",1,"^C",645,"^E",645,"^R",3,"^S",true,"^H",["^I",["^J",["^I",[["^2Y","^2Z","~$f"]]]]]],"~$next-distribution",["^ ","^@",null,"^A",["^ ","^B","^9","^C",129,"^D",8,"^E",129,"^F",25,"^G",true,"^H",["^I",["^J",["^I",[["~$m","~$total","~$distribution"]]]]]],"^G",true,"^8","~$clojure.math.combinatorics/next-distribution","^N",false,"^B","clojure/math/combinatorics.cljc","^F",25,"^O",["^I",[["~$m","^31","^32"]]],"^P",null,"^Q",["^I",[null,null]],"^D",1,"^C",129,"^E",129,"^R",3,"^S",true,"^H",["^I",["^J",["^I",[["~$m","^31","^32"]]]]]],"~$index-remainder",["^ ","^@",null,"^A",["^ ","^B","^9","^C",372,"^D",8,"^E",372,"^F",23,"^G",true,"^H",["^I",["^J",["^I",[["~$perm-numbers","~$n"]]]]],"^X","Finds the index and remainder from the initial-perm-numbers."],"^G",true,"^8","~$clojure.math.combinatorics/index-remainder","^N",false,"^B","clojure/math/combinatorics.cljc","^F",23,"^O",["^I",[["^35","~$n"]]],"^P",null,"^Q",["^I",[null,null]],"^D",1,"^C",372,"^E",372,"^R",2,"^S",true,"^H",["^I",["^J",["^I",[["^35","~$n"]]]]],"^X","Finds the index and remainder from the initial-perm-numbers."],"~$distribute",["^ ","^@",null,"^A",["^ ","^B","^9","^C",115,"^D",8,"^E",115,"^F",18,"^G",true,"^H",["^I",["^J",["^I",[["~$m","^2Z","^31","^32","~$already-distributed"]]]]]],"^G",true,"^8","~$clojure.math.combinatorics/distribute","^N",false,"^B","clojure/math/combinatorics.cljc","^F",18,"^O",["^I",[["~$m","^2Z","^31","^32","^38"]]],"^P",null,"^Q",["^I",[null,null]],"^D",1,"^C",115,"^E",115,"^R",5,"^S",true,"^H",["^I",["^J",["^I",[["~$m","^2Z","^31","^32","^38"]]]]]],"~$count-combinations-from-frequencies",["^ ","^@",null,"^A",["^ ","^B","^9","^C",478,"^D",25,"^E",478,"^F",60,"~:dynamic",true,"^G",true,"^H",["^I",["^J",["^I",[["^17","~$t"]]]]]],"^G",true,"^8","~$clojure.math.combinatorics/count-combinations-from-frequencies","^N",false,"^B","clojure/math/combinatorics.cljc","^F",60,"^O",["^I",[["^17","~$t"]]],"^P",null,"^Q",["^I",[null,null]],"^D",1,"^3;",true,"^C",478,"^E",478,"^R",2,"^S",true,"^H",["^I",["^J",["^I",[["^17","~$t"]]]]]],"~$multi-perm",["^ ","^@",null,"^A",["^ ","^B","^9","^C",273,"^D",8,"^E",273,"^F",18,"^G",true,"^H",["^I",["^J",["^I",[["~$l"]]]]],"^X","Handles the case when you want the permutations of a list with duplicate items."],"^G",true,"^8","~$clojure.math.combinatorics/multi-perm","^N",false,"^B","clojure/math/combinatorics.cljc","^F",18,"^O",["^I",[["~$l"]]],"^P",null,"^Q",["^I",[null,null]],"^D",1,"^C",273,"^E",273,"^R",1,"^S",true,"^H",["^I",["^J",["^I",[["~$l"]]]]],"^X","Handles the case when you want the permutations of a list with duplicate items."],"~$nth-permutation-distinct",["^ ","^@",null,"^A",["^ ","^B","^9","^C",324,"^D",8,"^E",324,"^F",32,"^G",true,"^H",["^I",["^J",["^I",[["~$l","~$n"]]]]],"^X","Input should be a sorted sequential collection l of distinct items, \noutput is nth-permutation (0-based)"],"^G",true,"^8","~$clojure.math.combinatorics/nth-permutation-distinct","^N",false,"^B","clojure/math/combinatorics.cljc","^F",32,"^O",["^I",[["~$l","~$n"]]],"^P",null,"^Q",["^I",[null,null]],"^D",1,"^C",324,"^E",324,"^R",2,"^S",true,"^H",["^I",["^J",["^I",[["~$l","~$n"]]]]],"^X","Input should be a sorted sequential collection l of distinct items, \noutput is nth-permutation (0-based)"],"~$nth-subset",["^ ","^@",null,"^A",["^ ","^B","^9","^C",578,"^D",7,"^E",578,"^F",17,"^H",["^I",["^J",["^I",[["^W","~$n"]]]]]],"^8","~$clojure.math.combinatorics/nth-subset","^N",false,"^B","clojure/math/combinatorics.cljc","^F",17,"^O",["^I",[["^W","~$n"]]],"^P",null,"^Q",["^I",[null,null]],"^D",1,"^C",578,"^E",578,"^R",2,"^S",true,"^H",["^I",["^J",["^I",[["^W","~$n"]]]]]],"~$subsets",["^ ","^@",null,"^A",["^ ","^B","^9","^C",205,"^D",7,"^E",205,"^F",14,"^H",["^I",["^J",["^I",[["^W"]]]]],"^X","All the subsets of items"],"^8","~$clojure.math.combinatorics/subsets","^N",false,"^B","clojure/math/combinatorics.cljc","^F",14,"^O",["^I",[["^W"]]],"^P",null,"^Q",["^I",[null,null]],"^D",1,"^C",205,"^E",205,"^R",1,"^S",true,"^H",["^I",["^J",["^I",[["^W"]]]]],"^X","All the subsets of items"],"~$m6",["^ ","^@",null,"^A",["^ ","^B","^9","^C",870,"^D",8,"^E",870,"^F",10,"^G",true,"^H",["^I",["^J",["^I",[["~$n","~$m","~$f","~$c","~$u","~$v","~$a","~$b","~$l","~$r","~$s"]]]]]],"^G",true,"^8","~$clojure.math.combinatorics/m6","^N",false,"^B","clojure/math/combinatorics.cljc","^F",10,"^O",["^I",[["~$n","~$m","~$f","~$c","~$u","~$v","~$a","~$b","~$l","~$r","~$s"]]],"^P",null,"^Q",["^I",[null,null]],"^D",1,"^C",870,"^E",870,"^R",11,"^S",true,"^H",["^I",["^J",["^I",[["~$n","~$m","~$f","~$c","~$u","~$v","~$a","~$b","~$l","~$r","~$s"]]]]]],"~$multi-comb",["^ ","^@",null,"^A",["^ ","^B","^9","^C",167,"^D",8,"^E",167,"^F",18,"^G",true,"^H",["^I",["^J",["^I",[["~$l","~$t"]]]]],"^X","Handles the case when you want the combinations of a list with duplicate items."],"^G",true,"^8","~$clojure.math.combinatorics/multi-comb","^N",false,"^B","clojure/math/combinatorics.cljc","^F",18,"^O",["^I",[["~$l","~$t"]]],"^P",null,"^Q",["^I",[null,null]],"^D",1,"^C",167,"^E",167,"^R",2,"^S",true,"^H",["^I",["^J",["^I",[["~$l","~$t"]]]]],"^X","Handles the case when you want the combinations of a list with duplicate items."],"~$multiset-partitions-M",["^ ","^@",null,"^A",["^ ","^B","^9","^C",771,"^D",8,"^E",771,"^F",29,"^G",true,"^H",["^I",["^J",["^I",[["~$multiset","~$r","~$s"],["~$n","~$m","~$f","~$c","~$u","~$v","~$a","~$b","~$l","~$r","~$s"]]]]],"^10",["^ ","^N",false,"^R",11,"^O",["^I",[["^3J","~$r","~$s"],["~$n","~$m","~$f","~$c","~$u","~$v","~$a","~$b","~$l","~$r","~$s"]]],"^H",["^I",[["^3J","~$r","~$s"],["~$n","~$m","~$f","~$c","~$u","~$v","~$a","~$b","~$l","~$r","~$s"]]],"^Q",["^I",[null,null]]]],"^G",true,"^8","~$clojure.math.combinatorics/multiset-partitions-M","^N",false,"^B","clojure/math/combinatorics.cljc","^F",29,"^10",["^ ","^N",false,"^R",11,"^O",["^I",[["^3J","~$r","~$s"],["~$n","~$m","~$f","~$c","~$u","~$v","~$a","~$b","~$l","~$r","~$s"]]],"^H",["^I",[["^3J","~$r","~$s"],["~$n","~$m","~$f","~$c","~$u","~$v","~$a","~$b","~$l","~$r","~$s"]]],"^Q",["^I",[null,null]]],"^O",["^I",[["^3J","~$r","~$s"],["~$n","~$m","~$f","~$c","~$u","~$v","~$a","~$b","~$l","~$r","~$s"]]],"^P",null,"^Q",["^I",[null,null]],"^D",1,"^C",771,"^E",771,"^R",11,"^S",true,"^H",["^I",[["^3J","~$r","~$s"],["~$n","~$m","~$f","~$c","~$u","~$v","~$a","~$b","~$l","~$r","~$s"]]]],"~$bounded-distributions",["^ ","^@",null,"^A",["^ ","^B","^9","^C",156,"^D",8,"^E",156,"^F",29,"^G",true,"^H",["^I",["^J",["^I",[["~$m","~$t"]]]]]],"^G",true,"^8","~$clojure.math.combinatorics/bounded-distributions","^N",false,"^B","clojure/math/combinatorics.cljc","^F",29,"^O",["^I",[["~$m","~$t"]]],"^P",null,"^Q",["^I",[null,null]],"^D",1,"^C",156,"^E",156,"^R",2,"^S",true,"^H",["^I",["^J",["^I",[["~$m","~$t"]]]]]],"~$unchunk",["^ ","^@",null,"^A",["^ ","^B","^9","^C",193,"^D",8,"^E",193,"^F",15,"^G",true,"^H",["^I",["^J",["^I",[["~$s"]]]]],"^X","Given a sequence that may have chunks, return a sequence that is 1-at-a-time\nlazy with no chunks. Chunks are good for efficiency when the data items are\nsmall, but when being processed via map, for example, a reference is kept to\nevery function result in the chunk until the entire chunk has been processed,\nwhich increases the amount of memory in use that cannot be garbage\ncollected."],"^G",true,"^8","~$clojure.math.combinatorics/unchunk","^N",false,"^B","clojure/math/combinatorics.cljc","^F",15,"^O",["^I",[["~$s"]]],"^P",null,"^Q",["^I",[null,null]],"^D",1,"^C",193,"^E",193,"^R",1,"^S",true,"^H",["^I",["^J",["^I",[["~$s"]]]]],"^X","Given a sequence that may have chunks, return a sequence that is 1-at-a-time\nlazy with no chunks. Chunks are good for efficiency when the data items are\nsmall, but when being processed via map, for example, a reference is kept to\nevery function result in the chunk until the entire chunk has been processed,\nwhich increases the amount of memory in use that cannot be garbage\ncollected."],"~$permutation-index",["^ ","^@",null,"^A",["^ ","^B","^9","^C",620,"^D",7,"^E",620,"^F",24,"^H",["^I",["^J",["^I",[["^W"]]]]],"^X","Input must be a sortable collection of items.  Returns the n such that\n    (nth-permutation (sort items) n) is items."],"^8","~$clojure.math.combinatorics/permutation-index","^N",false,"^B","clojure/math/combinatorics.cljc","^F",24,"^O",["^I",[["^W"]]],"^P",null,"^Q",["^I",[null,null]],"^D",1,"^C",620,"^E",620,"^R",1,"^S",true,"^H",["^I",["^J",["^I",[["^W"]]]]],"^X","Input must be a sortable collection of items.  Returns the n such that\n    (nth-permutation (sort items) n) is items."]],"~:require-macros",["^ ","^4","^4"],"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["^?","^T","~$&","~$t","^V","^W","^15","^K","^M","^Z","^1?","^2=","^12","^18","^14","^16","~$N","^13","^19","^1F","^1;","^1A","^1C","^1@","^1B","^1E","^1D","~$a","^1G","^1I","^1:","^1K","^1M","^1J","^1O","^1<","^1Q","^11","^G","~$u","~:else","^1S","^Y","^U","^1U","^1P","^[","^1R","^1N","^1Z","~:ns","^1W","^8","^1Y","^39","^1X","~$r","^N","^1[","^22","^20","^35","^38","^B","~$v","^24","^F","^10","^33","^26","^28","^2;","^2F","^2Z","^27","^2Y","^O","^25","^2:","^29","^2<","^2?","^21","^23","^2>","^2C","^9","^2A","^Q","^2@","^D","^2B","^2D","^2R","^2G","^2I","^2L","^2N","~:author","^3O","~$n","^2[","~$m","^L","^2P","^2Q","^2T","^2M","^2K","^2S","^2U","^2W","^3J","^2X","^7","^3;","^C","^3M","^2H","^2V","^30","^1=","^34","^2E","~$s","^2J","^17","^36","~:declared","~$k","^37","~$l","^E","^2O","^3:","~$c","^3@","^3>","^1V","^R","^3=","^31","^1L","^1T","^3?","^1H","^3K","^3F","^3A","^3H","^H","^3C","^3E","^3G","^3B","^1>","^3I","^X","^3<","^3L","~$b","^3D","~:test","^32","^3Q","^3N","^3P","~$f"]],"~:order",["^23","^3V","^8","^B","^F","^D","^C","^E","^H","^X","^3Y","^9","^3W","^22","^13","^G","^12","~$s","^2K","^2I","~$n","^2J","^39","^37","~$m","^2Z","^31","^32","^38","^3U","^33","^30","^3M","^3L","~$t","^3H","^3G","~$l","^2T","^2S","^W","^3O","^3N","^3D","^3C","^21","^10","^1[","^N","^R","^O","^Q","^20","~$&","^2?","^2>","^2X","^2W","~$v","^2O","^2N","^2F","^2E","^2D","~$c","^2H","^2G","^3>","^3=","^25","^24","^2A","^2@","^1V","^1U","^1D","^1C","^3@","^3?","^18","^16","^17","^2M","^2L","^27","^26","^36","^34","^35","^2C","^2B","~$k","^2;","^2:","^15","^14","^1B","^1A","^1T","^1S","^1F","^1E","^3<","^3;","^3:","^2V","^2U","^1X","^1W","^M","^?","^K","^L","^1N","^1M","^29","^28","^1R","^1Q","^1:","^19","^Y","^V","^3B","^3A","^2R","^2P","^2Q","^1H","^1G","^U","^T","^3Q","^3P","^2[","^7","^2Y","~$f","^2=","^2<","^1L","^1K","~$r","~$a","~$b","^1P","^1O","~$N","^1<","^1>","^1=","^1?","^1J","^1I","^[","^1Z","^3X","^1Y","^3F","^3E","^3K","^3I","^3J","~$u","^1@","^1;","^11","^Z"]],"^X","Efficient, functional algorithms for generating lazy\nsequences for common combinatorial functions. (See the source code \nfor a longer description.)"]