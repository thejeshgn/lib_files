["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$clojure.test.check.random.doubles","~:imports",null,"~:requires",["^ ","~$longs","~$clojure.test.check.random.longs","^:","^:"],"~:uses",null,"~:defs",["^ ","~$rand-long->rand-double",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","^6","~:line",24,"~:column",7,"~:end-line",24,"~:end-column",29,"~:arglists",["~#list",["~$quote",["^F",[["~$long"]]]]],"~:doc","Given a uniformly distributed random long, returns a uniformly\n  distributed double between 0.0 (inclusive) and 1.0 (exclusive)."],"^5","~$clojure.test.check.random.doubles/rand-long->rand-double","~:variadic",false,"^@","clojure/test/check/random/doubles.cljs","^D",29,"~:method-params",["^F",[["^H"]]],"~:protocol-impl",null,"~:arglists-meta",["^F",[null,null]],"^B",1,"^A",24,"^C",24,"~:max-fixed-arity",1,"~:fn-var",true,"^E",["^F",["^G",["^F",[["^H"]]]]],"^I","Given a uniformly distributed random long, returns a uniformly\n  distributed double between 0.0 (inclusive) and 1.0 (exclusive)."],"~$double-unit",["^ ","^5","~$clojure.test.check.random.doubles/double-unit","^@","clojure/test/check/random/doubles.cljs","^A",14,"^B",1,"^C",14,"^D",27,"~:private",true,"^?",["^ ","^@","^6","^A",14,"^B",16,"^C",14,"^D",27,"^S",true]],"~$big-double-unit",["^ ","^5","~$clojure.test.check.random.doubles/big-double-unit","^@","clojure/test/check/random/doubles.cljs","^A",20,"^B",1,"^C",20,"^D",31,"^S",true,"^?",["^ ","^@","^6","^A",20,"^B",16,"^C",20,"^D",31,"^S",true]]],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["^R","^S","^6","~:ns","^5","^=","^@","^H","^D","^U","^B","~:author","^Q","^A","^C","^J","^T","^E","^I","~:test"]],"~:order",["^R","^S","^Y","^5","^@","^D","^B","^A","^C","^E","^I","^[","^6","^Z","^Q","^U","^T","^J","^=","^H"]],"^I",null]